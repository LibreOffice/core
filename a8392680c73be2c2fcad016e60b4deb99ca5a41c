{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c3f15620_6e57e5da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2022-03-28T13:53:43Z",
      "side": 1,
      "message": "It seems that std::hypot is much slower that square root:\nhttps://stackoverflow.com/questions/32435796/when-to-use-stdhypotx-y-over-stdsqrtxx-yy\n\nI am wondering if this change is worth of it.",
      "revId": "a8392680c73be2c2fcad016e60b4deb99ca5a41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02e41553_f2aa8860",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-03-28T14:15:04Z",
      "side": 1,
      "message": "I confirm that hypot is slower than sqrt(x*x+y*y); however, it has very important benefit of strong guarantee that the na√Øve implementation lacks; and premature optimization is IMO not a good thing: if this shows in profiling, we can try to optimize specific call sites - but otherwise, the more robust implementation is better.",
      "parentUuid": "c3f15620_6e57e5da",
      "revId": "a8392680c73be2c2fcad016e60b4deb99ca5a41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "101f9d4a_9df747c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003564
      },
      "writtenOn": "2022-03-28T14:29:43Z",
      "side": 1,
      "message": "I can\u0027t get 20x slower runtime as that question claims. For 10 million uses, sqrt seems to be 3-4x faster for me. But there\u0027s no reason IMO to prefer sqrt outside of hot code and after a profiler shows significant slowdown.",
      "parentUuid": "02e41553_f2aa8860",
      "revId": "a8392680c73be2c2fcad016e60b4deb99ca5a41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bbda185_23321935",
        "filename": "chart2/source/view/charttypes/PieChart.cxx",
        "patchSetId": 1
      },
      "lineNbr": 516,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-03-28T13:54:21Z",
      "side": 1,
      "message": "Here and elsewhere:\nThe explicit cast to double is not needed - please drop it. The implicit cast should be used as much as possible. In case of 32-bit integer, the implicit cast is completely safe (all 32-bit integers are representable in double without loss).",
      "range": {
        "startLine": 516,
        "startChar": 33,
        "endLine": 516,
        "endChar": 52
      },
      "revId": "a8392680c73be2c2fcad016e60b4deb99ca5a41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11a4f5fe_543ecf10",
        "filename": "chart2/source/view/charttypes/PieChart.cxx",
        "patchSetId": 1
      },
      "lineNbr": 516,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2022-03-28T15:48:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8bbda185_23321935",
      "range": {
        "startLine": 516,
        "startChar": 33,
        "endLine": 516,
        "endChar": 52
      },
      "revId": "a8392680c73be2c2fcad016e60b4deb99ca5a41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}