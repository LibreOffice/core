{
  "comments": [
    {
      "key": {
        "uuid": "25ecba12_237561a8",
        "filename": "canvas/source/cairo/cairo_canvashelper_text.cxx",
        "patchSetId": 6
      },
      "lineNbr": 103,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-10-21T06:21:56Z",
      "side": 1,
      "message": "The cast seems redundant for a result of fmod (no greater than 2*pi) multiplied by (1800/pi)... and generally it seems that the ctor could itself do the rounding.",
      "range": {
        "startLine": 103,
        "startChar": 45,
        "endLine": 103,
        "endChar": 69
      },
      "revId": "0fb58a1ff168ae122e9c8993a3136658e3b0e3f0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c07be24_1288b53c",
        "filename": "drawinglayer/source/primitive2d/graphicprimitive2d.cxx",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-10-21T06:40:47Z",
      "side": 1,
      "message": "A custom literal could be interesting? like operator\"\"_deg10()\n\n    aSuppressGraphicAttr.SetRotation(0_deg10);",
      "range": {
        "startLine": 71,
        "startChar": 37,
        "endLine": 71,
        "endChar": 48
      },
      "revId": "0fb58a1ff168ae122e9c8993a3136658e3b0e3f0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "397a392a_c930aa75",
        "filename": "drawinglayer/source/primitive2d/graphicprimitive2d.cxx",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2020-10-21T06:41:48Z",
      "side": 1,
      "message": "Sure, sounds good",
      "parentUuid": "5c07be24_1288b53c",
      "range": {
        "startLine": 71,
        "startChar": 37,
        "endLine": 71,
        "endChar": 48
      },
      "revId": "0fb58a1ff168ae122e9c8993a3136658e3b0e3f0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3ff1f4b_8766ae99",
        "filename": "include/vcl/gradient.hxx",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-10-22T09:30:16Z",
      "side": 1,
      "message": "Changing this from unsigned to singed causes issues, see the parenthetical last paragraph of the commit message of \u003chttps://gerrit.libreoffice.org/c/core/+/104650\u003e \"Guard against bad stream in TypeSerializer::readGradient\".",
      "revId": "0fb58a1ff168ae122e9c8993a3136658e3b0e3f0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fea8d6c_b6b683d6",
        "filename": "include/vcl/gradient.hxx",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2020-10-22T09:33:27Z",
      "side": 1,
      "message": "Yeah, different places in the code disagree about whether this should be\n\n   sal_uInt16\n   sal_Int16\n   long\n   unsigned long\n   sal_Int32\n\nso I chose the option that made sense given that we need a range of at least\n   -3600 to 3600\n(for calculation purposes) \n\nlots of places in the code then reduce that to a positive range before using it.",
      "parentUuid": "a3ff1f4b_8766ae99",
      "revId": "0fb58a1ff168ae122e9c8993a3136658e3b0e3f0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "421a7857_46800687",
        "filename": "include/vcl/gradient.hxx",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-10-22T09:45:04Z",
      "side": 1,
      "message": "So you consider \u003chttps://git.libreoffice.org/core/+/0e8e352cc78af9b8cee27a77b0ac8e2e8f98f8cc%5E!/\u003e \"clamp angle to valid value\" the right fix to address this resulting sal_Int16 vs. sal_uInt16 mismatch in TypeSerializer::readGradient?  In which case, lets leave it at that.",
      "parentUuid": "7fea8d6c_b6b683d6",
      "revId": "0fb58a1ff168ae122e9c8993a3136658e3b0e3f0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b218b831_13d94fcf",
        "filename": "include/vcl/gradient.hxx",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2020-10-22T09:52:02Z",
      "side": 1,
      "message": "I don\u0027t think we need to worry about the mismatch - any data that could cause trouble because of the mismatch is already bad data.\n\nBut your fix to prevent accessing uninitialised data is definitely necessary.\n\nI\u0027m a bit surprised that those readUInt16 methods are not throwing an exception when we read past EOF, but perhaps that is my Java bias showing.",
      "parentUuid": "421a7857_46800687",
      "revId": "0fb58a1ff168ae122e9c8993a3136658e3b0e3f0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}