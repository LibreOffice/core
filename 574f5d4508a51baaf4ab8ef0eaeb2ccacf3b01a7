{
  "comments": [
    {
      "key": {
        "uuid": "ba5da102_41aca8ed",
        "filename": "basic/source/basmgr/basicmanagerrepository.cxx",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2016-09-12T07:19:53Z",
      "side": 1,
      "message": "the assert(p\u0026\u0026\"message\") hack only works for messages that are string literals; and I personally wouldn\u0027t use it at all, just plain assert(p)  (when such an assert hits, you likely need to look up details about the failed code anyway, so you\u0027ll then see what the reason for the failure was; if it\u0027s non-obvious, you can add a comment at that place; but you cannot insert values of variables in an assert\u0027s message, like you can do with SAL_WARN et al)",
      "revId": "574f5d4508a51baaf4ab8ef0eaeb2ccacf3b01a7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5da102_136d9b04",
        "filename": "basic/source/basmgr/basicmanagerrepository.cxx",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1001305
      },
      "writtenOn": "2016-09-22T10:57:23Z",
      "side": 1,
      "message": "I will remove this",
      "parentUuid": "ba5da102_41aca8ed",
      "revId": "574f5d4508a51baaf4ab8ef0eaeb2ccacf3b01a7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5da102_21afb4e4",
        "filename": "basic/source/runtime/basrdll.cxx",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2016-09-12T07:19:53Z",
      "side": 1,
      "message": "either the invariant is that pThis must be non-null here (so an assert is warranted), but then then following if(pThis) is redundant; or the invariant is that pThis may be null here, but then an assert is not warranted",
      "revId": "574f5d4508a51baaf4ab8ef0eaeb2ccacf3b01a7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5da102_b374effd",
        "filename": "basic/source/runtime/basrdll.cxx",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1001305
      },
      "writtenOn": "2016-09-22T10:57:23Z",
      "side": 1,
      "message": "This seems like a regular assertion. There are also other instances of this behavior throughout the code. What should be the approach here? Should we adjust the code as stated in your comment?",
      "parentUuid": "ba5da102_21afb4e4",
      "revId": "574f5d4508a51baaf4ab8ef0eaeb2ccacf3b01a7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_d5678f23",
        "filename": "basic/source/runtime/basrdll.cxx",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-01-06T08:19:41Z",
      "side": 1,
      "message": "There is no easy solution here.  Ideally, you\u0027d need to understand the surrounding code deeply enough to know what the real invariant is here, and then act accordingly.\n\nSuperficially, it may look like the invariant \"of course\" is that pThis may legitimately be null here (why else would there be the \u0027if ( pThis )\u0027?).  Unfortunately, quite some parts of LO use this \"defensive programming\" anti-pattern where impossible conditions are checked and acted upon in dubious ways, obfuscating the code and turning otherwise straight-to-detect programming errors into a nightmare.  In short, it is useful to detect such \"defensive programming\" nonsense and get it fixed.  Occurrences of \u0027DBG_ASSERT(x); if (x) ...\u0027 may or may not be indicator of such \"defensive programming\", and it would be unfortunate if such signposts were naively cleaned up the wrong way, removing clues that would be helpful in a true fix.",
      "parentUuid": "ba5da102_b374effd",
      "revId": "574f5d4508a51baaf4ab8ef0eaeb2ccacf3b01a7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}