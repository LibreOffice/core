{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f24b3eec_6c55fb0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-06-28T06:04:06Z",
      "side": 1,
      "message": "It\u0027s just for the test to see what info Jenkins machines on macos may provide.\n(I wonder too if we shouldn\u0027t use \"deep\" parameter each time).",
      "revId": "aa64a96c4e40401be200f3ec45ec923190532ed7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ccb9783_5d02bf56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000027
      },
      "writtenOn": "2022-06-28T08:48:25Z",
      "side": 1,
      "message": "jenkins builders don\u0027t use codesigning, so you won\u0027t see anything here.\nAnd no, --deep is considered bad, don\u0027t use it. you\u0027re meant to sign inside-out.\n\nAnd I can write hundred times that it is not a codesigning issue, but people still wont\u0027t believe it.",
      "revId": "aa64a96c4e40401be200f3ec45ec923190532ed7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78825ae5_59bca65a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-06-28T16:02:12Z",
      "side": 1,
      "message": "Ok seeing https://bugs.documentfoundation.org/show_bug.cgi?id\u003d128233#c30 and https://bugs.documentfoundation.org/show_bug.cgi?id\u003d128233#c34 or from a duplicate (https://bugs.documentfoundation.org/show_bug.cgi?id\u003d132025#c16 but indeed there\u0027s also https://bugs.documentfoundation.org/show_bug.cgi?id\u003d132025#c13 which seems to show there\u0027s still be a pb.\nBut why does this seem to work for 3 different people?\nIf \"strict\" and \"verbose\u003d4\" make no harm, what about to use them? At least everybody will see that it doesn\u0027t work and may propose something else.\n",
      "revId": "aa64a96c4e40401be200f3ec45ec923190532ed7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9c41ef7_3b87aeed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-06-28T19:06:14Z",
      "side": 1,
      "message": "About \"deep\" option, reading https://developer.apple.com/library/archive/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-TNTAG404:\n\"Important: While the --deep option can be applied to a signing operation, this is not recommended. We recommend that you sign code inside out in individual stages (as Xcode does automatically). Signing with --deep is for emergency repairs and temporary adjustments only.\", you\u0027re right for signing action.\n\nBut just above, I read:\n\"When verifying signatures, add --deep to perform recursive validation of nested code. Without --deep, validation will be shallow: it will check the immediate nested content but not check that fully. Note that Gatekeeper always performs --deep style validation.\"\nbut we never use codesign with \"verify\" option as indicated in https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html\n\"Testing Conformance with Command Line Tools\n\nTo get a sense of whether your app conforms to Gatekeeper policies when you distribute with Developer ID, you can use the following codesign command to mimic what Gatekeeper does:\n\ncodesign --verify --deep --strict --verbose\u003d2 \u003ccode-path\u003e\n\nIf your app is signed properly, the output looks like this:\n\n\u003ccode-path\u003e: valid on disk\n\n\u003ccode-path\u003e: satisfies its Designated Requirement\"\n\nThere\u0027s also just below:\n\"\nAlternately, the spctl utility is actually a command-line interface to the same security assessment policy subsystem that Gatekeeper uses. Like Gatekeeper, spctl only accepts Developer ID signed apps and apps downloaded from the Mac App Store by default. Run spctl on your app like this:\n\nspctl -a -t exec -vv \u003ccode-path\u003e\n\nThis is the output if your app\u0027s signature is accepted:\n\n\u003ccode-path\u003e: accepted\n\nsource\u003dDeveloper ID\n\norigin\u003d\u003cidentity\u003e\n\nIf you get any result other than accepted, your app is not compatible with Gatekeeper.\n\"\n\nBTW, you indicated Jenkins don\u0027t use codesigning, do macos TBs use it?",
      "revId": "aa64a96c4e40401be200f3ec45ec923190532ed7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e1b8c02_b83bb9a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000027
      },
      "writtenOn": "2022-06-29T12:25:18Z",
      "side": 1,
      "message": "you write it yourself: The codesign command used in the bugtickets is to *verify* a signature, and since that passes/doesn\u0027t find any issues, there is nothing wrong with the signature in the first place.\n\nAnd no, none of the automated builders use codesigning.\n\nI suspect that for the affected user the prompt from macOS to grant access was not shown for some reason and did timeout and thus LibreOffice was blacklisted... so another way to retrigger probably would be to use\n\n  tccutil reset SystemPolicyDocumentsFolder\n\nand/or\n\n  tccutil reset SystemPolicyDesktopFolder\n\nfor documents folder and Desktop folder respectively without any additional parameter this will reset the permissions for all apps, if you only want to do it for libreoffice, use\n\n  tccutil reset SystemPolicyDesktopFolder org.libreoffice.script\n\nor to reset every privacy decision related to LibreOffice use\n  tccutil reset All org.libreoffice.script\n  \n \nAlso note that when running from terminal by launching /path/to/LibreOffice.app/Contents/MacOS/soffice it will be the Terminal\u0027s permissions that are applied, you\u0027d have to use \"open /path/to/LibreOffice.app\" or run it from finder to have it run in its own scope",
      "revId": "aa64a96c4e40401be200f3ec45ec923190532ed7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34ab8cd0_301ed984",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000027
      },
      "writtenOn": "2022-06-29T13:21:52Z",
      "side": 1,
      "message": "Just worked myself to all the comments once more to find steps to reproduce the problem, and low-and-behold, the user who most frequently spammed the \"add the codesign command\" wrote:\n####\nhttps://bugs.documentfoundation.org/show_bug.cgi?id\u003d128233#c65\nI just discovered that under \"(macOS) Settings \u003e Security \u003e Files and Folders\", access to the Documents folder was denied for LibreOffice. Once I granted access, opening the file dialogue worked as expected.\n####\n\nI\u0027ll -1 this one and unless someone can provide clear steps to reproduce with 7.3.4, I\u0027ll continue to ignore the problem as \"very corner-case\" or \"user shoot him/herself in the foot by previously denying access\"\n\nNo matter what order, it always works as expected (both as admin user as well as standard user):\n* reset permissions using the \"tccutil reset All org.libreoffice.script\" command mentioned above\n* drag LibreOffice to a folder on disk\nA) run LibreOffice without installing the languagepack first\n* you get the gatekeeper prompt whether you want to run the application\n* LibreOffice launches in English, as expected. Create a new file\n* Hit save, file dialog defaults to Documents directory, on hitting \"Save\"\n  → macOS prompts and asks whether to grant LibreOffice permission to access the Documents folder\n  → approve and LO can save successfully.\n  → new documents can be saved to documents folder without a second prompt\n* Use Save as (or just create another document, doesn\u0027t make a difference) and select the Desktop folder in the file selector, on hitting \"save\"\n  → macOS prompts and asks whether to grant LibreOffice permission to the Desktop folder\n  → approve and LO can save successfully\n  → further saves to the Desktop won\u0027t trigger the prompt\n* close LibreOffice and install the languagepack\n* launch LibreOffice again and now comes up in translated form\n* saving documents to desktop or documents folder don\u0027t trigger a prompt and work\nB) install the languagepack without launching LibreOffice first\n  → after hitting \"install\" in the languagepack installer it will trigger launching LO and you\u0027ll get the the gatekeeper prompt asking whether you want to launch LibreOffice\n* approve and the langaugepack installation continues\nB.1) after languagepack installation is complete, LO still is running, close and restart to use it in the new locale\n* creating documents and saving them works as above, first time you try to access Documents or Desktop you get the permission prompt, subsequent ones work without interruption.\nB.2) after languagepack isntallation create a document in the still-running English LO and save\n* get the prompts as expected and saving works.\n* after relaunching to switch to the new UI language saving works without additional prompts.\n\nSo it is a complete non-issue for me. Everything works as it should/as expected.\nAnother user mentioned LibreOffice was installed via homebrew - no idea what that means, if it is not a build done by me, I don\u0027t care. If it doesn\u0027t install via dmg, I don\u0027t care. (have no control over it in that case anyway).\n",
      "revId": "aa64a96c4e40401be200f3ec45ec923190532ed7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ea31e74_4cac5dd9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-06-29T14:03:38Z",
      "side": 1,
      "message": "Thank you for the really detailed feedback!\nIMHO, I think it would be useful to copy this comment verbatim on the bugtracker.\nThen we\u0027d put this WFM and if someone still reproduces the pb after having applied all what you indicated, he/she\u0027ll have to indicate the precise process to reproduce this.\nWhat do you think?\n\nMeanwhile, let\u0027s abandon this patch then.",
      "revId": "aa64a96c4e40401be200f3ec45ec923190532ed7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}