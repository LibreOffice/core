{
  "comments": [
    {
      "key": {
        "uuid": "dab17558_416ab081",
        "filename": "sc/source/ui/inc/tabview.hxx",
        "patchSetId": 4
      },
      "lineNbr": 496,
      "author": {
        "id": 1000868
      },
      "writtenOn": "2016-01-19T20:15:49Z",
      "side": 1,
      "message": "Although i sent this parameter by default \"both\", i had to change other function calls because of \"This method expects 2 arguments, you\u0027ve sent 1 argument\"",
      "range": {
        "startLine": 496,
        "startChar": 51,
        "endLine": 496,
        "endChar": 80
      },
      "revId": "ef0cfc9c6d5ef79f80b715025f298f8e3c3983eb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_6159b45a",
        "filename": "sc/source/ui/inc/tabview.hxx",
        "patchSetId": 4
      },
      "lineNbr": 496,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-01-20T14:20:32Z",
      "side": 1,
      "message": "That\u0027s odd, maybe because of the Ascii string initialization instead of OUString(\"both\"). But why use an OUString here and not an enum? For one, dedicated enum values are safer to use because they can\u0027t be accidentally mistyped; second, comparing an enum is faster than comparing strings. Also, with an enum default value it should not be necessary to change other calls.",
      "parentUuid": "dab17558_416ab081",
      "range": {
        "startLine": 496,
        "startChar": 51,
        "endLine": 496,
        "endChar": 80
      },
      "revId": "ef0cfc9c6d5ef79f80b715025f298f8e3c3983eb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_010a6826",
        "filename": "sc/source/ui/inc/tabview.hxx",
        "patchSetId": 4
      },
      "lineNbr": 496,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-01-20T14:26:49Z",
      "side": 1,
      "message": "Oh, btw, when using a string parameter it should be const OUString\u0026 to pass by reference instead of by value. So that would be\n\n const OUString\u0026 rSplitMethod \u003d \"both\"\n\nStill, an enum is preferrable here.",
      "parentUuid": "dab17558_6159b45a",
      "range": {
        "startLine": 496,
        "startChar": 51,
        "endLine": 496,
        "endChar": 80
      },
      "revId": "ef0cfc9c6d5ef79f80b715025f298f8e3c3983eb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_c1406059",
        "filename": "sc/source/ui/view/tabview.cxx",
        "patchSetId": 4
      },
      "lineNbr": 1971,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-01-20T14:20:32Z",
      "side": 1,
      "message": "If I understood https://bugs.documentfoundation.org/show_bug.cgi?id\u003d91013 correctly, the feature request is to add methods that split always at the first column or row, not at the cursor position. Or did I get that wrong? Let\u0027s clarify there, I\u0027ll add a comment.\n\nIn which case I\u0027d name the enum values SC_SPLIT_METHOD_FIRST_COL, SC_SPLIT_METHOD_FIRST_ROW, SC_SPLIT_METHOD_CURSOR for clarity.",
      "revId": "ef0cfc9c6d5ef79f80b715025f298f8e3c3983eb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_a118bc85",
        "filename": "sc/source/ui/view/tabview.cxx",
        "patchSetId": 4
      },
      "lineNbr": 1973,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-01-20T14:20:32Z",
      "side": 1,
      "message": "It is unnecessary to test for each string if one comparison already yielded true. This should be instead\n\n if (splitmethod \u003d\u003d \"row\")\n ...\n else if (splitmethod \u003d\u003d \"col\")\n ...\n else if (splitmethod \u003d\u003d \"both\")\n ...\n\nHowever, with an enum that could be written more efficiently\n\n switch (eSplitMethod)\n {\n     case SC_SPLIT_METHOD_COL:\n     ...\n     case SC_SPLIT_METHOD_ROW:\n     ...\n     case SC_SPLIT_METHOD_BOTH:\n     ...\n }",
      "revId": "ef0cfc9c6d5ef79f80b715025f298f8e3c3983eb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_811db875",
        "filename": "sc/source/ui/view/tabview.cxx",
        "patchSetId": 4
      },
      "lineNbr": 2049,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-01-20T14:20:32Z",
      "side": 1,
      "message": "In case the request actually was to always freeze the first col/row, determining the split position of course would have to be a little different.",
      "revId": "ef0cfc9c6d5ef79f80b715025f298f8e3c3983eb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_e13be4e9",
        "filename": "sc/source/ui/view/tabvwsh3.cxx",
        "patchSetId": 4
      },
      "lineNbr": 902,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-01-20T14:20:32Z",
      "side": 1,
      "message": "Nitpick: please stick to our naming conventions, so this variable name should be something like aSplitMethod.",
      "range": {
        "startLine": 902,
        "startChar": 25,
        "endLine": 902,
        "endChar": 36
      },
      "revId": "ef0cfc9c6d5ef79f80b715025f298f8e3c3983eb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}