{
  "comments": [
    {
      "key": {
        "uuid": "01b0ea2f_ed56279f",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-09T09:19:32Z",
      "side": 1,
      "message": "can this be \u003c nStartIndex?  (though I see the existing methods do not address that question, either)",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad57ce8d_ba80a7c8",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-04-30T08:46:09Z",
      "side": 1,
      "message": "The implementation wouldn\u0027t work too well in such case, but I\u0027m actually not sure what it should actually do, and none of the docs seem to address this issue.\nI guess as none specifically deny it it could make sense to support it just to be sure, but it also seems like a very corner case that is not specifically allowed either.  And in any case it shouldn\u0027t crash current implementation, at worse results are odd.",
      "parentUuid": "01b0ea2f_ed56279f",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef2b614b_400129b2",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-30T11:28:55Z",
      "side": 1,
      "message": "...in which case something like\n\n  The valid range is nStartIndex..length.\n\nmight be a better specification?  (But, again, I just wonder about this newly added code and do note that the existing surrounding code appears to have the same problem anyway.)",
      "parentUuid": "ad57ce8d_ba80a7c8",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d00d87d_fc9c18ec",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-05-05T14:51:28Z",
      "side": 1,
      "message": "This works for me if you wish, I don\u0027t see any real reason why we\u0027d want to allow `nEndIndex` \u003e `nStartIndex`.  The only potential use for this I see would be allowing the caller to choose which end they prefer if they can\u0027t have both (e.g. if the bounding box doesn\u0027t fit in the view): we would always prefer nStratIndex, whether it\u0027s greater or not then nEndIndex, allowing to select the other end by swapping the arguments.\nBut that\u0027s not a feature of the API, so it\u0027s probably stretching it a bit too far.  And this could be relaxed in the future anyway, while adding restrictions is trickier.",
      "parentUuid": "ef2b614b_400129b2",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "163f6d2a_871d47a7",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-09T09:19:32Z",
      "side": 1,
      "message": "what would be a reason for failure?  (depending on the answer, maybe it would be more suitable to throw an exception?)",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "506a41a4_f21d78ea",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-04-30T08:46:09Z",
      "side": 1,
      "message": "AFAIK the only reasons for failure are:\n* invalid parameters (throws)\n* unimplemented (currently returns false)\n\nNormally all other cases should return true.",
      "parentUuid": "163f6d2a_871d47a7",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46fa06df_bfb9d87a",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-30T11:28:55Z",
      "side": 1,
      "message": "Is \"unimplemented\" a concept this interface is meant to model?  If not, it appears the boolean return type would be redundant.",
      "parentUuid": "506a41a4_f21d78ea",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d2213f_f8b93f9c",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-05-05T14:51:28Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s a concept of the interface in itself, but I also think it\u0027s fairly important for the caller to know whether they can trust their request was acted upon or not.  So I think we should really forward this up to the platform layer and let that layer decide how and whether to forward the info (ATK would return FALSE).  Whether we want to model this with returning a boolean or throwing something like `css::lang::NoSupportException()` I don\u0027t really have an opinion: just tell me which way to go and I\u0027ll do that.",
      "parentUuid": "46fa06df_bfb9d87a",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d4fd58_00fecfe2",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001814
      },
      "writtenOn": "2020-05-05T15:00:02Z",
      "side": 1,
      "message": "\u003e I also think it\u0027s fairly important for the caller to know whether they can trust their request was acted upon or not\n\nYes, it\u0027s very useful for screen readers, so they can print it in their log that it\u0027s the application which doesn\u0027t have support for what they requested. That allows to quickly determine that the screen reader is indeed asking what it wanted, but some implementation is needed in the application.",
      "parentUuid": "73d2213f_f8b93f9c",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38b1ce52_0cafe840",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 526,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-09T09:19:32Z",
      "side": 1,
      "message": "can this be \u003c nStartIndex?  (though I see the existing methods do not address that question, either)",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9bcb1c_f040ce77",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 533,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-09T09:19:32Z",
      "side": 1,
      "message": "what would be a reason for failure?  (depending on the answer, maybe it would be more suitable to throw an exception?)",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b12ec440_b04f08b1",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 533,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-04-30T08:46:09Z",
      "side": 1,
      "message": "AFAIK the reasons of failures can be\n* invalid parameters (throws)\n* unimplemented (currently returns false)\n* no scrolling performed (return false)\n\nThe last item is kind of bizarre especially as it\u0027s somewhat inconsistent with `scrollSubstringTo()`, but that\u0027s what IAccessible2 on which this API is modeled after has to say (https://accessibility.linuxfoundation.org/a11yspecs/ia2/docs/html/interface_i_accessible_text.html#a554f3eb0037463a45413a843965728bb).  I\u0027m not convinced this specific part is meaningful, so I would not see a problem in dropping it and always pretend scroll had to happen.",
      "parentUuid": "bc9bcb1c_f040ce77",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}