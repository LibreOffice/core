{
  "comments": [
    {
      "key": {
        "uuid": "01b0ea2f_ed56279f",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-09T09:19:32Z",
      "side": 1,
      "message": "can this be \u003c nStartIndex?  (though I see the existing methods do not address that question, either)",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad57ce8d_ba80a7c8",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-04-30T08:46:09Z",
      "side": 1,
      "message": "The implementation wouldn\u0027t work too well in such case, but I\u0027m actually not sure what it should actually do, and none of the docs seem to address this issue.\nI guess as none specifically deny it it could make sense to support it just to be sure, but it also seems like a very corner case that is not specifically allowed either.  And in any case it shouldn\u0027t crash current implementation, at worse results are odd.",
      "parentUuid": "01b0ea2f_ed56279f",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef2b614b_400129b2",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-30T11:28:55Z",
      "side": 1,
      "message": "...in which case something like\n\n  The valid range is nStartIndex..length.\n\nmight be a better specification?  (But, again, I just wonder about this newly added code and do note that the existing surrounding code appears to have the same problem anyway.)",
      "parentUuid": "ad57ce8d_ba80a7c8",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d00d87d_fc9c18ec",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-05-05T14:51:28Z",
      "side": 1,
      "message": "This works for me if you wish, I don\u0027t see any real reason why we\u0027d want to allow `nEndIndex` \u003e `nStartIndex`.  The only potential use for this I see would be allowing the caller to choose which end they prefer if they can\u0027t have both (e.g. if the bounding box doesn\u0027t fit in the view): we would always prefer nStratIndex, whether it\u0027s greater or not then nEndIndex, allowing to select the other end by swapping the arguments.\nBut that\u0027s not a feature of the API, so it\u0027s probably stretching it a bit too far.  And this could be relaxed in the future anyway, while adding restrictions is trickier.",
      "parentUuid": "ef2b614b_400129b2",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a8ab290_5f349e33",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 502,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-05-06T09:38:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d00d87d_fc9c18ec",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "163f6d2a_871d47a7",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-09T09:19:32Z",
      "side": 1,
      "message": "what would be a reason for failure?  (depending on the answer, maybe it would be more suitable to throw an exception?)",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "506a41a4_f21d78ea",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-04-30T08:46:09Z",
      "side": 1,
      "message": "AFAIK the only reasons for failure are:\n* invalid parameters (throws)\n* unimplemented (currently returns false)\n\nNormally all other cases should return true.",
      "parentUuid": "163f6d2a_871d47a7",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46fa06df_bfb9d87a",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-30T11:28:55Z",
      "side": 1,
      "message": "Is \"unimplemented\" a concept this interface is meant to model?  If not, it appears the boolean return type would be redundant.",
      "parentUuid": "506a41a4_f21d78ea",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d2213f_f8b93f9c",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-05-05T14:51:28Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s a concept of the interface in itself, but I also think it\u0027s fairly important for the caller to know whether they can trust their request was acted upon or not.  So I think we should really forward this up to the platform layer and let that layer decide how and whether to forward the info (ATK would return FALSE).  Whether we want to model this with returning a boolean or throwing something like `css::lang::NoSupportException()` I don\u0027t really have an opinion: just tell me which way to go and I\u0027ll do that.",
      "parentUuid": "46fa06df_bfb9d87a",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d4fd58_00fecfe2",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001814
      },
      "writtenOn": "2020-05-05T15:00:02Z",
      "side": 1,
      "message": "\u003e I also think it\u0027s fairly important for the caller to know whether they can trust their request was acted upon or not\n\nYes, it\u0027s very useful for screen readers, so they can print it in their log that it\u0027s the application which doesn\u0027t have support for what they requested. That allows to quickly determine that the screen reader is indeed asking what it wanted, but some implementation is needed in the application.",
      "parentUuid": "73d2213f_f8b93f9c",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e8b2dc7_2e988caa",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-05-05T15:28:00Z",
      "side": 1,
      "message": "So in the final patch set there would be implementations of scrollSubstringTo that return false not because (as is apparently the case with the current patch set) they have not been implemented yet in this work-in-progress change, but because they call into some \"platform layer\" which in turn returns some \"not implemented\" indicator?",
      "parentUuid": "43d4fd58_00fecfe2",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85ed6481_c99a3758",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001814
      },
      "writtenOn": "2020-05-05T15:57:04Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean exactly by “not implemented yet in this work-in-progress” vs “\"platform layer\" which in turn returns some \"not implemented\" indicator”. What do you mean by \"platform layer\" exactly? Here I\u0027ll assume an OS-specific accessibility layer.\n\nWhat this change does for instance is to add VCLXAccessibleEdit::scrollSubstringTo which returns false, meaning that it couldn\u0027t perform the request (because it\u0027s not implemented). Do you mean something beyond this, or before this? The OS-specific accessibility layer doesn\u0027t need to be involved here, it has already forwarded the screen reader request to the proper sublayer (VCLXAccessibleEdit), and it\u0027s up to that one to either achieve the request, or return false because it doesn\u0027t implement it. I don\u0027t see why the OS-specific bits should be involved at that point or beyond.",
      "parentUuid": "5e8b2dc7_2e988caa",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb990c6f_a922cac6",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-05-05T16:18:43Z",
      "side": 1,
      "message": "\u003e So in the final patch set there would be implementations of scrollSubstringTo that return false not because (as is apparently the case with the current patch set) they have not been implemented yet in this work-in-progress change, but because they call into some \"platform layer\" which in turn returns some \"not implemented\" indicator?\n\nNo, it\u0027d be the same as in the current state of the patch: the platform accessibility layer (gtk3atktext.cxx) calls into the internal API which this patch implements only for some elements, and the other currently are stubs and return false.  What we need is for gtk3atktext.cxx\u0027s `text_wrapper_scroll_substring_to()` to be able to return `FALSE` when it didn\u0027t perform the request for some reason (e.g., not implemented).\nMy point was simply that what is the internal call performed by `text_wrapper_scroll_substring_to()` like doesn\u0027t really matter so long as it allows to know it didn\u0027t work.\n\nSorry if I introduced some confusion: all I wanted to say is that ATK had to know whether or not things worked, so `text_wrapper_scroll_substring_to()` should be able to return FALSE when the request is not implemented.",
      "parentUuid": "85ed6481_c99a3758",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90cdf1b0_1b6c972e",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-05-06T07:19:31Z",
      "side": 1,
      "message": "\u003e \u003e So in the final patch set there would be implementations of scrollSubstringTo that return false not because (as is apparently the case with the current patch set) they have not been implemented yet in this work-in-progress change, but because they call into some \"platform layer\" which in turn returns some \"not implemented\" indicator?\n\u003e \n\u003e No, it\u0027d be the same as in the current state of the patch: the platform accessibility layer (gtk3atktext.cxx) calls into the internal API which this patch implements only for some elements, and the other currently are stubs and return false.  What we need is for gtk3atktext.cxx\u0027s `text_wrapper_scroll_substring_to()` to be able to return `FALSE` when it didn\u0027t perform the request for some reason (e.g., not implemented).\n\n\"and the other currently are stubs and return false\":  Which is a bug that needs fixing?\n\n(Asking because if it is a bug, we don\u0027t need \"gtk3atktext.cxx\u0027s `text_wrapper_scroll_substring_to()` to be able to return `FALSE` when it didn\u0027t perform the request [because of] not implemented\", so we wouldn\u0027t need this scrollSubstringTo\u0027s boolean return type.)",
      "parentUuid": "fb990c6f_a922cac6",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5976302b_57feca8e",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 506,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-05-06T09:38:30Z",
      "side": 1,
      "message": "\u003e \"and the other currently are stubs and return false\":  Which is a bug that needs fixing?\n\nWell, in a perfect world, everything would be implemented perfectly; yet it\u0027s already very useful if only some parts do.\n\nThis said, I think there are items where it\u0027s either not needed (VCLXAccessibleToolBoxItem?  VCLXAccessibleMenuItem?) or even not relevant (SwAccessibleNoTextFrame -- though, I\u0027m not sure what that actually is, implementing XAccessibleText with only stubs, and being called NoText…).  So there it might actually really make sense to say it\u0027s not implemented.\n\n\u003e (Asking because if it is a bug, we don\u0027t need \"gtk3atktext.cxx\u0027s `text_wrapper_scroll_substring_to()` to be able to return `FALSE` when it didn\u0027t perform the request [because of] not implemented\", so we wouldn\u0027t need this scrollSubstringTo\u0027s boolean return type.)\n\nWell, yes, would it all actually be implemented properly, `text_wrapper_scroll_substring_to()` could simply always return TRUE.  But then it has to be able to trust it\u0027s actually always implemented, because clients using ATK also receive `FALSE` if the application behind didn\u0027t implement the method itself: e.g. currently (without this patch) a client calling `atk_text_scroll_substring_to()` on LO would get a `FALSE` return value because LO doesn\u0027t yet implement this part of the AtkText interface, so that client would know it shouldn\u0027t expect the action to have been preformed.  And this is useful info.\n\nSo to summarize, `text_wrapper_scroll_substring_to()` *must* return `FALSE` if it didn\u0027t perform the request.  We have 2 ways of achieving this:\n1. Implement `XAccessibleText::scrollSubstringTo()` properly everywhere, so that it actually sensibly acts upon each request (thus `text_wrapper_scroll_substring_to()` never has to return `FALSE`).\n2. Have a mean to report to a caller of `XAccessibleText::scrollSubstringTo()` that the request was not honored (so `text_wrapper_scroll_substring_to()` can detect this case and return `FALSE`).\n\nI don\u0027t think the first option is totally realistic, although it\u0027d be marvelous everything worked perfectly.  Not only I\u0027m not likely gonna be able to properly implement it for all the current 18+ implementors of the XAccessibleText interface (time, complexity and lack of familiarity with LO codebase are (sad) reasons I can think of), but I\u0027m afraid as time passes and possibly more XAccessibleText implementations spawn they might not get a perfect implementation of everything, and being able to properly and easily tell \"not implemented\" is better than having non-implementations silently ignoring the request (as, as said above, end users of the ATK interface need to know), or worse, make the entry barrier of implementing XAccessibleText so high that it just ends up being completely left out.\n\nAll this (but the ATK requirements maybe, although it\u0027s sightly outside the scope of the internal API) are not real arguments for designing the interface from a semantic perspective, I get that.  But I think it makes sense from a pragmatic point of view: the world is not perfect, so we have to know whether we hit a sweet spot or not.\n\nIn the end, I really think we do need to be able to convey that the request wasn\u0027t performed, even if I can\u0027t think of a technical reason why it *could not* be made to work (I would expect to be able to get *all* scrolled-off parts of the UI visible in some way, even if if might not be straightforward to do so).\nWhether this info is conveyed by a return value or an exception, I really don\u0027t care much (even if my C heart leans towards a return value, and existing methods also seem to use this), and I have already both implementations at hand (the exception one throws NoSupportException as it seemed the best match to me, but I can change that as well).",
      "parentUuid": "90cdf1b0_1b6c972e",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38b1ce52_0cafe840",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 526,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-09T09:19:32Z",
      "side": 1,
      "message": "can this be \u003c nStartIndex?  (though I see the existing methods do not address that question, either)",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9bcb1c_f040ce77",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 533,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-04-09T09:19:32Z",
      "side": 1,
      "message": "what would be a reason for failure?  (depending on the answer, maybe it would be more suitable to throw an exception?)",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b12ec440_b04f08b1",
        "filename": "offapi/com/sun/star/accessibility/XAccessibleText.idl",
        "patchSetId": 2
      },
      "lineNbr": 533,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2020-04-30T08:46:09Z",
      "side": 1,
      "message": "AFAIK the reasons of failures can be\n* invalid parameters (throws)\n* unimplemented (currently returns false)\n* no scrolling performed (return false)\n\nThe last item is kind of bizarre especially as it\u0027s somewhat inconsistent with `scrollSubstringTo()`, but that\u0027s what IAccessible2 on which this API is modeled after has to say (https://accessibility.linuxfoundation.org/a11yspecs/ia2/docs/html/interface_i_accessible_text.html#a554f3eb0037463a45413a843965728bb).  I\u0027m not convinced this specific part is meaningful, so I would not see a problem in dropping it and always pretend scroll had to happen.",
      "parentUuid": "bc9bcb1c_f040ce77",
      "revId": "3ce35abd49d54d59b15ef310ebc1bf7ffcc227ef",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}