{
  "comments": [
    {
      "key": {
        "uuid": "5a8bc5a2_57ff1434",
        "filename": "sc/qa/unit/subsequent_export-test.cxx",
        "patchSetId": 8
      },
      "lineNbr": 506,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2016-07-22T12:33:36Z",
      "side": 1,
      "message": "These all customWidths are set according to expectation.\nPreviously the default width was wrongly calculated, and results were really bad (for example all columnt have customWidths set to true)",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_f734a04b",
        "filename": "sc/qa/unit/subsequent_export-test.cxx",
        "patchSetId": 8
      },
      "lineNbr": 576,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-07-22T11:31:03Z",
      "side": 1,
      "message": "If you have to disable a test then clearly something is wrong with the change that causes this failure.",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_971d1cc0",
        "filename": "sc/qa/unit/subsequent_export-test.cxx",
        "patchSetId": 8
      },
      "lineNbr": 576,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2016-07-22T12:19:08Z",
      "side": 1,
      "message": "This bug is already present in LibreOffice, and this comment is to just show inconsistency between operating systems.\nFor OSX and Linux it´s producing one row.\nFor Windows it is producing two lines.\nI would like to focus only on this particular bug, and fix only issues which is connected with that (to make the commit small).\n\nIs it will be ok, if I remove that comment (this assertXPath is not really necessary)? I would submit bug report for LibreOffice instead.",
      "parentUuid": "5a8bc5a2_f734a04b",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_d7788492",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1567,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-07-21T21:30:04Z",
      "side": 1,
      "message": "First, there\u0027s some error in placement of parentheses or something is omitted or superfluous. This effectively calculates abs(value) \u003c 256 / 16, so abs(value) \u003c 16. Which also the previous code did, but I guess meant was ((abs(value) / 256) \u003c 16) instead.\n\nThen, you\u0027re citing the expression to \"translate the value of width in the file into the column width value at runtime\". But the implementation does something different, so it would be nice to document what it actually does and why.\n\nAre you sure that 256.0*(GetValue()+0.5) is correct? Shouldn\u0027t that be\n\n 256.0 * static_cast\u003clong\u003e(static_cast\u003cdouble\u003e(GetValue()) + 0.5)\n\ninstead, if it really was meant to multiply a rounded value by 256? I didn\u0027t investigate that deeply.",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_97b6fc3b",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1567,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2016-07-21T23:26:45Z",
      "side": 1,
      "message": "1. In description it was stated that comparison is made to 1/16\nI think original author would like to write:\n   ((abs(value) / 256) \u003c 1/16)\nIs it more clear for you? Should I change it in that way?\n\n2. Yes I was not stated it clear here. I will update comment \n\n3. I didn investigating rounding issue. I fixed most obvious bug (additional 0.5) which causing wrong results, after export to .xlsx. With that fix, the customWidth flags are set correctly according to expectations.\n\nDuring .xlsx import it is calculated with following formula:\n    sal_Int32 nColWidthPixel\u003d std::floor(((256*nWidth + std::floor(128.0/nPixel))/256.0)*nPixel) * 1.047;\n\n(sc/source/filter/oox/worksheethelper.cxx)\nI assume that nPixel/{Maximum Digit Width} is 1\nI don know for what is 1.047 value. I suspect that it is for visualization fit. I think it could cause tdf#91475, but I haven investigated it yet.",
      "parentUuid": "5a8bc5a2_d7788492",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_9746fcbd",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1567,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-07-22T11:31:03Z",
      "side": 1,
      "message": "The ((abs(value) / 256) \u003c 1/16) would be yet something different. So what units is the GetValue() in?\n\nNote also that integer 1/16 is always 0. I believe the original \u003c16 is actually correct, otherwise all Excel exports would had been wrong.\n\nFor the rounding, calculating 256.0*(value+0.5) gives a value by 128 larger than 256.0*value+0.5\n\nSo you really should be sure what you\u0027re actually doing here.",
      "parentUuid": "5a8bc5a2_97b6fc3b",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_b7c69814",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1567,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2016-07-22T12:19:08Z",
      "side": 1,
      "message": "Hi Eike.\nYou have right. I should write (abs(value) / 256.0) \u003c 1.0/16.0).\nBut it looks like it is very cpu costly (operations on floats instead of integers).\n\nI have made many experiments and all default width values was too small (about by 128). \nIn IsDefWidth function there is comparison if default width for cell (static_cast\u003c long \u003e( 256.0 * ( GetValue() + 0.5 ) ) is similar to checked width (fNewColWidth variable). If difference is smaller than 1/16 then width is treaten as default.\n\nI have taken this formula from SetDefWidth method:\nnumberOfCharacters \u003d limit_cast\u003c sal_uInt16 \u003e( width / 256.0 + 0.5 ) \n\nAfter mathematical operation to get ¨width¨, I got:\nwidth \u003d static_cast\u003c long \u003e( 256.0 * ( numberOfCharacters + 0.5 ) \n\nThis formula I have used in IsDefWidth function.\nFrom my perspective SetDefWidth should use opposite formulas than IsDefWidth, as the first is translating to number of characters and second one is translating from number of characters.",
      "parentUuid": "5a8bc5a2_9746fcbd",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_97e27c9e",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1573,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2016-07-22T12:24:53Z",
      "side": 1,
      "message": "SetDefWidth should use opposite formulas than IsDefWidth, as the first is translating to number of characters and second one is translating from number of characters.\n\nIf SetDefWidth method is using following formula:\nnumberOfCharacters \u003d limit_cast\u003c sal_uInt16 \u003e( width / 256.0 + 0.5 ) \n\nThen IsDefWidth method should use \nwidth \u003d static_cast\u003c long \u003e( 256.0 * ( numberOfCharacters + 0.5 ) \n\nIn previous implementation this assumtion was not met. That;s why it was causing wrong default width comparison.",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_f76d80cd",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1673,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2016-07-21T21:30:04Z",
      "side": 1,
      "message": "It\u0027s preferable to write the attributes in the same order Excel does, so likely at the place where the comment previously was. I didn\u0027t check.",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_b7813850",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1673,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2016-07-21T23:26:45Z",
      "side": 1,
      "message": "+1 for that.\nIt is really painfull to compare xlsx files generated by Excel and LO. (for example XML_max and XML_min which in MS Excel looks:  XML_min, XML_max).\n \nI was follow the MS Excel convention. In MS Excel after XML_width, there is XML_customwidth.\n\nIf it is ok, then I will update rest of the fields in next Review.",
      "parentUuid": "5a8bc5a2_f76d80cd",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_5792b458",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1673,
      "author": {
        "id": 1000031
      },
      "writtenOn": "2016-07-22T12:13:53Z",
      "side": 1,
      "message": "I\u0027m not such a big fan of that. They are in the whole XLSX code sorted by name and you will never be able to match the excel export.\nIn the end attribute order is undefined and I can easily imagine that there are also small differences in each Excel version.\nMy preferred option would be to leave that as is unless there are real bugs with our order.",
      "parentUuid": "5a8bc5a2_b7813850",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8bc5a2_d7f2446f",
        "filename": "sc/source/filter/excel/xetable.cxx",
        "patchSetId": 8
      },
      "lineNbr": 1673,
      "author": {
        "id": 1001339
      },
      "writtenOn": "2016-07-22T12:33:36Z",
      "side": 1,
      "message": "From my perspective keeping Excel order is easier to compare .xlsx files. But I could leave with it.",
      "parentUuid": "5a8bc5a2_5792b458",
      "revId": "e4b9c8e07841657734d5beeba2ff5855abd40a55",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}