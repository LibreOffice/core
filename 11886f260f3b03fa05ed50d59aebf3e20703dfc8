{
  "comments": [
    {
      "key": {
        "uuid": "804d1262_acf975af",
        "filename": "sc/source/core/inc/arraysumfunctor.hxx",
        "patchSetId": 18
      },
      "lineNbr": 22,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-20T12:10:16Z",
      "side": 1,
      "message": "It\u0027s rather unlikely that somebody will notice this random TODO note and act upon it. You can make a configure check for whether _mm512_abs_pd works, or you can do #if here based on the first known working GCC version.",
      "revId": "11886f260f3b03fa05ed50d59aebf3e20703dfc8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4b73349_0498d339",
        "filename": "sc/source/core/inc/arraysumfunctor.hxx",
        "patchSetId": 18
      },
      "lineNbr": 103,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-05-19T16:11:31Z",
      "side": 1,
      "message": "We need a unit test that would test these all (at least all available on the host machine) - so that at least partially (for a single test) we would be sure that they all keep giving the same results in the future. And it would be useful here to have several patch sets for testing every implementation: first checking that only executeUnrolled is available and all tests pass; then the same with only executeSSE2 available, etc. - so that at each step we know which one was guaranteed to be used, and all pass.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 103,
        "endChar": 1
      },
      "revId": "11886f260f3b03fa05ed50d59aebf3e20703dfc8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6613d161_497e600c",
        "filename": "sc/source/core/inc/arraysumfunctor.hxx",
        "patchSetId": 18
      },
      "lineNbr": 103,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-05-19T16:47:08Z",
      "side": 1,
      "message": "The executeUnrolled should be fine.\nAndroid, ARM does not support stuff like SSE2 and the CppunitTest_sc_statistical_functions_test checks summation.\nChecking AVX512 is not possible. The GCC version we use is too old and there\u0027s an error in the intel intrinsics that prevents it from building (corrected in 2018).\nSo we would need to check AVX and SSE2.\nBut it\u0027s better to test everything.\n\nThe way the code is we can make something like this: see end of comment.\nIf declared in the same header we can avoid the GCC bug.\n\nThe only problem is I have no idea of that LO CppunitTest stuff.\nSo I have no idea about how to call it.\n\nvoid test_sums()\n{\n// Needs exactly 9 terms\ndouble summands a[] \u003d {0, 1, 2, 3, 4, 10, 20, 2, -1};\ndouble* pCurrent \u003d a;\nsize_t i \u003d 0;\n#ifdef LO_AVX512F_AVAILABLE\n    if (hasAVX512F)\n        assert(executeAVX512F(i, 9, pCurrent) \u003d\u003d 42.0);\n#endif\n#ifdef LO_AVX_AVAILABLE\n    if (hasAVX)\n        assert(executeAVX(i, 9, pCurrent) \u003d\u003d 42.0);\n#endif\n#ifdef LO_SSE2_AVAILABLE\n    if (hasSSE2)\n        assert( executeSSE2(i, 9, pCurrent) \u003d\u003d 42.0 )\n#endif\n    assert( executeUnrolled(i, 9, pCurrent) \u003d\u003d 42.0 );\n}",
      "parentUuid": "b4b73349_0498d339",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 103,
        "endChar": 1
      },
      "revId": "11886f260f3b03fa05ed50d59aebf3e20703dfc8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "852cf914_dd857c13",
        "filename": "sc/source/core/inc/arraysumfunctor.hxx",
        "patchSetId": 18
      },
      "lineNbr": 103,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-20T12:10:16Z",
      "side": 1,
      "message": "\u003e Checking AVX512 is not possible. The GCC version we use is too old and there\u0027s an error in the intel intrinsics that prevents it from building (corrected in 2018).\n\nGerrit/GCC is not the only place where we run tests. It can still be tested by Clang or MSVC Gerrit builds if they have the CPU, there are a bunch of tinderboxes testing builds (https://tinderbox.libreoffice.org/MASTER/status.html) and developers including yourself can run tests locally.\n\n\u003e The only problem is I have no idea of that LO CppunitTest stuff.\n\u003e So I have no idea about how to call it.\n\nJust call it like any other function. If those symbols are private, you may need to mark them e.g. SC_DLLPUBLIC . See e.g. enableOpenCL_UnitTestsOnly() in a SC_DLLPUBLIC FormulaGroupInterpreter class .",
      "parentUuid": "6613d161_497e600c",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 103,
        "endChar": 1
      },
      "revId": "11886f260f3b03fa05ed50d59aebf3e20703dfc8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64d7a805_a15535b2",
        "filename": "sc/source/core/tool/arraysumAVX.cxx",
        "patchSetId": 18
      },
      "lineNbr": 15,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-20T12:10:16Z",
      "side": 1,
      "message": "This presumably does not belong in an AVX file. And in case this belongs in the AVX512 file and is correct, then just checking for AVX512F is presumably not enough if the code actually also needs the other two sets.",
      "revId": "11886f260f3b03fa05ed50d59aebf3e20703dfc8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}