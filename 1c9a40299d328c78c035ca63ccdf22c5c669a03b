{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "172ca897_72e226a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-07T09:40:44Z",
      "side": 1,
      "message": "So this splits up some component files into multiple component files for a single shared library (svx/util/crashreport.component broken out of svx/util/svx.component, and sw/util/sw_mm.component broken out of sw/util/sw.component), which then leads in the resulting services rdb file to multiple \u003ccomponent\u003e elements with the same \"uri\" attribute.  While the current implementation in cppuhelper/source/servicemanager.cxx appears to happen to work fine with multiple \u003ccomponent\u003e elements with the same \"uri\" attribute, I\u0027m not really happy with this change:  It opens the door for inconsistencies among the other attributes (\"environment\", \"loader\", \"prefix\") of multiple \u003ccomponent\u003e elements that describe what is conceptionally a single component with a unique \"uri\", and which needs to have unambiguous \"environment\", \"loader\", and \"prefix\" attributes.  I think I would prefer an alternative approach where individual \u003cimplementation\u003e elements in a component file can be marked with some condition, and those conditions are then processed and acted upon when assembling a services rdb file in solenv/gbuild/Rdb.mk and solenv/bin/packcomponents.xslt.",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00a73b4d_e84283d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-07T14:38:17Z",
      "side": 1,
      "message": "\u003e I think I would prefer an alternative approach where individual \u003cimplementation\u003e elements in a component file can be marked with some condition, and those conditions are then processed and acted upon when assembling a services rdb file in solenv/gbuild/Rdb.mk and solenv/bin/packcomponents.xslt.\n\nThat seems too complicated. And then you need additional sync logic between the component file and build system, which I wanted to avoid. I wanted to get rid of the duplicated build logic. AFAIK know there is no additional info in the component tag, that gbuild doesn\u0027t already have:\n\n* Based on the library type, you can select the loader\n* The \"@CPPU_ENV@\" already comes from gbuild\n* The URI comes from the library name.\n\nSo my suggestion: get rid of the component tag in gbuild\u0027s component files and generate the libraries component files to concat by Rdb from implementation snippets selected by gbuild. Any reason why this can\u0027t work?",
      "parentUuid": "172ca897_72e226a3",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4003191f_cf769ee1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-07T15:11:49Z",
      "side": 1,
      "message": "\u003e That seems too complicated. And then you need additional sync logic between the component file and build system, which I wanted to avoid. I wanted to get rid of the duplicated build logic. AFAIK know there is no additional info in the component tag, that gbuild doesn\u0027t already have:\n\u003e \n\u003e * Based on the library type, you can select the loader\n\u003e * The \"@CPPU_ENV@\" already comes from gbuild\n\u003e * The URI comes from the library name.\n\nInformation about the \"prefix\" attribute is missing.  (Plus, we might want to extend the set of component element attributes in the future.)\n\n\u003e So my suggestion: get rid of the component tag in gbuild\u0027s component files and generate the libraries component files to concat by Rdb from implementation snippets selected by gbuild. Any reason why this can\u0027t work?\n\nThen why didn\u0027t you do that?  Why did you need to introduce a new --enable-services-rdb-from-build option?  Why did you need to split the svx and sw component files?  Me confused.",
      "parentUuid": "00a73b4d_e84283d9",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91b54dcc_679fdb91",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-07T15:43:19Z",
      "side": 1,
      "message": "\u003e Information about the \"prefix\" attribute is missing.  (Plus, we might want to extend the set of component element attributes in the future.)\n\nThe prefix also comes from the library, when it calls gb_ComponentTarget_ComponentTarget. I did forget to mention that. It\u0027s not that the whole concept of writing the \"\u003ccomponent\u003e\" tag from gbuild is un-extendable.\n\n\u003e \u003e So my suggestion: get rid of the component tag in gbuild\u0027s component files and generate the libraries component files to concat by Rdb from implementation snippets selected by gbuild. Any reason why this can\u0027t work?\n\u003e \n\u003e Then why didn\u0027t you do that?  Why did you need to introduce a new --enable-services-rdb-from-build option?  Why did you need to split the svx and sw component files?  Me confused.\n\nI don\u0027t follow. Because it works? And the RDB has just the components built and the workdir/CustomTarget/static/component_maps.cxx has just the existing constructors. No more extra management of solenv/bin/native-code.py, because the input from gbuild is correct. And it\u0027s just managed in gbuild. In theory you have the same logic for the source files then for the component files / snippets.\n\nAs I wrote in the commit message, I wanted to get rid of the duplicated build logic outside of the build system. This is mainly used by the WASM build, which is a stripped down version of LO to \"just\" Writer.\n\nAnd there is a horrible additional patch waiting in feature/wasm to link static binaries from the exposed gbuild info. That can either build LO WASM or link a static soffice.bin + oosplash.",
      "parentUuid": "4003191f_cf769ee1",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b61b6e4e_2083f420",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-07T17:57:16Z",
      "side": 1,
      "message": "Thinking a bit more about a \"strip stuff from component file\": one problem is, that normally the build system knows what it builds, but not what it doesn\u0027t. That probably will make a solution stripping stuff instead of adding stuff harder, as you would need to remove the implementations you don\u0027t build. But then you probably can also match anything that doesn\u0027t match X|Y.",
      "parentUuid": "91b54dcc_679fdb91",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8e66e13_43613771",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000135
      },
      "writtenOn": "2021-12-07T20:51:00Z",
      "side": 1,
      "message": "today\u0027s oss-fuzz builds fail with\n\nStep #3 - \"compile-honggfuzz-address-x86_64\": /src/libreoffice/solenv/gbuild/ComponentTarget.mk:53: *** No LIBFILENAME set at component target: /work/workdir/ComponentTarget/i18npool/util/i18npool.component.  Stop.\nStep #3 - \"compile-honggfuzz-address-x86_64\": make[1]: *** Waiting for unfinished jobs....\nStep #3 - \"compile-honggfuzz-address-x86_64\": [build CMP] i18npool/util/i18npool\n\nhttps://oss-fuzz-build-logs.storage.googleapis.com/index.html#libreoffice",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "947ebb56_edb1ea3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-08T09:19:29Z",
      "side": 1,
      "message": "So this change apparently combines three different things, two of which I see issues with (and the third I can\u0027t say anything about):\n\n1  Introduce --enable-services-rdb-from-build option.  Instead of codifying in postprocess/Rdb_services.mk which component files go into Rdb_services, it tries to construct that (with a `gb_Rdb_add_components,services,...` added to Makefile.gbuild) from the set of libraries that are built.  Trying to reduce the redundancies there is a good thing.  However:\n\n1.1  Rdb_services shall not contain the component files of all libraries that are built.  While this change filters out the component files that go into Rdb_ure/services (ure/Rdb_ure.mk), it fails to filter out the component files that go into others like Rdb_postgresql-sdbc (connectivity/Rdb_postgresql-sdbc.mk).\n\n1.2  The code added to Makefile.gbuild codifies the knowledge that there is an Rdb_services.  This is brittle.\n\n1.3  The code added to solenv/gbuild/Rdb.mk codifies the knowlege (for gb_Rdb__URECOMPONENTS) that there is an Rdb_ure/services.  This is brittle.\n\n1.4  Introducing an --enable-services-rdb-from-build option needlessly provides two different ways how the content of Rdb_services is assembled.  This should be consolidated.  (I understand that you only added the option as work-in-progress, but the current situation is nevertheless confusing for reviewers and maintainers, and leads to the danger that this will never be cleaned up fully and the two alternative ways will stay in the code base forever.)\n\n2  Some of the existing component files (at least svx/util/svx.component and sw/uitl/sw.component) contain \u003cimplementation\u003e entries that may not actually be implemented in the corresponding library, dependening on the build configuration.  While somewhat dirty, at least for --enable-dynloading builds that has never caused any actual problems (if any code asked for the instantiation of a service or singleton provided by such an implementation, instead of failing because the service or singleton was unknown, it failed because the implementation could not be loaded; the net effect was about the same).  I assume that does cause whatever problems for your WASM build now, though (and hence you try to address it here).  And trying to clean that up is a good thing anyway.  However:\n\n2.1  This causes the issue of multiple \u003ccomponent\u003e elements in Rdb_services for a single library, as I already explained (and gave suggestions for an alternative solution) in my earlier comment \u003chttps://gerrit.libreoffice.org/c/core/+/126185/7#message-003096db47859a909f8130ce20cbf31cb5dcdce9\u003e here.\n\n3  Something that is apparently only relevant for --disable-dynloading builds (i.e., the changes to solenv/bin/native-code.py), and which I don\u0027t know anything and can\u0027t say anything about.",
      "parentUuid": "b61b6e4e_2083f420",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fed3a8e0_d4fe1d9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-08T10:01:41Z",
      "side": 1,
      "message": "\u003e 1  Introduce --enable-services-rdb-from-build option.  Instead of codifying in postprocess/Rdb_services.mk which component files go into Rdb_services, it tries to construct that (with a `gb_Rdb_add_components,services,...` added to Makefile.gbuild) from the set of libraries that are built.  Trying to reduce the redundancies there is a good thing.  However:\n\u003e \n\u003e 1.1  Rdb_services shall not contain the component files of all libraries that are built.  While this change filters out the component files that go into Rdb_ure/services (ure/Rdb_ure.mk), it fails to filter out the component files that go into others like Rdb_postgresql-sdbc (connectivity/Rdb_postgresql-sdbc.mk).\n\u003e \n\u003e 1.2  The code added to Makefile.gbuild codifies the knowledge that there is an Rdb_services.  This is brittle.\n\u003e \n\u003e 1.3  The code added to solenv/gbuild/Rdb.mk codifies the knowlege (for gb_Rdb__URECOMPONENTS) that there is an Rdb_ure/services.  This is brittle.\n\u003e \n\u003e 1.4  Introducing an --enable-services-rdb-from-build option needlessly provides two different ways how the content of Rdb_services is assembled.  This should be consolidated.  (I understand that you only added the option as work-in-progress, but the current situation is nevertheless confusing for reviewers and maintainers, and leads to the danger that this will never be cleaned up fully and the two alternative ways will stay in the code base forever.)\n\nI have some idea how to address all four issues 1.1--1.4.  Will come up with a proposed change.",
      "parentUuid": "947ebb56_edb1ea3d",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cee99817_1ae85930",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-08T13:50:45Z",
      "side": 1,
      "message": "\u003e 1  Introduce --enable-services-rdb-from-build option.  Instead of codifying in postprocess/Rdb_services.mk which component files go into Rdb_services, it tries to construct that (with a `gb_Rdb_add_components,services,...` added to Makefile.gbuild) from the set of libraries that are built.  Trying to reduce the redundancies there is a good thing.\n\nYeah, the current implementation with the filter is a hacked solution, good enough for the static WASM build. I\u0027m not sure there is a good solution without explicitly tagging all the services.rdb components. Something like \"It\u0027s a services.rdb component, if it\u0027s not used in an other RDB\" seems brittle too. Some tools writer their own minimal RDB AFAIK.\n\n\u003e 2  Some of the existing component files (at least svx/util/svx.component and sw/uitl/sw.component) contain \u003cimplementation\u003e entries that may not actually be implemented in the corresponding library, dependening on the build configuration.  While somewhat dirty, at least for --enable-dynloading builds that has never caused any actual problems (if any code asked for the instantiation of a service or singleton provided by such an implementation, instead of failing because the service or singleton was unknown, it failed because the implementation could not be loaded; the net effect was about the same).  I assume that does cause whatever problems for your WASM build now, though (and hence you try to address it here).  And trying to clean that up is a good thing anyway.\n\nFor a static build the library is not relevant. The static build just uses a map of constructor names to constructor functions. I don\u0027t know if this map is really needed in the WASM case, as there are function table you can directly access and AFAIK manipulate these table at runtime. But the current implementation is the same mechanism iOS and Android use (see solenv/bin/native-code.py). And I can\u0027t actually say anything is missing, because the linker doesn\u0027t fail with missing symbols, as it otherwise would.\n\n\u003e 3  Something that is apparently only relevant for --disable-dynloading builds (i.e., the changes to solenv/bin/native-code.py), and which I don\u0027t know anything and can\u0027t say anything about.\n\nThe whole change is in the end also about creating a list of constructors for component creation, based on the build components, so solenv/bin/native-code.py doesn\u0027t need the whole long list of #ifdef constructors in the map.\n\nAnd you already know my plan is to get rid of --enable-services-rdb-from-build in the end, defaulting to it.",
      "parentUuid": "fed3a8e0_d4fe1d9f",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21d80a89_091a0592",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-08T22:20:13Z",
      "side": 1,
      "message": "\u003e I think I would prefer an alternative approach where individual \u003cimplementation\u003e elements in a component file can be marked with some condition, and those conditions are then processed and acted upon when assembling a services rdb file in solenv/gbuild/Rdb.mk and solenv/bin/packcomponents.xslt.\n\nsee \u003chttps://gerrit.libreoffice.org/c/core/+/126560\u003e \"Allow for conditional parts of component files\"",
      "parentUuid": "cee99817_1ae85930",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "441a4f69_6048b447",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-09T09:42:02Z",
      "side": 1,
      "message": "\u003e I have some idea how to address all four issues 1.1--1.4.  Will come up with a proposed change.\n\nsee \u003chttps://gerrit.libreoffice.org/c/core/+/126577\u003e \"Generally determine Rdb content from gb_*_set_componentfile calls\"",
      "parentUuid": "21d80a89_091a0592",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2204ed9_9f0e669e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-18T02:48:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "441a4f69_6048b447",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eba9e36a_4b26ee6d",
        "filename": "postprocess/CustomTarget_components.mk",
        "patchSetId": 7
      },
      "lineNbr": 50,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-09T06:58:21Z",
      "side": 1,
      "message": "What is the use of this CustomTarget?  Where is the consumer of that generated services_constructors.list?",
      "revId": "1c9a40299d328c78c035ca63ccdf22c5c669a03b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}