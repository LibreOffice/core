{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "17fdb157_b037b91c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-05-24T23:48:34Z",
      "side": 1,
      "message": "Are you sure it shouldn\u0027t be\n\n  DATE \\@\"dd\\.MM\\.yyyy\"\n\ninstead? At least that\u0027s what Excel would expect for a literal, a backslash escaped character.",
      "revId": "d93bd47b8ba5f66ff9cdab62c90fd347bcca7b6a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9550e695_f3a3b012",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-05-25T12:38:37Z",
      "side": 1,
      "message": "apparently for Word it doesn\u0027t have \"\\\" before \".\"",
      "parentUuid": "17fdb157_b037b91c",
      "revId": "d93bd47b8ba5f66ff9cdab62c90fd347bcca7b6a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79680969_8ab80097",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-05-25T18:10:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9550e695_f3a3b012",
      "revId": "d93bd47b8ba5f66ff9cdab62c90fd347bcca7b6a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c80690b9_7e0e4a57",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-05-24T23:48:34Z",
      "side": 1,
      "message": "That\u0027s abusing nOriginalLang (which was never meant for this context but the LCID embedding).\n\nBut why is that LocaleDataWrapper unreliable? It was created in MSWordExportBase::GetNumberFormat() (which creating a temporary LocaleDataWrapper for each and every formatted field is ugly anyway) for the locale of rField.GetLanguage(), it looks (didn\u0027t investigate) like there is a mismatch of the field locale (system locale?) and the number format\u0027s locale (German?). Maybe it helps already to use a proper LocaleDataWrapper, like\n\n  LocaleDataWrapper aLocDat(pNFormatr-\u003eGetComponentContext(),\n          LanguageTag(pNumFormat-\u003eGetLanguage()));",
      "revId": "d93bd47b8ba5f66ff9cdab62c90fd347bcca7b6a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc3963e3_d866f2d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-05-25T12:38:37Z",
      "side": 1,
      "message": "oh, i forgot to mention this: the paragraph containing the field explicitly applies fo:language\u003d\"zxx\" - which is apparently mapped to LANGUAGE_DONTKNOW.\n\nwhy that results in \"TT.MM.JJJJ\" instead of \"DD.MM.YYYY\" isn\u0027t clear to me, but i wrote the unit test to recreate the situation from scratch.\n\nthe number format in the file clearly has \".\" separators.",
      "parentUuid": "c80690b9_7e0e4a57",
      "revId": "d93bd47b8ba5f66ff9cdab62c90fd347bcca7b6a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ecc942_c46aba8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-05-25T18:10:45Z",
      "side": 1,
      "message": "zxx is LANGUAGE_NONE, but GetMappedFormatstring\u0027s nOriginalLang defaults to LANGUAGE_DONTKNOW that is not to be confused with the LocaleDataWrapper\u0027s initialization. If a LocaleDataWrapper is created for zxx/LANGUAGE_NONE it falls back to the en-US locale because there is no locale data for zxx and no other fallback. However, the unit test creates a LocaleDataWrapper for the LANGUAGE_DONTKNOW empty locale that is explicitly resolved to the en-US locale as fallback. So, accidentally the same, but not the actual scenario.\n\nThe proper fix seems to be in MSWordExportBase::GetNumberFormat()\n\n        LanguageType nLng \u003d rField.GetLanguage();\n        if (nLng \u003d\u003d LANGUAGE_NONE || nLng \u003d\u003d LANGUAGE_DONTKNOW)\n            nLng \u003d pNumFormat-\u003eGetLanguage();\n        LocaleDataWrapper aLocDat(pNFormatr-\u003eGetComponentContext(),\n                                  LanguageTag(nLng));\n\nwhere nLng \u003d\u003d LANGUAGE_DONTKNOW should not happen (and thus maybe worth an assert) but who knows..\n\nThe unit test then should use\n\n    LocaleDataWrapper ldw(m_xContext, LanguageTag(pFormat-\u003eGetLanguage()));\n\nand no change to svl/source/numbers/zformat.cxx",
      "parentUuid": "cc3963e3_d866f2d7",
      "revId": "d93bd47b8ba5f66ff9cdab62c90fd347bcca7b6a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76f67c3b_5fae17a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-05-20T08:35:37Z",
      "side": 1,
      "message": "not sure if this is the correct fix, needs a review from Eike",
      "revId": "d93bd47b8ba5f66ff9cdab62c90fd347bcca7b6a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}