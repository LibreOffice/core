{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e099ee16_d1c96d69",
        "filename": "include/svl/broadcast.hxx",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-06-03T11:47:53Z",
      "side": 1,
      "message": "is this really necessary? This class is incredibly performance sensitive, and this messes with the alignment, probably adding about 7 bytes of dead space between mnListenersFirstUnsorted and the bool flags.",
      "revId": "213808a6f279b8f030ce25f5e67d2b43648ed9d3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78cbd7f7_72b9d2e1",
        "filename": "include/svl/broadcast.hxx",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-06-03T12:13:13Z",
      "side": 1,
      "message": "I came across this with a tentative new loplugin that flags comparisons between signed and unsigned types where the unsigned one is explicitly cast to signed (which often indicates that this is a poor way to silence a \"signed vs. unsigned\" compiler warning, potentially causing silent, non-UB overflow, and that a better solution could be available).  That plugin turns out to have a high signal/noise ratio, though, so what I\u0027m doing here is submitting the obviously \"signal\" findings for now, while postponing the decision how to go forward in light of the high rate of \"noise\" findings.\n\nSo if this change should be considered detrimental (though is there a good way to actually measure that?), we can of course abandon it at least for now.  (In which case it would be good to document why mnListenersFirstUnsorted deliberately has a semantically inappropriate type, though.)",
      "parentUuid": "e099ee16_d1c96d69",
      "revId": "213808a6f279b8f030ce25f5e67d2b43648ed9d3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccb2f3a6_2003dee8",
        "filename": "include/svl/broadcast.hxx",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-06-03T12:31:03Z",
      "side": 1,
      "message": "I don\u0027t like unsigned (and thus std::size_t) and I\u0027d prefer there to be less (not more of it). But it\u0027s a preference.\n\nI\u0027m quite happy to add comments to places like this where we need to maintain the existing types. There are very few of them that are sufficiently sensitive that I think it makes a difference.",
      "parentUuid": "78cbd7f7_72b9d2e1",
      "revId": "213808a6f279b8f030ce25f5e67d2b43648ed9d3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c984017_58f6e461",
        "filename": "include/svl/broadcast.hxx",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-06-03T13:53:10Z",
      "side": 1,
      "message": "\u003e I don\u0027t like unsigned (and thus std::size_t) and I\u0027d prefer there to be less (not more of it). But it\u0027s a preference.\n\nThose unsigned types are forced upon us by the standard library (C++20 \u003chttps://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1227r2.html\u003e \"P1227: Signed ssize() functions, unsigned size() functions (Revision 2)\" notwithstanding).  (And sal_Int32 isn\u0027t really an appropriate signed alternative for std::size_t, given that it is easily of lower rank.)\n\n\u003e I\u0027m quite happy to add comments to places like this where we need to maintain the existing types. There are very few of them that are sufficiently sensitive that I think it makes a difference.\n\nplease do",
      "parentUuid": "ccb2f3a6_2003dee8",
      "revId": "213808a6f279b8f030ce25f5e67d2b43648ed9d3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a47c0d8_1bb41e5d",
        "filename": "include/svl/broadcast.hxx",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-06-06T09:06:46Z",
      "side": 1,
      "message": "\u003e \n\u003e Those unsigned types are forced upon us by the standard library (C++20 \u003chttps://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1227r2.html\u003e \"P1227: Signed ssize() functions, unsigned size() functions (Revision 2)\" notwithstanding).  (And sal_Int32 isn\u0027t really an appropriate signed alternative for std::size_t, given that it is easily of lower rank.)\n\u003e \n\nEh, no, you are what is forcing them on us. It is not beholden upon us to follow such things. I would quite happily disable that silly signed/unsigned mismatch warning globally for LO.\n\nsal_Int32 is perfectly fine for the vast majority of stuff in LO. There are incredibly few places where we even support indexes of magnitude \u003e 2^23, let alone 2^31",
      "parentUuid": "0c984017_58f6e461",
      "revId": "213808a6f279b8f030ce25f5e67d2b43648ed9d3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}