{
  "comments": [
    {
      "key": {
        "uuid": "bfb9dcbe_728ae022",
        "filename": "cui/source/dialogs/fileextcheckdlg.cxx",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-03-26T05:39:01Z",
      "side": 1,
      "message": "Please note the \"by convention, the very *first* should be sal/config.h\". Please add it always as the first include in every file (i.e., when you create the file; I don\u0027t mean adding it to existing files that miss it - for those, we usually add it only when we happen to add something in front of all includes, to not add noise to commits).",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "290ffae2_311a9c9d",
        "filename": "cui/source/dialogs/fileextcheckdlg.cxx",
        "patchSetId": 9
      },
      "lineNbr": 20,
      "author": {
        "id": 1003042
      },
      "writtenOn": "2021-03-27T01:47:05Z",
      "side": 1,
      "message": "Done, thanks for clarifying.",
      "parentUuid": "bfb9dcbe_728ae022",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a73c0b67_2073e2bb",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-03-26T05:39:01Z",
      "side": 1,
      "message": "Please split the includes into groups.\n\nThe block should look like this:\n\n  #endif\n  \n  #include \u003csal/config.h\u003e\n  \n  #include \u003co3tl/char16_t2wchar_t.hxx\u003e\n  #include \u003csystools/win32/comtools.hxx\u003e\n  #include \u003cvcl/abstdlg.hxx\u003e\n  #include \u003cvcl/fileregistration.hxx\u003e\n  \n  #include \u003cstrings.hrc\u003e\n  \n  #include \u003cprewin.h\u003e\n  #include \u003cShobjidl.h\u003e\n  #include \u003cversionhelpers.h\u003e\n  #include \u003cpostwin.h\u003e\n  \n  #include \u003cstring\u003e\n\nNote the first include separated from the rest; then a group of our library headers; then module-local includes; then a group of system headers (enclosed in prewin.h .. postwin.h); then a group of (a single) standard header. The group order is not important, but the includes inside groups are sorted.",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92c660da_6b96e9a1",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-03-26T05:43:55Z",
      "side": 1,
      "message": "A mistake here: I put systools/win32/comtools.hxx into our library group - but it should be inside prewin.h...postwin.h actually. It itself includes system headers, and should be guarded by those.",
      "parentUuid": "a73c0b67_2073e2bb",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52d3c8e9_7e888ecb",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1003042
      },
      "writtenOn": "2021-03-27T01:47:05Z",
      "side": 1,
      "message": "Done, thanks for explaining this.",
      "parentUuid": "92c660da_6b96e9a1",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac3720f6_ff7578cc",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-03-26T05:39:01Z",
      "side": 1,
      "message": "This is unneeded complexity.\n\nFor the number of values, you don\u0027t need them: your wanted value is the *default* one (with empty name), not the one named \"LibreOffice N\".\n\nFor the length, you have several choices.\n* You could reasonably assume a buffer of MAX_PATH. But of course, with long paths became reality with Win10, it could sometime become a problem. Still, you use the MAX_PATH when you get the module name, so...\n* You could get this module name first, and then create a buffer of the size returned by that. That\u0027s also an overkill, since you need a heap allocation.\n* My preferred would be use our LONG_MAX_PATH. Having two 64K byte buffers (for reg value and for module name) is fine; in a function that is known to not run when we are near stack overflow (and is known to not call stack-hungry functions itself) it is the easiest and best option.",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a416279_7d4be8ba",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 1003042
      },
      "writtenOn": "2021-03-27T01:47:05Z",
      "side": 1,
      "message": "Good points -- I wasn\u0027t sure about the default value but it works nicely with RegGetValueW.  I couldn\u0027t find a LONG_MAX_PATH, but I found a MAX_LONG_PATH in /core/sal/osl/w32/file_url.hxx, so I just copied that value here as that header doesn\u0027t seem to be public.  Using that, the buffers are ~65K bytes when factoring in the 2 bytes for WCHAR, so please let me know if you had a different value in mind.",
      "parentUuid": "ac3720f6_ff7578cc",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbb415a8_a054caf0",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 119,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-03-26T05:39:01Z",
      "side": 1,
      "message": "Use of a string class, with a string read, a memory allocation and deallocation - just to use its find()? I suppose it\u0027s better and cleaner to just use wcsncmp (you know the length of the path in registry from RegGetValueW that you would likely use).",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03f0a436_d7757760",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 119,
      "author": {
        "id": 1003042
      },
      "writtenOn": "2021-03-27T01:47:05Z",
      "side": 1,
      "message": "Good point.  I was just being consistent with the previous find, but checking for a substring is not needed so I changed it to wcsnicmp and converted the returned byte length to a char count.",
      "parentUuid": "cbb415a8_a054caf0",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0bc8037_9809ff81",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 186,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-03-26T05:39:01Z",
      "side": 1,
      "message": "This would skip CoUninitialize. So you likely want to use our comphelper::ScopeGuard to make sure to always call it, and not care about different exit paths.",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed0aa786_0f6f1486",
        "filename": "vcl/win/app/fileregistration.cxx",
        "patchSetId": 9
      },
      "lineNbr": 186,
      "author": {
        "id": 1003042
      },
      "writtenOn": "2021-03-27T01:47:05Z",
      "side": 1,
      "message": "Great catch -- nice to know about comphelper::ScopeGuard.",
      "parentUuid": "b0bc8037_9809ff81",
      "revId": "c628937a9345ae67d0aa5ef2588144b860f51748",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}