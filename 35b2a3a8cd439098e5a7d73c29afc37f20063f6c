{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3bb7e729_fd50531d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003375
      },
      "writtenOn": "2021-12-26T23:39:51Z",
      "side": 1,
      "message": "The proper way to handle this would be to add a macro that collects the variables, then inserts them into the file, instead of relying on external scripting.",
      "revId": "35b2a3a8cd439098e5a7d73c29afc37f20063f6c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1103666a_6f64a5bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-27T18:09:01Z",
      "side": 1,
      "message": "How?\n\nI just tried to use variants of m4_rename and m4_defn and m4_define, to just \n\n* copy AC_SUBST to libo_AC_SUBST\n* redefine AC_SUBST to call libo_AC_SUBST($1)\n\nAll variants I tried produced a diversity of errors, either for configure or autoconf..\n\nBTW: our minimal autoconf version is still 2.59; for better or worse. Probably can be bumped.",
      "parentUuid": "3bb7e729_fd50531d",
      "revId": "35b2a3a8cd439098e5a7d73c29afc37f20063f6c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a36cb95a_a4b63b8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003375
      },
      "writtenOn": "2021-12-27T23:06:22Z",
      "side": 1,
      "message": "No, I didn\u0027t mean intercepting AC_SUBST, but to add another macro to register those variables manually.\n\nSomething like:\n\n    m4_define([libo_EXPORT_CONFIG], [m4_append([libo_CONFIG], [$1], [ ])])dnl Beware, O(N)\n\nThe clean/portable way is doing that then exporting with AC_CONFIG_COMMANDS directly, but...\n\nYou could parse _AC_SUBST_VARS, it isn\u0027t guaranteed to work, so some safeguards are required and I have no idea atm of how to implement them. Currently the problem would be distinguishing between older versions of AC using m4_append_uniq, and newer ones using m4_set_add; but I guess checking the version and that m4_set_add is defined should be enough to choose the implementation...",
      "parentUuid": "1103666a_6f64a5bc",
      "revId": "35b2a3a8cd439098e5a7d73c29afc37f20063f6c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "845e0d26_a7fb574a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-28T06:31:00Z",
      "side": 1,
      "message": "\u003e ... add another macro to register those variables manually... The clean/portable way is doing that... You could parse _AC_SUBST_VARS,...\n\nIMHO the only useful clean/portable way would be to do the m4 macro renaming + chained call as described in the m4 manual (https://www.gnu.org/software/m4/manual/html_node/Defn.html#Defn) or the m4sugar / autoconf equivalent, which fails for me. Adding an other macro just adds an other possible error to the setup.\n\nThe main idea of this change is to reduce \"manual\" handling of externals. That\u0027s why there is also https://gerrit.libreoffice.org/c/core/+/127424.\n\nA developer is supposed to call autogen.sh instead of configure and Makefile will re-run autogen.sh, if any of the dependencies change.\n\nBut just in case someone runs a manual autoconf + configure, I can test for configure_parsed.mk in configure.ac and AC_MSG_ERROR in case it doesn\u0027t exist. It doesn\u0027t matter, if it\u0027s up-to-date, as Makefile will update it as needed, re-running autogen.sh.\n\nFWIW I\u0027m not yet sure how helpful this patch is as it. Maybe I should just filter ENABLE_* based on LIBS, CFLAGS and SYSTEM pre- and postfixes. So we get the generated block, and \"the other one\"; probably the better split of the variable set.",
      "parentUuid": "a36cb95a_a4b63b8e",
      "revId": "35b2a3a8cd439098e5a7d73c29afc37f20063f6c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e528dbed_56e235be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003375
      },
      "writtenOn": "2021-12-28T11:28:41Z",
      "side": 1,
      "message": "Well, using a separate helper macro would be easier to check as the macro stays close to the test that produces the variable; it\u0027s a middle ground. Parsing _AC_SUBST_VARS is definitely safer than intercepting the macro in this case, and you might find keeping all the values around (easily 1k) would force you to replicate the AC_SUBST implementation itself, if you want to do the de-duplication, so you might as well just rely on the internals...",
      "parentUuid": "845e0d26_a7fb574a",
      "revId": "35b2a3a8cd439098e5a7d73c29afc37f20063f6c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}