{
  "comments": [
    {
      "key": {
        "uuid": "fa31d9ce_6ee7ce12",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2018-01-18T21:33:43Z",
      "side": 1,
      "message": "Empty is the initial state; we don\u0027t need this \u003d)",
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_eebbbe73",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2018-01-19T06:13:28Z",
      "side": 1,
      "message": "redundant check: the next `for` would not do a single pass if the condition is false, anyway",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 29
      },
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_0ec1f2e4",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2018-01-19T06:13:28Z",
      "side": 1,
      "message": "Range-based loops are good; and would eliminate the need for sz var (well; I understand that all the nitpicks in this sections are irrelevant, if you follow Michael\u0027s advice and store structs in vector, instead of pointers - that will remove all this entirely)",
      "range": {
        "startLine": 83,
        "startChar": 8,
        "endLine": 83,
        "endChar": 36
      },
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_8e86c2b7",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2018-01-19T05:52:28Z",
      "side": 1,
      "message": "Here you leak Hunspell objects (since you don\u0027t delete them here, and the struct doesn\u0027t have its destructor, and Hunspell is included using naked ptr) - here\u0027s the place where I suppose that using unique_ptr is good (and mmeeks suggests using shared_ptr)",
      "range": {
        "startLine": 84,
        "startChar": 12,
        "endLine": 84,
        "endChar": 34
      },
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_6e898eca",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2018-01-19T05:52:28Z",
      "side": 1,
      "message": "this is unnecessary - vector will be destroyed shortly",
      "range": {
        "startLine": 86,
        "startChar": 4,
        "endLine": 86,
        "endChar": 26
      },
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_ce90baef",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2018-01-19T06:13:28Z",
      "side": 1,
      "message": "By the way: this most probably needs to happen before clearing the vector - because otherwise it\u0027s possible that an event will ask for access to already deleted dictionary before the listener is unregistered",
      "range": {
        "startLine": 88,
        "startChar": 4,
        "endLine": 88,
        "endChar": 22
      },
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_4ea4ca56",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2018-01-19T05:52:28Z",
      "side": 1,
      "message": "Here std::move is unnecessary - it is naked ptr (but this will change when you follow Michael\u0027s advise)",
      "range": {
        "startLine": 217,
        "startChar": 46,
        "endLine": 217,
        "endChar": 69
      },
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_ceeefaeb",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 293,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2018-01-18T21:33:43Z",
      "side": 1,
      "message": "nice \u003d)",
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_eeb9feed",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.cxx",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2018-01-18T21:33:43Z",
      "side": 1,
      "message": "normally no spaces around operators: so currDict-\u003em_aDLoc \u003d)",
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_aef1c6cf",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.hxx",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2018-01-18T21:33:43Z",
      "side": 1,
      "message": "We only prefix members with m_ - not structs; so \u0027DictItem\u0027 would be perfectly good for the name - thanks \u003d)",
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_8ee4020e",
        "filename": "lingucomponent/source/spellcheck/spell/sspellimp.hxx",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1000037
      },
      "writtenOn": "2018-01-18T21:33:43Z",
      "side": 1,
      "message": "Best to have an in-line m_DictItem - which we don\u0027t then need to allocate \u003d) so drop the \u0027*\u0027 pointer in here.",
      "revId": "888e3e4531aab884ecb8dbc363621fe691fb6edf",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}