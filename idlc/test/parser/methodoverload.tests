#
# This file is part of the LibreOffice project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This file incorporates work covered by the following license notice:
#
#   Licensed to the Apache Software Foundation (ASF) under one or more
#   contributor license agreements. See the NOTICE file distributed
#   with this work for additional information regarding copyright
#   ownership. The ASF licenses this file to you under the Apache
#   License, Version 2.0 (the "License"); you may not use this file
#   except in compliance with the License. You may obtain a copy of
#   the License at http://www.apache.org/licenses/LICENSE-2.0 .
#

EXPECT FAILURE "methodoverload.tests 1":
interface Derived {
	void f();
	void f();
};


EXPECT FAILURE "methodoverload.tests 2":
interface Base {
	void f();
};
interface Derived {
	interface Base;
	void f();
};


EXPECT FAILURE "methodoverload.tests 3":
interface Base {
	void f();
};
interface Derived {
	void f();
	interface Base;
};


EXPECT FAILURE "methodoverload.tests 4":
interface Base {
	void f();
};
interface Derived {
	[optional] interface Base;
	void f();
};


EXPECT FAILURE "methodoverload.tests 5":
interface Base {
	void f();
};
interface Derived {
	void f();
	[optional] interface Base;
};


EXPECT FAILURE "methodoverload.tests 6":
interface Base1 {
	void f();
};
interface Base2 {
	void f();
};
interface Derived {
	interface Base1;
	interface Base2;
};


EXPECT FAILURE "methodoverload.tests 7":
interface Base1 {
	void f();
};
interface Base2 {
	void f();
};
interface Derived {
	[optional] interface Base1;
	interface Base2;
};


EXPECT FAILURE "methodoverload.tests 8":
interface Base1 {
	void f();
};
interface Base2 {
	void f();
};
interface Derived {
	interface Base1;
	[optional] interface Base2;
};


EXPECT SUCCESS "methodoverload.tests 9":
interface Base1 {
	void f();
};
interface Base2 {
	void f();
};
interface Derived {
	[optional] interface Base1;
	[optional] interface Base2;
};


EXPECT FAILURE "methodoverload.tests 10":
interface I {
    [attribute] long a;
    [attribute] short a;
};


EXPECT FAILURE "methodoverload.tests 11":
interface I1 {
    [attribute] long a;
};
interface I2 {
    [attribute] short a;
    interface I1;
};


EXPECT FAILURE "methodoverload.tests 12":
interface I {
    [attribute] long a;
    void a();
};


EXPECT FAILURE "methodoverload.tests 13":
interface I1 {
    [attribute] long a;
}
interface I2 {
    void a();
    interface I1;
};


EXPECT FAILURE "methodoverload.tests 14":
interface I1 {
    void a();
}
interface I2 {
    [attribute] long a;
    interface I1;
};


EXPECT SUCCESS "methodoverload.tests 15":
interface I {
    [attribute] long a;
    void geta();
    void seta();
};


EXPECT SUCCESS "methodoverload.tests 16":
interface I1 {
    [attribute] long a;
};
interface I2: I1 {
    void geta();
    void seta();
};
