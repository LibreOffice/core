{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aec48902_46a7a188",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2022-07-01T08:43:05Z",
      "side": 1,
      "message": "No objections to this in general, but as discussed at https://gerrit.libreoffice.org/c/core/+/135916, the ordering of these marks when they start at the same position is not too clear: it seems we have 2 places where these are ordered:\n\n- CompareMarksEnd in the WW8 export will sort bookmarks start at the same position by their end position (which may not be stable if the both have the same start and end position)\n\n- lcl_FillBookmarkArray() operates on an SwXBookmarkPortion_ImplList in the UNO API, and there it seems to work only with the start position, giving an unpredictable result when two bookmarks start at the same position (which is allowed)\n\nIt seems to me these problems are still there after this change (just flagging them); but if this change improves sometimes, it doesn\u0027t make the situation worse.\n\nIf my analysis is not correct, of course please do point it out. :-)",
      "revId": "4b2978b53196848e52caee2951160bcc50959c6b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b925c0_22ec3e9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-07-01T08:56:16Z",
      "side": 1,
      "message": "I think we have two different problems here\n(1) Sorting on export, which affects the output format\n(2) Sorting for internal use (ie. here) which is more serious as it may lead to weird internal behaviour.\n\nThis patch affects (2), so I think it\u0027s a very good thing :-)\n\n\u003e \n\u003e - CompareMarksEnd in the WW8 export will sort bookmarks start at the \n\nThis is problem (1), which I am less concerned about.\n\n\u003e \n\u003e - lcl_FillBookmarkArray() operates on an SwXBookmarkPortion_ImplList in \n\nThis could be either, but I think it should use the same sorting as this code, just to be safe.",
      "parentUuid": "aec48902_46a7a188",
      "revId": "4b2978b53196848e52caee2951160bcc50959c6b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c820adcb_c2608c54",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2022-07-01T09:47:14Z",
      "side": 1,
      "message": "Even for (2), my reading of lcl_MarkOrderingByStart() is that you get unpredictable order in case two bookmarks start on the same position. Bookmark starts don\u0027t have a dummy character at start, so this can happen. If there is a practical need, then either ordering by end pos or by name (for marks starting at the same position) would probably make sense.",
      "parentUuid": "e6b925c0_22ec3e9b",
      "revId": "4b2978b53196848e52caee2951160bcc50959c6b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6ef5a99_435f2fc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-07-01T11:36:10Z",
      "side": 1,
      "message": "\u003e Even for (2), my reading of lcl_MarkOrderingByStart() is that you get unpredictable order in case two bookmarks start on the same position. Bookmark starts don\u0027t have a dummy character at start, so this can happen. If there is a practical need, then either ordering by end pos or by name (for marks starting at the same position) would probably make sense.\n\nIf I drop this change\u0027s use of stable_sort again and instead use the below patch (assuming that matches what you mean above), the test still fails.\n\n  diff --git a/sw/source/core/doc/docbm.cxx b/sw/source/core/doc/docbm.cxx\n  index 1b283437ab6f..6c596a6566fe 100644\n  --- a/sw/source/core/doc/docbm.cxx\n  +++ b/sw/source/core/doc/docbm.cxx\n  @@ -219,11 +219,17 @@ namespace\n           }\n           auto *const pCRFirst (dynamic_cast\u003c::sw::mark::CrossRefBookmark const*\u003e(pFirst));\n           auto *const pCRSecond(dynamic_cast\u003c::sw::mark::CrossRefBookmark const*\u003e(pSecond));\n  -        if ((pCRFirst \u003d\u003d nullptr) \u003d\u003d (pCRSecond \u003d\u003d nullptr))\n  +        if ((pCRFirst \u003d\u003d nullptr) !\u003d (pCRSecond \u003d\u003d nullptr))\n           {\n  -            return false; // equal\n  +            return pCRFirst !\u003d nullptr; // cross-ref sorts *before*\n           }\n  -        return pCRFirst !\u003d nullptr; // cross-ref sorts *before*\n  +        auto const\u0026 rFirstEnd(pFirst-\u003eGetMarkEnd());\n  +        auto const\u0026 rSecondEnd(pSecond-\u003eGetMarkEnd());\n  +        if (rFirstEnd !\u003d rSecondEnd)\n  +        {\n  +            return rFirstEnd \u003c rSecondEnd;\n  +        }\n  +        return pFirst-\u003eGetName() \u003c pSecond-\u003eGetName();\n       }\n   \n       bool lcl_MarkOrderingByEnd(const ::sw::mark::MarkBase *const pFirst,",
      "parentUuid": "c820adcb_c2608c54",
      "revId": "4b2978b53196848e52caee2951160bcc50959c6b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21dbcbfb_b914babd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2022-07-01T11:59:33Z",
      "side": 1,
      "message": "Reading again what sort vs stable_sort is, now your change actually makes sense to me. I don\u0027t think there is an invariant that a document can\u0027t contain 2 bookmarks starting + ending at the same positions + having the same name. Which means that we do need stable_sort() if we want unchanged order at the end of the sort. Sorry that it took a few cycles for me to realize this. :-)\n\n(And still once somebody needs this in practice, the above patch would make sense to me, but adding it without somebody requesting it may be just a bloat.)",
      "parentUuid": "e6ef5a99_435f2fc4",
      "revId": "4b2978b53196848e52caee2951160bcc50959c6b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76d4c629_874c87c5",
        "filename": "sw/source/core/doc/docbm.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1743,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-07-01T07:59:07Z",
      "side": 1,
      "message": "probably the other two will need the same thing, since they have the same ordering criteria",
      "revId": "4b2978b53196848e52caee2951160bcc50959c6b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}