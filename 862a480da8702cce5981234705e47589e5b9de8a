{
  "comments": [
    {
      "key": {
        "uuid": "5ad0253b_5e230906",
        "filename": "sc/inc/global.hxx",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2014-08-22T16:31:41Z",
      "side": 1,
      "message": "Why 0x1fff? Shouldn\u0027t that be 0x7fff if it is for excluding signed values?",
      "revId": "862a480da8702cce5981234705e47589e5b9de8a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ad0253b_fe5f7573",
        "filename": "sc/inc/global.hxx",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2014-08-22T17:59:56Z",
      "side": 1,
      "message": "0x1fff covers the full range of this bitfield.",
      "parentUuid": "5ad0253b_5e230906",
      "revId": "862a480da8702cce5981234705e47589e5b9de8a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ad0253b_a9af8593",
        "filename": "sc/inc/global.hxx",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2014-08-25T11:01:49Z",
      "side": 1,
      "message": "That\u0027s the answer I feared ;-)\n\nSo when adding a new bit flag below, one has to remember and change another code place and adopt the new bit. I\u0027d rather avoid that. For a clean bitmask here better have a constant below with IDF_ALL_USED_BITS or some such so the intention is clear, and move this member function after the constant definition so it can pick it up.",
      "parentUuid": "5ad0253b_fe5f7573",
      "revId": "862a480da8702cce5981234705e47589e5b9de8a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ad0253b_3e204df7",
        "filename": "sc/inc/global.hxx",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2014-08-22T16:31:41Z",
      "side": 1,
      "message": "Assertion not enabled?",
      "revId": "862a480da8702cce5981234705e47589e5b9de8a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ad0253b_de64b94a",
        "filename": "sc/inc/global.hxx",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2014-08-22T17:59:56Z",
      "side": 1,
      "message": "Boost can\u0027t cope with this construct. There is some hope of getting BOOST_STATIC_ASSERT to work once we have constexpr.",
      "parentUuid": "5ad0253b_3e204df7",
      "revId": "862a480da8702cce5981234705e47589e5b9de8a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}