{
  "comments": [
    {
      "key": {
        "uuid": "af9ac35c_da682954",
        "filename": "sot/source/base/exchange.cxx",
        "patchSetId": 1
      },
      "lineNbr": 453,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-14T07:42:02Z",
      "side": 1,
      "message": "* \u003ccstring\u003e declares std::strlen, but not necessary strlen\n* the return type of std::strlen is std::size_t, not int\n* or use rtl_str_getLength, whose return type sal_Int32 better fits with the uses of nFormatMimeTypeLen below",
      "revId": "a88b7bbb6064d1e3e2acf9401cc1170e8eb13fb6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1134096_ef6f0876",
        "filename": "sot/source/base/exchange.cxx",
        "patchSetId": 1
      },
      "lineNbr": 454,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-14T07:42:02Z",
      "side": 1,
      "message": "as you have already computed nFormatMimeTypeLen anyway, you could use OUString::equalsAsciiL",
      "revId": "a88b7bbb6064d1e3e2acf9401cc1170e8eb13fb6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6da524c_6b590b04",
        "filename": "sot/source/base/exchange.cxx",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-14T07:42:02Z",
      "side": 1,
      "message": "I would drop the +1.  For one, that would avoid verifying just some (namely, that there is something following the first \";\"), but not all (namely, that it matches\n\n  *(\";\" token \"\u003d\" (token / quoted-string))\n\n) aspects of correctness of the input\u0027s parameters.  For another, it would avoid potential overflow.",
      "range": {
        "startLine": 455,
        "startChar": 56,
        "endLine": 455,
        "endChar": 60
      },
      "revId": "a88b7bbb6064d1e3e2acf9401cc1170e8eb13fb6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f202a07_25c76471",
        "filename": "sot/source/base/exchange.cxx",
        "patchSetId": 1
      },
      "lineNbr": 457,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-14T07:42:02Z",
      "side": 1,
      "message": "to avoid OUString::copy, you could use rtl_ustr_asciil_reverseEquals_WithLength (or even introduce OUString::startsWithAsciiL to match the existing OUString::endsWithAsciiL)",
      "revId": "a88b7bbb6064d1e3e2acf9401cc1170e8eb13fb6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d57045e5_bcb8fedf",
        "filename": "sot/source/base/exchange.cxx",
        "patchSetId": 1
      },
      "lineNbr": 461,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-14T07:42:02Z",
      "side": 1,
      "message": "I would retain an empty line here (as is also used elsewhere between blocks of code in this function)",
      "revId": "a88b7bbb6064d1e3e2acf9401cc1170e8eb13fb6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}