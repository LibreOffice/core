{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "febd4f3a_f7732ac2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-04-03T10:32:24Z",
      "side": 1,
      "message": "Thanks!\n\nWrt hotpath pessimization:\nWe can always use C++20 [[likely]]/[[unlikely]] attributes [1]; given that starting with C++17, \"All attributes unknown to an implementation are ignored without causing an error\" [2], it doesn\u0027t require any #idfed\u0027ing.\n\nHowever, that must *only* be used *iif* we know for sure that one branch is really more likely than the other, and is pessimized without the attribute, so that this optimization is a reasonable one, and not a wishful thinking.\n\n[1] https://en.cppreference.com/w/cpp/language/attributes/likely\n[2] https://en.cppreference.com/w/cpp/language/attributes",
      "revId": "23b9f2cc1ede41b653da9cbfb53e76757cfa6fe6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61dc8822_532906c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-04-04T06:41:37Z",
      "side": 1,
      "message": "[this change came to my attention when I wondered whether one should consider its use of `return call_function_returning_void()` as \"too clever\"]\n\n\u003e Wrt hotpath pessimization:\n\u003e We can always use C++20 [[likely]]/[[unlikely]] attributes [1]; given that starting with C++17, \"All attributes unknown to an implementation are ignored without causing an error\" [2], it doesn\u0027t require any #idfed\u0027ing.\n\n* see \u003chttps://blog.aaronballman.com/2020/08/dont-use-the-likely-or-unlikely-attributes/\u003e\n* note that compilers generally warn about attributes they don\u0027t know (for arguably good reason, to catch mistypings)",
      "parentUuid": "febd4f3a_f7732ac2",
      "revId": "23b9f2cc1ede41b653da9cbfb53e76757cfa6fe6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e24fd40_9d9ac388",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-04-04T07:14:16Z",
      "side": 1,
      "message": "\u003e consider its use of `return call_function_returning_void()` as \"too clever\"\n\nPlease don\u0027t! :-) Is there a compelling reason to do?",
      "parentUuid": "61dc8822_532906c9",
      "revId": "23b9f2cc1ede41b653da9cbfb53e76757cfa6fe6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd1303f2_512ff639",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-04-04T08:53:08Z",
      "side": 1,
      "message": "It\u0027s a rather uncommon construct in C++, so my first reaction upon seeing it here was (a) checking that this code actually compiles (and is not e.g. something rotten in an #if 0 block), and (b) checking that StarBasic::Error is a function that indeed returns void and is only called for its side effect.\n\nI\u0027m not convinced that stashing a function call that is only made for its side effects into a return statement is a net readability win.",
      "parentUuid": "9e24fd40_9d9ac388",
      "revId": "23b9f2cc1ede41b653da9cbfb53e76757cfa6fe6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7584cfee_6e90de6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-04-04T09:37:13Z",
      "side": 1,
      "message": "Accidentally \"removed myself from reviewers\" - thick fingers :-)\n\n\u003e I\u0027m not convinced that stashing a function call that is only made for its side effects into a return statement is a net readability win.\n\nLet me disagree. TL;DR: I suppose that there are cases that express \"this is the function result\" idea neatly, like here.\n\nCompare to this imaginary sample:\n\n  void CloseHandle(HANDLE);\n  void WriteToFile(char* filename)\n  {\n    HANDLE hFile \u003d OpenFile(filename);\n    // Write to the file represented by handle\n    return CloseHandle(hFile);\n  }\n\nIMO, *this* example would be the pure \"stashing a function call that is only made for its side effects\" that you meant. But in the discussed gerrit change, the used syntax means that \"the error, set in some state instead of returned from function, *is* the function\u0027s result in this case\". And I believe it is a real readability win.",
      "parentUuid": "cd1303f2_512ff639",
      "revId": "23b9f2cc1ede41b653da9cbfb53e76757cfa6fe6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}