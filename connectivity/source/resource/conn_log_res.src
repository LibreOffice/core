/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#include "resource/jdbc_log.hrc"

// = log messages for the JDBC driver

String STR_LOG_DRIVER_CONNECTING_URL
{
    Text = "jdbcBridge: connecting to URL '$1$'";
};

String STR_LOG_DRIVER_SUCCESS
{
    Text = "jdbcBridge: success";
};

String STR_LOG_CREATE_STATEMENT
{
    Text = "c$1$: creating statement";
};

String STR_LOG_CREATED_STATEMENT_ID
{
    Text = "c$1$: created statement, statement id: s$2$";
};

String STR_LOG_PREPARE_STATEMENT
{
    Text = "c$1$: preparing statement: $2$";
};

String STR_LOG_PREPARED_STATEMENT_ID
{
    Text = "c$1$: prepared statement, statement id: s$2$";
};

String STR_LOG_PREPARE_CALL
{
    Text = "c$1$: preparing call: $2$";
};

String STR_LOG_PREPARED_CALL_ID
{
    Text = "c$1$: prepared call, statement id: s$2$";
};

String STR_LOG_NATIVE_SQL
{
    Text = "c$1$: native SQL: $2$ -> $3$";
};

String STR_LOG_LOADING_DRIVER
{
    Text = "c$1$: attempting to load driver class $2$";
};

String STR_LOG_NO_DRIVER_CLASS
{
    Text = "c$1$: no Java Driver Class was provided";
};

String STR_LOG_CONN_SUCCESS
{
    Text = "c$1$: success";
};

String STR_LOG_NO_SYSTEM_CONNECTION
{
    Text = "c$1$: JDBC driver did not provide a JDBC connection";
};

String STR_LOG_GOT_JDBC_CONNECTION
{
    Text = "c$1$: obtained a JDBC connection for $2$";
};

String STR_LOG_SHUTDOWN_CONNECTION
{
    Text = "c$1$: shutting down connection";
};

String STR_LOG_GENERATED_VALUES
{
    Text = "s$1$: retrieving generated values";
};

String STR_LOG_GENERATED_VALUES_FALLBACK
{
    Text = "s$1$: getGeneratedValues: falling back to statement: $2$";
};

String STR_LOG_EXECUTE_STATEMENT
{
    Text = "s$1$: going to execute: $2$";
};

String STR_LOG_EXECUTE_QUERY
{
    Text = "s$1$: going to execute query: $2$";
};

String STR_LOG_CLOSING_STATEMENT
{
    Text = "s$1$: closing/disposing statement";
};

String STR_LOG_EXECUTE_UPDATE
{
    Text = "s$1$: going to execute update: $2$";
};

String STR_LOG_UPDATE_COUNT
{
    Text = "s$1$: update count: $2$";
};

String STR_LOG_RESULT_SET_CONCURRENCY
{
    Text = "s$1$: going to set result set concurrency: $2$";
};

String STR_LOG_RESULT_SET_TYPE
{
    Text = "s$1$: going to set result set type: $2$";
};

String STR_LOG_FETCH_DIRECTION
{
    Text = "s$1$: fetch direction: $2$";
};

String STR_LOG_FETCH_SIZE
{
    Text = "s$1$: fetch size: $2$";
};

String STR_LOG_SET_ESCAPE_PROCESSING
{
    Text = "s$1$: going to set escape processing: $2$";
};

String STR_LOG_EXECUTING_PREPARED
{
    Text = "s$1$: executing previously prepared statement";
};

String STR_LOG_EXECUTING_PREPARED_UPDATE
{
    Text = "s$1$: executing previously prepared update statement";
};

String STR_LOG_EXECUTING_PREPARED_QUERY
{
    Text = "s$1$: executing previously prepared query";
};

String STR_LOG_STRING_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: string; value: $3$";
};

String STR_LOG_BOOLEAN_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: boolean; value: $3$";
};

String STR_LOG_BYTE_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: byte; value: $3$";
};

String STR_LOG_DATE_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: date; value: $3$";
};

String STR_LOG_TIME_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: time; value: $3$";
};

String STR_LOG_TIMESTAMP_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: timestamp; value: $3$";
};

String STR_LOG_DOUBLE_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: double; value: $3$";
};

String STR_LOG_FLOAT_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: float; value: $3$";
};

String STR_LOG_INT_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: int; value: $3$";
};

String STR_LOG_LONG_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: long; value: $3$";
};

String STR_LOG_NULL_PARAMETER
{
    Text = "s$1$: parameter no. $2$: sql-type: $3$; value: null";
};

String STR_LOG_OBJECT_NULL_PARAMETER
{
    Text = "s$1$: parameter no. $2$: setting to null";
};

String STR_LOG_SHORT_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: short; value: $3$";
};

String STR_LOG_BYTES_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: byte[]";
};

String STR_LOG_CHARSTREAM_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: character stream";
};

String STR_LOG_BINARYSTREAM_PARAMETER
{
    Text = "s$1$: parameter no. $2$: type: binary stream";
};

String STR_LOG_CLEAR_PARAMETERS
{
    Text = "s$1$: clearing all parameters";
};

String STR_LOG_META_DATA_METHOD
{
    Text = "c$1$: entering XDatabaseMetaData::$2$";
};

String STR_LOG_META_DATA_METHOD_ARG1
{
    Text = "c$1$: entering XDatabaseMetaData::$2$( '$3$' )";
};

String STR_LOG_META_DATA_METHOD_ARG2
{
    Text = "c$1$: entering XDatabaseMetaData::$2$( '$3$', '$4$' )";
};

String STR_LOG_META_DATA_METHOD_ARG3
{
    Text = "c$1$: entering XDatabaseMetaData::$2$( '$3$', '$4$', '$5$' )";
};

String STR_LOG_META_DATA_METHOD_ARG4
{
    Text = "c$1$: entering XDatabaseMetaData::$2$( '$3$', '$4$', '$5$', '$6$' )";
};

String STR_LOG_META_DATA_RESULT
{
    Text = "c$1$: leaving XDatabaseMetaData::$2$: success-with-result: $3$";
};

String STR_LOG_META_DATA_SUCCESS
{
    Text = "c$1$: leaving XDatabaseMetaData::$2$: success";
};

String STR_LOG_THROWING_EXCEPTION
{
    Text = "SQLException to be thrown: message: '$1$', SQLState: $2$, ErrorCode: $3$";
};

String STR_LOG_SETTING_SYSTEM_PROPERTY
{
    Text = "setting system property \"$1$\" to value \"$2$\"";
};

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
