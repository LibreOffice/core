{
  "comments": [
    {
      "key": {
        "uuid": "1a930d6b_11e9ac1a",
        "filename": "compilerplugins/clang/callstringbyvalue.cxx",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2014-03-06T14:44:27Z",
      "side": 1,
      "message": "why restrict this to (C++) member functions only?",
      "revId": "a80e13756172040cbbd60754b76f315291d0a96c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_31eea823",
        "filename": "compilerplugins/clang/callstringbyvalue.cxx",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2014-03-06T14:44:27Z",
      "side": 1,
      "message": "this check is redundant given the following for loop",
      "revId": "a80e13756172040cbbd60754b76f315291d0a96c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_f18c2082",
        "filename": "compilerplugins/clang/callstringbyvalue.cxx",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2014-03-06T14:44:27Z",
      "side": 1,
      "message": "why?",
      "revId": "a80e13756172040cbbd60754b76f315291d0a96c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_51f3340a",
        "filename": "compilerplugins/clang/callstringbyvalue.cxx",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2014-03-06T14:44:27Z",
      "side": 1,
      "message": "for one, getAsString is rather expensive, so you can first narrow down with isClassType, and then get rid of all the \"const\" and \"class\" and whatnot variance with\n\n  QualType t1 { pvDecl-\u003egetType() };\n  if (!t1-\u003eisClassType()) {\n      continue;\n  }\n  string typeName \u003d t1.getUnqualifiedType().getCanonicalType().getAsString();\n  if (typeName \u003d\u003d \"class rtl::OUString\") {",
      "revId": "a80e13756172040cbbd60754b76f315291d0a96c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_11d0cc52",
        "filename": "compilerplugins/clang/callstringbyvalue.cxx",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2014-03-06T14:44:27Z",
      "side": 1,
      "message": "add\n\n  report(...) \u003c\u003c pvDecl-\u003egetSourceRange();\n\nso it\u0027ll underline the whole parameter decl",
      "revId": "a80e13756172040cbbd60754b76f315291d0a96c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_d1e64444",
        "filename": "compilerplugins/clang/callstringbyvalue.cxx",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2014-03-06T14:44:27Z",
      "side": 1,
      "message": "why only report the first bad parameter?",
      "revId": "a80e13756172040cbbd60754b76f315291d0a96c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_f1e34031",
        "filename": "compilerplugins/clang/callstringbyvalue.cxx",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2014-03-06T14:44:27Z",
      "side": 1,
      "message": "else if (...\n\n(once the breaks would be gone)",
      "revId": "a80e13756172040cbbd60754b76f315291d0a96c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}