{
  "comments": [
    {
      "key": {
        "uuid": "AAAAXn//92U\u003d",
        "filename": "vcl/source/control/field2.cxx",
        "patchSetId": 1
      },
      "lineNbr": 2291,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2013-07-28T16:35:25Z",
      "side": 1,
      "message": "even en empty string as \"\\0\" no ?\nbeside how can nSep can be \u003e\u003d 0 and yet aStr be empty ?",
      "revId": "e2322fd87ea03d9234a5a914cffd30cc3d1e1567",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXn//914\u003d",
        "filename": "vcl/source/control/field2.cxx",
        "patchSetId": 1
      },
      "lineNbr": 2291,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2013-07-28T17:04:08Z",
      "side": 1,
      "message": "\u003e even en empty string has \"\\0\", no ?\n\nI touched that because I got an assertion failure in one of the four places I subsequently changed. \u0027t was definitely fixed by that change... Trying to reproduce.\n\n\u003e  how can nSep can be \u003e\u003d 0 and yet aStr be empty ?\n\nimplCutTimePortion modifies aStr; it removes the (prefix) part that corresponds to the value it puts in nMinute.",
      "parentUuid": "AAAAXn//92U\u003d",
      "revId": "e2322fd87ea03d9234a5a914cffd30cc3d1e1567",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXn//91Y\u003d",
        "filename": "vcl/source/control/field2.cxx",
        "patchSetId": 1
      },
      "lineNbr": 2291,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2013-07-28T17:26:14Z",
      "side": 1,
      "message": "\u003e even en empty string has \"\\0\", no ?\n\nFound it: aStr is a OUStringBuffer, not a OUString. OUStringBuffer::operator[] has\n\n assert(index \u003e\u003d 0 \u0026\u0026 index \u003c pData-\u003elength);\n\nas opposed to OUString::operator[] which has\n\n   assert(index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d getLength());\n          //TODO: should really check for \u003c getLength(), but there is quite\n          // some clever code out there that violates this function\u0027s\n          // documented precondition and relies on s[s.getLength()] \u003d\u003d 0 and\n          // that would need to be fixed first\n\n\nSo that\u0027s why I was getting the abort. Is the old code safe in non-debug build? Maybe yes, maybe not. Dunno. Easier to just add the check. (and even if the old code is \"safe in non-debug\", remove one behaviour difference between debug-mode and non-debug-mode).",
      "parentUuid": "AAAAXn//914\u003d",
      "revId": "e2322fd87ea03d9234a5a914cffd30cc3d1e1567",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXn//9zk\u003d",
        "filename": "vcl/source/control/field2.cxx",
        "patchSetId": 1
      },
      "lineNbr": 2291,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2013-07-28T23:40:55Z",
      "side": 1,
      "message": "ok.\nI do thing that pretending taht \\0 is not there or even worse actually generating object for which that is the case is begging for trouble\n(no so much for the case above, but for the numerous case where we use getStr as a \u0027null-terminated-string\u0027\n\n(for instance OUString(rStr.getStr() + foo))\nto get a trailing substring\n\nor the numerous while loop like\ncursor \u003d str.getStr()\nwhile(*cursor)\n{\n}\n\nNot that rtl_stringbuffer_insert() and _delete() both take great care to insure that the string end with a \\0\n\nand rtl_stringbuffer_ensureCapacity calculate the minimum memory size as (len +1)*2\n\nThe problem I think is that the assert on OUString can be more lenient because OUString [] can only be used to read\nwhereas [] can also be use to write in OUStringBuffer... and indeed overwriting the final \\0 would be very bad.\n\nI\u0027m not fluent enough in c++ to know if there is a way to distinguish these 2 cases (aStr[] as a left-value vs a right value)\n\nso in fine, this is just wasting cpu to do a test and taking a branch for nothing. but heh... nothing new here :-)\nConsider my remarks \u0027addressed\u0027 :-)",
      "parentUuid": "AAAAXn//91Y\u003d",
      "revId": "e2322fd87ea03d9234a5a914cffd30cc3d1e1567",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}