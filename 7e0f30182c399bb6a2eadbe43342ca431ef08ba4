{
  "comments": [
    {
      "key": {
        "uuid": "1a430d35_dd9a49c5",
        "filename": "sc/qa/unit/subsequent_export-test.cxx",
        "patchSetId": 1
      },
      "lineNbr": 620,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2017-08-15T20:32:03Z",
      "side": 1,
      "message": "a typo that Windows build have spotted :)",
      "range": {
        "startLine": 620,
        "startChar": 79,
        "endLine": 620,
        "endChar": 80
      },
      "revId": "7e0f30182c399bb6a2eadbe43342ca431ef08ba4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_3ded0d8c",
        "filename": "sc/source/core/data/dpcache.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1252,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2017-08-16T10:55:09Z",
      "side": 1,
      "message": "Nitpick: please, when nesting if use block braces to clarify\n\n if()\n {\n     if()\n         ...\n     else\n         ...\n }",
      "revId": "7e0f30182c399bb6a2eadbe43342ca431ef08ba4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_9dfc4140",
        "filename": "sc/source/core/data/dpcache.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1254,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2017-08-16T10:55:09Z",
      "side": 1,
      "message": "This looks odd.\n\nGetNumberFormat(nDim) returns maFields[nDim]-\u003emnNumFormat and GetLocaleIndependentFormattedString() for that via GetLocaleIndependentFormat() determines the type with SvNumberFormatter::GetType( nNumFormat) and chooses the proper format for DATE, TIME and DATETIME.\n\nIsDateDimension(nDim) uses SvNumberFormatter::GetType(maFields[nDim]-\u003emnNumFormat) and returns true for DATE or DATETIME.\n\nEffectively this change now formats also DATE fields as DATETIME, which is wrong.\n\nCould you elaborate why you changed this?",
      "revId": "7e0f30182c399bb6a2eadbe43342ca431ef08ba4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_794b2a5a",
        "filename": "sc/source/filter/excel/xepivotxml.cxx",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2017-08-15T06:10:16Z",
      "side": 1,
      "message": "This, of course, is to be removed in a later version of the change",
      "range": {
        "startLine": 54,
        "startChar": 12,
        "endLine": 55,
        "endChar": 413
      },
      "revId": "7e0f30182c399bb6a2eadbe43342ca431ef08ba4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_d9789e92",
        "filename": "sc/source/filter/excel/xepivotxml.cxx",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2017-08-15T06:10:16Z",
      "side": 1,
      "message": "Else we should create min and max date values. We may not do this check here, but instead add the code to output min\u0026max date below at line 314.",
      "range": {
        "startLine": 248,
        "startChar": 46,
        "endLine": 248,
        "endChar": 75
      },
      "revId": "7e0f30182c399bb6a2eadbe43342ca431ef08ba4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_f96d5acd",
        "filename": "sc/source/filter/excel/xepivotxml.cxx",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2017-08-15T06:10:16Z",
      "side": 1,
      "message": "else if (isContainsDate) { /* add minDate and maxDate */ }",
      "revId": "7e0f30182c399bb6a2eadbe43342ca431ef08ba4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}