{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bb6076bd_7b07476d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-14T09:32:10Z",
      "side": 1,
      "message": "Indeed, the reference counter looks odd; and there is an assert (no greater than 2), and then the code uses the \u0027!maGeometry.hasSavedPosSize()\u0027 checks (e.g. https://gerrit.libreoffice.org/c/core/+/135812). So the flow is unclear:\n\n1. What problem the counter solves? The message does not explain that, only mentions an alternative - again, to solve what is left unsaid.\n2. Why can\u0027t we call refOrSavePosSize unconditionally, tolerating the counter values greater than 2? (I *guess* that the save/restore calls indeed do not follow a strict order, but would then the value of 2 be safe?)",
      "range": {
        "startLine": 21,
        "startChar": 40,
        "endLine": 22,
        "endChar": 33
      },
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaaf7ea7_d94b0196",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-06-14T10:13:00Z",
      "side": 1,
      "message": "\u003e Indeed, the reference counter looks odd; and there is an assert (no greater than 2), and then the code uses the \u0027!maGeometry.hasSavedPosSize()\u0027 checks (e.g. https://gerrit.libreoffice.org/c/core/+/135812). So the flow is unclear:\n\u003e \n\u003e 1. What problem the counter solves? The message does not explain that, only mentions an alternative - again, to solve what is left unsaid.\n\nSo the imagined scenario is:\n- normal window\n- maximized window, normal saved: 1\n- full-screen maximized window: 2\n- un-fullscreen \u003d\u003e maximize: 1\n- minimize: 1\n- normal : 0 \u003d\u003e restore position\n\nThinking about it again, it\u0027s easier to just cache the state and compare it to the current state. I wanted to have some common \"facility\", but maybe this is making everything more complex then needed...\n\nIn the end we just need to save/keep the normal position and size, while in any other none-normal state.\n\n\u003e 2. Why can\u0027t we call refOrSavePosSize unconditionally, tolerating the counter values greater than 2? (I *guess* that the save/restore calls indeed do not follow a strict order, but would then the value of 2 be safe?)\n\nMy original idea was, minimize and maximize are \"stack 1\" and full-screen is \"stack 2\", so you can actually have a WindowState of \"Maximize | Fullscreen\", where going back from Fullscreen restores Maximize (or Minimize). Starting a Fullscreen presentation from a Maximized Impress definitely happens, but OTOH the Fullscreen Impress window is separate, so it\u0027s actually a non-problem here.\n\nThe refcounter going to zero indicates, we should restore the normal size and clear the saved normal position and size.",
      "parentUuid": "bb6076bd_7b07476d",
      "range": {
        "startLine": 21,
        "startChar": 40,
        "endLine": 22,
        "endChar": 33
      },
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43b0d827_2f113601",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-14T10:19:29Z",
      "side": 1,
      "message": "\u003e the imagined scenario\n\nHmm. I must say immediately that I didn\u0027t debug, so I may be wrong in my scenario (it may go through intermediate state that makes my scenario still following your invariants)? Still, from the UI (user) point of view, this scenario is possible (e.g., on Windows):\n\n1. Normal -\u003e maximized (drag to e.g. left side of screen)\n2. Maximized -\u003e full screen (using window system button)\n3. Full screen -\u003e minimized (using system button)\n4. Minimized -\u003e normal (using status bar context menu)\n\nDoes this scenario fit?",
      "parentUuid": "aaaf7ea7_d94b0196",
      "range": {
        "startLine": 21,
        "startChar": 40,
        "endLine": 22,
        "endChar": 33
      },
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "768b55a9_c44d03e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-06-14T11:47:41Z",
      "side": 1,
      "message": "\u003e \u003e the imagined scenario\n\u003e \n\u003e Hmm. I must say immediately that I didn\u0027t debug, so I may be wrong in my scenario (it may go through intermediate state that makes my scenario still following your invariants)? Still, from the UI (user) point of view, this scenario is possible (e.g., on Windows):\n\u003e \n\u003e 1. Normal -\u003e maximized (drag to e.g. left side of screen)\n\u003e 2. Maximized -\u003e full screen (using window system button)\n\u003e 3. Full screen -\u003e minimized (using system button)\n\u003e 4. Minimized -\u003e normal (using status bar context menu)\n\u003e \n\u003e Does this scenario fit?\n\nYes. But I\u0027m somehow happy that I\u0027m not the only one struggling with this. It feels I spend more time thinking about it then actually coding (but not waiting on full recompiles of LO when changing the tools::Rectangle on Linux and Windows...)\n\nI\u0027m not sure what your question really is, but this should be handled just fine.\n\nIt comes down to:\n\n\u003e For me the WindowState is represented by:\n\u003e - the normal position and size\n\u003e - the current non-normal state (full-screen | maximized | minimized / iconfified)\n\nWe need to save the position and size when we leave \"normal\" and restore it, when we enter normal. The saved \"normal\" is required when we quit LO, so we can correctly restore the window to it\u0027s original position and size and the restore the state. Actually most of the state transitions are done by the OS, so VCL must report the current state but keep the \"normal\" state updated.\n\nThis is all about fixing tdf#125543 in the end.",
      "parentUuid": "43b0d827_2f113601",
      "range": {
        "startLine": 21,
        "startChar": 40,
        "endLine": 22,
        "endChar": 33
      },
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ff9e889_1710b927",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-14T11:56:09Z",
      "side": 1,
      "message": "\u003e I\u0027m somehow happy that I\u0027m not the only one struggling with this\n\n:)\n\n\u003e I\u0027m not sure what your question really is\n\nI meant, how the refcount behaves in that scenario? I thought it could be:\n\n1. Normal -\u003e maximized - refcount changes from 0 to 1 (and the geometry gets saved)\n2. Maximized -\u003e full screen - refcount gets 2 (per your comment)\n3. Full screen -\u003e minimized - refcount doesn\u0027t change?\n4. Minimized -\u003e normal - refcount gets 1? Then the geometry doesn\u0027t get restored?\n\nAlternatively,\n\n3. Full screen -\u003e normal (also a possible thing) - refcount gets 1 without geometry restore?\n\nAs said, it\u0027s a question based only on imagining, not on real understanding/debugging what would actually happen in these scenarios, so please excuse me if that\u0027s obvious/irrelevant.",
      "parentUuid": "768b55a9_c44d03e4",
      "range": {
        "startLine": 21,
        "startChar": 40,
        "endLine": 22,
        "endChar": 33
      },
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59b18c52_fdac302b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-06-14T12:15:09Z",
      "side": 1,
      "message": "\u003e \u003e I\u0027m somehow happy that I\u0027m not the only one struggling with this\n\u003e \n\u003e :)\n\u003e \n\u003e \u003e I\u0027m not sure what your question really is\n\u003e \n\u003e I meant, how the refcount behaves in that scenario? I thought it could be:\n\u003e \n\u003e 1. Normal -\u003e maximized - refcount changes from 0 to 1 (and the geometry gets saved)\n\u003e 2. Maximized -\u003e full screen - refcount gets 2 (per your comment)\n\u003e 3. Full screen -\u003e minimized - refcount doesn\u0027t change?\n\u003e 4. Minimized -\u003e normal - refcount gets 1? Then the geometry doesn\u0027t get restored?\n\n1. 0 \u003d\u003e 1\n2. 1 \u003d\u003e 2\n3. 2 \u003d\u003e 1\n4. 1 \u003d\u003e 0\n\nThat\u0027s because Fullscreen in my original understanding is an additional state. In LO you either enable or disable Fullscreen. Yoou don\u0027t have any menu in fullscreen, so you can just go \"back\". \n\n\u003e Alternatively,\n\u003e \n\u003e 3. Full screen -\u003e normal (also a possible thing) - refcount gets 1 without geometry restore?\n\u003e \n\u003e As said, it\u0027s a question based only on imagining, not on real understanding/debugging what would actually happen in these scenarios, so please excuse me if that\u0027s obvious/irrelevant.\n\nHmm - that wouldn\u0027t work. If you\u0027re Fullscreen and came from Maximized, you can just go back to Maximized. How would you go back to Normal directly from Fullscreen, if you started Fullscreen from Maximized? I\u0027m just used on Linux, that you can un-Fullscreen to the state you started Fullscreen from (on KDE it\u0027s just pressing F11 to toggle Fullscreen for any window).\n\nSince you claim that is possible, then Fullscreen is just an equal state as maximized, so the whole stacking doesn\u0027t make sense. This would make things easier, because then we just have \"normal\" and \"anything else\".",
      "parentUuid": "7ff9e889_1710b927",
      "range": {
        "startLine": 21,
        "startChar": 40,
        "endLine": 22,
        "endChar": 33
      },
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df2a06aa_fd6f437c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-14T12:24:20Z",
      "side": 1,
      "message": "Ah - is the \"fullscreen\" discussed here the \"Full Screen (Ctrl+Shift+J)\" from View menu? If so, then please disregard me. I didn\u0027t think about that, and thought about \"maximized\" vs \"fullscreen\" as a difference between an application automatically expanded to a half of screen by dragging it to a monitor side, vs. expanding using respective system button.\n\nThe F11 on KDE may have no direct counterpart on Windows maybe - and then it would be still another mode that I don\u0027t even know about. Sorry for the noise 😊",
      "parentUuid": "59b18c52_fdac302b",
      "range": {
        "startLine": 21,
        "startChar": 40,
        "endLine": 22,
        "endChar": 33
      },
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c4930cf_0c698d57",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-06-14T12:37:32Z",
      "side": 1,
      "message": "\u003e Ah - is the \"fullscreen\" discussed here the \"Full Screen (Ctrl+Shift+J)\" from View menu? If so, then please disregard me. I didn\u0027t think about that, and thought about \"maximized\" vs \"fullscreen\" as a difference between an application automatically expanded to a half of screen by dragging it to a monitor side, vs. expanding using respective system button.\n\u003e \n\u003e The F11 on KDE may have no direct counterpart on Windows maybe - and then it would be still another mode that I don\u0027t even know about. Sorry for the noise 😊\n\nI wasn\u0027t aware of the \"Fullscreen\" mode in \"View\"; I just used Impress all time. Yes, that\u0027s what I\u0027m talking about. Now I have some easier test case (currently actually broken for Qt :-().",
      "parentUuid": "df2a06aa_fd6f437c",
      "range": {
        "startLine": 21,
        "startChar": 40,
        "endLine": 22,
        "endChar": 33
      },
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5441d912_6b0276bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-06-14T08:46:31Z",
      "side": 1,
      "message": "I\u0027m not sure if LO stores this information, but certainly on MS-Windows, the maximised size of a window can be something other than full-screen, and is a distinct {x,y,w,h} tuple from the normal size.",
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82e5986c_86a84a5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-06-14T09:14:15Z",
      "side": 1,
      "message": "That\u0027s everywhere. The general consensus seems to be, that:\n- maximized \u003d window has frame, restricted areas (taskbar etc) are respected, position and size differ from screen size\n- full-screen \u003d window has no frame, whole screen is covered. There are actually two full-screen modes in LO VCL: a single screen in covered or the whole \"virtual\" multi-screen is covered.\n\nBut this doesn\u0027t matter for my implementation. It will have saved the \"normal\" position and size and report the current position and size and the WindowState. I don\u0027t think there is anything else needed. If a user restores LO on a different screen maximized, old maximized values are bogus. The \"normal\" position might be insufficient now too, but there is already code in place to fix that (I didn\u0027t verify, it actually works).\n\nI honestly don\u0027t understand the intention of your comment, but maybe this shows my point. Do I need to update the commit message to make it more clear? Any suggestions?",
      "parentUuid": "5441d912_6b0276bc",
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f720e823_59e83704",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-06-14T09:26:00Z",
      "side": 1,
      "message": "That more of a \"are you sure you\u0027re handling this case\" comment :-)\n\nIt seems like you are, so that is fine then",
      "parentUuid": "82e5986c_86a84a5b",
      "revId": "fbbbf627ad5378b307ef414b0e93fdac3c4a62c6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}