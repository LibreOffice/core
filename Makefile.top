# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-

.PHONY : all bootstrap build check clean clean-build clean-host dev-install distclean distro-pack-install docs fetch findunusedcode id install install-strip install-tb subsequentcheck tags

ifeq ($(MAKECMDGOALS),)
MAKECMDGOALS:=all
endif

all: build

SHELL=/usr/bin/env bash
SRCDIR:=$(patsubst %/,%,$(dir $(realpath $(firstword $(MAKEFILE_LIST)))))

ifeq ($(gb_Side),)
gb_Side:=host
endif

include $(SRCDIR)/config_$(gb_Side).mk

ifeq ($(GMAKE_OPTIONS),)
ifeq ($(verbose)$(VERBOSE),)
export GMAKE_OPTIONS:=-rs
else
export GMAKE_OPTIONS:=-r
endif
endif

# This list tells which modules are gbuild ones. It does *not* tell which modules to build. That is directed
# by the module being mentioned in packimages/prj/build.lst, etc, recursively.
gbuild_modules:= \
MathMLDTD\
Mesa\
UnoControls\
accessibility\
afms\
android\
animations\
apache-commons\
apple_remote\
autodoc\
avmedia\
basctl\
basebmp\
basegfx\
basic\
bean\
beanshell\
binaryurp\
bluez_bluetooth\
boost\
bridges\
canvas\
chart2\
cli_ure\
clucene\
codemaker\
comphelper\
configmgr\
connectivity\
cosv\
cppcanvas\
cppu\
cppuhelper\
cpputools\
ct2n\
cui\
curl\
dbaccess\
desktop\
dictionaries \
drawinglayer\
dtrans\
editeng\
embeddedobj\
embedserv\
epm\
eventattacher\
expat\
extensions\
extras\
fileaccess\
filter\
fontconfig\
forms\
formula\
fpicker\
framework\
freetype\
graphite\
helpcompiler\
hsqldb\
hunspell\
hwpfilter\
i18npool\
i18nutil\
idl\
idlc\
io\
javaunohelper\
jfreereport\
jpeg\
jurt\
jvmaccess\
jvmfwk\
l10ntools\
languagetool\
libcdr\
libcmis\
libmspub\
liborcus\
libpng\
librsvg\
libvisio\
libwpd\
libwpg\
libwps\
lingucomponent\
linguistic\
lotuswordpro\
mdds\
more_fonts\
mythes\
neon\
nlpsolver\
np_sdk\
o3tl\
offapi\
officecfg\
oovbaapi\
oox\
openldap\
package\
packimages\
padmin\
postgresql\
psprint_config\
pyuno\
qadevOOo\
readlicense_oo\
regexp\
registry\
remotebridges\
reportbuilder\
reportdesign\
rhino\
ridljar\
rsc\
sal\
salhelper\
sane\
sax\
sc\
scaddins\
sccomp\
scp2\
scripting\
sd\
sdext\
sfx2\
shell\
slideshow\
smoketest\
solenv\
soltools\
sot\
starmath\
stoc\
store\
svl\
svtools\
svx\
sw\
swext\
tail_build\
test\
testtools\
tomcat\
toolkit\
tools\
touch\
translations\
tubes\
twain\
ucb\
ucbhelper\
ucpp\
udkapi\
udm\
unixODBC\
unodevtools\
unoil\
unotest\
unotools\
unoxml\
ure\
uui\
vbahelper\
vcl\
vigra\
wizards\
writerfilter\
writerperfect\
x11_extensions\
xmerge\
xmlhelp\
xmloff\
xmlreader\
xmlscript\
xmlsecurity\
xsltml\
zlib\

dmake_modules:=\
berkeleydb\
binfilter \
cairo\
cppunit\
crashrep\
external\
gdk-pixbuf\
gettext\
glib\
helpcontent2 \
hyphen\
icu\
instsetoo_native\
libcroco\
libexttextcat\
libgsf\
liblangtag\
libxml2\
libxmlsec\
libxslt\
lcms2\
lpsolve\
migrationanalysis\
moz\
mysqlc\
mysqlcppconn\
nss\
odk\
openssl\
pango\
postprocess\
python\
redland\
setup_native\
stlport\
sysui\
xpdf\

export gb_TAILBUILDTARGET=all slowcheck

define gbuild_module_rules
.PHONY: $(1) $(1).all $(1).build $(1).check $(1).clean $(1).subsequentcheck $(1).deliver

$(1): bootstrap fetch
	cd $(1) && $(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS) gb_PARTIALBUILD=T

$(1).all: bootstrap fetch
	$$(if $$(filter $(1),$$(shell $(GNUMAKE) -r -f $(SRCDIR)/tail_build/Makefile showmodules)), \
		cd tail_build && unset MAKEFLAGS && \
		export gb_TAILBUILDTARGET="$(WORKDIR)/Module/$(1) $(WORKDIR)/Module/check/$(1) $(WORKDIR)/Module/slowcheck/$(1)" && \
	, \
		cd $(1) && unset MAKEFLAGS && \
	) \
	$(SOLARENV)/bin/build.pl -P$(PARALLELISM) --all -- -P$(PARALLELISM)

$(1).build:
	cd $(1) && $(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS) build gb_PARTIALBUILD=T

$(1).check:
	cd $(1) && $(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS) check gb_PARTIALBUILD=T

$(1).clean:
	cd $(1) && $(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS) clean gb_PARTIALBUILD=T

$(1).subsequentcheck:
	cd $(1) && $(GNUMAKE) -j $(CHECK_PARALLELISM) $(GMAKE_OPTIONS) subsequentcheck gb_PARTIALBUILD=T

$(1).deliver:
	@true

endef

define gbuild_modules_rules
$(foreach m,$(1),$(call gbuild_module_rules,$(m)))
endef

define dmake_module_rules
.PHONY: $(1) $(1).all $(1).deliver $(1).clean

$(1): bootstrap fetch
	cd $(1) && unset MAKEFLAGS && \
        $(SOLARENV)/bin/build.pl -P$(PARALLELISM) -- -P$(PARALLELISM)

$(1).all: bootstrap fetch
	cd $(1) && unset MAKEFLAGS && \
        $(SOLARENV)/bin/build.pl -P$(PARALLELISM) --all -- -P$(PARALLELISM)

$(1).deliver: $(1)
	cd $(1) && $(SOLARENV)/bin/deliver.pl

$(1).clean:
	cd $(1) && $(SOLARENV)/bin/deliver.pl -delete
	rm -fr $(1)/$(INPATH)

endef

define dmake_modules_rules
$(foreach m,$(1),$(call dmake_module_rules,$(m)))
endef

#
# Partial Build
#
$(eval $(call gbuild_modules_rules,$(gbuild_modules)))

$(eval $(call dmake_modules_rules,$(dmake_modules)))

# run a JunitTest - relies on naming convention (module prefix)
$(WORKDIR)/JunitTest/%/done :
	cd $(firstword $(subst _, ,$*)) && $(GNUMAKE) $(GMAKE_OPTIONS) $@ gb_PARTIALBUILD=T

# run a CppunitTest - relies on naming convention (module prefix)
$(WORKDIR)/CppunitTest/%.test :
	cd $(firstword $(subst _, ,$*)) && $(GNUMAKE) $(GMAKE_OPTIONS) $@ gb_PARTIALBUILD=T

#
# Clean
#
clean: clean-host clean-build

clean-host:
ifeq ($(BUILD_DMAKE),YES)
	if [ -f dmake/Makefile ] ; then $(GNUMAKE) -j $(PARALLELISM) -C dmake clean; fi
endif
	rm -fr $(DEVINSTALLDIR)
	rm -fr $(OUTDIR)
	rm -fr $(WORKDIR)
	rm -fr $(SRCDIR)/*/$(INPATH)
	rm -fr $(SRCDIR)/solenv/$(OUTPATH)
	rm -fr install

clean-build:
ifeq ($(CROSS_COMPILING),YES)
	rm -rf $(SOLARVER)/$(INPATH_FOR_BUILD) # not necessarily below SRCDIR
	rm -rf $(SRCDIR)/*/$(INPATH_FOR_BUILD)
endif

include $(SRCDIR)/compilerplugins/Makefile.mk

#
# Distclean
#
distclean : clean compilerplugins-clean
ifeq ($(BUILD_DMAKE),YES)
	(if [ -f dmake/Makefile ] ; then $(GNUMAKE) -j $(PARALLELISM) -C dmake distclean; fi) && \
	rm -f solenv/*/bin/dmake*
endif
	rm -fr config_host.mk config_build.mk aclocal.m4 autom4te.cache \
	config.log config.status configure \
	ooo.lst post_download post_download.log \
	config_host.mk.last set_soenv.stamp src.downloaded warn \
	solenv/bin/concat-deps.exe solenv/bin/concat-deps
	find $(SOLARENV)/gdb -name "*.pyc" -exec rm {} \;

#
# custom command
#
ifneq ( $(MAKECMDGOALS),cmd)
cmd:
	echo "custom cmd" && ( $(cmd) )

endif

ifneq ($(filter-out clean distclean,$(MAKECMDGOALS)),)
#
# Fetch
#
fetch: src.downloaded

src.downloaded : Makefile.top download ooo.lst
ifeq ($(DO_FETCH_TARBALLS),YES)
	@./download $(SRCDIR)/ooo.lst && touch $@
else
	@echo "Automatic fetching of external tarballs is disabled."
endif

#
# Bootstap
#
bootstrap: $(WORKDIR)/bootstrap compilerplugins

$(WORKDIR)/bootstrap: solenv/bin/concat-deps.c
	@cd $(SRCDIR) && ./bootstrap
	@mkdir -p $(dir $@) && touch $@

#
# Build
#
build-packimages: bootstrap fetch $(if $(filter $(INPATH),$(INPATH_FOR_BUILD)),,cross-toolset)
ifeq ($(DISABLE_SCRIPTING),TRUE)
# We must get the headers from vbahelper "delivered" because
# as we don't link to any libs from there they won't otherwise be, or
# something. And we still do include those headers always even if the
# libs aren't built in the --disable-scripting case. (Ifdefs for
# DISABLE_SCRIPTING will be added to the code later as necessary.)
	$(GNUMAKE) vbahelper
endif
ifeq ($(DISABLE_DBCONNECTIVITY),TRUE)
# Ditto for dbconnectivity in the --disable-database-connectivity case
	cd connectivity && sed -e 's/^\(export [A-Z0-9_]*=\)\(.*\)$$/\1"\2"/' <../config_host.mk >conftmp.sh && . conftmp.sh && rm conftmp.sh && $(SOLARENV)/bin/deliver.pl
endif
	cd packimages && unset MAKEFLAGS && \
		$(SOLARENV)/bin/build.pl -P$(PARALLELISM) --all -- -P$(PARALLELISM) && \
		$(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS)

build: build-packimages
ifeq ($(OS_FOR_BUILD),WNT)
	cd instsetoo_native && unset MAKEFLAGS && $(SOLARENV)/bin/build.pl
else
	cd instsetoo_native && unset MAKEFLAGS && \
        $(SOLARENV)/bin/build.pl -P$(PARALLELISM) -- -P$(PARALLELISM)
endif
ifeq ($(OS),ANDROID)
	cd android && $(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS)
endif

build-nocheck : export SKIP_TESTS := YES
build-nocheck : build

cross-toolset: bootstrap fetch
	cd cross_toolset && $(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS)
ifneq (,$(filter DESKTOP,$(BUILD_TYPE)))
ifneq (WNT,$(OS))
# We need to build nss for nsinstall... See NSINSTALL=... in nss/makefile.mk
	$(GNUMAKE) gb_Side=build nss
endif
endif

#
# Install
#

install:
	echo "Installing in $(INSTALLDIR)..." && \
	ooinstall "$(INSTALLDIR)" && \
	echo "" && \
	echo "Installation finished, you can now execute:" && \
	echo "$(INSTALLDIR)/program/soffice"

install-strip:
	echo "Installing and stripping binaries in $(INSTALLDIR)..." && \
	ooinstall --strip "$(INSTALLDIR)" && \
	echo "" && \
	echo "Installation finished, you can now execute:" && \
	echo "$(INSTALLDIR)/program/soffice"

dev-install: build
	@rm -rf $(DEVINSTALLDIR)
	@mkdir $(DEVINSTALLDIR)
ifeq ($(OS_FOR_BUILD),WNT)
	cd instsetoo_native && unset MAKEFLAGS && $(SOLARENV)/bin/build.pl LIBO_DEV_INSTALL=TRUE
	unzip -q -d "$(DEVINSTALLDIR)" "$(SRCDIR)/instsetoo_native/$(INPATH)/LibreOffice/archive/install/en-US/LibO*_install-arc_en-US.zip"
	mv "$(DEVINSTALLDIR)"/LibO*_install-arc_en-US/* "$(DEVINSTALLDIR)"/opt
else
ifeq ($(DISABLE_LINKOO),TRUE)
	@ooinstall $(DEVINSTALLDIR)/opt
	@install-gdb-printers -L
else
	@ooinstall -l $(DEVINSTALLDIR)/opt
endif
endif
	@rm -f $(SRCDIR)/install && ln -s $(DEVINSTALLDIR)/opt/ $(SRCDIR)/install

dev-install-nocheck : export SKIP_TESTS := YES
dev-install-nocheck : dev-install

dev-update:
ifeq ($(DISABLE_LINKOO),TRUE)
	@linkoo --copy $(DEVINSTALLDIR)/opt $(SRCDIR)
else
	@linkoo $(DEVINSTALLDIR)/opt $(SRCDIR)
endif

install-tb:
	@rm -rf $(DEVINSTALLDIR)
	@mkdir $(DEVINSTALLDIR)
ifeq ($(OS_FOR_BUILD),WNT)
	cd instsetoo_native && unset MAKEFLAGS && $(SOLARENV)/bin/build.pl LIBO_DEV_INSTALL=TRUE
	unzip -q -d "$(DEVINSTALLDIR)" "$(SRCDIR)/instsetoo_native/$(INPATH)/LibreOffice/archive/install/en-US/LibO*_install-arc_en-US.zip"
	mv "$(DEVINSTALLDIR)"/LibO*_install-arc_en-US/* "$(DEVINSTALLDIR)"/opt
else
	@ooinstall $(DEVINSTALLDIR)/opt
	@install-gdb-printers
endif
	@rm -f $(SRCDIR)/install && ln -s $(DEVINSTALLDIR)/opt/ $(SRCDIR)/install

distro-pack-install: install
	$(SRCDIR)/bin/distro-install-clean-up
	$(SRCDIR)/bin/distro-install-desktop-integration
	$(SRCDIR)/bin/distro-install-sdk
	$(SRCDIR)/bin/distro-install-file-lists

id:
	@create-ids

tags:
	@create-tags

docs:
	@mkdocs.sh $(SRCDIR)/docs $(SOLARENV)/inc/doxygen.cfg

findunusedcode:
	@which callcatcher > /dev/null 2>&1 || \
	    (echo "callcatcher not installed" && false)
	@sed -e s,$$INPATH,callcatcher,g $(SRCDIR)/config_host.mk | sed -e s,"export OOO_JUNIT_JAR=.*","export OOO_JUNIT_JAR=",g > $(SRCDIR)/config_host_callcatcher.mk
	@echo unexport ARCH_FLAGS >> $(SRCDIR)/config_host_callcatcher.mk
	@echo unexport CFLAGS >> $(SRCDIR)/config_host_callcatcher.mk
	@echo unexport CXXFLAGS >> $(SRCDIR)/config_host_callcatcher.mk
	@mkdir -p $(SRCDIR)/solenv/callcatcher/bin && \
	    ln -sf $(SRCDIR)/solenv/$(INPATH)/bin/dmake \
		$(SRCDIR)/solenv/callcatcher/bin/dmake
	@$(GNUMAKE) -f $(SOLARENV)/bin/callcatcher.Makefile findunusedcode
	@grep ::.*\( unusedcode.all \
              | grep -v ^Atom \
              | grep -v ^atom:: \
              | grep -v ^boost:: \
              | grep -v ^CIcc \
              | grep -v ^CLuceneError:: \
              | grep -v ^cppu:: \
              | grep -v ^Dde \
              | grep -v ^graphite2:: \
              | grep -v ^jvmaccess:: \
              | grep -v ^libcdr:: \
              | grep -v ^libcmis:: \
              | grep -v ^libmspub:: \
              | grep -v ^libvisio:: \
              | grep -v ^libwpg:: \
              | grep -v ^libwps_tools_win:: \
              | grep -v ^lucene:: \
              | grep -v ^Matrix3d:: \
              | grep -v ^salhelper:: \
              | grep -v ^VSDInternalStream:: \
              | grep -v ^WP1 \
              | grep -v ^WP3 \
              | grep -v ^WP42 \
              | grep -v ^WP6 \
              | grep -v ^WPG \
              | grep -v ^WPS \
              | grep -v WPX \
              | grep -v ^WSObject \
              > unusedcode.easy

check: dev-install subsequentcheck

subsequentcheck :| $(if $(filter-out subsequentcheck,$(MAKECMDGOALS)),dev-install)
	$(GNUMAKE) -j $(CHECK_PARALLELISM) $(GMAKE_OPTIONS) -f Makefile.post $@

unitcheck:
	$(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS) -f Makefile.post $@

slowcheck:
	$(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS) -f Makefile.post $@

debugrun:
	$(GNUMAKE) -j $(PARALLELISM) $(GMAKE_OPTIONS) -f Makefile.post $@

endif # not clean or distclean

# vim: set noet sw=4 ts=4:
