{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "988d74d5_b8a07c1c",
        "filename": "basic/source/sbx/sbxscan.cxx",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-09-29T18:06:19Z",
      "side": 1,
      "message": "stringToDouble is the opposite direction üòâ",
      "range": {
        "startLine": 313,
        "startChar": 35,
        "endLine": 313,
        "endChar": 49
      },
      "revId": "e7dc7ccb13f0e773be82e8ce9519dce47c8bb57e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2dc9373_03492c85",
        "filename": "basic/source/sbx/sbxscan.cxx",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-09-29T18:47:33Z",
      "side": 1,
      "message": "The day was long üòûüòä",
      "parentUuid": "988d74d5_b8a07c1c",
      "range": {
        "startLine": 313,
        "startChar": 35,
        "endLine": 313,
        "endChar": 49
      },
      "revId": "e7dc7ccb13f0e773be82e8ce9519dce47c8bb57e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "071cbf49_d17b41bc",
        "filename": "basic/source/sbx/sbxscan.cxx",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-09-29T18:06:19Z",
      "side": 1,
      "message": "Please don\u0027t use this. Instead, please use doubleToUString (or directly rtl_math_doubleToUString, which is a better match here, not requiring to create a temporary OUString).",
      "range": {
        "startLine": 315,
        "startChar": 19,
        "endLine": 315,
        "endChar": 33
      },
      "revId": "e7dc7ccb13f0e773be82e8ce9519dce47c8bb57e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20495fa3_44e9f34f",
        "filename": "basic/source/sbx/sbxscan.cxx",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-09-29T18:18:29Z",
      "side": 1,
      "message": "Hmm. Are we OK with rtl_math_StringFormat_Automatic? Previously we explicitly differentiated between rtl_math_StringFormat_F and rtl_math_StringFormat_E2 (basically, those constants; making sure to have no less than 2 decimal digits in exponent), and chose dependent on \u0027( nNum \u0026\u0026( nNum \u003c 1E-1 || nNum \u003e\u003d dMaxNumWithoutExp ) )\u0027. And dMaxNumWithoutExp was dependent on nPrec. I suppose that we better stick to the old behavior? It would be a regression IMO to change it.\n\nEven if you are in favor to change that, please do that in a follow-up, so that we may differentiate possible regressions.",
      "range": {
        "startLine": 315,
        "startChar": 40,
        "endLine": 315,
        "endChar": 71
      },
      "revId": "e7dc7ccb13f0e773be82e8ce9519dce47c8bb57e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1ee97e8_66054771",
        "filename": "basic/source/sbx/sbxscan.cxx",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-09-29T18:47:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "20495fa3_44e9f34f",
      "range": {
        "startLine": 315,
        "startChar": 40,
        "endLine": 315,
        "endChar": 71
      },
      "revId": "e7dc7ccb13f0e773be82e8ce9519dce47c8bb57e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b868ed4f_6ce06f35",
        "filename": "basic/source/sbx/sbxscan.cxx",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-09-29T18:47:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "071cbf49_d17b41bc",
      "range": {
        "startLine": 315,
        "startChar": 19,
        "endLine": 315,
        "endChar": 33
      },
      "revId": "e7dc7ccb13f0e773be82e8ce9519dce47c8bb57e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "977f496e_46457ae2",
        "filename": "basic/source/sbx/sbxscan.cxx",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-09-29T19:35:03Z",
      "side": 1,
      "message": "The only regression I could think of is that instead of 1E18 it converts numbers to 1E018 and maybe from another limit determined by the function. I will create a follow up üëç",
      "parentUuid": "a1ee97e8_66054771",
      "range": {
        "startLine": 315,
        "startChar": 40,
        "endLine": 315,
        "endChar": 71
      },
      "revId": "e7dc7ccb13f0e773be82e8ce9519dce47c8bb57e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}