{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7c3e579f_ead9c656",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-03-18T17:36:00Z",
      "side": 1,
      "message": "I can\u0027t test this since I don\u0027t have a Mac but it seemed to me quite straightforward.",
      "revId": "97d63d4aed2f46206f5a53b321c0ab17e689eba0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34c1f850_717334dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2022-03-21T08:07:01Z",
      "side": 1,
      "message": "Is this string then returned in an API to scripts? I guess there is a risk that some script (Basic or whatever) checks for \"Mac OS X\" there and then will break if it says \"macOS\" instead. No idea why somebody would write scripts that do such checks, though. Not opposed, just pointing this out.",
      "revId": "97d63d4aed2f46206f5a53b321c0ab17e689eba0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e7cb8e4_7f612462",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-03-21T09:35:19Z",
      "side": 1,
      "message": "\u003e Is this string then returned in an API to scripts? I guess there is a risk that some script (Basic or whatever) checks for \"Mac OS X\" there and then will break if it says \"macOS\" instead.\n\nSee the comments starting at \u003chttps://gerrit.libreoffice.org/c/core/+/127921/6#message-6bc98b37d6de36749223abdbb4a68b74efcbfe80\u003e \"tdf#140286 sc: CALC formula \u003dINFO(OSVERSION) gives wrong output for macOS\" for how the value returned by AquaSalInstance::getOSVersion is also used for Calc\u0027s INFO(OSVERSION), so any changes here should probably be coordinated with all consumers of that function\u0027s return value.",
      "parentUuid": "34c1f850_717334dd",
      "revId": "97d63d4aed2f46206f5a53b321c0ab17e689eba0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6eba32b2_7d5d58ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-03-21T11:32:34Z",
      "side": 1,
      "message": "Step 1:\ngit grep -n getOSVersion\nvcl/inc/osx/salinst.h:126:    virtual OUString        getOSVersion() override;\nvcl/inc/salinst.hxx:207:    virtual OUString        getOSVersion() { return \"-\"; }\nvcl/inc/unx/geninst.h:71:    virtual OUString            getOSVersion() override;\nvcl/inc/win/salinst.h:75:    virtual OUString            getOSVersion() override;\nvcl/osx/salinst.cxx:883:OUString AquaSalInstance::getOSVersion()\nvcl/source/app/svapp.cxx:1255:        aVersion \u003d pSVData-\u003empDefInst-\u003egetOSVersion();\nvcl/unx/generic/app/geninst.cxx:52:OUString SalGenericInstance::getOSVersion()\nvcl/win/app/salinst.cxx:923:OUString WinSalInstance::getOSVersion()\n\nSo 1 consumer here in vcl/source/app/svapp.cxx (OUString Application::GetOSVersion())\n\nStep 2:\ngit grep -n GetOSVersion\ninclude/vcl/svapp.hxx:912:    static OUString             GetOSVersion();\nsc/source/core/tool/interpr5.cxx:3325:        PushString(Application::GetOSVersion());\nvcl/source/app/svapp.cxx:1250:OUString Application::GetOSVersion()\nvcl/source/app/svapp.cxx:1275:        OUString aVersion \u003d GetOSVersion();\n\n\nStep 3, branch 1:\n   3314 void ScInterpreter::ScInfo()\n   3315 {\n   3316     if( !MustHaveParamCount( GetByte(), 1 ) )\n   3317         return;\n   3318 \n   3319     OUString aStr \u003d GetString().getString();\n   3320     ScCellKeywordTranslator::transKeyword(aStr, \u0026ScGlobal::GetLocale(), ocInfo);\n   3321     if( aStr \u003d\u003d \"SYSTEM\" )\n   3322         PushString( SC_INFO_OSVERSION );\n   3323     else if( aStr \u003d\u003d \"OSVERSION\" )\n   3324 #if (defined LINUX || defined __FreeBSD__)\n   3325         PushString(Application::GetOSVersion());\n   3326 #elif defined MACOSX\n   3327         // TODO tdf#140286 handle MACOSX version to get result compatible to Excel\n   3328         PushString(\"Windows (32-bit) NT 5.01\");\n\nso we forget this branch.\n\nStep 3, branch 2:\nOUString Application::GetHWOSConfInfo(const int bSelection, const bool bLocalize)\n...\n   1271     if (bSelection !\u003d hwUI) {\n   1272         appendDetails(u\"; \", Localize(SV_APP_CPUTHREADS, bLocalize)\n   1273                                 + OUString::number(std::thread::hardware_concurrency()));\n   1274 \n   1275         OUString aVersion \u003d GetOSVersion();\n   1276 \n   1277         appendDetails(u\"; \", Localize(SV_APP_OSVERSION, bLocalize) + aVersion);\n   1278     }\ngit grep -n GetHWOSConfInfo\ncui/source/dialogs/about.cxx:86:  m_pEnvLabel-\u003eset_label(Application::GetHWOSConfInfo(1));\ncui/source/dialogs/about.cxx:87:  m_pUILabel-\u003eset_label(Application::GetHWOSConfInfo(2));\ncui/source/dialogs/about.cxx:273:                   Application::GetHWOSConfInfo(0,false) + \"\\n\" // env+UI\nextensions/source/update/feed/updatefeed.cxx:361:        aExtended \u003d Application::GetHWOSConfInfo();\ninclude/vcl/svapp.hxx:919:    static OUString             GetHWOSConfInfo(const int bSelection \u003d 0, bool bLocalize \u003d true);\nvcl/source/app/svapp.cxx:1261:OUString Application::GetHWOSConfInfo(const int bSelection, const bool bLocalize)\n\nStep 4, branch 1:\nabout.cxx \u003d\u003e no cons here I suppose. (no compatibility break or something).\n\nStep 4, branch 2:\nextensions/source/update/feed/updatefeed.cxx:329:OUString UpdateInformationProvider::getUserAgent(bool bExtended)\n\nused by uno::Sequence\u003c beans::StringPair \u003e SAL_CALL UpdateInformationProvider::getUserRequestHeaders(\n    const OUString \u0026aURL, ucb::WebDAVHTTPMethod )\nso in a public interface offapi/com/sun/star/ucb/XWebDAVCommandEnvironment.idl:48:    sequence\u003ccom::sun::star::beans::StringPair\u003e getUserRequestHeaders\n\nIt could be relevant to provide correct info in a public interface.",
      "revId": "97d63d4aed2f46206f5a53b321c0ab17e689eba0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3364c884_672f1b88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-03-21T12:56:16Z",
      "side": 1,
      "message": "\u003e Step 4, branch 2:\n\u003e extensions/source/update/feed/updatefeed.cxx:329:OUString UpdateInformationProvider::getUserAgent(bool bExtended)\n\u003e \n\u003e used by uno::Sequence\u003c beans::StringPair \u003e SAL_CALL UpdateInformationProvider::getUserRequestHeaders(\n\u003e     const OUString \u0026aURL, ucb::WebDAVHTTPMethod )\n\u003e so in a public interface offapi/com/sun/star/ucb/XWebDAVCommandEnvironment.idl:48:    sequence\u003ccom::sun::star::beans::StringPair\u003e getUserRequestHeaders\n\u003e \n\u003e It could be relevant to provide correct info in a public interface.\n\nmaybe Cloph has an idea about this part",
      "parentUuid": "6eba32b2_7d5d58ba",
      "revId": "97d63d4aed2f46206f5a53b321c0ab17e689eba0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}