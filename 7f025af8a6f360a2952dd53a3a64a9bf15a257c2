{
  "comments": [
    {
      "key": {
        "uuid": "f4c7d62c_1b81a207",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-11T06:27:32Z",
      "side": 1,
      "message": "It is required that you also add the test case as a unit test into the patch, so that the failure is seen, and it would pass when you finish the fix.",
      "range": {
        "startLine": 7,
        "startChar": 39,
        "endLine": 7,
        "endChar": 83
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9ec66c4_5bd0404c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-12T15:41:43Z",
      "side": 1,
      "message": "Okay i will do that.\nHow to add attachment into this patch ?",
      "parentUuid": "f4c7d62c_1b81a207",
      "range": {
        "startLine": 7,
        "startChar": 39,
        "endLine": 7,
        "endChar": 83
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7ef3021_302f2eff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T15:50:02Z",
      "side": 1,
      "message": "Attachment?\n\nTo create a unit test, you prepare a Basic code, put it into Basic unit tests directory, test that it works (and fails without your patch), use \u0027git add path/to/basictest\u0027 to add it to the patch, then do usual \u0027git commit --amend\u0027 then submit",
      "parentUuid": "e9ec66c4_5bd0404c",
      "range": {
        "startLine": 7,
        "startChar": 39,
        "endLine": 7,
        "endChar": 83
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b2c37c8_6d37f992",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-11T06:27:32Z",
      "side": 1,
      "message": "And what if there\u0027s no info? does this mean we must assume that variant is expected? Does SbiRuntime::SetParameters assume that, too, when checks the type?",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 69
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfaa5113_75e062eb",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-11T05:32:54Z",
      "side": 1,
      "message": "Please don\u0027t add *unrelated* formatting edits, like here and in lines 202-205. In these lines, the only difference is whitespace edits, and these changes introduce noise when reviewing; and also make these lines have additional noise in git blame. Your changes must only have those changes that are necessary for your task, not a single whitespace changed in other lines.",
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98fadc0c_66321f9c",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-12T15:03:48Z",
      "side": 1,
      "message": "I have tried to keep all these things in mind while submitting new version of the patch.",
      "parentUuid": "dfaa5113_75e062eb",
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b35f2a17_75fffee0",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-11T05:32:54Z",
      "side": 1,
      "message": "The new/changed code must follow our clang-format rules. E.g., here you have two formatting errors:\n\n1. No space between if and opening bracket;\n2. Opening brace on the same line (not on the separate line).",
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f780fcc1_ace7afd9",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 210,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-11T05:32:54Z",
      "side": 1,
      "message": "Please use 4 spaces for indentation, not tabs. All IDEs allow you to configure for insertion of spaces when you press Tab.",
      "range": {
        "startLine": 210,
        "startChar": 16,
        "endLine": 210,
        "endChar": 17
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a5abd34_ec708869",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 210,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-11T19:55:53Z",
      "side": 1,
      "message": "Okay i will follow this next time i will submit patch.",
      "parentUuid": "f780fcc1_ace7afd9",
      "range": {
        "startLine": 210,
        "startChar": 16,
        "endLine": 210,
        "endChar": 17
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76ac5d8b_e653253a",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-11T06:27:32Z",
      "side": 1,
      "message": "Do you actually use the param info somewhere? Below, you compare type of \"v\" to type of \"xSbxVar\", but both are actually objects in xSbxParams (xSbxVar is put into xSbxParams with index \"i+1\" in line 206, and then you vet v from xSbxParams index \"i\" in line 210), and you are expected to compare actual param type to the type in info?",
      "range": {
        "startLine": 211,
        "startChar": 38,
        "endLine": 211,
        "endChar": 48
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b1f0e90_2f9c66c7",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-11T19:55:53Z",
      "side": 1,
      "message": "From my understanding i thought xSbxParams will return the actual parameter type.And then it is checked that parameter type is expecting variant or not with this condition: \n\nstatic_cast\u003cSbxDataType\u003e(v-\u003eGetType() \u0026 0x0FFF ) !\u003d SbxVARIANT\n\nNow i understand v is not the actual parameter. \nKindly speaking can you help me how to get the actual parameter type since i am kind of stuck into the same?",
      "parentUuid": "76ac5d8b_e653253a",
      "range": {
        "startLine": 211,
        "startChar": 38,
        "endLine": 211,
        "endChar": 48
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19fdb051_45482b3a",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T06:42:41Z",
      "side": 1,
      "message": "\u003e From my understanding i thought xSbxParams will return the actual parameter type\n\n... right. Or rather the actual parameter.\n\n\u003e And then it is checked that parameter type is expecting variant or not\n\nWhat do you mean here? *Actual* means \"what user has actually passed\", so how can you deduce what is *expected* here from this value? You only can check from that what type the value actually has, not what was expected in the function.\n\n\u003e Now i understand v is not the actual parameter\n\nYes it *is* the actual parameter, just as well as xSbxVar (but v and xSbxVar are different actual parameters, since you for unclear reason use different indexes). So you seem to ask something like \"if user has passed not variant here, and also user passed not variant as previous parameter, then...\"\n\n\u003e Kindly speaking can you help me how to get the actual parameter type\n\nI start to suspect that you confuse terms here. Please distinguish \"formal\" and \"actual\" parameters. As said, what you were checking were *actual* (\u003d what was actually passed) parameters; what you *seem* to want was called *formal* parameter (\u003d what was expected, i.e. what was declared in the function definition). See https://duckduckgo.com/?q\u003dformal+actual+parameter\n\nThen, again, I fail to see how can you be confused here, if you have plenty of code pointers. You were pointed multiple times to SbiRuntime::SetParameters, and to using ; that latter function uses SbxParamInfo (which is named quite appropriately, telling you that it provides parameter information); you were asked above, if you actually use that SbxParamInfo (my question was referring to explicitly marked \"pParamInfo\", and I asked you: \"Do you actually use the param info somewhere?\"). I believe that you could read the code of SbiRuntime::SetParameters to see how SbxParamInfo is used there; since the whole task is to distinguish ByVal and ByRef parameters, you should have concentrated on the code there which decides if the param is ByVal or ByRef, and when you read that code, and understand its logic, you only then start hacking here.\n\nInstead, you seem to not try to understand that function, but brute-force something here by trial-and-error. This is not productive IMO. Please show that you use intelligence when solving the task. Thanks.",
      "parentUuid": "8b1f0e90_2f9c66c7",
      "range": {
        "startLine": 211,
        "startChar": 38,
        "endLine": 211,
        "endChar": 48
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "694b8edd_02c62415",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-12T15:00:47Z",
      "side": 1,
      "message": "Sorry for the confusion.I was not doing brute force(I understand that will not lead to any understanding for me) and was trying to understand the codebase.\nSo basically i was confused at one point that variable \"v\" in my earlier patch was giving formal parameter(not the actual one. I was referring the actual parameter as the \"value passed\" which created confusion).\nAlthough i have submitted new version of patch which is passing the mentioned testcase(i will attach test case also) and giving the expected results(value of variable to be 6.75).",
      "parentUuid": "19fdb051_45482b3a",
      "range": {
        "startLine": 211,
        "startChar": 38,
        "endLine": 211,
        "endChar": 48
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52bbfda7_943d1d2e",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-12T15:15:45Z",
      "side": 1,
      "message": "I will explain what i understood and tried to do clearly.\nFirstly if pInfo exists,SbxParamInfo is used to get the formal parameter which is stored in variable \"p\".\nThen variable \"t\" stores the type of the formal parameter.\nAnd if \"t\" is not expecting variant,flag of variable is set.",
      "parentUuid": "694b8edd_02c62415",
      "range": {
        "startLine": 211,
        "startChar": 38,
        "endLine": 211,
        "endChar": 48
      },
      "revId": "7f025af8a6f360a2952dd53a3a64a9bf15a257c2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}