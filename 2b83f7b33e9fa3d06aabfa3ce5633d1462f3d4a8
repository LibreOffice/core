{
  "comments": [
    {
      "key": {
        "uuid": "bd67ab9d_aab3f10b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T15:47:53Z",
      "side": 1,
      "message": "When naming your patches, follow this:\n\n1. The commit message should start with #bug-number\n - this is what you already do, great!\n2. After the number, a short description of the change should follow, with no longer than ~80 characters total in the first line\n - it should be in present tense and imperative style, like\n\n  tdf#133887: Set \"fixed\" only when formal arg type isn\u0027t Variant\n\n - it\u0027s *not* OK to put into the commit message things like \"Submitting new version of the patch\", which would make no sense in the commit history. The commit message must be something that would tell people in 5 years from now, what is your change about; they will not be interested to learn that you \"submitted new version\".\n - any questions/information for reviewers should be posted as comments\n3. After the first line, an empty line, and then as many lines as you need with extended description, if needed. In this case, you may manage to make the first line to be obvious, and so you may need no other lines.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 46
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c245e1f1_125adff7",
        "filename": "basic/source/runtime/runtime.cxx",
        "patchSetId": 2
      },
      "lineNbr": 710,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T16:49:23Z",
      "side": 1,
      "message": "The variable that controls if the variable will be treated \"by value\"; false means \"by reference\".\n\nNote that the default value (applied on this line) is *false* for all parameters that are not methods (methods in parameter array are for return value, so not actually relevant to us); so by default, *all* parameters are passed *by reference*.",
      "range": {
        "startLine": 710,
        "startChar": 17,
        "endLine": 710,
        "endChar": 23
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deef9427_4172f4a1",
        "filename": "basic/source/runtime/runtime.cxx",
        "patchSetId": 2
      },
      "lineNbr": 713,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T16:49:23Z",
      "side": 1,
      "message": "The relevant check",
      "range": {
        "startLine": 713,
        "startChar": 16,
        "endLine": 713,
        "endChar": 17
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea559f32_3f5a94c1",
        "filename": "basic/source/runtime/runtime.cxx",
        "patchSetId": 2
      },
      "lineNbr": 715,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T16:49:23Z",
      "side": 1,
      "message": "*If* there is a param info for this param, and *if* it has no \"ByRef\" flag, *then* bByVal becomes true.",
      "range": {
        "startLine": 715,
        "startChar": 16,
        "endLine": 715,
        "endChar": 22
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f55ec6f_a617abca",
        "filename": "basic/source/runtime/runtime.cxx",
        "patchSetId": 2
      },
      "lineNbr": 725,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T16:49:23Z",
      "side": 1,
      "message": "*If* there is a param info for this param, and *if* expected is not Variant, and *if* actual param is not fixed, or its type is different from expected, *then* bByVal becomes true.",
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "469ef10c_53a4c59c",
        "filename": "basic/source/runtime/runtime.cxx",
        "patchSetId": 2
      },
      "lineNbr": 730,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T16:49:23Z",
      "side": 1,
      "message": "Now follow the logic above, and think what will be the value of bByVal if p was nullptr above?",
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0a49f11_41126ba1",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T15:37:50Z",
      "side": 1,
      "message": "Why is the variable called \"pInfo2\"? (The question is intended as a hint to think if you need it.)",
      "range": {
        "startLine": 208,
        "startChar": 20,
        "endLine": 208,
        "endChar": 59
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2abc2e5_d01a64e7",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-12T16:44:04Z",
      "side": 1,
      "message": "pInfo gives us information about the formal parameter.Without it we can\u0027t know what type is formal parameter expecting.So i think it is needed.\n\nThough variable \"pInfo\" is already defined in line 172 so it is not needed to define another variable \"pInfo2\"",
      "parentUuid": "c0a49f11_41126ba1",
      "range": {
        "startLine": 208,
        "startChar": 20,
        "endLine": 208,
        "endChar": 59
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16a164f6_235d6a60",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T16:49:59Z",
      "side": 1,
      "message": "\u003e Though variable \"pInfo\" is already defined in line 172 so it is not needed to define another variable \"pInfo2\"\n\nPerfect! :-)",
      "parentUuid": "e2abc2e5_d01a64e7",
      "range": {
        "startLine": 208,
        "startChar": 20,
        "endLine": 208,
        "endChar": 59
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae345e6b_3eff3153",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T15:37:50Z",
      "side": 1,
      "message": "Please try to keep your changed lines compliant with our clang-format rules. Specifically this line:\n\n1. Uses spaces after opening bracket and before closing bracket:\n\n  GetParam( sal::static_int_cast\u003csal_uInt16\u003e( i ) + 1 )\n\nshould become\n\n  GetParam(sal::static_int_cast\u003csal_uInt16\u003e(i) + 1)\n\n2. Is too long: we have a line length limit of 100 characters.\n\nFYI, the \"sal::static_int_cast\" used for some time in our code is now considered obsolete, and it\u0027s better to just use standard \"static_cast\".\nI would replace the ?: operator, and just do\n\n  if (pInfo)\n  {\n      if (auto* p \u003d pInfo-\u003eGetParam(static_cast\u003csal_uInt16\u003e(i) + 1))\n      {\n          ...\n      }\n  }",
      "range": {
        "startLine": 209,
        "startChar": 20,
        "endLine": 209,
        "endChar": 125
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5db6580a_25d5ef72",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-12T16:55:11Z",
      "side": 1,
      "message": "\u003e Please try to keep your changed lines compliant with our clang-format rules. Specifically this line:\n\u003e \n\u003e 1. Uses spaces after opening bracket and before closing bracket:\n\u003e \n\u003e   GetParam( sal::static_int_cast\u003csal_uInt16\u003e( i ) + 1 )\n\u003e \n\u003e should become\n\u003e \n\u003e   GetParam(sal::static_int_cast\u003csal_uInt16\u003e(i) + 1)\nI used that style by referring line number 683 in SbiRuntime::SetParameters.\n\u003e \n\u003e 2. Is too long: we have a line length limit of 100 characters.\n\u003e \n\u003e FYI, the \"sal::static_int_cast\" used for some time in our code is now considered obsolete, and it\u0027s better to just use standard \"static_cast\".\n\u003e I would replace the ?: operator, and just do\n\u003e \n\u003e   if (pInfo)\n\u003e   {\n\u003e       if (auto* p \u003d pInfo-\u003eGetParam(static_cast\u003csal_uInt16\u003e(i) + 1))\n\u003e       {\n\u003e           ...\n\u003e       }\n\u003e   }\nYeah .I will do it.",
      "parentUuid": "ae345e6b_3eff3153",
      "range": {
        "startLine": 209,
        "startChar": 20,
        "endLine": 209,
        "endChar": 125
      },
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09b61a97_cba7e860",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T15:37:50Z",
      "side": 1,
      "message": "So I repeat my question from an earlier comment:\n\n\u003e And what if there\u0027s no info? does this mean we must assume that variant is expected? Does SbiRuntime::SetParameters assume that, too, when checks the type?\n\nBecause this version will only set the flag when all the following is true:\n\n1. There *is* pInfo2;\n2. pInfo2 *has* information for the parameter;\n3. Its type *is not* Variant;\n4. xSbxVar type *is not* Variant.\n\nIn all other cases the flag will not be set. Is that expected?",
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90aaa91d_00a7380b",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-01-12T16:32:39Z",
      "side": 1,
      "message": "Point number 4:\nIMO Conditional checking \"xSbxVar-\u003eGetType() !\u003d SbxVARIANT\" is redundant and not necessary(I mean we are already setting the flag of xSbxVar that means we are changing its type to other datatype than variant.Then obviously its not needed to check whether its already into other data type).\n\nPoint number 3:\nIf formal parameter type is variant that means formal parameter is expecting variant.Then we don\u0027t need to set the flag and keep the passing variable also as variant only(to avoid mismatch of datatypes).\n\nComing to point number 1 and 2 , SbiRuntime::SetParameters also checks this (refer lines 713 and 686 in SbiRuntime::SetParameters).I am not sure about this but i think pInfo tells us information about the formal parameter else it returns null pointer. But i am not sure exactly at which point it returns null pointer.\n\nCorrect me where i am wrong.",
      "parentUuid": "09b61a97_cba7e860",
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f870545a_5a37925f",
        "filename": "scripting/source/basprov/basscript.cxx",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-01-12T16:49:23Z",
      "side": 1,
      "message": "\u003e IMO Conditional checking \"xSbxVar-\u003eGetType() !\u003d SbxVARIANT\" is redundant and not necessary\n\nAbsolutely agree!\n\n\u003e If formal parameter type is variant that means formal parameter is expecting variant.Then we don\u0027t need to set the flag\n\nAnd agree with this, too! :-)\n\n\u003e Coming to point number 1 and 2 , SbiRuntime::SetParameters also checks this\n\nRight, but what happens when the check is failed?",
      "parentUuid": "90aaa91d_00a7380b",
      "revId": "2b83f7b33e9fa3d06aabfa3ce5633d1462f3d4a8",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}