{
  "comments": [
    {
      "key": {
        "uuid": "d4fb4d23_8f244e95",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000006
      },
      "writtenOn": "2020-01-20T10:29:53Z",
      "side": 1,
      "message": "Perhaps a better summary would be \u0027rework AnimView cleanup to use STL algos\u0027 or somesuch?",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cae655e_02b2c377",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2020-01-20T15:17:57Z",
      "side": 1,
      "message": "Yes, I agree. My comment should be more specific.",
      "parentUuid": "d4fb4d23_8f244e95",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f4c670d_59bc8409",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 307,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-01-20T05:14:20Z",
      "side": 1,
      "message": "Actually reading the code, I don\u0027t see how this part of code could ever be executed. Every AInfo in local aAInfoList is created with pViewData set to some \"this\" -\u003e non-null; and this data (neither aAInfoList noor its members) can\u0027t mutate in maNotifyLink.Call(). (Btw, an obvious optimization would be to reserve space in aAInfoList on creation, since its size is known...)",
      "range": {
        "startLine": 301,
        "startChar": 16,
        "endLine": 307,
        "endChar": 17
      },
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4543a1b_85568877",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 317,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2020-01-20T15:24:43Z",
      "side": 1,
      "message": "Here I should use cbegin() and cend(), because the C++11 version of erase take const_iterator arguments. Doing so, removeStart would be a const_iterator instead of an iterator.",
      "range": {
        "startLine": 317,
        "startChar": 33,
        "endLine": 317,
        "endChar": 69
      },
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5c26914_a1f991d6",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 317,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-01-20T15:34:44Z",
      "side": 1,
      "message": "You can\u0027t use const_iterator here. The iterator must be dereferenced to a modifiable value, since algorithm will then std::move() it.\n\nBut it should not actually matter below, since converting iterator to const_iterator is trivial, and even a no-op where iterator inherits from const_iterator.",
      "parentUuid": "b4543a1b_85568877",
      "range": {
        "startLine": 317,
        "startChar": 33,
        "endLine": 317,
        "endChar": 69
      },
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7d09ad9_6a49d483",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-01-20T06:04:00Z",
      "side": 1,
      "message": "IMO unnecessary verbocity decreases readability. Using explicit argument type is unnecessary here, as well as explicit return type: both are easily deducible, and obvious to reader. Without these, the whole piece looks much more compact:\n\n       auto removeStart\n           \u003d std::remove_if(maViewList.begin(), maViewList.end(),\n                            [](const auto\u0026 pAnimView) { return !pAnimView-\u003eisMarked(); });\n       maViewList.erase(removeStart, maViewList.cend());\n\n       bGlobalPause \u003d std::all_of(maViewList.cbegin(), maViewList.cend(),\n                                  [](const auto\u0026 pAnimView) { return pAnimView-\u003eisPause(); });\n\n       // reset marked state\n       std::for_each(maViewList.cbegin(), maViewList.cend(),\n                     [](const auto\u0026 pAnimView) { pAnimView-\u003esetMarked(false); });",
      "range": {
        "startLine": 318,
        "startChar": 35,
        "endLine": 318,
        "endChar": 91
      },
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d23996c2_0b13c965",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-01-20T06:32:29Z",
      "side": 1,
      "message": "And even shorter yet if not-too-verbode arg names are chosen:\n\n      // delete all unmarked views and reset marked state\n      auto removeStart \u003d std::remove_if(maViewList.begin(), maViewList.end(),\n                                        [](const auto\u0026 pView) { return !pView-\u003eisMarked(); });\n      maViewList.erase(removeStart, maViewList.cend());\n\n      bGlobalPause \u003d std::all_of(maViewList.cbegin(), maViewList.cend(),\n                                 [](const auto\u0026 pView) { return pView-\u003eisPause(); });\n\n      // reset marked state\n      std::for_each(maViewList.cbegin(), maViewList.cend(),\n                    [](const auto\u0026 pView) { pView-\u003esetMarked(false); });",
      "parentUuid": "d7d09ad9_6a49d483",
      "range": {
        "startLine": 318,
        "startChar": 35,
        "endLine": 318,
        "endChar": 91
      },
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca4e3cee_6302551b",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2020-01-20T15:17:57Z",
      "side": 1,
      "message": "Some people complain that lambda expressions disturb them. I am not sure that making them shorter by using the \"auto\" keyword for type deduction and omitting the return type makes understanding easier.\nIn general, I prefer being explicit, so there is no possible ambiguity and I suppose that helps understanding. On the other hand, I quite agree that readability may be decreased, although ultimately it is probably a matter of personal taste. That does not disturb me.\n\nThe only exception for not being explicit is the return type of the function, which is an iterator. Here, the type of removeStart is std::vector\u003cstd::unique_ptr\u003cImplAnimView\u003e\u003e::iterator. For this, I prefer using auto.",
      "parentUuid": "d23996c2_0b13c965",
      "range": {
        "startLine": 318,
        "startChar": 35,
        "endLine": 318,
        "endChar": 91
      },
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b329984f_36a96379",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-01-20T15:38:06Z",
      "side": 1,
      "message": "You confuse clarity - which improves understanding - with verbosity - which most of the time makes things more difficult. Being explicit and adding more obvious stuff will not improve understanding by people who are not very used to lambda syntax, but who are really good programmers. It will only make it look ugly.",
      "parentUuid": "ca4e3cee_6302551b",
      "range": {
        "startLine": 318,
        "startChar": 35,
        "endLine": 318,
        "endChar": 91
      },
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c0cc0c7_af0065e3",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 321,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2020-01-20T15:24:43Z",
      "side": 1,
      "message": "Here I should use cend(), because C++11 version of erase takes const_iterator arguments.",
      "range": {
        "startLine": 321,
        "startChar": 42,
        "endLine": 321,
        "endChar": 58
      },
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ad8159b_c984dd66",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 322,
      "author": {
        "id": 1000006
      },
      "writtenOn": "2020-01-20T10:29:53Z",
      "side": 1,
      "message": "as for the other two algo calls, a one-line comment describing the gist of the next line would be great!",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25626ac5_18eca85c",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 322,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2020-01-20T15:17:57Z",
      "side": 1,
      "message": "The comment would be that bGlobalPause is true only if isPause() is true for all elements of maViewList, which is explicit by the use of std::all_of and the lambda expression which is very simple.\nI think that a comment would add nothing.\nThat\u0027s precisely the reason why I wanted to use the algorithms of the STL: they are simple and well-named, and so what is done is explicit and very easy to understand.\nIt was not the case in the previous version.",
      "parentUuid": "7ad8159b_c984dd66",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2169a6ee_c05ad22b",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 322,
      "author": {
        "id": 1000006
      },
      "writtenOn": "2020-01-20T15:47:28Z",
      "side": 1,
      "message": "Perhaps an example illustrates what I\u0027m after - e.g. something like:\n\n// check if every remaining view is paused",
      "parentUuid": "25626ac5_18eca85c",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d870ee7b_6ece7d54",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1000006
      },
      "writtenOn": "2020-01-19T17:18:57Z",
      "side": 1,
      "message": "This last iteration appears redundant to me - obviously for the remaining entries in maViewList, mbIsMarked must be false already (as remove_if just kicked out all those with isMarked() \u003d\u003d true)",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a57f1c82_04a3457b",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2020-01-19T18:17:44Z",
      "side": 1,
      "message": "No, we previously removed the elements for which isMarked() is false (!pAnimView-\u003eisMarked()).",
      "parentUuid": "d870ee7b_6ece7d54",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15acf4b8_2bc4d9e3",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 329,
      "author": {
        "id": 1000006
      },
      "writtenOn": "2020-01-20T10:29:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a57f1c82_04a3457b",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d6b6164_4421270d",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2020-01-19T09:51:07Z",
      "side": 1,
      "message": "this is, IMO, both harder to read and slower, because we\u0027re now traversing list 3 times instead of once",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9167530_606b4a93",
        "filename": "vcl/source/animate/Animation.cxx",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2020-01-19T10:12:53Z",
      "side": 1,
      "message": "No we don\u0027t traverse it three times because now, using std::all_of for bGlobalPause, the traversal is stopped as soon as we find an element for which pAnimView-\u003eisPause() is false.\nIn the current implementation, if the element is not erased, this test is always made.\n\nAnd if you look at about erasing element or marking them, there are no additional operations done in my current implementation because the reset of marked elements is done only on the remaining elements.\n\nFinally, my implementation have the advantage of separating well the different operations: removing certain elements, looking whether all elements are in pause, and resetting marks.",
      "parentUuid": "6d6b6164_4421270d",
      "revId": "8a5f3c5c4f08a7bbf55766620a48d2ddce50fbdb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}