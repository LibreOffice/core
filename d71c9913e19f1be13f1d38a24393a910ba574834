{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0b0c82a9_75eb7ec1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2022-01-12T16:24:36Z",
      "side": 1,
      "message": "Hiho,\n\nThat conversion in mpContent-\u003eGetBitmapEx gets as input the pos \u0026 target size, so does in principle not need to convert the whole bitmap and may use that requested size. Maybe not possible, though.\n\nThat whole cache of BitmapBuffers was added for performance reasons - to no always alloc a new vdev. Before, just a VDev of needed size was allocated and freed. Also, hat argument for small Bitmaps/Buffers may also hit other backends, so why not\n\n- In VDevBuffer::alloc/free even before incarnating the mutex, if squareSize is smaller than \u0027small size\u0027 (which is defined here as 32x32), just alloc a new \u0027small\u0027 VDev of that size\n- Do not add to buffer at all\n- detect at free same way, just free before mutex, do no use buffer at all\n\nSo, in principle, for small targets, go back to state before buffering. Should do it. May also get a #define SMALL_SIZE_ALLOC_FREE_DIRECTLY that could easily be adapted or even put to config if needed.\n\nAnyways, your solution is also okay for me, just more specific than needed from my POV. That whole VDevBuffer is used in vcl-renderer anyways, in system-dependent renderers it will be better/easier/possible to use system-specific buffers.\n\nJust one question (not related): At impBufferDevice::paint in the \u0027if(mpAlpha)\u0027 case you use \"aAlphaMask.BlendWith(aContent.GetAlpha())\". Shouldn\u0027t that now use your added parameter fAlpha and instead of DrawBimapEx try DrawTransformBitmapExDirect now...? It will (not yet) work for cairo, but we should make it work ASAP...",
      "revId": "d71c9913e19f1be13f1d38a24393a910ba574834",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfb66247_ae2ce83b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-01-12T17:46:10Z",
      "side": 1,
      "message": "\u003e That conversion in mpContent-\u003eGetBitmapEx gets as input the pos \u0026 target size, so does in principle not need to convert the whole bitmap and may use that requested size. Maybe not possible, though.\n\nIt\u0027s about where the virtual device content gets allocated, the size of it doesn\u0027t really matter, not would getting only a subset of it.\n\n\u003e So, in principle, for small targets, go back to state before buffering. Should do it. May also get a #define SMALL_SIZE_ALLOC_FREE_DIRECTLY that could easily be adapted or even put to config if needed.\n\nThat\u0027s a possible solution too, but I don\u0027t think it\u0027s better. AFAICT the only other backend affected is Skia/Vulkan, so the workaround doesn\u0027t need to be generic, and in some cases always allocating may be less efficient. Moreover whenever we get rid of the separate alpha we may also stop using GetBitmap(), which again may change the situation here. So I think I prefer keeping it this simple.\n\n\u003e Just one question (not related): At impBufferDevice::paint in the \u0027if(mpAlpha)\u0027 case you use \"aAlphaMask.BlendWith(aContent.GetAlpha())\". Shouldn\u0027t that now use your added parameter fAlpha and instead of DrawBimapEx try DrawTransformBitmapExDirect now...?\n\nGetAlpha() is AlphaMask, not float.",
      "parentUuid": "0b0c82a9_75eb7ec1",
      "revId": "d71c9913e19f1be13f1d38a24393a910ba574834",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "caa34c3f_19cd31d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2022-01-12T18:30:27Z",
      "side": 1,
      "message": "\u003e \u003e So, in principle, for small targets, go back to state before buffering. Should do it. May also get a #define SMALL_SIZE_ALLOC_FREE_DIRECTLY that could easily be adapted or even put to config if needed.\n\u003e \n\u003e That\u0027s a possible solution too, but I don\u0027t think it\u0027s better. AFAICT the only other backend affected is Skia/Vulkan, so the workaround doesn\u0027t need to be generic, and in some cases always allocating may be less efficient. Moreover whenever we get rid of the separate alpha we may also stop using GetBitmap(), which again may change the situation here. So I think I prefer keeping it this simple.\n\nWould you not prefer generic, if it\u0027s easier readable and understandable? I do not think that it currently is \"this simple\", I think it would be \"more simple\" and less code to just use directly allocated buffers.\nIt is correct that \u0027in some cases always allocating may be less efficient\u0027, but I think it would be worth a try here. I see that you try to be very careful and do things only in special cases for one backend to not change anything, but that does not make the code easier or better readable/understandable in the long term.\nHaving a fallback for very small VDevs is missing anyways/I oversaw that when adding the buffer. Or better: I did not think that using just 32x32 of a 1000x1000 already existing buffer would do harm here, but as can be seen, you never know.\n\n\u003e \u003e Just one question (not related): At impBufferDevice::paint in the \u0027if(mpAlpha)\u0027 case you use \"aAlphaMask.BlendWith(aContent.GetAlpha())\". Shouldn\u0027t that now use your added parameter fAlpha and instead of DrawBimapEx try DrawTransformBitmapExDirect now...?\n\u003e \n\u003e GetAlpha() is AlphaMask, not float.\n\nYes, but since aContent.GetAlpha() gets from aContent and aContent was created one line above from mpContent-\u003eGetBitmapEx and mpContent/mpAlpha is separated, aContent.GetAlpha() will always be empty, so no need to blend it (?). I guess \nGetBitmapEx \u0026\u0026 BitmapEx for aContent is somehow left over from something, it should be GetBitmap \u0026\u0026 Bitmap here.\nOutputDevice::GetBitmapEx will only return a non-empty GetAlpha if that mechanism used in Slideshow that holds an extra-alpha-VDev a OutDev (what always was a hack and will vanish hopefully when slideshow uses primitives one day). Slideshow does not use impBufferDevice, and VCL-PrimitiveRenderer is not used in slideshow, so that can be excluded.\nSo you are right with it\u0027s not being fAlpha, but still BlendWith can be avoided, maybe - for security - by using aContent.IsAlpha() to check if it is used. Just my 2ct \u0026 all the best!",
      "parentUuid": "cfb66247_ae2ce83b",
      "revId": "d71c9913e19f1be13f1d38a24393a910ba574834",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "145f0673_10198364",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-01-13T09:40:07Z",
      "side": 1,
      "message": "\u003e Would you not prefer generic, if it\u0027s easier readable and understandable? I do not think that it currently is \"this simple\", I think it would be \"more simple\" and less code to just use directly allocated buffers.\n\u003e It is correct that \u0027in some cases always allocating may be less efficient\u0027, but I think it would be worth a try here. I see that you try to be very careful and do things only in special cases for one backend to not change anything, but that does not make the code easier or better readable/understandable in the long term.\n\u003e Having a fallback for very small VDevs is missing anyways/I oversaw that when adding the buffer. Or better: I did not think that using just 32x32 of a 1000x1000 already existing buffer would do harm here, but as can be seen, you never know.\n\n\"Simple\" means that it\u0027s good enough and I do not need to think more about all the implications of changing it for all the cases that I haven\u0027t checked. If you want to check those, feel free to do that and do a follow-up commit.\n\nOr you actually meant to say \"I as the author of the code say that you can simplify it by always checking for 32x32 and do not need to check for specific backends\", then just say that and do not say misleading things like \"your solution is also okay for me\" when apparently it\u0027s not.\n\n\u003e Yes, but since aContent.GetAlpha() gets from aContent and aContent was created one line above from mpContent-\u003eGetBitmapEx and mpContent/mpAlpha is separated, aContent.GetAlpha() will always be empty,\n\nWill it? So what if a bitmap with alpha was drawn into the content, or if there\u0027s another transparence primitive inside this one?",
      "parentUuid": "caa34c3f_19cd31d6",
      "revId": "d71c9913e19f1be13f1d38a24393a910ba574834",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "489e5709_e22dc382",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2022-01-13T10:15:06Z",
      "side": 1,
      "message": "\u003e \"Simple\" means that it\u0027s good enough and I do not need to think more about all the implications of changing it for all the cases that I haven\u0027t checked. If you want to check those, feel free to do that and do a follow-up commit.\n\nThanks for clarifying \u0027simple\u0027, usually I understand it for code complexity. If as here this means that another system-dependent info like which backend is active is used, it\u0027s not simple for me anymore from my POV. Another system-dependent decision in system-independent code.\n\n\u003e Or you actually meant to say \"I as the author of the code say that you can simplify it by always checking for 32x32 and do not need to check for specific backends\", then just say that and do not say misleading things like \"your solution is also okay for me\" when apparently it\u0027s not.\n\nNo, it means what I said - just do it like that if you want. Being the author does not mean much in opensource :-) I gave that possible \u0027more simple\u0027 solution (in the sense of code complexity \u0026\u0026 avoiding system-dependent info usage) since you initially wrote that you could not find a simpler solution. That sounded like asking for it, so I took the time to think about it. I am just irritated that you then do not want to check it out.\n\n\u003e \u003e Yes, but since aContent.GetAlpha() gets from aContent and aContent was created one line above from mpContent-\u003eGetBitmapEx and mpContent/mpAlpha is separated, aContent.GetAlpha() will always be empty,\n\n\u003e Will it? So what if a bitmap with alpha was drawn into the content, or if there\u0027s another transparence primitive inside this one?\n\nUsually yes - that\u0027s why all that mpAlphaVDev in OutputDevice is marked as\n\n    // TEMP TEMP TEMP\n    VclPtr\u003cVirtualDevice\u003e           mpAlphaVDev;\n\nEven the orig author told me that this is/was a hack and he wishes that this will vanish earlier than later. It\u0027s a hack for the presentation module and only used there. To allow removal, presentation needs to be changed to primitives and - hopefully - no one else starts using that until then.\n\nBut tin doubt - just use IsAlpha() at BitmapEx before doing the costly blend - unfortunately cannot be checked inside BlendWith, that\u0027s too late.\n\nTo repeat: I am fine with this version, as told. It does not improve code quality from my pov for given reasons, so I offered a more simple possibility due to thinking that you asked for one - no need for you to pick it up or use it, but maybe I misinterpreted your \"I couldn\u0027t find a better way\" in the commit comment.",
      "parentUuid": "145f0673_10198364",
      "revId": "d71c9913e19f1be13f1d38a24393a910ba574834",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}