/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#include <sfx2/sfx.hrc>
#include "starmath.hrc"

String RID_PLUSX_HELP
{
    Text [ en-US ] = "+ Sign" ;
};
String RID_MINUSX_HELP
{
    Text [ en-US ] = "- Sign" ;
};
String RID_PLUSMINUSX_HELP
{
    Text [ en-US ] = "+- Sign" ;
};
String RID_MINUSPLUSX_HELP
{
    Text [ en-US ] = "-+ Sign" ;
};
String RID_NEGX_HELP
{
    Text [ en-US ] = "Boolean NOT" ;
};
String RID_XPLUSY_HELP
{
    Text [ en-US ] = "Addition +" ;
};
String RID_XMINUSY_HELP
{
    Text [ en-US ] = "Subtraction -" ;
};
String RID_XCDOTY_HELP
{
    Text [ en-US ] = "Multiplication (Dot)" ;
};
String RID_XTIMESY_HELP
{
    Text [ en-US ] = "Multiplication (x)" ;
};
String RID_XSYMTIMESY_HELP
{
    Text [ en-US ] = "Multiplication (*)" ;
};
String RID_XSYMDIVIDEY_HELP
{
    Text [ en-US ] = "Division (Slash)" ;
};
String RID_XDIVY_HELP
{
    Text [ en-US ] = "Division (รท)" ;
};
String RID_XOVERY_HELP
{
    Text [ en-US ] = "Division (Fraction)" ;
};
String RID_XODIVIDEY_HELP
{
    Text [ en-US ] = "Circled Slash" ;
};
String RID_XODOTY_HELP
{
    Text [ en-US ] = "Circled Dot" ;
};
String RID_XOMINUSY_HELP
{
    Text [ en-US ] = "Circled Minus" ;
};
String RID_XOPLUSY_HELP
{
    Text [ en-US ] = "Circled Plus" ;
};
String RID_XOTIMESY_HELP
{
    Text [ en-US ] = "Tensor Product" ;
};
String RID_XANDY_HELP
{
    Text [ en-US ] = "Boolean AND" ;
};
String RID_XORY_HELP
{
    Text [ en-US ] = "Boolean OR" ;
};
String RID_XEQY_HELP
{
    Text [ en-US ] = "Is Equal" ;
};
String RID_XNEQY_HELP
{
    Text [ en-US ] = "Is Not Equal" ;
};
String RID_XLTY_HELP
{
    Text [ en-US ] = "Is Less Than" ;
};
String RID_XGTY_HELP
{
    Text [ en-US ] = "Is Greater Than" ;
};
String RID_XLEY_HELP
{
    Text [ en-US ] = "Is Less Than Or Equal To" ;
};
String RID_XGEY_HELP
{
    Text [ en-US ] = "Is Greater Than Or Equal To" ;
};
String RID_XLESLANTY_HELP
{
    Text [ en-US ] = "Is Less Than Or Equal To" ;
};
String RID_XGESLANTY_HELP
{
    Text [ en-US ] = "Is Greater Than Or Equal To" ;
};
String RID_XLLY_HELP
{
    Text [ en-US ] = "Is Much Less Than" ;
};
String RID_XGGY_HELP
{
    Text [ en-US ] = "Is Much Greater Than" ;
};
String RID_XDEFY_HELP
{
    Text [ en-US ] = "Is Defined As" ;
};
String RID_XEQUIVY_HELP
{
    Text [ en-US ] = "Is Congruent To" ;
};
String RID_XAPPROXY_HELP
{
    Text [ en-US ] = "Is Approximately Equal" ;
};
String RID_XSIMY_HELP
{
    Text [ en-US ] = "Is Similar To" ;
};
String RID_XSIMEQY_HELP
{
    Text [ en-US ] = "Is Similar Or Equal" ;
};
String RID_XPROPY_HELP
{
    Text [ en-US ] = "Is Proportional To" ;
};
String RID_XORTHOY_HELP
{
    Text [ en-US ] = "Is Orthogonal To" ;
};
String RID_XPARALLELY_HELP
{
    Text [ en-US ] = "Is Parallel To" ;
};
String RID_XTOWARDY_HELP
{
    Text [ en-US ] = "Toward" ;
};
String RID_XTRANSLY_HELP
{
    Text [ en-US ] = "Corresponds To (Left)" ;
};
String RID_XTRANSRY_HELP
{
    Text [ en-US ] = "Corresponds To (Right)" ;
};
String RID_XINY_HELP
{
    Text [ en-US ] = "Is In" ;
};
String RID_XNOTINY_HELP
{
    Text [ en-US ] = "Is Not In" ;
};
String RID_XOWNSY_HELP
{
    Text [ en-US ] = "Owns" ;
};
String RID_XUNIONY_HELP
{
    Text [ en-US ] = "Union" ;
};
String RID_XINTERSECTIONY_HELP
{
    Text [ en-US ] = "Intersection" ;
};
String RID_XSETMINUSY_HELP
{
    Text [ en-US ] = "Difference" ;
};
String RID_XSLASHY_HELP
{
    Text [ en-US ] = "Quotient Set" ;
};
String RID_XSUBSETY_HELP
{
    Text [ en-US ] = "Subset" ;
};
String RID_XSUBSETEQY_HELP
{
    Text [ en-US ] = "Subset Or Equal To" ;
};
String RID_XSUPSETY_HELP
{
    Text [ en-US ] = "Superset" ;
};
String RID_XSUPSETEQY_HELP
{
    Text [ en-US ] = "Superset Or Equal To" ;
};
String RID_XNSUBSETY_HELP
{
    Text [ en-US ] = "Not Subset" ;
};
String RID_XNSUBSETEQY_HELP
{
    Text [ en-US ] = "Not Subset Or Equal" ;
};
String RID_XNSUPSETY_HELP
{
    Text [ en-US ] = "Not Superset" ;
};
String RID_XNSUPSETEQY_HELP
{
    Text [ en-US ] = "Not Superset Or Equal" ;
};
String RID_ABSX_HELP
{
    Text [ en-US ] = "Absolute Value" ;
};
String RID_FACTX_HELP
{
    Text [ en-US ] = "Factorial" ;
};
String RID_SQRTX_HELP
{
    Text [ en-US ] = "Square Root" ;
};
String RID_NROOTXY_HELP
{
    Text [ en-US ] = "N-th Root" ;
};
String RID_EX_HELP
{
    Text [ en-US ] = "Exponential Function" ;
};
String RID_EXPX_HELP
{
    Text [ en-US ] = "Exponential Function" ;
};
String RID_LNX_HELP
{
    Text [ en-US ] = "Natural Logarithm" ;
};
String RID_LOGX_HELP
{
    Text [ en-US ] = "Logarithm" ;
};
String RID_SINX_HELP
{
    Text [ en-US ] = "Sine" ;
};
String RID_COSX_HELP
{
    Text [ en-US ] = "Cosine" ;
};
String RID_TANX_HELP
{
    Text [ en-US ] = "Tangent" ;
};
String RID_COTX_HELP
{
    Text [ en-US ] = "Cotangent" ;
};
String RID_ARCSINX_HELP
{
    Text [ en-US ] = "Arcsine" ;
};
String RID_ARCCOSX_HELP
{
    Text [ en-US ] = "Arccosine" ;
};
String RID_ARCTANX_HELP
{
    Text [ en-US ] = "Arctangent" ;
};
String RID_ARCCOTX_HELP
{
    Text [ en-US ] = "Arccotangent" ;
};
String RID_SINHX_HELP
{
    Text [ en-US ] = "Hyperbolic Sine" ;
};
String RID_COSHX_HELP
{
    Text [ en-US ] = "Hyperbolic Cosine" ;
};
String RID_TANHX_HELP
{
    Text [ en-US ] = "Hyperbolic Tangent" ;
};
String RID_COTHX_HELP
{
    Text [ en-US ] = "Hyperbolic Cotangent" ;
};
String RID_ARSINHX_HELP
{
    Text [ en-US ] = "Area Hyperbolic Sine" ;
};
String RID_ARCOSHX_HELP
{
    Text [ en-US ] = "Area Hyperbolic Cosine" ;
};
String RID_ARTANHX_HELP
{
    Text [ en-US ] = "Area Hyperbolic Tangent" ;
};
String RID_ARCOTHX_HELP
{
    Text [ en-US ] = "Area Hyperbolic Cotangent" ;
};
String RID_SUMX_HELP
{
    Text [ en-US ] = "Sum" ;
};
String RID_SUM_FROMX_HELP
{
    Text [ en-US ] = "Sum Subscript Bottom" ;
};
String RID_SUM_TOX_HELP
{
    Text [ en-US ] = "Sum Superscript Top" ;
};
String RID_SUM_FROMTOX_HELP
{
    Text [ en-US ] = "Sum Sup/Sub script" ;
};
String RID_PRODX_HELP
{
    Text [ en-US ] = "Product" ;
};
String RID_PROD_FROMX_HELP
{
    Text [ en-US ] = "Product Subscript Bottom" ;
};
String RID_PROD_TOX_HELP
{
    Text [ en-US ] = "Product Superscript Top" ;
};
String RID_PROD_FROMTOX_HELP
{
    Text [ en-US ] = "Product Sup/Sub script" ;
};
String RID_COPRODX_HELP
{
    Text [ en-US ] = "Coproduct" ;
};
String RID_COPROD_FROMX_HELP
{
    Text [ en-US ] = "Coproduct Subscript Bottom" ;
};
String RID_COPROD_TOX_HELP
{
    Text [ en-US ] = "Coproduct Superscript Top" ;
};
String RID_COPROD_FROMTOX_HELP
{
    Text [ en-US ] = "Coproduct Sup/Sub script" ;
};
String RID_LIMX_HELP
{
    Text [ en-US ] = "Limes" ;
};
String RID_LIM_FROMX_HELP
{
    Text [ en-US ] = "Limes Subscript Bottom" ;
};
String RID_LIM_TOX_HELP
{
    Text [ en-US ] = "Limes Superscript Top" ;
};
String RID_LIM_FROMTOX_HELP
{
    Text [ en-US ] = "Limes Sup/Sub script" ;
};
String RID_LIMINFX_HELP
{
    Text [ en-US ] = "Limit Inferior" ;
};
String RID_LIMINF_FROMX_HELP
{
    Text [ en-US ] = "Limit Inferior Subscript Bottom" ;
};
String RID_LIMINF_TOX_HELP
{
    Text [ en-US ] = "Limit Inferior Superscript Top" ;
};
String RID_LIMINF_FROMTOX_HELP
{
    Text [ en-US ] = "Limit Inferior Sup/Sub script" ;
};
String RID_LIMSUPX_HELP
{
    Text [ en-US ] = "Limit Superior" ;
};
String RID_LIMSUP_FROMX_HELP
{
    Text [ en-US ] = "Limit Superior Subscript Bottom" ;
};
String RID_LIMSUP_TOX_HELP
{
    Text [ en-US ] = "Limit Superior Superscript Top" ;
};
String RID_LIMSUP_FROMTOX_HELP
{
    Text [ en-US ] = "Limit Superior Sup/Sub script" ;
};
String RID_EXISTS_HELP
{
    Text [ en-US ] = "There Exists" ;
};
String RID_NOTEXISTS_HELP
{
    Text [ en-US ] = "There Not Exists" ;
};
String RID_FORALL_HELP
{
    Text [ en-US ] = "For all" ;
};
String RID_INTX_HELP
{
    Text [ en-US ] = "Integral" ;
};
String RID_INT_FROMX_HELP
{
    Text [ en-US ] = "Integral Subscript Bottom" ;
};
String RID_INT_TOX_HELP
{
    Text [ en-US ] = "Integral Superscript Top" ;
};
String RID_INT_FROMTOX_HELP
{
    Text [ en-US ] = "Integral Sup/Sub script" ;
};
String RID_IINTX_HELP
{
    Text [ en-US ] = "Double Integral" ;
};
String RID_IINT_FROMX_HELP
{
    Text [ en-US ] = "Double Integral Subscript Bottom" ;
};
String RID_IINT_TOX_HELP
{
    Text [ en-US ] = "Double Integral Superscript Top" ;
};
String RID_IINT_FROMTOX_HELP
{
    Text [ en-US ] = "Double Integral Sup/Sub script" ;
};
String RID_IIINTX_HELP
{
    Text [ en-US ] = "Triple Integral" ;
};
String RID_IIINT_FROMX_HELP
{
    Text [ en-US ] = "Triple Integral Subscript Bottom" ;
};
String RID_IIINT_TOX_HELP
{
    Text [ en-US ] = "Triple Integral Superscript Top" ;
};
String RID_IIINT_FROMTOX_HELP
{
    Text [ en-US ] = "Triple Integral Sup/Sub script" ;
};
String RID_LINTX_HELP
{
    Text [ en-US ] = "Curve Integral" ;
};
String RID_LINT_FROMX_HELP
{
    Text [ en-US ] = "Curve Integral Subscript Bottom" ;
};
String RID_LINT_TOX_HELP
{
    Text [ en-US ] = "Curve Integral Superscript Top" ;
};
String RID_LINT_FROMTOX_HELP
{
    Text [ en-US ] = "Curve Integral Sup/Sub script" ;
};
String RID_LLINTX_HELP
{
    Text [ en-US ] = "Double Curve Integral" ;
};
String RID_LLINT_FROMX_HELP
{
    Text [ en-US ] = "Double Curve Integral Subscript Bottom" ;
};
String RID_LLINT_TOX_HELP
{
    Text [ en-US ] = "Double Curve Integral Superscript Top" ;
};
String RID_LLINT_FROMTOX_HELP
{
    Text [ en-US ] = "Double Curve Integral Sup/Sub script" ;
};
String RID_LLLINTX_HELP
{
    Text [ en-US ] = "Triple Curve Integral" ;
};
String RID_LLLINT_FROMX_HELP
{
    Text [ en-US ] = "Triple Curve Integral Subscript Bottom" ;
};
String RID_LLLINT_TOX_HELP
{
    Text [ en-US ] = "Triple Curve Integral Superscript Top" ;
};
String RID_LLLINT_FROMTOX_HELP
{
    Text [ en-US ] = "Triple Curve Integral Sup/Sub script" ;
};
String RID_ACUTEX_HELP
{
    Text [ en-US ] = "Acute Accent" ;
};
String RID_BARX_HELP
{
    Text [ en-US ] = "Line Above" ;
};
String RID_BREVEX_HELP
{
    Text [ en-US ] = "Breve" ;
};
String RID_CHECKX_HELP
{
    Text [ en-US ] = "Reverse Circumflex" ;
};
String RID_CIRCLEX_HELP
{
    Text [ en-US ] = "Circle" ;
};
String RID_DOTX_HELP
{
    Text [ en-US ] = "Dot" ;
};
String RID_DDOTX_HELP
{
    Text [ en-US ] = "Double Dot" ;
};
String RID_DDDOTX_HELP
{
    Text [ en-US ] = "Triple Dot" ;
};
String RID_GRAVEX_HELP
{
    Text [ en-US ] = "Grave Accent" ;
};
String RID_HATX_HELP
{
    Text [ en-US ] = "Circumflex" ;
};
String RID_TILDEX_HELP
{
    Text [ en-US ] = "Tilde" ;
};
String RID_VECX_HELP
{
    Text [ en-US ] = "Vector Arrow" ;
};
String RID_UNDERLINEX_HELP
{
    Text [ en-US ] = "Line Below" ;
};
String RID_OVERLINEX_HELP
{
    Text [ en-US ] = "Line Over" ;
};
String RID_OVERSTRIKEX_HELP
{
    Text [ en-US ] = "Line Through" ;
};
String RID_PHANTOMX_HELP
{
    Text [ en-US ] = "Transparent" ;
};
String RID_BOLDX_HELP
{
    Text [ en-US ] = "Bold Font" ;
};
String RID_ITALX_HELP
{
    Text [ en-US ] = "Italic Font" ;
};
String RID_SIZEXY_HELP
{
    Text [ en-US ] = "Resize" ;
};
String RID_FONTXY_HELP
{
    Text [ en-US ] = "Change Font" ;
};
String RID_COLORX_BLACK_HELP
{
    Text [ en-US ] = "Color Black" ;
};
String RID_COLORX_BLUE_HELP
{
    Text [ en-US ] = "Color Blue" ;
};
String RID_COLORX_GREEN_HELP
{
    Text [ en-US ] = "Color Green" ;
};
String RID_COLORX_RED_HELP
{
    Text [ en-US ] = "Color Red" ;
};
String RID_COLORX_CYAN_HELP
{
    Text [ en-US ] = "Color Cyan" ;
};
String RID_COLORX_MAGENTA_HELP
{
    Text [ en-US ] = "Color Magenta" ;
};
String RID_COLORX_GRAY_HELP
{
    Text [ en-US ] = "Color Gray" ;
};
String RID_COLORX_LIME_HELP
{
    Text [ en-US ] = "Color Lime" ;
};
String RID_COLORX_MAROON_HELP
{
    Text [ en-US ] = "Color Maroon" ;
};
String RID_COLORX_NAVY_HELP
{
    Text [ en-US ] = "Color Navy" ;
};
String RID_COLORX_OLIVE_HELP
{
    Text [ en-US ] = "Color Olive" ;
};
String RID_COLORX_PURPLE_HELP
{
    Text [ en-US ] = "Color Purple" ;
};
String RID_COLORX_SILVER_HELP
{
    Text [ en-US ] = "Color Silver" ;
};
String RID_COLORX_TEAL_HELP
{
    Text [ en-US ] = "Color Teal" ;
};
String RID_COLORX_YELLOW_HELP
{
    Text [ en-US ] = "Color Yellow" ;
};

String RID_LRGROUPX_HELP
{
    Text [ en-US ] = "Group Brackets" ;
};
String RID_LRPARENTX_HELP
{
    Text [ en-US ] = "Round Brackets" ;
};
String RID_LRBRACKETX_HELP
{
    Text [ en-US ] = "Square Brackets" ;
};
String RID_LRDBRACKETX_HELP
{
    Text [ en-US ] = "Double Square Brackets" ;
};
String RID_LRBRACEX_HELP
{
    Text [ en-US ] = "Braces" ;
};
String RID_LRANGLEX_HELP
{
    Text [ en-US ] = "Angle Brackets" ;
};
String RID_LRCEILX_HELP
{
    Text [ en-US ] = "Upper Ceil" ;
};
String RID_LRFLOORX_HELP
{
    Text [ en-US ] = "Floor" ;
};
String RID_LRLINEX_HELP
{
    Text [ en-US ] = "Single Lines" ;
};
String RID_LRDLINEX_HELP
{
    Text [ en-US ] = "Double Lines" ;
};
String RID_LMRANGLEXY_HELP
{
    Text [ en-US ] = "Operator Brackets" ;
};
String RID_SLRPARENTX_HELP
{
    Text [ en-US ] = "Round Brackets (Scalable)" ;
};
String RID_SLRBRACKETX_HELP
{
    Text [ en-US ] = "Square Brackets (Scalable)" ;
};
String RID_SLRDBRACKETX_HELP
{
    Text [ en-US ] = "Double Square Brackets (Scalable)" ;
};
String RID_SLRBRACEX_HELP
{
    Text [ en-US ] = "Braces (Scalable)" ;
};
String RID_SLRANGLEX_HELP
{
    Text [ en-US ] = "Angle Brackets (Scalable)" ;
};
String RID_SLRCEILX_HELP
{
    Text [ en-US ] = "Ceiling (Scalable)" ;
};
String RID_SLRFLOORX_HELP
{
    Text [ en-US ] = "Floor (Scalable)" ;
};
String RID_SLRLINEX_HELP
{
    Text [ en-US ] = "Single Lines (Scalable)" ;
};
String RID_SLRDLINEX_HELP
{
    Text [ en-US ] = "Double Lines (Scalable)" ;
};
String RID_SLMRANGLEXY_HELP
{
    Text [ en-US ] = "Operator Brackets (Scalable)" ;
};
String RID_XEVALUATEDATY_HELP
{
    Text [ en-US ] = "Evaluated At" ;
};
String RID_XOVERBRACEY_HELP
{
    Text [ en-US ] = "Braces Top (Scalable)" ;
};
String RID_XUNDERBRACEY_HELP
{
    Text [ en-US ] = "Braces Bottom (Scalable)" ;
};
String RID_RSUBX_HELP
{
    Text [ en-US ] = "Subscript Right" ;
};
String RID_RSUPX_HELP
{
    Text [ en-US ] = "Power" ;
};
String RID_LSUBX_HELP
{
    Text [ en-US ] = "Subscript Left" ;
};
String RID_LSUPX_HELP
{
    Text [ en-US ] = "Superscript Left" ;
};
String RID_CSUBX_HELP
{
    Text [ en-US ] = "Subscript Bottom" ;
};
String RID_CSUPX_HELP
{
    Text [ en-US ] = "Superscript Top" ;
};
String RID_SBLANK_HELP
{
    Text [ en-US ] = "Small Gap" ;
};
String RID_BLANK_HELP
{
    Text [ en-US ] = "Blank" ;
};
String RID_NEWLINE_HELP
{
    Text [ en-US ] = "New Line" ;
};
String RID_BINOMXY_HELP
{
    Text [ en-US ] = "Vertical Stack (2 Elements)";
};
String RID_STACK_HELP
{
    Text [ en-US ] = "Vertical Stack" ;
};
String RID_MATRIX_HELP
{
    Text [ en-US ] = "Matrix Stack" ;
};
String RID_ALIGNLX_HELP
{
    Text [ en-US ] = "Align Left" ;
};
String RID_ALIGNCX_HELP
{
    Text [ en-US ] = "Align Center" ;
};
String RID_ALIGNRX_HELP
{
    Text [ en-US ] = "Align Right" ;
};
String RID_ALEPH_HELP
{
    Text [ en-US ] = "Aleph" ;
};
String RID_EMPTYSET_HELP
{
    Text [ en-US ] = "Empty Set" ;
};
String RID_RE_HELP
{
    Text [ en-US ] = "Real Part" ;
};
String RID_IM_HELP
{
    Text [ en-US ] = "Imaginary Part" ;
};
String RID_INFINITY_HELP
{
    Text [ en-US ] = "Infinity" ;
};
String RID_PARTIAL_HELP
{
    Text [ en-US ] = "Partial" ;
};
String RID_NABLA_HELP
{
    Text [ en-US ] = "Nabla" ;
};
String RID_WP_HELP
{
    Text [ en-US ] = "Weierstrass p" ;
};
String RID_DOTSAXIS_HELP
{
    Text [ en-US ] = "Dots In Middle" ;
};
String RID_DOTSUP_HELP
{
    Text [ en-US ] = "Dots To Top" ;
};
String RID_DOTSDOWN_HELP
{
    Text [ en-US ] = "Dots To Bottom" ;
};
String RID_DOTSLOW_HELP
{
    Text [ en-US ] = "Dots At Bottom" ;
};
String RID_DOTSVERT_HELP
{
    Text [ en-US ] = "Dots Vertically" ;
};
String RID_XCIRCY_HELP
{
    Text [ en-US ] = "Concatenate" ;
};
String RID_XWIDESLASHY_HELP
{
    Text [ en-US ] = "Division (wideslash)" ;
};
String RID_XWIDEBSLASHY_HELP
{
    Text [ en-US ] = "Division (counter wideslash)" ;
};
String RID_XDIVIDESY_HELP
{
    Text [ en-US ] = "Divides" ;
};
String RID_XNDIVIDESY_HELP
{
    Text [ en-US ] = "Does Not Divide" ;
};
String RID_DLARROW_HELP
{
    Text [ en-US ] = "Double Arrow Left" ;
};
String RID_DLRARROW_HELP
{
    Text [ en-US ] = "Double Arrow Left And Right" ;
};
String RID_DRARROW_HELP
{
    Text [ en-US ] = "Double Arrow Right" ;
};
String RID_SETN_HELP
{
    Text [ en-US ] = "Natural Numbers Set" ;
};
String RID_SETZ_HELP
{
    Text [ en-US ] = "Integers Set" ;
};
String RID_SETQ_HELP
{
    Text [ en-US ] = "Set of Rational Numbers" ;
};
String RID_SETR_HELP
{
    Text [ en-US ] = "Real Numbers Set" ;
};
String RID_SETC_HELP
{
    Text [ en-US ] = "Complex Numbers Set" ;
};
String RID_WIDEHATX_HELP
{
    Text [ en-US ] = "Large Circumflex" ;
};
String RID_WIDETILDEX_HELP
{
    Text [ en-US ] = "Large Tilde" ;
};
String RID_WIDEVECX_HELP
{
    Text [ en-US ] = "Large Vector Arrow" ;
};
String RID_HBAR_HELP
{
    Text [ en-US ] = "h Bar" ;
};
String RID_LAMBDABAR_HELP
{
    Text [ en-US ] = "Lambda Bar" ;
};
String RID_LEFTARROW_HELP
{
    Text [ en-US ] = "Left Arrow" ;
};
String RID_RIGHTARROW_HELP
{
    Text [ en-US ] = "Right Arrow" ;
};
String RID_UPARROW_HELP
{
    Text [ en-US ] = "Up Arrow" ;
};
String RID_DOWNARROW_HELP
{
    Text [ en-US ] = "Down Arrow" ;
};
String RID_NOSPACE_HELP
{
    Text [ en-US ] = "No space" ;
};
String RID_XPRECEDESY_HELP
{
    Text [ en-US ] = "Precedes" ;
};
String RID_XPRECEDESEQUALY_HELP
{
    Text [ en-US ] = "Precedes or equal to" ;
};
String RID_XPRECEDESEQUIVY_HELP
{
    Text [ en-US ] = "Precedes or equivalent to" ;
};
String RID_XSUCCEEDSY_HELP
{
    Text [ en-US ] = "Succeeds" ;
};
String RID_XSUCCEEDSEQUALY_HELP
{
    Text [ en-US ] = "Succeeds or equal to" ;
};
String RID_XSUCCEEDSEQUIVY_HELP
{
    Text [ en-US ] = "Succeeds or equivalent to" ;
};
String RID_XNOTPRECEDESY_HELP
{
    Text [ en-US ] = "Not precedes" ;
};
String RID_XNOTSUCCEEDSY_HELP
{
    Text [ en-US ] = "Not succeeds" ;
};

String RID_CATEGORY_UNARY_BINARY_OPERATORS
{
    Text [ en-US ] = "Unary/Binary Operators" ;
};
String RID_CATEGORY_RELATIONS
{
    Text [ en-US ] = "Relations" ;
};
String RID_CATEGORY_SET_OPERATIONS
{
    Text [ en-US ] = "Set Operations" ;
};
String RID_CATEGORY_FUNCTIONS
{
    Text [ en-US ] = "Functions" ;
};
String RID_CATEGORY_OPERATORS
{
    Text [ en-US ] = "Operators" ;
};
String RID_CATEGORY_ATTRIBUTES
{
    Text [ en-US ] = "Attributes" ;
};
String RID_CATEGORY_BRACKETS
{
    Text [ en-US ] = "Brackets" ;
};
String RID_CATEGORY_FORMATS
{
    Text [ en-US ] = "Formats" ;
};
String RID_CATEGORY_OTHERS
{
    Text [ en-US ] = "Others" ;
};
String RID_CATEGORY_EXAMPLES
{
    Text [ en-US ] = "Examples" ;
};

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
