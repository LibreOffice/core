{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "11ade844_396e11ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000166
      },
      "writtenOn": "2021-12-16T10:58:03Z",
      "side": 1,
      "message": "Does not work yet (crashes when copying table).\n\nI just wonder if this is the right approach.\n\nThe problem is that the sheet is copied, but the named range is bound to the first sheet and is not found by the autofilter on the second sheet.\n\nSo you think this is the correct approach? Or any other suggestions?",
      "revId": "da7c7a4514276c84d9fb28954794c78d5f70bce4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0bf0e4d_2bedf182",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-12-17T03:59:32Z",
      "side": 1,
      "message": "I saw the xlsx doc attached to BZ, and it imports the DB range as __Anonymous_Sheet_DB__\u003cnumber\u003e. That prefix is typically used for sheet local anonymous DB, not a global named DB.  So, maybe you can also look into whether that range should be imported into Calc as a sheet-local anonymous DB?  Note that Calc currently only supports one local anonymous DB per sheet.  But I know Excel supports multiple of those per sheet.  It would be reasonable to extend Calc\u0027s current implementation to allow multiple sheet-local anonymous DBs.  The current code seems to handle copying of sheet-local DB\u0027s on sheet copy.  That way you won\u0027t need to worry about naming clash...",
      "revId": "da7c7a4514276c84d9fb28954794c78d5f70bce4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91537ea9_399ae59c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-12-17T14:16:29Z",
      "side": 1,
      "message": "Actually let\u0027s scratch this. When loading from xlsx, every autofilter range is named now, so I guess we can\u0027t really map it to a sheet-local anonymous DB...",
      "parentUuid": "c0bf0e4d_2bedf182",
      "revId": "da7c7a4514276c84d9fb28954794c78d5f70bce4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "760570d6_b88c2ce9",
        "filename": "sc/source/core/data/documen2.cxx",
        "patchSetId": 1
      },
      "lineNbr": 861,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2021-12-17T03:44:26Z",
      "side": 1,
      "message": "Just to add to what Eike said, it would be best to use different code paths for moving of a sheet and copying of a sheet.  What needs to happen between sheet copy and sheet move are different enough that it warrants independent paths.  When moving a sheet, we typically only adjust reference indices etc, but when copying a sheet, we do need to duplicate data and some reference adjustments on top of it.",
      "revId": "da7c7a4514276c84d9fb28954794c78d5f70bce4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee3a0887_3327123d",
        "filename": "sc/source/core/tool/dbdata.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1006,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2021-12-16T13:33:41Z",
      "side": 1,
      "message": "This can\u0027t work.\n\nFor one, it duplicates the name and index ID in the copy, but then the underlying std::set::insert() with an identical name should fail. For correctness this should be\n\n    std::unique_ptr\u003cScDBData\u003e pDataCopy(new ScDBData(*p));\n    if (mpCollection-\u003egetNamedDBs().insert(std::move(pDataCopy)))\n        pDataCopy-\u003eUpdateMoveTab(mnOldTab, mnNewTab);\n\nBut even if a new unique name and index was used (index can be set to 0 before ScDBCollection::NamedDBs::insert() and then a new value will be assigned) all formula expressions that are copied along and supposed to use the new copy instead of the old dbrange would have to be adapted to use the new index.\n\nYou can take a look at sc/source/core/data/formulacell.cxx the ScFormulaCell ctor that calls adjustDBRange() and its implementation. That handles the case for when a sheet is copied to another document and same name ScDBData. Something similar but for copying sheet within the same document would be needed, along with a mapping of old to new names so they can be properly reused for subsequent tokens or formula expressions during the same copy. Also of interest may be adjustRangeName() and the ScDocument::CopyAdjustRangeName() it calls because there similarly sheet-local scope named ranges are created, if referenced by a copied formula cell (which case isn\u0027t applicable if the dbrange is to be copied with the sheet anyway).\n\nAlso note that named expressions and conditional formats may contain references to ScDBData, so if sheet-local scope named expressions are created during copying the sheet or conditional formats are copied along then those will have to be adapted to use the new ScDBData as well.",
      "revId": "da7c7a4514276c84d9fb28954794c78d5f70bce4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}