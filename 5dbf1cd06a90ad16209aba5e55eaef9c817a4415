{
  "comments": [
    {
      "key": {
        "uuid": "7438e1e9_0723303f",
        "filename": "extensions/source/ole/unoconversionutilities.hxx",
        "patchSetId": 1
      },
      "lineNbr": 1565,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-27T07:03:40Z",
      "side": 1,
      "message": "We use OUString::Concat with a 8-bit string here, but isn\u0027t it less efficient than both OUStringLiteral *and* a Concat over 16-bit string, where plain memcpy could be used instead of per-character copy?",
      "revId": "5dbf1cd06a90ad16209aba5e55eaef9c817a4415",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5efe6aaa_50d052b0",
        "filename": "extensions/source/ole/unoconversionutilities.hxx",
        "patchSetId": 1
      },
      "lineNbr": 1565,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-04-27T07:12:55Z",
      "side": 1,
      "message": "Maybe.  But that\u0027s what we use in tons of other places (with and without a requirement to use the OUString::Concat marker) too,\n\n  foo + \"bar\" + baz + \"boz\"\n\nso I changed this back to the narrow string literal it had been before \u003chttps://git.libreoffice.org/core/+/33ecd0d5c4fff9511a8436513936a3f7044a775a%5E!/\u003e \"Change OUStringLiteral from char[] to char16_t[]\".",
      "parentUuid": "7438e1e9_0723303f",
      "revId": "5dbf1cd06a90ad16209aba5e55eaef9c817a4415",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "135523e8_f6998e17",
        "filename": "extensions/source/ole/unoconversionutilities.hxx",
        "patchSetId": 1
      },
      "lineNbr": 1565,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-27T07:18:36Z",
      "side": 1,
      "message": "\u003e so I changed this back to the narrow string literal it had been before\n\nOK, no problem in that - but honestly I fail how changing back has any advantage over making a better change, when the volume of the change is same, and the noise in the line will be same?\n\nUnrelated to this change, I suppose we could possibly drop the 8-bit char Concat support for OUString (now that C++ has that u\"\" literals)? That would be a large-scale change, and I don\u0027t know if that is worth it, though.",
      "parentUuid": "5efe6aaa_50d052b0",
      "revId": "5dbf1cd06a90ad16209aba5e55eaef9c817a4415",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "199f2c38_a1adcf62",
        "filename": "extensions/source/ole/unoconversionutilities.hxx",
        "patchSetId": 1
      },
      "lineNbr": 1565,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-04-27T07:29:45Z",
      "side": 1,
      "message": "\u003e Unrelated to this change, I suppose we could possibly drop the 8-bit char Concat support for OUString (now that C++ has that u\"\" literals)? That would be a large-scale change, and I don\u0027t know if that is worth it, though.\n\nI guess its always a weighing of larger static object size vs. faster dynamic performance.  (Plus, if we dropped support for OUString::Concat(\"...\")+... we should arguably also drop support for naked \"...\"+... in OUString concatenation contexts.)",
      "parentUuid": "135523e8_f6998e17",
      "revId": "5dbf1cd06a90ad16209aba5e55eaef9c817a4415",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}