{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c333dc50_f334e098",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000057
      },
      "writtenOn": "2022-02-06T14:02:39Z",
      "side": 1,
      "message": "I fixed the typos, managed to extract UTF32 unicode characters from the string and now use OUStringBuffer to remove unicode characters when in category Cc or Cn.\nAnd I added lines to the unit test document to test more use cases.",
      "revId": "c937ef1ef19b2ae61f616715f1ecd5f45767bdd6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13d1513a_708e9eca",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 3
      },
      "lineNbr": 3482,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-02-06T14:19:01Z",
      "side": 1,
      "message": "This looks over-complicated - maybe you overlooked that you may use OUStringBuffer\u0027s appendUtf32 method?",
      "range": {
        "startLine": 3455,
        "startChar": 4,
        "endLine": 3482,
        "endChar": 9
      },
      "revId": "c937ef1ef19b2ae61f616715f1ecd5f45767bdd6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "102a9f28_5b260300",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 3
      },
      "lineNbr": 3482,
      "author": {
        "id": 1000057
      },
      "writtenOn": "2022-02-06T15:09:28Z",
      "side": 1,
      "message": "I have to check if the codepoint is utf16 or utf32 (hence nIdx, nPrevIdx and nCodePointSize) and as I have to work from start to end with iterateCodePoints() I need to maintain an offset.\nMy method is to remove when needed.\nYour suggestions seems to be to append all codepoints except those that are to be \u0027cleaned\u0027 from the string. I think that most codepoints in strings are printable, so that removing some codepoints from a string will take less time then appending most codepoints to a string.\nI haven\u0027t done any performance tests, though.",
      "parentUuid": "13d1513a_708e9eca",
      "range": {
        "startLine": 3455,
        "startChar": 4,
        "endLine": 3482,
        "endChar": 9
      },
      "revId": "c937ef1ef19b2ae61f616715f1ecd5f45767bdd6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72408110_a9b07e58",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 3
      },
      "lineNbr": 3482,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-02-06T15:23:56Z",
      "side": 1,
      "message": "Removing from buffer is definitely slower than adding sequentially (which should be cache-friendly). And even for cases where you don\u0027t have to remove anything, it will not be slower than copy all then iterate over each character.",
      "parentUuid": "102a9f28_5b260300",
      "range": {
        "startLine": 3455,
        "startChar": 4,
        "endLine": 3482,
        "endChar": 9
      },
      "revId": "c937ef1ef19b2ae61f616715f1ecd5f45767bdd6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}