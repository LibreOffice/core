{
  "comments": [
    {
      "key": {
        "uuid": "fa31d9ce_67dee86e",
        "filename": "sc/inc/table.hxx",
        "patchSetId": 5
      },
      "lineNbr": 594,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-12T20:46:23Z",
      "side": 1,
      "message": "A plain data type (SCCOL is just a typedef for sal_Int16) doesn\u0027t need to be passed as const reference. So then consequently also name it nCol.",
      "range": {
        "startLine": 594,
        "startChar": 25,
        "endLine": 594,
        "endChar": 42
      },
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_e7c73810",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1322,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-13T12:10:32Z",
      "side": 1,
      "message": "What is missing here is that looking for unprotected cells should only be done if the caller says so, so the bUnprotected needs to be passed and evaluated before looking for protected flags and skipping such cells. Probably bSheetProtected is not needed then because it was evaluated by the caller and bUnprotected adjusted to false if the sheet is not protected.",
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_87d91c86",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1324,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-12T20:46:23Z",
      "side": 1,
      "message": "If this is not a valid row, bail out early with false instead of trying to operate on an invalid row with the following code.",
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_e7d01856",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1326,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-12T20:46:23Z",
      "side": 1,
      "message": "Hidden and overlapped need only to be asked if the cell is not protected, otherwise if it is protected it will be skipped anyway.",
      "range": {
        "startLine": 1325,
        "startChar": 0,
        "endLine": 1326,
        "endChar": 108
      },
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_c7e31432",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1327,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-12T20:46:23Z",
      "side": 1,
      "message": "Asking for the protected attribute is only necessary if bSheetProtected\u003d\u003dtrue",
      "range": {
        "startLine": 1327,
        "startChar": 0,
        "endLine": 1327,
        "endChar": 107
      },
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_87691c28",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1334,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-13T12:10:32Z",
      "side": 1,
      "message": "I forgot to comment on this yesterday, this is not only unnecessary but (in other context) could also be dangerous.\n\n0. the sheet ScTable this function operates on is already pDocument-\u003emaTabs[nTab], trying to obtain that again is unnecessary.\n\n1. pDocument-\u003emaTabs[nTab]-\u003e should be avoided anyway because without a previous check maTabs[nTab] is not guaranteed to exist. Well, it does here because we are on it, but..\n\n2. ScTable::aCol[rCol] is also not guaranteed to exist, the column may be \"virtual\" (i.e. not physically existing because no data/attribution yet, which is a future feature, but we are preparing). Though in this context an existing column is operated on.",
      "range": {
        "startLine": 1334,
        "startChar": 29,
        "endLine": 1334,
        "endChar": 65
      },
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_e7601838",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1335,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-13T12:10:32Z",
      "side": 1,
      "message": "3. accessing private member ScColumn::pAttrArray is ugly and only possible because ScTable is friend for some reason, which should not be extended.\n\nIn other words, better implement a new function at ScColumn, something like\n\n bool GetProtectedRowSpan( SCROW\u0026 rStartRow, SCROW\u0026 rEndRow, SCROW nRow ) const;\n\nto obtain the first and last protected row of a range pointed into, returning false if nRow is not protected. See ScColumn::GetUnprotectedCells() for how to query the ScPatternAttr for the protection attribute.",
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_48b73086",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1335,
      "author": {
        "id": 1001086
      },
      "writtenOn": "2018-02-16T20:57:10Z",
      "side": 1,
      "message": "I have an incorrect range what function ScAttrArray::GetPatternRange returns. For example, http://bugs.documentfoundation.org/attachment.cgi?id\u003d84291\nIf you put cursor to I6 and press Enter, you see that function GetPatternRange return StartRow \u003d 2 and EndRow \u003d 14, but form this https://opengrok.libreoffice.org/xref/core/sc/inc/attarray.hxx#126 It should be StartRow \u003d 6 and EndRow \u003d 7.\nAnd I try to solve this problem now.\nIf I have to return a range with a loop, checking each line, then this was already implemented in the first patch. I can return to him and bring him to order. The idea was that there should be an opportunity to avoid checking cell protected in a loop and thereby increase the speed.",
      "parentUuid": "fa31d9ce_e7601838",
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_fab7c3f2",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1335,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-22T14:56:31Z",
      "side": 1,
      "message": "I see where the problem with that bug attachment doc is, the unprotected cells have style \u0027saisie\u0027 applied and protection is applied via conditional formatting with styles \u0027gris\u0027 and \u0027grisclair\u0027. So all this gets more complicated and evaluating only the ScPatternAttr isn\u0027t sufficient.",
      "parentUuid": "fa31d9ce_48b73086",
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_a7e8e011",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1373,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-12T20:46:23Z",
      "side": 1,
      "message": "Nitpick: for better readability to indicate this loop is actually doing something but has no body, better write it as\n\n while (SkipRow( nCol, nRow, nMovY, rMark, bUp, bSheetProtected))\n     ;",
      "range": {
        "startLine": 1373,
        "startChar": 8,
        "endLine": 1373,
        "endChar": 75
      },
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa31d9ce_e73738ae",
        "filename": "sc/source/core/data/table1.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1398,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2018-02-12T20:46:23Z",
      "side": 1,
      "message": "Same here,\n\n while (...)\n    ;",
      "revId": "2c48644740cb1bbbb5dd2a884f548f8846599923",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}