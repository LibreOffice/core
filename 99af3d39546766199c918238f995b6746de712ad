{
  "comments": [
    {
      "key": {
        "uuid": "1a430d35_82eda38d",
        "filename": "tools/source/datetime/ttime.cxx",
        "patchSetId": 3
      },
      "lineNbr": 421,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-09-11T08:22:41Z",
      "side": 1,
      "message": "looks unused?",
      "revId": "99af3d39546766199c918238f995b6746de712ad",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_07cb8054",
        "filename": "tools/source/datetime/ttime.cxx",
        "patchSetId": 3
      },
      "lineNbr": 421,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2017-09-14T12:46:21Z",
      "side": 1,
      "message": "Removed",
      "parentUuid": "1a430d35_82eda38d",
      "revId": "99af3d39546766199c918238f995b6746de712ad",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_a2029f3c",
        "filename": "tools/source/datetime/ttime.cxx",
        "patchSetId": 3
      },
      "lineNbr": 423,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-09-11T08:22:41Z",
      "side": 1,
      "message": "probably better to combine USE_CLOCK_GETTIME and osl_time_t definitions with their single uses below?",
      "revId": "99af3d39546766199c918238f995b6746de712ad",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_67c28435",
        "filename": "tools/source/datetime/ttime.cxx",
        "patchSetId": 3
      },
      "lineNbr": 423,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2017-09-14T12:46:21Z",
      "side": 1,
      "message": "Merged",
      "parentUuid": "1a430d35_a2029f3c",
      "revId": "99af3d39546766199c918238f995b6746de712ad",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_c2ffab32",
        "filename": "tools/source/datetime/ttime.cxx",
        "patchSetId": 3
      },
      "lineNbr": 433,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-09-11T08:22:41Z",
      "side": 1,
      "message": "so GetMonotonicTicks appears not to be thread-safe on Windows (GetSystemTicks has presumably been assumed only to be called with SolarMutex locked?); could that be an issue with any of the places that call GetMonotonicTicks now?",
      "revId": "99af3d39546766199c918238f995b6746de712ad",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_e7b594cd",
        "filename": "tools/source/datetime/ttime.cxx",
        "patchSetId": 3
      },
      "lineNbr": 433,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2017-09-14T12:46:21Z",
      "side": 1,
      "message": "Why do you think it\u0027s not thread-safe?\n\nTo quote: https://msdn.microsoft.com/de-de/library/windows/desktop/dn553408(v\u003dvs.85).aspx\n\n\"In general, the performance counter results are consistent across all processors in multi-core and multi-processor systems, even when measured on different threads or processes.\"\n\nThe exceptions are all for OS \u003c Windows 7, or \"large server systems with multiple-clock domains\".\n\nAnd if we query QueryPerformanceFrequency twice - so be it. This codepath happens quite probably just once on startup.\n\nActually I think the timGetTime() codepath will never be used, as all HW running Windows 7 should have working TSC.",
      "parentUuid": "1a430d35_c2ffab32",
      "revId": "99af3d39546766199c918238f995b6746de712ad",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_a7170ca2",
        "filename": "tools/source/datetime/ttime.cxx",
        "patchSetId": 3
      },
      "lineNbr": 433,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-09-14T13:03:48Z",
      "side": 1,
      "message": "\"Why do you think it\u0027s not thread-safe?\"\n\nGetSystemTicks has always had a MT-issue wrt writing vs. reading nTicksPerSecond.  (And, in a sense, the new code here is even worse, as it sets bTicksPerSecondInitialized to true before initializing nTicksPerSecond.)",
      "parentUuid": "1a430d35_e7b594cd",
      "revId": "99af3d39546766199c918238f995b6746de712ad",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}