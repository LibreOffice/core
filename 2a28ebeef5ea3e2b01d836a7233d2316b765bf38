{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1b0cfcf5_c17d163c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-06-10T09:22:35Z",
      "side": 1,
      "message": "Sorry for being late.\n\nNot all of the following is directly related to this change, it\u0027s more like this was the trigger for doing some a11y tests of this (with master as of 089c91b1ad16232f130cb50266732509f83c52eb), also because Caol√°n mentioned tdf#140659 on the dev ml.\nSo please feel free to tell me to create separate tickets to keep track instead. :-)\n\n* The current way to send an ACTIVE_DESCENDANT_CHANGED event on mouse hover looks a bit problematic to me, more details in the inline comment.\n* Using Windows or kf5, when selecting an item using the keyboard, then pressing space key to activate it, this results in a crash (failed assert).\n* With gtk3, Orca still just announces \"Icon\" for each of the items (maybe would need change in a11y handling for GtkIconView as well?)",
      "revId": "2a28ebeef5ea3e2b01d836a7233d2316b765bf38",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c57a3fa9_4c746092",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-10T09:56:37Z",
      "side": 1,
      "message": "Thank you so much for the detailed explanation! Super helpful!\n\n\u003e Using Windows or kf5, when selecting an item using the keyboard, then pressing space key to activate it, this results in a crash (failed assert)\n\nhttps://gerrit.libreoffice.org/c/core/+/135582",
      "parentUuid": "1b0cfcf5_c17d163c",
      "revId": "2a28ebeef5ea3e2b01d836a7233d2316b765bf38",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd02badb_6aa060a6",
        "filename": "accessibility/source/extended/AccessibleIconView.cxx",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-06-10T09:22:35Z",
      "side": 1,
      "message": "As I understand it, this should not be needed to trigger announcement if everything else was working properly, and it\u0027s a bit problematic because ACTIVE_DESCENDANT_CHANGED events, similar to \"STATE_CHANGED: Focused\" events are mostly meant to notify of (keyboard) focus changes, which is different from what happens when hovering over an item using the mouse.\n\nAs a consequence, the user might mistakenly assume that the item that was hovered over has keyboard focus now, and pressing the space key would activate that one (but it doesn\u0027t, the key is handled at whatever place keyboard focus is, which might e.g. be another item in the view).\n\nOne way to see the difference between the two (focus object vs. mouse object) is e.g. by disabling mouse tracking in NVDA settings: \"Preferences\" -\u003e \"Settings...\" -\u003e Mouse\" -\u003e uncheck \"Enable mouse tracking\"\n\nAfter that, hovering with the mouse over e.g. toolbar items no longer causes them to be announced. The same is true for the items in Math\u0027s pane before those were switched to IconView, e.g. in 7.3. However, with this change in place, they are even announced when the option is disabled, which is IMHO incorrect.\n\nAnother way to see the difference is using NVDA\u0027s Python console ( https://www.nvaccess.org/files/nvda/documentation/developerGuide.html#PythonConsole ), which creates a kind of \"snapshot\" of the current state when pressing NVDA key (usually Keypad_Insert)+Ctrl+Z.\n\nSample scenario using 7.3 in math (now with mouse tracking enabled again, but should be the same otherwise):\n\n1) move keyboard focus to the first item (\"+ Sign +\") in Math\u0027s elements panel (start Math, press 5 x F6, then Tab) -\u003e NVDA announces that item\n2) move the mouse over the \"Division wideslash\" item\n3) press Keypad_Insert+Shift+Z to bring up NVDA\u0027s Python console\n4) check the element that has (keyboard) focus by typing in the Python console:\n\n\u003e\u003e\u003e focus.description\n\u0027+ Sign\u0027\n\n5) check the item that the mouse cursor is over (\"mouse object\"):\n\n\u003e\u003e\u003e mouse.description\n\u0027Division (wideslash)\u0027\n\n\n6) after the above steps in LO, pressing the space key would insert the \"+ Sign\", which is as expected, NVDA has reported focus for this as expected.\n\nBut with current master, step 4) would report focus for \"Division (wideslash)\", which is IMHO incorrect, since I suppose that pressing the space key is still meant to activate the other entry and insert a plus sign, just as it does in 7.3. (However, doing so runs into an assert here...)\n\nI have taken a look at the NVDA side why announcement of hovered-over items doesn\u0027t happen without this handling of the VclEventId::WindowMouseMove event here:\n\nUsing the Python console as described above shows that the item at the mouse position is still identified correctly (step 5), so there is \"just\" something that prevents NVDA from announcing it.\n\nDebugging into \"event_mouseMove\" in NVDA ( https://github.com/nvaccess/nvda/blob/47af401ab0f5b44bac0990589cc775845e4f955f/source/NVDAObjects/__init__.py#L1106 ) reveals that it runs into a `LookupError` (line 1120) when trying to generate a text representation of the a11y object (line 1116).\n\nThis is caused by the fact that NVDA tries to use the `IAccessibleText` interface ( https://accessibility.linuxfoundation.org/a11yspecs/ia2/docs/html/interface_i_accessible_text.html ) if an object implements that, and LO\u0027s `AccessibleListBoxEntry` does that (by implementing `XAccessibleText` which winaccessibility bridges to IAccessibleText), but then doesn\u0027t actually have any text (on screen) and thus the LookupError is raised when NVDA tries to find out what character the mouse cursor is over in NVDA\u0027s `IA2TextTextInfo#_getOffsetFromPoint` (implementation: https://github.com/nvaccess/nvda/blob/47af401ab0f5b44bac0990589cc775845e4f955f/source/NVDAObjects/IAccessible/__init__.py#L151 ; for our case, the `if self.obj.IAccessibleTextObject.nCharacters\u003e0` check fails because the text is empty).\n\nFor demo purposes, this works as desired with the following change in NVDA, which causes the IAccessibleTextInterface to be ignored and a working fallback to be used (NVDA generates it\u0027s own text representation, using the accessible description of the object instead of what it gets via the IAccessibleText interface):\n\n    diff --git a/source/appModules/soffice.py b/source/appModules/soffice.py\n    index 9a139e622..eb234ddaa 100755\n    --- a/source/appModules/soffice.py\n    +++ b/source/appModules/soffice.py\n    @@ -125,6 +125,10 @@ class SymphonyTextInfo(IA2TextTextInfo):\n\n                    return formatField,(startOffset,endOffset)\n\n    +       # DEMO: throw NotImplementedError, so this gets into working fallback instead of trying to get text representation via IAccessibleText interface^M\n    +       def _getOffsetFromPoint(self,x,y):^M\n    +                       raise NotImplementedError^M\n    +^M\n            def _getLineOffsets(self, offset):\n                    start, end \u003d super(SymphonyTextInfo, self)._getLineOffsets(offset)\n                    if offset \u003d\u003d 0 and start \u003d\u003d 0 and end \u003d\u003d 0:\n\n\nDoing this on NVDA side in general is not a good idea, since many times, IAccessibleTextInterface does provide useful information.\n\nIn a quick test with an unmodified NVDA, the item was also announced on mouse hovering as expected when dropping XAccessibleText as base class for AccessibleListBoxEntry on LO side (and dropping the extra handling to emit an ACTIVE_DESCENDANT_CHANGED event in AccessibleIconView::ProcessWindowEvent), s. below demo diff.\n\nOf course, this is also just meant as a demo.\n\nWhat would generally seem reasonable to me is to not expose IAccessibleText (i.e. not derive from XAccessibleTextInterface) for LO\u0027s a11y class unless it actually displays text on screen and can handle the interface\u0027s methods in a meaningful way.\n\n(But I know too little about IconView and whether it would be reasonable for it to have an a11y class that doesn\u0027t implement that interface - e.g. by splitting the current AccessibleListBoxEntry into a base class and more specific subclasses - or whether IconView items may involve text that is reasonably handled by the XAccessibleTextInterface methods in other scenarios. At a quick glance at `IconView::PaintEntry` there\u0027s at least *something* related to font color handling at least, but I didn\u0027t look any closer...)\n\n    diff --git a/accessibility/inc/extended/accessiblelistboxentry.hxx b/accessibility/inc/extended/accessiblelistboxentry.hxx\n    index 449803bc35b5..69197b17b687 100644\n    --- a/accessibility/inc/extended/accessiblelistboxentry.hxx\n    +++ b/accessibility/inc/extended/accessiblelistboxentry.hxx\n    @@ -30,7 +30,7 @@\n    #include \u003ccom/sun/star/accessibility/XAccessibleSelection.hpp\u003e\n    #include \u003ccom/sun/star/lang/XServiceInfo.hpp\u003e\n    #include \u003ccom/sun/star/accessibility/XAccessibleValue.hpp\u003e\n    -#include \u003ccppuhelper/compbase9.hxx\u003e\n    +#include \u003ccppuhelper/compbase8.hxx\u003e\n    #include \u003ccppuhelper/basemutex.hxx\u003e\n    #include \u003ccomphelper/accessibletexthelper.hxx\u003e\n    #include \u003cvcl/toolkit/treelistentry.hxx\u003e\n    @@ -54,13 +54,12 @@ namespace accessibility\n        class AccessibleListBox;\n\n    // class AccessibleListBoxEntry ------------------------------------------\n    -    typedef ::cppu::WeakAggComponentImplHelper9\u003c css::accessibility::XAccessible\n    +    typedef ::cppu::WeakAggComponentImplHelper8\u003c css::accessibility::XAccessible\n                                                    , css::accessibility::XAccessibleContext\n                                                    , css::accessibility::XAccessibleComponent\n                                                    , css::accessibility::XAccessibleEventBroadcaster\n                                                    , css::accessibility::XAccessibleAction\n                                                    , css::accessibility::XAccessibleSelection\n    -                                                , css::accessibility::XAccessibleText\n                                                    , css::accessibility::XAccessibleValue\n                                                    , css::lang::XServiceInfo \u003e AccessibleListBoxEntry_BASE;\n\n    @@ -164,25 +163,25 @@ namespace accessibility\n            virtual sal_Int32 SAL_CALL getForeground(  ) override;\n            virtual sal_Int32 SAL_CALL getBackground(  ) override;\n\n    -        // XAccessibleText\n    -        virtual sal_Int32 SAL_CALL getCaretPosition() override;\n    -        virtual sal_Bool SAL_CALL setCaretPosition( sal_Int32 nIndex ) override;\n    -        virtual sal_Unicode SAL_CALL getCharacter( sal_Int32 nIndex ) override;\n    -        virtual css::uno::Sequence\u003c css::beans::PropertyValue \u003e SAL_CALL getCharacterAttributes( sal_Int32 nIndex, const css::uno::Sequence\u003c OUString \u003e\u0026 aRequestedAttributes ) override;\n    -        virtual css::awt::Rectangle SAL_CALL getCharacterBounds( sal_Int32 nIndex ) override;\n    -        virtual sal_Int32 SAL_CALL getCharacterCount() override;\n    -        virtual sal_Int32 SAL_CALL getIndexAtPoint( const css::awt::Point\u0026 aPoint ) override;\n    -        virtual OUString SAL_CALL getSelectedText() override;\n    -        virtual sal_Int32 SAL_CALL getSelectionStart() override;\n    -        virtual sal_Int32 SAL_CALL getSelectionEnd() override;\n    -        virtual sal_Bool SAL_CALL setSelection( sal_Int32 nStartIndex, sal_Int32 nEndIndex ) override;\n    -        virtual OUString SAL_CALL getText() override;\n    -        virtual OUString SAL_CALL getTextRange( sal_Int32 nStartIndex, sal_Int32 nEndIndex ) override;\n    -        virtual css::accessibility::TextSegment SAL_CALL getTextAtIndex( sal_Int32 nIndex, sal_Int16 aTextType ) override;\n    -        virtual css::accessibility::TextSegment SAL_CALL getTextBeforeIndex( sal_Int32 nIndex, sal_Int16 aTextType ) override;\n    -        virtual css::accessibility::TextSegment SAL_CALL getTextBehindIndex( sal_Int32 nIndex, sal_Int16 aTextType ) override;\n    -        virtual sal_Bool SAL_CALL copyText( sal_Int32 nStartIndex, sal_Int32 nEndIndex ) override;\n    -        virtual sal_Bool SAL_CALL scrollSubstringTo( sal_Int32 nStartIndex, sal_Int32 nEndIndex, css::accessibility::AccessibleScrollType aScrollType) override;\n    +        // XAccessibleText, but not implemented now...\n    +        virtual sal_Int32 SAL_CALL getCaretPosition();\n    +        virtual sal_Bool SAL_CALL setCaretPosition( sal_Int32 nIndex );\n    +        virtual sal_Unicode SAL_CALL getCharacter( sal_Int32 nIndex );\n    +        virtual css::uno::Sequence\u003c css::beans::PropertyValue \u003e SAL_CALL getCharacterAttributes( sal_Int32 nIndex, const css::uno::Sequence\u003c OUString \u003e\u0026 aRequestedAttributes );\n    +        virtual css::awt::Rectangle SAL_CALL getCharacterBounds( sal_Int32 nIndex ) ;\n    +        virtual sal_Int32 SAL_CALL getCharacterCount() ;\n    +        virtual sal_Int32 SAL_CALL getIndexAtPoint( const css::awt::Point\u0026 aPoint ) ;\n    +        virtual OUString SAL_CALL getSelectedText() ;\n    +        virtual sal_Int32 SAL_CALL getSelectionStart() ;\n    +        virtual sal_Int32 SAL_CALL getSelectionEnd() ;\n    +        virtual sal_Bool SAL_CALL setSelection( sal_Int32 nStartIndex, sal_Int32 nEndIndex ) ;\n    +        virtual OUString SAL_CALL getText() ;\n    +        virtual OUString SAL_CALL getTextRange( sal_Int32 nStartIndex, sal_Int32 nEndIndex ) ;\n    +        virtual css::accessibility::TextSegment SAL_CALL getTextAtIndex( sal_Int32 nIndex, sal_Int16 aTextType ) ;\n    +        virtual css::accessibility::TextSegment SAL_CALL getTextBeforeIndex( sal_Int32 nIndex, sal_Int16 aTextType ) ;\n    +        virtual css::accessibility::TextSegment SAL_CALL getTextBehindIndex( sal_Int32 nIndex, sal_Int16 aTextType ) ;\n    +        virtual sal_Bool SAL_CALL copyText( sal_Int32 nStartIndex, sal_Int32 nEndIndex ) ;\n    +        virtual sal_Bool SAL_CALL scrollSubstringTo( sal_Int32 nStartIndex, sal_Int32 nEndIndex, css::accessibility::AccessibleScrollType aScrollType) ;\n\n            // XAccessibleEventBroadcaster\n            virtual void SAL_CALL addAccessibleEventListener( const css::uno::Reference\u003c css::accessibility::XAccessibleEventListener \u003e\u0026 xListener ) override;\n    diff --git a/accessibility/source/extended/AccessibleIconView.cxx b/accessibility/source/extended/AccessibleIconView.cxx\n    index 6bc5c99e9243..7faf11b08060 100644\n    --- a/accessibility/source/extended/AccessibleIconView.cxx\n    +++ b/accessibility/source/extended/AccessibleIconView.cxx\n    @@ -32,6 +32,7 @@ void AccessibleIconView::ProcessWindowEvent(const VclWindowEvent\u0026 rVclWindowEven\n\n        switch (rVclWindowEvent.GetId())\n        {\n    +    /*\n            case VclEventId::WindowMouseMove:\n                if (MouseEvent* pMouseEvt \u003d static_cast\u003cMouseEvent*\u003e(rVclWindowEvent.GetData()))\n                {\n    @@ -44,6 +45,7 @@ void AccessibleIconView::ProcessWindowEvent(const VclWindowEvent\u0026 rVclWindowEven\n                    }\n                }\n                break;\n    +            */\n            default:\n                AccessibleListBox::ProcessWindowEvent(rVclWindowEvent);\n        }",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 46,
        "endChar": 18
      },
      "revId": "2a28ebeef5ea3e2b01d836a7233d2316b765bf38",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1d57f43_04e8dc76",
        "filename": "accessibility/source/extended/AccessibleIconView.cxx",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-10T09:56:37Z",
      "side": 1,
      "message": "This makes perfect sense - I will try to fix this.",
      "parentUuid": "bd02badb_6aa060a6",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 46,
        "endChar": 18
      },
      "revId": "2a28ebeef5ea3e2b01d836a7233d2316b765bf38",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}