{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6154b9bd_888bcc8b",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1595,
      "author": {
        "id": 1003535
      },
      "writtenOn": "2022-02-23T14:22:29Z",
      "side": 1,
      "message": "After debugging, I have found only a minor difference for the test svl_urihelper.\nThere is some capitalization issue. Instead of \"C:\\\\\" there is \"c:\\\\\". This is the case for only the last line of tests.\nhttps://imgur.com/u9DtGTk",
      "range": {
        "startLine": 1595,
        "startChar": 0,
        "endLine": 1595,
        "endChar": 49
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42e4aca4_e7d31e2c",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1595,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-02-25T07:42:07Z",
      "side": 1,
      "message": "Please now add some comment there in the introduced code, that would describe where we rely on this drive letter case. Have you checked why svl_urihelper test checks that, and where does the uppercase in its counterpart value comes from?",
      "parentUuid": "6154b9bd_888bcc8b",
      "range": {
        "startLine": 1595,
        "startChar": 0,
        "endLine": 1595,
        "endChar": 49
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ae26ff7_1108da65",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1595,
      "author": {
        "id": 1003535
      },
      "writtenOn": "2022-02-25T08:36:05Z",
      "side": 1,
      "message": "From file_url.cxx (w32)\n```\n/* File specification can\u0027t be removed therefore the short path is either a drive\nor a network share. If still levels to skip are left, the path specification\ntries to travel below the file system root */\nif (nSkipLevels)\n    lpszPath[0] \u003d 0;\nelse\n    _wcsupr(lpszPath);\n```\n\nI belive svl_urihelper test case checks for a case related to presence of drive in the url. and that drive being the common part. (as compared to the next case). \n\nShould this comment be okay\n```\n/* Capitalizes drive names, GetLongPathW doesn\u0027t do it by default, eg: c:\\\\ -\u003e C:\\\\ */\n```",
      "parentUuid": "42e4aca4_e7d31e2c",
      "range": {
        "startLine": 1595,
        "startChar": 0,
        "endLine": 1595,
        "endChar": 49
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "995715c7_2d48ea54",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1595,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-02-25T09:20:20Z",
      "side": 1,
      "message": "Yes, _wcsupr did that for us; but the nice comment that you suggest *needs* to be amended *why* do we need it uppercase. Please check e.g. what osl_getDirectoryItem does for PATHTYPE_VOLUME case, which is where the uppercase for drive comes from in the compared string. So we need to refer to that code, and also to the URIHelper::normalizedMakeRelative, which is (one of the functions that) rely on drives being uniformly uppercase.",
      "parentUuid": "2ae26ff7_1108da65",
      "range": {
        "startLine": 1595,
        "startChar": 0,
        "endLine": 1595,
        "endChar": 49
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdb96778_086c87fc",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1595,
      "author": {
        "id": 1003535
      },
      "writtenOn": "2022-02-27T03:43:18Z",
      "side": 1,
      "message": "I did some more debugging and found some points\n\n1. What if we remove functionality of GetLongPathW/GetCaseCorrectPath\n```\nosl::FileBase::RC nError2 \u003d aDirItem.getFileStatus( aFileStatus );\nif( nError1 \u003d\u003d osl::FileBase::E_None \u0026\u0026\n    nError2 !\u003d osl::FileBase::E_None )\n    installError(CommandId,\n                    TASKHANDLING_OPEN_FILE_FOR_PAGING, // BEAWARE, REUSED\n                    nError2);\n```\n\nThis basically remove GetLongPathW func osl_getFileStatus. Now all the path checking will go through osl_getDirectoryItem. All the svl_urihelper tests run for small c. \n\n2. However these testc do not run\n```\n\"file:///c:/nonex1/nonex2\", \"file:///C:/nonex1/nonex3/nonex4\"\n\"file:///C:/windows/nonex1\", \"file:///c:/nonex2\"\n```\nBecause they include drive name. which osl_getDirectoryItem tries to capatalize but there might be a bug where capatalization doesnt commit to the uniquepath var. \n\n3. However capatalization always happens in\n```\nosl::FileBase::RC nError2 \u003d aDirItem.getFileStatus( aFileStatus );\n```\nWhen we call getFileStatus i.e. osl_getFileStatus and GetLongPathW/GetCaseCorrectPath\n\n4. Ultimately the paths are going to be compared by function in test file\n```\nref-\u003egetUriReference().equalsAscii(tests[i].relative\n```\nWhich distinguishes between upper and lower case\n\n\n```\n/* Capitalizes drive names(single letter), Because it is not done by getLongPathW by default as compared to getCaseCorrectPath. This is to prevent differences caused by equal but different case drive letters (eg: c:\\\\ and C:\\\\) */\n```",
      "parentUuid": "995715c7_2d48ea54",
      "range": {
        "startLine": 1595,
        "startChar": 0,
        "endLine": 1595,
        "endChar": 49
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fa0dfbd_5174e8a8",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1595,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-03-01T06:09:41Z",
      "side": 1,
      "message": "I might misunderstand the idea here; it would be best if you create a patch set implementing the idea. We could then discuss it at the code (since here in the comment, I do not easily see the places and their interrelations).\n\nJust to rule out one possible source of confusion: we can\u0027t use any home-grown case-insensitive comparison to mimic what Windows does, because Windows implements its Unicode case-insensitive operation using own case match table burnt into the filesystem; and that means that e.g. case-insensitive match on one drive might be different from another drive on the same system.\n\nhttp://archives.miloush.net/michkap/archive/2005/01/16/353873.html\nhttp://archives.miloush.net/michkap/archive/2005/10/17/481600.html\n\nWhat we do here is getting the real case of filenames from Windows (so that we can later do normal case-sensitive match); the only problem is correct case of  drive, which is not handled by GetLongPathW.\n\nBut again - it would be very interesting if you see a simplification/unification of the processing that would reduce code duplication, if I understand your idea correctly.",
      "parentUuid": "cdb96778_086c87fc",
      "range": {
        "startLine": 1595,
        "startChar": 0,
        "endLine": 1595,
        "endChar": 49
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe4e4055_ccdb5014",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1595,
      "author": {
        "id": 1003535
      },
      "writtenOn": "2022-03-03T02:14:29Z",
      "side": 1,
      "message": "Thanks for clarifying my doubt, I understand the code better now and I think what is implemented is very precise. I just added some comments.",
      "parentUuid": "2fa0dfbd_5174e8a8",
      "range": {
        "startLine": 1595,
        "startChar": 0,
        "endLine": 1595,
        "endChar": 49
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba48f202_ad02e58e",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1595,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-03-04T16:01:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe4e4055_ccdb5014",
      "range": {
        "startLine": 1595,
        "startChar": 0,
        "endLine": 1595,
        "endChar": 49
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0d082f7_51040dee",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1598,
      "author": {
        "id": 1003535
      },
      "writtenOn": "2022-02-23T14:22:29Z",
      "side": 1,
      "message": "This is quick fix solution for this issue. I am sure there would be better ways of doing this. I am not completely sure of other changes between the functions. In my machine basic_macros_test is not passing, could it be related to this code?",
      "range": {
        "startLine": 1598,
        "startChar": 0,
        "endLine": 1598,
        "endChar": 13
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb0b4420_b34f18de",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1598,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-02-23T14:47:41Z",
      "side": 1,
      "message": "\u003e I am sure there would be better ways of doing this\n\nPlease change the character right in the buffer, using std::find, and rtl::rtl::toAsciiUpperCase.\n\n\u003e could it be related to this code?\n\nNo idea - needs debugging.",
      "parentUuid": "b0d082f7_51040dee",
      "range": {
        "startLine": 1598,
        "startChar": 0,
        "endLine": 1598,
        "endChar": 13
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0947dc9a_0f7070c0",
        "filename": "sal/osl/w32/file_dirvol.cxx",
        "patchSetId": 5
      },
      "lineNbr": 1598,
      "author": {
        "id": 1003535
      },
      "writtenOn": "2022-02-25T08:36:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb0b4420_b34f18de",
      "range": {
        "startLine": 1598,
        "startChar": 0,
        "endLine": 1598,
        "endChar": 13
      },
      "revId": "1680081ac08b9e27fbc595ac7376e6cca9c1877b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}