#!/bin/sh

# Output a list of all our (static) libraries, to be used when
# building the single executable or single dynamic object that is used
# in an LO-based iOS or Android app. (All our libraries and bundled
# 3rd-party ones are built as static archives for these platforms.)

# This script is to be run once a full "make" for iOS or Android has
# otherwise completed, when just building the actual apps is left.

if test -z "$INSTDIR" ; then
    echo This script should be invoked only in a build.
    exit 1
fi

if test "$OS" != ANDROID -a "$OS" != IOS; then
    echo This script makes sense only in Android or iOS builds.
fi

foolibs=
for var in EBOOK_LIBS FREEHAND_LIBS HARFBUZZ_LIBS HUNSPELL_LIBS HYPHEN_LIB MYTHES_LIBS; do
    dirs=
    libs=
    for i in `eval echo '$'$var`; do
	case "$i" in
	-L*) dirs="$dirs ${i#-L}";;
        -l*) libs="$libs ${i#-l}";;
	esac
    done
    for l in $libs; do
	for d in $dirs; do
	    test -f $d/lib$l.a && foolibs="$foolibs $d/lib$l.a"
	done
    done
done

case $OS in
ANDROID)
    oslibs="$WORKDIR/UnpackedTarball/curl/lib/.libs/*.a"
    oslibs="$oslibs $WORKDIR/UnpackedTarball/fontconfig/src/.libs/libfontconfig.a"
    oslibs="$oslibs $WORKDIR/UnpackedTarball/freetype/objs/.libs/libfreetype.a"
    oslibs="$oslibs $WORKDIR/UnpackedTarball/pixman/pixman/.libs/libpixman-1.a"
    oslibs="$oslibs $WORKDIR/UnpackedTarball/cairo/src/.libs/libcairo.a"
    # Only liblo-bootstrap.a ends up here:
    oslibs="$oslibs $WORKDIR/LinkTarget/Library/lib*.a"
    ;;
IOS)
    oslibs="$WORKDIR/UnpackedTarball/icu/source/stubdata/*.a"
    ;;
*)
    oslibs=
    ;;
esac

echo $INSTDIR/$LIBO_LIB_FOLDER/lib*.a \
     $foolibs \
     $WORKDIR/LinkTarget/StaticLibrary/lib*.a \
     $oslibs \
     $WORKDIR/UnpackedTarball/coinmp/Cbc/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/coinmp/Cgl/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/coinmp/Clp/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/coinmp/Clp/src/OsiClp/.libs/*.a \
     $WORKDIR/UnpackedTarball/coinmp/CoinMP/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/coinmp/CoinUtils/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/coinmp/Osi/src/Osi/.libs/*.a \
     $WORKDIR/UnpackedTarball/glew/lib/*.a \
     $WORKDIR/UnpackedTarball/icu/source/lib/*.a \
     $WORKDIR/UnpackedTarball/lcms2/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/libabw/src/lib/.libs/*.a \
     $WORKDIR/UnpackedTarball/libcdr/src/lib/.libs/*.a \
     $WORKDIR/UnpackedTarball/libmspub/src/lib/.libs/*.a \
     $WORKDIR/UnpackedTarball/libmwaw/src/lib/.libs/*.a \
     $WORKDIR/UnpackedTarball/libodfgen/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/liborcus/src/*/.libs/*.a \
     $WORKDIR/UnpackedTarball/libvisio/src/lib/.libs/*.a \
     $WORKDIR/UnpackedTarball/libwp?/src/lib/.libs/*.a \
     $WORKDIR/UnpackedTarball/openssl/*.a \
     $WORKDIR/UnpackedTarball/raptor/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/rasqal/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/redland/src/.libs/*.a \
     $WORKDIR/UnpackedTarball/xml2/.libs/*.a \
     $WORKDIR/UnpackedTarball/xslt/libxslt/.libs/*.a
