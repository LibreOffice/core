#! /usr/bin/env python3
# -*- Mode: python; tab-width: 4; indent-tabs-mode: t -*-
#
# This file is part of the LibreOffice project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import re
import sys

class GbuildParserState:
    def __init__(self):
        self.include = []
        self.defs = []
        self.cxxobjects = []
        self.linked_libs = []

class GbuildLinkTarget:
    def __init__(self, name, location, include, defs, cxxobjects, linked_libs):
        (self.name, self.location, self.include, self.defs, self.cxxobjects, self.linked_libs) = (name, location, include, defs, cxxobjects, linked_libs)

class GbuildLib(GbuildLinkTarget):
    def __init__(self, name, location, include, defs, cxxobjects, linked_libs):
        GbuildLinkTarget.__init__(self, name, location, include, defs, cxxobjects, linked_libs)
    def __str__(self):
        return 'Library %s at %s with include path: %s, defines %s, objects: %s and linked libs: %s' % (self.name, self.location, self.include, self.defs, self.cxxobjects, self.linked_libs)

class GbuildExe(GbuildLinkTarget):
    def __init__(self, name, location, include, defs, cxxobjects, linked_libs):
        GbuildLinkTarget.__init__(self, name, location, include, defs, cxxobjects, linked_libs)
    def __str__(self):
        return 'Executable %s at %s with include path: %s, defines %s, objects: %s and linked libs: %s' % (self.name, self.location, self.include, self.defs, self.cxxobjects, self.linked_libs)

class GbuildParser:
    libpattern = re.compile('#  commands to execute \(from `(.*)/Library_(.*)\.mk\', line [0-9]*\):')
    exepattern = re.compile('#  commands to execute \(from `(.*)/Executable_(.*)\.mk\', line [0-9]*\):')
    includepattern = re.compile('# INCLUDE := (.*)')
    defspattern = re.compile('# DEFS := (.*)')
    cxxpattern = re.compile('# CXXOBJECTS := (.*)')
    linkedlibspattern = re.compile('# LINKED_LIBS := (.*)')
    def __init__(self):
        self.libs = []
        self.exes = []
    def parse(self, gbuildstate):
        state = GbuildParserState()
        for line in gbuildstate:
            if not line.startswith('#'):
                state = GbuildParserState()
                continue
            libmatch = GbuildParser.libpattern.match(line)
            if libmatch:
                self.libs.append(GbuildLib(libmatch.group(2), libmatch.group(1), state.include, state.defs, state.cxxobjects, state.linked_libs))
                state = GbuildParserState()
                continue
            exematch = GbuildParser.exepattern.match(line)
            if exematch:
                self.exes.append(GbuildExe(exematch.group(2), exematch.group(1), state.include, state.defs, state.cxxobjects, state.linked_libs))
                state = GbuildParserState()
                continue
            includematch = GbuildParser.includepattern.match(line)
            if includematch:
                state.include = [includeswitch.strip()[2:] for includeswitch in includematch.group(1).split(' ') if len(includeswitch) > 2]
                continue
            defsmatch = GbuildParser.defspattern.match(line)
            if defsmatch:
                state.defs = [defswitch.strip()[2:] for defswitch in defsmatch.group(1).split(' ') if len(defswitch) >2]
                continue
            cxxmatch = GbuildParser.cxxpattern.match(line)
            if cxxmatch:
                state.cxxobjects = [obj for obj in cxxmatch.group(1).split(' ') if len(obj) > 0]
                continue
            linkedlibsmatch = GbuildParser.linkedlibspattern.match(line)
            if linkedlibsmatch:
                state.linked_libs = linkedlibsmatch.group(1).strip().split(' ')
                continue
            #we could match a lot of other stuff here if needed for integration rpaths etc.
        return self

if __name__ == '__main__':
    paths = {}
    for lib in GbuildParser().parse(sys.stdin).libs:
        print(lib)
    for exe in GbuildParser().parse(sys.stdin).exes:
        print(exe)
    #    for cxx in lib.cxxobjects:
    #        path = '/'.join(cxx.split('/')[:-1])
    #        paths[path] = lib.include
    #for path in paths:
    #    print('Path %s has include: %s' % (path, paths[path]))

# vim: set noet sw=4 ts=4:
