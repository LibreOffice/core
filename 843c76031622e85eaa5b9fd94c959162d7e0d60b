{
  "comments": [
    {
      "key": {
        "uuid": "37ab8ae8_3e551602",
        "filename": "include/sal/log.hxx",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-07-02T09:21:23Z",
      "side": 1,
      "message": "I would prefer to change the return type to some three-state enum instead, no/yes/fatal",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "094057b6_90588d1b",
        "filename": "include/sal/log.hxx",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2020-07-02T12:28:36Z",
      "side": 1,
      "message": "Can I use a \n\nenum {\n    Ignore \u003d 0,\n    Log,\n    Fail\n}\nLogAction;\n\nas a result, or might that lead to problems (additional UNO types ore somesuch). Just wondering, because it\u0027s a SAL_CALL...",
      "parentUuid": "37ab8ae8_3e551602",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33f9a4f9_5974bb44",
        "filename": "include/sal/log.hxx",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-07-02T12:50:44Z",
      "side": 1,
      "message": "Thinking about it, we should not change sal_detail_log_report incompatibly, as external code may call it indirectly e.g. via the SAL_INFO_IF in osl::FileStatus::getFileType in include/osl/file.hxx.  So it should return an enum type with a fixed underlying type of `unsigned char` (i.e., the same type that is the guaranteed actual type of sal_Bool), and compatible semantics.  And keeping with the spirit of using C types in extern \"C\" function signatures as much as possible (i.e., modulo fixing the underlying type with a C++-only enum-base), I would use something similar to sal_detail_LogLevel in include/sal/detail/log.h, like\n\n  enum sal_detail_LogReport: unsigned char { SAL_DETAIL_LOG_REPORT_IGNORE, SAL_DETAIL_LOG_REPORT_LOG, SAL_DETAIL_LOG_REPORT_FATAL };",
      "parentUuid": "094057b6_90588d1b",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f503f09f_43151f1a",
        "filename": "include/sal/log.hxx",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2020-07-02T13:49:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33f9a4f9_5974bb44",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e9f8307_7b10faf9",
        "filename": "sal/osl/all/log.cxx",
        "patchSetId": 4
      },
      "lineNbr": 386,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-07-02T09:21:23Z",
      "side": 1,
      "message": "Would it be cleaner to have a single non-array\n\n  bool positiveSenseIsFatal \u003d false;\n\nthat is only updated below when sense \u003d\u003d POSITIVE?",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c25a9f9_13956778",
        "filename": "sal/osl/all/log.cxx",
        "patchSetId": 4
      },
      "lineNbr": 386,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2020-07-02T12:17:45Z",
      "side": 1,
      "message": "\u003e Would it be cleaner to have a single non-array\n\nJust stating the obvious: the current way, we can just updated the value like the senseLen array and don\u0027t need the additional tests. I found this looked simpler and preferred this implementation in the end, but this feels like bike-shedding, as I don\u0027t have any strong point.\n\nSince you wrote the comment as a question: if you don\u0027t think the single-value solution is cleaner yourself, I would just keep the current implementation.",
      "parentUuid": "8e9f8307_7b10faf9",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08f95871_426c65be",
        "filename": "sal/osl/all/log.cxx",
        "patchSetId": 4
      },
      "lineNbr": 386,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-07-02T12:22:33Z",
      "side": 1,
      "message": "I stumbled when I saw the odd \"half initialization\" of\n\n  { false, }\n\nBut yeah, whatever way you prefer is OK.",
      "parentUuid": "9c25a9f9_13956778",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42a2b8e9_9f2551da",
        "filename": "sal/osl/all/log.cxx",
        "patchSetId": 4
      },
      "lineNbr": 386,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2020-07-02T12:41:31Z",
      "side": 1,
      "message": "\u003e I stumbled when I saw the odd \"half initialization\"\n\nSeems I just learned that I was taught something wrong at the university C++ class?\n\nI always assumed \"{ value, }\" (with an explicit comma at the init list) would init all array members to that value. But now searching for this pattern, I can\u0027t find any mentioning of that fact looking for array init patterns (like http://www.cplusplus.com/doc/tutorial/arrays/). Better to explicitly init the 2nd value too, even if we probably never use it.",
      "parentUuid": "08f95871_426c65be",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bba6ec59_726ed696",
        "filename": "sal/osl/all/log.cxx",
        "patchSetId": 4
      },
      "lineNbr": 386,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-07-02T13:05:31Z",
      "side": 1,
      "message": "The trailing comma is entirely redundant.  \"Excess\" elements (for which there are no initializers provided) are initialized according to [dcl.init.aggr]/8, which for the second element of the two-element bool array here boils down to zero-initialization (i.e., false).\n\nBut as the second element\u0027s initial value is irrelevant as it is never used (in fact, the second element\u0027s value is never used, as it is only written to but never read, see my initial argument about cleanliness, which you dismissed), the \", \u003cnothing\u003e\" syntax happens to fit here to---somewhat subtly and maybe head-scratching-inducingly, but sill---indicate that its actual initial value is irrelevant.",
      "parentUuid": "42a2b8e9_9f2551da",
      "revId": "843c76031622e85eaa5b9fd94c959162d7e0d60b",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}