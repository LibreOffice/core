{
  "comments": [
    {
      "key": {
        "uuid": "8c91552b_f96123af",
        "filename": "filter/source/svg/svgexport.cxx",
        "patchSetId": 3
      },
      "lineNbr": 611,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-10-04T09:54:33Z",
      "side": 1,
      "message": "I\u0027m unsure if this is OK here, or should I introduce a catch for Exception\u0026, or just skip this?",
      "range": {
        "startLine": 611,
        "startChar": 20,
        "endLine": 611,
        "endChar": 40
      },
      "revId": "b4af0d3a7d6aadde6712939cd17a22cea72f6903",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6bbd6f2_61ee50fd",
        "filename": "filter/source/svg/svgexport.cxx",
        "patchSetId": 3
      },
      "lineNbr": 611,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2020-10-04T12:23:30Z",
      "side": 1,
      "message": "TOOLS_WARN_EXCEPTION will do the right thing for any of the UNO exception classes, but won\u0027t print anything useful for std::exception derived types, and I\u0027m not sure if that is even possible there because we transport the exception data in a css::uno::Any class.\n\nSo, this change is definitely an improvement, but if you want the ultimate in exception printing, we need to split the cases into\n  * UNO\n  * std::exception\n  * everything else",
      "parentUuid": "8c91552b_f96123af",
      "range": {
        "startLine": 611,
        "startChar": 20,
        "endLine": 611,
        "endChar": 40
      },
      "revId": "b4af0d3a7d6aadde6712939cd17a22cea72f6903",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8ee9f03_1eb26b83",
        "filename": "filter/source/svg/svgexport.cxx",
        "patchSetId": 3
      },
      "lineNbr": 611,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-10-04T12:29:01Z",
      "side": 1,
      "message": "Thanks! So would this \"work\", but without any information for anything other than UNO exceptions? If so, can we possibly use std::current_exception for everything else inside the macro (or implementing method), and make the necessary additional output there (like \"if dynamic_cast to std::exception, then output exceptionptr-\u003ewhat, else output \u0027unknown exception\u0027\")?",
      "parentUuid": "d6bbd6f2_61ee50fd",
      "range": {
        "startLine": 611,
        "startChar": 20,
        "endLine": 611,
        "endChar": 40
      },
      "revId": "b4af0d3a7d6aadde6712939cd17a22cea72f6903",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f72394f5_74abd7ab",
        "filename": "filter/source/svg/svgexport.cxx",
        "patchSetId": 3
      },
      "lineNbr": 611,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2020-10-05T06:40:15Z",
      "side": 1,
      "message": "That sounds like a good idea, although there are some gotchas lurking there.\n\nFor example, you can\u0027t call dynamic_cast in such a situation if there is a UNO exception in play because the dynamic_cast will SIGSEGV because the UNO bridge does not build proper RTTI tables.\n\nSo you have to check for an UNO exception first, then fall back to dynamic_cast.",
      "parentUuid": "b8ee9f03_1eb26b83",
      "range": {
        "startLine": 611,
        "startChar": 20,
        "endLine": 611,
        "endChar": 40
      },
      "revId": "b4af0d3a7d6aadde6712939cd17a22cea72f6903",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}