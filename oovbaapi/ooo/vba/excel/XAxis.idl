/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __ooo_vba_excel_XAxis_idl__
#define __ooo_vba_excel_XAxis_idl__

#include <com/sun/star/script/BasicErrorException.idl>
#include <ooo/vba/XHelperInterface.idl>

module ooo {  module vba { module excel {
interface XAxisTitle;
interface XAxis
{
    interface ::ooo::vba::XHelperInterface;

    void Delete()
        raises(com::sun::star::script::BasicErrorException);

    XAxisTitle getAxisTitle()
        raises(com::sun::star::script::BasicErrorException);

    void setDisplayUnit([in] long DisplayUnit)
        raises(com::sun::star::script::BasicErrorException);

    long getDisplayUnit()
        raises(com::sun::star::script::BasicErrorException);

    void setCrosses([in] long Crosses)
        raises(com::sun::star::script::BasicErrorException);

    long getCrosses()
        raises(com::sun::star::script::BasicErrorException);

    void setCrossesAt([in] double CrossesAt)
        raises(com::sun::star::script::BasicErrorException);

    double getCrossesAt()
        raises(com::sun::star::script::BasicErrorException);

    void setType([in] long Type)
        raises(com::sun::star::script::BasicErrorException);

    long getType()
        raises(com::sun::star::script::BasicErrorException);

    void setHasTitle([in] boolean HasTitle)
        raises(com::sun::star::script::BasicErrorException);

    boolean getHasTitle()
        raises(com::sun::star::script::BasicErrorException);

    void setMinorUnit([in] double MinorUnit)
        raises(com::sun::star::script::BasicErrorException);

    double getMinorUnit()
        raises(com::sun::star::script::BasicErrorException);

    void setMinorUnitIsAuto([in] boolean MinorUnitIsAuto)
        raises(com::sun::star::script::BasicErrorException);

    boolean getMinorUnitIsAuto()
        raises(com::sun::star::script::BasicErrorException);

    void setReversePlotOrder([in] boolean ReversePlotOrder)
        raises(com::sun::star::script::BasicErrorException);

    boolean getReversePlotOrder()
        raises(com::sun::star::script::BasicErrorException);

    void setMajorUnit([in] double MajorUnit)
        raises(com::sun::star::script::BasicErrorException);

    double getMajorUnit()
        raises(com::sun::star::script::BasicErrorException);

    void setMajorUnitIsAuto([in] boolean MajorUnitIsAuto)
        raises(com::sun::star::script::BasicErrorException);

    boolean getMajorUnitIsAuto()
        raises(com::sun::star::script::BasicErrorException);

    void setMaximumScale([in] double MaximumScale)
        raises(com::sun::star::script::BasicErrorException);

    double getMaximumScale()
        raises(com::sun::star::script::BasicErrorException);

    void setMaximumScaleIsAuto([in] boolean MaximumScaleIsAuto)
        raises(com::sun::star::script::BasicErrorException);

    boolean getMaximumScaleIsAuto()
        raises(com::sun::star::script::BasicErrorException);

    void setMinimumScale([in] double MinimumScale)
        raises(com::sun::star::script::BasicErrorException);

    double getMinimumScale()
        raises(com::sun::star::script::BasicErrorException);

    void setMinimumScaleIsAuto([in] boolean MinimumScaleIsAuto)
        raises(com::sun::star::script::BasicErrorException);

    boolean getMinimumScaleIsAuto()
        raises(com::sun::star::script::BasicErrorException);

    long getAxisGroup();

    void setScaleType([in] long ScaleType)
        raises(com::sun::star::script::BasicErrorException);

    long getScaleType()
        raises(com::sun::star::script::BasicErrorException);

    double getHeight()
        raises (com::sun::star::script::BasicErrorException);

    void setHeight([in] /* double */ double height)
        raises(com::sun::star::script::BasicErrorException);

    double getWidth()
        raises (com::sun::star::script::BasicErrorException);

    void setWidth([in] /* double */ double width)
        raises(com::sun::star::script::BasicErrorException);

    double getTop()
        raises (com::sun::star::script::BasicErrorException);

    void setTop([in] /* double */ double top)
        raises (com::sun::star::script::BasicErrorException);

    double getLeft()
        raises (com::sun::star::script::BasicErrorException);

    void setLeft([in] /* double */ double left)
        raises (com::sun::star::script::BasicErrorException);


    //    XBorder       getBorder( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setMinorGridlines( [in] XGridlines MinorGridlines ) raises ( com::sun::star::script::BasicErrorException );

    // XGridlines       getMinorGridlines( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setMinorTickMark( [in] long MinorTickMark ) raises ( com::sun::star::script::BasicErrorException );

    // long     getMinorTickMark( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setTickLabelPosition( [in] long TickLabelPosition ) raises ( com::sun::star::script::BasicErrorException );

    // long     getTickLabelPosition( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setTickLabels( [in] XTickLabels TickLabels ) raises ( com::sun::star::script::BasicErrorException );

    // XTickLabels      getTickLabels( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setTickLabelSpacing( [in] long TickLabelSpacing ) raises ( com::sun::star::script::BasicErrorException );

    // long     getTickLabelSpacing( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setTickMarkSpacing( [in] long TickMarkSpacing ) raises ( com::sun::star::script::BasicErrorException );

    // long     getTickMarkSpacing( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setMajorGridlines( [in] XGridlines MajorGridlines ) raises ( com::sun::star::script::BasicErrorException );

    // XGridlines       getMajorGridlines( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setMajorTickMark( [in] long MajorTickMark ) raises ( com::sun::star::script::BasicErrorException );

    // long     getMajorTickMark( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setBaseUnit( [in] long BaseUnit ) raises ( com::sun::star::script::BasicErrorException );

    // long     getBaseUnit( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setBaseUnitIsAuto( [in] boolean BaseUnitIsAuto ) raises ( com::sun::star::script::BasicErrorException );

    // boolean      getBaseUnitIsAuto( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setMajorUnitScale( [in] long MajorUnitScale ) raises ( com::sun::star::script::BasicErrorException );

    // long     getMajorUnitScale( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setMinorUnitScale( [in] long MinorUnitScale ) raises ( com::sun::star::script::BasicErrorException );

    // long     getMinorUnitScale( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setCategoryType( [in] long CategoryType ) raises ( com::sun::star::script::BasicErrorException );

    // long     getCategoryType( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setHasMajorGridlines( [in] boolean HasMajorGridlines ) raises ( com::sun::star::script::BasicErrorException );

    // boolean      getHasMajorGridlines( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setHasMinorGridlines( [in] boolean HasMinorGridlines ) raises ( com::sun::star::script::BasicErrorException );

    // boolean      getHasMinorGridlines( ) raises ( com::sun::star::script::BasicErrorException );

    // void         setCategoryNames( [in] any CategoryNames ) raises ( com::sun::star::script::BasicErrorException );

    // any          getCategoryNames( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setDisplayUnitCustom( [in] double DisplayUnitCustom ) raises ( com::sun::star::script::BasicErrorException );

    // double       getDisplayUnitCustom( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setHasDisplayUnitLabel( [in] boolean HasDisplayUnitLabel ) raises ( com::sun::star::script::BasicErrorException );

    // boolean      getHasDisplayUnitLabel( ) raises ( com::sun::star::script::BasicErrorException );

    // void     setDisplayUnitLabel( [in] XDisplayUnitLabel DisplayUnitLabel ) raises ( com::sun::star::script::BasicErrorException );

    // XDisplayUnitLabel        getDisplayUnitLabel( ) raises ( com::sun::star::script::BasicErrorException );

    // any          Select(  ) raises ( com::sun::star::script::BasicErrorException );

    // void     setAxisBetweenCategories( [in] boolean AxisBetweenCategories ) raises ( com::sun::star::script::BasicErrorException );

    // boolean      getAxisBetweenCategories( ) raises ( com::sun::star::script::BasicErrorException );


};

}; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
