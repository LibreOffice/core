{
  "comments": [
    {
      "key": {
        "uuid": "0d9b1636_93ada8dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-18T11:02:25Z",
      "side": 1,
      "message": "From LO crashreports:\nSSE2: 100%\nAVX: ~80%\nAVX2: ~64%\nAVX512F: ~4.5%\n\nSo removing SSE2 means ~20%.",
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b35c92c3_2f3f75f2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-05-18T13:59:59Z",
      "side": 1,
      "message": "Can you tell me where can I find those statistics, please?\nI\u0027d like to take a look to SSE4.2.",
      "parentUuid": "0d9b1636_93ada8dd",
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edf6fe85_b1d28cab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-18T18:01:32Z",
      "side": 1,
      "message": "I analyzed the data myself and I haven\u0027t posted them publicly anywhere. But the rest of the data, in addition to what I wrote above, is:\nSSSE3: 98.5%\nSSE4.x: 97.5% (I don\u0027t remember if I measured 4.1 or 4.2, but there should be little difference)\nF16C: 74%\nFMA: 66%\nThis is from statistics generated by LO versions released this year, data collected for roughly a month, about 20k reports IIRC.",
      "parentUuid": "b35c92c3_2f3f75f2",
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "501e5a2c_2144d5cf",
        "filename": "include/tools/cpuid.hxx",
        "patchSetId": 15
      },
      "lineNbr": 83,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-18T11:02:25Z",
      "side": 1,
      "message": "Since AVX512 is a group of several instruction sets, I think it\u0027d be better to add the \u0027F\u0027 to the function name. Especially given that the comment for it says \u0027D\u0027 by mistake.",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 21
      },
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f24f00d_96200ed1",
        "filename": "sc/Library_sc.mk",
        "patchSetId": 15
      },
      "lineNbr": 102,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-18T11:02:25Z",
      "side": 1,
      "message": "We have $(CXXFLAGS_INTRINSICS_XXX) flags, set up by configure.ac , please us those. If you need only 512F, you can copy-paste and split a specific check just for that.",
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54a40c78_94f3c136",
        "filename": "sc/source/core/tool/arraysum.cxx",
        "patchSetId": 15
      },
      "lineNbr": 248,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-18T11:02:25Z",
      "side": 1,
      "message": "This is not how to do code that conditionally executes based on different instruction sets. The file is compiled with AVX512F, so this may crash on any CPU that doesn\u0027t have AVX512F. The proper way to do this is to have a generic file that contains this function, and then have xxx_AVX.cxx etc. files that are compiled with relevant CPU flags and all code in it is executed only after the generic code detects that the CPU feature is available. See how the current code handles conditional use of SSE2.",
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "464e6da3_ed510266",
        "filename": "sc/source/core/tool/arraysum.cxx",
        "patchSetId": 15
      },
      "lineNbr": 248,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-05-18T13:59:59Z",
      "side": 1,
      "message": "Sorry, I donÂ´t get it. Can you explain it in more detail?\nMy code already checks out if AVX is available before attempting it\u0027s use.\nThe difference between this and the already existent is that the existent code generates an empty function if there is no AVX on compile time.\nSo what am I missing?",
      "parentUuid": "54a40c78_94f3c136",
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f28f3573_1b0ec617",
        "filename": "sc/source/core/tool/arraysum.cxx",
        "patchSetId": 15
      },
      "lineNbr": 248,
      "author": {
        "id": 1000130
      },
      "writtenOn": "2021-05-18T15:53:48Z",
      "side": 1,
      "message": "compile time !\u003d runtime.\n\nYou can compile on newer systems where you get the stuff but run on an older one. (In fact, that is the normal situation, given you can\u0027t even assume SSE2 on i386 systems.).",
      "parentUuid": "464e6da3_ed510266",
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b28352f_4113202d",
        "filename": "sc/source/core/tool/arraysum.cxx",
        "patchSetId": 15
      },
      "lineNbr": 248,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-05-18T18:01:32Z",
      "side": 1,
      "message": "If you compile a source with -mavx, that means the compiler can use AVX for code generation too. So even body of executeFast() may possibly require AVX if the compiler decides to use it, and thus crash while trying to find out whether AVX is available.\nYou can also look at external/skia for a different way of handling this, for external/skia/source/skia_opts*. But simply said, just create one \"normal\" file for generic code, then one file for each instruction set, and protect calls to CPU-specific code by checks in the generic file.",
      "parentUuid": "f28f3573_1b0ec617",
      "revId": "c06cb3249acc06ca6c68df7b5a528a8a21d3e92d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}