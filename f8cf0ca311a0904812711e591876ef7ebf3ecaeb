{
  "comments": [
    {
      "key": {
        "uuid": "dab17558_7a69888b",
        "filename": "ucb/source/ucp/webdav-neon/NeonLockStore.cxx",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2015-11-30T09:06:54Z",
      "side": 1,
      "message": "it would probably be better if LO could gracefully handle ne_lockstore_create failures",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_ba993022",
        "filename": "ucb/source/ucp/webdav-neon/NeonLockStore.cxx",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1001050
      },
      "writtenOn": "2015-11-30T15:46:44Z",
      "side": 1,
      "message": "Good point.\nThe NeonLockStore code currently doesn\u0027t handle the m_pNeonLockStore to guard for a NULL pointer.\n\nI\u0027ll think of a way to check that, though this means that in case of wrong initialization the lock functionality would not work.\n\nSo here instead of assert a SAL_WARN_IF would be better.\n\nBut what would be best in the release version?\n\nI think that alerting the user would be the right idea, for example fail the lock with something \"Lock not available: LO internal error\" ?\n\nOr what else?\n\nIn the end: write additional code in a separate patch to address the NULL m_pNeonLockStore pointer situation.\nA patch to be proposed together with this one.",
      "parentUuid": "dab17558_7a69888b",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_dd8eae26",
        "filename": "ucb/source/ucp/webdav-neon/NeonLockStore.cxx",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1001050
      },
      "writtenOn": "2015-12-01T14:46:35Z",
      "side": 1,
      "message": "Before starting to write code to handle the NULL pointer situation, I had a look to neon implementation of ne_lockstore_create().\n\nIt isn\u0027t good. Neon calls abort() when it can\u0027t allocate memory, hence ne_lockstore_create() will never return NULL.\n\nThis code from build tree, can explain why I gathered this conclusion:\n\nlibreoffice/workdir/UnpackedTarball/neon/src/ne_alloc.h:40\n\n#ifndef NEON_MEMLEAK\n/* Replacements for standard C library memory allocation functions,\n * which never return NULL. If the C library malloc() returns NULL,\n * neon will abort(); calling an OOM callback beforehand if one is\n * registered.  The C library will only ever return NULL if the\n * operating system does not use optimistic memory allocation. */\nvoid *ne_malloc(size_t size) ne_attribute_malloc;\nvoid *ne_calloc(size_t size) ne_attribute_malloc;\nvoid *ne_realloc(void *ptr, size_t s);\nchar *ne_strdup(const char *s) ne_attribute_malloc;\nchar *ne_strndup(const char *s, size_t n) ne_attribute_malloc;\n#ifdef WIN32\nvoid ne_free(void *ptr);\n#else\n#define ne_free free\n#endif\n#endif\n\nne_attribute_malloc expands to __attribute__((malloc)) or nothing, depending on the compiler used.\n\nNEON_MEMLEAK can\u0027t be declared during LO build, because it enables functions not meant for application use (stated elsewhere in the neon source tree).\n\nThe OOM callback can be implemented, but what should it do?\nIt can\u0027t return since neon will abort() anyway.\n\nabort() will be called by neon internals every time a memory allocation fails.\n\nNot a good situation.",
      "parentUuid": "dab17558_ba993022",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_5dcabe50",
        "filename": "ucb/source/ucp/webdav-neon/NeonLockStore.cxx",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2015-12-01T15:22:36Z",
      "side": 1,
      "message": "I see.  I don\u0027t know much about neon, so wasn\u0027t aware ne_lockstore_create cannot return indicating failure (but was wrongly made to believe so by the OSL_ENSURE verifying the return value).  In which case it would probably be best to rely on ne_lockstore_create working as advertised [1], and not bother to OSL_ENSURE or assert the return value at all.\n\n[1]  I see the general \"neon does not attempt to cope gracefully with an out-of-memory situation; instead, by default, the abort function is called to immediately terminate the process. An application may register a custom function which will be called before abort in such a situation; see ne_oom_callback.\" at \u003chttp://www.webdav.org/neon/doc/html/refneon.html\u003e.  I don\u0027t find any specific documentation for ne_lockstore_create at all.",
      "parentUuid": "dab17558_dd8eae26",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_bde12ad3",
        "filename": "ucb/source/ucp/webdav-neon/NeonLockStore.cxx",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1001050
      },
      "writtenOn": "2015-12-01T15:47:43Z",
      "side": 1,
      "message": "I\u0027ll remove OSL_ENSURE, leaving in place some comment about the why, e.g. \"neon does not attempt to cope...\".",
      "parentUuid": "dab17558_5dcabe50",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_da04f4c7",
        "filename": "ucb/source/ucp/webdav-neon/NeonLockStore.cxx",
        "patchSetId": 5
      },
      "lineNbr": 103,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2015-11-30T09:06:54Z",
      "side": 1,
      "message": "this doesn\u0027t make sense; if it is a programming error for m_aLockInfoMap to be non-empty here (i.e.,the assert is OK). then the following code of iterating over m_aLockInfoMap is not OK",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_faa3b84d",
        "filename": "ucb/source/ucp/webdav-neon/NeonLockStore.cxx",
        "patchSetId": 5
      },
      "lineNbr": 103,
      "author": {
        "id": 1001050
      },
      "writtenOn": "2015-11-30T15:46:44Z",
      "side": 1,
      "message": "My fault: SAL_WARN_IF it\u0027s better, since the following code deals with the situation either way, both empty or not empty.",
      "parentUuid": "dab17558_da04f4c7",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_ba0930e0",
        "filename": "ucb/source/ucp/webdav-neon/NeonPropFindRequest.cxx",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2015-11-30T09:06:54Z",
      "side": 1,
      "message": "this assert looks dubious, esp. given UCBDeadPropertyValue::createFromXML returns bool to indicate success (so it is apparently assumed it can fail; esp. as ne_xml_create can presumably fail?)",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dab17558_7a9068ed",
        "filename": "ucb/source/ucp/webdav-neon/NeonPropFindRequest.cxx",
        "patchSetId": 5
      },
      "lineNbr": 124,
      "author": {
        "id": 1001050
      },
      "writtenOn": "2015-11-30T15:46:44Z",
      "side": 1,
      "message": "Yes it can fail and in release build nothing should happen.\n\nThis is part of the \u0027WebDAV Dead Property\u0027 management I didn\u0027t fully explore.\nThey are the properties created and maintained by the client (LO); currently LO doesn\u0027t use that capability.\n\nBetter a SAL_WARN_IF here.",
      "parentUuid": "dab17558_ba0930e0",
      "revId": "f8cf0ca311a0904812711e591876ef7ebf3ecaeb",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}