{
  "comments": [
    {
      "key": {
        "uuid": "fedc36bd_aeba3123",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-02-08T07:29:31Z",
      "side": 1,
      "message": "please give a rationale for each of these three data members why sal_Int32 would be the appropriate type",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1be2a2bc_58ad17c1",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1002961
      },
      "writtenOn": "2021-02-16T13:13:43Z",
      "side": 1,
      "message": "Sir\nFirst I found the locations where usage of intPtr seemed inappropriate. int32 was chosen as it was the only one which did not lead to warnings using `make check`",
      "parentUuid": "fedc36bd_aeba3123",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f6a5bfd_8a6be1e4",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-02-16T13:30:40Z",
      "side": 1,
      "message": "But e.g. mnLastSort is assigned via\n\n  mnLastSort \u003d maS2O.Count();\n\nin SortedResultSet::CopyData (ucb/source/sorter/sortresult.cxx), where the right hand side is of type sal_uInt32.  Why would sal_Int32 be a better choice than sal_uInt32?  What failed if you tried sal_uInt32?\n\n(And please do not call anybody \"sir\" around here.)",
      "parentUuid": "1be2a2bc_58ad17c1",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd001c19_f7810160",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1002961
      },
      "writtenOn": "2021-02-16T17:18:32Z",
      "side": 1,
      "message": "I thought signed int would permit negative entries. I was sure that index won\u0027t ever be negative, but had doubts about mnCount. I\u0027ll update them to unsigned.\nEdit: The build fails when they are updated to unsigned",
      "parentUuid": "6f6a5bfd_8a6be1e4",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f33d8e2a_3d36a9f1",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2021-02-18T10:45:41Z",
      "side": 1,
      "message": "imho the code in this class should use sal_Int32 for indexes and sizes consistently because it looks like it\u0027s exposed via UNO, see for example call to\n\n                     pCurSet-\u003eRemove( aAction.Position,\n                                     aAction.Count,\n                                     \u0026maActions );\n\n in sortdynres.cxx which ends up comparing IDL ListAction.Position \"long\" with mnLastSort",
      "parentUuid": "fd001c19_f7810160",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e2aff0b_5558882f",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-02-08T07:29:31Z",
      "side": 1,
      "message": "if mnCount is of type sal_Int32, why would size_t be the most-appropriate return type here?",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "080cfb89_6e995c91",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1002961
      },
      "writtenOn": "2021-02-16T13:13:43Z",
      "side": 1,
      "message": "Resolved this in an update",
      "parentUuid": "6e2aff0b_5558882f",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dad8678b_d6787afd",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-02-08T07:29:31Z",
      "side": 1,
      "message": "please give a rationale why size_t would be an appropriate type for the nOldCount parameter",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adad39c1_347d3359",
        "filename": "ucb/source/sorter/sortresult.hxx",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1002961
      },
      "writtenOn": "2021-02-16T13:13:43Z",
      "side": 1,
      "message": "Resolved this in an update",
      "parentUuid": "dad8678b_d6787afd",
      "revId": "f9874669893a51a684dc10ad8f74882e51d87e51",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}