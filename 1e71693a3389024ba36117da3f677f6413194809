{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bfed1779_404bab5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-02-21T05:24:05Z",
      "side": 1,
      "message": "Thanks for the clarification.",
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95fd5e18_335b398f",
        "filename": "vcl/source/gdi/pdfwriter_impl.cxx",
        "patchSetId": 10
      },
      "lineNbr": 3297,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-02-20T10:54:32Z",
      "side": 1,
      "message": "IMO the problem here is \"if there is no protocol\" detection; it should simply detect the https: protocol at this stage, and avoid processing. Maybe use some \"local path to file URI\" to detect when you may actually make it relative?",
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "331d1690_82597fec",
        "filename": "vcl/source/gdi/pdfwriter_impl.cxx",
        "patchSetId": 10
      },
      "lineNbr": 3297,
      "author": {
        "id": 1002778
      },
      "writtenOn": "2022-02-20T14:21:01Z",
      "side": 1,
      "message": "Hi Mike,\n  Right; so I didn\u0027t want to specify \u0027https\u0027 - I wanted to avoid messing up any URI they might have;  if you look back at the 1st version in here I was using a regex to detect the URI, but Stephan pointed out in the comment on Nov 15 that convertRelToAbs effectively does that detect and the modification in one go, simplifying the existing code.",
      "parentUuid": "95fd5e18_335b398f",
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ebbde99_069e6b95",
        "filename": "vcl/source/gdi/pdfwriter_impl.cxx",
        "patchSetId": 10
      },
      "lineNbr": 3298,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-02-21T14:14:31Z",
      "side": 1,
      "message": "That rtl::Uri::convertRelToAbs is \"more forgiving\" than the INetURLObject constructor is not relevant here, when all that is done with the result of rtl::Uri::convertRelToAbs is to pass it into the INetURLObject constructor anyway.  (See my other comment below for what I think I thought using rtl::Uri::convertRelToAbs here should actually be useful for.)",
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7d86d8a_e6418676",
        "filename": "vcl/source/gdi/pdfwriter_impl.cxx",
        "patchSetId": 10
      },
      "lineNbr": 3298,
      "author": {
        "id": 1002778
      },
      "writtenOn": "2022-02-27T02:15:01Z",
      "side": 1,
      "message": "Well what I meant was it does manage to do the rel-\u003eabs conversion on more things than INetURLObject and does manage to store more url-like things; perhaps it\u0027s worth spelling that out more; actually uri.cxx\u0027s parseUriRef has a good line: \u0027This algorithm is liberal and accepts various forms of illegal input.\u0027",
      "parentUuid": "1ebbde99_069e6b95",
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a6f652f_c0dbeab2",
        "filename": "vcl/source/gdi/pdfwriter_impl.cxx",
        "patchSetId": 10
      },
      "lineNbr": 3298,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-03-01T14:01:37Z",
      "side": 1,
      "message": "\"manage to do the rel-\u003eabs conversion on more things\":  but which is not the main concern here, at least for the motivating \u003chttp://user:password@domain\u003e already-absolute URI issue from tdf#143216\n\n\"manage to store more url-like things\":  which, as I argued, is irrelevant here as those don\u0027t survive the surrounding INetURLObject aNewURL constructor, anyway\n\nthus, I think the comment causes more confusion than clarification, and I would just remove it completely",
      "parentUuid": "e7d86d8a_e6418676",
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b60900_da041f83",
        "filename": "vcl/source/gdi/pdfwriter_impl.cxx",
        "patchSetId": 10
      },
      "lineNbr": 3422,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-02-21T14:14:31Z",
      "side": 1,
      "message": "* So when bUnparsedURI is set to true above, any subsequent modifications of aTargetURL (.setExtension(...), .SetMark(...)) are \"lost\" here, when we just use the original url.  I think that with my original mention of rtl::Uri::convertRelToAbs back in November, I had hoped that we could get rid of aTargetURL as an INetURLObject here, and use the OUString result of rtl::Uri::convertRelToAbs directly in the following code, without turning it into an INetURLObject (which \"damages\" the given URI if it does not match INetURLObject\u0027s idea of what a valid URI should look like).  But it might be a bit hard to replace all that INetURLObject-based querying and modifying (.GetProtocol(), .GetFileExtension(), .hasFinalSlash(), .setExtension(...), .GetMark(...), .GetURLNoMark(...), .SetMark(...)) with functionality based on rtl::Uri and/or UNO\u0027s css.uri stuff.  :(\n\n* I would add a space between \"url\" and \":\".",
      "range": {
        "startLine": 3422,
        "startChar": 36,
        "endLine": 3422,
        "endChar": 54
      },
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "811d5c42_092b0957",
        "filename": "vcl/source/gdi/pdfwriter_impl.cxx",
        "patchSetId": 10
      },
      "lineNbr": 3422,
      "author": {
        "id": 1002778
      },
      "writtenOn": "2022-02-27T02:15:01Z",
      "side": 1,
      "message": "Space added between the url and :.\nOh, I thought you just meant that as a replacement for my hacky regexp - which I think it is still a step better than that (and possibly what we had before).\nIt\u0027s a shame rtl::Uri doesn\u0027t expose it\u0027s parseUriRef and Components, since those would get it part way.",
      "parentUuid": "d5b60900_da041f83",
      "range": {
        "startLine": 3422,
        "startChar": 36,
        "endLine": 3422,
        "endChar": 54
      },
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f5d2a8b_d6b76c8d",
        "filename": "vcl/source/gdi/pdfwriter_impl.cxx",
        "patchSetId": 10
      },
      "lineNbr": 3422,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-03-01T14:01:37Z",
      "side": 1,
      "message": "\u003e Oh, I thought you just meant that as a replacement for my hacky regexp - which I think it is still a step better than that (and possibly what we had before).\n\u003e It\u0027s a shame rtl::Uri doesn\u0027t expose it\u0027s parseUriRef and Components, since those would get it part way.\n\nThe functionality available through the css::uri::UriReferenceFactory UNO service does, but would still only get us part-way.  So yeah, probably best to leave it at this for now.",
      "parentUuid": "811d5c42_092b0957",
      "range": {
        "startLine": 3422,
        "startChar": 36,
        "endLine": 3422,
        "endChar": 54
      },
      "revId": "1e71693a3389024ba36117da3f677f6413194809",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}