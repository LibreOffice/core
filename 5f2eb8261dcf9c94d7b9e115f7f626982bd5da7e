{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e177bd11_d72806a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000043
      },
      "writtenOn": "2022-03-10T09:22:33Z",
      "side": 1,
      "message": "Thank you for the update, it seems more reasonable now.",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae9064dd_0ae133fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001318
      },
      "writtenOn": "2022-03-11T12:46:59Z",
      "side": 1,
      "message": "LGTM, though not an expert. Hossein, would you please have a look.",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07310a55_3beb14ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002951
      },
      "writtenOn": "2022-03-14T09:03:12Z",
      "side": 1,
      "message": "The focus is now changed, but is this meant to fix the actual bug, and read the content of \"Not in dictionary\"? Which screen reader do you use?\nI don\u0027t get the desired output with the default screen reader of GNOME, and the gtk3 UI. On the other hand, without this fix, by changing the focus manually I can hear appropriate message when the related text box gets focus.",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65d201e6_ba145120",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003550
      },
      "writtenOn": "2022-03-15T23:57:41Z",
      "side": 1,
      "message": "Since I focused only on the last problem statement for the EasyHack, it slipped my mind to check the main problem of accessibility with the screen reader at all. However, if the focus is being changed, it should definitely be detected by the screen reader too. I will check enabling the default one t check too, in the meantime, could you guide me to the code pointer that would be there for detection by the screen reader?",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23898fbb_05a498e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002951
      },
      "writtenOn": "2022-03-16T05:12:48Z",
      "side": 1,
      "message": "I am not expert in the screen readers and accessibility in general. Maybe Michael Weghorn can help. I\u0027ve added him as cc here.\nOn the other hand, my point is that you should test your submissions to make sure that it actually fixes the bug. In other words, the main goal of you should be bug fix. Thus, the first step should be reproducing the bug, and then trying to develop a solution to fix that. I suggest that you use GNOME and Orca to reproduce the bug, and test your solution against it.",
      "parentUuid": "65d201e6_ba145120",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b810dd0c_64306d8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001613
      },
      "writtenOn": "2022-03-16T14:45:03Z",
      "side": 1,
      "message": "Caol√°n gave a tip for a related task, if you are interested: https://bugs.documentfoundation.org/show_bug.cgi?id\u003d102044",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52c2c76e_abff199e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-03-16T15:46:11Z",
      "side": 1,
      "message": "The change itself looks good to me.\nThe commit currently uses \"sarrah-basta\" as author name, while it\u0027s usual to use the real name is usally used. If you want to change that, you can use\n\ngit config --global user.name \"Your Name\"\n\nto do so globally, or without that \u0027--global\u0027 option to set the author name only for the current git repo; then\n\ngit commit --amend --reset-author\n\n\n\nIn my understanding, setting the focus properly should usually already be enough for Orca to announce this. \nI\u0027ve spent some time trying to understand why it doesn\u0027t work here yet, but still haven\u0027t understood it fully. For some reason, Orca doesn\u0027t seem to have the focus set to the sentence edit window despite the call to \"GrabFocus\", as becomes obvious e.g. when using Orca\u0027s \"Where Am I?\" command (pressing KP_Enter with the default desktop keyboard layout), s. https://help.gnome.org/users/orca/stable/commands_where_am_i.html.en . It is correctly set as focused after typing sth or after focusing the element using the tab key.\n\nInterestingly, it works just fine for the buttons that were focused by default previously (i.e. without this change).\n\nWhen using NVDA on Windows instead, it\u0027s also announced just fine.\n\nSpellDialog has some custom focus handling, s. e.g. SpellDialog::ToplevelFocusChanged, which *might* be related. Otherwise, this might be something on a lower level (VCL and/or Gtk) and might require a closer look into what Orca and/or Gtk do. I\u0027ll post an update in case I see anything obvious there...",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cc38f10_a3273083",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-03-17T17:32:53Z",
      "side": 1,
      "message": "\u003e Otherwise, this might be something on a lower level (VCL and/or Gtk) and might require a closer look into what Orca and/or Gtk do. I\u0027ll post an update in case I see anything obvious there...\n\nTurns out that (at least) 2 accessible objects are relevant here: One for the drawing area, and one for the paragraph that holds the text. From a11y perspective, the latter is a child of the former.\nWith this change here in place, the drawing area gets the initial focus, as it should be. But the a11y object for the paragraph does not exist yet, so no focus event for it is being sent. Therefore, Orca doesn\u0027t know it\u0027s focused and doesn\u0027t announce it.\n\nSome relevant classes are `WeldEditView` (which is the base class for `SentenceEditWindow_Impl`, used for the `m_xSentenceED`) and the a11y implementation in `WeldEditAccessible`, and `GtkInstanceDrawingArea` in the gtk3-specific code.\n\nUnfortunately, the a11y object is only properly initialized when it\u0027s already too late. I don\u0027t yet see a proper way to fix that. (But I could at least confirm my findings so far by commenting out some code locally and adding hacks to verify that Orca actually announces it as desired then...)",
      "parentUuid": "52c2c76e_abff199e",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fa08527_7faa51c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003550
      },
      "writtenOn": "2022-03-18T08:38:30Z",
      "side": 1,
      "message": "Alright, this clears up quite some things for me, thanks a lot! It makes sense too that the focus is only given to the drawing area and not the paragraph as both calls isEnabled and GrabFocus are related to that. \n\nA question that I have, if you say the a11y object for the paragragh doesn\u0027t exist yet, what function call is normally made when the focus goes to the drawing area manually, i.e when Orca announces it just fine?\n\nAlso, just out of curiosity, what does \u0027the a11y object is only properly initializd when it\u0027s already too late\u0027 mean?",
      "parentUuid": "5cc38f10_a3273083",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c7b8597_9034c1f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-03-18T09:32:00Z",
      "side": 1,
      "message": "\u003e It makes sense too that the focus is only given to the drawing area and not the paragraph as both calls isEnabled and GrabFocus are related to that.\n\nYes, but in the \"good\" case, the WeldEditView that holds the drawing area takes care of announcing focus for the paragraph as well, s. below.\n\n\u003e A question that I have, if you say the a11y object for the paragragh doesn\u0027t exist yet, what function call is normally made when the focus goes to the drawing area manually, i.e when Orca announces it just fine?\n\nOne way to see what\u0027s happening is to set a breakpoint in `WeldEditView::GetFocus`, so you will see from where that is called and can step through the code in the debugger to see what happens then.\n(Side note: I usually used rr to record one run of doing that, and then replay this for debugging in gdb, which rules out any timing-specific behaviour and also allows to reverse-debug.)\n\nThe way that `WeldEditView::GetFocus` is called from within the Gtk library differs between the cases where `GrabFocus` is called (this change) and where focus is set e.g. by using the tab key (or switching focus to another window, then back to the LO dialog).\n\n\u003e Also, just out of curiosity, what does \u0027the a11y object is only properly initialized when it\u0027s already too late\u0027 mean?\n\nThat essentially means the same as \"But the a11y object for the paragraph does not exist yet, so no focus event for it is being sent.\"\n\nStarting from a breakpoint in `WeldEditView::GetFocus`, you can see that by then setting a breakpoint (or stepping until there) until you end up here:\n\n\u003e 1  accessibility::AccessibleParaManager::MemFunAdapter\u003cshort const\u003e::operator() AccessibleParaManager.hxx 233  0x7ffff642767d \n\u003e 2  accessibility::AccessibleParaManager::SetState                               AccessibleParaManager.cxx 254  0x7ffff64250c1 \n\u003e 3  accessibility::AccessibleParaManager::SetFocus                               AccessibleParaManager.cxx 222  0x7ffff6424e5e \n\u003e 4  accessibility::AccessibleTextHelper_Impl::SetChildFocus                      AccessibleTextHelper.cxx  365  0x7ffff38c99d1 \n\u003e 5  accessibility::AccessibleTextHelper_Impl::SetFocus                           AccessibleTextHelper.cxx  452  0x7ffff38ca50a \n\u003e 6  accessibility::AccessibleTextHelper::SetFocus                                AccessibleTextHelper.cxx  1578 0x7ffff38ce8bf \n\u003e 7  WeldEditView::GetFocus                                                       weldeditview.cxx          1622 0x7ffff3aa4153 \n\u003e 8  weld::CustomWeld::DoGetFocus                                                 customweld.cxx            72   0x7fffef6d4f03 \n\u003e 9  weld::CustomWeld::LinkStubDoGetFocus                                         customweld.cxx            72   0x7fffef6d4ed3 \n\u003e 10 Link\u003cweld::Widget\u0026, void\u003e::Call                                              link.hxx                  111  0x7fffe46651dd \n\u003e 11 (anonymous namespace)::GtkInstanceWidget::signal_focus_in                    gtkinst.cxx               2534 0x7fffe45e541f \n\u003e [...]                                                                                                                          \n\n\nThe `if( aHardRef.is() )` check will be `true` for the \"good case\" (an a11y object for the paragraph/child exists -\u003e focus event is being sent) and `false` for the bad case (no a11y object for the paragraph exists yet -\u003e no event is sent).\n\nI have submitted a WIP/demo change at https://gerrit.libreoffice.org/c/core/+/131731 that causes the children for the drawing area to be created earlier, and with that and your change in place, focus is announced as desired.\n\nHowever, that change is not meant to be submitted as is. I plan to take a closer look at how lifecycle for a11y objects in the gtk3 VCL plugin is supposed to work, then hopefully come up with a proper change. (I\u0027ll probably do that once I get back to tdf#87680, where the situation is somewhat similar.),\n\nFor now, that demo change can be used to test this change (and possibly tdf#102044 as well, if you\u0027re interested in working on that.)\n\nMy suggestion would be to handle the issue that the demo change addresses separately (maybe create a new Bugzilla issue for that), and not block this change because of that.\n\nIn my opinion, this change here is ready to be merged once the question wrt author name is clear. üòä",
      "parentUuid": "7fa08527_7faa51c1",
      "revId": "5f2eb8261dcf9c94d7b9e115f7f626982bd5da7e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}