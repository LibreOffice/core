{
  "comments": [
    {
      "key": {
        "uuid": "560e5c72_d73d70ec",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1278,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "These functions that are only used once in respective sorts are better implemented as lambdas in place of their use",
      "range": {
        "startLine": 1278,
        "startChar": 12,
        "endLine": 1278,
        "endChar": 35
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a13c851_42a4ce6f",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1280,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T09:49:28Z",
      "side": 1,
      "message": "This simple comparison might not be appropriate for a natural order of used languages. Take a look at how sorting is implemented for ImplEntryList::InsertEntry in vcl/source/control/imp_listbox.cxx.",
      "range": {
        "startLine": 1280,
        "startChar": 11,
        "endLine": 1280,
        "endChar": 46
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd5ee9e0_21919220",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1280,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "If I use that sort function, I think I can\u0027t use lambdas, because the function is too long. Am I right?",
      "parentUuid": "8a13c851_42a4ce6f",
      "range": {
        "startLine": 1280,
        "startChar": 11,
        "endLine": 1280,
        "endChar": 46
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32443228_6abc9159",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1280,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T20:25:10Z",
      "side": 1,
      "message": "Well - that depends. The longest part there is the initialization of static theSorter, which uses an obsolete (\u003dpre-thread-safe-statics C++) rtl::StaticWithInit idiom. You may introduce the sorter somewhere in the module like this:\n\n    namespace {\n    const auto\u0026 GetSorter()\n    {\n        static const auto aSorter \u003d comphelper::string::NaturalStringSorter(\n                ::comphelper::getProcessComponentContext(),\n                Application::GetSettings().GetLanguageTag().getLocale());\n        return aSorter;\n    }\n    } // unnamed namespace\n\n... and then use `return GetSorter().compare()` in your lambdas.\n\nThat would, of course, need to introduce that local function in both CXX files here, because you compare strings in both, but I don\u0027t think that\u0027s a problem. I\u0027m not sure it\u0027s OK to introduce a static in a lambda - but you are welcome to try and use it there if that\u0027s OK (and is not some implementation-dependent behaviour or UB) - then you wouldn\u0027t need even a single function, and will only add 1 line to the lambdas comparing strings (1 in each CXX).",
      "parentUuid": "bd5ee9e0_21919220",
      "range": {
        "startLine": 1280,
        "startChar": 11,
        "endLine": 1280,
        "endChar": 46
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5647b7fe_ed2cb108",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1310,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "This typedef is only ever used in one (next) line, so is not actually needed. Please drop it and just use full type in the vector below.",
      "range": {
        "startLine": 1310,
        "startChar": 4,
        "endLine": 1310,
        "endChar": 48
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82575beb_787d3918",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1310,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5647b7fe_ed2cb108",
      "range": {
        "startLine": 1310,
        "startChar": 4,
        "endLine": 1310,
        "endChar": 48
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88604fd9_0c2dccbd",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1311,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "This is a local variable; prefix \"m_\" is for members, so please drop it",
      "range": {
        "startLine": 1311,
        "startChar": 24,
        "endLine": 1311,
        "endChar": 26
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f30e97d_1d367389",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1311,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88604fd9_0c2dccbd",
      "range": {
        "startLine": 1311,
        "startChar": 24,
        "endLine": 1311,
        "endChar": 26
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87090b1c_78d59cb2",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1347,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "To avoid explicit std::make_pair, use emplace_back instead of push_back.",
      "range": {
        "startLine": 1347,
        "startChar": 41,
        "endLine": 1347,
        "endChar": 65
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd37eb8e_eab2ef06",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1347,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87090b1c_78d59cb2",
      "range": {
        "startLine": 1347,
        "startChar": 41,
        "endLine": 1347,
        "endChar": 65
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e0a516e_7f5e7a3a",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1347,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-09T13:23:59Z",
      "side": 1,
      "message": "What\u0027s the difference between push_back and emplace_back when I use std::make_pair?",
      "parentUuid": "dd37eb8e_eab2ef06",
      "range": {
        "startLine": 1347,
        "startChar": 41,
        "endLine": 1347,
        "endChar": 65
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c46e9c8_bb995822",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1351,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "Please note that we use a set of clang-format rules for uniform code formatting. Some files are excluded from the clang-format checks, because re-formatting them would bring too much git log noise; yet, for *new* code, the rules should still be followed.\n\nIn particular, this line is longer that 100 characters (max limit). You may either split it to two, or (which is what I usually do) consider shortening your variable mane to something like \"aUILanguages\". Also many IDEs allow selective application of clang-format rules (e.g., VS IDE allows using Ctrl+K, Ctrl+F).",
      "range": {
        "startLine": 1351,
        "startChar": 8,
        "endLine": 1351,
        "endChar": 109
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f0300f1_410518f8",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1353,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "Note that modern C++ allows using structured binding ( https://en.cppreference.com/w/cpp/language/structured_binding ) to simplify this:\n\n    for (const auto\u0026 [nGroupID, sGroupName] : aUILanguages\n    {\n        m_xUserInterfaceLB-\u003eappend(OUString::number(nGroupID), sGroupName);\n    }\n\nNote how to use prefixes properly. See also \"Code Conventions\" at https://wiki.documentfoundation.org/Development",
      "range": {
        "startLine": 1353,
        "startChar": 13,
        "endLine": 1353,
        "endChar": 27
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02f2b0e6_5c5de604",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1353,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f0300f1_410518f8",
      "range": {
        "startLine": 1353,
        "startChar": 13,
        "endLine": 1353,
        "endChar": 27
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "179d2cac_6c92f2f7",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1400,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "I suppose that it\u0027s better to move set_active after filling the listbox.",
      "range": {
        "startLine": 1400,
        "startChar": 4,
        "endLine": 1400,
        "endChar": 33
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdcf4b00_ed78628d",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 7
      },
      "lineNbr": 1400,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "179d2cac_6c92f2f7",
      "range": {
        "startLine": 1400,
        "startChar": 4,
        "endLine": 1400,
        "endChar": 33
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b216a06_457de7d5",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 188,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "This is also better done using lambda right inside std::sort",
      "range": {
        "startLine": 188,
        "startChar": 12,
        "endLine": 188,
        "endChar": 33
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bfee682_54ea8499",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 193,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "This function is almost complete duplication of its older version below. It\u0027s better to not introduce an overload, but extend the older function\u0027s optional arguments to specify if there\u0027s a default entry, and just add what\u0027s missing there in the function to add the entry: see \"bHasLangNone\" here as an example.",
      "range": {
        "startLine": 193,
        "startChar": 5,
        "endLine": 193,
        "endChar": 36
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47cd2d26_ecc01d90",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 193,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Can I use the default parameter to avoid problems where this function is used? For example, \n\nvoid SvxLanguageBox::SetLanguageList( SvxLanguageListFlags nLangList,\n        bool bHasLangNone, bool bLangNoneIsLangAll, bool bCheckSpellAvail,\n        const LanguageType defaultLangType \u003d NULL, sal_Int16 defaultType \u003d 0,\n        bool existDefaultLanguage \u003d false       \n)\n\nOtherwise, I should edit all functions which call SetLanguageList due to difference of parameter number.",
      "parentUuid": "4bfee682_54ea8499",
      "range": {
        "startLine": 193,
        "startChar": 5,
        "endLine": 193,
        "endChar": 36
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "718b9825_d403b57d",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 193,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T20:25:10Z",
      "side": 1,
      "message": "Quoting myself:\n\n\u003e ... but extend the older function\u0027s *optional* arguments\n\n... so of course, please append new *optional* (\u003dhaving default values) arguments :-)",
      "parentUuid": "47cd2d26_ecc01d90",
      "range": {
        "startLine": 193,
        "startChar": 5,
        "endLine": 193,
        "endChar": 36
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5045cccc_411754e6",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 289,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T09:21:05Z",
      "side": 1,
      "message": "Please note that simply using aEntries::insert or emplace to add an item to front (if not modifying the sort function to automatically put default and none entries to the top) would be more efficient than adding another vector and iterating through older one to transfer to new one. It would likely use block move, which couldn\u0027t be beaten manually. A closer match could be using std::copy instead of iteration.",
      "range": {
        "startLine": 289,
        "startChar": 37,
        "endLine": 289,
        "endChar": 49
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcb81a97_b37e7daa",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 289,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5045cccc_411754e6",
      "range": {
        "startLine": 289,
        "startChar": 37,
        "endLine": 289,
        "endChar": 49
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "290bfd2d_8566873d",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 295,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "As mentioned in gerrit build failure, please use for (const auto\u0026 ...)",
      "range": {
        "startLine": 295,
        "startChar": 9,
        "endLine": 295,
        "endChar": 21
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4438713a_ca2418b8",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 295,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "290bfd2d_8566873d",
      "range": {
        "startLine": 295,
        "startChar": 9,
        "endLine": 295,
        "endChar": 21
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c938d5a_ec01f130",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "Is it actually needed here? I mean, have you checked that in every place where this function is used, it\u0027s OK to add the separator? Can\u0027t it be in the middle?",
      "range": {
        "startLine": 426,
        "startChar": 4,
        "endLine": 427,
        "endChar": 0
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "653595b5_3b73e7a7",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c938d5a_ec01f130",
      "range": {
        "startLine": 426,
        "startChar": 4,
        "endLine": 427,
        "endChar": 0
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec8da372_f3b1e4d0",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 557,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-02-08T08:17:55Z",
      "side": 1,
      "message": "Please don\u0027t comment out unnecessary code; just remove it if needed. We have git history if we need to know what was here before.",
      "range": {
        "startLine": 557,
        "startChar": 4,
        "endLine": 557,
        "endChar": 32
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "626ec633_1d30a1df",
        "filename": "svx/source/dialog/langbox.cxx",
        "patchSetId": 7
      },
      "lineNbr": 557,
      "author": {
        "id": 1002293
      },
      "writtenOn": "2020-02-08T20:02:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec8da372_f3b1e4d0",
      "range": {
        "startLine": 557,
        "startChar": 4,
        "endLine": 557,
        "endChar": 32
      },
      "revId": "ee6f9473efff6ced394627749484046d165b0a79",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}