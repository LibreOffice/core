{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ee65d06f_b7b7200b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-06-22T20:56:59Z",
      "side": 1,
      "message": "I assume the above is indeed true?",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "229709fd_26499c2d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-06-23T00:02:50Z",
      "side": 1,
      "message": "I\u0027d say yes.",
      "parentUuid": "ee65d06f_b7b7200b",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc1184d3_254afa79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-06-22T20:15:59Z",
      "side": 1,
      "message": "Do you know any sample files that should cause OrcusFormatDetect::detect to detect the sought-after orcus::format_t::gnumeric and orcus::format_t::xls_xml?  `make check` doesn\u0027t appear to trigger any detection of either of those two formats, neither before nor after this change, so it is hard for me to tell whether this change actually works as intended.",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5e71b86_70af1971",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-06-23T00:01:55Z",
      "side": 1,
      "message": "You can try files under https://gitlab.com/orcus/orcus/-/tree/master/test/gnumeric and https://gitlab.com/orcus/orcus/-/tree/master/test/xls-xml. I\u0027m not sure if there are any files you can use in the libreoffice repo.",
      "parentUuid": "dc1184d3_254afa79",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c686ce4_310aa2b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-06-23T06:55:11Z",
      "side": 1,
      "message": "So the behavior appears to be the same with and without this change:\n* `instdir/program/soffice workdir/UnpackedTarball/liborcus/test/gnumeric/test.gnumeric` selects `case orcus::format_t::gnumeric`.\n* `instdir/program/soffice workdir/UnpackedTarball/liborcus/test/xls-xml/basic/input.xml` doesn\u0027t call `OrcusFormatDetect::detect` at all (and instead opens a Calc document via some other filter?!?).",
      "parentUuid": "d5e71b86_70af1971",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5ba63cf_bf80885d",
        "filename": "sc/source/filter/orcus/filterdetect.cxx",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-06-23T07:04:47Z",
      "side": 1,
      "message": "I\u0027m surprised that we need to read more than the first 100 bytes or so to detect a format, I would much rather we clamp the input size to some reasonable number to these detect methods, because they can make opening large files very slow if we try and read the entirety of a large file.",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8a95b00_6148515e",
        "filename": "sc/source/filter/orcus/filterdetect.cxx",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-06-23T07:08:26Z",
      "side": 1,
      "message": "see \u003chttps://gerrit.libreoffice.org/c/core/+/136297/1//COMMIT_MSG#28\u003e (improving that could presumably be the topic of another change, of course)",
      "parentUuid": "b5ba63cf_bf80885d",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "541b5971_cbcabecc",
        "filename": "sc/source/filter/orcus/filterdetect.cxx",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-06-24T03:41:31Z",
      "side": 1,
      "message": "Just to be clear, the detection code itself should only read the first part of the stream, not the entire stream. But the stream itself needs to be fully available in the virtual memory space, if that makes sense.  If you memory-map the stream, it should only load the part of the stream that gets parsed by the detection code, thereby avoiding having to load the entire stream in memory.  But if the stream is not memory-mapped, then it may cause a memory-usage spike for a large file.",
      "parentUuid": "a8a95b00_6148515e",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d69e0576_cd0d7ff6",
        "filename": "sc/source/filter/orcus/filterdetect.cxx",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-06-24T03:52:42Z",
      "side": 1,
      "message": "Having said that, in a situation where the stream contains a zip archive which consists of multiple compressed sections each of which need to be uncompressed before the parsing happens, I would still think that the entire blob needs to be available so that the uncompressing the compressed stream is done correctly.\n\nIf the zip archive blob itself is only partially available, I have no idea what would happen then, to be completely honest.",
      "parentUuid": "541b5971_cbcabecc",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "081c5159_42d2af4a",
        "filename": "sc/source/filter/orcus/filterdetect.cxx",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-06-24T06:06:53Z",
      "side": 1,
      "message": "My first impetus had been to use osl_mapFile, but that would need aMediaDescriptor to provide a URL, and that URL to be a file URL---conditions that I assume would not generally be met, so I didn\u0027t consider that further for this immediate, backportable fix.  But it might be a worthwhile optimization where applicable?",
      "parentUuid": "d69e0576_cd0d7ff6",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e2d50ae_9e7f2d6c",
        "filename": "sc/source/filter/orcus/filterdetect.cxx",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-06-24T06:30:22Z",
      "side": 1,
      "message": "Noting that, in general, the media URLs we use are not compatible with optimised MS-Windows temporary files (which is an ongoing source of pain for which I don\u0027t have a good answer - I am tempted to install some kind of global std::map down in sal which maps a special URL prefix to windows file handles to deal with this)",
      "parentUuid": "081c5159_42d2af4a",
      "revId": "283b634cf2405f8e5ae5efe634437b4af9829af6",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ],
  "submitRequirementResults": []
}