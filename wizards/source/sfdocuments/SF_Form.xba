<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="SF_Form" script:language="StarBasic" script:moduleType="normal">REM =======================================================================================================================
REM ===			The ScriptForge library and its associated libraries are part of the LibreOffice project.				===
REM	===						The SFDocuments library is one of the associated libraries.									===
REM ===					Full documentation is available on https://help.libreoffice.org/								===
REM =======================================================================================================================

Option Compatible
Option ClassModule

Option Explicit

&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;
&apos;&apos;&apos;	SF_Form
&apos;&apos;&apos;	=======
&apos;&apos;&apos;		Management of forms defined in LibreOffice documents. Supported types are Base, Calc and Writer documents.
&apos;&apos;&apos;		For Base documents, it includes the management of subforms
&apos;&apos;&apos;		Each instance of the current class represents a single form or a single subform
&apos;&apos;&apos;
&apos;&apos;&apos;		A form may optionally be (understand &quot;is often&quot;) linked to a data source manageable with the SFDatabases.Database service
&apos;&apos;&apos;		The current service offers a rapid access to that service
&apos;&apos;&apos;		
&apos;&apos;&apos;		Definitions:
&apos;&apos;&apos;
&apos;&apos;&apos;			FormDocument:
&apos;&apos;&apos;				For usual documents, there is only 1 form document. It is in fact the document itself.
&apos;&apos;&apos;				A Base document may contain an unlimited number of form documents.
&apos;&apos;&apos;					In the Base terminology they are called &quot;forms&quot;. This could create some confusion.
&apos;&apos;&apos;					They can be organized in folders. Their name is then always the full path of folders + form
&apos;&apos;&apos;					with the slash (&quot;/&quot;) as path separator
&apos;&apos;&apos;				A FormDocument is a set of Forms. Form names are visible in the user interface thanks to the form navigator
&apos;&apos;&apos;					Often there is only 1 Form present in a FormDocument. Having more, however, might improve
&apos;&apos;&apos;					the user experience significantly
&apos;&apos;&apos;
&apos;&apos;&apos;			Form: WHERE IT IS ABOUT IN THE CURRENT &quot;Form&quot; SERVICE
&apos;&apos;&apos;				Is an abstract set of Controls in an OPEN FormDocument
&apos;&apos;&apos;				Each form is (often) linked to a dataset (table, query or Select statement),
&apos;&apos;&apos;				located in any database (provided the user may access it)
&apos;&apos;&apos;					A usual document may contain several forms. Each of which may have its own data source (database + dataset)
&apos;&apos;&apos;					A Base form document may contain several forms. Each of which may address its own dataset. The database however is unique
&apos;&apos;&apos;				A form is defined by its owning FormDocument and its FormName or FormIndex
&apos;&apos;&apos;
&apos;&apos;&apos;		Service invocations:
&apos;&apos;&apos;
&apos;&apos;&apos;			REM the form is stored in a not-Base document (Calc, Writer)	
&apos;&apos;&apos;			Dim oDoc As Object, myForm As Object
&apos;&apos;&apos;				Set oDoc = CreateScriptService(&quot;SFDocuments.Document&quot;, ThisComponent)
&apos;&apos;&apos;				Set myForm = oDoc.Forms(&quot;Form1&quot;)
&apos;&apos;&apos;				&apos;	or, alternatively, when there is only 1 form
&apos;&apos;&apos;				Set myForm = oDoc.Forms(0)	
&apos;&apos;&apos;
&apos;&apos;&apos;			REM the form is stored in one of the FormDocuments of a Base document
&apos;&apos;&apos;			Dim oDoc As Object, myForm As Object, mySubForm As Object
&apos;&apos;&apos;				Set oDoc = CreateScriptService(&quot;SFDocuments.Document&quot;, ThisDatabaseDocument)
&apos;&apos;&apos;				oDoc.OpenFormDocument(&quot;thisFormDocument&quot;)
&apos;&apos;&apos;				Set myForm = oDoc.Forms(&quot;thisFormDocument&quot;, &quot;MainForm&quot;)
&apos;&apos;&apos;				&apos;	or, alternatively, when there is only 1 form
&apos;&apos;&apos;				Set myForm = oDoc.Forms(&quot;thisFormDocument&quot;, 0)
&apos;&apos;&apos;				&apos;	To access a subform: myForm and mySubForm become distinct instances of the current class
&apos;&apos;&apos;				Set mySubForm = myForm.SubForms(&quot;mySubForm&quot;)
&apos;&apos;&apos;
&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;

REM ================================================================== EXCEPTIONS

Private Const FORMDEADERROR		=	&quot;FORMDEADERROR&quot;

REM ============================================================= PRIVATE MEMBERS

Private [Me]				As Object
Private [_Parent]			As Object
Private ObjectType			As String		&apos; Must be Form
Private ServiceName			As String

&apos;	Form location
Private _Name				As String		&apos; Internal name of the form
Private _DrawPage			As Long			&apos; Index in DrawOages collection
Private _UsualName			As String		&apos; Name as known by user
Private _FormType			As Integer		&apos; One of the ISxxxFORM constants

&apos;	Form UNO references
&apos;		The forms container found in a Base document
&apos;		Vital for Base forms and subforms
Private _MainForm			As Object		&apos; com.sun.star.comp.sdb.Content
&apos;		The entry to the interactions with the form. Set by the _IsStillAlive() method
&apos;		Each method or property requiring that the form is opened should first invoke that method
Private _Form				As Object		&apos; com.sun.star.form.XForm or com.sun.star.comp.forms.ODatabaseForm
Private _Database			As Object		&apos; Database class instance

&apos;	Form attributes

&apos;	Persistent storage for controls
Private _ControlCache		As Variant		&apos; Array of control objects sorted like ElementNames of XForm

REM ============================================================ MODULE CONSTANTS

Const ISDOCFORM				=	1			&apos; Form is stored in a Writer document
Const ISCALCFORM			=	2			&apos; Form is stored in a Calc document
Const ISBASEFORM			=	3			&apos; Form is stored in a Base document
Const ISSUBFORM				=	4			&apos; Form is a subform of a form stored in a Base document or of another subform

REM ====================================================== CONSTRUCTOR/DESTRUCTOR

REM -----------------------------------------------------------------------------
Private Sub Class_Initialize()
	Set [Me] = Nothing
	Set [_Parent] = Nothing
	ObjectType = &quot;Form&quot;
	ServiceName = &quot;SFDocuments.Form&quot;
	_Name = &quot;&quot;
	_DrawPage = -1
	_FormType = 0
	Set _MainForm = Nothing
	Set _Form = Nothing
	Set _Database = Nothing
	_ControlCache = Array()
End Sub		&apos;	SFDocuments.SF_Form Constructor

REM -----------------------------------------------------------------------------
Private Sub Class_Terminate()
	Call Class_Initialize()
End Sub		&apos;	SFDocuments.SF_Form Destructor

REM -----------------------------------------------------------------------------
Public Function Dispose() As Variant
	Call Class_Terminate()
	Set Dispose = Nothing
End Function	&apos;	SFDocuments.SF_Form Explicit Destructor

REM ================================================================== PROPERTIES

REM -----------------------------------------------------------------------------
Property Get Caption() As Variant
&apos;&apos;&apos;	The Caption property refers to the title of the Form
	Caption = _PropertyGet(&quot;Caption&quot;)
End Property	&apos;	SFDocuments.SF_Form.Caption (get)

REM -----------------------------------------------------------------------------
Property Let Caption(Optional ByVal pvCaption As Variant)
&apos;&apos;&apos;	Set the updatable property Caption
	_PropertySet(&quot;Caption&quot;, pvCaption)
End Property	&apos;	SFDocumentsDialog.SF_Form.Caption (let)

REM -----------------------------------------------------------------------------
Property Get Height() As Variant
&apos;&apos;&apos;	The Height property refers to the height of the Form box
	Height = _PropertyGet(&quot;Height&quot;)
End Property	&apos;	SFDocuments.SF_Form.Height (get)

REM -----------------------------------------------------------------------------
Property Let Height(Optional ByVal pvHeight As Variant)
&apos;&apos;&apos;	Set the updatable property Height
	_PropertySet(&quot;Height&quot;, pvHeight)
End Property	&apos;	SFDocuments.SF_Form.Height (let)

REM -----------------------------------------------------------------------------
Property Get Name() As String
&apos;&apos;&apos;	Return the name of the actual Form
	Name = _PropertyGet(&quot;Name&quot;)
End Property	&apos;	SFDocuments.SF_Form.Name

REM -----------------------------------------------------------------------------
Property Get Visible() As Variant
&apos;&apos;&apos;	The Visible property is False before the Execute() statement
	Visible = _PropertyGet(&quot;Visible&quot;)
End Property	&apos;	SFDocuments.SF_Form.Visible (get)

REM -----------------------------------------------------------------------------
Property Let Visible(Optional ByVal pvVisible As Variant)
&apos;&apos;&apos;	Set the updatable property Visible
	_PropertySet(&quot;Visible&quot;, pvVisible)
End Property	&apos;	SFDocuments.SF_Form.Visible (let)

REM -----------------------------------------------------------------------------
Property Get Width() As Variant
&apos;&apos;&apos;	The Width property refers to the Width of the Form box
	Width = _PropertyGet(&quot;Width&quot;)
End Property	&apos;	SFDocuments.SF_Form.Width (get)

REM -----------------------------------------------------------------------------
Property Let Width(Optional ByVal pvWidth As Variant)
&apos;&apos;&apos;	Set the updatable property Width
	_PropertySet(&quot;Width&quot;, pvWidth)
End Property	&apos;	SFDocuments.SF_Form.Width (let)

REM -----------------------------------------------------------------------------
Property Get XFormModel() As Object
&apos;&apos;&apos;	The XFormModel property returns the model UNO object of the Form
	XFormModel = _PropertyGet(&quot;XFormModel&quot;)
End Property	&apos;	SFDocuments.SF_Form.XFormModel (get)

REM -----------------------------------------------------------------------------
Property Get XFormView() As Object
&apos;&apos;&apos;	The XFormView property returns the view UNO object of the Form
	XFormView = _PropertyGet(&quot;XFormView&quot;)
End Property	&apos;	SFDocuments.SF_Form.XFormView (get)

REM ===================================================================== METHODS

REM -----------------------------------------------------------------------------
Public Function Activate() As Boolean
&apos;&apos;&apos;	Set the focus on the current Form instance
&apos;&apos;&apos;	Probably called from after an event occurrence or to focus on an open fForm
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;	Returns:
&apos;&apos;&apos;		True if focusing is successful
&apos;&apos;&apos;	Example:
&apos;&apos;&apos;		Dim oDlg As Object
&apos;&apos;&apos;			Set oDlg = CreateScriptService(,, &quot;myForm&quot;)	&apos;	Form stored in current document&apos;s standard library
&apos;&apos;&apos;			oDlg.Activate()

Dim bActivate As Boolean		&apos;	Return value
Const cstThisSub = &quot;SFDocuments.Form.Activate&quot;
Const cstSubArgs = &quot;&quot;

	If ScriptForge.SF_Utils._ErrorHandling() Then On Local Error GoTo Catch
	bActivate = False

Check:
	If ScriptForge.SF_Utils._EnterFunction(cstThisSub, cstSubArgs) Then
		If Not _IsStillAlive() Then GoTo Finally
	End If
Try:

Finally:
	Activate = bActivate
	ScriptForge.SF_Utils._ExitFunction(cstThisSub)
	Exit Function
Catch:
	GoTo Finally
End Function	&apos;	SFDocuments.SF_Form.Activate

REM -----------------------------------------------------------------------------
Public Function Controls(Optional ByVal ControlName As Variant) As Variant
&apos;&apos;&apos;	Return either
&apos;&apos;&apos;		- the list of the controls contained in the Form
&apos;&apos;&apos;		- a Form control object based on its name
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;		ControlName: a valid control name as a case-sensitive string. If absent the list is returned
&apos;&apos;&apos;	Returns:
&apos;&apos;&apos;		A zero-base array of strings if ControlName is absent
&apos;&apos;&apos;		An instance of the SF_FormControl class if ControlName exists
&apos;&apos;&apos;	Exceptions:
&apos;&apos;&apos;		ControlName is invalid
&apos;&apos;&apos;	Example:
&apos;&apos;&apos;			Dim myForm As Object, myList As Variant, myControl As Object
&apos;&apos;&apos;				Set myForm = CreateScriptService(&quot;SFDocuments.Form&quot;, Container, Library, FormName)
&apos;&apos;&apos;				myList = myForm.Controls()
&apos;&apos;&apos;				Set myControl = myForm.Controls(&quot;myTextBox&quot;)

Dim oControl As Object				&apos;	The new control class instance
Dim lIndexOfNames As Long			&apos;	Index in ElementNames array. Used to access _ControlCache
Dim vControl As Variant				&apos;	Alias of _ControlCache entry
Const cstThisSub = &quot;SFDocuments.Form.Controls&quot;
Const cstSubArgs = &quot;[ControlName]&quot;

	If ScriptForge.SF_Utils._ErrorHandling() Then On Local Error GoTo Catch

Check:
	If IsMissing(ControlName) Or IsEmpty(ControlName) Then ControlName = &quot;&quot;
	If ScriptForge.SF_Utils._EnterFunction(cstThisSub, cstSubArgs) Then
		If Not _IsStillAlive() Then GoTo Finally
		If Not ScriptForge.SF_Utils._Validate(ControlName, &quot;ControlName&quot;, V_STRING) Then GoTo Finally
	End If

Try:
	If Len(ControlName) = 0 Then
	Else
	End If

Finally:
	ScriptForge.SF_Utils._ExitFunction(cstThisSub)
	Exit Function
Catch:
	GoTo Finally
CatchNotFound:
	ScriptForge.SF_Utils._Validate(ControlName, &quot;ControlName&quot;, V_STRING, _FormModel.getElementNames())
	GoTo Finally
End Function	&apos;	SFDocuments.SF_Form.Controls

REM -----------------------------------------------------------------------------
Public Function GetDatabase(Optional ByVal User As Variant _
								, Optional ByVal Password As Variant _
								) As Object
&apos;&apos;&apos;	Returns a Database instance (service = SFDatabases.Database) giving access
&apos;&apos;&apos;	to the execution of SQL commands on the database defined and/or stored in
&apos;&apos;&apos;	the actual Base document
&apos;&apos;&apos;	Each form has its own database connection, except within Base documents where
&apos;&apos;&apos;	they all share the same connection
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;		User, Password: the login parameters as strings. Defaults = &quot;&quot;
&apos;&apos;&apos;	Returns:
&apos;&apos;&apos;		A SFDatabases.Database instance or Nothing
&apos;&apos;&apos;	Example:
&apos;&apos;&apos;		Dim myDb As Object
&apos;&apos;&apos;			Set myDb = oForm.GetDatabase()

Dim FSO As Object				&apos;	Alias for SF_FileSystem
Dim sUser As String				&apos;	Alias for User
Dim sPassword As String			&apos;	Alias for Password
Const cstThisSub = &quot;SFDocuments.Form.GetDatabase&quot;
Const cstSubArgs = &quot;[User=&quot;&quot;&quot;&quot;], [Password=&quot;&quot;&quot;&quot;]&quot;

	If ScriptForge.SF_Utils._ErrorHandling() Then On Local Error GoTo Catch
	Set GetDatabase = Nothing

Check:
	If IsMissing(User) Or IsEmpty(User) Then User = &quot;&quot;
	If IsMissing(Password) Or IsEmpty(Password) Then Password = &quot;&quot;
	If ScriptForge.SF_Utils._EnterFunction(cstThisSub, cstSubArgs) Then
		If Not [_Parent]._IsStillAlive(True) Then GoTo Finally
		If Not ScriptForge.SF_Utils._Validate(User, &quot;User&quot;, V_STRING) Then GoTo Finally
		If Not ScriptForge.SF_Utils._Validate(Password, &quot;Password&quot;, V_STRING) Then GoTo Finally
	End If

Try:
	&apos;	Adjust connection arguments
	If Len(User) = 0 Then
		If ScriptForge.SF_Session.HasUnoProperty(_Form, &quot;User&quot;) Then sUser = _Form.User Else sUser = &quot;&quot;
	Else
		sUser = User
	End If
	If Len(sUser) + Len(Password) = 0 Then
		If ScriptForge.SF_Session.HasUnoProperty(_Form, &quot;Password&quot;) Then sPassword = _Form.Password Else sPassword = Password
	End If

	&apos;	Connect to database, avoiding multiple requests
	If IsNull(_Database) Then		&apos;	1st connection request from the current form instance
		If _FormType = ISBASEFORM Then
			&apos;	Fetch the shared connection
			Set _Database = [_Parent].GetDatabase(User, Password)
		ElseIf Len(_Form.DataSOurceName) = 0 Then	&apos;	There is no database linked with the form
			&apos;	Return Nothing
		Else
			&apos;	Check if DataSourceName is a file or a registrered name and create database instance accordingly
			Set FSO = ScriptForge.SF_FileSystem
			If FSO.FileExists(FSO._ConvertFromUrl(_Form.DataSourceName)) Then
				Set _Database = ScriptForge.SF_Services.CreateScriptService(&quot;SFDatabases.Database&quot; _
								, _Form.DataSourceName, , , sUser, sPassword)
			Else
				Set _Database = ScriptForge.SF_Services.CreateScriptService(&quot;SFDatabases.Database&quot; _
								, , _Form.DataSourceName, , sUser, sPassword)
			End If
			If IsNull(_Database) Then GoTo CatchConnect
		End If
	Else
	EndIf

Finally:
	Set GetDatabase = _Database
	ScriptForge.SF_Utils._ExitFunction(cstThisSub)
	Exit Function
Catch:
	GoTo Finally
CatchConnect:
	ScriptForge.SF_Exception.RaiseFatal(DBCONNECTERROR, &quot;User&quot;, User, &quot;Password&quot;, Password, [_Super]._FileIdent())
	GoTo Finally
End Function	&apos;	SFDocuments.SF_Form.GetDatabase

REM -----------------------------------------------------------------------------
Public Function GetProperty(Optional ByVal PropertyName As Variant) As Variant
&apos;&apos;&apos;	Return the actual value of the given property
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;		PropertyName: the name of the property as a string
&apos;&apos;&apos;	Returns:
&apos;&apos;&apos;		The actual value of the property
&apos;&apos;&apos;	Exceptions:
&apos;&apos;&apos;		ARGUMENTERROR		The property does not exist
&apos;&apos;&apos;	Examples:
&apos;&apos;&apos;		oDlg.GetProperty(&quot;Caption&quot;)

Const cstThisSub = &quot;SFDocuments.Form.GetProperty&quot;
Const cstSubArgs = &quot;&quot;

	If SF_Utils._ErrorHandling() Then On Local Error GoTo Catch
	GetProperty = Null

Check:
	If ScriptForge.SF_Utils._EnterFunction(cstThisSub, cstSubArgs) Then
		If Not ScriptForge.SF_Utils._Validate(PropertyName, &quot;PropertyName&quot;, V_STRING, Properties()) Then GoTo Catch
	End If

Try:
	GetProperty = _PropertyGet(PropertyName)

Finally:
	SF_Utils._ExitFunction(cstThisSub)
	Exit Function
Catch:
	GoTo Finally
End Function	&apos;	SFDocuments.SF_Form.GetProperty

REM -----------------------------------------------------------------------------
Public Function Methods() As Variant
&apos;&apos;&apos;	Return the list of public methods of the Model service as an array

	Methods = Array( _
					&quot;Activate&quot; _
					, &quot;CloseForm&quot; _
					, &quot;Controls&quot; _
					, &quot;First&quot; _
					, &quot;GetDatabase&quot; _
					, &quot;Last&quot; _
					, &quot;Move&quot; _
					, &quot;New&quot; _
					, &quot;Next&quot; _
					, &quot;Previous&quot; _
					, &quot;Refresh&quot; _
					, &quot;Requery&quot; _
					, &quot;SubForms&quot; _
					)

End Function	&apos;	SFDocuments.SF_Form.Methods

REM -----------------------------------------------------------------------------
Public Function Properties() As Variant
&apos;&apos;&apos;	Return the list or properties of the Form class as an array

	Properties = Array( _
					&quot;AllowAdditions&quot; _
					, &quot;AllowDeletions&quot; _
					, &quot;AllowEdits&quot; _
					, &quot;Bookmark&quot; _
					, &quot;Caption&quot; _
					, &quot;CurrentRecord&quot; _
					, &quot;Filter&quot; _
					, &quot;FilterOn&quot; _
					, &quot;Height&quot; _
					, &quot;IsLoaded&quot; _
					, &quot;LinkChildFields&quot; _
					, &quot;LinkParentFields&quot; _
					, &quot;Name&quot; _
					, &quot;OnApproveCursorMove&quot; _
					, &quot;OnApproveParameter&quot; _
					, &quot;OnApproveReset&quot; _
					, &quot;OnApproveRowChange&quot; _
					, &quot;OnApproveSubmit&quot; _
					, &quot;OnConfirmDelete&quot; _
					, &quot;OnCursorMoved&quot; _
					, &quot;OnErrorOccurred&quot; _
					, &quot;OnLoaded&quot; _
					, &quot;OnReloaded&quot; _
					, &quot;OnReloading&quot; _
					, &quot;OnResetted&quot; _
					, &quot;OnRowChanged&quot; _
					, &quot;OnUnloaded&quot; _
					, &quot;OnUnloading&quot; _
					, &quot;OrderBy&quot; _
					, &quot;OrderByOn&quot; _
					, &quot;RecordSource&quot; _
					, &quot;Visible&quot; _
					, &quot;Width&quot; _
					)

End Function	&apos;	SFDocuments.SF_Form.Properties

REM -----------------------------------------------------------------------------
Public Function SetProperty(Optional ByVal PropertyName As Variant _
								, Optional ByRef Value As Variant _
								) As Boolean
&apos;&apos;&apos;	Set a new value to the given property
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;		PropertyName: the name of the property as a string
&apos;&apos;&apos;		Value: its new value
&apos;&apos;&apos;	Exceptions
&apos;&apos;&apos;		ARGUMENTERROR		The property does not exist

Const cstThisSub = &quot;SFDocuments.Form.SetProperty&quot;
Const cstSubArgs = &quot;PropertyName, Value&quot;

	If SF_Utils._ErrorHandling() Then On Local Error GoTo Catch
	SetProperty = False

Check:
	If SF_Utils._EnterFunction(cstThisSub, cstSubArgs) Then
		If Not SF_Utils._Validate(PropertyName, &quot;PropertyName&quot;, V_STRING, Properties()) Then GoTo Catch
	End If

Try:
	SetProperty = _PropertySet(PropertyName, Value)

Finally:
	SF_Utils._ExitFunction(cstThisSub)
	Exit Function
Catch:
	GoTo Finally
End Function	&apos;	SFDocuments.SF_Form.SetProperty

REM =========================================================== PRIVATE FUNCTIONS

REM -----------------------------------------------------------------------------
Public Function _GetEventName(ByVal psProperty As String) As String
&apos;&apos;&apos;	Return the LO internal event name derived from the SF property name
&apos;&apos;&apos;	The SF property name is not case sensitive, while the LO name is case-sensitive
&apos;	Corrects the typo on ErrorOccur(r?)ed, if necessary

Dim vProperties As Variant			&apos;	Array of class properties
Dim sProperty As String				&apos;	Correctly cased property name

	vProperties = Properties()
	sProperty = vProperties(ScriptForge.SF_Array.IndexOf(vProperties, psProperty, SortOrder := &quot;ASC&quot;))

	_GetEventName = LCase(Mid(sProperty, 3, 1)) &amp; Right(sProperty, Len(sProperty) - 3)
	
End Function	&apos;	SFDocuments.SF_Form._GetEventName

REM -----------------------------------------------------------------------------
Private Function _GetListener(ByVal psEventName As String) As String
&apos;&apos;&apos;	Getting/Setting macros triggered by events requires a Listener-EventName pair
&apos;&apos;&apos;	Return the X...Listener corresponding with the event name in argument

	Select Case UCase(psEventName)
		Case Else
			_GetListener = &quot;&quot;
	End Select
	
End Function	&apos;	SFDocuments.SF_Form._GetListener

REM -----------------------------------------------------------------------------
Private Function _IsStillAlive(Optional ByVal pbError As Boolean) As Boolean
&apos;&apos;&apos;	Return True if the Form is still open
&apos;&apos;&apos;	If dead the actual instance is partially (part related to open forms) disposed
&apos;&apos;&apos;	and the execution is cancelled when pbError = True (default)
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;		pbError: if True (default), raise a fatal error

Dim bAlive As Boolean		&apos;	Return value

Check:
	On Local Error GoTo Catch		&apos;	Anticipate DisposedException errors or alike
	If IsMissing(pbError) Then pbError = True

Try:
	&apos;	For usual documents, check that the parent document is still open
	&apos;	For Base forms and subforms, check the openess of the main form
	Select Case _FormType
		Case ISDOCFORM, ISCALCFORM
			bAlive = [_Parent]._IsStillAlive(pbError)
		Case ISBASEFORM, ISSUBFORM
			&apos;	A form that has never been opened has no component
			&apos;	If ever opened and closed afterwards, it keeps the Component but loses its Controller
			bAlive = Not IsNull(_MainForm.Component)
			If bAlive Then bAlive = Not IsNull(_MainForm.Component.CurrentController)
	End Select
	If Not bAlive Then GoTo Catch

Finally:
	_IsStillAlive = bAlive
	Exit Function
Catch:
	bAlive = False
	On Error GoTo 0
	&apos;	Dispose the properties related to *open* forms
	Set _Form = Nothing
	If Not IsNull(_Database) And _FormType = ISDOCFORM Then Set _Database = _Database.Dispose()
	Set _ControlCache = Nothing
	&apos;	Display error message
	If pbError Then ScriptForge.SF_Exception.RaiseFatal(FORMDEADERROR, _Name, [_Parent]._FileIdent())
	GoTo Finally
End Function	&apos;	SFDocuments.SF_Form._IsStillAlive

REM -----------------------------------------------------------------------------
Private Function _PropertyGet(Optional ByVal psProperty As String) As Variant
&apos;&apos;&apos;	Return the value of the named property
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;		psProperty: the name of the property

Static oSession As Object					&apos;	Alias of SF_Session
Dim cstThisSub As String
Const cstSubArgs = &quot;&quot;

	cstThisSub = &quot;SFDocuments.Form.get&quot; &amp; psProperty
	If ScriptForge.SF_Utils._ErrorHandling() Then On Local Error GoTo Catch

	ScriptForge.SF_Utils._EnterFunction(cstThisSub, cstSubArgs)
	&apos;	All the properties except one require an open form
	If Not _IsStillAlive() Then GoTo Finally

	If IsNull(oSession) Then Set oSession = ScriptForge.SF_Services.CreateScriptService(&quot;Session&quot;)
	Select Case UCase(psProperty)
		Case UCase(&quot;Caption&quot;)
		Case UCase(&quot;Height&quot;)
		Case UCase(&quot;Name&quot;)
		Case UCase(&quot;Visible&quot;)
		Case UCase(&quot;Width&quot;)
		Case Else
			_PropertyGet = Null
	End Select

Finally:
	ScriptForge.SF_Utils._ExitFunction(cstThisSub)
	Exit Function
Catch:
	GoTo Finally
End Function	&apos;	SFDocuments.SF_Form._PropertyGet

REM -----------------------------------------------------------------------------
Private Function _PropertySet(Optional ByVal psProperty As String _
								, Optional ByVal pvValue As Variant _
								) As Boolean
&apos;&apos;&apos;	Set the new value of the named property
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;		psProperty: the name of the property
&apos;&apos;&apos;		pvValue: the new value of the given property
&apos;&apos;&apos;	Returns:
&apos;&apos;&apos;		True if successful

Dim bSet As Boolean							&apos;	Return value
Static oSession As Object					&apos;	Alias of SF_Session
Dim cstThisSub As String
Const cstSubArgs = &quot;Value&quot;

	If ScriptForge.SF_Utils._ErrorHandling() Then On Local Error GoTo Catch
	bSet = False

	cstThisSub = &quot;SFDocuments.Form.set&quot; &amp; psProperty
	ScriptForge.SF_Utils._EnterFunction(cstThisSub, cstSubArgs)
	If Not _IsStillAlive() Then GoTo Finally

	If IsNull(oSession) Then Set oSession = ScriptForge.SF_Services.CreateScriptService(&quot;Session&quot;)
	bSet = True
	Select Case UCase(psProperty)
		Case UCase(&quot;Caption&quot;)
		Case UCase(&quot;Height&quot;)
		Case UCase(&quot;Visible&quot;)
		Case UCase(&quot;Width&quot;)
		Case Else
			bSet = False
	End Select

Finally:
	_PropertySet = bSet
	ScriptForge.SF_Utils._ExitFunction(cstThisSub)
	Exit Function
Catch:
	GoTo Finally
End Function	&apos;	SFDocuments.SF_Form._PropertySet

REM -----------------------------------------------------------------------------
Private Function _Repr() As String
&apos;&apos;&apos;	Convert the Model instance to a readable string, typically for debugging purposes (DebugPrint ...)
&apos;&apos;&apos;	Args:
&apos;&apos;&apos;	Return:
&apos;&apos;&apos;		&quot;[Form]: Name&quot;

	_Repr = &quot;[Form]: &quot; &amp; _UsualName

End Function	&apos;	SFDocuments.SF_Form._Repr

REM ============================================ END OF SFDOCUMENTS.SF_FORM
</script:module>