{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cc51d2c2_ce931f71",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-02-21T10:25:19Z",
      "side": 1,
      "message": "I see, thanks.\n\nWhen I grep the source for SfxSetItem, I see a couple of places that check for it, e.g. SfxItemPool::SetSecondaryPool(). Will it not be a problem that ScPatternAttr is no longer inherited from SfxSetItem?\n",
      "revId": "4452208bc2c8ccc48737657b0febce39280cb539",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6625f29e_d3482fce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-02-21T11:12:37Z",
      "side": 1,
      "message": "Yeah, you are correct, that is a problem.\n\nUltimately I don\u0027t think ScPatternAttr should be stored in the pool at all. It would probably make more sense to make ScPatternAttr be some kind of ref-counted object, store it separately, and do the de-duplication thing during load time as a separate chunk of code specialised to ScPatternAttr.",
      "parentUuid": "cc51d2c2_ce931f71",
      "revId": "4452208bc2c8ccc48737657b0febce39280cb539",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "462d4d02_f79bad03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-02-21T11:28:27Z",
      "side": 1,
      "message": "\u003e Yeah, you are correct, that is a problem.\n\nI think that could be solved (making GetItemSet() pure virtual and derived classes would store the set), but if the whole itempool idea is bad for this case, then I guess it\u0027s better not to waste more time on band-aiding this.\n\n\u003e Ultimately I don\u0027t think ScPatternAttr should be stored in the pool at all. It would probably make more sense to make ScPatternAttr be some kind of ref-counted object, store it separately, and do the de-duplication thing during load time as a separate chunk of code specialised to ScPatternAttr.\n\nSo, to simplify it, there\u0027d be some std::unordered_set\u003cScPatternAttr*\u003e in ScDocument and that\u0027d do it? Ok, I can give it a shot somewhen, unless you beat me to it.",
      "parentUuid": "6625f29e_d3482fce",
      "revId": "4452208bc2c8ccc48737657b0febce39280cb539",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87a61e7d_b5a56e96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-02-21T11:39:50Z",
      "side": 1,
      "message": "\u003e \n\u003e So, to simplify it, there\u0027d be some std::unordered_set\u003cScPatternAttr*\u003e in ScDocument and that\u0027d do it? Ok, I can give it a shot somewhen, unless you beat me to it.\n\nEssentially yes. I had a very quick bash at it this morning, but ran into the problem that I don\u0027t know what on earth SfxItemPoolCache is doing with ScPatternAttr objects, so maybe even that idea won\u0027t work.",
      "parentUuid": "462d4d02_f79bad03",
      "revId": "4452208bc2c8ccc48737657b0febce39280cb539",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22a0b2be_599de192",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-02-21T13:44:22Z",
      "side": 1,
      "message": "There\u0027s a question that has occurred to me: If the problem is that SfxItemPool expects immutable objects and Calc breaks that by modifying ScPatternAttr behind the pool\u0027s back, why not fix the problem by simply not doing that? I.e. replacing all modify operations by clone+modify+put+unref?",
      "parentUuid": "87a61e7d_b5a56e96",
      "revId": "4452208bc2c8ccc48737657b0febce39280cb539",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ecb3de4_e055db99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-02-21T13:47:53Z",
      "side": 1,
      "message": "That would certainly solve the immutability/sorting issue, but given the size of ScPatternAttr, and the necessaity for doing a new/delete every time, I would guess that it would slow a number of things down.",
      "parentUuid": "22a0b2be_599de192",
      "revId": "4452208bc2c8ccc48737657b0febce39280cb539",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d5c884d_398a71d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-02-21T22:17:58Z",
      "side": 1,
      "message": "So I\u0027ve written the patch that changes the non-const GetItemSet() to complain if the object is already in a pool ... and I can\u0027t get it to complain. I\u0027ve also put back your ScPatternAttr::IsSortable(), and I can\u0027t get it to complain either if I try what 585e0ac43b9bd8a2f714903034e435c84ae3fc96 talks about. And SfxPoolItem now has asserts that check that the items are sorted, and those don\u0027t complain either.\n\nSo ... whatever the problem was, maybe it\u0027s been fixed? It seems quite possible that if there really was some modifying of ScPatternAttr behind the pool\u0027s back, it posibly caused also other problems, and somebody might have fixed that without knowing about IsSortable.\n\nCould you try? I\u0027m quite tempted putting IsSortable back in. In the worst case, somebody will find the problem again.\n",
      "revId": "4452208bc2c8ccc48737657b0febce39280cb539",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfbcdf28_b8a9379f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-02-22T07:03:22Z",
      "side": 1,
      "message": "I suggest you commit your patch making ScPattern sortable (along with the assert in GetItemSet()), and lets see.\n\nWe can get Caolan to trigger a crash-testing run, and if there are any issues, that will likely flush it out.\n\nWorst case, it crashes again, and then there are now two of us with reasonable knowledge who can try figure out the problem :-)",
      "parentUuid": "0d5c884d_398a71d7",
      "revId": "4452208bc2c8ccc48737657b0febce39280cb539",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}