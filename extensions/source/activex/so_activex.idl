/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

// so_activex.idl : IDL source for so_activex.dll


// This file will be processed by the MIDL tool to
// produce the type library (so_activex.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include <olectl.h>


    [
        object,
        uuid(DACF7E3F-626B-4BF9-964B-F4910C843711),
        dual,
        helpstring("ISOActiveX Interface"),
        pointer_default(unique)
    ]
    interface ISOActiveX : IDispatch
    {
    };

[
    object,
    uuid(BF5D10F3-8A10-4A0B-B150-2B6AA2D7E118),
    dual,
    helpstring("ISOComWindowPeer Interface"),
    pointer_default(unique)
]
interface ISOComWindowPeer : IDispatch
{
    [id(1), helpstring("method getWindowHandle")]
                HRESULT getWindowHandle( [in] SAFEARRAY(VARIANT) procId,
                                         [in] short s,
                                         [out,retval] long* ret);

    [id(2), helpstring("method getToolkit")]
                HRESULT getToolkit( [out,retval] IDispatch** retVal );

    [id(3), helpstring("method setPointer")]
                HRESULT setPointer( [in] IDispatch* xPointer );

    [id(4), helpstring("method setBackground")]
                HRESULT setBackground( [in] int nColor );

    [id(5), helpstring("method invalidate")]
                HRESULT invalidate( [in] short );

    [id(6), helpstring("method invalidateRect")]
                HRESULT invalidateRect( [in] IDispatch* aRect, [in] short nFlags );

    [id(7), helpstring("method dispose")]
                HRESULT dispose();

    [id(8), helpstring("method addEventListener")]
                HRESULT addEventListener( [in] IDispatch* xListener );

    [id(9), helpstring("method removeEventListener")]
                HRESULT removeEventListener( [in] IDispatch* xListener );

    [propget, id(10), helpstring("property_implementedInterfaces")]
                HRESULT Bridge_implementedInterfaces([out, retval] SAFEARRAY(BSTR) *pVal);
};

[
    object,
    uuid(9337694C-B27D-4384-95A4-9D8E0EABC9E5),
    dual,
    helpstring("ISODispatchInterceptor Interface"),
    pointer_default(unique)
]
interface ISODispatchInterceptor : IDispatch
{
//com.sun.star.frame.XDispatchProviderInterceptor

    [id(1), helpstring("method getSlaveDispatchProvider")]
                HRESULT getSlaveDispatchProvider( [out,retval] IDispatch** retVal );

    [id(2), helpstring("method setSlaveDispatchProvider")]
                HRESULT setSlaveDispatchProvider( [in] IDispatch* xNewDispatchProvider );

    [id(3), helpstring("method getMasterDispatchProvider")]
                HRESULT getMasterDispatchProvider( [out,retval] IDispatch** retVal );

    [id(4), helpstring("method setMasterDispatchProvider")]
                HRESULT setMasterDispatchProvider( [in] IDispatch* xNewSupplier );

// com.sun.star.frame.XDispatchProvider

    [id(5), helpstring("method queryDispatch")]
                HRESULT queryDispatch( [in] IDispatch* aURL,
                                       [in] BSTR aTargetFrameName,
                                       [in] long nSearchFlags,
                                       [out,retval] IDispatch** retVal );

    [id(6), helpstring("method queryDispatches")]
                HRESULT queryDispatches( [in] SAFEARRAY(IDispatch*) aDescripts,
                                         [out,retval] SAFEARRAY(VARIANT)* retVal );


// com.sun.star.frame.XDispatch

    [id(7), helpstring("method dispatch")]
                HRESULT dispatch( [in] IDispatch* aURL,
                                  [in] SAFEARRAY(VARIANT) aArgs );

    [id(8), helpstring("method addStatusListener")]
                HRESULT addStatusListener( [in] IDispatch* xControl,
                                           [in] IDispatch* aURL );

    [id(9), helpstring("method removeStatusListener")]
                HRESULT removeStatusListener( [in] IDispatch* xControl,
                                              [in] IDispatch* aURL );

// com.sun.star.frame.XInterceptorInfo


    [id(10), helpstring("method getInterceptedURLs")]
                HRESULT getInterceptedURLs( [out,retval] SAFEARRAY(BSTR)* pVal );

// the common UNO-COM staff
    [propget, id(11), helpstring("property_implementedInterfaces")]
                HRESULT Bridge_implementedInterfaces([out, retval] SAFEARRAY(BSTR) *pVal);

};




[
    object,
    uuid(029E9F1E-2B3F-4297-9160-8197DE7ED54F),
    dual,
    helpstring("ISOActionsApproval Interface"),
    pointer_default(unique)
]
interface ISOActionsApproval : IDispatch
{
//com.sun.star.embed.XActionsApproval

    [id(1), helpstring("method approveAction")]
                HRESULT approveAction( [in] long aActionID,
                                        [out,retval] boolean* pbApproval );

// the common UNO-COM staff
    [propget, id(2), helpstring("property_implementedInterfaces")]
                HRESULT Bridge_implementedInterfaces([out, retval] SAFEARRAY(BSTR) *pVal);
};



[
    uuid(61FA3F13-8061-4796-B055-3697ED28CB38),
    version(1.0),
    helpstring("so_activex 1.0 Type Library")
]
library SO_ACTIVEXLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(7F760565-5719-4F04-BA86-112C474B10EA),
        helpstring("_ISOActiveXEvents Interface")
    ]
    dispinterface _ISOActiveXEvents
    {
        properties:
        methods:
    };

    [
        uuid(67F2A879-82D5-4A6D-8CC5-FFB3C114B69D),
        helpstring("SOActiveX Class")
    ]
    coclass SOActiveX
    {
        [default] interface ISOActiveX;
        [default, source] dispinterface _ISOActiveXEvents;
    };

    [
        uuid(EE51BD3E-8BB6-4FB8-B319-F65B1BE3B21D),
        helpstring("SOComWindowPeer Class")
    ]
    coclass SOComWindowPeer
    {
        [default] interface ISOComWindowPeer;
    };

    [
        uuid(C5D6D568-57DA-4D6C-819A-451CB565E682),
        helpstring("SODispatchInterceptor Class")
    ]
    coclass SODispatchInterceptor
    {
        [default] interface ISODispatchInterceptor;
    };

    [
        uuid(9F3697AC-7A18-4335-AF0A-65FAC2C35CC1),
        helpstring("SOActionsApproval Class")
    ]
    coclass SOActionsApproval
    {
        [default] interface ISOActionsApproval;
    };

};

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
