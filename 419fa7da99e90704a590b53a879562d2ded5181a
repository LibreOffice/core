{
  "comments": [
    {
      "key": {
        "uuid": "3a57f1b5_449003ed",
        "filename": "sc/inc/externalrefmgr.hxx",
        "patchSetId": 3
      },
      "lineNbr": 703,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T19:49:35Z",
      "side": 1,
      "message": "Omit those tdf# comments, especially in a public doxygen description.",
      "range": {
        "startLine": 703,
        "startChar": 6,
        "endLine": 703,
        "endChar": 15
      },
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_fffe5804",
        "filename": "sc/inc/externalrefmgr.hxx",
        "patchSetId": 3
      },
      "lineNbr": 704,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T21:41:17Z",
      "side": 1,
      "message": "Nitpick: please maintain indentation of doxygen comments as seen for other comments.",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_e4bb2f74",
        "filename": "sc/inc/externalrefmgr.hxx",
        "patchSetId": 3
      },
      "lineNbr": 705,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T19:49:35Z",
      "side": 1,
      "message": "The Tmpl abbreviation is awkward, reads like temporary with an l suffix ;) Why not write Template?\n\nInstead of taking two ScAddress\u0026 it could take two ScFormulaCell*, as both are already known by the caller, so the implementation doesn\u0027t have to look them up again.",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_04c1abe4",
        "filename": "sc/inc/formulacell.hxx",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T19:49:35Z",
      "side": 1,
      "message": "tdf#... is unnecessary",
      "range": {
        "startLine": 146,
        "startChar": 45,
        "endLine": 146,
        "endChar": 54
      },
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_a4b5377f",
        "filename": "sc/inc/formulacell.hxx",
        "patchSetId": 3
      },
      "lineNbr": 431,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T19:49:35Z",
      "side": 1,
      "message": "ditto",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_c4bab36e",
        "filename": "sc/source/core/data/formulacell.cxx",
        "patchSetId": 3
      },
      "lineNbr": 1303,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T19:49:35Z",
      "side": 1,
      "message": "tdf#... is unnecessary. Rather document why this is done, if necessary.",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_64b09f8c",
        "filename": "sc/source/ui/docshell/externalrefmgr.cxx",
        "patchSetId": 3
      },
      "lineNbr": 2046,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T19:49:35Z",
      "side": 1,
      "message": "tdf#... is unnecessary",
      "range": {
        "startLine": 2046,
        "startChar": 11,
        "endLine": 2046,
        "endChar": 20
      },
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_640c1f43",
        "filename": "sc/source/ui/docshell/externalrefmgr.cxx",
        "patchSetId": 3
      },
      "lineNbr": 2067,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T21:41:17Z",
      "side": 1,
      "message": "Nitpick: one empty line between function bodies is eye pleasing ;)",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_24aaa71a",
        "filename": "sc/source/ui/docshell/externalrefmgr.cxx",
        "patchSetId": 3
      },
      "lineNbr": 2071,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T19:49:35Z",
      "side": 1,
      "message": "See comment in header file, looking ScFormulaCell* up from the document would be unnecessary if passed in.",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_24062721",
        "filename": "sc/source/ui/docshell/externalrefmgr.cxx",
        "patchSetId": 3
      },
      "lineNbr": 2074,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T21:41:17Z",
      "side": 1,
      "message": "Use pre-increment instead of post-increment with iterators, unless the previous value is to be obtained and remembered, so ++itr instead of itr++",
      "range": {
        "startLine": 2074,
        "startChar": 81,
        "endLine": 2074,
        "endChar": 86
      },
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_44a7a34f",
        "filename": "sc/source/ui/docshell/externalrefmgr.cxx",
        "patchSetId": 3
      },
      "lineNbr": 2076,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-04T19:49:35Z",
      "side": 1,
      "message": "This is ok because RefCellSet is a std::set so each element is unique anyway, the set::count() implementation hopefully shortcuts on that, but just be explicit and tell it what you want ;-) and use find(), which also expresses the intention better.",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_ff4c1878",
        "filename": "sc/source/ui/docshell/externalrefmgr.cxx",
        "patchSetId": 3
      },
      "lineNbr": 2076,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2015-06-05T03:10:03Z",
      "side": 1,
      "message": "I fail to see why \"find a position of a value in a set; find another special position past last element in the set; compare them\" expresses intention better (or tells more explicitly) than \"see if the value is met more than zero times in the set\", except \"we are used to that idiom\", esp. as the implementation of \"count\" for set is at least as efficient.",
      "parentUuid": "3a57f1b5_44a7a34f",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a57f1b5_ffe89818",
        "filename": "sc/source/ui/docshell/externalrefmgr.cxx",
        "patchSetId": 3
      },
      "lineNbr": 2076,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2015-06-05T09:41:12Z",
      "side": 1,
      "message": "It really doesn\u0027t matter with a set, or it\u0027s only a matter of taste. Either use count()!\u003d0 or find()!\u003dend(); personally I prefer find() just to express that it is a check for existence. Change to count() if you want ;)",
      "parentUuid": "3a57f1b5_ff4c1878",
      "revId": "419fa7da99e90704a590b53a879562d2ded5181a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}