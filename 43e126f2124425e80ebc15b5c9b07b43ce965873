{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ddc25630_4da57624",
        "filename": "vcl/backendtest/benchmark/outputdevice/Benchmarks.cxx",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-12-13T12:43:56Z",
      "side": 1,
      "message": "Note that calling a function does not mean the operation also gets executed by the function, the operation may only get queued for later. For example BitmapEx::Scale() does not actually scale the bitmap if the Skia backend is used, it\u0027s only flagged and then scaled only when needed. Drawing commands with Skia/Vulkan get only queued for the GPU and then flushed at once somewhen later. Even the GetBitmap() call, although it theoretically should ensure all drawing is done, might not necessarily do it as long as you don\u0027t use the bitmap.\n\nSo if you want to measure how long something takes, you need to make sure that the operation actually takes place, and also that you do not include delayed operations from before. That should generally be done by calling Flush() on the relevant object before measuring time. To make things even more complicated, it seems that Flush() is empty for OutputDevice and only implemented for WindowOutputDevice, so that would need to be added.",
      "revId": "43e126f2124425e80ebc15b5c9b07b43ce965873",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfabdd9c_db781bde",
        "filename": "vcl/backendtest/benchmark/outputdevice/Benchmarks.cxx",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1002896
      },
      "writtenOn": "2021-12-14T13:14:03Z",
      "side": 1,
      "message": "Okay, so should the time of total completion be measured by instantly using the bitmap itself after the GetBitmap() function call in each case and if so, what operation should specifically be performed with the bitmap so as to prevent unnecessary time addition to the benchmark?",
      "parentUuid": "ddc25630_4da57624",
      "revId": "43e126f2124425e80ebc15b5c9b07b43ce965873",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4086a604_b74dc83c",
        "filename": "vcl/backendtest/benchmark/outputdevice/Benchmarks.cxx",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-12-14T20:21:15Z",
      "side": 1,
      "message": "I think the only thing that\u0027d work 100% would be adding a specific Flush() call to Bitmap, which is probably an overkill. Realistically I think that just GetBitmap() will do the job well enough, and so calling OutputDevice::Flush() (and fixing it to actually flush) before any time call should be sufficient to get reasonably close.",
      "parentUuid": "bfabdd9c_db781bde",
      "revId": "43e126f2124425e80ebc15b5c9b07b43ce965873",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92a6d5d8_1a4ab77e",
        "filename": "vcl/backendtest/benchmark/outputdevice/Benchmarks.cxx",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2021-12-15T02:25:00Z",
      "side": 1,
      "message": "As a first solution we could just call BitmapInfoAccess access(aBitmap); which would call (in constructor) AccuireBuffer on SalBitmap and force a flush of draw calls. Implementation of OutputDevice::Flush can then be done in a separate commit.",
      "parentUuid": "4086a604_b74dc83c",
      "revId": "43e126f2124425e80ebc15b5c9b07b43ce965873",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de169db1_a67b943d",
        "filename": "vcl/backendtest/benchmark/outputdevice/Benchmarks.cxx",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-12-15T10:46:31Z",
      "side": 1,
      "message": "I wouldn\u0027t bother with BitmapInfoAccess. It only provides info such as size, none of which requires flushing of drawing commands, so it may not do anything. And BitmapReadAccess could do a relatively costly conversion, so it wouldn\u0027t be a good solution either. As far as I\u0027m concerned Flush() in a separate commit is good enough.",
      "parentUuid": "92a6d5d8_1a4ab77e",
      "revId": "43e126f2124425e80ebc15b5c9b07b43ce965873",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14605530_9c5a9674",
        "filename": "vcl/backendtest/benchmark/outputdevice/Benchmarks.cxx",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2021-12-15T14:06:17Z",
      "side": 1,
      "message": "Yeah.. I misremembered that the BitmapInfoAccess already forces the conversion to a compatible array of colors which would force flushing. I\u0027m not concerned about the costly conversion as long the cost is constant and not unreasonably large - at least not initially, but sure it is better if there is no additional processing that would have an influence on the result.",
      "parentUuid": "de169db1_a67b943d",
      "revId": "43e126f2124425e80ebc15b5c9b07b43ce965873",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a229557_ebb23a70",
        "filename": "vcl/backendtest/benchmark/outputdevice/Benchmarks.cxx",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-12-15T14:40:58Z",
      "side": 1,
      "message": "Some backends might need to convert from their internal format to whatever VCL expects, so it\u0027s not going to be constant. With some such as GPU-backed Skia/Vulkan it could even be somewhat large.",
      "parentUuid": "14605530_9c5a9674",
      "revId": "43e126f2124425e80ebc15b5c9b07b43ce965873",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}