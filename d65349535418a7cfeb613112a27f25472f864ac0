{
  "comments": [
    {
      "key": {
        "uuid": "df87a7cf_87342f4c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 12,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-04-09T06:46:43Z",
      "side": 1,
      "message": "oops, note how ResettableGuard::pResetT is protected, not private",
      "revId": "d65349535418a7cfeb613112a27f25472f864ac0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_473e272a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 12,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-04-09T06:49:31Z",
      "side": 1,
      "message": "oops indeed :-)",
      "parentUuid": "df87a7cf_87342f4c",
      "revId": "d65349535418a7cfeb613112a27f25472f864ac0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_a7eb73ae",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 12
      },
      "lineNbr": 23,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-04-09T06:25:33Z",
      "side": 1,
      "message": "better #include \u003csal/config.h\u003e before including anything else",
      "revId": "d65349535418a7cfeb613112a27f25472f864ac0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_47d067f8",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 12
      },
      "lineNbr": 184,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-04-09T06:25:33Z",
      "side": 1,
      "message": "This is unhelpful \"defensive programming\" now.  When the precondition is pT!\u003dnullptr, then we don\u0027t need the \"if(ptT)\" check.",
      "revId": "d65349535418a7cfeb613112a27f25472f864ac0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_87ff4f66",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 12
      },
      "lineNbr": 184,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-04-09T06:34:45Z",
      "side": 1,
      "message": "Fine - will change.\n\nMy intention (and reason for this specific form) was based on following assumptions and/or information:\n\n1. I wanted initially to keep the behavior (and only allow the diagnostic at debug time, to show developer own mistakes) to avoid actual API change (a wrong intention, I see)\n2. Doing that, I remembered that I read that assert() might be treated by compilers in a special way, so that seeing an assert, a smart compiler could potentially eliminate any following code paths that don;t satisfy the assert, so that\n\n    assert (pT);\n    if (pT)\n        foo();\n\ncould be changed by compiler into unconditional cal of foo() even in release code. (I don\u0027t know if that\u0027s actually true, but makers of PVS static analyzer claim so.) So I decided to put the assert after the check, to disallow the removal of the check. (Well, a smart enough compiler could still outsmart me here :-))",
      "parentUuid": "df87a7cf_47d067f8",
      "revId": "d65349535418a7cfeb613112a27f25472f864ac0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_67f6cb92",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 12
      },
      "lineNbr": 184,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-04-09T06:43:37Z",
      "side": 1,
      "message": "\"1. I wanted initially to keep the behavior (and only allow the diagnostic at debug time, to show developer own mistakes) to avoid actual API change (a wrong intention, I see)\":\n\nThen you could use SAL_WARN instead of assert.  But I at least am fine with any of the three ways going forward (SAL_WARN; assert w/o announcing [API CHANGE]; assert w/ announcing [API CHANGE]).\n\n\"(I don\u0027t know if that\u0027s actually true, but makers of PVS static analyzer claim so.)\":\n\nI don\u0027t think that\u0027s true.  The C/C++ standards only mandate the \"mechanical semantics\" of assert---where it is just a nop under NDEBUG.",
      "parentUuid": "df87a7cf_87ff4f66",
      "revId": "d65349535418a7cfeb613112a27f25472f864ac0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_27f0c390",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 12
      },
      "lineNbr": 184,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-04-09T06:45:42Z",
      "side": 1,
      "message": "There was also fourth option suggested: s/assert()/abort()/ - what do you think?",
      "parentUuid": "df87a7cf_67f6cb92",
      "revId": "d65349535418a7cfeb613112a27f25472f864ac0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_27d763f0",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 12
      },
      "lineNbr": 222,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-04-09T06:25:33Z",
      "side": 1,
      "message": "I would just write both asserts without the \u0026\u0026\"message\" idiom.  Potentially spares a bit of final code size, esp. for such a public-facing include file like this.",
      "revId": "d65349535418a7cfeb613112a27f25472f864ac0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}