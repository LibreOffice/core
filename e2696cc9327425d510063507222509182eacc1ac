{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "150f027d_3b43daa9",
        "filename": "sc/qa/extras/accessibility/basics.cxx",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2022-07-28T17:32:52Z",
      "side": 1,
      "message": "Ideally I\u0027d use `reinterpret_cast\u003cScDocument*\u003e(mxDocument.get())-\u003eGetFormatTable()-\u003eGetNullDate()` here, but somehow it crashes on me:\n #0  __GI___pthread_mutex_lock (mutex\u003d0xe900000090ee8148) at ../nptl/pthread_mutex_lock.c:67\n #1  0x00007ffff7ecb884 in osl_acquireMutex(oslMutex) (pMutex\u003d0xe900000090ee8148) at /â€¦/sal/osl/unx/mutex.cxx:100\n #2  0x00007ffff1a493d3 in osl::Mutex::acquire() (this\u003d0x7fffeab0b4d2 \u003cnon-virtual thunk to SfxBaseModel::getCurrentController()\u003e) at /â€¦/include/osl/mutex.hxx:63\n #3  0x00007ffff1a539b4 in osl::Guard\u003cosl::Mutex\u003e::Guard(osl::Mutex\u0026) (this\u003d0x7fffffff0500, t\u003d...) at /â€¦/include/osl/mutex.hxx:144\n #4  0x00007ffff1b59f30 in SvNumberFormatter::GetNullDate() const (this\u003d0x7fffeab0b4d2 \u003cnon-virtual thunk to SfxBaseModel::getCurrentController()\u003e)\n     at /â€¦/svl/source/numbers/zforlist.cxx:417\n #5  0x00007ffff470ac64 in TestCalcMenu::TestBody() (this\u003d0x55555630d2b0) at /â€¦/sc/qa/extras/accessibility/basics.cxx:74\n\nIf anybody has input on this I\u0027d be happy, but I guess using 1899-12-30 is good enough.",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "e2696cc9327425d510063507222509182eacc1ac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b524b2e_9b38d5a4",
        "filename": "sc/qa/extras/accessibility/basics.cxx",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-07-29T06:58:58Z",
      "side": 1,
      "message": "Couldn\u0027t figure out what\u0027s wrong here, but agree that 1899-12-30 should be fine.",
      "parentUuid": "150f027d_3b43daa9",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "e2696cc9327425d510063507222509182eacc1ac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df85e2c3_4e17bfde",
        "filename": "sc/qa/extras/accessibility/basics.cxx",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-07-29T08:19:13Z",
      "side": 1,
      "message": "Looking at it again, the `reinterpret_cast` looks problematic. Getting the null date via UNO works, so I\u0027d suggest to use that:\n\n    #include \u003ccom/sun/star/util/Date.hpp\u003e\n    #include \u003ccom/sun/star/util/XNumberFormatsSupplier.hpp\u003e\n    // ...\n    uno::Reference\u003ccss::util::XNumberFormatsSupplier\u003e xSupplier(mxDocument, uno::UNO_QUERY);\n    uno::Reference\u003ccss::beans::XPropertySet\u003e xFormatSettings \u003d xSupplier-\u003egetNumberFormatSettings();\n    css::util::Date aNullDate;\n    xSupplier-\u003egetNumberFormatSettings()-\u003egetPropertyValue(\"NullDate\") \u003e\u003e\u003d aNullDate;",
      "parentUuid": "4b524b2e_9b38d5a4",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "e2696cc9327425d510063507222509182eacc1ac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94210629_7222205d",
        "filename": "sc/qa/extras/accessibility/basics.cxx",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2022-07-29T12:53:44Z",
      "side": 1,
      "message": "Oops, that was late brain C++ on my part indeed.  Would have I used `dynamic_cast` as I intended, I would have caught it early.  This works as well:\n\n    auto pModelObj \u003d dynamic_cast\u003cScModelObj*\u003e(mxDocument.get());\n    CPPUNIT_ASSERT(pModelObj);\n    auto nullDate \u003d pModelObj-\u003eGetDocument()-\u003eGetFormatTable()-\u003eGetNullDate();\n\nBut I used your UNO version in PS9 as it seems fine and more inline with the calls around.  I was slightly afraid operator- wasn\u0027t going to work with `Date` and `css::util::Date`, but it does as expected so all is fine, thanks!",
      "parentUuid": "df85e2c3_4e17bfde",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "e2696cc9327425d510063507222509182eacc1ac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13467760_a16a40ca",
        "filename": "sc/qa/extras/accessibility/basics.cxx",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2022-07-28T17:32:52Z",
      "side": 1,
      "message": "In the unlikely case of e.g. a DST change that makes time go *backwards*, this should still work, and just make it less accurate -- which is not very important as we\u0027re mostly checking *something* has been inserted, and ideally we inserted what we expected.",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 79,
        "endChar": 23
      },
      "revId": "e2696cc9327425d510063507222509182eacc1ac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "094107ac_16d5cb4d",
        "filename": "sc/qa/extras/accessibility/basics.cxx",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-07-29T06:58:58Z",
      "side": 1,
      "message": "Nice!",
      "parentUuid": "13467760_a16a40ca",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 79,
        "endChar": 23
      },
      "revId": "e2696cc9327425d510063507222509182eacc1ac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b84c13f_f654f165",
        "filename": "sc/qa/extras/accessibility/basics.cxx",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2022-07-29T12:53:44Z",
      "side": 1,
      "message": "I updated that slightly realizing it was too forgiving, and basically made the LESSEQUAL check a noop.  Now I only to `value +\u003d 1` if `after \u003c before` as well, so I limit the situations where I allow the value to be \"unexpected\" to the case where the time I measured also swapped.  But this still allows DST going backwards, it just requires time to have not went back *and* forth during the call -- which is in my opinion a sane assumption ðŸ˜Š",
      "parentUuid": "094107ac_16d5cb4d",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 79,
        "endChar": 23
      },
      "revId": "e2696cc9327425d510063507222509182eacc1ac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}