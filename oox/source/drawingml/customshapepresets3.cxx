
// This file was generated by: ./generatePresetsCXX.pl

// Please, DO NOT EDIT.

// We mean it.

#include <oox/drawingml/customshapeproperties.hxx>
#include <oox/token/tokenmap.hxx>
#include <com/sun/star/awt/Rectangle.hpp>
#include <com/sun/star/awt/Size.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeAdjustmentValue.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeSegment.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeParameterPair.hpp>
#include <com/sun/star/drawing/EnhancedCustomShapeParameterType.hpp>

using namespace ::com::sun::star;
using namespace ::com::sun::star::beans;
using namespace ::com::sun::star::drawing;
using namespace ::com::sun::star::uno;

namespace oox { namespace drawingml {

namespace
{
class ShapeCstar6 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 28868);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        {
            Any aAny ((sal_Int32) 115470);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "hf";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(50000-$0 ,$0 ,50000))",
            "logwidth/2",
            "?1 *$1 /100000",
            "?2 *cos(pi*(1800000)/10800000)",
            "logwidth/2",
            "?4 +0-?3 ",
            "?4 +?3 -0",
            "logheight/2",
            "logheight/4",
            "?7 +?8 -0",
            "?2 *?0 /50000",
            "logheight/2",
            "?11 *?0 /50000",
            "?10 *1/2",
            "?4 +0-?10 ",
            "?4 +0-?13 ",
            "?4 +?13 -0",
            "?4 +?10 -0",
            "?12 *sin(pi*(3600000)/10800000)",
            "?7 +0-?18 ",
            "?7 +?18 -0",
            "?7 +0-?12 ",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 21
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 7
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,11,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        14, 19
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        17, 20
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-star6");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCround2SameRect : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 16667);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 0);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(50000-$0 ,$0 ,50000))",
            "if(0-$1 ,0,if(50000-$1 ,$1 ,50000))",
            "min(logwidth,logheight)",
            "?2 *?0 /100000",
            "logwidth+0-?3 ",
            "?2 *?1 /100000",
            "logwidth+0-?5 ",
            "logheight+0-?5 ",
            "?3 +0-?5 ",
            "?3 *29289/100000",
            "?5 *29289/100000",
            "if(?8 ,?9 ,?10 )",
            "logwidth+0-?11 ",
            "logheight+0-?10 ",
            "logheight",
            "logwidth",
            "logheight/2",
            "logwidth/2",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 14
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    20, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 5
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    22, 23
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 25
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                2,1,
                17,1,
                2,1,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        11, 9
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        12, 13
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-round2SameRect");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCnonIsoscelesTrapezoid : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "50000*logwidth/?0 ",
            "if(0-$0 ,0,if(?1 -$0 ,$0 ,?1 ))",
            "if(0-$1 ,0,if(?1 -$1 ,$1 ,?1 ))",
            "?0 *?2 /200000",
            "?0 *?2 /100000",
            "?0 *?3 /100000",
            "logwidth+0-?6 ",
            "(logwidth+?7 )/2",
            "logwidth/3",
            "?9 *?2 /?1 ",
            "max(?2 ,?3 )",
            "logheight/3",
            "?12 *?11 /?1 ",
            "?9 *?3 /?1 ",
            "logwidth+0-?14 ",
            "logheight/2",
            "logwidth/2",
            "logheight",
            "logwidth"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 18
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        10, 13
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        15, 18
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-nonIsoscelesTrapezoid");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCdiamond : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth*3/4",
            "logheight*3/4",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logwidth/4",
            "logheight/4"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 4
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        6, 7
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 1
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-diamond");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCcallout2 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (6);
        {
            Any aAny ((sal_Int32) 18750);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) -8333);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 18750);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        {
            Any aAny ((sal_Int32) -16667);
            aAdjSequence [3].Value = aAny;
            aAdjSequence [3].Name = "adj4";
        }
        {
            Any aAny ((sal_Int32) 112500);
            aAdjSequence [4].Value = aAny;
            aAdjSequence [4].Name = "adj5";
        }
        {
            Any aAny ((sal_Int32) -46667);
            aAdjSequence [5].Value = aAny;
            aAdjSequence [5].Name = "adj6";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "logheight*$0 /100000",
            "logwidth*$1 /100000",
            "logheight*$2 /100000",
            "logwidth*$3 /100000",
            "logheight*$4 /100000",
            "logwidth*$5 /100000",
            "logwidth",
            "logheight/2",
            "logwidth/2",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (3);
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    1, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 2
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 3);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 2);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 4
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 5);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 4);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [2] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 9
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 4
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                7,0,
                5,0,
                1,1,
                2,2,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        6, 9
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-callout2");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCellipseRibbon : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (3);
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 12500);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(100000-$0 ,$0 ,100000))",
            "if(25000-$1 ,25000,if(75000-$1 ,$1 ,75000))",
            "100000+0-?0 ",
            "?2 *1/2",
            "?0 +0-?3 ",
            "max(0,?4 )",
            "if(?5 -$2 ,?5 ,if(?0 -$2 ,$2 ,?0 ))",
            "logwidth*?1 /200000",
            "logwidth/2",
            "?8 +0-?7 ",
            "logwidth/8",
            "?9 +?10 -0",
            "logwidth+0-?11 ",
            "logwidth+0-?9 ",
            "logwidth+0-?10 ",
            "logheight*?6 /100000",
            "4*?15 /logwidth",
            "?11 *?11 /logwidth",
            "?11 +0-?17 ",
            "?16 *?18 /1",
            "?11 *1/2",
            "?16 *?20 /1",
            "logwidth+0-?20 ",
            "logheight*?0 /100000",
            "?23 +0-?15 ",
            "?9 *?9 /logwidth",
            "?9 +0-?25 ",
            "?16 *?26 /1",
            "?27 +?24 -0",
            "?15 +?24 -?28 ",
            "?29 +?15 -0",
            "?30 +?24 -0",
            "logheight+0-?23 ",
            "?15 *14/16",
            "(?33 +?32 )/2",
            "?27 +?32 -0",
            "?28 +?32 -0",
            "?9 *1/2",
            "?16 *?37 /1",
            "?38 +?32 -0",
            "logwidth+0-?37 ",
            "?31 +?32 -0",
            "?19 +?24 -0",
            "?23 +?23 -?42 ",
            "logheight+0-?15 ",
            "logheight",
            "logwidth"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (3);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 23
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 100000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 45
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 75000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 25000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 44
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 5);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 2);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [2] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    20, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 31
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    22, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    46, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    46, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    40, 39
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 39
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 31
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 43
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 42
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    20, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 31
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    22, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    46, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    46, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    40, 39
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 39
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 19
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                16,1,
                2,1,
                16,1,
                2,1,
                16,1,
                2,2,
                16,1,
                2,1,
                16,1,
                2,1,
                16,1,
                2,1,
                4,0,
                7,0,
                5,0,
                1,1,
                2,2,
                16,1,
                2,2,
                16,1,
                4,0,
                19,0,
                7,0,
                5,0,
                1,1,
                16,1,
                2,1,
                16,1,
                2,1,
                16,1,
                2,2,
                16,1,
                2,1,
                16,1,
                2,1,
                16,1,
                2,1,
                4,0,
                1,1,
                2,1,
                1,1,
                2,1,
                1,1,
                2,1,
                1,1,
                2,1,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        9, 23
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        13, 36
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-ellipseRibbon");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCpie : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 0);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 16200000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(21599999-$0 ,$0 ,21599999))",
            "if(0-$1 ,0,if(21599999-$1 ,$1 ,21599999))",
            "?1 +0-?0 ",
            "?2 +21600000-0",
            "if(?2 ,?2 ,?3 )",
            "logwidth/2",
            "?5 *sin(pi*(?0 )/10800000)",
            "logheight/2",
            "?7 *cos(pi*(?0 )/10800000)",
            "?5 *(cos(atan2(?6 ,?8 )))",
            "?7 *(sin(atan2(?6 ,?8 )))",
            "logwidth/2",
            "?11 +?9 -0",
            "logheight/2",
            "?13 +?10 -0",
            "?5 *sin(pi*(?1 )/10800000)",
            "?7 *cos(pi*(?1 )/10800000)",
            "?5 *(cos(atan2(?15 ,?16 )))",
            "?7 *(sin(atan2(?15 ,?16 )))",
            "?11 +?17 -0",
            "?13 +?18 -0",
            "?5 *cos(pi*(2700000)/10800000)",
            "?7 *sin(pi*(2700000)/10800000)",
            "?11 +0-?21 ",
            "?11 +?21 -0",
            "?13 +0-?22 ",
            "?13 +?22 -0",
            "logwidth",
            "logheight",
            "(?0 )/60000.0",
            "(?4 )/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (1);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 14
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (1);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 20
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 30
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 13
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        23, 24
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        25, 26
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-pie");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCstar4 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 12500);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(50000-$0 ,$0 ,50000))",
            "logwidth/2",
            "?1 *?0 /50000",
            "logheight/2",
            "?3 *?0 /50000",
            "?2 *cos(pi*(2700000)/10800000)",
            "?4 *sin(pi*(2700000)/10800000)",
            "logwidth/2",
            "?7 +0-?5 ",
            "?7 +?5 -0",
            "logheight/2",
            "?10 +0-?6 ",
            "?10 +?6 -0",
            "?10 +0-?4 ",
            "logheight",
            "logwidth"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 13
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 10
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 10
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 12
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,7,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        8, 11
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        9, 12
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-star4");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartPredefinedProcess : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth*7/8",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth",
            "logwidth/8"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                7,0,
                5,0,
                1,1,
                2,1,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                2,3,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 1;
                aSize.Height = 1;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 8;
                aSize.Height = 8;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 1;
                aSize.Height = 1;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        5, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-flowChartPredefinedProcess");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartPunchedTape : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logheight*9/10",
            "logheight*4/5",
            "logwidth/2",
            "logheight/10",
            "logheight/2",
            "logwidth",
            "logheight/5",
            "(10800000)/60000.0",
            "(-10800000)/60000.0",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(-10800000)/60000.0",
            "(0)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 8
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 10
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    20, 18
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 12
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 14
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,2,
                2,1,
                17,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 20;
                aSize.Height = 20;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 6
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 1
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-flowChartPunchedTape");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCcurvedConnector2 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth",
            "logheight",
            "logwidth/2",
            "logheight/2"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 1
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                3,1,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 1
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-curvedConnector2");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCbentConnector3 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "logwidth*$0 /100000",
            "logheight/2",
            "logwidth",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 1
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 3
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        2, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-bentConnector3");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCcornerTabs : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "sqrt(logwidth*logwidth+logheight*logheight+0*0)",
            "1*?0 /20",
            "0+logheight-?1 ",
            "0+logwidth-?1 ",
            "logheight",
            "logwidth"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    1, 4
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 4
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                4,0,
                5,0,
                1,1,
                2,2,
                4,0,
                5,0,
                1,1,
                2,2,
                4,0,
                5,0,
                1,1,
                2,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        1, 1
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        3, 2
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-cornerTabs");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeChexagon : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        {
            Any aAny ((sal_Int32) 115470);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "vf";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "50000*logwidth/?0 ",
            "if(0-$0 ,0,if(?1 -$0 ,$0 ,?1 ))",
            "logheight/2",
            "?3 *$1 /100000",
            "?0 *?2 /100000",
            "logwidth+0-?5 ",
            "?4 *sin(pi*(3600000)/10800000)",
            "logheight/2",
            "?8 +0-?7 ",
            "?8 +?7 -0",
            "?1 *-1/2",
            "?2 +?11 -0",
            "if(?12 ,4,2)",
            "if(?12 ,3,2)",
            "if(?12 ,?11 ,0)",
            "(?2 +?15 )/?11 ",
            "?16 *?14 /-1",
            "?13 +?17 -0",
            "logwidth*?18 /24",
            "logheight*?18 /24",
            "logwidth+0-?19 ",
            "logheight+0-?20 ",
            "logwidth"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 10
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 10
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,5,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        19, 20
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        21, 22
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-hexagon");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartConnector : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth/2",
            "?0 *cos(pi*(2700000)/10800000)",
            "logheight/2",
            "?2 *sin(pi*(2700000)/10800000)",
            "logwidth/2",
            "?4 +0-?1 ",
            "?4 +?1 -0",
            "logheight/2",
            "?7 +0-?3 ",
            "?7 +?3 -0",
            "logheight",
            "logwidth",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 13
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 15
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 19
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,4,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 8
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        6, 9
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-flowChartConnector");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartMagneticDisk : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logheight*5/6",
            "logwidth/2",
            "logheight/3",
            "logheight/2",
            "logheight",
            "logwidth",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(0)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 7
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 9
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 11
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 1
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 13
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 5
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 1
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 15
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                17,1,
                4,0,
                7,0,
                5,0,
                1,1,
                17,1,
                6,0,
                5,0,
                1,1,
                17,1,
                2,1,
                17,1,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 2
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 0
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-flowChartMagneticDisk");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCheart : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth*49/48",
            "logwidth*10/48",
            "logwidth/2",
            "?2 +0-?0 ",
            "?2 +0-?1 ",
            "?2 +?1 -0",
            "?2 +?0 -0",
            "logheight/3",
            "0+0-?7 ",
            "logwidth*1/6",
            "logwidth*5/6",
            "logheight*2/3",
            "logheight/4",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 13
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    4, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 12
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                3,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        9, 12
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        10, 11
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-heart");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCribbon2 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 16667);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(33333-$0 ,$0 ,33333))",
            "if(25000-$1 ,25000,if(75000-$1 ,$1 ,75000))",
            "logwidth/8",
            "logwidth+0-?2 ",
            "logwidth*?1 /200000",
            "logwidth/2",
            "?5 +0-?4 ",
            "?5 +?4 -0",
            "logwidth/32",
            "?6 +?8 -0",
            "?7 +0-?8 ",
            "?6 +?2 -0",
            "?7 +0-?2 ",
            "?11 +0-?8 ",
            "?12 +?8 -0",
            "logheight*?0 /200000",
            "logheight+0-?15 ",
            "logheight*?0 /100000",
            "logheight+0-?17 ",
            "0+?17 -0",
            "(?19 +logheight)/2",
            "logheight*?0 /400000",
            "logheight+0-?21 ",
            "?16 +0-?21 ",
            "logheight",
            "(5400000)/60000.0",
            "(-10800000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(16200000)/60000.0",
            "(10800000)/60000.0",
            "(16200000)/60000.0",
            "(-10800000)/60000.0",
            "logwidth",
            "(0)/60000.0",
            "(-5400000)/60000.0",
            "(16200000)/60000.0",
            "(-5400000)/60000.0",
            "(0)/60000.0",
            "(-5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(-10800000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(-10800000)/60000.0",
            "(16200000)/60000.0",
            "(-10800000)/60000.0",
            "(16200000)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 18
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 33333);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 24
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 75000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 25000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 26
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 30
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    31, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    34, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    9, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    36, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 19
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    38, 39
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    40, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    42, 43
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    44, 45
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 18
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 20
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    46, 47
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    48, 49
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    50, 51
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    52, 53
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    54, 55
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    56, 57
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 23
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 23
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                2,1,
                17,1,
                2,1,
                17,1,
                2,5,
                17,1,
                2,1,
                17,1,
                2,3,
                4,0,
                7,0,
                5,0,
                1,1,
                17,1,
                2,1,
                17,1,
                2,1,
                4,0,
                1,1,
                17,1,
                2,1,
                17,1,
                2,1,
                4,0,
                19,0,
                7,0,
                5,0,
                1,1,
                2,4,
                17,1,
                2,1,
                17,1,
                2,6,
                17,1,
                2,1,
                17,1,
                2,1,
                17,1,
                2,1,
                17,1,
                4,0,
                1,1,
                2,1,
                1,1,
                2,1,
                1,1,
                2,1,
                1,1,
                2,1,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        6, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        7, 18
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-ribbon2");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCbracePair : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 8333);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(25000-$0 ,$0 ,25000))",
            "min(logwidth,logheight)",
            "?1 *?0 /100000",
            "?1 *?0 /50000",
            "logwidth+0-?3 ",
            "logwidth+0-?2 ",
            "logheight/2",
            "?6 +0-?2 ",
            "?6 +?2 -0",
            "logheight+0-?2 ",
            "?2 *29289/100000",
            "?2 +?10 -0",
            "logwidth+0-?11 ",
            "logheight+0-?10 ",
            "logwidth/2",
            "logheight",
            "logwidth",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(-5400000)/60000.0",
            "(5400000)/60000.0",
            "(-5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(-5400000)/60000.0",
            "(16200000)/60000.0",
            "(-5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(-5400000)/60000.0",
            "(5400000)/60000.0",
            "(-5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(-5400000)/60000.0",
            "(16200000)/60000.0",
            "(-5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 2
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 25000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 15
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 26
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 30
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    31, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 15
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    37, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    39, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    41, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    43, 44
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    45, 46
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    47, 48
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                17,2,
                2,1,
                17,1,
                2,1,
                17,1,
                2,1,
                17,2,
                2,1,
                17,1,
                4,0,
                7,0,
                5,0,
                1,1,
                17,1,
                2,1,
                17,2,
                2,1,
                17,1,
                1,1,
                17,1,
                2,1,
                17,2,
                2,1,
                17,1,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        11, 11
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        12, 13
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-bracePair");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartExtract : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth*3/4",
            "logwidth/2",
            "logwidth/4",
            "logheight/2",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 2
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 2
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        2, 3
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 4
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-flowChartExtract");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCactionButtonHome : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "?0 *3/8",
            "logheight/2",
            "?2 +0-?1 ",
            "?2 +?1 -0",
            "logwidth/2",
            "?5 +0-?1 ",
            "?5 +?1 -0",
            "?0 *3/4",
            "?8 *1/16",
            "?8 *1/8",
            "?8 *3/16",
            "?8 *5/16",
            "?8 *7/16",
            "?8 *9/16",
            "?8 *11/16",
            "?8 *3/4",
            "?8 *13/16",
            "?8 *7/8",
            "?3 +?9 -0",
            "?3 +?11 -0",
            "?3 +?12 -0",
            "?3 +?16 -0",
            "?6 +?10 -0",
            "?6 +?13 -0",
            "?6 +?14 -0",
            "?6 +?15 -0",
            "?6 +?17 -0",
            "?6 +?18 -0",
            "logwidth",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    29, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 30
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 30
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 4
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    29, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 30
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 30
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                1,1,
                2,10,
                4,0,
                7,0,
                5,0,
                1,1,
                2,3,
                4,0,
                1,1,
                2,7,
                4,0,
                19,0,
                7,0,
                5,0,
                1,1,
                2,2,
                4,0,
                1,1,
                2,3,
                4,0,
                18,0,
                7,0,
                5,0,
                1,1,
                2,10,
                4,0,
                1,1,
                2,1,
                1,1,
                2,1,
                1,1,
                2,3,
                6,0,
                5,0,
                1,1,
                2,3,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        29, 30
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-actionButtonHome");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCaccentBorderCallout3 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (8);
        {
            Any aAny ((sal_Int32) 18750);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) -8333);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 18750);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        {
            Any aAny ((sal_Int32) -16667);
            aAdjSequence [3].Value = aAny;
            aAdjSequence [3].Name = "adj4";
        }
        {
            Any aAny ((sal_Int32) 100000);
            aAdjSequence [4].Value = aAny;
            aAdjSequence [4].Name = "adj5";
        }
        {
            Any aAny ((sal_Int32) -16667);
            aAdjSequence [5].Value = aAny;
            aAdjSequence [5].Name = "adj6";
        }
        {
            Any aAny ((sal_Int32) 112963);
            aAdjSequence [6].Value = aAny;
            aAdjSequence [6].Name = "adj7";
        }
        {
            Any aAny ((sal_Int32) -8333);
            aAdjSequence [7].Value = aAny;
            aAdjSequence [7].Name = "adj8";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "logheight*$0 /100000",
            "logwidth*$1 /100000",
            "logheight*$2 /100000",
            "logwidth*$3 /100000",
            "logheight*$4 /100000",
            "logwidth*$5 /100000",
            "logheight*$6 /100000",
            "logwidth*$7 /100000",
            "logwidth",
            "logheight/2",
            "logwidth/2",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (4);
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    1, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 2
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 3);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 2);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 4
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 5);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 4);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [2] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 6
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 7);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 6);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [3] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    8, 11
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    1, 11
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 2
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 6
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                5,0,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                2,3,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        8, 11
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-accentBorderCallout3");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartOfflineStorage : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth*3/4",
            "logheight/2",
            "logwidth/2",
            "logheight",
            "logwidth/4"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 2
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 4
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 4
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    2, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 2
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,2,
                4,0,
                7,0,
                5,0,
                1,1,
                2,1,
                6,0,
                5,0,
                1,1,
                2,2,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (3);
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [0] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 5;
                aSize.Height = 5;
                aSizeSequence [1] = aSize;
            }
            {
                awt::Size aSize;
                aSize.Width = 2;
                aSize.Height = 2;
                aSizeSequence [2] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        4, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 1
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-flowChartOfflineStorage");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCirregularSeal1 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth*4627/21600",
            "logwidth*8485/21600",
            "logwidth*16702/21600",
            "logwidth*14522/21600",
            "logheight*6320/21600",
            "logheight*8615/21600",
            "logheight*13937/21600",
            "logheight*13290/21600",
            "logheight",
            "logwidth"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10800, 5800
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    14522, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    14155, 5325
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18380, 4457
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    16702, 7315
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21097, 8137
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    17607, 10475
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    21600, 13290
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    16837, 12942
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    18145, 18095
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    14020, 14457
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    13247, 19737
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10532, 14935
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8485, 21600
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7715, 15627
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4762, 17617
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    5667, 13937
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    135, 14587
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3722, 11775
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 8615
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4627, 7617
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    370, 2295
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    7312, 6320
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    8352, 2295
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,23,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 21600;
                aSize.Height = 21600;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 4
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        2, 6
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-irregularSeal1");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCquadArrow : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (3);
        {
            Any aAny ((sal_Int32) 22500);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 22500);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 22500);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$1 ,0,if(50000-$1 ,$1 ,50000))",
            "?0 *2/1",
            "if(0-$0 ,0,if(?1 -$0 ,$0 ,?1 ))",
            "100000+0-?1 ",
            "?3 *1/2",
            "if(0-$2 ,0,if(?4 -$2 ,$2 ,?4 ))",
            "min(logwidth,logheight)",
            "?6 *?5 /100000",
            "?6 *?0 /100000",
            "logwidth/2",
            "?9 +0-?8 ",
            "?9 +?8 -0",
            "?6 *?2 /200000",
            "?9 +0-?12 ",
            "?9 +?12 -0",
            "logwidth+0-?7 ",
            "logheight/2",
            "?16 +0-?8 ",
            "?16 +?8 -0",
            "?16 +0-?12 ",
            "?16 +?12 -0",
            "logheight+0-?7 ",
            "?12 *?7 /?8 ",
            "logwidth+0-?22 ",
            "logwidth",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (3);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 7
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    10, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 7
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 4);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 2);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [2] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    9, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 19
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    24, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    9, 25
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 21
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 18
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,23,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        22, 19
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        23, 20
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-quadArrow");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCleftBrace : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 8333);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$1 ,0,if(100000-$1 ,$1 ,100000))",
            "100000+0-?0 ",
            "min(?1 ,?0 )",
            "?2 *1/2",
            "min(logwidth,logheight)",
            "?3 *logheight/?4 ",
            "if(0-$0 ,0,if(?5 -$0 ,$0 ,?5 ))",
            "?4 *?6 /100000",
            "logheight*?0 /100000",
            "?8 +?7 -0",
            "logwidth/2",
            "?10 *cos(pi*(2700000)/10800000)",
            "?7 *sin(pi*(2700000)/10800000)",
            "logwidth+0-?11 ",
            "?7 +0-?12 ",
            "logheight+?12 -?7 ",
            "logwidth/2",
            "logwidth",
            "logheight",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(-5400000)/60000.0",
            "(5400000)/60000.0",
            "(-5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(-5400000)/60000.0",
            "(5400000)/60000.0",
            "(-5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 7
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 5);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 8
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 100000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 22
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 24
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 26
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    17, 18
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 28
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 30
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    31, 32
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 34
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                17,2,
                2,1,
                17,1,
                4,0,
                7,0,
                5,0,
                1,1,
                17,1,
                2,1,
                17,2,
                2,1,
                17,1,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        13, 14
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        17, 15
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-leftBrace");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCleftBracket : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 8333);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "50000*logheight/?0 ",
            "if(0-$0 ,0,if(?1 -$0 ,$0 ,?1 ))",
            "?0 *?2 /100000",
            "logheight+0-?3 ",
            "logwidth*cos(pi*(2700000)/10800000)",
            "?3 *sin(pi*(2700000)/10800000)",
            "logwidth+0-?5 ",
            "?3 +0-?6 ",
            "logheight+?6 -?3 ",
            "logwidth",
            "logheight/2",
            "logheight",
            "logwidth",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    14, 15
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    16, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 12
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 19
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    20, 21
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                17,1,
                4,0,
                7,0,
                5,0,
                1,1,
                17,1,
                2,1,
                17,1,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        7, 8
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        10, 9
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-leftBracket");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCblockArc : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (3);
        {
            Any aAny ((sal_Int32) 10800000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 0);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 25000);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(21599999-$0 ,$0 ,21599999))",
            "if(0-$1 ,0,if(21599999-$1 ,$1 ,21599999))",
            "if(0-$2 ,0,if(50000-$2 ,$2 ,50000))",
            "?1 +0-?0 ",
            "?3 +21600000-0",
            "if(?3 ,?3 ,?4 )",
            "0+0-?5 ",
            "logwidth/2",
            "?7 *sin(pi*(?0 )/10800000)",
            "logheight/2",
            "?9 *cos(pi*(?0 )/10800000)",
            "?7 *sin(pi*(?1 )/10800000)",
            "?9 *cos(pi*(?1 )/10800000)",
            "?7 *(cos(atan2(?8 ,?10 )))",
            "?9 *(sin(atan2(?8 ,?10 )))",
            "?7 *(cos(atan2(?11 ,?12 )))",
            "?9 *(sin(atan2(?11 ,?12 )))",
            "logwidth/2",
            "?17 +?13 -0",
            "logheight/2",
            "?19 +?14 -0",
            "?17 +?15 -0",
            "?19 +?16 -0",
            "min(logwidth,logheight)",
            "?23 *?2 /100000",
            "?7 +0-?24 ",
            "?9 +0-?24 ",
            "?25 *sin(pi*(?1 )/10800000)",
            "?26 *cos(pi*(?1 )/10800000)",
            "?25 *sin(pi*(?0 )/10800000)",
            "?26 *cos(pi*(?0 )/10800000)",
            "?25 *(cos(atan2(?27 ,?28 )))",
            "?26 *(sin(atan2(?27 ,?28 )))",
            "?25 *(cos(atan2(?29 ,?30 )))",
            "?26 *(sin(atan2(?29 ,?30 )))",
            "?17 +?31 -0",
            "?19 +?32 -0",
            "?17 +?33 -0",
            "?19 +?34 -0",
            "21600000+0-?0 ",
            "?5 +0-?39 ",
            "max(?18 ,?35 )",
            "max(?21 ,?37 )",
            "max(?41 ,?42 )",
            "if(?40 ,logwidth,?43 )",
            "5400000+0-?0 ",
            "27000000+0-?0 ",
            "if(?45 ,?45 ,?46 )",
            "?5 +0-?47 ",
            "max(?20 ,?36 )",
            "max(?22 ,?38 )",
            "max(?49 ,?50 )",
            "if(?48 ,logheight,?51 )",
            "10800000+0-?0 ",
            "32400000+0-?0 ",
            "if(?53 ,?53 ,?54 )",
            "?5 +0-?55 ",
            "min(?18 ,?35 )",
            "min(?21 ,?37 )",
            "min(?57 ,?58 )",
            "if(?56 ,0,?59 )",
            "16200000+0-?0 ",
            "37800000+0-?0 ",
            "if(?61 ,?61 ,?62 )",
            "?5 +0-?63 ",
            "min(?20 ,?36 )",
            "min(?22 ,?38 )",
            "min(?65 ,?66 )",
            "if(?64 ,0,?67 )",
            "(?18 +?37 )/2",
            "(?20 +?38 )/2",
            "(?21 +?35 )/2",
            "(?22 +?36 )/2",
            "?0 +0-5400000",
            "?1 +5400000-0",
            "(?73 +?74 )/2",
            "(?0 )/60000.0",
            "(?5 )/60000.0",
            "(?1 )/60000.0",
            "(?6 )/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (1);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 20
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (3);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 36
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RadiusRangeMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RadiusRangeMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    18, 20
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    76, 77
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 26
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    78, 79
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,1,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        60, 68
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        44, 52
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-blockArc");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCcurvedConnector3 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (1);
        {
            Any aAny ((sal_Int32) 50000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "logwidth*$0 /100000",
            "(0+?0 )/2",
            "(logwidth+?0 )/2",
            "logheight*3/4",
            "logheight/2",
            "logwidth",
            "logheight",
            "logheight/4"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 4
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 4
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    2, 6
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 6
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                3,2,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        5, 6
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-curvedConnector3");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCwedgeRoundRectCallout : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (3);
        {
            Any aAny ((sal_Int32) -20833);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 62500);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        {
            Any aAny ((sal_Int32) 16667);
            aAdjSequence [2].Value = aAny;
            aAdjSequence [2].Name = "adj3";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "logwidth*$0 /100000",
            "logheight*$1 /100000",
            "logwidth/2",
            "?2 +?0 -0",
            "logheight/2",
            "?4 +?1 -0",
            "?0 *logheight/logwidth",
            "abs(?1 )",
            "abs(?6 )",
            "?7 +0-?8 ",
            "if(?0 ,7,2)",
            "if(?0 ,10,5)",
            "logwidth*?10 /12",
            "logwidth*?11 /12",
            "if(?1 ,7,2)",
            "if(?1 ,10,5)",
            "logheight*?14 /12",
            "logheight*?15 /12",
            "if(?0 ,0,?3 )",
            "if(?9 ,0,?18 )",
            "if(?1 ,?12 ,?3 )",
            "if(?9 ,?20 ,?12 )",
            "if(?0 ,?3 ,logwidth)",
            "if(?9 ,logwidth,?22 )",
            "if(?1 ,?3 ,?12 )",
            "if(?9 ,?24 ,?12 )",
            "if(?0 ,?16 ,?5 )",
            "if(?9 ,?16 ,?26 )",
            "if(?1 ,0,?5 )",
            "if(?9 ,?28 ,0)",
            "if(?0 ,?5 ,?16 )",
            "if(?9 ,?16 ,?30 )",
            "if(?1 ,?5 ,logheight)",
            "if(?9 ,?32 ,logheight)",
            "min(logwidth,logheight)",
            "?34 *$2 /100000",
            "logwidth+0-?35 ",
            "logheight+0-?35 ",
            "?35 *29289/100000",
            "logwidth+0-?38 ",
            "logheight+0-?38 ",
            "logheight",
            "logwidth",
            "(10800000)/60000.0",
            "(5400000)/60000.0",
            "(16200000)/60000.0",
            "(5400000)/60000.0",
            "(0)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0",
            "(5400000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (1);
        {
            Sequence< PropertyValue > aPropSequence (7);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 5
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [3].Value = makeAny (aParameter);
            }
            {
                aPropSequence [4].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) -2147483647);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [4].Value = makeAny (aParameter);
            }
            {
                aPropSequence [5].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [5].Value = makeAny (aAny);
            }
            {
                aPropSequence [6].Name = "RefY";
                Any aAny ((sal_Int32) 1);
                aPropSequence [6].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    43, 44
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    12, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    21, 29
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    13, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    36, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    45, 46
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    42, 16
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    23, 31
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    42, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    42, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    47, 48
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    13, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    25, 33
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    12, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    35, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    49, 50
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 17
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    19, 27
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 16
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                17,1,
                2,4,
                17,1,
                2,4,
                17,1,
                2,4,
                17,1,
                2,3,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        38, 38
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        39, 40
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-wedgeRoundRectCallout");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCactionButtonMovie : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "?0 *3/8",
            "logheight/2",
            "?2 +0-?1 ",
            "?2 +?1 -0",
            "logwidth/2",
            "?5 +0-?1 ",
            "?5 +?1 -0",
            "?0 *3/4",
            "?8 *1455/21600",
            "?8 *1905/21600",
            "?8 *2325/21600",
            "?8 *16155/21600",
            "?8 *17010/21600",
            "?8 *19335/21600",
            "?8 *19725/21600",
            "?8 *20595/21600",
            "?8 *5280/21600",
            "?8 *5730/21600",
            "?8 *6630/21600",
            "?8 *7492/21600",
            "?8 *9067/21600",
            "?8 *9555/21600",
            "?8 *13342/21600",
            "?8 *14580/21600",
            "?8 *15592/21600",
            "?6 +?9 -0",
            "?6 +?10 -0",
            "?6 +?11 -0",
            "?6 +?12 -0",
            "?6 +?13 -0",
            "?6 +?14 -0",
            "?6 +?15 -0",
            "?6 +?16 -0",
            "?3 +?17 -0",
            "?3 +?18 -0",
            "?3 +?19 -0",
            "?3 +?20 -0",
            "?3 +?21 -0",
            "?3 +?22 -0",
            "?3 +?23 -0",
            "?3 +?24 -0",
            "?3 +?25 -0",
            "?3 +?26 -0",
            "logwidth",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    44, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    44, 45
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 45
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 39
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 39
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    31, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    32, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 39
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 39
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    31, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    32, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 34
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    29, 35
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    32, 37
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 36
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    33, 41
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    31, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    30, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 42
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    28, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 38
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    26, 39
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 39
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    44, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    44, 45
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 45
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                4,0,
                1,1,
                2,18,
                4,0,
                7,0,
                5,0,
                1,1,
                2,18,
                4,0,
                18,0,
                7,0,
                5,0,
                1,1,
                2,18,
                4,0,
                6,0,
                5,0,
                1,1,
                2,3,
                4,0,
                6,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        44, 45
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-actionButtonMovie");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCflowChartOnlineStorage : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        aPropertyMap [PROP_AdjustmentValues] <<= Sequence< OUString >(0);
    }
    {
        static const char *aStrings[] = {
            "logwidth*5/6",
            "logwidth/2",
            "logheight/2",
            "logheight",
            "logwidth/6",
            "(16200000)/60000.0",
            "(-10800000)/60000.0",
            "(5400000)/60000.0",
            "(10800000)/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        aPropertyMap [PROP_Handles] <<= Sequence< OUString >(0);
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (4);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    6, 0
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 6
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 6
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    1, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    7, 8
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,1,
                17,1,
                2,1,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "SubViewSize";
            Sequence< awt::Size > aSizeSequence (1);
            {
                awt::Size aSize;
                aSize.Width = 6;
                aSize.Height = 6;
                aSizeSequence [0] = aSize;
            }
            aPropSequence [2].Value = makeAny (aSizeSequence);
        }
        {
            aPropSequence [3].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::NORMAL,
                        4, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        0, 3
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [3].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-flowChartOnlineStorage");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCgear6 : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 15000);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 3526);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(20000-$0 ,$0 ,20000))",
            "if(0-$1 ,0,if(5358-$1 ,$1 ,5358))",
            "min(logwidth,logheight)",
            "?2 *?0 /100000",
            "?2 *?1 /100000",
            "?3 *1/2",
            "?4 *1/2",
            "?5 +?6 -0",
            "logheight/2",
            "?8 +0-?3 ",
            "logwidth/2",
            "?10 +0-?3 ",
            "?11 +0-?9 ",
            "if(?12 ,?9 ,?11 )",
            "(10800000*atan2(?7 ,?13 ))/pi",
            "19800000+0-?14 ",
            "19800000+?14 -0",
            "?11 *cos(pi*(?15 )/10800000)",
            "?9 *sin(pi*(?15 )/10800000)",
            "(10800000*atan2(?18 ,?17 ))/pi",
            "?9 *cos(pi*(?19 )/10800000)",
            "?11 *sin(pi*(?19 )/10800000)",
            "sqrt(?20 *?20 +?21 *?21 +0*0)",
            "?11 *?9 /?22 ",
            "?23 *cos(pi*(?19 )/10800000)",
            "?23 *sin(pi*(?19 )/10800000)",
            "logwidth/2",
            "?26 +?24 -0",
            "logheight/2",
            "?28 +?25 -0",
            "?11 *cos(pi*(?16 )/10800000)",
            "?9 *sin(pi*(?16 )/10800000)",
            "(10800000*atan2(?31 ,?30 ))/pi",
            "?9 *cos(pi*(?32 )/10800000)",
            "?11 *sin(pi*(?32 )/10800000)",
            "sqrt(?33 *?33 +?34 *?34 +0*0)",
            "?11 *?9 /?35 ",
            "?36 *cos(pi*(?32 )/10800000)",
            "?36 *sin(pi*(?32 )/10800000)",
            "?26 +?37 -0",
            "?28 +?38 -0",
            "?27 +0-?39 ",
            "?29 +0-?40 ",
            "sqrt(?41 *?41 +?42 *?42 +0*0)",
            "(10800000*atan2(?41 ,?42 ))/pi",
            "?4 *sin(pi*(?44 )/10800000)",
            "?4 *cos(pi*(?44 )/10800000)",
            "?39 +?45 -0",
            "?40 +?46 -0",
            "?27 +0-?45 ",
            "?29 +0-?46 ",
            "?3 *sin(pi*(?44 )/10800000)",
            "?3 *cos(pi*(?44 )/10800000)",
            "?48 +?51 -0",
            "?47 +0-?52 ",
            "?50 +?51 -0",
            "?49 +0-?52 ",
            "16200000+?14 -0",
            "?11 *cos(pi*(?57 )/10800000)",
            "?9 *sin(pi*(?57 )/10800000)",
            "(10800000*atan2(?59 ,?58 ))/pi",
            "?9 *cos(pi*(?60 )/10800000)",
            "?11 *sin(pi*(?60 )/10800000)",
            "sqrt(?61 *?61 +?62 *?62 +0*0)",
            "?11 *?9 /?63 ",
            "?64 *cos(pi*(?60 )/10800000)",
            "?64 *sin(pi*(?60 )/10800000)",
            "?26 +?65 -0",
            "?28 +?66 -0",
            "?26 +0-?65 ",
            "?67 +0-?4 ",
            "?69 +?4 -0",
            "?68 +0-?3 ",
            "?19 +0-?60 ",
            "1800000+0-?14 ",
            "1800000+?14 -0",
            "?11 *cos(pi*(?74 )/10800000)",
            "?9 *sin(pi*(?74 )/10800000)",
            "(10800000*atan2(?77 ,?76 ))/pi",
            "logheight+0-?40 ",
            "?11 *cos(pi*(?75 )/10800000)",
            "?9 *sin(pi*(?75 )/10800000)",
            "(10800000*atan2(?81 ,?80 ))/pi",
            "logheight+0-?29 ",
            "logheight+0-?55 ",
            "logheight+0-?53 ",
            "?54 ",
            "?78 +0-?32 ",
            "5400000+?14 -0",
            "?11 *cos(pi*(?88 )/10800000)",
            "?9 *sin(pi*(?88 )/10800000)",
            "(10800000*atan2(?90 ,?89 ))/pi",
            "logheight+0-?68 ",
            "logheight+0-?72 ",
            "9000000+?14 -0",
            "?11 *cos(pi*(?94 )/10800000)",
            "?9 *sin(pi*(?94 )/10800000)",
            "(10800000*atan2(?96 ,?95 ))/pi",
            "logwidth+0-?39 ",
            "logwidth+0-?54 ",
            "logwidth+0-?56 ",
            "12600000+?14 -0",
            "?11 *cos(pi*(?101 )/10800000)",
            "?9 *sin(pi*(?101 )/10800000)",
            "(10800000*atan2(?103 ,?102 ))/pi",
            "logwidth+0-?27 ",
            "logwidth+0-?56 ",
            "logwidth+0-?54 ",
            "(?56 +?54 )/2",
            "(?55 +?53 )/2",
            "logheight+0-?109 ",
            "(logwidth+0)/?108 ",
            "(?32 )/60000.0",
            "(?87 )/60000.0",
            "(?82 )/60000.0",
            "(?73 )/60000.0",
            "(?91 )/60000.0",
            "(?73 )/60000.0",
            "(?97 )/60000.0",
            "(?87 )/60000.0",
            "(?104 )/60000.0",
            "(?73 )/60000.0",
            "(?60 )/60000.0",
            "(?73 )/60000.0"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    67, 68
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 20000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    69, 68
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 5358);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 29
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    56, 55
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    54, 53
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    39, 40
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    112, 113
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    54, 85
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    56, 84
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    27, 83
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    114, 115
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    70, 93
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    71, 93
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    69, 92
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    116, 117
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    100, 84
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    99, 85
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    98, 79
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    118, 119
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    107, 53
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    106, 55
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    105, 29
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    120, 121
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    71, 72
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    70, 72
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    67, 68
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    11, 9
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    122, 123
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                2,3,
                17,1,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        105, 29
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        27, 83
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-gear6");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeChalfFrame : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 33333);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 33333);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "min(logwidth,logheight)",
            "100000*logwidth/?0 ",
            "if(0-$1 ,0,if(?1 -$1 ,$1 ,?1 ))",
            "?0 *?2 /100000",
            "logheight*?3 /logwidth",
            "logheight+0-?4 ",
            "100000*?5 /?0 ",
            "if(0-$0 ,0,if(?6 -$0 ,$0 ,?6 ))",
            "?0 *?7 /100000",
            "?8 *logwidth/logheight",
            "logwidth+0-?9 ",
            "?3 *logheight/logwidth",
            "logheight+0-?11 ",
            "?3 *1/2",
            "(?12 +logheight)/2",
            "(?10 +logwidth)/2",
            "?8 *1/2",
            "logheight/2",
            "logwidth/2",
            "logwidth",
            "logheight"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 8
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeYMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 6);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeYMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefY";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 1);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::EQUATION;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::NORMAL,
                    0, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    19, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    10, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 8
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    3, 12
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 20
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,5,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::NORMAL,
                        EnhancedCustomShapeParameterType::NORMAL,
                        0, 0
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        19, 20
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-halfFrame");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

class ShapeCsnip2SameRect : public CustomShapeProvider
{
  virtual PropertyMap getProperties()
  {
    PropertyMap aPropertyMap;

    {
        Sequence< EnhancedCustomShapeAdjustmentValue > aAdjSequence (2);
        {
            Any aAny ((sal_Int32) 16667);
            aAdjSequence [0].Value = aAny;
            aAdjSequence [0].Name = "adj1";
        }
        {
            Any aAny ((sal_Int32) 0);
            aAdjSequence [1].Value = aAny;
            aAdjSequence [1].Name = "adj2";
        }
        aPropertyMap [PROP_AdjustmentValues] <<= aAdjSequence;
    }
    {
        static const char *aStrings[] = {
            "if(0-$0 ,0,if(50000-$0 ,$0 ,50000))",
            "if(0-$1 ,0,if(50000-$1 ,$1 ,50000))",
            "min(logwidth,logheight)",
            "?2 *?0 /100000",
            "logwidth+0-?3 ",
            "?2 *?1 /100000",
            "logwidth+0-?5 ",
            "logheight+0-?5 ",
            "?3 +0-?5 ",
            "if(?8 ,?3 ,?5 )",
            "?9 *1/2",
            "logwidth+0-?10 ",
            "?3 *1/2",
            "(?7 +logheight)/2",
            "logheight",
            "logwidth",
            "logheight/2",
            "logwidth/2"
        };
        aPropertyMap [PROP_Equations] <<= createStringSequence( SAL_N_ELEMENTS( aStrings ), aStrings );
    }
    {
        Sequence< Sequence < PropertyValue > > aPropSequenceSequence (2);
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 0);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [0] = aPropSequence;
        }
        {
            Sequence< PropertyValue > aPropSequence (4);
            {
                aPropSequence [0].Name = "Position";
                static const CustomShapeProvider::ParameterPairData aData =
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 14
                };
                aPropSequence [0].Value = makeAny (createParameterPair(&aData));
            }
            {
                aPropSequence [1].Name = "RangeXMaximum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 50000);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [1].Value = makeAny (aParameter);
            }
            {
                aPropSequence [2].Name = "RangeXMinimum";
                EnhancedCustomShapeParameter aParameter;
                Any aAny ((sal_Int32) 0);
                aParameter.Value = aAny;
                aParameter.Type = EnhancedCustomShapeParameterType::NORMAL;
                aPropSequence [2].Value = makeAny (aParameter);
            }
            {
                aPropSequence [3].Name = "RefX";
                Any aAny ((sal_Int32) 1);
                aPropSequence [3].Value = makeAny (aAny);
            }
            aPropSequenceSequence [1] = aPropSequence;
        }
        aPropertyMap [PROP_Handles] <<= aPropSequenceSequence;
    }
    {
        aPropertyMap [PROP_MirroredX] <<= Any ((sal_Bool) sal_False);
    }
    {
        aPropertyMap [PROP_MirroredY] <<= Any ((sal_Bool) sal_False);
    }
    {
        Sequence< PropertyValue > aPropSequence (3);
        {
            aPropSequence [0].Name = "Coordinates";
            static const CustomShapeProvider::ParameterPairData aData[] = {
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    3, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::NORMAL,
                    4, 0
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 3
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    15, 7
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    6, 14
                },
                {
                    EnhancedCustomShapeParameterType::EQUATION,
                    EnhancedCustomShapeParameterType::EQUATION,
                    5, 14
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 7
                },
                {
                    EnhancedCustomShapeParameterType::NORMAL,
                    EnhancedCustomShapeParameterType::EQUATION,
                    0, 3
                }
            };
            aPropSequence [0].Value = makeAny (createParameterPairSequence(SAL_N_ELEMENTS(aData), aData));
        }
        {
            aPropSequence [1].Name = "Segments";
            static const sal_uInt16 nValues[] = {
            // Command, Count
                1,1,
                2,7,
                4,0,
                5,0
            };
            aPropSequence [1].Value = makeAny (createSegmentSequence( SAL_N_ELEMENTS( nValues ), nValues ));
        }
        {
            aPropSequence [2].Name = "TextFrames";
            Sequence< EnhancedCustomShapeTextFrame > aTextFrameSeq (1);
            {
                EnhancedCustomShapeTextFrame aTextFrame;
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        10, 12
                    };
                    aTextFrame.TopLeft = createParameterPair(&aData);
                }
                {
                    static const CustomShapeProvider::ParameterPairData aData =
                    {
                        EnhancedCustomShapeParameterType::EQUATION,
                        EnhancedCustomShapeParameterType::EQUATION,
                        11, 13
                    };
                    aTextFrame.BottomRight = createParameterPair(&aData);
                }
                aTextFrameSeq [0] = aTextFrame;
            }
            aPropSequence [2].Value = makeAny (aTextFrameSeq);
        }
        aPropertyMap [PROP_Path] <<= aPropSequence;
    }
    {
        awt::Rectangle aRectangle;
        aRectangle.X = 0;
        aRectangle.Y = 0;
        aRectangle.Width = 0;
        aRectangle.Height = 0;
        aPropertyMap [PROP_ViewBox] <<= aRectangle;
    }
    aPropertyMap [ PROP_Type ] <<= OUString("ooxml-snip2SameRect");

    return aPropertyMap;
  }
};

// This is a generated source file. DO NOT EDIT.

} // anonymous namespace
void CustomShapeProperties::initializePresetsMap3()
{
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "star6" ) ] = new ShapeCstar6();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "round2SameRect" ) ] = new ShapeCround2SameRect();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "nonIsoscelesTrapezoid" ) ] = new ShapeCnonIsoscelesTrapezoid();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "diamond" ) ] = new ShapeCdiamond();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "callout2" ) ] = new ShapeCcallout2();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "ellipseRibbon" ) ] = new ShapeCellipseRibbon();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "pie" ) ] = new ShapeCpie();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "star4" ) ] = new ShapeCstar4();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartPredefinedProcess" ) ] = new ShapeCflowChartPredefinedProcess();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartPunchedTape" ) ] = new ShapeCflowChartPunchedTape();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "curvedConnector2" ) ] = new ShapeCcurvedConnector2();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "bentConnector3" ) ] = new ShapeCbentConnector3();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "cornerTabs" ) ] = new ShapeCcornerTabs();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "hexagon" ) ] = new ShapeChexagon();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartConnector" ) ] = new ShapeCflowChartConnector();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartMagneticDisk" ) ] = new ShapeCflowChartMagneticDisk();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "heart" ) ] = new ShapeCheart();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "ribbon2" ) ] = new ShapeCribbon2();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "bracePair" ) ] = new ShapeCbracePair();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartExtract" ) ] = new ShapeCflowChartExtract();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "actionButtonHome" ) ] = new ShapeCactionButtonHome();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "accentBorderCallout3" ) ] = new ShapeCaccentBorderCallout3();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartOfflineStorage" ) ] = new ShapeCflowChartOfflineStorage();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "irregularSeal1" ) ] = new ShapeCirregularSeal1();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "quadArrow" ) ] = new ShapeCquadArrow();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "leftBrace" ) ] = new ShapeCleftBrace();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "leftBracket" ) ] = new ShapeCleftBracket();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "blockArc" ) ] = new ShapeCblockArc();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "curvedConnector3" ) ] = new ShapeCcurvedConnector3();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "wedgeRoundRectCallout" ) ] = new ShapeCwedgeRoundRectCallout();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "actionButtonMovie" ) ] = new ShapeCactionButtonMovie();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "flowChartOnlineStorage" ) ] = new ShapeCflowChartOnlineStorage();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "gear6" ) ] = new ShapeCgear6();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "halfFrame" ) ] = new ShapeChalfFrame();
    maPresetsMap [ StaticTokenMap::get().getTokenFromUnicode( "snip2SameRect" ) ] = new ShapeCsnip2SameRect();
}

} } // oox // drawingml

