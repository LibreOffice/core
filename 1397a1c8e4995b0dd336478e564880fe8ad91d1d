{
  "comments": [
    {
      "key": {
        "uuid": "17443839_29261750",
        "filename": "include/editeng/itemtype.hxx",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-11-12T07:36:53Z",
      "side": 1,
      "message": "Here and potentially also elsewhere in this change:\n\nI think we have painted ourselves into an unfortunate corner here.  This function used to be (long,long,long)-\u003elong (which it more or less still is, with tools::Long equating long more or less), and before \u003chttps://git.libreoffice.org/core/+/adf0738d2dbfa742d0e9ef130954fb4638a8e90d%5E!/\u003e \"long-\u003esal_Int32 in BigInt\", BitInt\u0027s non-big representation was long.  So back then, this function succeeded if the result was representable as long (aka tools::Long); but now this function only succeeds if the result is representable as sal_Int32, which is potentially smaller.",
      "revId": "1397a1c8e4995b0dd336478e564880fe8ad91d1d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e437a555_146f686e",
        "filename": "include/editeng/itemtype.hxx",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-11-12T07:47:58Z",
      "side": 1,
      "message": "But in that change, the *inconsistent* old behaviour (where long was sometimes used as-is, accepting 8 bytes, and sometimes as 4-byte value, as in Normalize) was changed to consistent one.\n\nMaybe better introduce a proper operator sal_Int64 for BigInt, that would possibly convert big int that is in the 64-bit range?",
      "parentUuid": "17443839_29261750",
      "revId": "1397a1c8e4995b0dd336478e564880fe8ad91d1d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f81f6bb4_db017dff",
        "filename": "include/tools/bigint.hxx",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-11-12T07:15:10Z",
      "side": 1,
      "message": "... and shouldn\u0027t these two be a union?",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 32,
        "endChar": 37
      },
      "revId": "1397a1c8e4995b0dd336478e564880fe8ad91d1d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e499bd3_e9963599",
        "filename": "include/tools/bigint.hxx",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-11-12T07:10:19Z",
      "side": 1,
      "message": "Interesting why is this conditional thing needed?",
      "range": {
        "startLine": 69,
        "startChar": 4,
        "endLine": 69,
        "endChar": 29
      },
      "revId": "1397a1c8e4995b0dd336478e564880fe8ad91d1d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0caf6ca_9e5d2601",
        "filename": "tools/source/generic/bigint.cxx",
        "patchSetId": 2
      },
      "lineNbr": 510,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-11-12T07:10:19Z",
      "side": 1,
      "message": "Unless I miss something, this will turn \"-1\" into a BigInt with bIsBig \u003d false, bIsNeg \u003d false, and nVal \u003d -1...",
      "range": {
        "startLine": 509,
        "startChar": 4,
        "endLine": 510,
        "endChar": 21
      },
      "revId": "1397a1c8e4995b0dd336478e564880fe8ad91d1d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0f4a17f_f2f2a2b0",
        "filename": "tools/source/generic/bigint.cxx",
        "patchSetId": 2
      },
      "lineNbr": 582,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-11-12T07:10:19Z",
      "side": 1,
      "message": "... and this will turn sal_Int64(-1) into a BigInt with bIsBig \u003d false, bIsNeg \u003d true, and nVal \u003d -1\n\nSo these two are \"same\"? - but with different bIsNeg. What is the intended bIsNeg value for non-bit negative values?",
      "range": {
        "startLine": 582,
        "startChar": 4,
        "endLine": 582,
        "endChar": 24
      },
      "revId": "1397a1c8e4995b0dd336478e564880fe8ad91d1d",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}