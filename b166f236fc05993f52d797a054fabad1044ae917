{
  "comments": [
    {
      "key": {
        "uuid": "f09cbf21_dcba660c",
        "filename": "basic/qa/vba_tests/strconv.vb",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-30T16:16:50Z",
      "side": 1,
      "message": "We possibly may try to use this to make this a useful test?\n\nカタカナ \u003d\u003e かたかな (this is \"Katakana\" in Katakana and Hiragana)\n\nInteresting, if this conversion would work.",
      "revId": "b166f236fc05993f52d797a054fabad1044ae917",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "411a995d_57a58f22",
        "filename": "basic/qa/vba_tests/strconv.vb",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-04-30T18:41:40Z",
      "side": 1,
      "message": "\u003e We possibly may try to use this to make this a useful test?\n\u003e \n\u003e カタカナ \u003d\u003e かたかな (this is \"Katakana\" in Katakana and Hiragana)\n\u003e \n\u003e Interesting, if this conversion would work.\n\nI checked it. These 2 conversions are working correctly with given string.I will make the required change.",
      "parentUuid": "f09cbf21_dcba660c",
      "revId": "b166f236fc05993f52d797a054fabad1044ae917",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "534ca748_a280115f",
        "filename": "basic/qa/vba_tests/strconv.vb",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-30T16:16:50Z",
      "side": 1,
      "message": "So this now would pass on all systems. We now don\u0027t get the thread encoding (that would be UTF-8 on most Linuxes), but instead we take the LibreOffice language (which is configured to be en-US for unit tests explicitly IIRC), and picks the encoding corresponding to MS codepage associated with that language - for en-US, it would be Win-1252, giving us 1-byte string. I suppose that we may even assert on the content of the byte string now. And add a comment here explaining these details.\n\nThis looks like a reasonable change for me. Using that \"system encoding\" (which on Windows means \"default encoding for non-Unicode applications\") in a different way is just meaningless here.",
      "revId": "b166f236fc05993f52d797a054fabad1044ae917",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e16bf69b_5ec86bc4",
        "filename": "basic/qa/vba_tests/strconv.vb",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-04-30T18:39:41Z",
      "side": 1,
      "message": "\u003eI suppose that we may even assert on the content of the byte string now.\n\nYess we can use AssertEqualApprox(defined in basic/qa/vba_tests/_test_asserts.vb) in individual characters of string by comparing with their ASCII values.\n\nI have obtained The actual output(that is ascii value of each character) using Excel VBA StrConv function.\nFor example -\n\nDim x() As Byte\nx \u003d StrConv(\"ÉÏº£ÊÐABC\", vbFromUnicode)\n\nModule1.AssertEqualApprox(x(0),201,0,\"TestName\")  \n.\nAnd similarly for all 8 characters.\n\nLooks good ?",
      "parentUuid": "534ca748_a280115f",
      "revId": "b166f236fc05993f52d797a054fabad1044ae917",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da6601c9_209d56e1",
        "filename": "basic/qa/vba_tests/strconv.vb",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-30T18:54:11Z",
      "side": 1,
      "message": "Yes, but why Approx?",
      "parentUuid": "e16bf69b_5ec86bc4",
      "revId": "b166f236fc05993f52d797a054fabad1044ae917",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "404decb2_0e121dc3",
        "filename": "basic/source/runtime/methods.cxx",
        "patchSetId": 3
      },
      "lineNbr": 4117,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-30T16:27:11Z",
      "side": 1,
      "message": "Please check (just in case) that SvtLanguageTable::GetLanguageString does return a usable language code for LANGUAGE_SYSTEM case (e.g., set your LO to some specific non-en-US language, and check that the result is indeed the correct string like \"en-CA\"). Failing that, we might need to use LanguageTag to get the string, instead of SvtLanguageTable::GetLanguageString:\n\n    OUString sLanguage \u003d LanguageTag(nLanguage).getLanguage();",
      "range": {
        "startLine": 4117,
        "startChar": 25,
        "endLine": 4117,
        "endChar": 71
      },
      "revId": "b166f236fc05993f52d797a054fabad1044ae917",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7decdf5_6f739ab8",
        "filename": "basic/source/runtime/methods.cxx",
        "patchSetId": 3
      },
      "lineNbr": 4117,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-30T16:33:34Z",
      "side": 1,
      "message": "Oh, checking what module svt is, (it is for UI elements, dialogs, etc.) - it seems that it\u0027s better to not use it here, but switch to use of LanguageTag directly. SvtLanguageTable is just not a good match for the job, since it\u0027s intended to provide user-visible strings, not API strings.",
      "parentUuid": "404decb2_0e121dc3",
      "range": {
        "startLine": 4117,
        "startChar": 25,
        "endLine": 4117,
        "endChar": 71
      },
      "revId": "b166f236fc05993f52d797a054fabad1044ae917",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c30c9199_b5c8d14d",
        "filename": "basic/source/runtime/methods.cxx",
        "patchSetId": 3
      },
      "lineNbr": 4117,
      "author": {
        "id": 1002925
      },
      "writtenOn": "2021-04-30T18:41:40Z",
      "side": 1,
      "message": "\u003e Oh, checking what module svt is, (it is for UI elements, dialogs, etc.) - it seems that it\u0027s better to not use it here, but switch to use of LanguageTag directly. SvtLanguageTable is just not a good match for the job, since it\u0027s intended to provide user-visible strings, not API strings.\n\nOkay.Thanks for the information.",
      "parentUuid": "e7decdf5_6f739ab8",
      "range": {
        "startLine": 4117,
        "startChar": 25,
        "endLine": 4117,
        "endChar": 71
      },
      "revId": "b166f236fc05993f52d797a054fabad1044ae917",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}