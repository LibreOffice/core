{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f4710461_ed55d30f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-04-20T15:32:16Z",
      "side": 1,
      "message": "@sberg: this works as expected, but the implementation feels fishy (not because of mis-using Reg::MaybeRegistered; that can be easily fixed). See the comment. Any better idea where to place this functionality?\n\nAnd I placed the config item into ExtensionManager::ExtensionSecurity as RunAlwaysOutOfProcess, which is definitely some easy bike-shedding item... ",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "602ea79d_cad10d0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-04-20T15:46:39Z",
      "side": 1,
      "message": "first of all: what\u0027s the motivation for this change? the commit message should tell",
      "parentUuid": "f4710461_ed55d30f",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c412e55d_d92cddee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-04-20T15:57:55Z",
      "side": 1,
      "message": "Saving memory for a 32bit LO which OOMs, because the Java in-process VM takes too much memory to run all extensions.",
      "parentUuid": "602ea79d_cad10d0e",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b02a706d_0bd9faf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000166
      },
      "writtenOn": "2022-04-21T13:27:07Z",
      "side": 1,
      "message": "Also it has the advantage, that a JVM crash would not crash LO.",
      "parentUuid": "c412e55d_d92cddee",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "221255eb_073ba96b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-04-21T14:11:31Z",
      "side": 1,
      "message": "\u003e Also it has the advantage, that a JVM crash would not crash LO.\n\nThis is just the JVM of extensions; you still need the in-process JVM for Base etc.",
      "parentUuid": "b02a706d_0bd9faf7",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b79fac1_64f40a5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-04-21T17:05:42Z",
      "side": 1,
      "message": "and is \"JVM crash\" even a common thing to begin with?",
      "parentUuid": "221255eb_073ba96b",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1088905_e086ea2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-04-23T10:19:21Z",
      "side": 1,
      "message": "\u003e and is \"JVM crash\" even a common thing to begin with?\n\nThis would be just some potential side effect. The existing problem is OOM for 32bit due to high extension memory usage.",
      "parentUuid": "5b79fac1_64f40a5b",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8e48134_3e8ea5ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-04-25T14:51:03Z",
      "side": 1,
      "message": "This e.g. causes `unopkg list` to show application/vnd.sun.star.uno-component and application/vnd.sun.star.uno-components sub-packages as having \"is registered: unknown\" status, which is clearly incorrect.\n\nThe whole change feels just like it does a handful of seemingly random modifications that happen to give something that resembles the sought-after functionality, without explaining (in the commit message, say) how those odd-looking modifications (e.g., why would changing a sub-package\u0027s registration status from Registered to MaybeRegistered be necessary when implementing this feature?) work.",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f00d35_b9b8109e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-04-25T14:56:53Z",
      "side": 1,
      "message": "Sure, I was just puzzled why Samuel brought up \"JVM crash\" in the first place, as if that was a scenario we should generally be concerned about.  (I think it\u0027s a long time since I last saw a bug in a JVM that caused the process to crash.)",
      "parentUuid": "f1088905_e086ea2a",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26ee7d64_2b31dbbf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000166
      },
      "writtenOn": "2022-04-25T14:58:33Z",
      "side": 1,
      "message": "I\u0027ve seen it a few times in the last years, both on my machine and in customer environments.",
      "parentUuid": "f7f00d35_b9b8109e",
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea9114ee_793bf7d5",
        "filename": "officecfg/registry/schema/org/openoffice/Office/ExtensionManager.xcs",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1000166
      },
      "writtenOn": "2022-04-21T13:39:23Z",
      "side": 1,
      "message": "The name (and description) should mention that this is about the JVM, not about all extensions.\nThere is also officecfg/registry/schema/org/openoffice/Office/Java.xcs - not sure which place is better.",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 43
      },
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "501f45e8_440976ff",
        "filename": "officecfg/registry/schema/org/openoffice/Office/ExtensionManager.xcs",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-04-21T13:56:28Z",
      "side": 1,
      "message": "Nope. I\u0027m testing it with a Calc Python extension. This should generally work with any extension. In fact I had speculated, if actually running a 32bit URE + uno exec + 64bit LO would be generally a better solution for the memory problems, but that would be a much larger patch to implement (I\u0027m just imagining the gbuild stuff to build and ship a 2nd URE with 32/64 bit x86 builds + additional packaging changes). AFAIK LO extensions have an arch identifier in the XML description, so having something like a subdirectory for per-arch URE\u0027s and select them and run any matching extension OOP should generally work.",
      "parentUuid": "ea9114ee_793bf7d5",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 43
      },
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5f067c0_a51856ce",
        "filename": "officecfg/registry/schema/org/openoffice/Office/ExtensionManager.xcs",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-04-25T10:14:53Z",
      "side": 1,
      "message": "If running a 64-bit core process is an option, then why the 32-bit process is needed for Java and Python extensions, which IIUC should be platform-independent? I might misunderstand things, but I thought that platform dependence might only be relevant for native code (e.g. C++-based extensions)?",
      "parentUuid": "501f45e8_440976ff",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 43
      },
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ea98b9d_d30d611a",
        "filename": "officecfg/registry/schema/org/openoffice/Office/ExtensionManager.xcs",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2022-04-25T10:29:35Z",
      "side": 1,
      "message": "\u003e If running a 64-bit core process is an option, then why the 32-bit process is needed for Java and Python extensions, which IIUC should be platform-independent? I might misunderstand things, but I thought that platform dependence might only be relevant for native code (e.g. C++-based extensions)?\n\nThere are multiple problems: one is the OOM with some Java extension. A 2nd is a closed-source, 32bit native Windows component with no 64bit variant (AFAIK from Nuance to use their speak recognition with LO, but I don\u0027t know the whole setup).",
      "parentUuid": "d5f067c0_a51856ce",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 43
      },
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "949090b5_58ad57ce",
        "filename": "officecfg/registry/schema/org/openoffice/Office/ExtensionManager.xcs",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1000166
      },
      "writtenOn": "2022-05-11T07:01:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ea98b9d_d30d611a",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 43
      },
      "revId": "5e4ad33235a87aaad21d6d9b2d9586a8f092aef4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}