From 1ba78d2e2059eb53e80a3eeea384e4bb1896a34d Mon Sep 17 00:00:00 2001
From: Noel Grandin <noel.grandin@collabora.co.uk>
Date: Fri, 14 Aug 2020 09:19:30 +0200
Subject: [PATCH] convert XML_NAMESPACE_ to scoped enum

Change-Id: I7071cc0dd82d7e168aa033c155bfac7684e8f331
---
 dbaccess/source/filter/xml/xmlExport.cxx      |  172 +--
 dbaccess/source/filter/xml/xmlHelper.cxx      |   66 +-
 .../source/filter/xml/xmlTableFilterList.cxx  |    4 +-
 dbaccess/source/filter/xml/xmlfilter.cxx      |    4 +-
 .../source/misc/SvXMLAutoCorrectExport.cxx    |   30 +-
 .../misc/SvXMLAutoCorrectTokenHandler.hxx     |   10 +-
 editeng/source/xml/xmltxtimp.cxx              |    4 +-
 filter/source/svg/svgexport.cxx               |  376 +++---
 filter/source/svg/svgfontexport.cxx           |   36 +-
 filter/source/svg/svgwriter.cxx               |  384 +++----
 include/xmloff/SchXMLImportHelper.hxx         |    2 +-
 include/xmloff/XMLBase64ImportContext.hxx     |    2 +-
 include/xmloff/XMLShapeStyleContext.hxx       |    2 +-
 include/xmloff/maptype.hxx                    |    5 +-
 include/xmloff/nmspmap.hxx                    |   22 +-
 include/xmloff/numehelp.hxx                   |    6 +-
 include/xmloff/prstylei.hxx                   |    2 +-
 include/xmloff/shapeimport.hxx                |   14 +-
 include/xmloff/xmlexp.hxx                     |   17 +-
 include/xmloff/xmlictxt.hxx                   |    4 +-
 include/xmloff/xmlimp.hxx                     |   10 +-
 include/xmloff/xmlnmspe.hxx                   |  175 +--
 include/xmloff/xmlnumfi.hxx                   |    2 +-
 include/xmloff/xmlprcon.hxx                   |    6 +-
 include/xmloff/xmlprmap.hxx                   |    7 +-
 include/xmloff/xmlstyle.hxx                   |    2 +-
 include/xmloff/xmltkmap.hxx                   |   12 +-
 linguistic/source/convdicxml.cxx              |   32 +-
 linguistic/source/convdicxml.hxx              |    6 +-
 reportdesign/source/filter/xml/xmlExport.cxx  |  192 ++--
 reportdesign/source/filter/xml/xmlHelper.cxx  |   52 +-
 .../filter/xml/xmlImportDocumentHandler.cxx   |    4 +-
 reportdesign/source/filter/xml/xmlfilter.cxx  |   28 +-
 sc/source/core/tool/interpr7.cxx              |    2 +-
 .../xml/XMLChangeTrackingExportHelper.cxx     |  160 +--
 .../filter/xml/XMLColumnRowGroupExport.cxx    |    4 +-
 sc/source/filter/xml/XMLExportDDELinks.cxx    |   38 +-
 sc/source/filter/xml/XMLExportDataPilot.cxx   |  236 ++--
 .../filter/xml/XMLExportDatabaseRanges.cxx    |  142 +--
 .../filter/xml/XMLStylesExportHelper.cxx      |   50 +-
 .../xml/XMLTableHeaderFooterContext.cxx       |    8 +-
 .../filter/xml/XMLTableMasterPageExport.cxx   |   10 +-
 .../filter/xml/XMLTableShapeImportHelper.cxx  |    8 +-
 .../filter/xml/XMLTrackedChangesContext.cxx   |    6 +-
 sc/source/filter/xml/editattributemap.cxx     |   90 +-
 sc/source/filter/xml/xmlannoi.cxx             |    4 +-
 sc/source/filter/xml/xmlbodyi.cxx             |    2 +-
 sc/source/filter/xml/xmlconti.cxx             |    4 +-
 sc/source/filter/xml/xmlexprt.cxx             |  692 ++++++------
 sc/source/filter/xml/xmlimprt.cxx             |  126 +--
 sc/source/filter/xml/xmlstyle.cxx             |  170 +--
 sc/source/filter/xml/xmlstyli.cxx             |   12 +-
 starmath/source/mathmlexport.cxx              |  198 ++--
 starmath/source/mathmlimport.cxx              |   38 +-
 svx/source/xml/xmlxtexp.cxx                   |   18 +-
 svx/source/xml/xmlxtimp.cxx                   |   36 +-
 sw/source/core/inc/SwXMLBlockImport.hxx       |   24 +-
 sw/source/core/swg/SwXMLBlockExport.cxx       |   54 +-
 sw/source/core/swg/SwXMLSectionList.cxx       |    4 +-
 sw/source/core/swg/SwXMLTextBlocks1.cxx       |   10 +-
 sw/source/filter/xml/xmlbrsh.cxx              |   28 +-
 sw/source/filter/xml/xmlexp.cxx               |    8 +-
 sw/source/filter/xml/xmlexpit.cxx             |   10 +-
 sw/source/filter/xml/xmlfmt.cxx               |   12 +-
 sw/source/filter/xml/xmlfmte.cxx              |   16 +-
 sw/source/filter/xml/xmlimp.cxx               |   18 +-
 sw/source/filter/xml/xmlimpit.cxx             |    4 +-
 sw/source/filter/xml/xmlitemi.cxx             |    2 +-
 sw/source/filter/xml/xmlitemm.cxx             |    8 +-
 sw/source/filter/xml/xmlmeta.cxx              |    2 +-
 sw/source/filter/xml/xmltble.cxx              |   68 +-
 sw/source/filter/xml/xmltbli.cxx              |   74 +-
 sw/source/filter/xml/xmltexte.cxx             |   42 +-
 .../uibase/config/StoredChapterNumbering.cxx  |   60 +-
 unoxml/source/dom/document.cxx                |    2 +-
 xmloff/inc/DomBuilderContext.hxx              |    6 +-
 xmloff/inc/XMLChartStyleContext.hxx           |    2 +-
 xmloff/inc/XMLElementPropertyContext.hxx      |    2 +-
 xmloff/inc/XMLEmbeddedObjectImportContext.hxx |    2 +-
 xmloff/inc/XMLStringBufferImportContext.hxx   |    4 +-
 xmloff/inc/txtflde.hxx                        |    6 +-
 xmloff/source/chart/PropertyMap.hxx           |   42 +-
 xmloff/source/chart/PropertyMaps.cxx          |    6 +-
 xmloff/source/chart/SchXMLAxisContext.cxx     |   54 +-
 xmloff/source/chart/SchXMLAxisContext.hxx     |    2 +-
 .../SchXMLCalculationSettingsContext.cxx      |    8 +-
 .../SchXMLCalculationSettingsContext.hxx      |    4 +-
 xmloff/source/chart/SchXMLChartContext.cxx    |   26 +-
 xmloff/source/chart/SchXMLChartContext.hxx    |    4 +-
 xmloff/source/chart/SchXMLExport.cxx          |  272 ++---
 xmloff/source/chart/SchXMLImport.cxx          |  154 +--
 xmloff/source/chart/SchXMLLegendContext.cxx   |   26 +-
 .../source/chart/SchXMLParagraphContext.cxx   |   12 +-
 .../source/chart/SchXMLParagraphContext.hxx   |    2 +-
 xmloff/source/chart/SchXMLPlotAreaContext.cxx |   56 +-
 xmloff/source/chart/SchXMLPlotAreaContext.hxx |   18 +-
 .../chart/SchXMLPropertyMappingContext.cxx    |    4 +-
 .../SchXMLRegressionCurveObjectContext.cxx    |   14 +-
 .../SchXMLRegressionCurveObjectContext.hxx    |    6 +-
 xmloff/source/chart/SchXMLSeries2Context.cxx  |   18 +-
 xmloff/source/chart/SchXMLSeries2Context.hxx  |    2 +-
 xmloff/source/chart/SchXMLTableContext.cxx    |   58 +-
 xmloff/source/chart/SchXMLTableContext.hxx    |   10 +-
 xmloff/source/chart/SchXMLTextListContext.cxx |   16 +-
 xmloff/source/chart/SchXMLTextListContext.hxx |    2 +-
 xmloff/source/chart/SchXMLTools.cxx           |   10 +-
 .../source/chart/XMLChartPropertyContext.cxx  |    4 +-
 .../source/chart/XMLChartPropertyContext.hxx  |    4 +-
 xmloff/source/chart/XMLChartStyleContext.cxx  |    4 +-
 .../source/chart/XMLLabelSeparatorContext.cxx |    4 +-
 .../source/chart/XMLLabelSeparatorContext.hxx |    4 +-
 xmloff/source/chart/XMLSymbolImageContext.cxx |   14 +-
 xmloff/source/chart/XMLSymbolImageContext.hxx |    4 +-
 xmloff/source/chart/contexts.cxx              |    8 +-
 xmloff/source/chart/contexts.hxx              |    4 +-
 .../source/core/DocumentSettingsContext.cxx   |    4 +-
 xmloff/source/core/DomBuilderContext.cxx      |   24 +-
 xmloff/source/core/DomExport.cxx              |    4 +-
 xmloff/source/core/RDFaExportHelper.cxx       |    8 +-
 xmloff/source/core/RDFaImportHelper.cxx       |    8 +-
 xmloff/source/core/XMLBase64Export.cxx        |    2 +-
 xmloff/source/core/XMLBase64ImportContext.cxx |    2 +-
 .../core/XMLEmbeddedObjectImportContext.cxx   |   10 +-
 xmloff/source/core/nmspmap.cxx                |   44 +-
 xmloff/source/core/xmlexp.cxx                 |  122 +-
 xmloff/source/core/xmlictxt.cxx               |    4 +-
 xmloff/source/core/xmlimp.cxx                 |  232 ++--
 xmloff/source/core/xmltkmap.cxx               |    6 +-
 xmloff/source/draw/QRCodeContext.cxx          |    4 +-
 .../source/draw/XMLGraphicsDefaultStyle.cxx   |    8 +-
 xmloff/source/draw/XMLImageMapContext.cxx     |   36 +-
 xmloff/source/draw/XMLImageMapExport.cxx      |   46 +-
 xmloff/source/draw/XMLNumberStyles.cxx        |   18 +-
 .../draw/XMLReplacementImageContext.cxx       |    2 +-
 xmloff/source/draw/XMLShapeStyleContext.cxx   |    6 +-
 xmloff/source/draw/animationexport.cxx        |  146 +--
 xmloff/source/draw/animationimport.cxx        |    8 +-
 xmloff/source/draw/animexp.cxx                |   34 +-
 xmloff/source/draw/eventimp.cxx               |   20 +-
 xmloff/source/draw/layerexp.cxx               |   18 +-
 xmloff/source/draw/layerimp.cxx               |    6 +-
 xmloff/source/draw/sdpropls.cxx               |  476 ++++----
 xmloff/source/draw/sdxmlexp.cxx               |  168 +--
 xmloff/source/draw/sdxmlimp.cxx               |   50 +-
 xmloff/source/draw/shapeexport.cxx            |  590 +++++-----
 xmloff/source/draw/shapeimport.cxx            |   96 +-
 xmloff/source/draw/ximp3dscene.cxx            |    8 +-
 xmloff/source/draw/ximpgrp.cxx                |    6 +-
 xmloff/source/draw/ximplink.cxx               |    2 +-
 xmloff/source/draw/ximppage.cxx               |   14 +-
 xmloff/source/draw/ximpshap.cxx               |  132 +--
 xmloff/source/draw/ximpstyl.cxx               |   20 +-
 xmloff/source/forms/controlpropertymap.cxx    |   68 +-
 xmloff/source/forms/elementexport.cxx         |   30 +-
 xmloff/source/forms/elementimport.cxx         |   24 +-
 xmloff/source/forms/formattributes.cxx        |   14 +-
 xmloff/source/forms/formattributes.hxx        |    6 +-
 xmloff/source/forms/formevents.cxx            |   66 +-
 xmloff/source/forms/layerimport.cxx           |    2 +-
 xmloff/source/forms/officeforms.cxx           |    2 +-
 xmloff/source/forms/property_description.hxx  |    2 +-
 xmloff/source/forms/property_meta_data.cxx    |    2 +-
 xmloff/source/forms/propertyexport.cxx        |   18 +-
 xmloff/source/forms/propertyimport.cxx        |   10 +-
 xmloff/source/meta/MetaExportComponent.cxx    |    4 +-
 xmloff/source/meta/xmlmetae.cxx               |   78 +-
 xmloff/source/meta/xmlversion.cxx             |   24 +-
 xmloff/source/script/XMLEventExport.cxx       |  130 +--
 xmloff/source/script/XMLEventImportHelper.cxx |    2 +-
 .../source/script/XMLEventsImportContext.cxx  |    2 +-
 .../source/script/XMLScriptContextFactory.cxx |    2 +-
 .../source/script/XMLScriptExportHandler.cxx  |   12 +-
 .../script/XMLStarBasicContextFactory.cxx     |    2 +-
 .../script/XMLStarBasicExportHandler.cxx      |   12 +-
 xmloff/source/script/xmlbasicscript.cxx       |   16 +-
 xmloff/source/script/xmlscripti.cxx           |    2 +-
 xmloff/source/style/DashStyle.cxx             |   34 +-
 xmloff/source/style/FillStyleContext.cxx      |    2 +-
 xmloff/source/style/GradientStyle.cxx         |   48 +-
 xmloff/source/style/HatchStyle.cxx            |   28 +-
 xmloff/source/style/ImageStyle.cxx            |   26 +-
 xmloff/source/style/MarkerStyle.cxx           |   10 +-
 .../source/style/PageHeaderFooterContext.cxx  |    2 +-
 .../source/style/PageMasterImportContext.cxx  |    6 +-
 xmloff/source/style/PageMasterStyleMap.cxx    |  428 +++----
 xmloff/source/style/TransGradientStyle.cxx    |   38 +-
 .../style/XMLBackgroundImageContext.cxx       |   18 +-
 .../source/style/XMLBackgroundImageExport.cxx |   14 +-
 xmloff/source/style/XMLFontAutoStylePool.cxx  |   32 +-
 xmloff/source/style/XMLFontStylesContext.cxx  |   24 +-
 .../style/XMLFootnoteSeparatorExport.cxx      |   16 +-
 .../style/XMLFootnoteSeparatorImport.cxx      |    2 +-
 xmloff/source/style/XMLPageExport.cxx         |   18 +-
 xmloff/source/style/impastpl.cxx              |    8 +-
 xmloff/source/style/numehelp.cxx              |   46 +-
 xmloff/source/style/prstylei.cxx              |    4 +-
 xmloff/source/style/styleexp.cxx              |   38 +-
 xmloff/source/style/xmlaustp.cxx              |    6 +-
 xmloff/source/style/xmlexppr.cxx              |   62 +-
 xmloff/source/style/xmlimppr.cxx              |   16 +-
 xmloff/source/style/xmlnume.cxx               |  100 +-
 xmloff/source/style/xmlnumfe.cxx              |  138 +--
 xmloff/source/style/xmlnumfi.cxx              |  168 +--
 xmloff/source/style/xmlnumi.cxx               |   84 +-
 xmloff/source/style/xmlstyle.cxx              |   36 +-
 xmloff/source/style/xmltabe.cxx               |   14 +-
 xmloff/source/style/xmltabi.cxx               |   12 +-
 xmloff/source/table/XMLTableExport.cxx        |   52 +-
 xmloff/source/table/XMLTableImport.cxx        |   26 +-
 xmloff/source/text/XMLAutoMarkFileContext.cxx |    2 +-
 .../text/XMLAutoTextContainerEventImport.cxx  |    2 +-
 xmloff/source/text/XMLAutoTextEventExport.cxx |   26 +-
 .../text/XMLCalculationSettingsContext.cxx    |    2 +-
 .../text/XMLChangeElementImportContext.cxx    |    2 +-
 xmloff/source/text/XMLChangeImportContext.cxx |    2 +-
 xmloff/source/text/XMLChangeInfoContext.cxx   |    6 +-
 .../text/XMLChangedRegionImportContext.cxx    |    6 +-
 .../XMLFootnoteConfigurationImportContext.cxx |   32 +-
 .../source/text/XMLFootnoteImportContext.cxx  |   10 +-
 .../XMLIndexAlphabeticalSourceContext.cxx     |    2 +-
 ...LIndexBibliographyConfigurationContext.cxx |   10 +-
 .../text/XMLIndexBibliographyEntryContext.cxx |    2 +-
 .../XMLIndexBibliographySourceContext.cxx     |    2 +-
 .../text/XMLIndexChapterInfoEntryContext.cxx  |    2 +-
 .../XMLIndexIllustrationSourceContext.cxx     |    2 +-
 xmloff/source/text/XMLIndexMarkExport.cxx     |   12 +-
 .../text/XMLIndexObjectSourceContext.cxx      |    2 +-
 .../text/XMLIndexSimpleEntryContext.cxx       |    2 +-
 .../source/text/XMLIndexSourceBaseContext.cxx |   72 +-
 xmloff/source/text/XMLIndexTOCContext.cxx     |    8 +-
 .../source/text/XMLIndexTOCSourceContext.cxx  |    2 +-
 .../source/text/XMLIndexTOCStylesContext.cxx  |    6 +-
 .../text/XMLIndexTabStopEntryContext.cxx      |    2 +-
 .../text/XMLIndexTableSourceContext.cxx       |    2 +-
 .../source/text/XMLIndexTemplateContext.cxx   |    4 +-
 .../text/XMLIndexTitleTemplateContext.cxx     |    2 +-
 .../source/text/XMLIndexUserSourceContext.cxx |    2 +-
 xmloff/source/text/XMLLineNumberingExport.cxx |   26 +-
 .../text/XMLLineNumberingImportContext.cxx    |   28 +-
 ...XMLLineNumberingSeparatorImportContext.cxx |    2 +-
 xmloff/source/text/XMLRedlineExport.cxx       |   38 +-
 xmloff/source/text/XMLSectionExport.cxx       |  148 +--
 .../text/XMLSectionFootnoteConfigExport.cxx   |   14 +-
 .../text/XMLSectionFootnoteConfigImport.cxx   |    4 +-
 .../source/text/XMLSectionImportContext.cxx   |   24 +-
 .../text/XMLSectionSourceImportContext.cxx    |    6 +-
 .../text/XMLStringBufferImportContext.cxx     |    4 +-
 .../XMLTextCharStyleNamesElementExport.cxx    |    4 +-
 xmloff/source/text/XMLTextColumnsContext.cxx  |   22 +-
 xmloff/source/text/XMLTextColumnsExport.cxx   |   26 +-
 xmloff/source/text/XMLTextFrameContext.cxx    |   34 +-
 .../text/XMLTextFrameHyperlinkContext.cxx     |    2 +-
 xmloff/source/text/XMLTextListItemContext.cxx |    6 +-
 .../source/text/XMLTextMarkImportContext.cxx  |   12 +-
 .../source/text/XMLTextMasterPageContext.cxx  |    4 +-
 .../source/text/XMLTextMasterPageExport.cxx   |   28 +-
 .../text/XMLTextMasterStylesContext.cxx       |    2 +-
 .../source/text/XMLTextShapeStyleContext.cxx  |    6 +-
 .../text/XMLTrackedChangesImportContext.cxx   |    4 +-
 xmloff/source/text/txtdrope.cxx               |   10 +-
 xmloff/source/text/txtdropi.cxx               |    8 +-
 xmloff/source/text/txtflde.cxx                |  136 +--
 xmloff/source/text/txtfldi.cxx                |   40 +-
 xmloff/source/text/txtftne.cxx                |   48 +-
 xmloff/source/text/txtimp.cxx                 |  558 ++++-----
 xmloff/source/text/txtparae.cxx               |  258 ++---
 xmloff/source/text/txtparai.cxx               |   36 +-
 xmloff/source/text/txtprmap.cxx               |  272 ++---
 xmloff/source/text/txtstyle.cxx               |    4 +-
 xmloff/source/text/txtstyli.cxx               |    6 +-
 xmloff/source/text/txtvfldi.cxx               |    8 +-
 .../source/transform/ChartOASISTContext.cxx   |    6 +-
 xmloff/source/transform/ChartOOoTContext.cxx  |    2 +-
 .../transform/ChartPlotAreaOASISTContext.cxx  |   10 +-
 .../transform/ChartPlotAreaOOoTContext.cxx    |   10 +-
 .../source/transform/ControlOASISTContext.cxx |    2 +-
 xmloff/source/transform/DocumentTContext.cxx  |    4 +-
 xmloff/source/transform/EventMap.cxx          |  136 +--
 .../source/transform/EventOASISTContext.cxx   |   16 +-
 xmloff/source/transform/EventOOoTContext.cxx  |    2 +-
 .../transform/FormPropOASISTContext.cxx       |    8 +-
 .../source/transform/FormPropOOoTContext.cxx  |    8 +-
 .../source/transform/FrameOASISTContext.cxx   |    4 +-
 xmloff/source/transform/FrameOOoTContext.cxx  |    2 +-
 xmloff/source/transform/MergeElemTContext.cxx |    2 +-
 xmloff/source/transform/MetaTContext.cxx      |    2 +-
 xmloff/source/transform/NotesTContext.cxx     |    8 +-
 xmloff/source/transform/OOo2Oasis.cxx         |  308 ++---
 xmloff/source/transform/Oasis2OOo.cxx         |  226 ++--
 .../source/transform/PropertyActionsOASIS.cxx |  508 ++++-----
 .../source/transform/PropertyActionsOOo.cxx   | 1006 ++++++++---------
 .../source/transform/StyleOASISTContext.cxx   |   32 +-
 xmloff/source/transform/StyleOOoTContext.cxx  |   54 +-
 .../source/transform/TransformerActions.hxx   |    2 +-
 xmloff/source/transform/TransformerBase.cxx   |   24 +-
 xmloff/source/xforms/TokenContext.cxx         |    6 +-
 xmloff/source/xforms/TokenContext.hxx         |    2 +-
 xmloff/source/xforms/XFormsBindContext.cxx    |    4 +-
 xmloff/source/xforms/xformsapi.cxx            |    6 +-
 xmloff/source/xforms/xformsexport.cxx         |   32 +-
 300 files changed, 7026 insertions(+), 7018 deletions(-)

diff --git a/dbaccess/source/filter/xml/xmlExport.cxx b/dbaccess/source/filter/xml/xmlExport.cxx
index 323e51bd3579..4697ce2d3543 100644
--- a/dbaccess/source/filter/xml/xmlExport.cxx
+++ b/dbaccess/source/filter/xml/xmlExport.cxx
@@ -150,31 +150,31 @@ ODBExport::ODBExport(const Reference< XComponentContext >& _rxContext, OUString
     GetMM100UnitConverter().SetCoreMeasureUnit(util::MeasureUnit::MM_10TH);
     GetMM100UnitConverter().SetXMLMeasureUnit(util::MeasureUnit::CM);
 
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XML_NAMESPACE_OFFICE );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XML_NAMESPACE_OOO );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG), XML_NAMESPACE_SVG );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XmlNamespace::OFFICE );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XmlNamespace::OOO );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG), XmlNamespace::SVG );
 
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_DB), GetXMLToken(XML_N_DB_OASIS), XML_NAMESPACE_DB );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_DB), GetXMLToken(XML_N_DB_OASIS), XmlNamespace::DB );
 
     if( nExportFlag & (SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::FONTDECLS) )
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XML_NAMESPACE_FO );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XmlNamespace::FO );
 
     if( nExportFlag & (SvXMLExportFlags::META|SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::CONTENT|SvXMLExportFlags::SCRIPTS|SvXMLExportFlags::SETTINGS) )
     {
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK );
     }
     if( nExportFlag & SvXMLExportFlags::SETTINGS )
     {
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XML_NAMESPACE_CONFIG );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XmlNamespace::CONFIG );
     }
 
     if( nExportFlag & (SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::CONTENT|SvXMLExportFlags::FONTDECLS) )
     {
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XML_NAMESPACE_STYLE );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XmlNamespace::STYLE );
     }
 
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE), XML_NAMESPACE_TABLE );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER), XML_NAMESPACE_NUMBER );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE), XmlNamespace::TABLE );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER), XmlNamespace::NUMBER );
 
     m_xExportHelper = new SvXMLExportPropertyMapper(GetTableStylesPropertySetMapper());
     m_xColumnExportHelper = new OSpecialHandleXMLExportPropertyMapper(GetColumnStylesPropertySetMapper());
@@ -422,7 +422,7 @@ void ODBExport::exportDataSource()
         if ( aDelimiter.bUsed )
             m_aDelimiter.reset( new TDelimiter( aDelimiter ) );
 
-        SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_DATASOURCE, true, true);
+        SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_DATASOURCE, true, true);
 
         exportConnectionData();
         exportDriverSettings(aSettingsMap);
@@ -450,16 +450,16 @@ void ODBExport::exportApplicationConnectionSettings(const TSettingsMap& _aSettin
     {
         TSettingsMap::const_iterator aFind = _aSettings.find(i);
         if ( aFind != _aSettings.end() )
-            AddAttribute(XML_NAMESPACE_DB, aFind->first,aFind->second);
+            AddAttribute(XmlNamespace::DB, aFind->first,aFind->second);
     }
-    SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_APPLICATION_CONNECTION_SETTINGS, true, true);
+    SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_APPLICATION_CONNECTION_SETTINGS, true, true);
 
     Reference<XPropertySet> xProp(getDataSource());
     Sequence< OUString> aValue;
     xProp->getPropertyValue(PROPERTY_TABLEFILTER) >>= aValue;
     if ( aValue.hasElements() )
     {
-        SvXMLElementExport aElem2(*this,XML_NAMESPACE_DB, XML_TABLE_FILTER, true, true);
+        SvXMLElementExport aElem2(*this,XmlNamespace::DB, XML_TABLE_FILTER, true, true);
         exportSequence(aValue,XML_TABLE_INCLUDE_FILTER,XML_TABLE_FILTER_PATTERN);
     }
 
@@ -483,9 +483,9 @@ void ODBExport::exportDriverSettings(const TSettingsMap& _aSettings)
     {
         TSettingsMap::const_iterator aFind = _aSettings.find(nSetting);
         if ( aFind != _aSettings.end() )
-            AddAttribute(XML_NAMESPACE_DB, aFind->first,aFind->second);
+            AddAttribute(XmlNamespace::DB, aFind->first,aFind->second);
     }
-    SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_DRIVER_SETTINGS, true, true);
+    SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_DRIVER_SETTINGS, true, true);
     exportAutoIncrement();
     exportDelimiter();
     exportCharSet();
@@ -493,7 +493,7 @@ void ODBExport::exportDriverSettings(const TSettingsMap& _aSettings)
 
 void ODBExport::exportConnectionData()
 {
-    SvXMLElementExport aConnData(*this,XML_NAMESPACE_DB, XML_CONNECTION_DATA, true, true);
+    SvXMLElementExport aConnData(*this,XmlNamespace::DB, XML_CONNECTION_DATA, true, true);
 
     {
         OUString sValue;
@@ -501,7 +501,7 @@ void ODBExport::exportConnectionData()
         xProp->getPropertyValue(PROPERTY_URL) >>= sValue;
         if ( m_aTypeCollection.isFileSystemBased(sValue) )
         {
-            SvXMLElementExport aDatabaseDescription(*this,XML_NAMESPACE_DB, XML_DATABASE_DESCRIPTION, true, true);
+            SvXMLElementExport aDatabaseDescription(*this,XmlNamespace::DB, XML_DATABASE_DESCRIPTION, true, true);
             {
                 SvtPathOptions aPathOptions;
                 const OUString sOrigUrl = m_aTypeCollection.cutPrefix(sValue);
@@ -513,11 +513,11 @@ void ODBExport::exportConnectionData()
                     if (sURL.isEmpty() || sURL[sURL.getLength() - 1] != '/')
                         sURL.append('/');
 
-                    AddAttribute(XML_NAMESPACE_XLINK,XML_HREF,GetRelativeReference(sURL.makeStringAndClear()));
+                    AddAttribute(XmlNamespace::XLINK,XML_HREF,GetRelativeReference(sURL.makeStringAndClear()));
                 }
                 else
-                    AddAttribute(XML_NAMESPACE_XLINK,XML_HREF,sOrigUrl);
-                AddAttribute(XML_NAMESPACE_DB,XML_MEDIA_TYPE,m_aTypeCollection.getMediaType(sValue));
+                    AddAttribute(XmlNamespace::XLINK,XML_HREF,sOrigUrl);
+                AddAttribute(XmlNamespace::DB,XML_MEDIA_TYPE,m_aTypeCollection.getMediaType(sValue));
                 const ::dbaccess::DATASOURCE_TYPE eType = m_aTypeCollection.determineType(sValue);
                 try
                 {
@@ -531,12 +531,12 @@ void ODBExport::exportConnectionData()
                         xDataSourceSettings->getPropertyValue( INFO_TEXTFILEEXTENSION ) >>= sExtension;
                     }
                     if ( !sExtension.isEmpty() )
-                        AddAttribute(XML_NAMESPACE_DB,XML_EXTENSION,sExtension);
+                        AddAttribute(XmlNamespace::DB,XML_EXTENSION,sExtension);
                 }
                 catch(const Exception&)
                 {
                 }
-                SvXMLElementExport aFileBasedDB(*this,XML_NAMESPACE_DB, XML_FILE_BASED_DATABASE, true, true);
+                SvXMLElementExport aFileBasedDB(*this,XmlNamespace::DB, XML_FILE_BASED_DATABASE, true, true);
             }
         }
         else
@@ -546,15 +546,15 @@ void ODBExport::exportConnectionData()
             m_aTypeCollection.extractHostNamePort(sValue,sDatabaseName,sHostName,nPort);
             if ( sHostName.getLength() )
             {
-                SvXMLElementExport aDatabaseDescription(*this,XML_NAMESPACE_DB, XML_DATABASE_DESCRIPTION, true, true);
+                SvXMLElementExport aDatabaseDescription(*this,XmlNamespace::DB, XML_DATABASE_DESCRIPTION, true, true);
                 {
                     OUString sType = comphelper::string::stripEnd(m_aTypeCollection.getPrefix(sValue), ':');
-                    AddAttribute(XML_NAMESPACE_DB,XML_TYPE,sType);
-                    AddAttribute(XML_NAMESPACE_DB,XML_HOSTNAME,sHostName);
+                    AddAttribute(XmlNamespace::DB,XML_TYPE,sType);
+                    AddAttribute(XmlNamespace::DB,XML_HOSTNAME,sHostName);
                     if ( nPort != -1 )
-                        AddAttribute(XML_NAMESPACE_DB,XML_PORT,OUString::number(nPort));
+                        AddAttribute(XmlNamespace::DB,XML_PORT,OUString::number(nPort));
                     if ( sDatabaseName.getLength() )
-                        AddAttribute(XML_NAMESPACE_DB,XML_DATABASE_NAME,sDatabaseName);
+                        AddAttribute(XmlNamespace::DB,XML_DATABASE_NAME,sDatabaseName);
 
                     try
                     {
@@ -567,7 +567,7 @@ void ODBExport::exportConnectionData()
                         {
                             OUString sPropertyValue;
                             if ( ( xDataSourceSettings->getPropertyValue( sPropertyName ) >>= sPropertyValue ) && !sPropertyValue.isEmpty() )
-                                AddAttribute( XML_NAMESPACE_DB, XML_LOCAL_SOCKET, sPropertyValue );
+                                AddAttribute( XmlNamespace::DB, XML_LOCAL_SOCKET, sPropertyValue );
                         }
                     }
                     catch( const Exception& )
@@ -575,14 +575,14 @@ void ODBExport::exportConnectionData()
                         DBG_UNHANDLED_EXCEPTION("dbaccess");
                     }
 
-                    SvXMLElementExport aServerDB(*this,XML_NAMESPACE_DB, XML_SERVER_DATABASE, true, true);
+                    SvXMLElementExport aServerDB(*this,XmlNamespace::DB, XML_SERVER_DATABASE, true, true);
                 }
             }
             else
             {
-                AddAttribute(XML_NAMESPACE_XLINK, XML_HREF,sValue);
-                AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE);
-                SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_CONNECTION_RESOURCE, true, true);
+                AddAttribute(XmlNamespace::XLINK, XML_HREF,sValue);
+                AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE);
+                SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_CONNECTION_RESOURCE, true, true);
             }
         }
 
@@ -599,7 +599,7 @@ template< typename T > void ODBExport::exportDataSourceSettingsSequence(
     assert(bSuccess); (void)bSuccess;
     for (T const & i : anySeq )
     {
-        SvXMLElementExport aDataValue(*this,XML_NAMESPACE_DB, XML_DATA_SOURCE_SETTING_VALUE, true, false);
+        SvXMLElementExport aDataValue(*this,XmlNamespace::DB, XML_DATA_SOURCE_SETTING_VALUE, true, false);
         // (no whitespace inside the tag)
         Characters(implConvertAny(css::uno::Any(i)));
     }
@@ -610,7 +610,7 @@ void ODBExport::exportDataSourceSettings()
     if ( m_aDataSourceSettings.empty() )
         return;
 
-    SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_DATA_SOURCE_SETTINGS, true, true);
+    SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_DATA_SOURCE_SETTINGS, true, true);
     std::vector< TypedPropertyValue >::iterator aIter = m_aDataSourceSettings.begin();
     std::vector< TypedPropertyValue >::const_iterator aEnd = m_aDataSourceSettings.end();
     for ( ; aIter != aEnd; ++aIter )
@@ -619,8 +619,8 @@ void ODBExport::exportDataSourceSettings()
 
         Type aSimpleType(bIsSequence ? comphelper::getSequenceElementType(aIter->Value.getValueType()) : aIter->Type);
 
-        AddAttribute( XML_NAMESPACE_DB, XML_DATA_SOURCE_SETTING_IS_LIST,bIsSequence ? XML_TRUE : XML_FALSE );
-        AddAttribute( XML_NAMESPACE_DB, XML_DATA_SOURCE_SETTING_NAME, aIter->Name );
+        AddAttribute( XmlNamespace::DB, XML_DATA_SOURCE_SETTING_IS_LIST,bIsSequence ? XML_TRUE : XML_FALSE );
+        AddAttribute( XmlNamespace::DB, XML_DATA_SOURCE_SETTING_NAME, aIter->Name );
 
         OUString sTypeName = lcl_implGetPropertyXMLType( aSimpleType );
         if ( bIsSequence && aSimpleType.getTypeClass() == TypeClass_ANY )
@@ -631,13 +631,13 @@ void ODBExport::exportDataSourceSettings()
                 sTypeName = lcl_implGetPropertyXMLType(aSeq[0].getValueType());
         }
 
-        AddAttribute( XML_NAMESPACE_DB, XML_DATA_SOURCE_SETTING_TYPE, sTypeName );
+        AddAttribute( XmlNamespace::DB, XML_DATA_SOURCE_SETTING_TYPE, sTypeName );
 
-        SvXMLElementExport aDataSourceSetting( *this, XML_NAMESPACE_DB, XML_DATA_SOURCE_SETTING, true, true );
+        SvXMLElementExport aDataSourceSetting( *this, XmlNamespace::DB, XML_DATA_SOURCE_SETTING, true, true );
 
         if ( !bIsSequence )
         {
-            SvXMLElementExport aDataValue( *this, XML_NAMESPACE_DB, XML_DATA_SOURCE_SETTING_VALUE, true, false );
+            SvXMLElementExport aDataValue( *this, XmlNamespace::DB, XML_DATA_SOURCE_SETTING_VALUE, true, false );
             // (no whitespace inside the tag)
             Characters( implConvertAny( aIter->Value ) );
         }
@@ -680,9 +680,9 @@ void ODBExport::exportCharSet()
 {
     if ( !m_sCharSet.isEmpty() )
     {
-        AddAttribute(XML_NAMESPACE_DB, XML_ENCODING,m_sCharSet);
+        AddAttribute(XmlNamespace::DB, XML_ENCODING,m_sCharSet);
 
-        SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_FONT_CHARSET, true, true);
+        SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_FONT_CHARSET, true, true);
     }
 }
 
@@ -690,11 +690,11 @@ void ODBExport::exportDelimiter()
 {
     if ( m_aDelimiter && m_aDelimiter->bUsed )
     {
-        AddAttribute(XML_NAMESPACE_DB, XML_FIELD,m_aDelimiter->sField);
-        AddAttribute(XML_NAMESPACE_DB, XML_STRING,m_aDelimiter->sText);
-        AddAttribute(XML_NAMESPACE_DB, XML_DECIMAL,m_aDelimiter->sDecimal);
-        AddAttribute(XML_NAMESPACE_DB, XML_THOUSAND,m_aDelimiter->sThousand);
-        SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_DELIMITER, true, true);
+        AddAttribute(XmlNamespace::DB, XML_FIELD,m_aDelimiter->sField);
+        AddAttribute(XmlNamespace::DB, XML_STRING,m_aDelimiter->sText);
+        AddAttribute(XmlNamespace::DB, XML_DECIMAL,m_aDelimiter->sDecimal);
+        AddAttribute(XmlNamespace::DB, XML_THOUSAND,m_aDelimiter->sThousand);
+        SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_DELIMITER, true, true);
     }
 }
 
@@ -702,9 +702,9 @@ void ODBExport::exportAutoIncrement()
 {
     if (m_aAutoIncrement)
     {
-        AddAttribute(XML_NAMESPACE_DB, XML_ADDITIONAL_COLUMN_STATEMENT,m_aAutoIncrement->second);
-        AddAttribute(XML_NAMESPACE_DB, XML_ROW_RETRIEVING_STATEMENT,m_aAutoIncrement->first);
-        SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_AUTO_INCREMENT, true, true);
+        AddAttribute(XmlNamespace::DB, XML_ADDITIONAL_COLUMN_STATEMENT,m_aAutoIncrement->second);
+        AddAttribute(XmlNamespace::DB, XML_ROW_RETRIEVING_STATEMENT,m_aAutoIncrement->first);
+        SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_AUTO_INCREMENT, true, true);
     }
 }
 
@@ -714,13 +714,13 @@ void ODBExport::exportSequence(const Sequence< OUString>& _aValue
 {
     if ( _aValue.hasElements() )
     {
-        SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, _eTokenFilter, true, true);
+        SvXMLElementExport aElem(*this,XmlNamespace::DB, _eTokenFilter, true, true);
 
         const OUString* pIter = _aValue.getConstArray();
         const OUString* pEnd   = pIter + _aValue.getLength();
         for(;pIter != pEnd;++pIter)
         {
-            SvXMLElementExport aDataSource(*this,XML_NAMESPACE_DB, _eTokenType, true, false);
+            SvXMLElementExport aDataSource(*this,XmlNamespace::DB, _eTokenType, true, false);
             Characters(*pIter);
         }
     }
@@ -733,15 +733,15 @@ void ODBExport::exportLogin()
     xProp->getPropertyValue(PROPERTY_USER) >>= sValue;
     bool bAddLogin = !sValue.isEmpty();
     if ( bAddLogin )
-        AddAttribute(XML_NAMESPACE_DB, XML_USER_NAME,sValue);
+        AddAttribute(XmlNamespace::DB, XML_USER_NAME,sValue);
     bool bValue = false;
     if ( xProp->getPropertyValue(PROPERTY_ISPASSWORDREQUIRED) >>= bValue )
     {
         bAddLogin = true;
-        AddAttribute(XML_NAMESPACE_DB, XML_IS_PASSWORD_REQUIRED,bValue ? XML_TRUE : XML_FALSE);
+        AddAttribute(XmlNamespace::DB, XML_IS_PASSWORD_REQUIRED,bValue ? XML_TRUE : XML_FALSE);
     }
     if ( bAddLogin )
-        SvXMLElementExport aElem(*this,XML_NAMESPACE_DB, XML_LOGIN, true, true);
+        SvXMLElementExport aElem(*this,XmlNamespace::DB, XML_LOGIN, true, true);
 }
 
 void ODBExport::exportCollection(const Reference< XNameAccess >& _xCollection
@@ -756,7 +756,7 @@ void ODBExport::exportCollection(const Reference< XNameAccess >& _xCollection
 
     std::unique_ptr<SvXMLElementExport> pComponents;
     if ( _bExportContext )
-        pComponents.reset( new SvXMLElementExport(*this,XML_NAMESPACE_DB, _eComponents, true, true));
+        pComponents.reset( new SvXMLElementExport(*this,XmlNamespace::DB, _eComponents, true, true));
     Sequence< OUString> aSeq = _xCollection->getElementNames();
     const OUString* pIter = aSeq.getConstArray();
     const OUString* pEnd   = pIter + aSeq.getLength();
@@ -764,7 +764,7 @@ void ODBExport::exportCollection(const Reference< XNameAccess >& _xCollection
     {
         Reference<XPropertySet> xProp(_xCollection->getByName(*pIter),UNO_QUERY);
         if ( _bExportContext && XML_TABLE_REPRESENTATIONS != _eComponents )
-            AddAttribute(XML_NAMESPACE_DB, XML_NAME,*pIter);
+            AddAttribute(XmlNamespace::DB, XML_NAME,*pIter);
         Reference< XNameAccess > xSub(xProp,UNO_QUERY);
         if ( xSub.is() )
         {
@@ -786,31 +786,31 @@ void ODBExport::exportComponent(XPropertySet* _xProp)
     else
         sValue = "reports/" + sValue;
 
-    AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sValue);
-    AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE);
+    AddAttribute(XmlNamespace::XLINK, XML_HREF, sValue);
+    AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE);
     bool bAsTemplate = false;
     _xProp->getPropertyValue(PROPERTY_AS_TEMPLATE) >>= bAsTemplate;
-    AddAttribute(XML_NAMESPACE_DB, XML_AS_TEMPLATE,bAsTemplate ? XML_TRUE : XML_FALSE);
-    SvXMLElementExport aComponents(*this,XML_NAMESPACE_DB, XML_COMPONENT, true, true);
+    AddAttribute(XmlNamespace::DB, XML_AS_TEMPLATE,bAsTemplate ? XML_TRUE : XML_FALSE);
+    SvXMLElementExport aComponents(*this,XmlNamespace::DB, XML_COMPONENT, true, true);
 }
 
 void ODBExport::exportQuery(XPropertySet* _xProp)
 {
-    AddAttribute(XML_NAMESPACE_DB, XML_COMMAND,getString(_xProp->getPropertyValue(PROPERTY_COMMAND)));
+    AddAttribute(XmlNamespace::DB, XML_COMMAND,getString(_xProp->getPropertyValue(PROPERTY_COMMAND)));
 
     if ( getBOOL(_xProp->getPropertyValue(PROPERTY_APPLYFILTER)) )
-        AddAttribute(XML_NAMESPACE_DB, XML_APPLY_FILTER,XML_TRUE);
+        AddAttribute(XmlNamespace::DB, XML_APPLY_FILTER,XML_TRUE);
 
     if ( _xProp->getPropertySetInfo()->hasPropertyByName(PROPERTY_APPLYORDER)
         && getBOOL(_xProp->getPropertyValue(PROPERTY_APPLYORDER)) )
-        AddAttribute(XML_NAMESPACE_DB, XML_APPLY_ORDER,XML_TRUE);
+        AddAttribute(XmlNamespace::DB, XML_APPLY_ORDER,XML_TRUE);
 
     if ( ! getBOOL(_xProp->getPropertyValue(PROPERTY_ESCAPE_PROCESSING)) )
-        AddAttribute(XML_NAMESPACE_DB, XML_ESCAPE_PROCESSING,XML_FALSE);
+        AddAttribute(XmlNamespace::DB, XML_ESCAPE_PROCESSING,XML_FALSE);
 
     exportStyleName(_xProp,GetAttrList());
 
-    SvXMLElementExport aComponents(*this,XML_NAMESPACE_DB, XML_QUERY, true, true);
+    SvXMLElementExport aComponents(*this,XmlNamespace::DB, XML_QUERY, true, true);
     Reference<XColumnsSupplier> xCol(_xProp,UNO_QUERY);
     exportColumns(xCol);
     exportFilter(_xProp,PROPERTY_FILTER,XML_FILTER_STATEMENT);
@@ -823,18 +823,18 @@ void ODBExport::exportTable(XPropertySet* _xProp)
     exportTableName(_xProp,false);
 
     if ( _xProp->getPropertySetInfo()->hasPropertyByName(PROPERTY_DESCRIPTION) )
-        AddAttribute(XML_NAMESPACE_DB, XML_DESCRIPTION,getString(_xProp->getPropertyValue(PROPERTY_DESCRIPTION)));
+        AddAttribute(XmlNamespace::DB, XML_DESCRIPTION,getString(_xProp->getPropertyValue(PROPERTY_DESCRIPTION)));
 
     if ( getBOOL(_xProp->getPropertyValue(PROPERTY_APPLYFILTER)) )
-        AddAttribute(XML_NAMESPACE_DB, XML_APPLY_FILTER,XML_TRUE);
+        AddAttribute(XmlNamespace::DB, XML_APPLY_FILTER,XML_TRUE);
 
     if ( _xProp->getPropertySetInfo()->hasPropertyByName(PROPERTY_APPLYORDER)
         && getBOOL(_xProp->getPropertyValue(PROPERTY_APPLYORDER)) )
-        AddAttribute(XML_NAMESPACE_DB, XML_APPLY_ORDER,XML_TRUE);
+        AddAttribute(XmlNamespace::DB, XML_APPLY_ORDER,XML_TRUE);
 
     exportStyleName(_xProp,GetAttrList());
 
-    SvXMLElementExport aComponents(*this,XML_NAMESPACE_DB, XML_TABLE_REPRESENTATION, true, true);
+    SvXMLElementExport aComponents(*this,XmlNamespace::DB, XML_TABLE_REPRESENTATION, true, true);
     Reference<XColumnsSupplier> xCol(_xProp,UNO_QUERY);
     exportColumns(xCol);
     exportFilter(_xProp,PROPERTY_FILTER,XML_FILTER_STATEMENT);
@@ -854,7 +854,7 @@ void ODBExport::exportStyleName(const ::xmloff::token::XMLTokenEnum _eToken,cons
     TPropertyStyleMap::const_iterator aFind = _rMap.find(_xProp);
     if ( aFind != _rMap.end() )
     {
-        _rAtt.AddAttribute( GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_DB, GetXMLToken(_eToken) ),
+        _rAtt.AddAttribute( GetNamespaceMap().GetQNameByKey( XmlNamespace::DB, GetXMLToken(_eToken) ),
                             aFind->second );
         _rMap.erase(aFind);
     }
@@ -867,17 +867,17 @@ void ODBExport::exportTableName(XPropertySet* _xProp,bool _bUpdate)
     if ( sValue.isEmpty() )
         return;
 
-    AddAttribute(XML_NAMESPACE_DB, XML_NAME,sValue);
+    AddAttribute(XmlNamespace::DB, XML_NAME,sValue);
     _xProp->getPropertyValue(_bUpdate ? OUString(PROPERTY_UPDATE_SCHEMANAME) : OUString(PROPERTY_SCHEMANAME)) >>= sValue;
     if ( !sValue.isEmpty() )
-        AddAttribute(XML_NAMESPACE_DB, XML_SCHEMA_NAME,sValue);
+        AddAttribute(XmlNamespace::DB, XML_SCHEMA_NAME,sValue);
     _xProp->getPropertyValue(_bUpdate ? OUString(PROPERTY_UPDATE_CATALOGNAME) : OUString(PROPERTY_CATALOGNAME)) >>= sValue;
     if ( !sValue.isEmpty() )
-        AddAttribute(XML_NAMESPACE_DB, XML_CATALOG_NAME,sValue);
+        AddAttribute(XmlNamespace::DB, XML_CATALOG_NAME,sValue);
 
     if ( _bUpdate )
     {
-        SvXMLElementExport aComponents(*this,XML_NAMESPACE_DB, XML_UPDATE_TABLE, true, true);
+        SvXMLElementExport aComponents(*this,XmlNamespace::DB, XML_UPDATE_TABLE, true, true);
     }
 }
 
@@ -890,8 +890,8 @@ void ODBExport::exportFilter(XPropertySet* _xProp
     _xProp->getPropertyValue(_sProp) >>= sCommand;
     if ( !sCommand.isEmpty() )
     {
-        AddAttribute(XML_NAMESPACE_DB, XML_COMMAND,sCommand);
-        SvXMLElementExport aComponents(*this,XML_NAMESPACE_DB, _eStatementType, true, true);
+        AddAttribute(XmlNamespace::DB, XML_COMMAND,sCommand);
+        SvXMLElementExport aComponents(*this,XmlNamespace::DB, _eStatementType, true, true);
     }
     SAL_WARN_IF(GetAttrList().getLength(), "dbaccess", "Invalid attribute length!");
 }
@@ -911,18 +911,18 @@ void ODBExport::exportColumns(const Reference<XColumnsSupplier>& _xColSup)
             TTableColumnMap::const_iterator aFind = m_aTableDummyColumns.find(xComponent);
             if ( aFind != m_aTableDummyColumns.end() )
             {
-                SvXMLElementExport aColumns(*this,XML_NAMESPACE_DB, XML_COLUMNS, true, true);
+                SvXMLElementExport aColumns(*this,XmlNamespace::DB, XML_COLUMNS, true, true);
                 SvXMLAttributeList* pAtt = new SvXMLAttributeList;
                 Reference<XAttributeList> xAtt = pAtt;
                 exportStyleName(aFind->second.get(),*pAtt);
                 AddAttributeList(xAtt);
-                SvXMLElementExport aColumn(*this,XML_NAMESPACE_DB, XML_COLUMN, true, true);
+                SvXMLElementExport aColumn(*this,XmlNamespace::DB, XML_COLUMN, true, true);
 
             }
             return;
         }
 
-        SvXMLElementExport aColumns(*this,XML_NAMESPACE_DB, XML_COLUMNS, true, true);
+        SvXMLElementExport aColumns(*this,XmlNamespace::DB, XML_COLUMNS, true, true);
         Sequence< OUString> aSeq = xNameAccess->getElementNames();
         const OUString* pIter = aSeq.getConstArray();
         const OUString* pEnd   = pIter + aSeq.getLength();
@@ -943,20 +943,20 @@ void ODBExport::exportColumns(const Reference<XColumnsSupplier>& _xColSup)
 
                 if ( bHidden || !sValue.isEmpty() || aColumnDefault.hasValue() || pAtt->getLength() )
                 {
-                    AddAttribute(XML_NAMESPACE_DB, XML_NAME,*pIter);
+                    AddAttribute(XmlNamespace::DB, XML_NAME,*pIter);
                     if ( bHidden )
-                        AddAttribute(XML_NAMESPACE_DB, XML_VISIBLE,XML_FALSE);
+                        AddAttribute(XmlNamespace::DB, XML_VISIBLE,XML_FALSE);
 
                     if ( !sValue.isEmpty() )
-                        AddAttribute(XML_NAMESPACE_DB, XML_HELP_MESSAGE,sValue);
+                        AddAttribute(XmlNamespace::DB, XML_HELP_MESSAGE,sValue);
 
                     if ( aColumnDefault.hasValue() )
                     {
                         OUStringBuffer sColumnDefaultString,sType;
                         ::sax::Converter::convertAny(
                             sColumnDefaultString, sType, aColumnDefault );
-                        AddAttribute(XML_NAMESPACE_DB, XML_TYPE_NAME,sType.makeStringAndClear());
-                        AddAttribute(XML_NAMESPACE_DB, XML_DEFAULT_VALUE,sColumnDefaultString.makeStringAndClear());
+                        AddAttribute(XmlNamespace::DB, XML_TYPE_NAME,sType.makeStringAndClear());
+                        AddAttribute(XmlNamespace::DB, XML_DEFAULT_VALUE,sColumnDefaultString.makeStringAndClear());
                     }
 
                     if ( pAtt->getLength() )
@@ -965,7 +965,7 @@ void ODBExport::exportColumns(const Reference<XColumnsSupplier>& _xColSup)
 
                 if ( GetAttrList().getLength() )
                 {
-                    SvXMLElementExport aComponents(*this,XML_NAMESPACE_DB, XML_COLUMN, true, true);
+                    SvXMLElementExport aComponents(*this,XmlNamespace::DB, XML_COLUMN, true, true);
                 }
             }
         }
diff --git a/dbaccess/source/filter/xml/xmlHelper.cxx b/dbaccess/source/filter/xml/xmlHelper.cxx
index a9f156fc5a51..f82a16db0a25 100644
--- a/dbaccess/source/filter/xml/xmlHelper.cxx
+++ b/dbaccess/source/filter/xml/xmlHelper.cxx
@@ -84,9 +84,9 @@ rtl::Reference < XMLPropertySetMapper > OXMLHelper::GetColumnStylesPropertySetMa
 #define MAP_CONST_COLUMN( name, prefix, token, type, context )  { name, sizeof(name)-1,  prefix, token, type|XML_TYPE_PROP_TABLE_COLUMN, context, SvtSaveOptions::ODFSVER_010, false }
     static const XMLPropertyMapEntry s_aColumnStylesProperties[] =
     {
-        MAP_CONST_COLUMN( PROPERTY_WIDTH,           XML_NAMESPACE_STYLE,    XML_COLUMN_WIDTH,       XML_TYPE_MEASURE, 0),
-        MAP_CONST_COLUMN( PROPERTY_HIDDEN,          XML_NAMESPACE_TABLE,    XML_DISPLAY,            XML_DB_TYPE_EQUAL|MID_FLAG_SPECIAL_ITEM, CTF_DB_ISVISIBLE ),
-        MAP_CONST_COLUMN( PROPERTY_NUMBERFORMAT,    XML_NAMESPACE_STYLE,    XML_DATA_STYLE_NAME,    XML_TYPE_NUMBER|MID_FLAG_SPECIAL_ITEM, CTF_DB_NUMBERFORMAT),
+        MAP_CONST_COLUMN( PROPERTY_WIDTH,           XmlNamespace::STYLE,    XML_COLUMN_WIDTH,       XML_TYPE_MEASURE, 0),
+        MAP_CONST_COLUMN( PROPERTY_HIDDEN,          XmlNamespace::TABLE,    XML_DISPLAY,            XML_DB_TYPE_EQUAL|MID_FLAG_SPECIAL_ITEM, CTF_DB_ISVISIBLE ),
+        MAP_CONST_COLUMN( PROPERTY_NUMBERFORMAT,    XmlNamespace::STYLE,    XML_DATA_STYLE_NAME,    XML_TYPE_NUMBER|MID_FLAG_SPECIAL_ITEM, CTF_DB_NUMBERFORMAT),
         MAP_END()
     };
     rtl::Reference < XMLPropertyHandlerFactory> xFac = new OPropertyHandlerFactory();
@@ -99,35 +99,35 @@ rtl::Reference < XMLPropertySetMapper > OXMLHelper::GetCellStylesPropertySetMapp
 #define MAP_CONST_TEXT( name, prefix, token, type, context ) { name, sizeof(name)-1,  prefix, token, type|XML_TYPE_PROP_TEXT, context, SvtSaveOptions::ODFSVER_010, false }
     static const XMLPropertyMapEntry s_aCellStylesProperties[] =
     {
-        MAP_CONST_CELL( PROPERTY_ALIGN,             XML_NAMESPACE_FO,       XML_TEXT_ALIGN,             XML_TYPE_TEXT_ALIGN, CTF_DB_COLUMN_TEXT_ALIGN),
-        MAP_CONST_TEXT( PROPERTY_FONTNAME,          XML_NAMESPACE_STYLE,    XML_FONT_NAME,              XML_TYPE_STRING, 0 ),
-        MAP_CONST_TEXT( PROPERTY_TEXTCOLOR,         XML_NAMESPACE_FO,       XML_COLOR,                  XML_TYPE_COLOR, 0 ),
-        MAP_CONST_TEXT( PROPERTY_TEXTLINECOLOR,     XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_COLOR,   XML_TYPE_TEXT_UNDERLINE_COLOR|MID_FLAG_MULTI_PROPERTY, 0 ),
-
-        MAP_CONST_TEXT( PROPERTY_TEXTRELIEF,        XML_NAMESPACE_STYLE,    XML_FONT_RELIEF,                XML_TYPE_TEXT_FONT_RELIEF|MID_FLAG_MULTI_PROPERTY, 0 ),
-        MAP_CONST_TEXT( PROPERTY_TEXTEMPHASIS,      XML_NAMESPACE_STYLE,    XML_TEXT_EMPHASIZE,             XML_TYPE_CONTROL_TEXT_EMPHASIZE, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTCHARWIDTH,     XML_NAMESPACE_STYLE,    XML_FONT_CHAR_WIDTH,            XML_TYPE_NUMBER16, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTCHARSET,       XML_NAMESPACE_STYLE,    XML_FONT_CHARSET,               XML_TYPE_TEXT_FONTENCODING, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTFAMILY,        XML_NAMESPACE_STYLE,    XML_FONT_FAMILY_GENERIC,        XML_TYPE_TEXT_FONTFAMILY, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTHEIGHT,        XML_NAMESPACE_FO,       XML_FONT_SIZE,                  XML_TYPE_MEASURE16, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTKERNING,       XML_NAMESPACE_STYLE,    XML_LETTER_KERNING,             XML_TYPE_BOOL, 0 ),
-
-        MAP_CONST_TEXT( PROPERTY_FONTORIENTATION,   XML_NAMESPACE_STYLE,    XML_ROTATION_ANGLE,             XML_TYPE_ROTATION_ANGLE, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTPITCH,         XML_NAMESPACE_STYLE,    XML_FONT_PITCH,                 XML_TYPE_TEXT_FONTPITCH, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTSLANT,         XML_NAMESPACE_FO,       XML_FONT_STYLE,                 XML_TYPE_TEXT_POSTURE, 0 ),
-        MAP_CONST_TEXT( "CharStrikeout",            XML_NAMESPACE_STYLE,    XML_TEXT_LINE_THROUGH_STYLE,    XML_TYPE_TEXT_CROSSEDOUT_STYLE|MID_FLAG_MERGE_PROPERTY, 0),
-        MAP_CONST_TEXT( "CharStrikeout",            XML_NAMESPACE_STYLE,    XML_TEXT_LINE_THROUGH_TYPE,     XML_TYPE_TEXT_CROSSEDOUT_TYPE|MID_FLAG_MERGE_PROPERTY,  0),
-        MAP_CONST_TEXT( "CharStrikeout",            XML_NAMESPACE_STYLE,    XML_TEXT_LINE_THROUGH_WIDTH,    XML_TYPE_TEXT_CROSSEDOUT_WIDTH|MID_FLAG_MERGE_PROPERTY, 0),
-        MAP_CONST_TEXT( "CharStrikeout",            XML_NAMESPACE_STYLE,    XML_TEXT_LINE_THROUGH_TEXT,     XML_TYPE_TEXT_CROSSEDOUT_TEXT|MID_FLAG_MERGE_PROPERTY,  0),
-        MAP_CONST_TEXT( PROPERTY_FONTSTYLENAME,     XML_NAMESPACE_STYLE,    XML_FONT_STYLE_NAME,            XML_TYPE_STRING, 0 ),
-        MAP_CONST_TEXT( "CharUnderline",            XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_STYLE,       XML_TYPE_TEXT_UNDERLINE_STYLE|MID_FLAG_MERGE_PROPERTY, 0 ),
-        MAP_CONST_TEXT( "CharUnderline",            XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_TYPE,        XML_TYPE_TEXT_UNDERLINE_TYPE|MID_FLAG_MERGE_PROPERTY, 0 ),
-        MAP_CONST_TEXT( "CharUnderline",            XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_WIDTH,       XML_TYPE_TEXT_UNDERLINE_WIDTH|MID_FLAG_MERGE_PROPERTY, 0 ),
-        MAP_CONST_TEXT( "CharUnderlineColor",       XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_COLOR,       XML_TYPE_TEXT_UNDERLINE_COLOR|MID_FLAG_MULTI_PROPERTY, 0    ),
-        MAP_CONST_TEXT( "CharUnderlineHasColor",    XML_NAMESPACE_STYLE,  XML_TEXT_UNDERLINE_COLOR,       XML_TYPE_TEXT_UNDERLINE_HASCOLOR|MID_FLAG_MERGE_ATTRIBUTE, 0    ),
-        MAP_CONST_TEXT( PROPERTY_FONTWEIGHT,        XML_NAMESPACE_FO,       XML_FONT_WEIGHT,                XML_TYPE_TEXT_WEIGHT, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTWIDTH,         XML_NAMESPACE_STYLE,    XML_FONT_WIDTH,                 XML_TYPE_FONT_WIDTH, 0 ),
-        MAP_CONST_TEXT( PROPERTY_FONTWORDLINEMODE,  XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_MODE,        XML_TYPE_TEXT_LINE_MODE|MID_FLAG_MERGE_PROPERTY, 0 ),
+        MAP_CONST_CELL( PROPERTY_ALIGN,             XmlNamespace::FO,       XML_TEXT_ALIGN,             XML_TYPE_TEXT_ALIGN, CTF_DB_COLUMN_TEXT_ALIGN),
+        MAP_CONST_TEXT( PROPERTY_FONTNAME,          XmlNamespace::STYLE,    XML_FONT_NAME,              XML_TYPE_STRING, 0 ),
+        MAP_CONST_TEXT( PROPERTY_TEXTCOLOR,         XmlNamespace::FO,       XML_COLOR,                  XML_TYPE_COLOR, 0 ),
+        MAP_CONST_TEXT( PROPERTY_TEXTLINECOLOR,     XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_COLOR,   XML_TYPE_TEXT_UNDERLINE_COLOR|MID_FLAG_MULTI_PROPERTY, 0 ),
+
+        MAP_CONST_TEXT( PROPERTY_TEXTRELIEF,        XmlNamespace::STYLE,    XML_FONT_RELIEF,                XML_TYPE_TEXT_FONT_RELIEF|MID_FLAG_MULTI_PROPERTY, 0 ),
+        MAP_CONST_TEXT( PROPERTY_TEXTEMPHASIS,      XmlNamespace::STYLE,    XML_TEXT_EMPHASIZE,             XML_TYPE_CONTROL_TEXT_EMPHASIZE, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTCHARWIDTH,     XmlNamespace::STYLE,    XML_FONT_CHAR_WIDTH,            XML_TYPE_NUMBER16, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTCHARSET,       XmlNamespace::STYLE,    XML_FONT_CHARSET,               XML_TYPE_TEXT_FONTENCODING, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTFAMILY,        XmlNamespace::STYLE,    XML_FONT_FAMILY_GENERIC,        XML_TYPE_TEXT_FONTFAMILY, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTHEIGHT,        XmlNamespace::FO,       XML_FONT_SIZE,                  XML_TYPE_MEASURE16, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTKERNING,       XmlNamespace::STYLE,    XML_LETTER_KERNING,             XML_TYPE_BOOL, 0 ),
+
+        MAP_CONST_TEXT( PROPERTY_FONTORIENTATION,   XmlNamespace::STYLE,    XML_ROTATION_ANGLE,             XML_TYPE_ROTATION_ANGLE, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTPITCH,         XmlNamespace::STYLE,    XML_FONT_PITCH,                 XML_TYPE_TEXT_FONTPITCH, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTSLANT,         XmlNamespace::FO,       XML_FONT_STYLE,                 XML_TYPE_TEXT_POSTURE, 0 ),
+        MAP_CONST_TEXT( "CharStrikeout",            XmlNamespace::STYLE,    XML_TEXT_LINE_THROUGH_STYLE,    XML_TYPE_TEXT_CROSSEDOUT_STYLE|MID_FLAG_MERGE_PROPERTY, 0),
+        MAP_CONST_TEXT( "CharStrikeout",            XmlNamespace::STYLE,    XML_TEXT_LINE_THROUGH_TYPE,     XML_TYPE_TEXT_CROSSEDOUT_TYPE|MID_FLAG_MERGE_PROPERTY,  0),
+        MAP_CONST_TEXT( "CharStrikeout",            XmlNamespace::STYLE,    XML_TEXT_LINE_THROUGH_WIDTH,    XML_TYPE_TEXT_CROSSEDOUT_WIDTH|MID_FLAG_MERGE_PROPERTY, 0),
+        MAP_CONST_TEXT( "CharStrikeout",            XmlNamespace::STYLE,    XML_TEXT_LINE_THROUGH_TEXT,     XML_TYPE_TEXT_CROSSEDOUT_TEXT|MID_FLAG_MERGE_PROPERTY,  0),
+        MAP_CONST_TEXT( PROPERTY_FONTSTYLENAME,     XmlNamespace::STYLE,    XML_FONT_STYLE_NAME,            XML_TYPE_STRING, 0 ),
+        MAP_CONST_TEXT( "CharUnderline",            XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_STYLE,       XML_TYPE_TEXT_UNDERLINE_STYLE|MID_FLAG_MERGE_PROPERTY, 0 ),
+        MAP_CONST_TEXT( "CharUnderline",            XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_TYPE,        XML_TYPE_TEXT_UNDERLINE_TYPE|MID_FLAG_MERGE_PROPERTY, 0 ),
+        MAP_CONST_TEXT( "CharUnderline",            XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_WIDTH,       XML_TYPE_TEXT_UNDERLINE_WIDTH|MID_FLAG_MERGE_PROPERTY, 0 ),
+        MAP_CONST_TEXT( "CharUnderlineColor",       XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_COLOR,       XML_TYPE_TEXT_UNDERLINE_COLOR|MID_FLAG_MULTI_PROPERTY, 0    ),
+        MAP_CONST_TEXT( "CharUnderlineHasColor",    XmlNamespace::STYLE,  XML_TEXT_UNDERLINE_COLOR,       XML_TYPE_TEXT_UNDERLINE_HASCOLOR|MID_FLAG_MERGE_ATTRIBUTE, 0    ),
+        MAP_CONST_TEXT( PROPERTY_FONTWEIGHT,        XmlNamespace::FO,       XML_FONT_WEIGHT,                XML_TYPE_TEXT_WEIGHT, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTWIDTH,         XmlNamespace::STYLE,    XML_FONT_WIDTH,                 XML_TYPE_FONT_WIDTH, 0 ),
+        MAP_CONST_TEXT( PROPERTY_FONTWORDLINEMODE,  XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_MODE,        XML_TYPE_TEXT_LINE_MODE|MID_FLAG_MERGE_PROPERTY, 0 ),
         MAP_END()
     };
     rtl::Reference < XMLPropertyHandlerFactory> xFac = new /*OPropertyHandlerFactory*/::xmloff::OControlPropertyHandlerFactory();
@@ -139,7 +139,7 @@ rtl::Reference < XMLPropertySetMapper > OXMLHelper::GetRowStylesPropertySetMappe
 #define MAP_CONST_ROW( name, prefix, token, type, context )  { name, sizeof(name)-1, prefix, token, type|XML_TYPE_PROP_TABLE_ROW, context, SvtSaveOptions::ODFSVER_010, false }
     static const XMLPropertyMapEntry s_aStylesProperties[] =
     {
-        MAP_CONST_ROW( PROPERTY_ROW_HEIGHT,         XML_NAMESPACE_STYLE,    XML_ROW_HEIGHT,             XML_TYPE_MEASURE, 0),
+        MAP_CONST_ROW( PROPERTY_ROW_HEIGHT,         XmlNamespace::STYLE,    XML_ROW_HEIGHT,             XML_TYPE_MEASURE, 0),
         MAP_END()
     };
     rtl::Reference < XMLPropertyHandlerFactory> xFac = new OPropertyHandlerFactory();
diff --git a/dbaccess/source/filter/xml/xmlTableFilterList.cxx b/dbaccess/source/filter/xml/xmlTableFilterList.cxx
index ddd799087a48..0e8ebb208746 100644
--- a/dbaccess/source/filter/xml/xmlTableFilterList.cxx
+++ b/dbaccess/source/filter/xml/xmlTableFilterList.cxx
@@ -51,8 +51,8 @@ css::uno::Reference< css::xml::sax::XFastContextHandler > OXMLTableFilterList::c
 {
     SvXMLImportContext *pContext = nullptr;
 
-    if ( IsTokenInNamespace(nElement, XML_NAMESPACE_DB) ||
-         IsTokenInNamespace(nElement, XML_NAMESPACE_DB_OASIS) )
+    if ( IsTokenInNamespace(nElement, XmlNamespace::DB) ||
+         IsTokenInNamespace(nElement, XmlNamespace::DB_OASIS) )
     {
         GetImport().GetProgressBarHelper()->Increment( PROGRESS_BAR_STEP );
         switch (nElement & TOKEN_MASK)
diff --git a/dbaccess/source/filter/xml/xmlfilter.cxx b/dbaccess/source/filter/xml/xmlfilter.cxx
index bcf498e8c16e..23adc4d1cc84 100644
--- a/dbaccess/source/filter/xml/xmlfilter.cxx
+++ b/dbaccess/source/filter/xml/xmlfilter.cxx
@@ -181,11 +181,11 @@ ODBFilter::ODBFilter( const uno::Reference< XComponentContext >& _rxContext )
     GetMM100UnitConverter().SetXMLMeasureUnit(util::MeasureUnit::CM);
     GetNamespaceMap().Add( "_db",
                         GetXMLToken(XML_N_DB),
-                        XML_NAMESPACE_DB );
+                        XmlNamespace::DB );
 
     GetNamespaceMap().Add( "__db",
                         GetXMLToken(XML_N_DB_OASIS),
-                        XML_NAMESPACE_DB );
+                        XmlNamespace::DB );
 }
 
 
diff --git a/editeng/source/misc/SvXMLAutoCorrectExport.cxx b/editeng/source/misc/SvXMLAutoCorrectExport.cxx
index 19a83eaf3bc3..ff177e13c4f3 100644
--- a/editeng/source/misc/SvXMLAutoCorrectExport.cxx
+++ b/editeng/source/misc/SvXMLAutoCorrectExport.cxx
@@ -39,7 +39,7 @@ SvXMLAutoCorrectExport::SvXMLAutoCorrectExport(
 {
     GetNamespaceMap_().Add( GetXMLToken ( XML_NP_BLOCK_LIST),
                             GetXMLToken ( XML_N_BLOCK_LIST ),
-                            XML_NAMESPACE_BLOCKLIST );
+                            XmlNamespace::BLOCKLIST );
 }
 
 ErrCode SvXMLAutoCorrectExport::exportDoc(enum XMLTokenEnum /*eClass*/)
@@ -48,22 +48,22 @@ ErrCode SvXMLAutoCorrectExport::exportDoc(enum XMLTokenEnum /*eClass*/)
 
     addChaffWhenEncryptedStorage();
 
-    AddAttribute ( XML_NAMESPACE_NONE,
-                   GetNamespaceMap_().GetAttrNameByKey ( XML_NAMESPACE_BLOCKLIST ),
-                   GetNamespaceMap_().GetNameByKey ( XML_NAMESPACE_BLOCKLIST ) );
+    AddAttribute ( XmlNamespace::NONE,
+                   GetNamespaceMap_().GetAttrNameByKey ( XmlNamespace::BLOCKLIST ),
+                   GetNamespaceMap_().GetNameByKey ( XmlNamespace::BLOCKLIST ) );
     {
-        SvXMLElementExport aRoot (*this, XML_NAMESPACE_BLOCKLIST, XML_BLOCK_LIST, true, true);
+        SvXMLElementExport aRoot (*this, XmlNamespace::BLOCKLIST, XML_BLOCK_LIST, true, true);
         const SvxAutocorrWordList::AutocorrWordSetType& rContent = pAutocorr_List->getSortedContent();
         for (auto const& content : rContent)
         {
-            AddAttribute( XML_NAMESPACE_BLOCKLIST,
+            AddAttribute( XmlNamespace::BLOCKLIST,
                           XML_ABBREVIATED_NAME,
                           content.GetShort());
-            AddAttribute( XML_NAMESPACE_BLOCKLIST,
+            AddAttribute( XmlNamespace::BLOCKLIST,
                           XML_NAME,
                           content.IsTextOnly() ? content.GetLong() : content.GetShort());
 
-            SvXMLElementExport aBlock( *this, XML_NAMESPACE_BLOCKLIST, XML_BLOCK, true, true);
+            SvXMLElementExport aBlock( *this, XmlNamespace::BLOCKLIST, XML_BLOCK, true, true);
         }
     }
     GetDocHandler()->endDocument();
@@ -80,7 +80,7 @@ SvXMLExceptionListExport::SvXMLExceptionListExport(
 {
     GetNamespaceMap_().Add( GetXMLToken ( XML_NP_BLOCK_LIST ),
                             GetXMLToken ( XML_N_BLOCK_LIST ),
-                            XML_NAMESPACE_BLOCKLIST );
+                            XmlNamespace::BLOCKLIST );
 }
 
 ErrCode SvXMLExceptionListExport::exportDoc(enum XMLTokenEnum /*eClass*/)
@@ -89,18 +89,18 @@ ErrCode SvXMLExceptionListExport::exportDoc(enum XMLTokenEnum /*eClass*/)
 
     addChaffWhenEncryptedStorage();
 
-    AddAttribute ( XML_NAMESPACE_NONE,
-                   GetNamespaceMap_().GetAttrNameByKey ( XML_NAMESPACE_BLOCKLIST ),
-                   GetNamespaceMap_().GetNameByKey ( XML_NAMESPACE_BLOCKLIST ) );
+    AddAttribute ( XmlNamespace::NONE,
+                   GetNamespaceMap_().GetAttrNameByKey ( XmlNamespace::BLOCKLIST ),
+                   GetNamespaceMap_().GetNameByKey ( XmlNamespace::BLOCKLIST ) );
     {
-        SvXMLElementExport aRoot (*this, XML_NAMESPACE_BLOCKLIST, XML_BLOCK_LIST, true, true);
+        SvXMLElementExport aRoot (*this, XmlNamespace::BLOCKLIST, XML_BLOCK_LIST, true, true);
         sal_uInt16 nBlocks= rList.size();
         for ( sal_uInt16 i = 0; i < nBlocks; i++)
         {
-            AddAttribute( XML_NAMESPACE_BLOCKLIST,
+            AddAttribute( XmlNamespace::BLOCKLIST,
                           XML_ABBREVIATED_NAME,
                           rList[i] );
-            SvXMLElementExport aBlock( *this, XML_NAMESPACE_BLOCKLIST, XML_BLOCK, true, true);
+            SvXMLElementExport aBlock( *this, XmlNamespace::BLOCKLIST, XML_BLOCK, true, true);
         }
     }
     GetDocHandler()->endDocument();
diff --git a/editeng/source/misc/SvXMLAutoCorrectTokenHandler.hxx b/editeng/source/misc/SvXMLAutoCorrectTokenHandler.hxx
index 69030fd38ab4..e475966c885c 100644
--- a/editeng/source/misc/SvXMLAutoCorrectTokenHandler.hxx
+++ b/editeng/source/misc/SvXMLAutoCorrectTokenHandler.hxx
@@ -23,11 +23,11 @@ using namespace ::xmloff::token;
 
 enum SvXMLAutoCorrectToken : sal_Int32
 {
-    NAMESPACE = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST, //65553
-    ABBREVIATED_NAME = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_ABBREVIATED_NAME,   //65655
-    BLOCK = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_BLOCK, //65791
-    BLOCKLIST = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_BLOCK_LIST, //65792
-    NAME = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_NAME    //66737
+    NAMESPACE = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST, //65553
+    ABBREVIATED_NAME = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_ABBREVIATED_NAME,   //65655
+    BLOCK = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_BLOCK, //65791
+    BLOCKLIST = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_BLOCK_LIST, //65792
+    NAME = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_NAME    //66737
 };
 
 class SvXMLAutoCorrectTokenHandler :
diff --git a/editeng/source/xml/xmltxtimp.cxx b/editeng/source/xml/xmltxtimp.cxx
index 56ff3dd137ab..c02d76d315a9 100644
--- a/editeng/source/xml/xmltxtimp.cxx
+++ b/editeng/source/xml/xmltxtimp.cxx
@@ -90,11 +90,11 @@ css::uno::Reference< css::xml::sax::XFastContextHandler > SvxXMLTextImportContex
 SvXMLImportContextRef SvxXMLTextImportContext::CreateChildContext( sal_uInt16 nPrefix, const OUString& rLocalName, const uno::Reference< XAttributeList >& xAttrList )
 {
     SvXMLImportContext* pContext = nullptr;
-    if(XML_NAMESPACE_OFFICE == nPrefix && IsXMLToken( rLocalName, XML_BODY ) )
+    if(XmlNamespace::OFFICE == nPrefix && IsXMLToken( rLocalName, XML_BODY ) )
     {
         // dealt with in createFastChildContext
     }
-    else if( XML_NAMESPACE_OFFICE == nPrefix && IsXMLToken( rLocalName, XML_AUTOMATIC_STYLES ) )
+    else if( XmlNamespace::OFFICE == nPrefix && IsXMLToken( rLocalName, XML_AUTOMATIC_STYLES ) )
     {
         // dealt with in createFastChildContext
     }
diff --git a/filter/source/svg/svgexport.cxx b/filter/source/svg/svgexport.cxx
index f28d9811cf64..e5082e06ccc4 100644
--- a/filter/source/svg/svgexport.cxx
+++ b/filter/source/svg/svgexport.cxx
@@ -125,7 +125,7 @@ public:
     virtual void growCharSet( SVGFilter::UCharSetMapMap & aTextFieldCharSets ) const = 0;
     virtual void elementExport( SVGExport* pSVGExport ) const
     {
-        pSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", getClassName() );
+        pSVGExport->AddAttribute( XmlNamespace::NONE, "class", getClassName() );
     }
     void insertMasterPage( const Reference< css::drawing::XDrawPage>& xMasterPage )
     {
@@ -169,7 +169,7 @@ public:
     virtual void elementExport( SVGExport* pSVGExport ) const override
     {
         TextField::elementExport( pSVGExport );
-        SvXMLElementExport aExp( *pSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+        SvXMLElementExport aExp( *pSVGExport, XmlNamespace::NONE, "g", true, true );
         pSVGExport->GetDocHandler()->characters( text );
     }
 };
@@ -297,8 +297,8 @@ public:
 
         OUString sDateTimeFormat = sDateFormat + " " + sTimeFormat;
 
-        pSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "date-time-format", sDateTimeFormat );
-        SvXMLElementExport aExp( *pSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+        pSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "date-time-format", sDateTimeFormat );
+        SvXMLElementExport aExp( *pSVGExport, XmlNamespace::NONE, "g", true, true );
     }
     virtual void growCharSet( SVGFilter::UCharSetMapMap & aTextFieldCharSets ) const override
     {
@@ -367,17 +367,17 @@ SVGExport::SVGExport(
     GetNamespaceMap_().Add(
         GetXMLToken(XML_NP_PRESENTATION),
         GetXMLToken(XML_N_PRESENTATION),
-        XML_NAMESPACE_PRESENTATION);
+        XmlNamespace::PRESENTATION);
 
     GetNamespaceMap_().Add(
         GetXMLToken(XML_NP_SMIL),
         GetXMLToken(XML_N_SMIL_COMPAT),
-        XML_NAMESPACE_SMIL);
+        XmlNamespace::SMIL);
 
     GetNamespaceMap_().Add(
         GetXMLToken(XML_NP_ANIMATION),
         GetXMLToken(XML_N_ANIMATION),
-        XML_NAMESPACE_ANIMATION);
+        XmlNamespace::ANIMATION);
 }
 
 SVGExport::~SVGExport()
@@ -900,10 +900,10 @@ void SVGFilter::implExportDocumentHeaderImpressOrDraw(sal_Int32 nDocX, sal_Int32
         xExtDocHandler->unknown( SVG_DTD_STRING );
     }
 
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "version", "1.2" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "version", "1.2" );
 
     if( mpSVGExport->IsUseTinyProfile() )
-         mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "baseProfile", "tiny" );
+         mpSVGExport->AddAttribute( XmlNamespace::NONE, "baseProfile", "tiny" );
 
     // The following if block means that the slide size is not adapted
     // to the size of the browser window, moreover the slide is top left aligned
@@ -912,10 +912,10 @@ void SVGFilter::implExportDocumentHeaderImpressOrDraw(sal_Int32 nDocX, sal_Int32
     if( !mbPresentation )
     {
         aAttr = OUString::number( nDocWidth * 0.01 ) + "mm";
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "width", aAttr );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "width", aAttr );
 
         aAttr = OUString::number( nDocHeight * 0.01 ) + "mm";
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "height", aAttr );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "height", aAttr );
     }
 
     // #i124608# set viewBox explicitly to the exported content
@@ -930,56 +930,56 @@ void SVGFilter::implExportDocumentHeaderImpressOrDraw(sal_Int32 nDocX, sal_Int32
 
     aAttr += OUString::number(nDocWidth) + " " + OUString::number(nDocHeight);
 
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "viewBox", aAttr );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "preserveAspectRatio", "xMidYMid" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "fill-rule", "evenodd" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "viewBox", aAttr );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "preserveAspectRatio", "xMidYMid" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "fill-rule", "evenodd" );
 
     // standard line width is based on 1 pixel on a 90 DPI device (0.28222mmm)
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "stroke-width", OUString::number( 28.222 ) );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "stroke-linejoin", "round" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns", constSvgNamespace );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:ooo", "http://xml.openoffice.org/svg/export" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:xlink", "http://www.w3.org/1999/xlink" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:presentation", "http://sun.com/xmlns/staroffice/presentation" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:smil", "http://www.w3.org/2001/SMIL20/" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:anim", "urn:oasis:names:tc:opendocument:xmlns:animation:1.0" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xml:space", "preserve" );
-
-    mpSVGDoc = new SvXMLElementExport( *mpSVGExport, XML_NAMESPACE_NONE, "svg", true, true );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "stroke-width", OUString::number( 28.222 ) );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "stroke-linejoin", "round" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns", constSvgNamespace );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:ooo", "http://xml.openoffice.org/svg/export" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:xlink", "http://www.w3.org/1999/xlink" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:presentation", "http://sun.com/xmlns/staroffice/presentation" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:smil", "http://www.w3.org/2001/SMIL20/" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:anim", "urn:oasis:names:tc:opendocument:xmlns:animation:1.0" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xml:space", "preserve" );
+
+    mpSVGDoc = new SvXMLElementExport( *mpSVGExport, XmlNamespace::NONE, "svg", true, true );
 
     // Create a ClipPath element that will be used for cutting bitmaps and other elements that could exceed the page margins.
     if(mbExportShapeSelection)
         return;
 
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "ClipPathGroup" );
-    SvXMLElementExport aDefsElem( *mpSVGExport, XML_NAMESPACE_NONE, "defs", true, true );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "ClipPathGroup" );
+    SvXMLElementExport aDefsElem( *mpSVGExport, XmlNamespace::NONE, "defs", true, true );
     {
         msClipPathId = "presentation_clip_path";
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", msClipPathId );
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "clipPathUnits", "userSpaceOnUse" );
-        SvXMLElementExport aClipPathElem( *mpSVGExport, XML_NAMESPACE_NONE, "clipPath", true, true );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", msClipPathId );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "clipPathUnits", "userSpaceOnUse" );
+        SvXMLElementExport aClipPathElem( *mpSVGExport, XmlNamespace::NONE, "clipPath", true, true );
         {
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "x", OUString::number( nDocX ) );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "y", OUString::number( nDocY ) );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "width", OUString::number( nDocWidth ) );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "height", OUString::number( nDocHeight ) );
-            SvXMLElementExport aRectElem( *mpSVGExport, XML_NAMESPACE_NONE, "rect", true, true );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "x", OUString::number( nDocX ) );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "y", OUString::number( nDocY ) );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "width", OUString::number( nDocWidth ) );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "height", OUString::number( nDocHeight ) );
+            SvXMLElementExport aRectElem( *mpSVGExport, XmlNamespace::NONE, "rect", true, true );
         }
     }
     // Create a ClipPath element applied to the leaving slide in order
     // to avoid that slide borders are visible during transition
     {
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", "presentation_clip_path_shrink" );
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "clipPathUnits", "userSpaceOnUse" );
-        SvXMLElementExport aClipPathElem( *mpSVGExport, XML_NAMESPACE_NONE, "clipPath", true, true );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", "presentation_clip_path_shrink" );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "clipPathUnits", "userSpaceOnUse" );
+        SvXMLElementExport aClipPathElem( *mpSVGExport, XmlNamespace::NONE, "clipPath", true, true );
         {
             sal_Int32 nDocWidthExt = nDocWidth / 500;
             sal_Int32 nDocHeightExt = nDocHeight / 500;
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "x", OUString::number( nDocX + nDocWidthExt / 2 ) );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "y", OUString::number( nDocY + nDocHeightExt / 2) );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "width", OUString::number( nDocWidth - nDocWidthExt ) );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "height", OUString::number( nDocHeight - nDocHeightExt ) );
-            SvXMLElementExport aRectElem( *mpSVGExport, XML_NAMESPACE_NONE, "rect", true, true );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "x", OUString::number( nDocX + nDocWidthExt / 2 ) );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "y", OUString::number( nDocY + nDocHeightExt / 2) );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "width", OUString::number( nDocWidth - nDocWidthExt ) );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "height", OUString::number( nDocHeight - nDocHeightExt ) );
+            SvXMLElementExport aRectElem( *mpSVGExport, XmlNamespace::NONE, "rect", true, true );
         }
     }
 }
@@ -988,32 +988,32 @@ void SVGFilter::implExportDocumentHeaderWriterOrCalc(sal_Int32 nDocX, sal_Int32
                                                sal_Int32 nDocWidth, sal_Int32 nDocHeight)
 {
     OUString aAttr;
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "version", "1.2" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "version", "1.2" );
 
     aAttr = OUString::number( nDocWidth * 0.01 ) + "mm";
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "width", aAttr );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "width", aAttr );
 
     aAttr = OUString::number( nDocHeight * 0.01 ) + "mm";
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "height", aAttr );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "height", aAttr );
 
     aAttr = OUString::number(nDocX) + " " + OUString::number(nDocY) + " " +
         OUString::number(nDocWidth) + " " + OUString::number(nDocHeight);
 
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "viewBox", aAttr );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "preserveAspectRatio", "xMidYMid" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "fill-rule", "evenodd" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "viewBox", aAttr );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "preserveAspectRatio", "xMidYMid" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "fill-rule", "evenodd" );
 
     // standard line width is based on 1 pixel on a 90 DPI device (0.28222mmm)
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "stroke-width", OUString::number( 28.222 ) );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "stroke-linejoin", "round" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns", constSvgNamespace );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:ooo", "http://xml.openoffice.org/svg/export" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:xlink", "http://www.w3.org/1999/xlink" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:office", "urn:oasis:names:tc:opendocument:xmlns:office:1.0" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xmlns:smil", "urn:oasis:names:tc:opendocument:xmlns:smil-compatible:1.0" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xml:space", "preserve" );
-
-    mpSVGDoc = new SvXMLElementExport( *mpSVGExport, XML_NAMESPACE_NONE, "svg", true, true );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "stroke-width", OUString::number( 28.222 ) );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "stroke-linejoin", "round" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns", constSvgNamespace );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:ooo", "http://xml.openoffice.org/svg/export" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:xlink", "http://www.w3.org/1999/xlink" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:office", "urn:oasis:names:tc:opendocument:xmlns:office:1.0" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xmlns:smil", "urn:oasis:names:tc:opendocument:xmlns:smil-compatible:1.0" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "xml:space", "preserve" );
+
+    mpSVGDoc = new SvXMLElementExport( *mpSVGExport, XmlNamespace::NONE, "svg", true, true );
 }
 
 /// Append aField to aFieldSet if it is not already present in the set and create the field id sFieldId
@@ -1052,15 +1052,15 @@ void SVGFilter::implGenerateMetaData()
         return;
 
     // we wrap all meta presentation info into a svg:defs element
-    SvXMLElementExport aDefsElem( *mpSVGExport, XML_NAMESPACE_NONE, "defs", true, true );
+    SvXMLElementExport aDefsElem( *mpSVGExport, XmlNamespace::NONE, "defs", true, true );
 
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", NSPREFIX "meta_slides" );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "number-of-slides", OUString::number( nCount ) );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "start-slide-number", OUString::number( mnVisiblePage ) );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", NSPREFIX "meta_slides" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "number-of-slides", OUString::number( nCount ) );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "start-slide-number", OUString::number( mnVisiblePage ) );
 
     if( mpSVGExport->IsUsePositionedCharacters() )
     {
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "use-positioned-chars", "true" );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "use-positioned-chars", "true" );
     }
 
     // Add a (global) Page Numbering Type attribute for the document
@@ -1101,12 +1101,12 @@ void SVGFilter::implGenerateMetaData()
                 break;
         }
         if( !sNumberingType.isEmpty() )
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "page-numbering-type", sNumberingType );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "page-numbering-type", sNumberingType );
     }
 
 
     {
-        SvXMLElementExport    aExp( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+        SvXMLElementExport    aExp( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
         const OUString                aId( NSPREFIX "meta_slide" );
         const OUString                aElemTextFieldId( aOOOElemTextField );
         std::vector< std::unique_ptr<TextField> >     aFieldSet;
@@ -1114,13 +1114,13 @@ void SVGFilter::implGenerateMetaData()
         // dummy slide - used as leaving slide for transition on the first slide
         if( mbPresentation )
         {
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", NSPREFIX "meta_dummy_slide" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrSlide, "dummy-slide" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrMaster, "dummy-master-page" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrBackgroundVisibility, "hidden" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrMasterObjectsVisibility, "hidden" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrHasTransition, "false" );
-            SvXMLElementExport aMetaDummySlideElem( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", NSPREFIX "meta_dummy_slide" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrSlide, "dummy-slide" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrMaster, "dummy-master-page" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrBackgroundVisibility, "hidden" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrMasterObjectsVisibility, "hidden" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrHasTransition, "false" );
+            SvXMLElementExport aMetaDummySlideElem( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
         }
 
         for( sal_Int32 i = 0; i < nCount; ++i )
@@ -1130,9 +1130,9 @@ void SVGFilter::implGenerateMetaData()
             Reference< css::drawing::XDrawPage > xMasterPage = xMasterPageTarget->getMasterPage();
             OUString aSlideId(aId + "_" + OUString::number( i ));
 
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", aSlideId );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrSlide, implGetValidIDFromInterface( xDrawPage ) );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrMaster, implGetValidIDFromInterface( xMasterPage ) );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", aSlideId );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrSlide, implGetValidIDFromInterface( xDrawPage ) );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrMaster, implGetValidIDFromInterface( xMasterPage ) );
 
 
             if( mbPresentation )
@@ -1151,7 +1151,7 @@ void SVGFilter::implGenerateMetaData()
                     xPropSet->getPropertyValue( "IsBackgroundVisible" )  >>= bBackgroundVisibility;
                     // in case the attribute is set to its default value it is not appended to the meta-slide element
                     if( !bBackgroundVisibility ) // visibility default value: 'visible'
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrBackgroundVisibility, "hidden" );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrBackgroundVisibility, "hidden" );
 
                     // Page Number, Date/Time, Footer and Header Fields are regarded as background objects.
                     // So bBackgroundObjectsVisibility overrides visibility of master page text fields.
@@ -1167,7 +1167,7 @@ void SVGFilter::implGenerateMetaData()
                         bPageNumberVisibility = bPageNumberVisibility && ( nPageNumberingType != css::style::NumberingType::NUMBER_NONE );
                         if( bPageNumberVisibility ) // visibility default value: 'hidden'
                         {
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "page-number-visibility", "visible" );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "page-number-visibility", "visible" );
                         }
 
                         // Date/Time Field
@@ -1182,19 +1182,19 @@ void SVGFilter::implGenerateMetaData()
                                 if( !aFixedDateTimeField.text.isEmpty() )
                                 {
                                     OUString sFieldId = implGenerateFieldId( aFieldSet, aFixedDateTimeField, aElemTextFieldId, xMasterPage );
-                                    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrDateTimeField, sFieldId );
+                                    mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrDateTimeField, sFieldId );
                                 }
                             }
                             else // the inverse applies: we are interested only in the date/time format not in the field text
                             {
                                 xPropSet->getPropertyValue( "DateTimeFormat" ) >>= aVariableDateTimeField.format;
                                 OUString sFieldId = implGenerateFieldId( aFieldSet, aVariableDateTimeField, aElemTextFieldId, xMasterPage );
-                                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrDateTimeField, sFieldId );
+                                mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrDateTimeField, sFieldId );
                             }
                         }
                         else
                         {
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "date-time-visibility", "hidden" );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "date-time-visibility", "hidden" );
                         }
 
                         // Footer Field
@@ -1205,17 +1205,17 @@ void SVGFilter::implGenerateMetaData()
                             if( !aFooterField.text.isEmpty() )
                             {
                                 OUString sFieldId = implGenerateFieldId( aFieldSet, aFooterField, aElemTextFieldId, xMasterPage );
-                                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrFooterField, sFieldId );
+                                mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrFooterField, sFieldId );
                             }
                         }
                         else
                         {
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "footer-visibility", "hidden" );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "footer-visibility", "hidden" );
                         }
                     }
                     else
                     {
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrMasterObjectsVisibility, "hidden" );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrMasterObjectsVisibility, "hidden" );
                     }
 
                     sal_Int32 nChange(0);
@@ -1227,7 +1227,7 @@ void SVGFilter::implGenerateMetaData()
                         if( xPropSet->getPropertySetInfo()->hasPropertyByName( "HighResDuration" ) &&
                             (xPropSet->getPropertyValue( "HighResDuration" ) >>= fSlideDuration) )
                         {
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrSlideDuration, OUString::number(fSlideDuration) );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrSlideDuration, OUString::number(fSlideDuration) );
                         }
                     }
                     // We look for a slide transition.
@@ -1239,7 +1239,7 @@ void SVGFilter::implGenerateMetaData()
                         sal_Int16 nTransitionSubType(0);
                         if( xPropSet->getPropertyValue( "TransitionSubtype" )  >>= nTransitionSubType )
                         {
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrHasTransition, "true" );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrHasTransition, "true" );
                         }
                     }
 
@@ -1247,7 +1247,7 @@ void SVGFilter::implGenerateMetaData()
             }
 
             {
-                SvXMLElementExport aExp2( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                SvXMLElementExport aExp2( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
             }  // when the aExp2 destructor is called the </g> tag is appended to the output file
         }
 
@@ -1257,7 +1257,7 @@ void SVGFilter::implGenerateMetaData()
             for( sal_Int32 i = 0, nSize = aFieldSet.size(); i < nSize; ++i )
             {
                 OUString sElemId = OUStringLiteral(aOOOElemTextField) + "_" + OUString::number( i );
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sElemId );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sElemId );
                 aFieldSet[i]->elementExport( mpSVGExport );
             }
             if( mpSVGExport->IsEmbedFonts() && mpSVGExport->IsUsePositionedCharacters() )
@@ -1277,8 +1277,8 @@ void SVGFilter::implGenerateMetaData()
 
 void SVGFilter::implExportAnimations()
 {
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", "presentation-animations" );
-    SvXMLElementExport aDefsContainerElem( *mpSVGExport, XML_NAMESPACE_NONE, "defs", true, true );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", "presentation-animations" );
+    SvXMLElementExport aDefsContainerElem( *mpSVGExport, XmlNamespace::NONE, "defs", true, true );
 
     for(const uno::Reference<drawing::XDrawPage> & mSelectedPage : mSelectedPages)
     {
@@ -1317,11 +1317,11 @@ void SVGFilter::implExportAnimations()
                     if( bHasEffects )
                     {
                         OUString sId = implGetValidIDFromInterface( mSelectedPage );
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrSlide, sId  );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrSlide, sId  );
                         sId += "-animations";
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sId  );
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "Animations" );
-                        SvXMLElementExport aDefsElem( *mpSVGExport, XML_NAMESPACE_NONE, "defs", true, true );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sId  );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "Animations" );
+                        SvXMLElementExport aDefsElem( *mpSVGExport, XmlNamespace::NONE, "defs", true, true );
 
                         rtl::Reference< xmloff::AnimationsExporter > xAnimationsExporter = new xmloff::AnimationsExporter( *mpSVGExport, xProps );
                         xAnimationsExporter->prepare( xRootNode );
@@ -1339,8 +1339,8 @@ void SVGFilter::implExportTextShapeIndex()
     if(mbExportShapeSelection)
         return;
 
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "TextShapeIndex" );
-    SvXMLElementExport aDefsContainerElem( *mpSVGExport, XML_NAMESPACE_NONE, "defs", true, true );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "TextShapeIndex" );
+    SvXMLElementExport aDefsContainerElem( *mpSVGExport, XmlNamespace::NONE, "defs", true, true );
 
     sal_Int32 nCount = mSelectedPages.size();
     for( sal_Int32 i = 0; i < nCount; ++i )
@@ -1353,9 +1353,9 @@ void SVGFilter::implExportTextShapeIndex()
             const OUString& rPageId = implGetValidIDFromInterface( Reference<XInterface>(xDrawPage, UNO_QUERY) );
             if( !rPageId.isEmpty() && !sTextShapeIdList.isEmpty() )
             {
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrSlide, rPageId  );
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "id-list", sTextShapeIdList );
-                SvXMLElementExport aGElem( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrSlide, rPageId  );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "id-list", sTextShapeIdList );
+                SvXMLElementExport aGElem( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
             }
         }
     }
@@ -1364,8 +1364,8 @@ void SVGFilter::implExportTextShapeIndex()
 
 void SVGFilter::implEmbedBulletGlyphs()
 {
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "EmbeddedBulletChars" );
-    SvXMLElementExport aDefsContainerElem( *mpSVGExport, XML_NAMESPACE_NONE, "defs", true, true );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "EmbeddedBulletChars" );
+    SvXMLElementExport aDefsContainerElem( *mpSVGExport, XmlNamespace::NONE, "defs", true, true );
 
     OUString sPathData = "M 580,1141 L 1163,571 580,0 -4,571 580,1141 Z";
     implEmbedBulletGlyph( 57356, sPathData );
@@ -1393,16 +1393,16 @@ void SVGFilter::implEmbedBulletGlyphs()
 void SVGFilter::implEmbedBulletGlyph( sal_Unicode cBullet, const OUString & sPathData )
 {
     OUString sId = "bullet-char-template-" + OUString::number( static_cast<sal_Int32>(cBullet) );
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sId );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sId );
 
     OUString sFactor = OUString::number( 1.0 / 2048 );
     OUString sTransform = "scale(" + sFactor + ",-" + sFactor + ")";
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "transform", sTransform );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "transform", sTransform );
 
-    SvXMLElementExport aGElem( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+    SvXMLElementExport aGElem( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "d", sPathData );
-    SvXMLElementExport aPathElem( *mpSVGExport, XML_NAMESPACE_NONE, "path", true, true );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "d", sPathData );
+    SvXMLElementExport aPathElem( *mpSVGExport, XmlNamespace::NONE, "path", true, true );
 
 }
 
@@ -1416,8 +1416,8 @@ void SVGFilter::implExportTextEmbeddedBitmaps()
     if (mEmbeddedBitmapActionSet.empty())
         return;
 
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "TextEmbeddedBitmaps" );
-    SvXMLElementExport aDefsContainerElem( *mpSVGExport, XML_NAMESPACE_NONE, "defs", true, true );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "TextEmbeddedBitmaps" );
+    SvXMLElementExport aDefsContainerElem( *mpSVGExport, XmlNamespace::NONE, "defs", true, true );
 
     OUString sId;
 
@@ -1432,7 +1432,7 @@ void SVGFilter::implExportTextEmbeddedBitmaps()
             {
                 BitmapChecksum nId = GetBitmapChecksum( pAction );
                 sId = "bitmap(" + OUString::number( nId ) + ")";
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sId );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sId );
 
                 const Reference< XInterface >& rxShape = embeddedBitmapAction.GetObject();
                 Reference< XPropertySet > xShapePropSet( rxShape, UNO_QUERY );
@@ -1477,10 +1477,10 @@ void SVGFilter::implExportTextEmbeddedBitmaps()
 
 void SVGFilter::implGenerateScript()
 {
-    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "type", "text/ecmascript" );
+    mpSVGExport->AddAttribute( XmlNamespace::NONE, "type", "text/ecmascript" );
 
     {
-        SvXMLElementExport                       aExp( *mpSVGExport, XML_NAMESPACE_NONE, "script", true, true );
+        SvXMLElementExport                       aExp( *mpSVGExport, XmlNamespace::NONE, "script", true, true );
         Reference< XExtendedDocumentHandler >    xExtDocHandler( mpSVGExport->GetDocHandler(), UNO_QUERY );
 
         if( xExtDocHandler.is() )
@@ -1565,26 +1565,26 @@ bool SVGFilter::implExportMasterPages( const std::vector< Reference< css::drawin
     // When the exported slides are more than one we wrap master page elements
     // with a svg <defs> element.
     OUString aContainerTag = (!mbPresentation) ? OUString( "g" ) : OUString( "defs" );
-    SvXMLElementExport aContainerElement( *mpSVGExport, XML_NAMESPACE_NONE, aContainerTag, true, true );
+    SvXMLElementExport aContainerElement( *mpSVGExport, XmlNamespace::NONE, aContainerTag, true, true );
 
     // dummy slide - used as leaving slide for transition on the first slide
     if( mbPresentation )
     {
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", "dummy-master-page" );
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrName, "dummy-master-page" );
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "Master_Slide" );
-        SvXMLElementExport aMasterSlideElem( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", "dummy-master-page" );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrName, "dummy-master-page" );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "Master_Slide" );
+        SvXMLElementExport aMasterSlideElem( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
         {
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", "bg-dummy-master-page" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "Background" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "visibility", "hidden" );
-            SvXMLElementExport aBackgroundElem( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", "bg-dummy-master-page" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "Background" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "visibility", "hidden" );
+            SvXMLElementExport aBackgroundElem( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
         }
         {
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", "bo-dummy-master-page" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "BackgroundObjects" );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "visibility", "hidden" );
-            SvXMLElementExport aBackgroundObjectElem( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", "bo-dummy-master-page" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "BackgroundObjects" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "visibility", "hidden" );
+            SvXMLElementExport aBackgroundObjectElem( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
         }
     }
 
@@ -1595,7 +1595,7 @@ bool SVGFilter::implExportMasterPages( const std::vector< Reference< css::drawin
         {
             // add id attribute
             const OUString & sPageId = implGetValidIDFromInterface( rxPages[i] );
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sPageId );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sPageId );
 
             bRet = implExportPage( sPageId, rxPages[i], rxPages[i], true /* is a master page */ ) || bRet;
         }
@@ -1613,20 +1613,20 @@ void SVGFilter::implExportDrawPages( const std::vector< Reference< css::drawing:
     // dummy slide - used as leaving slide for transition on the first slide
     if( mbPresentation && !mbExportShapeSelection)
     {
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "DummySlide" );
-        SvXMLElementExport aDummySlideElement( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "DummySlide" );
+        SvXMLElementExport aDummySlideElement( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
         {
-            SvXMLElementExport aGElement( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+            SvXMLElementExport aGElement( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
             {
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", "dummy-slide" );
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "Slide" );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", "dummy-slide" );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "Slide" );
                 OUString sClipPathAttrValue = "url(#" + msClipPathId + ")";
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "clip-path", sClipPathAttrValue );
-                SvXMLElementExport aSlideElement( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, "clip-path", sClipPathAttrValue );
+                SvXMLElementExport aSlideElement( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
                 {
-                    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrName, "dummy-page" );
-                    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "Page" );
-                    SvXMLElementExport aPageElement( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                    mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrName, "dummy-page" );
+                    mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "Page" );
+                    SvXMLElementExport aPageElement( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
                 }
             }
         }
@@ -1635,8 +1635,8 @@ void SVGFilter::implExportDrawPages( const std::vector< Reference< css::drawing:
     if(!mbExportShapeSelection)
     {
         // We wrap all slide in a group element with class name "SlideGroup".
-        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "SlideGroup" );
-        SvXMLElementExport aExp( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+        mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "SlideGroup" );
+        SvXMLElementExport aExp( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
         for( sal_Int32 i = nFirstPage; i <= nLastPage; ++i )
         {
@@ -1660,9 +1660,9 @@ void SVGFilter::implExportDrawPages( const std::vector< Reference< css::drawing:
                 // visibility of each slide is set to 'hidden'.
                 if( mbPresentation )
                 {
-                    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "visibility", "hidden" );
+                    mpSVGExport->AddAttribute( XmlNamespace::NONE, "visibility", "hidden" );
                 }
-                SvXMLElementExport aGElement( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                SvXMLElementExport aGElement( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
 
                 {
@@ -1671,22 +1671,22 @@ void SVGFilter::implExportDrawPages( const std::vector< Reference< css::drawing:
                     // when switching from the last to the first slide.
                     const OUString & sPageId = implGetValidIDFromInterface( rxPages[i] );
                     OUString sContainerId = "container-" + sPageId;
-                    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sContainerId );
-                    SvXMLElementExport aContainerExp( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                    mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sContainerId );
+                    SvXMLElementExport aContainerExp( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
                     {
                         // add id attribute
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sPageId );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sPageId );
 
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "Slide" );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "Slide" );
 
                         // Adding a clip path to each exported slide , so in case
                         // bitmaps or other elements exceed the slide margins, they are
                         // trimmed, even when they are shown inside a thumbnail view.
                         OUString sClipPathAttrValue = "url(#" + msClipPathId + ")";
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "clip-path", sClipPathAttrValue );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, "clip-path", sClipPathAttrValue );
 
-                        SvXMLElementExport aSlideElement( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                        SvXMLElementExport aSlideElement( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
                         implExportPage( sPageId, rxPages[i], xShapes, false /* is not a master page */ );
                     }
@@ -1715,7 +1715,7 @@ bool SVGFilter::implExportPage( const OUString & sPageId,
     {
         OUString sPageName = implGetInterfaceName( rxPage );
         if( mbPresentation && !sPageName.isEmpty() )
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, aOOOAttrName, sPageName );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, aOOOAttrName, sPageName );
 
         {
             Reference< XExtendedDocumentHandler > xExtDocHandler( mpSVGExport->GetDocHandler(), UNO_QUERY );
@@ -1729,12 +1729,12 @@ bool SVGFilter::implExportPage( const OUString & sPageId,
                 else
                     aDesc = "Page";
 
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", aDesc );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", aDesc );
             }
         }
 
         // insert the <g> open tag related to the DrawPage/MasterPage
-        SvXMLElementExport aExp( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+        SvXMLElementExport aExp( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
         // In case the page has a background object we append it .
         if( mpObjects->find( rxPage ) != mpObjects->end() )
@@ -1744,7 +1744,7 @@ bool SVGFilter::implExportPage( const OUString & sPageId,
             {
                 // background id = "bg-" + page id
                 OUString sBackgroundId = "bg-" + sPageId;
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sBackgroundId );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sBackgroundId );
 
                 // At present (LibreOffice 3.4.0) the 'IsBackgroundVisible' property is not handled
                 // by Impress; anyway we handle this property as referring only to the visibility
@@ -1757,14 +1757,14 @@ bool SVGFilter::implExportPage( const OUString & sPageId,
                 {
                     if( !mVisiblePagePropSet.bIsBackgroundVisible )
                     {
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "visibility", "hidden" );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, "visibility", "hidden" );
                     }
                 }
 
-                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class",  "Background" );
+                mpSVGExport->AddAttribute( XmlNamespace::NONE, "class",  "Background" );
 
                 // insert the <g> open tag related to the Background
-                SvXMLElementExport aExp2( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                SvXMLElementExport aExp2( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
                 // append all elements that make up the Background
                 const Point aNullPt;
@@ -1778,18 +1778,18 @@ bool SVGFilter::implExportPage( const OUString & sPageId,
         {
             // background objects id = "bo-" + page id
             OUString sBackgroundObjectsId = "bo-" + sPageId;
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", sBackgroundObjectsId );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", sBackgroundObjectsId );
             if( !mbPresentation )
             {
                 if( !mVisiblePagePropSet.bAreBackgroundObjectsVisible )
                 {
-                    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "visibility", "hidden" );
+                    mpSVGExport->AddAttribute( XmlNamespace::NONE, "visibility", "hidden" );
                 }
             }
-            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class",  "BackgroundObjects" );
+            mpSVGExport->AddAttribute( XmlNamespace::NONE, "class",  "BackgroundObjects" );
 
             // insert the <g> open tag related to the Background Objects
-            SvXMLElementExport aExp2( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+            SvXMLElementExport aExp2( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
             // append all shapes that make up the Master Slide
             bRet = implExportShapes( xShapes, true ) || bRet;
@@ -1852,13 +1852,13 @@ bool SVGFilter::implExportShape( const Reference< css::drawing::XShape >& rxShap
 
                 if( xShapes.is() )
                 {
-                    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "Group" );
+                    mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "Group" );
                     const OUString& rShapeId = implGetValidIDFromInterface( Reference<XInterface>(rxShape, UNO_QUERY) );
                     if( !rShapeId.isEmpty() )
                     {
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", rShapeId );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", rShapeId );
                     }
-                    SvXMLElementExport aExp( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                    SvXMLElementExport aExp( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
                     bRet = implExportShapes( xShapes, bMaster );
                 }
@@ -1889,7 +1889,7 @@ bool SVGFilter::implExportShape( const Reference< css::drawing::XShape >& rxShap
                             // that we are dealing with a placeholder shape
                             pElementId = &sPlaceholderTag;
 
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "visibility", "hidden" );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, "visibility", "hidden" );
 
                             sal_uInt16 nTextAdjust = sal_uInt16(ParagraphAdjust_LEFT);
                             OUString sTextAdjust;
@@ -1909,11 +1909,11 @@ bool SVGFilter::implExportShape( const Reference< css::drawing::XShape >& rxShap
                                 default:
                                     break;
                             }
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "text-adjust", sTextAdjust );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, NSPREFIX "text-adjust", sTextAdjust );
                         }
                     }
-                    mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", aShapeClass );
-                    SvXMLElementExport aExp( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                    mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", aShapeClass );
+                    SvXMLElementExport aExp( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
                     Reference< XExtendedDocumentHandler > xExtDocHandler( mpSVGExport->GetDocHandler(), UNO_QUERY );
 
@@ -1921,7 +1921,7 @@ bool SVGFilter::implExportShape( const Reference< css::drawing::XShape >& rxShap
                     xShapePropSet->getPropertyValue( "Title" ) >>= aTitle;
                     if( !aTitle.isEmpty() )
                     {
-                        SvXMLElementExport aExp2( *mpSVGExport, XML_NAMESPACE_NONE, "title", true, true );
+                        SvXMLElementExport aExp2( *mpSVGExport, XmlNamespace::NONE, "title", true, true );
                         xExtDocHandler->characters( aTitle );
                     }
 
@@ -1929,7 +1929,7 @@ bool SVGFilter::implExportShape( const Reference< css::drawing::XShape >& rxShap
                     xShapePropSet->getPropertyValue( "Description" ) >>= aDescription;
                     if( !aDescription.isEmpty() )
                     {
-                        SvXMLElementExport aExp2( *mpSVGExport, XML_NAMESPACE_NONE, "desc", true, true );
+                        SvXMLElementExport aExp2( *mpSVGExport, XmlNamespace::NONE, "desc", true, true );
                         xExtDocHandler->characters( aDescription );
                     }
 
@@ -1937,7 +1937,7 @@ bool SVGFilter::implExportShape( const Reference< css::drawing::XShape >& rxShap
                     const OUString& rShapeId = implGetValidIDFromInterface( Reference<XInterface>(rxShape, UNO_QUERY) );
                     if( !rShapeId.isEmpty() )
                     {
-                        mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "id", rShapeId );
+                        mpSVGExport->AddAttribute( XmlNamespace::NONE, "id", rShapeId );
                     }
 
                     const GDIMetaFile* pEmbeddedBitmapsMtf = nullptr;
@@ -1954,18 +1954,18 @@ bool SVGFilter::implExportShape( const Reference< css::drawing::XShape >& rxShap
                             xShapePropSet->getPropertyValue( "Bookmark" ) >>= aBookmark;
                         }
 
-                        SvXMLElementExport aExp2( *mpSVGExport, XML_NAMESPACE_NONE, "g", true, true );
+                        SvXMLElementExport aExp2( *mpSVGExport, XmlNamespace::NONE, "g", true, true );
 
                         // export the shape bounding box
                         {
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "class", "BoundingBox" );
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "stroke", "none" );
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "fill", "none" );
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "x", OUString::number( aBoundRect.X ) );
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "y", OUString::number( aBoundRect.Y ) );
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "width", OUString::number( aBoundRect.Width ) );
-                            mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "height", OUString::number( aBoundRect.Height ) );
-                            SvXMLElementExport aBB( *mpSVGExport, XML_NAMESPACE_NONE, "rect", true, true );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, "class", "BoundingBox" );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, "stroke", "none" );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, "fill", "none" );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, "x", OUString::number( aBoundRect.X ) );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, "y", OUString::number( aBoundRect.Y ) );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, "width", OUString::number( aBoundRect.Width ) );
+                            mpSVGExport->AddAttribute( XmlNamespace::NONE, "height", OUString::number( aBoundRect.Height ) );
+                            SvXMLElementExport aBB( *mpSVGExport, XmlNamespace::NONE, "rect", true, true );
                         }
 
                         if( !aBookmark.isEmpty() )
@@ -1974,8 +1974,8 @@ bool SVGFilter::implExportShape( const Reference< css::drawing::XShape >& rxShap
                             if (!aINetURLObject.HasError()
                                 && aINetURLObject.GetProtocol() != INetProtocol::Javascript)
                             {
-                                mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, "xlink:href", aBookmark);
-                                SvXMLElementExport alinkA( *mpSVGExport, XML_NAMESPACE_NONE, "a", true, true );
+                                mpSVGExport->AddAttribute( XmlNamespace::NONE, "xlink:href", aBookmark);
+                                SvXMLElementExport alinkA( *mpSVGExport, XmlNamespace::NONE, "a", true, true );
                                 mpSVGWriter->WriteMetaFile( aTopLeft, aSize, rMtf,
                                                             0xffffffff,
                                                             pElementId,
@@ -2490,29 +2490,29 @@ void SVGExport::writeMtf( const GDIMetaFile& rMtf )
         xExtDocHandler->unknown( SVG_DTD_STRING );
 
     aAttr = OUString::number( aSize.Width() ) + "mm";
-    AddAttribute( XML_NAMESPACE_NONE, "width", aAttr );
+    AddAttribute( XmlNamespace::NONE, "width", aAttr );
 
     aAttr = OUString::number( aSize.Height() ) + "mm";
-    AddAttribute( XML_NAMESPACE_NONE, "height", aAttr );
+    AddAttribute( XmlNamespace::NONE, "height", aAttr );
 
     aAttr = "0 0 " + OUString::number( aSize.Width() * 100 ) + " " +
         OUString::number( aSize.Height() * 100 );
-    AddAttribute( XML_NAMESPACE_NONE, "viewBox", aAttr );
+    AddAttribute( XmlNamespace::NONE, "viewBox", aAttr );
 
-    AddAttribute( XML_NAMESPACE_NONE, "version", "1.1" );
+    AddAttribute( XmlNamespace::NONE, "version", "1.1" );
 
     if( IsUseTinyProfile() )
-         AddAttribute( XML_NAMESPACE_NONE, "baseProfile", "tiny" );
+         AddAttribute( XmlNamespace::NONE, "baseProfile", "tiny" );
 
-    AddAttribute( XML_NAMESPACE_NONE, "xmlns", constSvgNamespace );
+    AddAttribute( XmlNamespace::NONE, "xmlns", constSvgNamespace );
     // For <image xlink:href="...">.
-    AddAttribute(XML_NAMESPACE_XMLNS, "xlink", "http://www.w3.org/1999/xlink");
-    AddAttribute( XML_NAMESPACE_NONE, "stroke-width", OUString::number( 28.222 ) );
-    AddAttribute( XML_NAMESPACE_NONE, "stroke-linejoin", "round" );
-    AddAttribute( XML_NAMESPACE_NONE, "xml:space", "preserve" );
+    AddAttribute(XmlNamespace::XMLNS, "xlink", "http://www.w3.org/1999/xlink");
+    AddAttribute( XmlNamespace::NONE, "stroke-width", OUString::number( 28.222 ) );
+    AddAttribute( XmlNamespace::NONE, "stroke-linejoin", "round" );
+    AddAttribute( XmlNamespace::NONE, "xml:space", "preserve" );
 
     {
-        SvXMLElementExport  aSVG( *this, XML_NAMESPACE_NONE, "svg", true, true );
+        SvXMLElementExport  aSVG( *this, XmlNamespace::NONE, "svg", true, true );
 
         std::vector< ObjectRepresentation > aObjects;
 
diff --git a/filter/source/svg/svgfontexport.cxx b/filter/source/svg/svgfontexport.cxx
index dcaac5043fb8..fa2cb1e00202 100644
--- a/filter/source/svg/svgfontexport.cxx
+++ b/filter/source/svg/svgfontexport.cxx
@@ -182,7 +182,7 @@ void SVGFontExport::implEmbedFont( const vcl::Font& rFont )
         return;
 
     {
-        SvXMLElementExport  aExp( mrExport, XML_NAMESPACE_NONE, "defs", true, true );
+        SvXMLElementExport  aExp( mrExport, XmlNamespace::NONE, "defs", true, true );
         OUString     aCurIdStr( "EmbeddedFont_" );
         OUString     aUnitsPerEM( OUString::number( nFontEM ) );
         ScopedVclPtrInstance< VirtualDevice > pVDev;
@@ -195,11 +195,11 @@ void SVGFontExport::implEmbedFont( const vcl::Font& rFont )
         pVDev->SetFont( aFont );
 
         aCurIdStr += OUString::number( ++mnCurFontId );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "id", aCurIdStr );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "horiz-adv-x", aUnitsPerEM );
+        mrExport.AddAttribute( XmlNamespace::NONE, "id", aCurIdStr );
+        mrExport.AddAttribute( XmlNamespace::NONE, "horiz-adv-x", aUnitsPerEM );
 
         {
-            SvXMLElementExport  aExp2( mrExport, XML_NAMESPACE_NONE, "font", true, true );
+            SvXMLElementExport  aExp2( mrExport, XmlNamespace::NONE, "font", true, true );
             OUString     aFontWeight;
             OUString     aFontStyle;
             const Size         aSize( nFontEM, nFontEM );
@@ -216,27 +216,27 @@ void SVGFontExport::implEmbedFont( const vcl::Font& rFont )
             else
                 aFontStyle = "normal";
 
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "font-family", GetMappedFontName( rFont.GetFamilyName() ) );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "units-per-em", aUnitsPerEM );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "font-weight", aFontWeight );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "font-style", aFontStyle );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "ascent", OUString::number( pVDev->GetFontMetric().GetAscent() ) );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "descent", OUString::number( pVDev->GetFontMetric().GetDescent() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, "font-family", GetMappedFontName( rFont.GetFamilyName() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, "units-per-em", aUnitsPerEM );
+            mrExport.AddAttribute( XmlNamespace::NONE, "font-weight", aFontWeight );
+            mrExport.AddAttribute( XmlNamespace::NONE, "font-style", aFontStyle );
+            mrExport.AddAttribute( XmlNamespace::NONE, "ascent", OUString::number( pVDev->GetFontMetric().GetAscent() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, "descent", OUString::number( pVDev->GetFontMetric().GetDescent() ) );
 
             {
-                SvXMLElementExport aExp3( mrExport, XML_NAMESPACE_NONE, "font-face", true, true );
+                SvXMLElementExport aExp3( mrExport, XmlNamespace::NONE, "font-face", true, true );
             }
 
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "horiz-adv-x", OUString::number( aSize.Width() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, "horiz-adv-x", OUString::number( aSize.Width() ) );
 
             {
                 const Point         aPos;
                 const tools::PolyPolygon   aMissingGlyphPolyPoly( tools::Rectangle( aPos, aSize ) );
 
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, "d", SVGActionWriter::GetPathString( aMissingGlyphPolyPoly, false ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, "d", SVGActionWriter::GetPathString( aMissingGlyphPolyPoly, false ) );
 
                 {
-                    SvXMLElementExport  aExp4( mrExport, XML_NAMESPACE_NONE, "missing-glyph", true, true );
+                    SvXMLElementExport  aExp4( mrExport, XmlNamespace::NONE, "missing-glyph", true, true );
                 }
             }
             for (auto const& glyph : rGlyphSet)
@@ -263,21 +263,21 @@ void SVGFontExport::implEmbedGlyph( OutputDevice const & rOut, const OUString& r
     if( !rOut.GetTextBoundRect( aBoundRect, rCellStr ) )
         aBoundRect = tools::Rectangle( Point( 0, 0 ), Size( rOut.GetTextWidth( rCellStr ), 0 ) );
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, "unicode", rCellStr );
+    mrExport.AddAttribute( XmlNamespace::NONE, "unicode", rCellStr );
 
     if( rCellStr[ 0 ] == nSpace && rCellStr.getLength() == 1 )
         aBoundRect = tools::Rectangle( Point( 0, 0 ), Size( rOut.GetTextWidth( OUString(' ') ), 0 ) );
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, "horiz-adv-x", OUString::number( aBoundRect.GetWidth() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, "horiz-adv-x", OUString::number( aBoundRect.GetWidth() ) );
 
     const OUString aPathString( SVGActionWriter::GetPathString( aPolyPoly, false ) );
     if( !aPathString.isEmpty() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "d", aPathString );
+        mrExport.AddAttribute( XmlNamespace::NONE, "d", aPathString );
     }
 
     {
-        SvXMLElementExport aExp( mrExport, XML_NAMESPACE_NONE, "glyph", true, true );
+        SvXMLElementExport aExp( mrExport, XmlNamespace::NONE, "glyph", true, true );
     }
 }
 
diff --git a/filter/source/svg/svgwriter.cxx b/filter/source/svg/svgwriter.cxx
index 86854235d938..d0f1efeec3c4 100644
--- a/filter/source/svg/svgwriter.cxx
+++ b/filter/source/svg/svgwriter.cxx
@@ -182,10 +182,10 @@ void SVGAttributeWriter::AddColorAttr( const char* pColorAttrName,
     if( rColor.GetTransparency() > 0 && rColor.GetTransparency() < 255 )
         aColorOpacity = OUString::number( ImplRound( ( 255.0 - rColor.GetTransparency() ) / 255.0 ) );
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, pColorAttrName, aColor );
+    mrExport.AddAttribute( XmlNamespace::NONE, pColorAttrName, aColor );
 
     if( !aColorOpacity.isEmpty() && mrExport.IsUseOpacity() )
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, pColorOpacityAttrName, aColorOpacity );
+        mrExport.AddAttribute( XmlNamespace::NONE, pColorOpacityAttrName, aColorOpacity );
 }
 
 
@@ -202,7 +202,7 @@ void SVGAttributeWriter::AddPaintAttr( const Color& rLineColor, const Color& rFi
         if( !aGradientId.isEmpty() )
         {
             OUString aGradientURL = "url(#" + aGradientId + ")";
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFill, aGradientURL );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFill, aGradientURL );
         }
     }
     else
@@ -219,7 +219,7 @@ void SVGAttributeWriter::AddGradientDef( const tools::Rectangle& rObjRect, const
         ( rGradient.GetStyle() == GradientStyle::Linear || rGradient.GetStyle() == GradientStyle::Axial ||
           rGradient.GetStyle() == GradientStyle::Radial || rGradient.GetStyle() == GradientStyle::Elliptical ) )
     {
-        SvXMLElementExport aDesc( mrExport, XML_NAMESPACE_NONE, aXMLElemDefs, true, true );
+        SvXMLElementExport aDesc( mrExport, XmlNamespace::NONE, aXMLElemDefs, true, true );
         Color aStartColor( rGradient.GetStartColor() ), aEndColor( rGradient.GetEndColor() );
         sal_uInt16 nAngle = rGradient.GetAngle() % 3600;
         Point aObjRectCenter( rObjRect.Center() );
@@ -239,7 +239,7 @@ void SVGAttributeWriter::AddGradientDef( const tools::Rectangle& rObjRect, const
         aEndColor.SetBlue( static_cast<sal_uInt8>( ( aEndColor.GetBlue() * rGradient.GetEndIntensity() ) / 100 ) );
 
         rGradientId = "Gradient_" + OUString::number( nCurGradientId++ );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrId, rGradientId );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrId, rGradientId );
 
         {
             std::unique_ptr< SvXMLElementExport >   apGradient;
@@ -254,34 +254,34 @@ void SVGAttributeWriter::AddGradientDef( const tools::Rectangle& rObjRect, const
 
                 aLinePoly.Rotate( aObjRectCenter, nAngle );
 
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrGradientUnits, "userSpaceOnUse" );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX1, OUString::number( aLinePoly[ 0 ].X() ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY1, OUString::number( aLinePoly[ 0 ].Y() ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX2, OUString::number( aLinePoly[ 1 ].X() ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY2, OUString::number( aLinePoly[ 1 ].Y() ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrGradientUnits, "userSpaceOnUse" );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX1, OUString::number( aLinePoly[ 0 ].X() ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY1, OUString::number( aLinePoly[ 0 ].Y() ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX2, OUString::number( aLinePoly[ 1 ].X() ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY2, OUString::number( aLinePoly[ 1 ].Y() ) );
 
-                apGradient.reset( new SvXMLElementExport( mrExport, XML_NAMESPACE_NONE, aXMLElemLinearGradient, true, true ) );
+                apGradient.reset( new SvXMLElementExport( mrExport, XmlNamespace::NONE, aXMLElemLinearGradient, true, true ) );
 
                 // write stop values
                 double fBorder = static_cast< double >( rGradient.GetBorder() ) *
                                 ( ( rGradient.GetStyle() == GradientStyle::Axial ) ? 0.005 : 0.01 );
 
                 ImplGetColorStr( ( rGradient.GetStyle() == GradientStyle::Axial ) ? aEndColor : aStartColor, aColorStr );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrOffset, OUString::number( fBorder ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStopColor, aColorStr );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrOffset, OUString::number( fBorder ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStopColor, aColorStr );
 
                 {
-                    SvXMLElementExport aDesc2( mrExport, XML_NAMESPACE_NONE, aXMLElemStop, true, true );
+                    SvXMLElementExport aDesc2( mrExport, XmlNamespace::NONE, aXMLElemStop, true, true );
                 }
 
                 if( rGradient.GetStyle() == GradientStyle::Axial )
                 {
                     ImplGetColorStr( aStartColor, aColorStr );
-                    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrOffset, OUString::number( 0.5 ) );
-                    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStopColor, aColorStr );
+                    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrOffset, OUString::number( 0.5 ) );
+                    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStopColor, aColorStr );
 
                     {
-                        SvXMLElementExport aDesc3( mrExport, XML_NAMESPACE_NONE, aXMLElemStop, true, true );
+                        SvXMLElementExport aDesc3( mrExport, XmlNamespace::NONE, aXMLElemStop, true, true );
                     }
                 }
 
@@ -289,11 +289,11 @@ void SVGAttributeWriter::AddGradientDef( const tools::Rectangle& rObjRect, const
                     fBorder = 0.0;
 
                 ImplGetColorStr( aEndColor, aColorStr );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrOffset, OUString::number( ImplRound( 1.0 - fBorder ) ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStopColor, aColorStr );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrOffset, OUString::number( ImplRound( 1.0 - fBorder ) ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStopColor, aColorStr );
 
                 {
-                    SvXMLElementExport aDesc4( mrExport, XML_NAMESPACE_NONE, aXMLElemStop, true, true );
+                    SvXMLElementExport aDesc4( mrExport, XmlNamespace::NONE, aXMLElemStop, true, true );
                 }
             }
             else
@@ -303,29 +303,29 @@ void SVGAttributeWriter::AddGradientDef( const tools::Rectangle& rObjRect, const
                 const double    fRadius = sqrt( static_cast< double >( rObjRect.GetWidth() ) * rObjRect.GetWidth() +
                                                 rObjRect.GetHeight() * rObjRect.GetHeight() ) * 0.5;
 
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrGradientUnits, "userSpaceOnUse" );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrCX, OUString::number( ImplRound( fCenterX ) ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrCY, OUString::number( ImplRound( fCenterY ) ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, "r", OUString::number( ImplRound( fRadius ) ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrGradientUnits, "userSpaceOnUse" );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrCX, OUString::number( ImplRound( fCenterX ) ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrCY, OUString::number( ImplRound( fCenterY ) ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, "r", OUString::number( ImplRound( fRadius ) ) );
 
-                apGradient.reset( new SvXMLElementExport( mrExport, XML_NAMESPACE_NONE, "radialGradient", true, true ) );
+                apGradient.reset( new SvXMLElementExport( mrExport, XmlNamespace::NONE, "radialGradient", true, true ) );
 
                 // write stop values
                 ImplGetColorStr( aEndColor, aColorStr );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrOffset, OUString::number( 0.0 ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStopColor, aColorStr );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrOffset, OUString::number( 0.0 ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStopColor, aColorStr );
 
                 {
-                    SvXMLElementExport aDesc5( mrExport, XML_NAMESPACE_NONE, aXMLElemStop, true, true );
+                    SvXMLElementExport aDesc5( mrExport, XmlNamespace::NONE, aXMLElemStop, true, true );
                 }
 
                 ImplGetColorStr( aStartColor, aColorStr );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrOffset,
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrOffset,
                                        OUString::number( ImplRound( 1.0 - rGradient.GetBorder() * 0.01 ) ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStopColor, aColorStr );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStopColor, aColorStr );
 
                 {
-                    SvXMLElementExport aDesc6( mrExport, XML_NAMESPACE_NONE, aXMLElemStop, true, true );
+                    SvXMLElementExport aDesc6( mrExport, XmlNamespace::NONE, aXMLElemStop, true, true );
                 }
             }
         }
@@ -351,7 +351,7 @@ void SVGAttributeWriter::SetFontAttr( const vcl::Font& rFont )
     setFontFamily();
 
     // Font Size
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontSize,
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontSize,
                            OUString::number( rFont.GetFontHeight() ) + "px" );
 
     // Font Style
@@ -365,7 +365,7 @@ void SVGAttributeWriter::SetFontAttr( const vcl::Font& rFont )
     else
         aFontStyle = "normal";
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontStyle, aFontStyle );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontStyle, aFontStyle );
 
     // Font Weight
     switch( rFont.GetWeight() )
@@ -383,7 +383,7 @@ void SVGAttributeWriter::SetFontAttr( const vcl::Font& rFont )
         default:                    nFontWeight = 400; break;
     }
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontWeight, OUString::number( nFontWeight ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontWeight, OUString::number( nFontWeight ) );
 
     if( mrExport.IsUseNativeTextDecoration() )
     {
@@ -398,7 +398,7 @@ void SVGAttributeWriter::SetFontAttr( const vcl::Font& rFont )
         else
             aTextDecoration = "none";
 
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrTextDecoration, aTextDecoration );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrTextDecoration, aTextDecoration );
     }
 
     startFontSettings();
@@ -410,11 +410,11 @@ void SVGAttributeWriter::startFontSettings()
     endFontSettings();
     if( mrExport.IsUsePositionedCharacters() )
     {
-        mpElemFont.reset( new SvXMLElementExport( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true ) );
+        mpElemFont.reset( new SvXMLElementExport( mrExport, XmlNamespace::NONE, aXMLElemG, true, true ) );
     }
     else
     {
-        mpElemFont.reset( new SvXMLElementExport( mrExport, XML_NAMESPACE_NONE, aXMLElemTspan, true, true ) );
+        mpElemFont.reset( new SvXMLElementExport( mrExport, XmlNamespace::NONE, aXMLElemTspan, true, true ) );
     }
 }
 
@@ -431,7 +431,7 @@ void SVGAttributeWriter::setFontFamily()
 
     if( mrExport.IsUsePositionedCharacters() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontFamily, mrFontExport.GetMappedFontName( rCurFont.GetFamilyName() ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontFamily, mrFontExport.GetMappedFontName( rCurFont.GetFamilyName() ) );
     }
     else
     {
@@ -450,7 +450,7 @@ void SVGAttributeWriter::setFontFamily()
             else if( eFamily == FAMILY_SWISS )
                 sFontFamily += ", sans-serif";
         }
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontFamily, sFontFamily );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontFamily, sFontFamily );
     }
 }
 
@@ -830,7 +830,7 @@ void SVGTextWriter::addFontAttributes( bool bIsTextContainer )
     // Font Size
     if( nCurFontSize != nParFontSize )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontSize,
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontSize,
                                OUString::number( nCurFontSize ) +  "px" );
     }
 
@@ -849,7 +849,7 @@ void SVGTextWriter::addFontAttributes( bool bIsTextContainer )
         {
             sFontStyle = "normal";
         }
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontStyle, sFontStyle );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontStyle, sFontStyle );
     }
 
     // Font Weight
@@ -870,7 +870,7 @@ void SVGTextWriter::addFontAttributes( bool bIsTextContainer )
             case WEIGHT_BLACK:          nFontWeight = 900; break;
             default:                    nFontWeight = 400; break;
         }
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontWeight, OUString::number( nFontWeight ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontWeight, OUString::number( nFontWeight ) );
     }
 
 
@@ -903,12 +903,12 @@ void SVGTextWriter::addFontAttributes( bool bIsTextContainer )
 
         if( !sTextDecoration.isEmpty() )
         {
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrTextDecoration, sTextDecoration );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrTextDecoration, sTextDecoration );
         }
         else if( bIsDecorationChanged )
         {
             sTextDecoration = "none";
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrTextDecoration, sTextDecoration );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrTextDecoration, sTextDecoration );
         }
     }
 
@@ -934,7 +934,7 @@ void SVGTextWriter::implSetFontFamily()
         else if( eFamily == FAMILY_SWISS )
             sFontFamily += ", sans-serif";
     }
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrFontFamily, sFontFamily );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrFontFamily, sFontFamily );
 }
 
 
@@ -991,7 +991,7 @@ bool SVGTextWriter::nextParagraph()
                         mbIsNewListItem = true;
 #if OSL_DEBUG_LEVEL > 0
                         sInfo = "NumberingLevel: " + OUString::number( nListLevel );
-                        mrExport.AddAttribute( XML_NAMESPACE_NONE, "style", sInfo );
+                        mrExport.AddAttribute( XmlNamespace::NONE, "style", sInfo );
 #endif
                         Reference< XIndexReplace > xNumRules;
                         if( xPropSetInfo->hasPropertyByName( "NumberingRules" ) )
@@ -1013,7 +1013,7 @@ bool SVGTextWriter::nextParagraph()
                                 if( bIsNumbered )
                                 {
                                     sInfo = "true";
-                                    mrExport.AddAttribute( XML_NAMESPACE_NONE, "is-numbered", sInfo );
+                                    mrExport.AddAttribute( XmlNamespace::NONE, "is-numbered", sInfo );
                                 }
 #endif
                             }
@@ -1058,7 +1058,7 @@ bool SVGTextWriter::nextParagraph()
                                             mcBulletChar = cBullet;
 #if OSL_DEBUG_LEVEL > 0
                                             sInfo = OUString::number( static_cast<sal_Int32>(cBullet) );
-                                            mrExport.AddAttribute( XML_NAMESPACE_NONE, "bullet-char", sInfo );
+                                            mrExport.AddAttribute( XmlNamespace::NONE, "bullet-char", sInfo );
 #endif
                                         }
 
@@ -1093,8 +1093,8 @@ bool SVGTextWriter::nextParagraph()
                 return false;
             }
 #if OSL_DEBUG_LEVEL > 0
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", sInfo );
-            SvXMLElementExport aParaElem( mrExport, XML_NAMESPACE_NONE, "desc", mbIWS, mbIWS );
+            mrExport.AddAttribute( XmlNamespace::NONE, "class", sInfo );
+            SvXMLElementExport aParaElem( mrExport, XmlNamespace::NONE, "desc", mbIWS, mbIWS );
 #endif
         }
         else
@@ -1106,7 +1106,7 @@ bool SVGTextWriter::nextParagraph()
         const OUString& rParagraphId = implGetValidIDFromInterface( Reference<XInterface>(xTextContent, UNO_QUERY) );
         if( !rParagraphId.isEmpty() )
         {
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "id", rParagraphId );
+            mrExport.AddAttribute( XmlNamespace::NONE, "id", rParagraphId );
         }
         return true;
     }
@@ -1223,8 +1223,8 @@ bool SVGTextWriter::nextTextPortion()
                 }
             }
 #if OSL_DEBUG_LEVEL > 0
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "TextPortion" );
-            SvXMLElementExport aPortionElem( mrExport, XML_NAMESPACE_NONE, "desc", mbIWS, mbIWS );
+            mrExport.AddAttribute( XmlNamespace::NONE, "class", "TextPortion" );
+            SvXMLElementExport aPortionElem( mrExport, XmlNamespace::NONE, "desc", mbIWS, mbIWS );
             mrExport.GetDocHandler()->characters( sInfo );
 #endif
             return true;
@@ -1245,7 +1245,7 @@ void SVGTextWriter::startTextShape()
     {
         mbIsTextShapeStarted = true;
         maParentFont = vcl::Font();
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "TextShape" );
+        mrExport.AddAttribute( XmlNamespace::NONE, "class", "TextShape" );
 
         // if text is rotated, set transform matrix at text element
         const vcl::Font& rFont = mpVDev->GetFont();
@@ -1256,10 +1256,10 @@ void SVGTextWriter::startTextShape()
                     OUString::number( rFont.GetOrientation() * -0.1 ) + " " +
                     OUString::number( aRot.X() ) + " " +
                     OUString::number( aRot.Y() ) + ")";
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrTransform, aTransform );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrTransform, aTransform );
             }
 
-        mpTextShapeElem.reset(new SvXMLElementExport( mrExport, XML_NAMESPACE_NONE, aXMLElemText, true, mbIWS ));
+        mpTextShapeElem.reset(new SvXMLElementExport( mrExport, XmlNamespace::NONE, aXMLElemText, true, mbIWS ));
         startTextParagraph();
     }
 }
@@ -1301,16 +1301,16 @@ void SVGTextWriter::startTextParagraph()
                     sNumberingType = "number-style";
                     break;
         }
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "ooo:numbering-type", sNumberingType );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "ListItem" );
+        mrExport.AddAttribute( XmlNamespace::NONE, "ooo:numbering-type", sNumberingType );
+        mrExport.AddAttribute( XmlNamespace::NONE, "class", "ListItem" );
     }
     else
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "TextParagraph" );
+        mrExport.AddAttribute( XmlNamespace::NONE, "class", "TextParagraph" );
     }
     maParentFont = vcl::Font();
     addFontAttributes( /* isTexTContainer: */ true );
-    mpTextParagraphElem.reset(new SvXMLElementExport( mrExport, XML_NAMESPACE_NONE, aXMLElemTspan, mbIWS, mbIWS ));
+    mpTextParagraphElem.reset(new SvXMLElementExport( mrExport, XmlNamespace::NONE, aXMLElemTspan, mbIWS, mbIWS ));
 
     if( !mbIsListLevelStyleImage )
     {
@@ -1334,13 +1334,13 @@ void SVGTextWriter::startTextPosition( bool bExportX, bool bExportY )
 {
     endTextPosition();
     mnTextWidth = 0;
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "TextPosition" );
+    mrExport.AddAttribute( XmlNamespace::NONE, "class", "TextPosition" );
     if( bExportX )
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX, OUString::number( maTextPos.X() ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX, OUString::number( maTextPos.X() ) );
     if( bExportY )
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY, OUString::number( maTextPos.Y() ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY, OUString::number( maTextPos.Y() ) );
 
-    mpTextPositionElem.reset( new SvXMLElementExport( mrExport, XML_NAMESPACE_NONE, aXMLElemTspan, mbIWS, mbIWS ) );
+    mpTextPositionElem.reset( new SvXMLElementExport( mrExport, XmlNamespace::NONE, aXMLElemTspan, mbIWS, mbIWS ) );
 }
 
 
@@ -1355,8 +1355,8 @@ void SVGTextWriter::implExportHyperlinkIds()
 {
     if( !msHyperlinkIdList.isEmpty() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "HyperlinkIdList" );
-        SvXMLElementExport aDescElem( mrExport, XML_NAMESPACE_NONE, "desc", true, false );
+        mrExport.AddAttribute( XmlNamespace::NONE, "class", "HyperlinkIdList" );
+        SvXMLElementExport aDescElem( mrExport, XmlNamespace::NONE, "desc", true, false );
         mrExport.GetDocHandler()->characters( msHyperlinkIdList.trim() );
         msHyperlinkIdList.clear();
     }
@@ -1368,8 +1368,8 @@ void SVGTextWriter::implWriteBulletChars()
     if( maBulletListItemMap.empty() )
         return;
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "BulletChars" );
-    SvXMLElementExport aGroupElem( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true );
+    mrExport.AddAttribute( XmlNamespace::NONE, "class", "BulletChars" );
+    SvXMLElementExport aGroupElem( mrExport, XmlNamespace::NONE, aXMLElemG, true, true );
 
     OUString sId, sPosition, sScaling, sRefId;
     for (auto const& bulletListItem : maBulletListItemMap)
@@ -1378,9 +1378,9 @@ void SVGTextWriter::implWriteBulletChars()
         // As id we use the id of the text portion placeholder with prefix
         // bullet-char-*
         sId = "bullet-char-" + bulletListItem.first;
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "id", sId );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "BulletChar" );
-        SvXMLElementExport aBulletCharElem( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true );
+        mrExport.AddAttribute( XmlNamespace::NONE, "id", sId );
+        mrExport.AddAttribute( XmlNamespace::NONE, "class", "BulletChar" );
+        SvXMLElementExport aBulletCharElem( mrExport, XmlNamespace::NONE, aXMLElemG, true, true );
 
         // <g transform="translate(x,y)" >
         {
@@ -1390,25 +1390,25 @@ void SVGTextWriter::implWriteBulletChars()
             sPosition = "translate(" +
                         OUString::number( rInfo.aPos.X() ) +
                         "," + OUString::number( rInfo.aPos.Y() ) + ")";
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "transform", sPosition );
+            mrExport.AddAttribute( XmlNamespace::NONE, "transform", sPosition );
 
             mrAttributeWriter.AddPaintAttr( COL_TRANSPARENT, rInfo.aColor );
 
-            SvXMLElementExport aPositioningElem( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true );
+            SvXMLElementExport aPositioningElem( mrExport, XmlNamespace::NONE, aXMLElemG, true, true );
 
             // <use transform="scale(font-size)" xlink:ref="/" >
             {
                 // Add size attribute through a scaling
                 sScaling = "scale(" + OUString::number( rInfo.nFontSize ) +
                            "," + OUString::number( rInfo.nFontSize )+ ")";
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, "transform", sScaling );
+                mrExport.AddAttribute( XmlNamespace::NONE, "transform", sScaling );
 
                 // Add ref attribute
                 sRefId = "#bullet-char-template-" +
                          OUString::number( ( rInfo.cBulletChar ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrXLinkHRef, sRefId );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrXLinkHRef, sRefId );
 
-                SvXMLElementExport aRefElem( mrExport, XML_NAMESPACE_NONE, "use", true, true );
+                SvXMLElementExport aRefElem( mrExport, XmlNamespace::NONE, "use", true, true );
             }
         } // close aPositioningElem
     }
@@ -1438,9 +1438,9 @@ void SVGTextWriter::writeBitmapPlaceholder( const MetaBitmapActionType* pAction
                    OUString::number( nId ) + ")";
 
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "id", sId );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "BitmapPlaceholder" );
-        SvXMLElementExport aSVGTspanElem( mrExport, XML_NAMESPACE_NONE, aXMLElemTspan, mbIWS, mbIWS );
+        mrExport.AddAttribute( XmlNamespace::NONE, "id", sId );
+        mrExport.AddAttribute( XmlNamespace::NONE, "class", "BitmapPlaceholder" );
+        SvXMLElementExport aSVGTspanElem( mrExport, XmlNamespace::NONE, aXMLElemTspan, mbIWS, mbIWS );
     }
     endTextPosition();
 }
@@ -1451,8 +1451,8 @@ void SVGTextWriter::implWriteEmbeddedBitmaps()
     if( !(mpTextEmbeddedBitmapMtf && mpTextEmbeddedBitmapMtf->GetActionSize()) )
         return;
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "EmbeddedBitmaps" );
-    SvXMLElementExport aEmbBitmapGroupElem( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true );
+    mrExport.AddAttribute( XmlNamespace::NONE, "class", "EmbeddedBitmaps" );
+    SvXMLElementExport aEmbBitmapGroupElem( mrExport, XmlNamespace::NONE, aXMLElemG, true, true );
 
     const GDIMetaFile& rMtf = *mpTextEmbeddedBitmapMtf;
 
@@ -1492,10 +1492,10 @@ void SVGTextWriter::implWriteEmbeddedBitmaps()
             // embedded bitmap id
             nId = SVGActionWriter::GetChecksum( pAction );
             OUString sId = "embedded-bitmap(" + msShapeId + "." + OUString::number( nId ) + ")";
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "id", sId );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "EmbeddedBitmap" );
+            mrExport.AddAttribute( XmlNamespace::NONE, "id", sId );
+            mrExport.AddAttribute( XmlNamespace::NONE, "class", "EmbeddedBitmap" );
 
-            SvXMLElementExport aEmbBitmapElem( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true );
+            SvXMLElementExport aEmbBitmapElem( mrExport, XmlNamespace::NONE, aXMLElemG, true, true );
 
             // <use x="?" y="?" xlink:ref="?" >
             {
@@ -1507,11 +1507,11 @@ void SVGTextWriter::implWriteEmbeddedBitmaps()
                 implMap( aPt, aPoint );
                 implMap( aSz, aSize );
 
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX, OUString::number( aPoint.X() ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY, OUString::number( aPoint.Y() ) );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrXLinkHRef, sRefId );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX, OUString::number( aPoint.X() ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY, OUString::number( aPoint.Y() ) );
+                mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrXLinkHRef, sRefId );
 
-                SvXMLElementExport aRefElem( mrExport, XML_NAMESPACE_NONE, "use", true, true );
+                SvXMLElementExport aRefElem( mrExport, XmlNamespace::NONE, "use", true, true );
             }
         } // close aEmbBitmapElem
     }
@@ -1665,9 +1665,9 @@ void SVGTextWriter::implWriteTextPortion( const Point& rPos,
                 aBulletListItemInfo.cBulletChar = mcBulletChar;
 
                 // Make this text portion a bullet placeholder
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, "id", sId );
-                mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "BulletPlaceholder" );
-                SvXMLElementExport aSVGTspanElem( mrExport, XML_NAMESPACE_NONE, aXMLElemTspan, mbIWS, mbIWS );
+                mrExport.AddAttribute( XmlNamespace::NONE, "id", sId );
+                mrExport.AddAttribute( XmlNamespace::NONE, "class", "BulletPlaceholder" );
+                SvXMLElementExport aSVGTspanElem( mrExport, XmlNamespace::NONE, aXMLElemTspan, mbIWS, mbIWS );
                 return;
             }
         }
@@ -1676,12 +1676,12 @@ void SVGTextWriter::implWriteTextPortion( const Point& rPos,
     const OUString& rTextPortionId = implGetValidIDFromInterface( Reference<XInterface>(mrCurrentTextPortion, UNO_QUERY) );
     if( !rTextPortionId.isEmpty() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "id", rTextPortionId );
+        mrExport.AddAttribute( XmlNamespace::NONE, "id", rTextPortionId );
     }
 
     if( mbIsPlaceholderShape )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "PlaceholderText" );
+        mrExport.AddAttribute( XmlNamespace::NONE, "class", "PlaceholderText" );
         mbIsPlaceholderShape = false;
     }
 
@@ -1689,7 +1689,7 @@ void SVGTextWriter::implWriteTextPortion( const Point& rPos,
 
     if (!maTextOpacity.isEmpty())
     {
-        mrExport.AddAttribute(XML_NAMESPACE_NONE, "fill-opacity", maTextOpacity);
+        mrExport.AddAttribute(XmlNamespace::NONE, "fill-opacity", maTextOpacity);
     }
 
     mrAttributeWriter.AddPaintAttr( COL_TRANSPARENT, aTextColor );
@@ -1697,19 +1697,19 @@ void SVGTextWriter::implWriteTextPortion( const Point& rPos,
     // <a> tag for link should be the innermost tag, inside <tspan>
     if( !mbIsPlaceholderShape && mbIsURLField && !msUrl.isEmpty() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "UrlField" );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrXLinkHRef, msUrl );
+        mrExport.AddAttribute( XmlNamespace::NONE, "class", "UrlField" );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrXLinkHRef, msUrl );
 
-        SvXMLElementExport aSVGTspanElem( mrExport, XML_NAMESPACE_NONE, aXMLElemTspan, mbIWS, mbIWS );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrXLinkHRef, msUrl );
+        SvXMLElementExport aSVGTspanElem( mrExport, XmlNamespace::NONE, aXMLElemTspan, mbIWS, mbIWS );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrXLinkHRef, msUrl );
         {
-            SvXMLElementExport aSVGAElem( mrExport, XML_NAMESPACE_NONE, "a", mbIWS, mbIWS );
+            SvXMLElementExport aSVGAElem( mrExport, XmlNamespace::NONE, "a", mbIWS, mbIWS );
             mrExport.GetDocHandler()->characters( rText );
         }
     }
     else
     {
-        SvXMLElementExport aSVGTspanElem( mrExport, XML_NAMESPACE_NONE, aXMLElemTspan, mbIWS, mbIWS );
+        SvXMLElementExport aSVGTspanElem( mrExport, XmlNamespace::NONE, aXMLElemTspan, mbIWS, mbIWS );
         mrExport.GetDocHandler()->characters( rText );
     }
 
@@ -1892,19 +1892,19 @@ void SVGActionWriter::ImplWriteLine( const Point& rPt1, const Point& rPt2,
     ImplMap( rPt1, aPt1 );
     ImplMap( rPt2, aPt2 );
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX1, OUString::number( aPt1.X() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY1, OUString::number( aPt1.Y() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX2, OUString::number( aPt2.X() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY2, OUString::number( aPt2.Y() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX1, OUString::number( aPt1.X() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY1, OUString::number( aPt1.Y() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX2, OUString::number( aPt2.X() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY2, OUString::number( aPt2.Y() ) );
 
     if( pLineColor )
     {
-        // !!! mrExport.AddAttribute( XML_NAMESPACE_NONE, ... )
+        // !!! mrExport.AddAttribute( XmlNamespace::NONE, ... )
         OSL_FAIL( "SVGActionWriter::ImplWriteLine: Line color not implemented" );
     }
 
     {
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_NONE, "line", true, true );
+        SvXMLElementExport aElem( mrExport, XmlNamespace::NONE, "line", true, true );
     }
 }
 
@@ -1915,18 +1915,18 @@ void SVGActionWriter::ImplWriteRect( const tools::Rectangle& rRect, long nRadX,
 
     ImplMap( rRect, aRect );
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX, OUString::number( aRect.Left() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY, OUString::number( aRect.Top() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrWidth, OUString::number( aRect.GetWidth() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrHeight, OUString::number( aRect.GetHeight() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX, OUString::number( aRect.Left() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY, OUString::number( aRect.Top() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrWidth, OUString::number( aRect.GetWidth() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrHeight, OUString::number( aRect.GetHeight() ) );
 
     if( nRadX )
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrRX, OUString::number( ImplMap( nRadX ) ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrRX, OUString::number( ImplMap( nRadX ) ) );
 
     if( nRadY )
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrRY, OUString::number( ImplMap( nRadY ) ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrRY, OUString::number( ImplMap( nRadY ) ) );
 
-    SvXMLElementExport aElem( mrExport, XML_NAMESPACE_NONE, "rect", true, true );
+    SvXMLElementExport aElem( mrExport, XmlNamespace::NONE, "rect", true, true );
 }
 
 
@@ -1936,13 +1936,13 @@ void SVGActionWriter::ImplWriteEllipse( const Point& rCenter, long nRadX, long n
 
     ImplMap( rCenter, aCenter );
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrCX, OUString::number( aCenter.X() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrCY, OUString::number( aCenter.Y() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrRX, OUString::number( ImplMap( nRadX ) ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrRY, OUString::number( ImplMap( nRadY ) ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrCX, OUString::number( aCenter.X() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrCY, OUString::number( aCenter.Y() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrRX, OUString::number( ImplMap( nRadX ) ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrRY, OUString::number( ImplMap( nRadY ) ) );
 
     {
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_NONE, "ellipse", true, true );
+        SvXMLElementExport aElem( mrExport, XmlNamespace::NONE, "ellipse", true, true );
     }
 }
 
@@ -1953,7 +1953,7 @@ void SVGActionWriter::ImplAddLineAttr( const LineInfo &rAttrs )
         return;
 
     sal_Int32 nStrokeWidth = ImplMap( rAttrs.GetWidth() );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStrokeWidth,
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStrokeWidth,
                            OUString::number( nStrokeWidth ) );
     // support for LineJoint
     switch(rAttrs.GetLineJoin())
@@ -1961,17 +1961,17 @@ void SVGActionWriter::ImplAddLineAttr( const LineInfo &rAttrs )
         case basegfx::B2DLineJoin::NONE:
         case basegfx::B2DLineJoin::Miter:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinejoin, "miter");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinejoin, "miter");
             break;
         }
         case basegfx::B2DLineJoin::Bevel:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinejoin, "bevel");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinejoin, "bevel");
             break;
         }
         case basegfx::B2DLineJoin::Round:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinejoin, "round");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinejoin, "round");
             break;
         }
     }
@@ -1983,17 +1983,17 @@ void SVGActionWriter::ImplAddLineAttr( const LineInfo &rAttrs )
         {
             // butt is Svg default, so no need to write until the exporter might write styles.
             // If this happens, activate here
-            // mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinecap, "butt");
+            // mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinecap, "butt");
             break;
         }
         case css::drawing::LineCap_ROUND:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinecap, "round");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinecap, "round");
             break;
         }
         case css::drawing::LineCap_SQUARE:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinecap, "square");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinecap, "square");
             break;
         }
     }
@@ -2012,11 +2012,11 @@ void SVGActionWriter::ImplWritePolyPolygon( const tools::PolyPolygon& rPolyPoly,
         aPolyPoly = rPolyPoly;
 
     // add path data attribute
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, "d", GetPathString( aPolyPoly, bLineOnly ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, "d", GetPathString( aPolyPoly, bLineOnly ) );
 
     {
         // write polyline/polygon element
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_NONE, "path", true, true );
+        SvXMLElementExport aElem( mrExport, XmlNamespace::NONE, "path", true, true );
     }
 }
 
@@ -2034,12 +2034,12 @@ void SVGActionWriter::ImplWriteShape( const SVGShapeDescriptor& rShape )
     maAttributeWriter.AddPaintAttr( rShape.maShapeLineColor, rShape.maShapeFillColor, &aBoundRect, rShape.mapShapeGradient.get() );
 
     if( !rShape.maId.isEmpty() )
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrId, rShape.maId );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrId, rShape.maId );
 
     if( rShape.mnStrokeWidth )
     {
         sal_Int32 nStrokeWidth = ImplMap( rShape.mnStrokeWidth );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStrokeWidth, OUString::number( nStrokeWidth ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStrokeWidth, OUString::number( nStrokeWidth ) );
     }
 
     // support for LineJoin
@@ -2050,17 +2050,17 @@ void SVGActionWriter::ImplWriteShape( const SVGShapeDescriptor& rShape )
         {
             // miter is Svg default, so no need to write until the exporter might write styles.
             // If this happens, activate here
-            // mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinejoin, "miter");
+            // mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinejoin, "miter");
             break;
         }
         case basegfx::B2DLineJoin::Bevel:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinejoin, "bevel");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinejoin, "bevel");
             break;
         }
         case basegfx::B2DLineJoin::Round:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinejoin, "round");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinejoin, "round");
             break;
         }
     }
@@ -2072,17 +2072,17 @@ void SVGActionWriter::ImplWriteShape( const SVGShapeDescriptor& rShape )
         {
             // butt is Svg default, so no need to write until the exporter might write styles.
             // If this happens, activate here
-            // mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinecap, "butt");
+            // mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinecap, "butt");
             break;
         }
         case css::drawing::LineCap_ROUND:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinecap, "round");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinecap, "round");
             break;
         }
         case css::drawing::LineCap_SQUARE:
         {
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStrokeLinecap, "square");
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStrokeLinecap, "square");
             break;
         }
     }
@@ -2101,7 +2101,7 @@ void SVGActionWriter::ImplWriteShape( const SVGShapeDescriptor& rShape )
             aDashArrayStr.append(OUString::number( nDash ));
         }
 
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "stroke-dasharray", aDashArrayStr.makeStringAndClear() );
+        mrExport.AddAttribute( XmlNamespace::NONE, "stroke-dasharray", aDashArrayStr.makeStringAndClear() );
     }
 
     ImplWritePolyPolygon( aPolyPoly, bLineOnly, false );
@@ -2113,12 +2113,12 @@ void SVGActionWriter::ImplCreateClipPathDef( const tools::PolyPolygon& rPolyPoly
 {
     OUString aClipPathId = aPrefixClipPathId + OUString::number( mnCurClipPathId++ );
 
-    SvXMLElementExport aElemDefs( mrExport, XML_NAMESPACE_NONE, aXMLElemDefs, true, true );
+    SvXMLElementExport aElemDefs( mrExport, XmlNamespace::NONE, aXMLElemDefs, true, true );
 
     {
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrId, aClipPathId );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "clipPathUnits", "userSpaceOnUse" );
-        SvXMLElementExport aElemClipPath( mrExport, XML_NAMESPACE_NONE, "clipPath", true, true );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrId, aClipPathId );
+        mrExport.AddAttribute( XmlNamespace::NONE, "clipPathUnits", "userSpaceOnUse" );
+        SvXMLElementExport aElemClipPath( mrExport, XmlNamespace::NONE, "clipPath", true, true );
 
         ImplWritePolyPolygon(rPolyPoly, false);
     }
@@ -2132,8 +2132,8 @@ void SVGActionWriter::ImplStartClipRegion(sal_Int32 nClipPathId)
         return;
 
     OUString aUrl = OUStringLiteral("url(#") + aPrefixClipPathId + OUString::number( nClipPathId ) + ")";
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, "clip-path", aUrl );
-    mpCurrentClipRegionElem.reset( new SvXMLElementExport( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, "clip-path", aUrl );
+    mpCurrentClipRegionElem.reset( new SvXMLElementExport( mrExport, XmlNamespace::NONE, aXMLElemG, true, true ) );
 }
 
 void SVGActionWriter::ImplEndClipRegion()
@@ -2164,27 +2164,27 @@ void SVGActionWriter::ImplWritePattern( const tools::PolyPolygon& rPolyPoly,
     if( !rPolyPoly.Count() )
         return;
 
-    SvXMLElementExport aElemG( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true );
+    SvXMLElementExport aElemG( mrExport, XmlNamespace::NONE, aXMLElemG, true, true );
 
     OUString aPatternId = "pattern" + OUString::number( mnCurPatternId++ );
 
     {
-        SvXMLElementExport aElemDefs( mrExport, XML_NAMESPACE_NONE, aXMLElemDefs, true, true );
+        SvXMLElementExport aElemDefs( mrExport, XmlNamespace::NONE, aXMLElemDefs, true, true );
 
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrId, aPatternId );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrId, aPatternId );
 
         tools::Rectangle aRect;
         ImplMap( rPolyPoly.GetBoundRect(), aRect );
 
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX, OUString::number( aRect.Left() ) );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY, OUString::number( aRect.Top() ) );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrWidth, OUString::number( aRect.GetWidth() ) );
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrHeight, OUString::number( aRect.GetHeight() ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX, OUString::number( aRect.Left() ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY, OUString::number( aRect.Top() ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrWidth, OUString::number( aRect.GetWidth() ) );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrHeight, OUString::number( aRect.GetHeight() ) );
 
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, "patternUnits", OUString( "userSpaceOnUse") );
+        mrExport.AddAttribute( XmlNamespace::NONE, "patternUnits", OUString( "userSpaceOnUse") );
 
         {
-            SvXMLElementExport aElemPattern( mrExport, XML_NAMESPACE_NONE, "pattern", true, true );
+            SvXMLElementExport aElemPattern( mrExport, XmlNamespace::NONE, "pattern", true, true );
 
             // The origin of a pattern is positioned at (aRect.Left(), aRect.Top()).
             // So we need to adjust the pattern coordinate.
@@ -2192,10 +2192,10 @@ void SVGActionWriter::ImplWritePattern( const tools::PolyPolygon& rPolyPoly,
                                   OUString::number( -aRect.Left() ) +
                                   "," + OUString::number( -aRect.Top() ) +
                                   ")";
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrTransform, aTransform );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrTransform, aTransform );
 
             {
-                SvXMLElementExport aElemG2( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true );
+                SvXMLElementExport aElemG2( mrExport, XmlNamespace::NONE, aXMLElemG, true, true );
 
                 GDIMetaFile aTmpMtf;
                 if( pHatch )
@@ -2209,7 +2209,7 @@ void SVGActionWriter::ImplWritePattern( const tools::PolyPolygon& rPolyPoly,
 
     OUString aPatternStyle = "fill:url(#" + aPatternId + ")";
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStyle, aPatternStyle );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStyle, aPatternStyle );
     ImplWritePolyPolygon( rPolyPoly, false );
 }
 
@@ -2235,14 +2235,14 @@ void SVGActionWriter::ImplWriteGradientLinear( const tools::PolyPolygon& rPolyPo
     if( !rPolyPoly.Count() )
         return;
 
-    SvXMLElementExport aElemG( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true );
+    SvXMLElementExport aElemG( mrExport, XmlNamespace::NONE, aXMLElemG, true, true );
 
     OUString aGradientId = "gradient" + OUString::number( mnCurGradientId++ );
 
     {
-        SvXMLElementExport aElemDefs( mrExport, XML_NAMESPACE_NONE, aXMLElemDefs, true, true );
+        SvXMLElementExport aElemDefs( mrExport, XmlNamespace::NONE, aXMLElemDefs, true, true );
 
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrId, aGradientId );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrId, aGradientId );
         {
             tools::Rectangle aTmpRect, aRect;
             Point aTmpCenter, aCenter;
@@ -2262,17 +2262,17 @@ void SVGActionWriter::ImplWriteGradientLinear( const tools::PolyPolygon& rPolyPo
             aPoly[ 1 ].setY( aRect.Bottom() );
             aPoly.Rotate( aCenter, nAngle );
 
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX1, OUString::number( aPoly[ 0 ].X() ) );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY1, OUString::number( aPoly[ 0 ].Y() ) );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX2, OUString::number( aPoly[ 1 ].X() ) );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY2, OUString::number( aPoly[ 1 ].Y() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX1, OUString::number( aPoly[ 0 ].X() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY1, OUString::number( aPoly[ 0 ].Y() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX2, OUString::number( aPoly[ 1 ].X() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY2, OUString::number( aPoly[ 1 ].Y() ) );
 
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrGradientUnits,
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrGradientUnits,
                                    OUString( "userSpaceOnUse" ) );
         }
 
         {
-            SvXMLElementExport aElemLinearGradient( mrExport, XML_NAMESPACE_NONE, aXMLElemLinearGradient, true, true );
+            SvXMLElementExport aElemLinearGradient( mrExport, XmlNamespace::NONE, aXMLElemLinearGradient, true, true );
 
             const Color aStartColor = ImplGetColorWithIntensity( rGradient.GetStartColor(), rGradient.GetStartIntensity() );
             const Color aEndColor = ImplGetColorWithIntensity( rGradient.GetEndColor(), rGradient.GetEndIntensity() );
@@ -2333,23 +2333,23 @@ void SVGActionWriter::ImplWriteGradientLinear( const tools::PolyPolygon& rPolyPo
 
     OUString aGradientStyle = "fill:url(#" + aGradientId + ")";
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStyle, aGradientStyle );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStyle, aGradientStyle );
     ImplWritePolyPolygon( rPolyPoly, false );
 }
 
 
 void SVGActionWriter::ImplWriteGradientStop( const Color& rColor, double fOffset )
 {
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrOffset, OUString::number( fOffset ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrOffset, OUString::number( fOffset ) );
 
     OUString aStyle, aColor;
     aStyle += "stop-color:";
     SVGAttributeWriter::ImplGetColorStr ( rColor, aColor );
     aStyle += aColor;
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrStyle, aStyle );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrStyle, aStyle );
     {
-        SvXMLElementExport aElemStartStop( mrExport, XML_NAMESPACE_NONE, aXMLElemStop, true, true );
+        SvXMLElementExport aElemStartStop( mrExport, XmlNamespace::NONE, aXMLElemStop, true, true );
     }
 }
 
@@ -2409,11 +2409,11 @@ void SVGActionWriter::StartMask(const Point& rDestPt, const Size& rDestSize,
         OUString aMaskId = "mask" + OUString::number(mnCurMaskId++);
 
         {
-            SvXMLElementExport aElemDefs(mrExport, XML_NAMESPACE_NONE, aXMLElemDefs, true, true);
+            SvXMLElementExport aElemDefs(mrExport, XmlNamespace::NONE, aXMLElemDefs, true, true);
 
-            mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrId, aMaskId);
+            mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrId, aMaskId);
             {
-                SvXMLElementExport aElemMask(mrExport, XML_NAMESPACE_NONE, "mask", true, true);
+                SvXMLElementExport aElemMask(mrExport, XmlNamespace::NONE, "mask", true, true);
 
                 const tools::PolyPolygon aPolyPolygon(tools::PolyPolygon(tools::Rectangle(rDestPt, rDestSize)));
                 Gradient aGradient(rGradient);
@@ -2432,7 +2432,7 @@ void SVGActionWriter::StartMask(const Point& rDestPt, const Size& rDestSize,
 
         aStyle = "mask:url(#" + aMaskId + ")";
     }
-    mrExport.AddAttribute(XML_NAMESPACE_NONE, aXMLAttrStyle, aStyle);
+    mrExport.AddAttribute(XmlNamespace::NONE, aXMLAttrStyle, aStyle);
 }
 
 void SVGActionWriter::ImplWriteMask(GDIMetaFile& rMtf, const Point& rDestPt, const Size& rDestSize,
@@ -2465,7 +2465,7 @@ void SVGActionWriter::ImplWriteMask(GDIMetaFile& rMtf, const Point& rDestPt, con
         {
             StartMask(rDestPt, rDestSize, rGradient, nWriteFlags);
             pElemG.reset(
-                new SvXMLElementExport(mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, true));
+                new SvXMLElementExport(mrExport, XmlNamespace::NONE, aXMLElemG, true, true));
         }
 
         mpVDev->Push();
@@ -2605,14 +2605,14 @@ void SVGActionWriter::ImplWriteText( const Point& rPos, const OUString& rText,
                     OUString::number( rFont.GetOrientation() * -0.1 ) + " " +
                     OUString::number( aRot.X() ) + " " +
                     OUString::number( aRot.Y() ) + ")";
-        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrTransform, aTransform );
+        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrTransform, aTransform );
     }
 
 
     maAttributeWriter.AddPaintAttr( COL_TRANSPARENT, aTextColor );
 
     // for each line of text there should be at least one group element
-    SvXMLElementExport aSVGGElem( mrExport, XML_NAMESPACE_NONE, aXMLElemG, true, false );
+    SvXMLElementExport aSVGGElem( mrExport, XmlNamespace::NONE, aXMLElemG, true, false );
 
     bool bIsPlaceholderField = false;
 
@@ -2628,11 +2628,11 @@ void SVGActionWriter::ImplWriteText( const Point& rPos, const OUString& rText,
             {
                 sCleanTextContent = rText.copy( nFrom );
             }
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, "class", "PlaceholderText" );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX, OUString::number( aPos.X() ) );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY, OUString::number( aPos.Y() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, "class", "PlaceholderText" );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX, OUString::number( aPos.X() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY, OUString::number( aPos.Y() ) );
             {
-                SvXMLElementExport aElem( mrExport, XML_NAMESPACE_NONE, aXMLElemText, true, false );
+                SvXMLElementExport aElem( mrExport, XmlNamespace::NONE, aXMLElemText, true, false );
                 // At least for the single slide case we need really to  export placeholder text
                 mrExport.GetDocHandler()->characters( sCleanTextContent );
             }
@@ -2676,11 +2676,11 @@ void SVGActionWriter::ImplWriteText( const Point& rPos, const OUString& rText,
                     {
                         const OUString aGlyph( rText.copy( nLastPos, nCount ) );
 
-                        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX, OUString::number( nX ) );
-                        mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY, OUString::number( aPos.Y() ) );
+                        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX, OUString::number( nX ) );
+                        mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY, OUString::number( aPos.Y() ) );
 
                         {
-                            SvXMLElementExport aElem( mrExport, XML_NAMESPACE_NONE, aXMLElemText, true, false );
+                            SvXMLElementExport aElem( mrExport, XmlNamespace::NONE, aXMLElemText, true, false );
                             mrExport.GetDocHandler()->characters( aGlyph );
                         }
 
@@ -2697,11 +2697,11 @@ void SVGActionWriter::ImplWriteText( const Point& rPos, const OUString& rText,
         }
         else
         {
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX, OUString::number( aPos.X() ) );
-            mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY, OUString::number( aPos.Y() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX, OUString::number( aPos.X() ) );
+            mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY, OUString::number( aPos.Y() ) );
 
             {
-                SvXMLElementExport aElem( mrExport, XML_NAMESPACE_NONE, aXMLElemText, true, false );
+                SvXMLElementExport aElem( mrExport, XmlNamespace::NONE, aXMLElemText, true, false );
                 mrExport.GetDocHandler()->characters( rText );
             }
         }
@@ -2833,17 +2833,17 @@ void SVGActionWriter::ImplWriteBmp( const BitmapEx& rBmpEx,
     ImplMap( rPt, aPt );
     ImplMap( rSz, aSz );
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrX, OUString::number( aPt.X() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrY, OUString::number( aPt.Y() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrWidth, OUString::number( aSz.Width() ) );
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrHeight, OUString::number( aSz.Height() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrX, OUString::number( aPt.X() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrY, OUString::number( aPt.Y() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrWidth, OUString::number( aSz.Width() ) );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrHeight, OUString::number( aSz.Height() ) );
 
     // the image must be scaled to aSz in a non-uniform way
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, "preserveAspectRatio", "none" );
+    mrExport.AddAttribute( XmlNamespace::NONE, "preserveAspectRatio", "none" );
 
-    mrExport.AddAttribute( XML_NAMESPACE_NONE, aXMLAttrXLinkHRef, aBuffer.makeStringAndClear() );
+    mrExport.AddAttribute( XmlNamespace::NONE, aXMLAttrXLinkHRef, aBuffer.makeStringAndClear() );
     {
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_NONE, "image", true, true );
+        SvXMLElementExport aElem( mrExport, XmlNamespace::NONE, "image", true, true );
     }
 }
 
@@ -2885,7 +2885,7 @@ void SVGActionWriter::ImplWriteActions( const GDIMetaFile& rMtf,
             try
             {
                 SvXMLElementExport aElem( mrExport,
-                        XML_NAMESPACE_NONE, "desc", false, false );
+                        XmlNamespace::NONE, "desc", false, false );
                 OUStringBuffer sType(OUString::number(static_cast<sal_uInt16>(nType)));
                 if (pAction && (nType == MetaActionType::COMMENT))
                 {
diff --git a/include/xmloff/SchXMLImportHelper.hxx b/include/xmloff/SchXMLImportHelper.hxx
index 09031b2ccc21..cac0ddb3c3a7 100644
--- a/include/xmloff/SchXMLImportHelper.hxx
+++ b/include/xmloff/SchXMLImportHelper.hxx
@@ -83,7 +83,7 @@ public:
      */
     SvXMLImportContext* CreateChartContext(
         SvXMLImport& rImport,
-        sal_uInt16 nPrefix, const OUString& rLocalName,
+        XmlNamespace nPrefix, const OUString& rLocalName,
         const css::uno::Reference< css::frame::XModel >& rChartModel,
         const css::uno::Reference< css::xml::sax::XAttributeList >& rAttrList );
 
diff --git a/include/xmloff/XMLBase64ImportContext.hxx b/include/xmloff/XMLBase64ImportContext.hxx
index 298158db1329..d023d9ce9cc4 100644
--- a/include/xmloff/XMLBase64ImportContext.hxx
+++ b/include/xmloff/XMLBase64ImportContext.hxx
@@ -35,7 +35,7 @@ class XMLOFF_DLLPUBLIC XMLBase64ImportContext final : public SvXMLImportContext
 
 public:
 
-    XMLBase64ImportContext( SvXMLImport& rImport, sal_uInt16 nPrfx,
+    XMLBase64ImportContext( SvXMLImport& rImport, XmlNamespace nPrfx,
                             const OUString& rLName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList,
         const css::uno::Reference< css::io::XOutputStream >& rOut );
diff --git a/include/xmloff/XMLShapeStyleContext.hxx b/include/xmloff/XMLShapeStyleContext.hxx
index 96ae15ce8cde..aebd462ed1d9 100644
--- a/include/xmloff/XMLShapeStyleContext.hxx
+++ b/include/xmloff/XMLShapeStyleContext.hxx
@@ -52,7 +52,7 @@ public:
     virtual ~XMLShapeStyleContext() override;
 
     SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList ) override;
 
diff --git a/include/xmloff/maptype.hxx b/include/xmloff/maptype.hxx
index dbde180797cf..bc15e523f63d 100644
--- a/include/xmloff/maptype.hxx
+++ b/include/xmloff/maptype.hxx
@@ -24,6 +24,7 @@
 #include <xmloff/xmltoken.hxx>
 #include <unotools/saveopt.hxx>
 
+enum class XmlNamespace : sal_uInt16;
 
 /** Represents a property with its API-name, its XML-name and the type of
     its value.
@@ -33,7 +34,7 @@ struct XMLPropertyMapEntry
     const char*     msApiName;      /// Property-Name
     sal_Int32       nApiNameLength; /// length of property name
     enum ::xmloff::token::XMLTokenEnum meXMLName;       /// XML-Name
-    sal_uInt16      mnNameSpace;    /** declares the Namespace in which this
+    XmlNamespace    mnNameSpace;    /** declares the Namespace in which this
                                         property exists */
 
     /**
@@ -102,7 +103,7 @@ struct XMLPropertyMapEntry
     XMLPropertyMapEntry(
             const char*     sApiName,
             sal_Int32       nApiNameLength_,
-            sal_uInt16      nNameSpace,
+            XmlNamespace    nNameSpace,
             enum ::xmloff::token::XMLTokenEnum eXMLName,
             sal_uInt32 nType,
             sal_Int16       nContextId,
diff --git a/include/xmloff/nmspmap.hxx b/include/xmloff/nmspmap.hxx
index 668bfd22745c..23b5d413a544 100644
--- a/include/xmloff/nmspmap.hxx
+++ b/include/xmloff/nmspmap.hxx
@@ -26,6 +26,7 @@
 #include <utility>
 
 #include <xmloff/dllapi.h>
+#include <xmloff/xmlnmspe.hxx>
 #include <sal/types.h>
 #include <rtl/ustring.hxx>
 #include <rtl/ref.hxx>
@@ -33,9 +34,6 @@
 
 #include <limits.h>
 
-const sal_uInt16 XML_NAMESPACE_XMLNS         = USHRT_MAX-2;
-const sal_uInt16 XML_NAMESPACE_NONE          = USHRT_MAX-1;
-const sal_uInt16 XML_NAMESPACE_UNKNOWN       = USHRT_MAX;
 const sal_uInt16 XML_NAMESPACE_UNKNOWN_FLAG  = 0x8000;
 
 class NameSpaceEntry final : public salhelper::SimpleReferenceObject
@@ -74,7 +72,7 @@ class XMLOFF_DLLPUBLIC SvXMLNamespaceMap
     mutable NameSpaceHash       aNameCache;
     NameSpaceMap                aNameMap;
     mutable QNameCache          aQNameCache;
-    SAL_DLLPRIVATE sal_uInt16 Add_( const OUString& rPrefix, const OUString &rName, sal_uInt16 nKey );
+    SAL_DLLPRIVATE sal_uInt16 Add_( const OUString& rPrefix, const OUString &rName, XmlNamespace nKey );
 
 public:
 
@@ -88,30 +86,30 @@ public:
 
     sal_uInt16 Add( const OUString& rPrefix,
                 const OUString& rName,
-                sal_uInt16 nKey = XML_NAMESPACE_UNKNOWN );
+                XmlNamespace nKey = XmlNamespace::UNKNOWN );
     sal_uInt16 AddIfKnown( const OUString& rPrefix,
                 const OUString& rName );
 
     sal_uInt16 GetKeyByName( const OUString& rName ) const;
-    const OUString& GetNameByKey( sal_uInt16 nKey ) const;
+    const OUString& GetNameByKey( XmlNamespace nKey ) const;
 
-    sal_uInt16 GetKeyByPrefix( const OUString& rPrefix ) const;
+    XmlNamespace GetKeyByPrefix( const OUString& rPrefix ) const;
     const OUString& GetPrefixByKey( sal_uInt16 nKey ) const;
 
-    OUString GetQNameByKey( sal_uInt16 nKey,
+    OUString GetQNameByKey( XmlNamespace nKey,
                            const OUString& rLocalName,
                            bool bCache = true) const;
 
     OUString GetAttrNameByKey( sal_uInt16 nKey ) const;
 
     enum class QNameMode { AttrNameCached, AttrValue };
-    sal_uInt16 GetKeyByQName(const OUString& rQName,
+    XmlNamespace GetKeyByQName(const OUString& rQName,
                              OUString *pPrefix,
                              OUString *pLocalName,
                              OUString *pNamespace,
                              QNameMode eMode) const;
 
-    sal_uInt16 GetKeyByAttrValueQName(const OUString& rAttrName,
+    XmlNamespace GetKeyByAttrValueQName(const OUString& rAttrName,
                              OUString *pLocalName) const;
 
     sal_uInt16 GetFirstKey() const;
@@ -137,11 +135,11 @@ public:
 /* deprecated */ OUString GetAttrNameByIndex( sal_uInt16 nIdx ) const;
 /* deprecated */ OUString GetQNameByIndex( sal_uInt16 nIdx,
                             const OUString& rLocalName ) const;
-                 sal_uInt16 GetKeyByAttrName( const OUString& rAttrName,
+                 XmlNamespace GetKeyByAttrName( const OUString& rAttrName,
                              OUString *pPrefix,
                              OUString *pLocalName,
                              OUString *pNamespace ) const;
-/* deprecated */ sal_uInt16 GetKeyByAttrName( const OUString& rAttrName,
+/* deprecated */ XmlNamespace GetKeyByAttrName( const OUString& rAttrName,
                              OUString *pLocalName = nullptr ) const;
 };
 
diff --git a/include/xmloff/numehelp.hxx b/include/xmloff/numehelp.hxx
index 8414fba6c3b4..ea3932d8f2b2 100644
--- a/include/xmloff/numehelp.hxx
+++ b/include/xmloff/numehelp.hxx
@@ -100,15 +100,15 @@ public:
     void WriteAttributes(const sal_Int16 nTypeKey,
                                           const double& rValue,
                                           const OUString& rCurrencySymbol,
-                                          bool bExportValue, sal_uInt16 nNamespace = XML_NAMESPACE_OFFICE);
+                                          bool bExportValue, sal_uInt16 nNamespace = XmlNamespace::OFFICE);
     void SetNumberFormatAttributes(const sal_Int32 nNumberFormat,
                                           const double& rValue,
                                           bool bExportValue = true,
-                                          sal_uInt16 nNamespace = XML_NAMESPACE_OFFICE, bool bExportCurrencySymbol = true);
+                                          sal_uInt16 nNamespace = XmlNamespace::OFFICE, bool bExportCurrencySymbol = true);
     void SetNumberFormatAttributes(const OUString& rValue,
                                           const OUString& rCharacters,
                                           bool bExportValue = true,
-                                          sal_uInt16 nNamespace = XML_NAMESPACE_OFFICE);
+                                          sal_uInt16 nNamespace = XmlNamespace::OFFICE);
 };
 
 #endif
diff --git a/include/xmloff/prstylei.hxx b/include/xmloff/prstylei.hxx
index 42f5c732c423..5a5a69230143 100644
--- a/include/xmloff/prstylei.hxx
+++ b/include/xmloff/prstylei.hxx
@@ -96,7 +96,7 @@ public:
     virtual ~XMLPropStyleContext() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-            sal_uInt16 nPrefix,
+            XmlNamespace nPrefix,
             const OUString& rLocalName,
             const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList ) override;
 
diff --git a/include/xmloff/shapeimport.hxx b/include/xmloff/shapeimport.hxx
index 810665d354ec..54794b3bd7d8 100644
--- a/include/xmloff/shapeimport.hxx
+++ b/include/xmloff/shapeimport.hxx
@@ -185,10 +185,10 @@ public:
     SdXML3DSceneAttributesHelper( SvXMLImport& rImporter );
 
     /** creates a 3d light context and adds it to the internal list for later processing */
-    SvXMLImportContext * create3DLightContext( sal_uInt16 nPrfx, const OUString& rLName, const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList);
+    SvXMLImportContext * create3DLightContext( XmlNamespace nPrfx, const OUString& rLName, const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList);
 
     /** this should be called for each scene attribute */
-    void processSceneAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue );
+    void processSceneAttribute( XmlNamespace nPrefix, const OUString& rLocalName, const OUString& rValue );
 
     /** this sets the scene attributes at this propertyset */
     void setSceneAttributes( const css::uno::Reference< css::beans::XPropertySet >& xPropSet );
@@ -203,7 +203,7 @@ protected:
     OUString                                      msHyperlink;
 
 public:
-    SvXMLShapeContext( SvXMLImport& rImp, sal_uInt16 nPrfx,
+    SvXMLShapeContext( SvXMLImport& rImp, XmlNamespace nPrfx,
         const OUString& rLName, bool bTemporaryShape ) : SvXMLImportContext( rImp, nPrfx, rLName ), mbTemporaryShape(bTemporaryShape) {}
 
 
@@ -255,22 +255,22 @@ public:
     virtual ~XMLShapeImportHelper() override;
 
     SvXMLShapeContext* CreateGroupChildContext(
-        SvXMLImport& rImport, sal_uInt16 nPrefix, const OUString& rLocalName,
+        SvXMLImport& rImport, XmlNamespace nPrefix, const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList,
         css::uno::Reference< css::drawing::XShapes > const & rShapes,
         bool bTemporaryShape = false);
 
     SvXMLShapeContext* CreateFrameChildContext(
-        SvXMLImport& rImport, sal_uInt16 nPrefix, const OUString& rLocalName,
+        SvXMLImport& rImport, XmlNamespace nPrefix, const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList,
         css::uno::Reference< css::drawing::XShapes > const & rShapes,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xFrameAttrList);
     static SvXMLImportContextRef CreateFrameChildContext(
-        SvXMLImportContext *pThisContext, sal_uInt16 nPrefix, const OUString& rLocalName,
+        SvXMLImportContext *pThisContext, XmlNamespace nPrefix, const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList );
 
     SvXMLShapeContext* Create3DSceneChildContext(
-        SvXMLImport& rImport, sal_uInt16 nPrefix, const OUString& rLocalName,
+        SvXMLImport& rImport, XmlNamespace nPrefix, const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList,
         css::uno::Reference< css::drawing::XShapes > const & rShapes);
 
diff --git a/include/xmloff/xmlexp.hxx b/include/xmloff/xmlexp.hxx
index eee53a95d91b..c01faa621a34 100644
--- a/include/xmloff/xmlexp.hxx
+++ b/include/xmloff/xmlexp.hxx
@@ -76,6 +76,7 @@ class XMLImageMapExport;
 class XMLErrors;
 class LanguageTag;
 enum class SvXMLErrorFlags;
+enum class XmlNamespace : sal_uInt16;
 
 // Shapes in Writer cannot be named via context menu (#i51726#)
 #include <unotools/moduleoptions.hxx>
@@ -334,16 +335,16 @@ public:
     void ClearAttrList();
 
     // Add an attribute to the common attribute list.
-    void AddAttributeASCII( sal_uInt16 nPrefix, const char *pName,
+    void AddAttributeASCII( XmlNamespace nPrefix, const char *pName,
                             const char *pValue );
-    void AddAttribute( sal_uInt16 nPrefix, const char *pName,
+    void AddAttribute( XmlNamespace nPrefix, const char *pName,
                        const OUString& rValue );
-    void AddAttribute( sal_uInt16 nPrefix, const OUString& rName,
+    void AddAttribute( XmlNamespace nPrefix, const OUString& rName,
                        const OUString& rValue );
-    void AddAttribute( sal_uInt16 nPrefix,
+    void AddAttribute( XmlNamespace nPrefix,
                        enum ::xmloff::token::XMLTokenEnum eName,
                        const OUString& rValue );
-    void AddAttribute( sal_uInt16 nPrefix,
+    void AddAttribute( XmlNamespace nPrefix,
                        enum ::xmloff::token::XMLTokenEnum eName,
                        enum ::xmloff::token::XMLTokenEnum eValue );
     void AddAttribute( const OUString& rQName,
@@ -651,10 +652,10 @@ public:
     SvXMLElementExport( SvXMLExport& rExp, sal_uInt16 nPrefix,
                         const char *pName,
                         bool bIgnWSOutside, bool bIgnWSInside );
-    SvXMLElementExport( SvXMLExport& rExp, sal_uInt16 nPrefix,
+    SvXMLElementExport( SvXMLExport& rExp, XmlNamespace nPrefix,
                         const OUString& rName,
                         bool bIgnWSOutside, bool bIgnWSInside );
-    SvXMLElementExport( SvXMLExport& rExp, sal_uInt16 nPrefix,
+    SvXMLElementExport( SvXMLExport& rExp, XmlNamespace nPrefix,
                         enum ::xmloff::token::XMLTokenEnum eName,
                         bool bIgnWSOutside, bool bIgnWSInside );
     SvXMLElementExport( SvXMLExport& rExp, const OUString& rQName,
@@ -662,7 +663,7 @@ public:
 
     // These constructors do nothing if bDoSomething is not set
     SvXMLElementExport( SvXMLExport& rExp, bool bDoSomething,
-                        sal_uInt16 nPrefix,
+                        XmlNamespace nPrefix,
                         enum ::xmloff::token::XMLTokenEnum eName,
                         bool bIgnWSOutside, bool bIgnWSInside );
 
diff --git a/include/xmloff/xmlictxt.hxx b/include/xmloff/xmlictxt.hxx
index 29975774bf00..a0a071faac6e 100644
--- a/include/xmloff/xmlictxt.hxx
+++ b/include/xmloff/xmlictxt.hxx
@@ -72,7 +72,7 @@ public:
      * starts. Namespace processing has been done already.
      * Note that virtual methods cannot be used inside constructors. Use
      * StartElement instead if this is required. */
-    SvXMLImportContext( SvXMLImport& rImport, sal_uInt16 nPrfx,
+    SvXMLImportContext( SvXMLImport& rImport, XmlNamespace nPrfx,
                         const OUString& rLName );
 
     SvXMLImportContext( SvXMLImport& rImport );
@@ -85,7 +85,7 @@ public:
 
     /** Create a children element context. By default, the import's
      * CreateContext method is called to create a new default context. */
-    virtual SvXMLImportContextRef CreateChildContext( sal_uInt16 nPrefix,
+    virtual SvXMLImportContextRef CreateChildContext( XmlNamespace nPrefix,
                                    const OUString& rLocalName,
                                    const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList );
 
diff --git a/include/xmloff/xmlimp.hxx b/include/xmloff/xmlimp.hxx
index 3b4cc7969be9..7133cf85f446 100644
--- a/include/xmloff/xmlimp.hxx
+++ b/include/xmloff/xmlimp.hxx
@@ -91,17 +91,17 @@ constexpr size_t NMSP_SHIFT = 16;
 constexpr sal_Int32 TOKEN_MASK = 0xffff;
 constexpr sal_Int32 NMSP_MASK = 0xffff0000;
 
-#define XML_ELEMENT( prefix, name ) ( NAMESPACE_TOKEN(XML_NAMESPACE_##prefix) | name )
+#define XML_ELEMENT( prefix, name ) ( NAMESPACE_TOKEN(XmlNamespace::prefix) | name )
 
-constexpr sal_Int32 NAMESPACE_TOKEN( sal_uInt16 prefixToken )
+constexpr sal_Int32 NAMESPACE_TOKEN( XmlNamespace prefixToken )
 {
-    return ( prefixToken + 1 ) << NMSP_SHIFT;
+    return ( static_cast<sal_uInt16>(prefixToken) + 1 ) << NMSP_SHIFT;
 }
 
-constexpr bool IsTokenInNamespace(sal_Int32 nToken, sal_uInt16 nNamespacePrefix)
+constexpr bool IsTokenInNamespace(sal_Int32 nToken, XmlNamespace nNamespacePrefix)
 {
     auto nTmp = ((nToken & NMSP_MASK) >> NMSP_SHIFT) - 1;
-    return nTmp == nNamespacePrefix;
+    return nTmp == static_cast<sal_uInt16>(nNamespacePrefix);
 }
 
 
diff --git a/include/xmloff/xmlnmspe.hxx b/include/xmloff/xmlnmspe.hxx
index d45832f02d81..8a0edefbcf7a 100644
--- a/include/xmloff/xmlnmspe.hxx
+++ b/include/xmloff/xmlnmspe.hxx
@@ -26,106 +26,113 @@
 // These namespaces have the same index in the namespace table as prefix used.
 // If a namespace is added, XML_OLD_NAMESPACE_BASE has to be adjusted!
 // * standard ODF elements and attributes
-constexpr sal_uInt16 XML_NAMESPACE_OFFICE =           0;
-constexpr sal_uInt16 XML_NAMESPACE_STYLE =            1;
-constexpr sal_uInt16 XML_NAMESPACE_TEXT =             2;
-constexpr sal_uInt16 XML_NAMESPACE_TABLE =            3;
-constexpr sal_uInt16 XML_NAMESPACE_DRAW =             4;
-constexpr sal_uInt16 XML_NAMESPACE_FO   =             5;
-constexpr sal_uInt16 XML_NAMESPACE_XLINK =            6;
-constexpr sal_uInt16 XML_NAMESPACE_DC   =             7;
-constexpr sal_uInt16 XML_NAMESPACE_META =             8;
-constexpr sal_uInt16 XML_NAMESPACE_NUMBER =           9;
-constexpr sal_uInt16 XML_NAMESPACE_PRESENTATION =    10;
-constexpr sal_uInt16 XML_NAMESPACE_SVG =             11;
-constexpr sal_uInt16 XML_NAMESPACE_CHART =           12;
-constexpr sal_uInt16 XML_NAMESPACE_DR3D =            13;
-constexpr sal_uInt16 XML_NAMESPACE_MATH =            14;
-constexpr sal_uInt16 XML_NAMESPACE_FORM =            15;
-constexpr sal_uInt16 XML_NAMESPACE_SCRIPT =          16;
-constexpr sal_uInt16 XML_NAMESPACE_CONFIG =          17;
-constexpr sal_uInt16 XML_NAMESPACE_DB =              18;
-constexpr sal_uInt16 XML_NAMESPACE_XFORMS =          19;
-constexpr sal_uInt16 XML_NAMESPACE_SMIL =            20;
-constexpr sal_uInt16 XML_NAMESPACE_ANIMATION =       21;
-constexpr sal_uInt16 XML_NAMESPACE_XML =             22;
-constexpr sal_uInt16 XML_NAMESPACE_XHTML =           23;
-constexpr sal_uInt16 XML_NAMESPACE_GRDDL =           24;
+enum class XmlNamespace : sal_uInt16 {
+    OFFICE =           0,
+    STYLE =            1,
+    TEXT =             2,
+    TABLE =            3,
+    DRAW =             4,
+    FO   =             5,
+    XLINK =            6,
+    DC   =             7,
+    META =             8,
+    NUMBER =           9,
+    PRESENTATION =    10,
+    SVG =             11,
+    CHART =           12,
+    DR3D =            13,
+    MATH =            14,
+    FORM =            15,
+    SCRIPT =          16,
+    CONFIG =          17,
+    DB =              18,
+    XFORMS =          19,
+    SMIL =            20,
+    ANIMATION =       21,
+    XML =             22,
+    XHTML =           23,
+    GRDDL =           24,
 // * formula attribute values (standard ODF)
-constexpr sal_uInt16 XML_NAMESPACE_OF =              25;   // OpenFormula aka ODFF
+    OF =              25,   // OpenFormula aka ODFF
 // * event attribute values (standard W3C)
-constexpr sal_uInt16 XML_NAMESPACE_DOM =             26;
+    DOM =             26,
 // * XForms attribute values (standard W3C)
-constexpr sal_uInt16 XML_NAMESPACE_XSD =             27;
-constexpr sal_uInt16 XML_NAMESPACE_XSI =             28;
+    XSD =             27,
+    XSI =             28,
 // * following 3 namespaces are used for non-standard attribute values and non-ODF XML
-constexpr sal_uInt16 XML_NAMESPACE_OOO =             29; // lots of attributes, settings.xml, non-ODF XML
-constexpr sal_uInt16 XML_NAMESPACE_OOOW =            30; // formula attribute values
-constexpr sal_uInt16 XML_NAMESPACE_OOOC =            31; // formula attribute values
+    OOO =             29, // lots of attributes, settings.xml, non-ODF XML
+    OOOW =            30, // formula attribute values
+    OOOC =            31, // formula attribute values
 // non-ODF XML namespaces
-constexpr sal_uInt16 XML_NAMESPACE_BLOCKLIST =       32;
-constexpr sal_uInt16 XML_NAMESPACE_FRAMEWORK =       33;
-constexpr sal_uInt16 XML_NAMESPACE_TCD =             34;   // text conversion dictionary
-constexpr sal_uInt16 XML_NAMESPACE_DLG =             35;
-constexpr sal_uInt16 XML_NAMESPACE_REPORT =          36;
-constexpr sal_uInt16 XML_NAMESPACE_VERSIONS_LIST =   37;
+    BLOCKLIST =       32,
+    FRAMEWORK =       33,
+    TCD =             34,   // text conversion dictionary
+    DLG =             35,
+    REPORT =          36,
+    VERSIONS_LIST =   37,
 
 // namespaces for ODF extended formats
-constexpr sal_uInt16 XML_NAMESPACE_EXT_BASE   = 50;
-constexpr sal_uInt16 XML_NAMESPACE_OFFICE_EXT = XML_NAMESPACE_EXT_BASE + 0;
-constexpr sal_uInt16 XML_NAMESPACE_TABLE_EXT  = XML_NAMESPACE_EXT_BASE + 1;
-constexpr sal_uInt16 XML_NAMESPACE_CHART_EXT  = XML_NAMESPACE_EXT_BASE + 2;
-constexpr sal_uInt16 XML_NAMESPACE_DRAW_EXT   = XML_NAMESPACE_EXT_BASE + 3;
-constexpr sal_uInt16 XML_NAMESPACE_CALC_EXT   = XML_NAMESPACE_EXT_BASE + 4;
-constexpr sal_uInt16 XML_NAMESPACE_LO_EXT     = XML_NAMESPACE_EXT_BASE + 5;
+    EXT_BASE   = 50,
+    OFFICE_EXT = EXT_BASE + 0,
+    TABLE_EXT  = EXT_BASE + 1,
+    CHART_EXT  = EXT_BASE + 2,
+    DRAW_EXT   = EXT_BASE + 3,
+    CALC_EXT   = EXT_BASE + 4,
+    LO_EXT     = EXT_BASE + 5,
 
 // experimental ODF extended namespaces
-constexpr sal_uInt16 XML_NAMESPACE_FIELD      = XML_NAMESPACE_EXT_BASE + 6;
-constexpr sal_uInt16 XML_NAMESPACE_CSS3TEXT   = XML_NAMESPACE_EXT_BASE + 7;  // CSS Text Level 3
-constexpr sal_uInt16 XML_NAMESPACE_FORMX      = XML_NAMESPACE_EXT_BASE + 8;  // form interop extensions
+    FIELD      = EXT_BASE + 6,
+    CSS3TEXT   = EXT_BASE + 7,  // CSS Text Level 3
+    FORMX      = EXT_BASE + 8,  // form interop extensions
 
 
 // namespaces for OOo formats
-constexpr sal_uInt16 XML_NAMESPACE_OOO_BASE = 60;
-constexpr sal_uInt16 XML_NAMESPACE_OFFICE_OOO = XML_NAMESPACE_OOO_BASE +         0;
-constexpr sal_uInt16 XML_NAMESPACE_META_OOO = XML_NAMESPACE_OOO_BASE +           1;
-constexpr sal_uInt16 XML_NAMESPACE_STYLE_OOO = XML_NAMESPACE_OOO_BASE +          2;
-constexpr sal_uInt16 XML_NAMESPACE_NUMBER_OOO = XML_NAMESPACE_OOO_BASE +         3;
-constexpr sal_uInt16 XML_NAMESPACE_TEXT_OOO = XML_NAMESPACE_OOO_BASE +           4;
-constexpr sal_uInt16 XML_NAMESPACE_TABLE_OOO = XML_NAMESPACE_OOO_BASE +          5;
-constexpr sal_uInt16 XML_NAMESPACE_DRAW_OOO = XML_NAMESPACE_OOO_BASE +           6;
-constexpr sal_uInt16 XML_NAMESPACE_DR3D_OOO = XML_NAMESPACE_OOO_BASE +           7;
-constexpr sal_uInt16 XML_NAMESPACE_PRESENTATION_OOO = XML_NAMESPACE_OOO_BASE +   8;
-constexpr sal_uInt16 XML_NAMESPACE_PRESENTATION_OASIS = XML_NAMESPACE_OOO_BASE + 9; // only used for some config files in sd/
-constexpr sal_uInt16 XML_NAMESPACE_CHART_OOO = XML_NAMESPACE_OOO_BASE +         10;
-constexpr sal_uInt16 XML_NAMESPACE_CONFIG_OOO = XML_NAMESPACE_OOO_BASE +        12;
-constexpr sal_uInt16 XML_NAMESPACE_FORM_OOO = XML_NAMESPACE_OOO_BASE +          13;
-constexpr sal_uInt16 XML_NAMESPACE_SCRIPT_OOO = XML_NAMESPACE_OOO_BASE +        14;
-constexpr sal_uInt16 XML_NAMESPACE_ANIMATION_OOO = XML_NAMESPACE_OOO_BASE +     15;
+    OOO_BASE = 60,
+    OFFICE_OOO = OOO_BASE +         0,
+    META_OOO = OOO_BASE +           1,
+    STYLE_OOO = OOO_BASE +          2,
+    NUMBER_OOO = OOO_BASE +         3,
+    TEXT_OOO = OOO_BASE +           4,
+    TABLE_OOO = OOO_BASE +          5,
+    DRAW_OOO = OOO_BASE +           6,
+    DR3D_OOO = OOO_BASE +           7,
+    PRESENTATION_OOO = OOO_BASE +   8,
+    PRESENTATION_OASIS = OOO_BASE + 9, // only used for some config files in sd/
+    CHART_OOO = OOO_BASE +         10,
+    CONFIG_OOO = OOO_BASE +        12,
+    FORM_OOO = OOO_BASE +          13,
+    SCRIPT_OOO = OOO_BASE +        14,
+    ANIMATION_OOO = OOO_BASE +     15,
 
-constexpr sal_uInt16 XML_NAMESPACE_COMPAT_BASE = 80;
-constexpr sal_uInt16 XML_NAMESPACE_SVG_COMPAT = XML_NAMESPACE_COMPAT_BASE +      0;
-constexpr sal_uInt16 XML_NAMESPACE_FO_COMPAT = XML_NAMESPACE_COMPAT_BASE +       1;
-constexpr sal_uInt16 XML_NAMESPACE_SMIL_COMPAT = XML_NAMESPACE_COMPAT_BASE +     2;
+    COMPAT_BASE = 80,
+    SVG_COMPAT = COMPAT_BASE +      0,
+    FO_COMPAT = COMPAT_BASE +       1,
+    SMIL_COMPAT = COMPAT_BASE +     2,
 
-constexpr sal_uInt16 XML_NAMESPACE_OASIS_BASE = 90;
-constexpr sal_uInt16 XML_NAMESPACE_DB_OASIS = XML_NAMESPACE_OASIS_BASE +         0;
-constexpr sal_uInt16 XML_NAMESPACE_REPORT_OASIS = XML_NAMESPACE_OASIS_BASE +     1;
+    OASIS_BASE = 90,
+    DB_OASIS = OASIS_BASE +         0,
+    REPORT_OASIS = OASIS_BASE +     1,
 
 // namespaces used in the technical preview (SO 5.2)
-constexpr sal_uInt16 XML_OLD_NAMESPACE_BASE = 100;
-constexpr sal_uInt16 XML_NAMESPACE_FO_SO52 = XML_OLD_NAMESPACE_BASE +             0;
-constexpr sal_uInt16 XML_NAMESPACE_XLINK_SO52 = XML_OLD_NAMESPACE_BASE +          1;
-constexpr sal_uInt16 XML_NAMESPACE_OFFICE_SO52 = XML_OLD_NAMESPACE_BASE +         2;
-constexpr sal_uInt16 XML_NAMESPACE_STYLE_SO52 = XML_OLD_NAMESPACE_BASE +          3;
-constexpr sal_uInt16 XML_NAMESPACE_TEXT_SO52 = XML_OLD_NAMESPACE_BASE +           4;
-constexpr sal_uInt16 XML_NAMESPACE_TABLE_SO52 = XML_OLD_NAMESPACE_BASE +          5;
-constexpr sal_uInt16 XML_NAMESPACE_META_SO52 = XML_OLD_NAMESPACE_BASE +           6;
-constexpr sal_uInt16 XML_NAMESPACE_DRAW_SO52 = XML_OLD_NAMESPACE_BASE +           7;
-constexpr sal_uInt16 XML_NAMESPACE_NUMBER_SO52 = XML_OLD_NAMESPACE_BASE +         8;
-constexpr sal_uInt16 XML_NAMESPACE_PRESENTATION_SO52 = XML_OLD_NAMESPACE_BASE +   9;
-constexpr sal_uInt16 XML_NAMESPACE_CHART_SO52 = XML_OLD_NAMESPACE_BASE +         10;
-constexpr sal_uInt16 XML_NAMESPACE_SMIL_SO52 = XML_OLD_NAMESPACE_BASE +          11;
+    XML_OLD_NAMESPACE_BASE = 100,
+    FO_SO52 = XML_OLD_NAMESPACE_BASE +             0,
+    XLINK_SO52 = XML_OLD_NAMESPACE_BASE +          1,
+    OFFICE_SO52 = XML_OLD_NAMESPACE_BASE +         2,
+    STYLE_SO52 = XML_OLD_NAMESPACE_BASE +          3,
+    TEXT_SO52 = XML_OLD_NAMESPACE_BASE +           4,
+    TABLE_SO52 = XML_OLD_NAMESPACE_BASE +          5,
+    META_SO52 = XML_OLD_NAMESPACE_BASE +           6,
+    DRAW_SO52 = XML_OLD_NAMESPACE_BASE +           7,
+    NUMBER_SO52 = XML_OLD_NAMESPACE_BASE +         8,
+    PRESENTATION_SO52 = XML_OLD_NAMESPACE_BASE +   9,
+    CHART_SO52 = XML_OLD_NAMESPACE_BASE +         10,
+    SMIL_SO52 = XML_OLD_NAMESPACE_BASE +          11,
+
+// magic values used in namespce-handling code
+    XMLNS         = USHRT_MAX-2,
+    NONE          = USHRT_MAX-1,
+    UNKNOWN       = USHRT_MAX,
+};
 
 #endif // INCLUDED_XMLOFF_XMLNMSPE_HXX
 
diff --git a/include/xmloff/xmlnumfi.hxx b/include/xmloff/xmlnumfi.hxx
index b337fad36832..61ddea2c9f75 100644
--- a/include/xmloff/xmlnumfi.hxx
+++ b/include/xmloff/xmlnumfi.hxx
@@ -169,7 +169,7 @@ public:
                                     SvXMLStylesContext& rStyles );
     virtual     ~SvXMLNumFormatContext() override;
 
-    virtual SvXMLImportContextRef CreateChildContext( sal_uInt16 nPrefix,
+    virtual SvXMLImportContextRef CreateChildContext( XmlNamespace nPrefix,
                                     const OUString& rLocalName,
                                     const css::uno::Reference< css::xml::sax::XAttributeList>& xAttrList ) override;
     virtual void CreateAndInsert(bool bOverwrite) override;
diff --git a/include/xmloff/xmlprcon.hxx b/include/xmloff/xmlprcon.hxx
index a0219b3742d9..ac28e4beea6e 100644
--- a/include/xmloff/xmlprcon.hxx
+++ b/include/xmloff/xmlprcon.hxx
@@ -39,7 +39,7 @@ protected:
 public:
 
     SvXMLPropertySetContext(
-            SvXMLImport& rImport, sal_uInt16 nPrfx,
+            SvXMLImport& rImport, XmlNamespace nPrfx,
             const OUString& rLName,
             const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList,
             sal_uInt32 nFamily,
@@ -49,14 +49,14 @@ public:
 
     virtual ~SvXMLPropertySetContext() override;
 
-    virtual SvXMLImportContextRef CreateChildContext( sal_uInt16 nPrefix,
+    virtual SvXMLImportContextRef CreateChildContext( XmlNamespace nPrefix,
                                      const OUString& rLocalName,
                                      const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
     // This method is called from this instance implementation of
     // CreateChildContext if the element matches an entry in the
     // SvXMLImportItemMapper with the mid flag MID_FLAG_ELEMENT_ITEM_IMPORT
-    virtual SvXMLImportContextRef CreateChildContext( sal_uInt16 nPrefix,
+    virtual SvXMLImportContextRef CreateChildContext( XmlNamespace nPrefix,
                                    const OUString& rLocalName,
                                    const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList,
                                    ::std::vector< XMLPropertyState > &rProperties,
diff --git a/include/xmloff/xmlprmap.hxx b/include/xmloff/xmlprmap.hxx
index 19e9ab80c0c4..a9289346ec30 100644
--- a/include/xmloff/xmlprmap.hxx
+++ b/include/xmloff/xmlprmap.hxx
@@ -34,6 +34,7 @@ class XMLPropertyHandler;
 class XMLPropertyHandlerFactory;
 struct XMLPropertyMapEntry;
 struct XMLPropertyState;
+enum class XmlNamespace : sal_uInt16;
 
 class XMLOFF_DLLPUBLIC XMLPropertySetMapper : public salhelper::SimpleReferenceObject
 {
@@ -70,7 +71,7 @@ public:
     sal_uInt32 GetEntryType( sal_Int32 nIndex ) const;
 
     /** Returns the namespace-key of an entry */
-    sal_uInt16 GetEntryNameSpace( sal_Int32 nIndex ) const;
+    XmlNamespace GetEntryNameSpace( sal_Int32 nIndex ) const;
 
     /** Returns the 'local' XML-name of the entry */
     const OUString& GetEntryXMLName( sal_Int32 nIndex ) const;
@@ -90,7 +91,7 @@ public:
     /** Returns the index of an entry with the given XML-name and namespace
         If there is no matching entry the method returns -1 */
     sal_Int32 GetEntryIndex(
-        sal_uInt16 nNamespace, const OUString& rStrName, sal_uInt32 nPropType,
+        XmlNamespace nNamespace, const OUString& rStrName, sal_uInt32 nPropType,
         sal_Int32 nStartAt = -1 ) const;
 
     /** Retrieves a PropertyHandler for that property which placed at nIndex in the XMLPropertyMapEntry-array */
@@ -108,7 +109,7 @@ public:
 
     /** searches for an entry that matches the given api name, namespace and local name or -1 if nothing found */
     sal_Int32 FindEntryIndex(
-        const char* sApiName, sal_uInt16 nNameSpace, const OUString& sXMLName ) const;
+        const char* sApiName, XmlNamespace nNameSpace, const OUString& sXMLName ) const;
 
     /** searches for an entry that matches the given ContextId or gives -1 if nothing found */
     sal_Int32 FindEntryIndex( const sal_Int16 nContextId ) const;
diff --git a/include/xmloff/xmlstyle.hxx b/include/xmloff/xmlstyle.hxx
index 017b2c56af47..b36e4911d607 100644
--- a/include/xmloff/xmlstyle.hxx
+++ b/include/xmloff/xmlstyle.hxx
@@ -208,7 +208,7 @@ public:
         sal_Int32 nElement, const css::uno::Reference< css::xml::sax::XFastAttributeList >& AttrList ) override;
 
     // Create child element.
-    virtual SvXMLImportContextRef CreateChildContext( sal_uInt16 nPrefix,
+    virtual SvXMLImportContextRef CreateChildContext( XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList ) override;
 
diff --git a/include/xmloff/xmltkmap.hxx b/include/xmloff/xmltkmap.hxx
index f915dd1108a9..d9962bc7b55a 100644
--- a/include/xmloff/xmltkmap.hxx
+++ b/include/xmloff/xmltkmap.hxx
@@ -24,25 +24,25 @@
 #include <xmloff/dllapi.h>
 #include <sal/types.h>
 #include <xmloff/xmltoken.hxx>
+#include <xmloff/xmlnmspe.hxx>
 #include <memory>
 
 
 class SvXMLTokenMap_Impl;
 
-#define XML_TOK_UNKNOWN 0xffffU
-#define XML_TOKEN_MAP_END { 0xffffU, xmloff::token::XML_TOKEN_INVALID, 0U }
+#define XML_TOKEN_MAP_END { XmlNamespace::UNKNOWN, xmloff::token::XML_TOKEN_INVALID, 0U }
 
 struct SvXMLTokenMapEntry
 {
     enum xmloff::token::XMLTokenEnum eLocalName;
     sal_Int32 nFastToken;
-    sal_uInt16 nPrefixKey;
+    XmlNamespace nPrefixKey;
     sal_uInt16 nToken;
 
-    SvXMLTokenMapEntry( sal_uInt16 nPrefix, xmloff::token::XMLTokenEnum eName,
+    SvXMLTokenMapEntry( XmlNamespace nPrefix, xmloff::token::XMLTokenEnum eName,
                         sal_uInt16 nTok ) :
         eLocalName( eName ),
-        nFastToken( sal_uInt32( nPrefix + 1 ) << 16 | eLocalName ),
+        nFastToken( sal_uInt32( static_cast<sal_uInt16>(nPrefix) + 1 ) << 16 | eLocalName ),
         nPrefixKey( nPrefix ),
         nToken( nTok )
     {
@@ -59,7 +59,7 @@ public:
     SvXMLTokenMap( const SvXMLTokenMapEntry* pMap );
     ~SvXMLTokenMap();
 
-    sal_uInt16 Get( sal_uInt16 nPrefix, const OUString& rLName ) const;
+    sal_uInt16 Get( XmlNamespace nPrefix, const OUString& rLName ) const;
     sal_uInt16 Get( sal_Int32 nFastTok ) const;
 };
 
diff --git a/linguistic/source/convdicxml.cxx b/linguistic/source/convdicxml.cxx
index a581e86ce36a..494fcd178047 100644
--- a/linguistic/source/convdicxml.cxx
+++ b/linguistic/source/convdicxml.cxx
@@ -43,7 +43,7 @@ using namespace com::sun::star::linguistic2;
 using namespace linguistic;
 
 
-#define XML_NAMESPACE_TCD_STRING        "http://openoffice.org/2003/text-conversion-dictionary"
+#define XmlNamespace::TCD_STRING        "http://openoffice.org/2003/text-conversion-dictionary"
 #define CONV_TYPE_HANGUL_HANJA          "Hangul / Hanja"
 #define CONV_TYPE_SCHINESE_TCHINESE     "Chinese simplified / Chinese traditional"
 
@@ -185,10 +185,10 @@ void ConvDicXMLDictionaryContext_Impl::startFastElement( sal_Int32 /*nElement*/,
     {
         switch (aIter.getToken())
         {
-            case XML_NAMESPACE_TCD | XML_LANG:
+            case XmlNamespace::TCD | XML_LANG:
                 nLanguage = LanguageTag::convertToLanguageType( aIter.toString() );
             break;
-            case XML_NAMESPACE_TCD | XML_CONVERSION_TYPE:
+            case XmlNamespace::TCD | XML_CONVERSION_TYPE:
                 nConversionType = GetConversionTypeFromText( aIter.toString() );
             break;
             default:
@@ -226,7 +226,7 @@ void ConvDicXMLEntryTextContext_Impl::startFastElement(
     {
         switch (aIter.getToken())
         {
-            case XML_NAMESPACE_TCD | XML_LEFT_TEXT:
+            case XmlNamespace::TCD | XML_LEFT_TEXT:
                 aLeftText = aIter.toString();
                 break;
             default:
@@ -263,24 +263,24 @@ bool ConvDicXMLExport::Export()
 ErrCode ConvDicXMLExport::exportDoc( enum ::xmloff::token::XMLTokenEnum /*eClass*/ )
 {
     GetNamespaceMap_().Add( "tcd",
-            XML_NAMESPACE_TCD_STRING, XML_NAMESPACE_TCD );
+            XmlNamespace::TCD_STRING, XmlNamespace::TCD );
 
     GetDocHandler()->startDocument();
 
     // Add xmlns line and some other arguments
-    AddAttribute( GetNamespaceMap_().GetAttrNameByKey( XML_NAMESPACE_TCD ),
-                  GetNamespaceMap_().GetNameByKey( XML_NAMESPACE_TCD ) );
-    AddAttributeASCII( XML_NAMESPACE_TCD, "package", "org.openoffice.Office" );
+    AddAttribute( GetNamespaceMap_().GetAttrNameByKey( XmlNamespace::TCD ),
+                  GetNamespaceMap_().GetNameByKey( XmlNamespace::TCD ) );
+    AddAttributeASCII( XmlNamespace::TCD, "package", "org.openoffice.Office" );
 
     OUString aIsoLang( LanguageTag::convertToBcp47( rDic.nLanguage ) );
-    AddAttribute( XML_NAMESPACE_TCD, "lang", aIsoLang );
+    AddAttribute( XmlNamespace::TCD, "lang", aIsoLang );
     OUString aConvType( ConversionTypeToText( rDic.nConversionType ) );
-    AddAttribute( XML_NAMESPACE_TCD, "conversion-type", aConvType );
+    AddAttribute( XmlNamespace::TCD, "conversion-type", aConvType );
 
     //!! block necessary in order to have SvXMLElementExport d-tor called
     //!! before the call to endDocument
     {
-        SvXMLElementExport aRoot( *this, XML_NAMESPACE_TCD, "text-conversion-dictionary", true, true );
+        SvXMLElementExport aRoot( *this, XmlNamespace::TCD, "text-conversion-dictionary", true, true );
         ExportContent_();
     }
 
@@ -300,7 +300,7 @@ void ConvDicXMLExport::ExportContent_()
 
     for (const OUString& aLeftText : aKeySet)
     {
-        AddAttribute( XML_NAMESPACE_TCD, "left-text", aLeftText );
+        AddAttribute( XmlNamespace::TCD, "left-text", aLeftText );
         if (rDic.pConvPropType) // property-type list available?
         {
             sal_Int16 nPropertyType = -1;
@@ -310,9 +310,9 @@ void ConvDicXMLExport::ExportContent_()
             DBG_ASSERT( nPropertyType, "property-type not found" );
             if (nPropertyType == -1)
                 nPropertyType = ConversionPropertyType::NOT_DEFINED;
-            AddAttribute( XML_NAMESPACE_TCD, "property-type", OUString::number(  nPropertyType ) );
+            AddAttribute( XmlNamespace::TCD, "property-type", OUString::number(  nPropertyType ) );
         }
-        SvXMLElementExport aEntryMain( *this, XML_NAMESPACE_TCD,
+        SvXMLElementExport aEntryMain( *this, XmlNamespace::TCD,
                 "entry" , true, true );
 
         pair< ConvMap::iterator, ConvMap::iterator > aRange =
@@ -321,7 +321,7 @@ void ConvDicXMLExport::ExportContent_()
         {
             DBG_ASSERT( aLeftText == (*aIt).first, "key <-> entry mismatch" );
             OUString aRightText( (*aIt).second );
-            SvXMLElementExport aEntryRightText( *this, XML_NAMESPACE_TCD,
+            SvXMLElementExport aEntryRightText( *this, XmlNamespace::TCD,
                     "right-text" , true, false );
             Characters( aRightText );
         }
@@ -333,7 +333,7 @@ ConvDicXMLImport::ConvDicXMLImport( ConvDic *pConvDic ) :
     SvXMLImport ( comphelper::getProcessComponentContext(), "com.sun.star.lingu2.ConvDicXMLImport", SvXMLImportFlags::ALL ),
     pDic        ( pConvDic ), nLanguage(LANGUAGE_NONE), nConversionType(-1)
 {
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_TCD), GetXMLToken(XML_N_TCD), XML_NAMESPACE_TCD);
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_TCD), GetXMLToken(XML_N_TCD), XmlNamespace::TCD);
 }
 
 SvXMLImportContext * ConvDicXMLImport::CreateFastContext(
diff --git a/linguistic/source/convdicxml.hxx b/linguistic/source/convdicxml.hxx
index 39c3c8624e95..58efbf41b154 100644
--- a/linguistic/source/convdicxml.hxx
+++ b/linguistic/source/convdicxml.hxx
@@ -64,9 +64,9 @@ public:
 
 enum ConvDicXMLToken : sal_Int32
 {
-    TEXT_CONVERSION_DICTIONARY = FastToken::NAMESPACE | XML_NAMESPACE_TCD | XML_BLOCK_LIST,
-    RIGHT_TEXT = FastToken::NAMESPACE | XML_NAMESPACE_TCD | XML_RIGHT_TEXT,
-    ENTRY = FastToken::NAMESPACE | XML_NAMESPACE_TCD | XML_ENTRY,
+    TEXT_CONVERSION_DICTIONARY = FastToken::NAMESPACE | XmlNamespace::TCD | XML_BLOCK_LIST,
+    RIGHT_TEXT = FastToken::NAMESPACE | XmlNamespace::TCD | XML_RIGHT_TEXT,
+    ENTRY = FastToken::NAMESPACE | XmlNamespace::TCD | XML_ENTRY,
 };
 
 class ConvDicXMLImport : public SvXMLImport
diff --git a/reportdesign/source/filter/xml/xmlExport.cxx b/reportdesign/source/filter/xml/xmlExport.cxx
index 5dcdecef5cb9..d7b0e892c73a 100644
--- a/reportdesign/source/filter/xml/xmlExport.cxx
+++ b/reportdesign/source/filter/xml/xmlExport.cxx
@@ -187,55 +187,55 @@ ORptExport::ORptExport(const Reference< XComponentContext >& _rxContext, OUStrin
     GetMM100UnitConverter().SetXMLMeasureUnit(css::util::MeasureUnit::CM);
 
     // (getExportFlags() & EXPORT_CONTENT) != 0 ? : XML_N_OOO
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE ), XML_NAMESPACE_OFFICE );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XML_NAMESPACE_OOO );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE ), XmlNamespace::OFFICE );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XmlNamespace::OOO );
 
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_RPT), GetXMLToken(XML_N_RPT), XML_NAMESPACE_REPORT );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG_COMPAT),  XML_NAMESPACE_SVG );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM), XML_NAMESPACE_FORM );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XML_NAMESPACE_DRAW );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT), XML_NAMESPACE_TEXT );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_RPT), GetXMLToken(XML_N_RPT), XmlNamespace::REPORT );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG_COMPAT),  XmlNamespace::SVG );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM), XmlNamespace::FORM );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XmlNamespace::DRAW );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT), XmlNamespace::TEXT );
 
 
     if( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::FONTDECLS) )
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XML_NAMESPACE_FO );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XmlNamespace::FO );
 
     if( getExportFlags() & (SvXMLExportFlags::META|SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::CONTENT|SvXMLExportFlags::SCRIPTS|SvXMLExportFlags::SETTINGS) )
     {
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK );
     }
     if( getExportFlags() & SvXMLExportFlags::SETTINGS )
     {
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XML_NAMESPACE_CONFIG );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XmlNamespace::CONFIG );
     }
 
     if( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::CONTENT|SvXMLExportFlags::FONTDECLS) )
     {
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XML_NAMESPACE_STYLE );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XmlNamespace::STYLE );
     }
     // RDFa: needed for content and header/footer styles
     if( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::CONTENT) )
     {
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_XHTML),GetXMLToken(XML_N_XHTML), XML_NAMESPACE_XHTML );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_XHTML),GetXMLToken(XML_N_XHTML), XmlNamespace::XHTML );
         // loext, needed for paragraphs inside shapes
         if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
         {
             GetNamespaceMap_().Add(
                 GetXMLToken(XML_NP_LO_EXT), GetXMLToken(XML_N_LO_EXT),
-                XML_NAMESPACE_LO_EXT);
+                XmlNamespace::LO_EXT);
         }
     }
     // GRDDL: to convert RDFa and meta.xml to RDF
     if( getExportFlags() & (SvXMLExportFlags::META|SvXMLExportFlags::STYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::CONTENT) )
     {
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_GRDDL),GetXMLToken(XML_N_GRDDL), XML_NAMESPACE_GRDDL );
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_GRDDL),GetXMLToken(XML_N_GRDDL), XmlNamespace::GRDDL );
     }
 
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE), XML_NAMESPACE_TABLE );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER), XML_NAMESPACE_NUMBER );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE), XmlNamespace::TABLE );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER), XmlNamespace::NUMBER );
 
-    m_sTableStyle = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_STYLE_NAME) );
-    m_sCellStyle = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_REPORT, GetXMLToken(XML_STYLE_NAME) );
+    m_sTableStyle = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_STYLE_NAME) );
+    m_sCellStyle = GetNamespaceMap().GetQNameByKey( XmlNamespace::REPORT, GetXMLToken(XML_STYLE_NAME) );
 
 
     m_xPropHdlFactory = new OXMLRptPropHdlFactory();
@@ -299,13 +299,13 @@ void ORptExport::exportFunction(const uno::Reference< XFunction>& _xFunction)
     beans::Optional< OUString> aInitial = _xFunction->getInitialFormula();
     if ( aInitial.IsPresent && !aInitial.Value.isEmpty() )
         exportFormula(XML_INITIAL_FORMULA ,aInitial.Value );
-    AddAttribute( XML_NAMESPACE_REPORT, XML_NAME , _xFunction->getName() );
+    AddAttribute( XmlNamespace::REPORT, XML_NAME , _xFunction->getName() );
     if ( _xFunction->getPreEvaluated() )
-        AddAttribute( XML_NAMESPACE_REPORT, XML_PRE_EVALUATED , XML_TRUE );
+        AddAttribute( XmlNamespace::REPORT, XML_PRE_EVALUATED , XML_TRUE );
     if ( _xFunction->getDeepTraversing() )
-        AddAttribute( XML_NAMESPACE_REPORT, XML_DEEP_TRAVERSING , XML_TRUE );
+        AddAttribute( XmlNamespace::REPORT, XML_DEEP_TRAVERSING , XML_TRUE );
 
-    SvXMLElementExport aFunction(*this,XML_NAMESPACE_REPORT, XML_FUNCTION, true, true);
+    SvXMLElementExport aFunction(*this,XmlNamespace::REPORT, XML_FUNCTION, true, true);
 }
 
 void ORptExport::exportMasterDetailFields(const Reference<XReportComponent>& _xReportComponet)
@@ -314,7 +314,7 @@ void ORptExport::exportMasterDetailFields(const Reference<XReportComponent>& _xR
     if ( !aMasterFields.hasElements() )
         return;
 
-    SvXMLElementExport aElement(*this,XML_NAMESPACE_REPORT, XML_MASTER_DETAIL_FIELDS, true, true);
+    SvXMLElementExport aElement(*this,XmlNamespace::REPORT, XML_MASTER_DETAIL_FIELDS, true, true);
     const uno::Sequence< OUString> aDetailFields = _xReportComponet->getDetailFields();
 
     OSL_ENSURE(aDetailFields.getLength() == aMasterFields.getLength(),"not equal length for master and detail fields!");
@@ -322,10 +322,10 @@ void ORptExport::exportMasterDetailFields(const Reference<XReportComponent>& _xR
     const OUString* pDetailFieldsIter = aDetailFields.getConstArray();
     for(const OUString& rMasterField : aMasterFields)
     {
-        AddAttribute( XML_NAMESPACE_REPORT, XML_MASTER , rMasterField );
+        AddAttribute( XmlNamespace::REPORT, XML_MASTER , rMasterField );
         if ( !pDetailFieldsIter->isEmpty() )
-            AddAttribute( XML_NAMESPACE_REPORT, XML_DETAIL , *pDetailFieldsIter );
-        SvXMLElementExport aPair(*this,XML_NAMESPACE_REPORT, XML_MASTER_DETAIL_FIELD, true, true);
+            AddAttribute( XmlNamespace::REPORT, XML_DETAIL , *pDetailFieldsIter );
+        SvXMLElementExport aPair(*this,XmlNamespace::REPORT, XML_MASTER_DETAIL_FIELD, true, true);
         ++pDetailFieldsIter;
     }
 }
@@ -340,7 +340,7 @@ void ORptExport::exportReport(const Reference<XReportDefinition>& _xReportDefini
 
     if ( _xReportDefinition->getReportHeaderOn() )
     {
-        SvXMLElementExport aGroupSection(*this,XML_NAMESPACE_REPORT, XML_REPORT_HEADER, true, true);
+        SvXMLElementExport aGroupSection(*this,XmlNamespace::REPORT, XML_REPORT_HEADER, true, true);
         exportSection(_xReportDefinition->getReportHeader());
     }
     if ( _xReportDefinition->getPageHeaderOn() )
@@ -349,9 +349,9 @@ void ORptExport::exportReport(const Reference<XReportDefinition>& _xReportDefini
         sal_Int16 nRet = _xReportDefinition->getPageHeaderOption();
         const SvXMLEnumMapEntry<sal_Int16>* aXML_EnumMap = OXMLHelper::GetReportPrintOptions();
         if ( SvXMLUnitConverter::convertEnum( sValue, nRet,aXML_EnumMap ) )
-            AddAttribute(XML_NAMESPACE_REPORT, XML_PAGE_PRINT_OPTION,sValue.makeStringAndClear());
+            AddAttribute(XmlNamespace::REPORT, XML_PAGE_PRINT_OPTION,sValue.makeStringAndClear());
 
-        SvXMLElementExport aGroupSection(*this,XML_NAMESPACE_REPORT, XML_PAGE_HEADER, true, true);
+        SvXMLElementExport aGroupSection(*this,XmlNamespace::REPORT, XML_PAGE_HEADER, true, true);
         exportSection(_xReportDefinition->getPageHeader(),true);
     }
 
@@ -363,13 +363,13 @@ void ORptExport::exportReport(const Reference<XReportDefinition>& _xReportDefini
         sal_Int16 nRet = _xReportDefinition->getPageFooterOption();
         const SvXMLEnumMapEntry<sal_Int16>* aXML_EnumMap = OXMLHelper::GetReportPrintOptions();
         if ( SvXMLUnitConverter::convertEnum( sValue, nRet,aXML_EnumMap ) )
-            AddAttribute(XML_NAMESPACE_REPORT, XML_PAGE_PRINT_OPTION,sValue.makeStringAndClear());
-        SvXMLElementExport aGroupSection(*this,XML_NAMESPACE_REPORT, XML_PAGE_FOOTER, true, true);
+            AddAttribute(XmlNamespace::REPORT, XML_PAGE_PRINT_OPTION,sValue.makeStringAndClear());
+        SvXMLElementExport aGroupSection(*this,XmlNamespace::REPORT, XML_PAGE_FOOTER, true, true);
         exportSection(_xReportDefinition->getPageFooter(),true);
     }
     if ( _xReportDefinition->getReportFooterOn() )
     {
-        SvXMLElementExport aGroupSection(*this,XML_NAMESPACE_REPORT, XML_REPORT_FOOTER, true, true);
+        SvXMLElementExport aGroupSection(*this,XmlNamespace::REPORT, XML_REPORT_FOOTER, true, true);
         exportSection(_xReportDefinition->getReportFooter());
     }
 }
@@ -380,9 +380,9 @@ void ORptExport::exportComponent(const Reference<XReportComponent>& _xReportComp
     if ( !_xReportComponent.is() )
         return;
 
-    AddAttribute(XML_NAMESPACE_DRAW, XML_NAME,_xReportComponent->getName());
+    AddAttribute(XmlNamespace::DRAW, XML_NAME,_xReportComponent->getName());
 
-    SvXMLElementExport aElem(*this,XML_NAMESPACE_REPORT, XML_REPORT_COMPONENT, false, false);
+    SvXMLElementExport aElem(*this,XmlNamespace::REPORT, XML_REPORT_COMPONENT, false, false);
 }
 
 void ORptExport::exportFormatConditions(const Reference<XReportControlModel>& _xReportElement)
@@ -395,12 +395,12 @@ void ORptExport::exportFormatConditions(const Reference<XReportControlModel>& _x
         {
             uno::Reference< report::XFormatCondition > xCond(_xReportElement->getByIndex(i),uno::UNO_QUERY);
             if ( !xCond->getEnabled() )
-                AddAttribute(XML_NAMESPACE_REPORT, XML_ENABLED,XML_FALSE);
+                AddAttribute(XmlNamespace::REPORT, XML_ENABLED,XML_FALSE);
 
-            AddAttribute(XML_NAMESPACE_REPORT, XML_FORMULA,xCond->getFormula());
+            AddAttribute(XmlNamespace::REPORT, XML_FORMULA,xCond->getFormula());
 
             exportStyleName(xCond.get(),GetAttrList(),m_sCellStyle);
-            SvXMLElementExport aElem(*this,XML_NAMESPACE_REPORT, XML_FORMAT_CONDITION, true, true);
+            SvXMLElementExport aElem(*this,XmlNamespace::REPORT, XML_FORMAT_CONDITION, true, true);
         }
     }
     catch(uno::Exception&)
@@ -413,12 +413,12 @@ void ORptExport::exportReportElement(const Reference<XReportControlModel>& _xRep
 {
     OSL_ENSURE(_xReportElement.is(),"_xReportElement is NULL -> GPF");
     if ( !_xReportElement->getPrintWhenGroupChange() )
-        AddAttribute(XML_NAMESPACE_REPORT, XML_PRINT_WHEN_GROUP_CHANGE, XML_FALSE );
+        AddAttribute(XmlNamespace::REPORT, XML_PRINT_WHEN_GROUP_CHANGE, XML_FALSE );
 
     if ( !_xReportElement->getPrintRepeatedValues() )
-        AddAttribute(XML_NAMESPACE_REPORT, XML_PRINT_REPEATED_VALUES,XML_FALSE);
+        AddAttribute(XmlNamespace::REPORT, XML_PRINT_REPEATED_VALUES,XML_FALSE);
 
-    SvXMLElementExport aElem(*this,XML_NAMESPACE_REPORT, XML_REPORT_ELEMENT, true, true);
+    SvXMLElementExport aElem(*this,XmlNamespace::REPORT, XML_REPORT_ELEMENT, true, true);
     if ( _xReportElement->getCount() )
     {
         exportFormatConditions(_xReportElement);
@@ -428,7 +428,7 @@ void ORptExport::exportReportElement(const Reference<XReportControlModel>& _xRep
     if ( !sExpr.isEmpty() )
     {
         exportFormula(XML_FORMULA,sExpr);
-        SvXMLElementExport aPrintExpr(*this,XML_NAMESPACE_REPORT, XML_CONDITIONAL_PRINT_EXPRESSION, true, true);
+        SvXMLElementExport aPrintExpr(*this,XmlNamespace::REPORT, XML_CONDITIONAL_PRINT_EXPRESSION, true, true);
     }
 
     // only export when parent exists
@@ -692,35 +692,35 @@ void ORptExport::exportSection(const Reference<XSection>& _xSection,bool bHeader
 {
     OSL_ENSURE(_xSection.is(),"Section is NULL -> GPF");
     OUStringBuffer sValue;
-    AddAttribute(XML_NAMESPACE_TABLE, XML_NAME,_xSection->getName());
+    AddAttribute(XmlNamespace::TABLE, XML_NAME,_xSection->getName());
 
     if ( !_xSection->getVisible() )
-        AddAttribute(XML_NAMESPACE_REPORT, XML_VISIBLE,XML_FALSE);
+        AddAttribute(XmlNamespace::REPORT, XML_VISIBLE,XML_FALSE);
 
     if ( !bHeader )
     {
         sal_Int16 nRet = _xSection->getForceNewPage();
         const SvXMLEnumMapEntry<sal_Int16>* aXML_EnumMap = OXMLHelper::GetForceNewPageOptions();
         if ( SvXMLUnitConverter::convertEnum( sValue, nRet,aXML_EnumMap ) )
-            AddAttribute(XML_NAMESPACE_REPORT, XML_FORCE_NEW_PAGE,sValue.makeStringAndClear());
+            AddAttribute(XmlNamespace::REPORT, XML_FORCE_NEW_PAGE,sValue.makeStringAndClear());
 
         nRet = _xSection->getNewRowOrCol();
         if ( SvXMLUnitConverter::convertEnum( sValue, nRet,aXML_EnumMap ) )
-            AddAttribute(XML_NAMESPACE_REPORT, XML_FORCE_NEW_COLUMN,sValue.makeStringAndClear());
+            AddAttribute(XmlNamespace::REPORT, XML_FORCE_NEW_COLUMN,sValue.makeStringAndClear());
         if ( _xSection->getKeepTogether() )
-            AddAttribute(XML_NAMESPACE_REPORT, XML_KEEP_TOGETHER, XML_TRUE );
+            AddAttribute(XmlNamespace::REPORT, XML_KEEP_TOGETHER, XML_TRUE );
     }
 
     exportStyleName(_xSection.get(),GetAttrList(),m_sTableStyle);
 
     /// TODO export as table layout
-    SvXMLElementExport aComponents(*this,XML_NAMESPACE_TABLE, XML_TABLE, true, true);
+    SvXMLElementExport aComponents(*this,XmlNamespace::TABLE, XML_TABLE, true, true);
 
     OUString sExpr = _xSection->getConditionalPrintExpression();
     if ( !sExpr.isEmpty() )
     {
         exportFormula(XML_FORMULA,sExpr);
-        SvXMLElementExport aPrintExpr(*this,XML_NAMESPACE_REPORT, XML_CONDITIONAL_PRINT_EXPRESSION, true, false);
+        SvXMLElementExport aPrintExpr(*this,XmlNamespace::REPORT, XML_CONDITIONAL_PRINT_EXPRESSION, true, false);
     }
 
     exportContainer(_xSection);
@@ -728,7 +728,7 @@ void ORptExport::exportSection(const Reference<XSection>& _xSection,bool bHeader
 
 void ORptExport::exportTableColumns(const Reference< XSection>& _xSection)
 {
-    SvXMLElementExport aColumns(*this,XML_NAMESPACE_TABLE, XML_TABLE_COLUMNS, true, true);
+    SvXMLElementExport aColumns(*this,XmlNamespace::TABLE, XML_TABLE_COLUMNS, true, true);
     TGridStyleMap::const_iterator aColFind = m_aColumnStyleNames.find(_xSection.get());
     OSL_ENSURE(aColFind != m_aColumnStyleNames.end(),"ORptExport::exportTableColumns: Section not found in m_aColumnStyleNames!");
     if ( aColFind == m_aColumnStyleNames.end() )
@@ -737,7 +737,7 @@ void ORptExport::exportTableColumns(const Reference< XSection>& _xSection)
     for (auto& aCol : aColFind->second)
     {
         AddAttribute(m_sTableStyle, aCol);
-        SvXMLElementExport aColumn(*this,XML_NAMESPACE_TABLE, XML_TABLE_COLUMN, true, true);
+        SvXMLElementExport aColumn(*this,XmlNamespace::TABLE, XML_TABLE_COLUMN, true, true);
     }
 }
 
@@ -763,7 +763,7 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
     for (sal_Int32 j = 0; aRowIter != aRowEnd; ++aRowIter,++j,++aHeightIter)
     {
         AddAttribute( m_sTableStyle,*aHeightIter );
-        SvXMLElementExport aRow(*this,XML_NAMESPACE_TABLE, XML_TABLE_ROW, true, true);
+        SvXMLElementExport aRow(*this,XmlNamespace::TABLE, XML_TABLE_ROW, true, true);
         if ( aRowIter->first )
         {
             ::std::vector< TCell >::const_iterator aColIter = aRowIter->second.begin();
@@ -791,7 +791,7 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
                 {
                     if ( nEmptyCellColSpan > 0 )
                     {
-                        AddAttribute( XML_NAMESPACE_TABLE,XML_NUMBER_COLUMNS_SPANNED, OUString::number(nEmptyCellColSpan) );
+                        AddAttribute( XmlNamespace::TABLE,XML_NUMBER_COLUMNS_SPANNED, OUString::number(nEmptyCellColSpan) );
                         bCoveredCell = true;
                         nColSpan = nEmptyCellColSpan - 1;
                         nEmptyCellColSpan = 0;
@@ -799,14 +799,14 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
                     sal_Int32 nSpan = aColIter->nColSpan;
                     if ( nSpan > 1 )
                     {
-                        AddAttribute( XML_NAMESPACE_TABLE,XML_NUMBER_COLUMNS_SPANNED, OUString::number(nSpan) );
+                        AddAttribute( XmlNamespace::TABLE,XML_NUMBER_COLUMNS_SPANNED, OUString::number(nSpan) );
                         nColSpan = nSpan - 1;
                         bCoveredCell = true;
                     }
                     nSpan = aColIter->nRowSpan;
                     if ( nSpan > 1 )
                     {
-                        AddAttribute( XML_NAMESPACE_TABLE,XML_NUMBER_ROWS_SPANNED, OUString::number(nSpan) );
+                        AddAttribute( XmlNamespace::TABLE,XML_NUMBER_ROWS_SPANNED, OUString::number(nSpan) );
                         aRowSpan[nColIndex] = nSpan - 1;
                     }
                     if ( aColIter->xElement.is() )
@@ -831,12 +831,12 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
                                 aHelper.SetNumberFormatAttributes(nFormatKey, 0.0, false);
                         }
                     }
-                    SvXMLElementExport aCell(*this,XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, false);
+                    SvXMLElementExport aCell(*this,XmlNamespace::TABLE, XML_TABLE_CELL, true, false);
 
                     if ( aColIter->xElement.is() )
                     {
                         // start <text:p>
-                        SvXMLElementExport aParagraphContent(*this,XML_NAMESPACE_TEXT, XML_P, true, false);
+                        SvXMLElementExport aParagraphContent(*this,XmlNamespace::TEXT, XML_P, true, false);
                         Reference<XServiceInfo> xElement(aColIter->xElement,uno::UNO_QUERY);
 
                         if ( !bShapeHandled )
@@ -871,13 +871,13 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
                                 if ( !sTargetLocation.isEmpty() )
                                 {
                                     sTargetLocation = GetRelativeReference(sTargetLocation);
-                                    AddAttribute(XML_NAMESPACE_FORM, XML_IMAGE_DATA,sTargetLocation);
+                                    AddAttribute(XmlNamespace::FORM, XML_IMAGE_DATA,sTargetLocation);
                                 }
                                 bExportData = true;
                                 OUStringBuffer sValue;
                                 const SvXMLEnumMapEntry<sal_Int16>* aXML_ImageScaleEnumMap = OXMLHelper::GetImageScaleOptions();
                                 if ( SvXMLUnitConverter::convertEnum( sValue, xImage->getScaleMode(),aXML_ImageScaleEnumMap ) )
-                                    AddAttribute(XML_NAMESPACE_REPORT, XML_SCALE, sValue.makeStringAndClear() );
+                                    AddAttribute(XmlNamespace::REPORT, XML_SCALE, sValue.makeStringAndClear() );
                             }
                             else if ( xReportDefinition.is() )
                             {
@@ -890,12 +890,12 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
                                 if ( bPageSet )
                                     eToken = XML_FIXED_CONTENT;
                                 else if ( eToken == XML_IMAGE )
-                                    AddAttribute(XML_NAMESPACE_REPORT, XML_PRESERVE_IRI, xImage->getPreserveIRI() ? XML_TRUE : XML_FALSE );
+                                    AddAttribute(XmlNamespace::REPORT, XML_PRESERVE_IRI, xImage->getPreserveIRI() ? XML_TRUE : XML_FALSE );
                             }
 
                             {
                                 // start <report:eToken>
-                                SvXMLElementExport aComponents(*this,XML_NAMESPACE_REPORT, eToken, false, false);
+                                SvXMLElementExport aComponents(*this,XmlNamespace::REPORT, eToken, false, false);
                                 if ( eToken == XML_FIXED_CONTENT )
                                     exportParagraph(xReportElement);
                                 if ( xReportElement.is() )
@@ -903,9 +903,9 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
 
                                 if (eToken == XML_SUB_DOCUMENT && xReportDefinition.is())
                                 {
-                                    SvXMLElementExport aOfficeElement( *this, XML_NAMESPACE_OFFICE, XML_BODY, true, true );
+                                    SvXMLElementExport aOfficeElement( *this, XmlNamespace::OFFICE, XML_BODY, true, true );
                                     SvXMLElementExport aElem( *this, true,
-                                                            XML_NAMESPACE_OFFICE, XML_REPORT,
+                                                            XmlNamespace::OFFICE, XML_REPORT,
                                                               true, true );
 
                                     exportReportAttributes(xReportDefinition);
@@ -929,7 +929,7 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
                 {
                     for (sal_Int32 k = 0; k < nColSpan; ++k)
                     {
-                        SvXMLElementExport aCell(*this,XML_NAMESPACE_TABLE, XML_COVERED_TABLE_CELL, true, true);
+                        SvXMLElementExport aCell(*this,XmlNamespace::TABLE, XML_COVERED_TABLE_CELL, true, true);
                     }
 
                 }
@@ -937,8 +937,8 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
             if ( nEmptyCellColSpan )
             {
                 {
-                    AddAttribute( XML_NAMESPACE_TABLE,XML_NUMBER_COLUMNS_SPANNED, OUString::number(nEmptyCellColSpan) );
-                    SvXMLElementExport aCell(*this,XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true);
+                    AddAttribute( XmlNamespace::TABLE,XML_NUMBER_COLUMNS_SPANNED, OUString::number(nEmptyCellColSpan) );
+                    SvXMLElementExport aCell(*this,XmlNamespace::TABLE, XML_TABLE_CELL, true, true);
                     if ( !bShapeHandled )
                     {
                         bShapeHandled = true;
@@ -947,7 +947,7 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
                 }
                 for (sal_Int32 k = 0; k < nEmptyCellColSpan; ++k)
                 {
-                    SvXMLElementExport aCoveredCell(*this,XML_NAMESPACE_TABLE, XML_COVERED_TABLE_CELL, true, true);
+                    SvXMLElementExport aCoveredCell(*this,XmlNamespace::TABLE, XML_COVERED_TABLE_CELL, true, true);
                 }
             }
         }
@@ -957,8 +957,8 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
             if ( nEmptyCellColSpan )
             {
                 {
-                    AddAttribute( XML_NAMESPACE_TABLE,XML_NUMBER_COLUMNS_SPANNED, OUString::number(nEmptyCellColSpan) );
-                    SvXMLElementExport aCell(*this,XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true);
+                    AddAttribute( XmlNamespace::TABLE,XML_NUMBER_COLUMNS_SPANNED, OUString::number(nEmptyCellColSpan) );
+                    SvXMLElementExport aCell(*this,XmlNamespace::TABLE, XML_TABLE_CELL, true, true);
                     if ( !bShapeHandled )
                     {
                         bShapeHandled = true;
@@ -967,7 +967,7 @@ void ORptExport::exportContainer(const Reference< XSection>& _xSection)
                 }
                 for (sal_Int32 k = 1; k < nEmptyCellColSpan; ++k)
                 {
-                    SvXMLElementExport aCoveredCell(*this,XML_NAMESPACE_TABLE, XML_COVERED_TABLE_CELL, true, true);
+                    SvXMLElementExport aCoveredCell(*this,XmlNamespace::TABLE, XML_COVERED_TABLE_CELL, true, true);
                 }
             }
         }
@@ -989,7 +989,7 @@ bool ORptExport::exportFormula(enum ::xmloff::token::XMLTokenEnum eName,const OU
     sal_Int32 nPageCountIndex = sFieldData.indexOf("PageCount()");
     bool bRet = nPageNumberIndex != -1 || nPageCountIndex != -1;
     if ( !bRet )
-        AddAttribute(XML_NAMESPACE_REPORT, eName,sFieldData);
+        AddAttribute(XmlNamespace::REPORT, eName,sFieldData);
 
     return bRet;
 }
@@ -1031,12 +1031,12 @@ void ORptExport::exportGroup(const Reference<XReportDefinition>& _xReportDefinit
         else
         {
             if ( xGroup->getSortAscending() )
-                AddAttribute(XML_NAMESPACE_REPORT, XML_SORT_ASCENDING, XML_TRUE );
+                AddAttribute(XmlNamespace::REPORT, XML_SORT_ASCENDING, XML_TRUE );
 
             if ( xGroup->getStartNewColumn() )
-                AddAttribute(XML_NAMESPACE_REPORT, XML_START_NEW_COLUMN, XML_TRUE);
+                AddAttribute(XmlNamespace::REPORT, XML_START_NEW_COLUMN, XML_TRUE);
             if ( xGroup->getResetPageNumber() )
-                AddAttribute(XML_NAMESPACE_REPORT, XML_RESET_PAGE_NUMBER, XML_TRUE );
+                AddAttribute(XmlNamespace::REPORT, XML_RESET_PAGE_NUMBER, XML_TRUE );
 
             const OUString sField = xGroup->getExpression();
             OUString sExpression  = sField;
@@ -1054,22 +1054,22 @@ void ORptExport::exportGroup(const Reference<XReportDefinition>& _xReportDefinit
                     sExpression = aGroupFind->second->getName();
                 sExpression = "rpt:HASCHANGED(\"" + sExpression + "\")";
             }
-            AddAttribute(XML_NAMESPACE_REPORT, XML_SORT_EXPRESSION, sField);
-            AddAttribute(XML_NAMESPACE_REPORT, XML_GROUP_EXPRESSION,sExpression);
+            AddAttribute(XmlNamespace::REPORT, XML_SORT_EXPRESSION, sField);
+            AddAttribute(XmlNamespace::REPORT, XML_GROUP_EXPRESSION,sExpression);
             sal_Int16 nRet = xGroup->getKeepTogether();
             OUStringBuffer sValue;
             const SvXMLEnumMapEntry<sal_Int16>* aXML_KeepTogetherEnumMap = OXMLHelper::GetKeepTogetherOptions();
             if ( SvXMLUnitConverter::convertEnum( sValue, nRet, aXML_KeepTogetherEnumMap ) )
-                AddAttribute(XML_NAMESPACE_REPORT, XML_KEEP_TOGETHER,sValue.makeStringAndClear());
+                AddAttribute(XmlNamespace::REPORT, XML_KEEP_TOGETHER,sValue.makeStringAndClear());
 
-            SvXMLElementExport aGroup(*this,XML_NAMESPACE_REPORT, XML_GROUP, true, true);
+            SvXMLElementExport aGroup(*this,XmlNamespace::REPORT, XML_GROUP, true, true);
             exportFunctions(xGroup->getFunctions().get());
             if ( xGroup->getHeaderOn() )
             {
                 Reference<XSection> xSection = xGroup->getHeader();
                 if ( xSection->getRepeatSection() )
-                    AddAttribute(XML_NAMESPACE_REPORT, XML_REPEAT_SECTION,XML_TRUE );
-                SvXMLElementExport aGroupSection(*this,XML_NAMESPACE_REPORT, XML_GROUP_HEADER, true, true);
+                    AddAttribute(XmlNamespace::REPORT, XML_REPEAT_SECTION,XML_TRUE );
+                SvXMLElementExport aGroupSection(*this,XmlNamespace::REPORT, XML_GROUP_HEADER, true, true);
                 exportSection(xSection);
             }
             exportGroup(_xReportDefinition,_nPos+1,_bExportAutoStyle);
@@ -1077,8 +1077,8 @@ void ORptExport::exportGroup(const Reference<XReportDefinition>& _xReportDefinit
             {
                 Reference<XSection> xSection = xGroup->getFooter();
                 if ( xSection->getRepeatSection() )
-                    AddAttribute(XML_NAMESPACE_REPORT, XML_REPEAT_SECTION,XML_TRUE );
-                SvXMLElementExport aGroupSection(*this,XML_NAMESPACE_REPORT, XML_GROUP_FOOTER, true, true);
+                    AddAttribute(XmlNamespace::REPORT, XML_REPEAT_SECTION,XML_TRUE );
+                SvXMLElementExport aGroupSection(*this,XmlNamespace::REPORT, XML_GROUP_FOOTER, true, true);
                 exportSection(xSection);
             }
         }
@@ -1089,7 +1089,7 @@ void ORptExport::exportGroup(const Reference<XReportDefinition>& _xReportDefinit
     }
     else
     {
-        SvXMLElementExport aGroupSection(*this,XML_NAMESPACE_REPORT, XML_DETAIL, true, true);
+        SvXMLElementExport aGroupSection(*this,XmlNamespace::REPORT, XML_DETAIL, true, true);
         exportSection(_xReportDefinition->getDetail());
     }
 }
@@ -1240,28 +1240,28 @@ void ORptExport::exportReportAttributes(const Reference<XReportDefinition>& _xRe
     OUStringBuffer sValue;
     const SvXMLEnumMapEntry<sal_Int32>* aXML_CommnadTypeEnumMap = OXMLHelper::GetCommandTypeOptions();
     if ( SvXMLUnitConverter::convertEnum( sValue, _xReport->getCommandType(), aXML_CommnadTypeEnumMap ) )
-        AddAttribute(XML_NAMESPACE_REPORT, XML_COMMAND_TYPE,sValue.makeStringAndClear());
+        AddAttribute(XmlNamespace::REPORT, XML_COMMAND_TYPE,sValue.makeStringAndClear());
 
     OUString sComamnd = _xReport->getCommand();
     if ( !sComamnd.isEmpty() )
-        AddAttribute(XML_NAMESPACE_REPORT, XML_COMMAND, sComamnd);
+        AddAttribute(XmlNamespace::REPORT, XML_COMMAND, sComamnd);
 
     OUString sFilter( _xReport->getFilter() );
     if ( !sFilter.isEmpty() )
-        AddAttribute( XML_NAMESPACE_REPORT, XML_FILTER, sFilter );
+        AddAttribute( XmlNamespace::REPORT, XML_FILTER, sFilter );
 
-    AddAttribute(XML_NAMESPACE_OFFICE, XML_MIMETYPE,_xReport->getMimeType());
+    AddAttribute(XmlNamespace::OFFICE, XML_MIMETYPE,_xReport->getMimeType());
 
     bool bEscapeProcessing( _xReport->getEscapeProcessing() );
     if ( !bEscapeProcessing )
-        AddAttribute( XML_NAMESPACE_REPORT, XML_ESCAPE_PROCESSING, ::xmloff::token::GetXMLToken( XML_FALSE ) );
+        AddAttribute( XmlNamespace::REPORT, XML_ESCAPE_PROCESSING, ::xmloff::token::GetXMLToken( XML_FALSE ) );
 
     OUString sName = _xReport->getCaption();
     if ( !sName.isEmpty() )
-        AddAttribute(XML_NAMESPACE_OFFICE, XML_CAPTION,sName);
+        AddAttribute(XmlNamespace::OFFICE, XML_CAPTION,sName);
     sName = _xReport->getName();
     if ( !sName.isEmpty() )
-        AddAttribute(XML_NAMESPACE_DRAW, XML_NAME,sName);
+        AddAttribute(XmlNamespace::DRAW, XML_NAME,sName);
 }
 
 void ORptExport::ExportContent_()
@@ -1351,7 +1351,7 @@ void ORptExport::exportParagraph(const Reference< XReportControlModel >& _xRepor
 {
     OSL_PRECOND(_xReportElement.is(),"Element is null!");
     // start <text:p>
-    SvXMLElementExport aParagraphContent(*this,XML_NAMESPACE_TEXT, XML_P, false, false);
+    SvXMLElementExport aParagraphContent(*this,XmlNamespace::TEXT, XML_P, false, false);
     if ( Reference<XFormattedField>(_xReportElement,uno::UNO_QUERY).is() )
     {
         OUString sFieldData = _xReportElement->getDataField();
@@ -1370,13 +1370,13 @@ void ORptExport::exportParagraph(const Reference< XReportControlModel >& _xRepor
                 {
                     if ( sToken == s_sPageNumber )
                     {
-                        AddAttribute(XML_NAMESPACE_TEXT, XML_SELECT_PAGE, "current" );
-                        SvXMLElementExport aPageNumber(*this,XML_NAMESPACE_TEXT, XML_PAGE_NUMBER, false, false);
+                        AddAttribute(XmlNamespace::TEXT, XML_SELECT_PAGE, "current" );
+                        SvXMLElementExport aPageNumber(*this,XmlNamespace::TEXT, XML_PAGE_NUMBER, false, false);
                         Characters("1");
                     }
                     else if ( sToken == "PageCount()" )
                     {
-                        SvXMLElementExport aPageNumber(*this,XML_NAMESPACE_TEXT, XML_PAGE_COUNT, false, false);
+                        SvXMLElementExport aPageNumber(*this,XmlNamespace::TEXT, XML_PAGE_COUNT, false, false);
                         Characters("1");
                     }
                     else
@@ -1415,7 +1415,7 @@ void ORptExport::exportShapes(const Reference< XSection>& _xSection,bool _bAddPa
     const sal_Int32 nCount = _xSection->getCount();
     ::std::unique_ptr<SvXMLElementExport> pParagraphContent;
     if ( _bAddParagraph )
-        pParagraphContent.reset(new SvXMLElementExport(*this,XML_NAMESPACE_TEXT, XML_P, true, false));
+        pParagraphContent.reset(new SvXMLElementExport(*this,XmlNamespace::TEXT, XML_P, true, false));
 
     awt::Point aRefPoint;
     aRefPoint.X = rptui::getStyleProperty<sal_Int32>(_xSection->getReportDefinition(),PROPERTY_LEFTMARGIN);
@@ -1428,12 +1428,12 @@ void ORptExport::exportShapes(const Reference< XSection>& _xSection,bool _bAddPa
             uno::Reference< frame::XModel> xModel(xShape->getPropertyValue("Model"),uno::UNO_QUERY);
             if ( xModel.is() ) // special handling for chart object
             {
-                pSubDocument.reset(new SvXMLElementExport(*this,XML_NAMESPACE_REPORT, XML_SUB_DOCUMENT, false, false));
+                pSubDocument.reset(new SvXMLElementExport(*this,XmlNamespace::REPORT, XML_SUB_DOCUMENT, false, false));
                 exportMasterDetailFields(xShape.get());
                 exportReportElement(xShape.get());
             }
 
-            AddAttribute( XML_NAMESPACE_TEXT, XML_ANCHOR_TYPE, XML_PARAGRAPH );
+            AddAttribute( XmlNamespace::TEXT, XML_ANCHOR_TYPE, XML_PARAGRAPH );
             xShapeExport->exportShape(xShape.get(), SEF_DEFAULT|XMLShapeExportFlags::NO_WS,&aRefPoint);
         }
     }
diff --git a/reportdesign/source/filter/xml/xmlHelper.cxx b/reportdesign/source/filter/xml/xmlHelper.cxx
index 6769f6e73011..2a64c696f98e 100644
--- a/reportdesign/source/filter/xml/xmlHelper.cxx
+++ b/reportdesign/source/filter/xml/xmlHelper.cxx
@@ -97,10 +97,10 @@ const XMLPropertyHandler* OPropertyHandlerFactory::GetPropertyHandler(sal_Int32
     return pHandler;
 }
 
-#define MAP_CONST_T_ASCII( name, prefix, token, type, context ) { name, sizeof(name)-1, XML_NAMESPACE_##prefix, XML_##token, type|XML_TYPE_PROP_TABLE,      context, SvtSaveOptions::ODFSVER_010, false }
-#define MAP_CONST_P_ASCII( name, prefix, token, type, context ) { name, sizeof(name)-1, XML_NAMESPACE_##prefix, XML_##token, type|XML_TYPE_PROP_PARAGRAPH,  context, SvtSaveOptions::ODFSVER_010, false }
-#define MAP_CONST_S( name, prefix, token, type, context )  { name, sizeof(name)-1,      XML_NAMESPACE_##prefix, XML_##token, type|XML_TYPE_PROP_SECTION,    context, SvtSaveOptions::ODFSVER_010, false }
-#define MAP_CONST_C_ASCII( name, prefix, token, type, context ) { name, sizeof(name)-1, XML_NAMESPACE_##prefix, XML_##token, type|XML_TYPE_PROP_TABLE_CELL, context, SvtSaveOptions::ODFSVER_010, false }
+#define MAP_CONST_T_ASCII( name, prefix, token, type, context ) { name, sizeof(name)-1, XmlNamespace::##prefix, XML_##token, type|XML_TYPE_PROP_TABLE,      context, SvtSaveOptions::ODFSVER_010, false }
+#define MAP_CONST_P_ASCII( name, prefix, token, type, context ) { name, sizeof(name)-1, XmlNamespace::##prefix, XML_##token, type|XML_TYPE_PROP_PARAGRAPH,  context, SvtSaveOptions::ODFSVER_010, false }
+#define MAP_CONST_S( name, prefix, token, type, context )  { name, sizeof(name)-1,      XmlNamespace::##prefix, XML_##token, type|XML_TYPE_PROP_SECTION,    context, SvtSaveOptions::ODFSVER_010, false }
+#define MAP_CONST_C_ASCII( name, prefix, token, type, context ) { name, sizeof(name)-1, XmlNamespace::##prefix, XML_##token, type|XML_TYPE_PROP_TABLE_CELL, context, SvtSaveOptions::ODFSVER_010, false }
 #define MAP_END() { nullptr, 0, 0, XML_TOKEN_INVALID, 0 ,0, SvtSaveOptions::ODFSVER_010, false}
 
 rtl::Reference < XMLPropertySetMapper > OXMLHelper::GetCellStylePropertyMap(bool _bOldFormat, bool bForExport)
@@ -330,25 +330,25 @@ std::unique_ptr<SvXMLTokenMap> OXMLHelper::GetReportElemTokenMap()
 {
     static const SvXMLTokenMapEntry aElemTokenMap[]=
     {
-        { XML_NAMESPACE_REPORT, XML_REPORT_HEADER,              XML_TOK_REPORT_HEADER           },
-        { XML_NAMESPACE_REPORT, XML_PAGE_HEADER ,               XML_TOK_PAGE_HEADER             },
-        { XML_NAMESPACE_REPORT, XML_GROUP,                      XML_TOK_GROUP                   },
-        { XML_NAMESPACE_REPORT, XML_DETAIL      ,               XML_TOK_DETAIL                  },
-        { XML_NAMESPACE_REPORT, XML_PAGE_FOOTER ,               XML_TOK_PAGE_FOOTER             },
-        { XML_NAMESPACE_REPORT, XML_REPORT_FOOTER,              XML_TOK_REPORT_FOOTER           },
-        { XML_NAMESPACE_REPORT, XML_HEADER_ON_NEW_PAGE,         XML_TOK_HEADER_ON_NEW_PAGE      },
-        { XML_NAMESPACE_REPORT, XML_FOOTER_ON_NEW_PAGE,         XML_TOK_FOOTER_ON_NEW_PAGE      },
-        { XML_NAMESPACE_REPORT, XML_COMMAND_TYPE,               XML_TOK_COMMAND_TYPE            },
-        { XML_NAMESPACE_REPORT, XML_COMMAND,                    XML_TOK_COMMAND                 },
-        { XML_NAMESPACE_REPORT, XML_FILTER,                     XML_TOK_FILTER                  },
-        { XML_NAMESPACE_REPORT, XML_CAPTION,                    XML_TOK_CAPTION                 },
-        { XML_NAMESPACE_REPORT, XML_ESCAPE_PROCESSING,          XML_TOK_ESCAPE_PROCESSING       },
-        { XML_NAMESPACE_REPORT, XML_FUNCTION,                   XML_TOK_REPORT_FUNCTION         },
-        { XML_NAMESPACE_OFFICE, XML_MIMETYPE,                   XML_TOK_REPORT_MIMETYPE         },
-        { XML_NAMESPACE_DRAW,   XML_NAME,                       XML_TOK_REPORT_NAME             },
-        { XML_NAMESPACE_REPORT, XML_MASTER_DETAIL_FIELDS,       XML_TOK_MASTER_DETAIL_FIELDS    },
-        { XML_NAMESPACE_DRAW,   XML_FRAME,                      XML_TOK_SUB_FRAME               },
-        { XML_NAMESPACE_OFFICE, XML_BODY,                       XML_TOK_SUB_BODY },
+        { XmlNamespace::REPORT, XML_REPORT_HEADER,              XML_TOK_REPORT_HEADER           },
+        { XmlNamespace::REPORT, XML_PAGE_HEADER ,               XML_TOK_PAGE_HEADER             },
+        { XmlNamespace::REPORT, XML_GROUP,                      XML_TOK_GROUP                   },
+        { XmlNamespace::REPORT, XML_DETAIL      ,               XML_TOK_DETAIL                  },
+        { XmlNamespace::REPORT, XML_PAGE_FOOTER ,               XML_TOK_PAGE_FOOTER             },
+        { XmlNamespace::REPORT, XML_REPORT_FOOTER,              XML_TOK_REPORT_FOOTER           },
+        { XmlNamespace::REPORT, XML_HEADER_ON_NEW_PAGE,         XML_TOK_HEADER_ON_NEW_PAGE      },
+        { XmlNamespace::REPORT, XML_FOOTER_ON_NEW_PAGE,         XML_TOK_FOOTER_ON_NEW_PAGE      },
+        { XmlNamespace::REPORT, XML_COMMAND_TYPE,               XML_TOK_COMMAND_TYPE            },
+        { XmlNamespace::REPORT, XML_COMMAND,                    XML_TOK_COMMAND                 },
+        { XmlNamespace::REPORT, XML_FILTER,                     XML_TOK_FILTER                  },
+        { XmlNamespace::REPORT, XML_CAPTION,                    XML_TOK_CAPTION                 },
+        { XmlNamespace::REPORT, XML_ESCAPE_PROCESSING,          XML_TOK_ESCAPE_PROCESSING       },
+        { XmlNamespace::REPORT, XML_FUNCTION,                   XML_TOK_REPORT_FUNCTION         },
+        { XmlNamespace::OFFICE, XML_MIMETYPE,                   XML_TOK_REPORT_MIMETYPE         },
+        { XmlNamespace::DRAW,   XML_NAME,                       XML_TOK_REPORT_NAME             },
+        { XmlNamespace::REPORT, XML_MASTER_DETAIL_FIELDS,       XML_TOK_MASTER_DETAIL_FIELDS    },
+        { XmlNamespace::DRAW,   XML_FRAME,                      XML_TOK_SUB_FRAME               },
+        { XmlNamespace::OFFICE, XML_BODY,                       XML_TOK_SUB_BODY },
         XML_TOKEN_MAP_END
     };
     return std::make_unique<SvXMLTokenMap>( aElemTokenMap );
@@ -358,9 +358,9 @@ std::unique_ptr<SvXMLTokenMap> OXMLHelper::GetSubDocumentElemTokenMap()
 {
     static const SvXMLTokenMapEntry aElemTokenMap[]=
     {
-        { XML_NAMESPACE_REPORT, XML_MASTER_DETAIL_FIELD,    XML_TOK_MASTER_DETAIL_FIELD},
-        { XML_NAMESPACE_REPORT, XML_MASTER,                 XML_TOK_MASTER},
-        { XML_NAMESPACE_REPORT, XML_DETAIL,                 XML_TOK_SUB_DETAIL},
+        { XmlNamespace::REPORT, XML_MASTER_DETAIL_FIELD,    XML_TOK_MASTER_DETAIL_FIELD},
+        { XmlNamespace::REPORT, XML_MASTER,                 XML_TOK_MASTER},
+        { XmlNamespace::REPORT, XML_DETAIL,                 XML_TOK_SUB_DETAIL},
         XML_TOKEN_MAP_END
     };
     return std::make_unique<SvXMLTokenMap>( aElemTokenMap );
diff --git a/reportdesign/source/filter/xml/xmlImportDocumentHandler.cxx b/reportdesign/source/filter/xml/xmlImportDocumentHandler.cxx
index 95fd297bc657..6ab29d500384 100644
--- a/reportdesign/source/filter/xml/xmlImportDocumentHandler.cxx
+++ b/reportdesign/source/filter/xml/xmlImportDocumentHandler.cxx
@@ -163,7 +163,7 @@ void SAL_CALL ImportDocumentHandler::startElement(const OUString & _sName, const
                     sLocalName = sAttrName.copy( nColonPos + 1 );
                 const OUString sValue = _xAttrList->getValueByIndex( i );
 
-                switch( m_pReportElemTokenMap->Get( XML_NAMESPACE_REPORT, sLocalName ) )
+                switch( m_pReportElemTokenMap->Get( XmlNamespace::REPORT, sLocalName ) )
                 {
                     case XML_TOK_COMMAND_TYPE:
                         {
@@ -212,7 +212,7 @@ void SAL_CALL ImportDocumentHandler::startElement(const OUString & _sName, const
                     sLocalName = sAttrName.copy( nColonPos + 1 );
                 const OUString sValue = _xAttrList->getValueByIndex( i );
 
-                switch( pMasterElemTokenMap->Get( XML_NAMESPACE_REPORT, sLocalName ) )
+                switch( pMasterElemTokenMap->Get( XmlNamespace::REPORT, sLocalName ) )
                 {
                     case XML_TOK_MASTER:
                         sMasterField = sValue;
diff --git a/reportdesign/source/filter/xml/xmlfilter.cxx b/reportdesign/source/filter/xml/xmlfilter.cxx
index 34cf5c49cba2..8da6bd65c722 100644
--- a/reportdesign/source/filter/xml/xmlfilter.cxx
+++ b/reportdesign/source/filter/xml/xmlfilter.cxx
@@ -310,11 +310,11 @@ ORptFilter::ORptFilter( const uno::Reference< XComponentContext >& _rxContext, O
     GetMM100UnitConverter().SetXMLMeasureUnit(util::MeasureUnit::CM);
     GetNamespaceMap().Add( "_report",
                         GetXMLToken(XML_N_RPT),
-                        XML_NAMESPACE_REPORT );
+                        XmlNamespace::REPORT );
 
     GetNamespaceMap().Add( "__report",
                         GetXMLToken(XML_N_RPT_OASIS),
-                        XML_NAMESPACE_REPORT );
+                        XmlNamespace::REPORT );
 
     m_xPropHdlFactory = new OXMLRptPropHdlFactory;
     m_xCellStylesPropertySetMapper = OXMLHelper::GetCellStylePropertyMap(true, false);
@@ -697,18 +697,18 @@ const SvXMLTokenMap& ORptFilter::GetCellElemTokenMap() const
     {
         static const SvXMLTokenMapEntry aElemTokenMap[]=
         {
-            { XML_NAMESPACE_TEXT,   XML_P                           ,   XML_TOK_P                           },
-            { XML_NAMESPACE_REPORT, XML_FIXED_CONTENT               ,   XML_TOK_FIXED_CONTENT               },
-            { XML_NAMESPACE_REPORT, XML_FORMATTED_TEXT              ,   XML_TOK_FORMATTED_TEXT              },
-            { XML_NAMESPACE_REPORT, XML_IMAGE                       ,   XML_TOK_IMAGE                       },
-            { XML_NAMESPACE_REPORT, XML_SUB_DOCUMENT                ,   XML_TOK_SUB_DOCUMENT                },
-            { XML_NAMESPACE_DRAW,   XML_CUSTOM_SHAPE                ,   XML_TOK_CUSTOM_SHAPE                },
-            { XML_NAMESPACE_DRAW,   XML_FRAME                       ,   XML_TOK_FRAME                       },
-            { XML_NAMESPACE_TEXT,   XML_PAGE_NUMBER                 ,   XML_TOK_PAGE_NUMBER                 },
-            { XML_NAMESPACE_TEXT,   XML_PAGE_COUNT                  ,   XML_TOK_PAGE_COUNT                  },
-            { XML_NAMESPACE_TEXT,   XML_TAB                         ,   XML_TOK_TEXT_TAB_STOP               },
-            { XML_NAMESPACE_TEXT,   XML_LINE_BREAK                  ,   XML_TOK_TEXT_LINE_BREAK             },
-            { XML_NAMESPACE_TEXT,   XML_S                           ,   XML_TOK_TEXT_S                      },
+            { XmlNamespace::TEXT,   XML_P                           ,   XML_TOK_P                           },
+            { XmlNamespace::REPORT, XML_FIXED_CONTENT               ,   XML_TOK_FIXED_CONTENT               },
+            { XmlNamespace::REPORT, XML_FORMATTED_TEXT              ,   XML_TOK_FORMATTED_TEXT              },
+            { XmlNamespace::REPORT, XML_IMAGE                       ,   XML_TOK_IMAGE                       },
+            { XmlNamespace::REPORT, XML_SUB_DOCUMENT                ,   XML_TOK_SUB_DOCUMENT                },
+            { XmlNamespace::DRAW,   XML_CUSTOM_SHAPE                ,   XML_TOK_CUSTOM_SHAPE                },
+            { XmlNamespace::DRAW,   XML_FRAME                       ,   XML_TOK_FRAME                       },
+            { XmlNamespace::TEXT,   XML_PAGE_NUMBER                 ,   XML_TOK_PAGE_NUMBER                 },
+            { XmlNamespace::TEXT,   XML_PAGE_COUNT                  ,   XML_TOK_PAGE_COUNT                  },
+            { XmlNamespace::TEXT,   XML_TAB                         ,   XML_TOK_TEXT_TAB_STOP               },
+            { XmlNamespace::TEXT,   XML_LINE_BREAK                  ,   XML_TOK_TEXT_LINE_BREAK             },
+            { XmlNamespace::TEXT,   XML_S                           ,   XML_TOK_TEXT_S                      },
             XML_TOKEN_MAP_END
         };
         m_pCellElemTokenMap.reset(new SvXMLTokenMap( aElemTokenMap ));
diff --git a/sc/source/core/tool/interpr7.cxx b/sc/source/core/tool/interpr7.cxx
index 8678f9e4c68f..c8edd2b4b3eb 100644
--- a/sc/source/core/tool/interpr7.cxx
+++ b/sc/source/core/tool/interpr7.cxx
@@ -178,7 +178,7 @@ void ScInterpreter::ScFilterXML()
                     if( nSize > nNode )
                     {
                         OUString aResult;
-                        if(pNodeSet->nodeTab[nNode]->type == XML_NAMESPACE_DECL)
+                        if(pNodeSet->nodeTab[nNode]->type == XmlNamespace::DECL)
                         {
                             xmlNsPtr ns = reinterpret_cast<xmlNsPtr>(pNodeSet->nodeTab[nNode]);
                             xmlNodePtr cur = reinterpret_cast<xmlNodePtr>(ns->next);
diff --git a/sc/source/filter/xml/XMLChangeTrackingExportHelper.cxx b/sc/source/filter/xml/XMLChangeTrackingExportHelper.cxx
index 4a8af8b60dcd..a9a21b568cd3 100644
--- a/sc/source/filter/xml/XMLChangeTrackingExportHelper.cxx
+++ b/sc/source/filter/xml/XMLChangeTrackingExportHelper.cxx
@@ -59,9 +59,9 @@ OUString ScChangeTrackingExportHelper::GetChangeID(const sal_uInt32 nActionNumbe
 void ScChangeTrackingExportHelper::GetAcceptanceState(const ScChangeAction* pAction)
 {
     if (pAction->IsRejected())
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ACCEPTANCE_STATE, XML_REJECTED);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ACCEPTANCE_STATE, XML_REJECTED);
     else if (pAction->IsAccepted())
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ACCEPTANCE_STATE, XML_ACCEPTED);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ACCEPTANCE_STATE, XML_ACCEPTED);
 }
 
 void ScChangeTrackingExportHelper::WriteBigRange(const ScBigRange& rBigRange, XMLTokenEnum aName)
@@ -76,28 +76,28 @@ void ScChangeTrackingExportHelper::WriteBigRange(const ScBigRange& rBigRange, XM
         nEndColumn, nEndRow, nEndSheet);
     if ((nStartColumn == nEndColumn) && (nStartRow == nEndRow) && (nStartSheet == nEndSheet))
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_COLUMN, OUString::number(nStartColumn));
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ROW, OUString::number(nStartRow));
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TABLE, OUString::number(nStartSheet));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_COLUMN, OUString::number(nStartColumn));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ROW, OUString::number(nStartRow));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_TABLE, OUString::number(nStartSheet));
     }
     else
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_START_COLUMN, OUString::number(nStartColumn));
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_START_ROW, OUString::number(nStartRow));
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_START_TABLE, OUString::number(nStartSheet));
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_END_COLUMN, OUString::number(nEndColumn));
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_END_ROW, OUString::number(nEndRow));
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_END_TABLE, OUString::number(nEndSheet));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_START_COLUMN, OUString::number(nStartColumn));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_START_ROW, OUString::number(nStartRow));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_START_TABLE, OUString::number(nStartSheet));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_END_COLUMN, OUString::number(nEndColumn));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_END_ROW, OUString::number(nEndRow));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_END_TABLE, OUString::number(nEndSheet));
     }
-    SvXMLElementExport aBigRangeElem(rExport, XML_NAMESPACE_TABLE, aName, true, true);
+    SvXMLElementExport aBigRangeElem(rExport, XmlNamespace::TABLE, aName, true, true);
 }
 
 void ScChangeTrackingExportHelper::WriteChangeInfo(const ScChangeAction* pAction)
 {
-    SvXMLElementExport aElemInfo (rExport, XML_NAMESPACE_OFFICE, XML_CHANGE_INFO, true, true);
+    SvXMLElementExport aElemInfo (rExport, XmlNamespace::OFFICE, XML_CHANGE_INFO, true, true);
 
     {
-        SvXMLElementExport aCreatorElem( rExport, XML_NAMESPACE_DC,
+        SvXMLElementExport aCreatorElem( rExport, XmlNamespace::DC,
                                             XML_CREATOR, true,
                                             false );
         rExport.Characters(pAction->GetUser());
@@ -106,7 +106,7 @@ void ScChangeTrackingExportHelper::WriteChangeInfo(const ScChangeAction* pAction
     {
         OUStringBuffer sDate;
         ScXMLConverter::ConvertDateTimeToString(pAction->GetDateTimeUTC(), sDate);
-        SvXMLElementExport aDateElem( rExport, XML_NAMESPACE_DC,
+        SvXMLElementExport aDateElem( rExport, XmlNamespace::DC,
                                           XML_DATE, true,
                                           false );
         rExport.Characters(sDate.makeStringAndClear());
@@ -115,7 +115,7 @@ void ScChangeTrackingExportHelper::WriteChangeInfo(const ScChangeAction* pAction
     const OUString& sComment(pAction->GetComment());
     if (!sComment.isEmpty())
     {
-        SvXMLElementExport aElemC(rExport, XML_NAMESPACE_TEXT, XML_P, true, false);
+        SvXMLElementExport aElemC(rExport, XmlNamespace::TEXT, XML_P, true, false);
         bool bPrevCharWasSpace(true);
         rExport.GetTextParagraphExport()->exportCharacterData(sComment, bPrevCharWasSpace);
     }
@@ -127,7 +127,7 @@ void ScChangeTrackingExportHelper::WriteGenerated(const ScChangeAction* pGenerat
     sal_uInt32 nActionNumber(pGeneratedAction->GetActionNumber());
     OSL_ENSURE(pChangeTrack->IsGenerated(nActionNumber), "a not generated action found");
 #endif
-    SvXMLElementExport aElemPrev(rExport, XML_NAMESPACE_TABLE, XML_CELL_CONTENT_DELETION, true, true);
+    SvXMLElementExport aElemPrev(rExport, XmlNamespace::TABLE, XML_CELL_CONTENT_DELETION, true, true);
     WriteBigRange(pGeneratedAction->GetBigRange(), XML_CELL_ADDRESS);
     OUString sValue;
     static_cast<const ScChangeActionContent*>(pGeneratedAction)->GetNewString(sValue, rExport.GetDocument());
@@ -144,8 +144,8 @@ void ScChangeTrackingExportHelper::WriteDeleted(const ScChangeAction* pDeletedAc
         {
             if (!pChangeTrack->IsGenerated(nActionNumber))
             {
-                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ID, GetChangeID(nActionNumber));
-                SvXMLElementExport aElemPrev(rExport, XML_NAMESPACE_TABLE, XML_CELL_CONTENT_DELETION, true, true);
+                rExport.AddAttribute(XmlNamespace::TABLE, XML_ID, GetChangeID(nActionNumber));
+                SvXMLElementExport aElemPrev(rExport, XmlNamespace::TABLE, XML_CELL_CONTENT_DELETION, true, true);
                 if (static_cast<const ScChangeActionContent*>(pDeletedAction)->IsTopContent() && pDeletedAction->IsDeletedIn())
                 {
                     OUString sValue;
@@ -159,17 +159,17 @@ void ScChangeTrackingExportHelper::WriteDeleted(const ScChangeAction* pDeletedAc
     }
     else
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ID, GetChangeID(nActionNumber));
-        SvXMLElementExport aElemPrev(rExport, XML_NAMESPACE_TABLE, XML_CHANGE_DELETION, true, true);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ID, GetChangeID(nActionNumber));
+        SvXMLElementExport aElemPrev(rExport, XmlNamespace::TABLE, XML_CHANGE_DELETION, true, true);
     }
 }
 
 void ScChangeTrackingExportHelper::WriteDepending(const ScChangeAction* pDependAction)
 {
     sal_uInt32 nActionNumber(pDependAction->GetActionNumber());
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ID, GetChangeID(nActionNumber));
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_ID, GetChangeID(nActionNumber));
 
-    SvXMLElementExport aDependElem(rExport, XML_NAMESPACE_TABLE,
+    SvXMLElementExport aDependElem(rExport, XmlNamespace::TABLE,
         XML_DEPENDENCY, true, true);
 }
 
@@ -177,7 +177,7 @@ void ScChangeTrackingExportHelper::WriteDependings(const ScChangeAction* pAction
 {
     if (pAction->HasDependent())
     {
-        SvXMLElementExport aDependingsElem (rExport, XML_NAMESPACE_TABLE, XML_DEPENDENCIES, true, true);
+        SvXMLElementExport aDependingsElem (rExport, XmlNamespace::TABLE, XML_DEPENDENCIES, true, true);
         const ScChangeActionLinkEntry* pEntry = pAction->GetFirstDependentEntry();
         while (pEntry)
         {
@@ -187,7 +187,7 @@ void ScChangeTrackingExportHelper::WriteDependings(const ScChangeAction* pAction
     }
     if (pAction->HasDeleted())
     {
-        SvXMLElementExport aDependingsElem (rExport, XML_NAMESPACE_TABLE, XML_DELETIONS, true, true);
+        SvXMLElementExport aDependingsElem (rExport, XmlNamespace::TABLE, XML_DELETIONS, true, true);
         const ScChangeActionLinkEntry* pEntry = pAction->GetFirstDeletedEntry();
         while (pEntry)
         {
@@ -199,7 +199,7 @@ void ScChangeTrackingExportHelper::WriteDependings(const ScChangeAction* pAction
 
 void ScChangeTrackingExportHelper::WriteEmptyCell()
 {
-    SvXMLElementExport aElemEmptyCell(rExport, XML_NAMESPACE_TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
+    SvXMLElementExport aElemEmptyCell(rExport, XmlNamespace::TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
 }
 
 void ScChangeTrackingExportHelper::SetValueAttributes(const double& fValue, const OUString& sValue)
@@ -220,20 +220,20 @@ void ScChangeTrackingExportHelper::SetValueAttributes(const double& fValue, cons
                     {
                         if ( rExport.GetMM100UnitConverter().setNullDate(rExport.GetModel()) )
                         {
-                            rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_DATE);
+                            rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_DATE);
                             OUStringBuffer sBuffer;
                             rExport.GetMM100UnitConverter().convertDateTime(sBuffer, fTempValue);
-                            rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_DATE_VALUE, sBuffer.makeStringAndClear());
+                            rExport.AddAttribute(XmlNamespace::OFFICE, XML_DATE_VALUE, sBuffer.makeStringAndClear());
                             bSetAttributes = true;
                         }
                     }
                     break;
                 case SvNumFormatType::TIME:
                     {
-                        rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_TIME);
+                        rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_TIME);
                         OUStringBuffer sBuffer;
                         ::sax::Converter::convertDuration(sBuffer, fTempValue);
-                        rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_TIME_VALUE, sBuffer.makeStringAndClear());
+                        rExport.AddAttribute(XmlNamespace::OFFICE, XML_TIME_VALUE, sBuffer.makeStringAndClear());
                         bSetAttributes = true;
                     }
                     break;
@@ -243,12 +243,12 @@ void ScChangeTrackingExportHelper::SetValueAttributes(const double& fValue, cons
     }
     if (!bSetAttributes)
     {
-        rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT);
+        rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_FLOAT);
         OUStringBuffer sBuffer;
         ::sax::Converter::convertDouble(sBuffer, fValue);
         OUString sNumValue(sBuffer.makeStringAndClear());
         if (!sNumValue.isEmpty())
-            rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE, sNumValue);
+            rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE, sNumValue);
     }
 }
 
@@ -257,18 +257,18 @@ void ScChangeTrackingExportHelper::WriteValueCell(const ScCellValue& rCell, cons
     assert(rCell.meType == CELLTYPE_VALUE);
 
     SetValueAttributes(rCell.mfValue, sValue);
-    SvXMLElementExport aElemC(rExport, XML_NAMESPACE_TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
+    SvXMLElementExport aElemC(rExport, XmlNamespace::TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
 }
 
 void ScChangeTrackingExportHelper::WriteStringCell(const ScCellValue& rCell)
 {
     assert(rCell.meType == CELLTYPE_STRING);
 
-    rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING);
-    SvXMLElementExport aElemC(rExport, XML_NAMESPACE_TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
+    rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_STRING);
+    SvXMLElementExport aElemC(rExport, XmlNamespace::TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
     if (!rCell.mpString->isEmpty())
     {
-        SvXMLElementExport aElemP(rExport, XML_NAMESPACE_TEXT, XML_P, true, false);
+        SvXMLElementExport aElemP(rExport, XmlNamespace::TEXT, XML_P, true, false);
         bool bPrevCharWasSpace(true);
         rExport.GetTextParagraphExport()->exportCharacterData(rCell.mpString->getString(), bPrevCharWasSpace);
     }
@@ -282,8 +282,8 @@ void ScChangeTrackingExportHelper::WriteEditCell(const ScCellValue& rCell)
     if (rCell.mpEditText)
         sString = ScEditUtil::GetString(*rCell.mpEditText, rExport.GetDocument());
 
-    rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING);
-    SvXMLElementExport aElemC(rExport, XML_NAMESPACE_TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
+    rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_STRING);
+    SvXMLElementExport aElemC(rExport, XmlNamespace::TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
     if (rCell.mpEditText && !sString.isEmpty())
     {
         if (!pEditTextObj)
@@ -305,9 +305,9 @@ void ScChangeTrackingExportHelper::WriteFormulaCell(const ScCellValue& rCell, co
     OUString sAddress;
     const ScDocument* pDoc = rExport.GetDocument();
     ScRangeStringConverter::GetStringFromAddress(sAddress, pFormulaCell->aPos, pDoc, ::formula::FormulaGrammar::CONV_OOO);
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CELL_ADDRESS, sAddress);
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_CELL_ADDRESS, sAddress);
     const formula::FormulaGrammar::Grammar eGrammar = pDoc->GetStorageGrammar();
-    sal_uInt16 nNamespacePrefix = (eGrammar == formula::FormulaGrammar::GRAM_ODFF ? XML_NAMESPACE_OF : XML_NAMESPACE_OOOC);
+    sal_uInt16 nNamespacePrefix = (eGrammar == formula::FormulaGrammar::GRAM_ODFF ? XmlNamespace::OF : XmlNamespace::OOOC);
     OUString sFormula;
     pFormulaCell->GetFormula(sFormula, eGrammar);
     ScMatrixMode nMatrixFlag(pFormulaCell->GetMatrixFlag());
@@ -318,35 +318,35 @@ void ScChangeTrackingExportHelper::WriteFormulaCell(const ScCellValue& rCell, co
             SCCOL nColumns;
             SCROW nRows;
             pFormulaCell->GetMatColsRows(nColumns, nRows);
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_MATRIX_COLUMNS_SPANNED, OUString::number(nColumns));
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_MATRIX_ROWS_SPANNED, OUString::number(nRows));
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_NUMBER_MATRIX_COLUMNS_SPANNED, OUString::number(nColumns));
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_NUMBER_MATRIX_ROWS_SPANNED, OUString::number(nRows));
         }
         else
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MATRIX_COVERED, XML_TRUE);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_MATRIX_COVERED, XML_TRUE);
         }
         OUString sMatrixFormula = sFormula.copy(1, sFormula.getLength() - 2);
         OUString sQValue = rExport.GetNamespaceMap().GetQNameByKey( nNamespacePrefix, sMatrixFormula, false );
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FORMULA, sQValue);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_FORMULA, sQValue);
     }
     else
     {
         OUString sQValue = rExport.GetNamespaceMap().GetQNameByKey( nNamespacePrefix, sFormula, false );
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FORMULA, sQValue);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_FORMULA, sQValue);
     }
     if (pFormulaCell->IsValue())
     {
         SetValueAttributes(pFormulaCell->GetValue(), sValue);
-        SvXMLElementExport aElemC(rExport, XML_NAMESPACE_TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
+        SvXMLElementExport aElemC(rExport, XmlNamespace::TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
     }
     else
     {
-        rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING);
+        rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_STRING);
         OUString sCellValue = pFormulaCell->GetString().getString();
-        SvXMLElementExport aElemC(rExport, XML_NAMESPACE_TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
+        SvXMLElementExport aElemC(rExport, XmlNamespace::TABLE, XML_CHANGE_TRACK_TABLE_CELL, true, true);
         if (!sCellValue.isEmpty())
         {
-            SvXMLElementExport aElemP(rExport, XML_NAMESPACE_TEXT, XML_P, true, false);
+            SvXMLElementExport aElemP(rExport, XmlNamespace::TEXT, XML_P, true, false);
             bool bPrevCharWasSpace(true);
             rExport.GetTextParagraphExport()->exportCharacterData(sCellValue, bPrevCharWasSpace);
         }
@@ -382,7 +382,7 @@ void ScChangeTrackingExportHelper::WriteCell(const ScCellValue& rCell, const OUS
 
 void ScChangeTrackingExportHelper::WriteContentChange(const ScChangeAction* pAction)
 {
-    SvXMLElementExport aElemChange(rExport, XML_NAMESPACE_TABLE, XML_CELL_CONTENT_CHANGE, true, true);
+    SvXMLElementExport aElemChange(rExport, XmlNamespace::TABLE, XML_CELL_CONTENT_CHANGE, true, true);
     const ScChangeAction* pConstAction = pAction;
     WriteBigRange(pConstAction->GetBigRange(), XML_CELL_ADDRESS);
     WriteChangeInfo(pAction);
@@ -390,8 +390,8 @@ void ScChangeTrackingExportHelper::WriteContentChange(const ScChangeAction* pAct
     {
         const ScChangeActionContent* pPrevAction = static_cast<const ScChangeActionContent*>(pAction)->GetPrevContent();
         if (pPrevAction)
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ID, GetChangeID(pPrevAction->GetActionNumber()));
-        SvXMLElementExport aElemPrev(rExport, XML_NAMESPACE_TABLE, XML_PREVIOUS, true, true);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_ID, GetChangeID(pPrevAction->GetActionNumber()));
+        SvXMLElementExport aElemPrev(rExport, XmlNamespace::TABLE, XML_PREVIOUS, true, true);
         OUString sValue;
         static_cast<const ScChangeActionContent*>(pAction)->GetOldString(sValue, rExport.GetDocument());
         WriteCell(static_cast<const ScChangeActionContent*>(pAction)->GetOldCell(), sValue);
@@ -417,21 +417,21 @@ void ScChangeTrackingExportHelper::AddInsertionAttributes(const ScChangeAction*
     {
         case SC_CAT_INSERT_COLS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TYPE, XML_COLUMN);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_TYPE, XML_COLUMN);
             nStartPosition = nStartColumn;
             nEndPosition = nEndColumn;
         }
         break;
         case SC_CAT_INSERT_ROWS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TYPE, XML_ROW);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_TYPE, XML_ROW);
             nStartPosition = nStartRow;
             nEndPosition = nEndRow;
         }
         break;
         case SC_CAT_INSERT_TABS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TYPE, XML_TABLE);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_TYPE, XML_TABLE);
             nStartPosition = nStartSheet;
             nEndPosition = nEndSheet;
         }
@@ -444,22 +444,22 @@ void ScChangeTrackingExportHelper::AddInsertionAttributes(const ScChangeAction*
     }
     nPosition = nStartPosition;
     nCount = nEndPosition - nStartPosition + 1;
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_POSITION, OUString::number(nPosition));
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_POSITION, OUString::number(nPosition));
     OSL_ENSURE(nCount > 0, "wrong insertion count");
     if (nCount > 1)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_COUNT, OUString::number(nCount));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_COUNT, OUString::number(nCount));
     }
     if (pConstAction->GetType() != SC_CAT_INSERT_TABS)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TABLE, OUString::number(nStartSheet));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_TABLE, OUString::number(nStartSheet));
     }
 }
 
 void ScChangeTrackingExportHelper::WriteInsertion(const ScChangeAction* pAction)
 {
     AddInsertionAttributes(pAction);
-    SvXMLElementExport aElemChange(rExport, XML_NAMESPACE_TABLE, XML_INSERTION, true, true);
+    SvXMLElementExport aElemChange(rExport, XmlNamespace::TABLE, XML_INSERTION, true, true);
     WriteChangeInfo(pAction);
     WriteDependings(pAction);
 }
@@ -480,19 +480,19 @@ void ScChangeTrackingExportHelper::AddDeletionAttributes(const ScChangeActionDel
     {
         case SC_CAT_DELETE_COLS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TYPE, XML_COLUMN);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_TYPE, XML_COLUMN);
             nPosition = nStartColumn;
         }
         break;
         case SC_CAT_DELETE_ROWS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TYPE, XML_ROW);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_TYPE, XML_ROW);
             nPosition = nStartRow;
         }
         break;
         case SC_CAT_DELETE_TABS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TYPE, XML_TABLE);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_TYPE, XML_TABLE);
             nPosition = nStartSheet;
         }
         break;
@@ -502,11 +502,11 @@ void ScChangeTrackingExportHelper::AddDeletionAttributes(const ScChangeActionDel
         }
         break;
     }
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_POSITION, OUString::number(nPosition));
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_POSITION, OUString::number(nPosition));
     if (pDelAction->GetType() == SC_CAT_DELETE_TABS)
         return;
 
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TABLE, OUString::number(nStartSheet));
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_TABLE, OUString::number(nStartSheet));
     if (!(pDelAction->IsMultiDelete() && !pDelAction->GetDx() && !pDelAction->GetDy()))
         return;
 
@@ -530,7 +530,7 @@ void ScChangeTrackingExportHelper::AddDeletionAttributes(const ScChangeActionDel
         }
     }
 
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MULTI_DELETION_SPANNED, OUString::number(nSlavesCount));
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_MULTI_DELETION_SPANNED, OUString::number(nSlavesCount));
 }
 
 void ScChangeTrackingExportHelper::WriteCutOffs(const ScChangeActionDel* pAction)
@@ -540,26 +540,26 @@ void ScChangeTrackingExportHelper::WriteCutOffs(const ScChangeActionDel* pAction
     if (!(pCutOffIns || pLinkMove))
         return;
 
-    SvXMLElementExport aCutOffsElem (rExport, XML_NAMESPACE_TABLE, XML_CUT_OFFS, true, true);
+    SvXMLElementExport aCutOffsElem (rExport, XmlNamespace::TABLE, XML_CUT_OFFS, true, true);
     if (pCutOffIns)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ID, GetChangeID(pCutOffIns->GetActionNumber()));
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_POSITION, OUString::number(pAction->GetCutOffCount()));
-        SvXMLElementExport aInsertCutOffElem (rExport, XML_NAMESPACE_TABLE, XML_INSERTION_CUT_OFF, true, true);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ID, GetChangeID(pCutOffIns->GetActionNumber()));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_POSITION, OUString::number(pAction->GetCutOffCount()));
+        SvXMLElementExport aInsertCutOffElem (rExport, XmlNamespace::TABLE, XML_INSERTION_CUT_OFF, true, true);
     }
     while (pLinkMove)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ID, GetChangeID(pLinkMove->GetAction()->GetActionNumber()));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ID, GetChangeID(pLinkMove->GetAction()->GetActionNumber()));
         if (pLinkMove->GetCutOffFrom() == pLinkMove->GetCutOffTo())
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_POSITION, OUString::number(pLinkMove->GetCutOffFrom()));
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_POSITION, OUString::number(pLinkMove->GetCutOffFrom()));
         }
         else
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_START_POSITION, OUString::number(pLinkMove->GetCutOffFrom()));
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_END_POSITION, OUString::number(pLinkMove->GetCutOffTo()));
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_START_POSITION, OUString::number(pLinkMove->GetCutOffFrom()));
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_END_POSITION, OUString::number(pLinkMove->GetCutOffTo()));
         }
-        SvXMLElementExport aMoveCutOffElem (rExport, XML_NAMESPACE_TABLE, XML_MOVEMENT_CUT_OFF, true, true);
+        SvXMLElementExport aMoveCutOffElem (rExport, XmlNamespace::TABLE, XML_MOVEMENT_CUT_OFF, true, true);
         pLinkMove = pLinkMove->GetNext();
     }
 }
@@ -568,7 +568,7 @@ void ScChangeTrackingExportHelper::WriteDeletion(ScChangeAction* pAction)
 {
     ScChangeActionDel* pDelAction = static_cast<ScChangeActionDel*> (pAction);
     AddDeletionAttributes(pDelAction);
-    SvXMLElementExport aElemChange(rExport, XML_NAMESPACE_TABLE, XML_DELETION, true, true);
+    SvXMLElementExport aElemChange(rExport, XmlNamespace::TABLE, XML_DELETION, true, true);
     WriteChangeInfo(pDelAction);
     WriteDependings(pDelAction);
     WriteCutOffs(pDelAction);
@@ -577,7 +577,7 @@ void ScChangeTrackingExportHelper::WriteDeletion(ScChangeAction* pAction)
 void ScChangeTrackingExportHelper::WriteMovement(const ScChangeAction* pAction)
 {
     const ScChangeActionMove* pMoveAction = static_cast<const ScChangeActionMove*> (pAction);
-    SvXMLElementExport aElemChange(rExport, XML_NAMESPACE_TABLE, XML_MOVEMENT, true, true);
+    SvXMLElementExport aElemChange(rExport, XmlNamespace::TABLE, XML_MOVEMENT, true, true);
     WriteBigRange(pMoveAction->GetFromRange(), XML_SOURCE_RANGE_ADDRESS);
     WriteBigRange(pMoveAction->GetBigRange(), XML_TARGET_RANGE_ADDRESS);
     WriteChangeInfo(pAction);
@@ -586,7 +586,7 @@ void ScChangeTrackingExportHelper::WriteMovement(const ScChangeAction* pAction)
 
 void ScChangeTrackingExportHelper::WriteRejection(const ScChangeAction* pAction)
 {
-    SvXMLElementExport aElemChange(rExport, XML_NAMESPACE_TABLE, XML_REJECTION, true, true);
+    SvXMLElementExport aElemChange(rExport, XmlNamespace::TABLE, XML_REJECTION, true, true);
     WriteChangeInfo(pAction);
     WriteDependings(pAction);
 }
@@ -629,10 +629,10 @@ void ScChangeTrackingExportHelper::WorkWithChangeAction(ScChangeAction* pAction)
         SAL_WARN("sc.filter", "WorkWithChangeAction: type is not writable");
         return;
     }
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ID, GetChangeID(pAction->GetActionNumber()));
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_ID, GetChangeID(pAction->GetActionNumber()));
     GetAcceptanceState(pAction);
     if (pAction->IsRejecting())
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_REJECTING_CHANGE_ID, GetChangeID(pAction->GetRejectAction()));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_REJECTING_CHANGE_ID, GetChangeID(pAction->GetRejectAction()));
     if (pAction->GetType() == SC_CAT_CONTENT)
         WriteContentChange(pAction);
     else if (pAction->IsInsertType())
@@ -680,7 +680,7 @@ void ScChangeTrackingExportHelper::CollectAndWriteChanges()
     if (!pChangeTrack)
         return;
 
-    SvXMLElementExport aCangeListElem(rExport, XML_NAMESPACE_TABLE, XML_TRACKED_CHANGES, true, true);
+    SvXMLElementExport aCangeListElem(rExport, XmlNamespace::TABLE, XML_TRACKED_CHANGES, true, true);
     {
         ScChangeAction* pAction = pChangeTrack->GetFirst();
         if (pAction)
diff --git a/sc/source/filter/xml/XMLColumnRowGroupExport.cxx b/sc/source/filter/xml/XMLColumnRowGroupExport.cxx
index 9cd8e98bc100..ba3171452e9f 100644
--- a/sc/source/filter/xml/XMLColumnRowGroupExport.cxx
+++ b/sc/source/filter/xml/XMLColumnRowGroupExport.cxx
@@ -47,7 +47,7 @@ bool ScMyColumnRowGroup::operator<(const ScMyColumnRowGroup& rGroup) const
 
 ScMyOpenCloseColumnRowGroup::ScMyOpenCloseColumnRowGroup(ScXMLExport& rTempExport, sal_uInt32 nToken)
     : rExport(rTempExport),
-    rName(rExport.GetNamespaceMap().GetQNameByKey(XML_NAMESPACE_TABLE, GetXMLToken(XMLTokenEnum(nToken)))),
+    rName(rExport.GetNamespaceMap().GetQNameByKey(XmlNamespace::TABLE, GetXMLToken(XMLTokenEnum(nToken)))),
     aTableStart(),
     aTableEnd()
 {
@@ -88,7 +88,7 @@ bool ScMyOpenCloseColumnRowGroup::IsGroupStart(const sal_Int32 nField)
 void ScMyOpenCloseColumnRowGroup::OpenGroup(const ScMyColumnRowGroup& rGroup)
 {
     if (!rGroup.bDisplay)
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, XML_FALSE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY, XML_FALSE);
     rExport.StartElement( rName, true);
 }
 
diff --git a/sc/source/filter/xml/XMLExportDDELinks.cxx b/sc/source/filter/xml/XMLExportDDELinks.cxx
index c5999a7e2294..4556fd13411c 100644
--- a/sc/source/filter/xml/XMLExportDDELinks.cxx
+++ b/sc/source/filter/xml/XMLExportDDELinks.cxx
@@ -51,23 +51,23 @@ void ScXMLExportDDELinks::WriteCell(const ScMatrixValue& aVal, sal_Int32 nRepeat
     {
         if (bString)
         {
-            rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING);
-            rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_STRING_VALUE, aVal.GetString().getString());
+            rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_STRING);
+            rExport.AddAttribute(XmlNamespace::OFFICE, XML_STRING_VALUE, aVal.GetString().getString());
         }
         else
         {
             OUStringBuffer aBuf;
-            rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT);
+            rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_FLOAT);
             ::sax::Converter::convertDouble(aBuf, aVal.fVal);
-            rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE, aBuf.makeStringAndClear());
+            rExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE, aBuf.makeStringAndClear());
         }
     }
 
     if (nRepeat > 1)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED, OUString::number(nRepeat));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED, OUString::number(nRepeat));
     }
-    SvXMLElementExport(rExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true);
+    SvXMLElementExport(rExport, XmlNamespace::TABLE, XML_TABLE_CELL, true, true);
 }
 
 void ScXMLExportDDELinks::WriteTable(const sal_Int32 nPos)
@@ -83,20 +83,20 @@ void ScXMLExportDDELinks::WriteTable(const sal_Int32 nPos)
     SCSIZE nCols, nRows;
     pMatrix->GetDimensions(nCols, nRows);
 
-    SvXMLElementExport aTableElem(rExport, XML_NAMESPACE_TABLE, XML_TABLE, true, true);
+    SvXMLElementExport aTableElem(rExport, XmlNamespace::TABLE, XML_TABLE, true, true);
     if (nCols > 1)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED, OUString::number(nCols));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED, OUString::number(nCols));
     }
     {
-        SvXMLElementExport aElemCol(rExport, XML_NAMESPACE_TABLE, XML_TABLE_COLUMN, true, true);
+        SvXMLElementExport aElemCol(rExport, XmlNamespace::TABLE, XML_TABLE_COLUMN, true, true);
     }
 
     for (SCSIZE nRow = 0; nRow < nRows; ++nRow)
     {
         sal_Int32 nRepeat = 0;
         ScMatrixValue aPrevVal;
-        SvXMLElementExport aElemRow(rExport, XML_NAMESPACE_TABLE, XML_TABLE_ROW, true, true);
+        SvXMLElementExport aElemRow(rExport, XmlNamespace::TABLE, XML_TABLE_ROW, true, true);
         for (SCSIZE nCol = 0; nCol < nCols; ++nCol, ++nRepeat)
         {
             ScMatrixValue aVal = pMatrix->Get(nCol, nRow);
@@ -127,18 +127,18 @@ void ScXMLExportDDELinks::WriteDDELinks(const uno::Reference<sheet::XSpreadsheet
     if (!nCount)
         return;
 
-    SvXMLElementExport aElemDDEs(rExport, XML_NAMESPACE_TABLE, XML_DDE_LINKS, true, true);
+    SvXMLElementExport aElemDDEs(rExport, XmlNamespace::TABLE, XML_DDE_LINKS, true, true);
     for (sal_Int32 nDDELink = 0; nDDELink < nCount; ++nDDELink)
     {
         uno::Reference<sheet::XDDELink> xDDELink(xIndex->getByIndex(nDDELink), uno::UNO_QUERY);
         if (xDDELink.is())
         {
-            SvXMLElementExport aElemDDE(rExport, XML_NAMESPACE_TABLE, XML_DDE_LINK, true, true);
+            SvXMLElementExport aElemDDE(rExport, XmlNamespace::TABLE, XML_DDE_LINK, true, true);
             {
-                rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_DDE_APPLICATION, xDDELink->getApplication());
-                rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_DDE_TOPIC, xDDELink->getTopic());
-                rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_DDE_ITEM, xDDELink->getItem());
-                rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_AUTOMATIC_UPDATE, XML_TRUE);
+                rExport.AddAttribute(XmlNamespace::OFFICE, XML_DDE_APPLICATION, xDDELink->getApplication());
+                rExport.AddAttribute(XmlNamespace::OFFICE, XML_DDE_TOPIC, xDDELink->getTopic());
+                rExport.AddAttribute(XmlNamespace::OFFICE, XML_DDE_ITEM, xDDELink->getItem());
+                rExport.AddAttribute(XmlNamespace::OFFICE, XML_AUTOMATIC_UPDATE, XML_TRUE);
                 sal_uInt8 nMode;
                 if (rExport.GetDocument() &&
                     rExport.GetDocument()->GetDdeLinkMode(nDDELink, nMode))
@@ -146,14 +146,14 @@ void ScXMLExportDDELinks::WriteDDELinks(const uno::Reference<sheet::XSpreadsheet
                     switch (nMode)
                     {
                         case SC_DDE_ENGLISH :
-                            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CONVERSION_MODE, XML_INTO_ENGLISH_NUMBER);
+                            rExport.AddAttribute(XmlNamespace::TABLE, XML_CONVERSION_MODE, XML_INTO_ENGLISH_NUMBER);
                         break;
                         case SC_DDE_TEXT :
-                            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CONVERSION_MODE, XML_KEEP_TEXT);
+                            rExport.AddAttribute(XmlNamespace::TABLE, XML_CONVERSION_MODE, XML_KEEP_TEXT);
                         break;
                     }
                 }
-                SvXMLElementExport(rExport, XML_NAMESPACE_OFFICE, XML_DDE_SOURCE, true, true);
+                SvXMLElementExport(rExport, XmlNamespace::OFFICE, XML_DDE_SOURCE, true, true);
             }
             WriteTable(nDDELink);
         }
diff --git a/sc/source/filter/xml/XMLExportDataPilot.cxx b/sc/source/filter/xml/XMLExportDataPilot.cxx
index 8b5e169bd7bf..16eb96158f49 100644
--- a/sc/source/filter/xml/XMLExportDataPilot.cxx
+++ b/sc/source/filter/xml/XMLExportDataPilot.cxx
@@ -110,35 +110,35 @@ OUString ScXMLExportDataPilot::getDPOperatorXML(
 void ScXMLExportDataPilot::WriteDPCondition(const ScQueryEntry& aQueryEntry, bool bIsCaseSensitive,
         utl::SearchParam::SearchType eSearchType)
 {
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FIELD_NUMBER, OUString::number(aQueryEntry.nField));
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_FIELD_NUMBER, OUString::number(aQueryEntry.nField));
     if (bIsCaseSensitive)
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CASE_SENSITIVE, XML_TRUE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_CASE_SENSITIVE, XML_TRUE);
     const ScQueryEntry::Item& rItem = aQueryEntry.GetQueryItem();
     OUString aQueryStr = rItem.maString.getString();
     if (rItem.meType == ScQueryEntry::ByString)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_VALUE, aQueryStr);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_VALUE, aQueryStr);
     }
     else
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATA_TYPE, XML_NUMBER);
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_VALUE, aQueryStr);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_DATA_TYPE, XML_NUMBER);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_VALUE, aQueryStr);
     }
 
     if (aQueryEntry.IsQueryByEmpty())
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_OPERATOR, GetXMLToken(XML_EMPTY));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_OPERATOR, GetXMLToken(XML_EMPTY));
     }
     else if (aQueryEntry.IsQueryByNonEmpty())
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_OPERATOR, GetXMLToken(XML_NOEMPTY));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_OPERATOR, GetXMLToken(XML_NOEMPTY));
     }
     else
         rExport.AddAttribute(
-            XML_NAMESPACE_TABLE, XML_OPERATOR,
+            XmlNamespace::TABLE, XML_OPERATOR,
             getDPOperatorXML(aQueryEntry.eOp, eSearchType));
 
-    SvXMLElementExport aElemC(rExport, XML_NAMESPACE_TABLE, XML_FILTER_CONDITION, true, true);
+    SvXMLElementExport aElemC(rExport, XmlNamespace::TABLE, XML_FILTER_CONDITION, true, true);
 }
 
 void ScXMLExportDataPilot::WriteDPFilter(const ScQueryParam& aQueryParam)
@@ -183,11 +183,11 @@ void ScXMLExportDataPilot::WriteDPFilter(const ScQueryParam& aQueryParam)
         OUString sConditionRange;
         ScRangeStringConverter::GetStringFromRange( sConditionRange, aConditionRange, pDoc, ::formula::FormulaGrammar::CONV_OOO );
         if (!sConditionRange.isEmpty())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CONDITION_SOURCE_RANGE_ADDRESS, sConditionRange);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_CONDITION_SOURCE_RANGE_ADDRESS, sConditionRange);
     }
     if (!aQueryParam.bDuplicate)
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_DUPLICATES, XML_FALSE);
-    SvXMLElementExport aElemDPF(rExport, XML_NAMESPACE_TABLE, XML_FILTER, true, true);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY_DUPLICATES, XML_FALSE);
+    SvXMLElementExport aElemDPF(rExport, XmlNamespace::TABLE, XML_FILTER, true, true);
     rExport.CheckAttrList();
     if (nQueryEntryCount  == 1)
     {
@@ -195,7 +195,7 @@ void ScXMLExportDataPilot::WriteDPFilter(const ScQueryParam& aQueryParam)
     }
     else if (bOr && !bAnd)
     {
-        SvXMLElementExport aElemOr(rExport, XML_NAMESPACE_TABLE, XML_FILTER_OR, true, true);
+        SvXMLElementExport aElemOr(rExport, XmlNamespace::TABLE, XML_FILTER_OR, true, true);
         for (j = 0; j < nQueryEntryCount; ++j)
         {
             WriteDPCondition(aQueryParam.GetEntry(j), aQueryParam.bCaseSens, aQueryParam.eSearchType);
@@ -203,7 +203,7 @@ void ScXMLExportDataPilot::WriteDPFilter(const ScQueryParam& aQueryParam)
     }
     else if (bAnd && !bOr)
     {
-        SvXMLElementExport aElemAnd(rExport, XML_NAMESPACE_TABLE, XML_FILTER_AND, true, true);
+        SvXMLElementExport aElemAnd(rExport, XmlNamespace::TABLE, XML_FILTER_AND, true, true);
         for (j = 0; j < nQueryEntryCount; ++j)
         {
             WriteDPCondition(aQueryParam.GetEntry(j), aQueryParam.bCaseSens, aQueryParam.eSearchType);
@@ -211,11 +211,11 @@ void ScXMLExportDataPilot::WriteDPFilter(const ScQueryParam& aQueryParam)
     }
     else
     {
-        SvXMLElementExport aElemC(rExport, XML_NAMESPACE_TABLE, XML_FILTER_OR, true, true);
+        SvXMLElementExport aElemC(rExport, XmlNamespace::TABLE, XML_FILTER_OR, true, true);
         ScQueryEntry aPrevFilterField(aQueryParam.GetEntry(0));
         ScQueryConnect aConnection = aQueryParam.GetEntry(1).eConnect;
         bool bOpenAndElement;
-        OUString aName(rExport.GetNamespaceMap().GetQNameByKey(XML_NAMESPACE_TABLE, GetXMLToken(XML_FILTER_AND)));
+        OUString aName(rExport.GetNamespaceMap().GetQNameByKey(XmlNamespace::TABLE, GetXMLToken(XML_FILTER_AND)));
         if (aConnection == SC_AND)
         {
             rExport.StartElement( aName, true );
@@ -304,15 +304,15 @@ void ScXMLExportDataPilot::WriteFieldReference(const ScDPSaveDimension* pDim)
                 break;
         }
         if (!sValueStr.isEmpty())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TYPE, sValueStr);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_TYPE, sValueStr);
 
         if (!pRef->ReferenceField.isEmpty())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FIELD_NAME, pRef->ReferenceField);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_FIELD_NAME, pRef->ReferenceField);
 
         if (pRef->ReferenceItemType == sheet::DataPilotFieldReferenceItemType::NAMED)
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MEMBER_TYPE, XML_NAMED);
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MEMBER_NAME, pRef->ReferenceItemName);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_MEMBER_TYPE, XML_NAMED);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_MEMBER_NAME, pRef->ReferenceItemName);
         }
         else
         {
@@ -327,9 +327,9 @@ void ScXMLExportDataPilot::WriteFieldReference(const ScDPSaveDimension* pDim)
                 break;
             }
             if (!sValueStr.isEmpty())
-                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MEMBER_TYPE, sValueStr);
+                rExport.AddAttribute(XmlNamespace::TABLE, XML_MEMBER_TYPE, sValueStr);
         }
-        SvXMLElementExport aElemDPFR(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_FIELD_REFERENCE, true, true);
+        SvXMLElementExport aElemDPFR(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_FIELD_REFERENCE, true, true);
     }
     rExport.CheckAttrList();
 }
@@ -341,9 +341,9 @@ void ScXMLExportDataPilot::WriteSortInfo(const ScDPSaveDimension* pDim)
         return;
 
     if (pSortInfo->IsAscending)
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ORDER, XML_ASCENDING);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ORDER, XML_ASCENDING);
     else
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ORDER, XML_DESCENDING);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ORDER, XML_DESCENDING);
 
     OUString sValueStr;
     switch (pSortInfo->Mode)
@@ -360,12 +360,12 @@ void ScXMLExportDataPilot::WriteSortInfo(const ScDPSaveDimension* pDim)
         case sheet::DataPilotFieldSortMode::DATA:
         sValueStr = GetXMLToken(XML_DATA);
         if (!pSortInfo->Field.isEmpty())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATA_FIELD, pSortInfo->Field);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_DATA_FIELD, pSortInfo->Field);
         break;
     }
     if (!sValueStr.isEmpty())
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SORT_MODE, sValueStr);
-    SvXMLElementExport aElemDPLSI(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_SORT_INFO, true, true);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_SORT_MODE, sValueStr);
+    SvXMLElementExport aElemDPLSI(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_SORT_INFO, true, true);
 }
 
 void ScXMLExportDataPilot::WriteAutoShowInfo(const ScDPSaveDimension* pDim)
@@ -375,9 +375,9 @@ void ScXMLExportDataPilot::WriteAutoShowInfo(const ScDPSaveDimension* pDim)
         return;
 
     if (pAutoInfo->IsEnabled)
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ENABLED, XML_TRUE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ENABLED, XML_TRUE);
     else
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ENABLED, XML_FALSE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ENABLED, XML_FALSE);
 
     OUString sValueStr;
     switch (pAutoInfo->ShowItemsMode)
@@ -390,13 +390,13 @@ void ScXMLExportDataPilot::WriteAutoShowInfo(const ScDPSaveDimension* pDim)
         break;
     }
     if (!sValueStr.isEmpty())
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_MEMBER_MODE, sValueStr);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY_MEMBER_MODE, sValueStr);
 
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MEMBER_COUNT, OUString::number(pAutoInfo->ItemCount));
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_MEMBER_COUNT, OUString::number(pAutoInfo->ItemCount));
 
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATA_FIELD, pAutoInfo->DataField);
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_DATA_FIELD, pAutoInfo->DataField);
 
-    SvXMLElementExport aElemDPLAI(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_DISPLAY_INFO, true, true);
+    SvXMLElementExport aElemDPLAI(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_DISPLAY_INFO, true, true);
 }
 
 void ScXMLExportDataPilot::WriteLayoutInfo(const ScDPSaveDimension* pDim)
@@ -406,9 +406,9 @@ void ScXMLExportDataPilot::WriteLayoutInfo(const ScDPSaveDimension* pDim)
         return;
 
     if (pLayoutInfo->AddEmptyLines)
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ADD_EMPTY_LINES, XML_TRUE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ADD_EMPTY_LINES, XML_TRUE);
     else
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ADD_EMPTY_LINES, XML_FALSE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ADD_EMPTY_LINES, XML_FALSE);
 
     OUString sValueStr;
     switch (pLayoutInfo->LayoutMode)
@@ -424,8 +424,8 @@ void ScXMLExportDataPilot::WriteLayoutInfo(const ScDPSaveDimension* pDim)
         break;
     }
     if (!sValueStr.isEmpty())
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_LAYOUT_MODE, sValueStr);
-    SvXMLElementExport aElemDPLLI(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_LAYOUT_INFO, true, true);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_LAYOUT_MODE, sValueStr);
+    SvXMLElementExport aElemDPLLI(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_LAYOUT_INFO, true, true);
 }
 
 void ScXMLExportDataPilot::WriteSubTotals(const ScDPSaveDimension* pDim)
@@ -439,17 +439,17 @@ void ScXMLExportDataPilot::WriteSubTotals(const ScDPSaveDimension* pDim)
     if (nSubTotalCount <= 0)
         return;
 
-    SvXMLElementExport aElemSTs(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_SUBTOTALS, true, true);
+    SvXMLElementExport aElemSTs(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_SUBTOTALS, true, true);
     rExport.CheckAttrList();
     for (sal_Int32 nSubTotal = 0; nSubTotal < nSubTotalCount; nSubTotal++)
     {
         OUString sFunction;
         sal_Int16 nFunc = static_cast<sal_Int16>(pDim->GetSubTotalFunc(nSubTotal));
         ScXMLConverter::GetStringFromFunction( sFunction, nFunc);
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FUNCTION, sFunction);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_FUNCTION, sFunction);
         if (pLayoutName && nFunc == sheet::GeneralFunction2::AUTO)
-            rExport.AddAttribute(XML_NAMESPACE_TABLE_EXT, XML_DISPLAY_NAME, *pLayoutName);
-        SvXMLElementExport aElemST(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_SUBTOTAL, true, true);
+            rExport.AddAttribute(XmlNamespace::TABLE_EXT, XML_DISPLAY_NAME, *pLayoutName);
+        SvXMLElementExport aElemST(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_SUBTOTAL, true, true);
     }
 }
 
@@ -459,26 +459,26 @@ void ScXMLExportDataPilot::WriteMembers(const ScDPSaveDimension* pDim)
     if (rMembers.empty())
         return;
 
-    SvXMLElementExport aElemDPMs(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_MEMBERS, true, true);
+    SvXMLElementExport aElemDPMs(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_MEMBERS, true, true);
     rExport.CheckAttrList();
     for (const auto& rpMember : rMembers)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rpMember->GetName());
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, rpMember->GetName());
 
         if (rExport.getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
         {
             // Export display names only for ODF 1.2 extended or later.
             const std::optional<OUString> & pLayoutName = rpMember->GetLayoutName();
             if (pLayoutName)
-                rExport.AddAttribute(XML_NAMESPACE_TABLE_EXT, XML_DISPLAY_NAME, *pLayoutName);
+                rExport.AddAttribute(XmlNamespace::TABLE_EXT, XML_DISPLAY_NAME, *pLayoutName);
         }
 
         OUStringBuffer sBuffer;
         ::sax::Converter::convertBool(sBuffer, rpMember->GetIsVisible());
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, sBuffer.makeStringAndClear());
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY, sBuffer.makeStringAndClear());
         ::sax::Converter::convertBool(sBuffer, rpMember->GetShowDetails());
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SHOW_DETAILS, sBuffer.makeStringAndClear());
-        SvXMLElementExport aElemDPM(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_MEMBER, true, true);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_SHOW_DETAILS, sBuffer.makeStringAndClear());
+        SvXMLElementExport aElemDPM(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_MEMBER, true, true);
         rExport.CheckAttrList();
     }
 }
@@ -490,15 +490,15 @@ void ScXMLExportDataPilot::WriteLevels(const ScDPSaveDimension* pDim)
     {
         OUStringBuffer sBuffer;
         ::sax::Converter::convertBool(sBuffer, pDim->GetShowEmpty());
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SHOW_EMPTY, sBuffer.makeStringAndClear());
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_SHOW_EMPTY, sBuffer.makeStringAndClear());
     }
     if (rExport.getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
     {
         OUStringBuffer sBuffer;
         ::sax::Converter::convertBool(sBuffer, pDim->GetRepeatItemLabels());
-        rExport.AddAttribute(XML_NAMESPACE_CALC_EXT, XML_REPEAT_ITEM_LABELS, sBuffer.makeStringAndClear());
+        rExport.AddAttribute(XmlNamespace::CALC_EXT, XML_REPEAT_ITEM_LABELS, sBuffer.makeStringAndClear());
     }
-    SvXMLElementExport aElemDPL(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_LEVEL, true, true);
+    SvXMLElementExport aElemDPL(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_LEVEL, true, true);
 
     WriteSubTotals(pDim);
     WriteMembers(pDim);
@@ -514,37 +514,37 @@ void ScXMLExportDataPilot::WriteDatePart(sal_Int32 nPart)
     {
     case css::sheet::DataPilotFieldGroupBy::SECONDS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GROUPED_BY, XML_SECONDS);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_GROUPED_BY, XML_SECONDS);
         }
         break;
     case css::sheet::DataPilotFieldGroupBy::MINUTES :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GROUPED_BY, XML_MINUTES);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_GROUPED_BY, XML_MINUTES);
         }
         break;
     case css::sheet::DataPilotFieldGroupBy::HOURS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GROUPED_BY, XML_HOURS);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_GROUPED_BY, XML_HOURS);
         }
         break;
     case css::sheet::DataPilotFieldGroupBy::DAYS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GROUPED_BY, XML_DAYS);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_GROUPED_BY, XML_DAYS);
         }
         break;
     case css::sheet::DataPilotFieldGroupBy::MONTHS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GROUPED_BY, XML_MONTHS);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_GROUPED_BY, XML_MONTHS);
         }
         break;
     case css::sheet::DataPilotFieldGroupBy::QUARTERS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GROUPED_BY, XML_QUARTERS);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_GROUPED_BY, XML_QUARTERS);
         }
         break;
     case css::sheet::DataPilotFieldGroupBy::YEARS :
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GROUPED_BY, XML_YEARS);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_GROUPED_BY, XML_YEARS);
         }
         break;
     }
@@ -556,47 +556,47 @@ void ScXMLExportDataPilot::WriteNumGroupInfo(const ScDPNumGroupInfo& rGroupInfo)
     if (rGroupInfo.mbDateValues)
     {
         if (rGroupInfo.mbAutoStart)
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATE_START, XML_AUTO);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_DATE_START, XML_AUTO);
         else
         {
             OUStringBuffer sDate;
             rExport.GetMM100UnitConverter().convertDateTime(sDate, rGroupInfo.mfStart);
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATE_START, sDate.makeStringAndClear());
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_DATE_START, sDate.makeStringAndClear());
         }
         if (rGroupInfo.mbAutoEnd)
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATE_END, XML_AUTO);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_DATE_END, XML_AUTO);
         else
         {
             OUStringBuffer sDate;
             rExport.GetMM100UnitConverter().convertDateTime(sDate, rGroupInfo.mfEnd);
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATE_END, sDate.makeStringAndClear());
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_DATE_END, sDate.makeStringAndClear());
         }
     }
     else
     {
         if (rGroupInfo.mbAutoStart)
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_START, XML_AUTO);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_START, XML_AUTO);
         else
         {
             OUString sValue( ::rtl::math::doubleToUString( rGroupInfo.mfStart,
                         rtl_math_StringFormat_Automatic,
                         rtl_math_DecimalPlaces_Max, '.', true));
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_START, sValue);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_START, sValue);
         }
         if (rGroupInfo.mbAutoEnd)
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_END, XML_AUTO);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_END, XML_AUTO);
         else
         {
             OUString sValue( ::rtl::math::doubleToUString( rGroupInfo.mfEnd,
                         rtl_math_StringFormat_Automatic,
                         rtl_math_DecimalPlaces_Max, '.', true));
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_END, sValue);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_END, sValue);
         }
     }
     OUString sValue( ::rtl::math::doubleToUString( rGroupInfo.mfStep,
                 rtl_math_StringFormat_Automatic,
                 rtl_math_DecimalPlaces_Max, '.', true));
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_STEP, sValue);
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_STEP, sValue);
 }
 
 void ScXMLExportDataPilot::WriteGroupDimAttributes(const ScDPSaveGroupDimension* pGroupDim)
@@ -604,7 +604,7 @@ void ScXMLExportDataPilot::WriteGroupDimAttributes(const ScDPSaveGroupDimension*
     if (pGroupDim)
     {
         OUString aSrcFieldName = ScDPUtil::getSourceDimensionName(pGroupDim->GetSourceDimName());
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SOURCE_FIELD_NAME, aSrcFieldName);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_SOURCE_FIELD_NAME, aSrcFieldName);
         if (pGroupDim->GetDatePart())
         {
             WriteDatePart(pGroupDim->GetDatePart());
@@ -645,7 +645,7 @@ void ScXMLExportDataPilot::WriteGroupDimElements(const ScDPSaveDimension* pDim,
     if (!(pGroupDim || pNumGroupDim))
         return;
 
-    SvXMLElementExport aElemDPGs(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_GROUPS, true, true);
+    SvXMLElementExport aElemDPGs(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_GROUPS, true, true);
     if (!pGroupDim)
         return;
 
@@ -656,16 +656,16 @@ void ScXMLExportDataPilot::WriteGroupDimElements(const ScDPSaveDimension* pDim,
     for (sal_Int32 i = 0; i < nCount; ++i)
     {
         const ScDPSaveGroupItem& rGroup = pGroupDim->GetGroupByIndex( i );
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rGroup.GetGroupName());
-        SvXMLElementExport aElemDPG(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_GROUP, true, true);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, rGroup.GetGroupName());
+        SvXMLElementExport aElemDPG(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_GROUP, true, true);
         sal_Int32 nElemCount = rGroup.GetElementCount();
         for(sal_Int32 j = 0; j < nElemCount; ++j)
         {
             const OUString* pElem = rGroup.GetElementByIndex(j);
             if (pElem)
             {
-                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, *pElem);
-                SvXMLElementExport aElemDPM(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_GROUP_MEMBER, true, true);
+                rExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, *pElem);
+                SvXMLElementExport aElemDPM(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_GROUP_MEMBER, true, true);
             }
         }
     }
@@ -674,40 +674,40 @@ void ScXMLExportDataPilot::WriteGroupDimElements(const ScDPSaveDimension* pDim,
 void ScXMLExportDataPilot::WriteDimension(const ScDPSaveDimension* pDim, const ScDPDimensionSaveData* pDimData)
 {
     OUString aSrcDimName = ScDPUtil::getSourceDimensionName(pDim->GetName());
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SOURCE_FIELD_NAME, aSrcDimName);
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_SOURCE_FIELD_NAME, aSrcDimName);
     if (rExport.getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
     {
         // Export display names only for ODF 1.2 extended or later.
         const std::optional<OUString> & pLayoutName = pDim->GetLayoutName();
         if (pLayoutName)
-            rExport.AddAttribute(XML_NAMESPACE_TABLE_EXT, XML_DISPLAY_NAME, *pLayoutName);
+            rExport.AddAttribute(XmlNamespace::TABLE_EXT, XML_DISPLAY_NAME, *pLayoutName);
     }
 
     if (pDim->IsDataLayout())
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_IS_DATA_LAYOUT_FIELD, XML_TRUE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_IS_DATA_LAYOUT_FIELD, XML_TRUE);
     OUString sValueStr;
     sheet::DataPilotFieldOrientation eOrientation = pDim->GetOrientation();
     ScXMLConverter::GetStringFromOrientation( sValueStr,
          eOrientation);
     if( !sValueStr.isEmpty() )
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ORIENTATION, sValueStr );
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_ORIENTATION, sValueStr );
     if (pDim->GetUsedHierarchy() != 1)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_USED_HIERARCHY, OUString::number(pDim->GetUsedHierarchy()));
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_USED_HIERARCHY, OUString::number(pDim->GetUsedHierarchy()));
     }
     ScXMLConverter::GetStringFromFunction( sValueStr, static_cast<sal_Int16>(pDim->GetFunction()) );
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FUNCTION, sValueStr);
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_FUNCTION, sValueStr);
 
     if (eOrientation == sheet::DataPilotFieldOrientation_PAGE)
     {
         if (rExport.getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
         {
-            rExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_IGNORE_SELECTED_PAGE, "true");
+            rExport.AddAttribute(XmlNamespace::LO_EXT, XML_IGNORE_SELECTED_PAGE, "true");
         }
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SELECTED_PAGE, pDim->GetCurrentPage());
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_SELECTED_PAGE, pDim->GetCurrentPage());
     }
 
-    SvXMLElementExport aElemDPF(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_FIELD, true, true);
+    SvXMLElementExport aElemDPF(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_FIELD, true, true);
     WriteLevels(pDim);
     WriteFieldReference(pDim);
     if( pDim->GetOrientation() != sheet::DataPilotFieldOrientation_DATA )
@@ -726,12 +726,12 @@ void ScXMLExportDataPilot::WriteDimensions(const ScDPSaveData* pDPSave)
 
 void ScXMLExportDataPilot::WriteGrandTotal(::xmloff::token::XMLTokenEnum eOrient, bool bVisible, const std::optional<OUString> & pGrandTotal)
 {
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, bVisible ? XML_TRUE : XML_FALSE);
-    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ORIENTATION, eOrient);
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY, bVisible ? XML_TRUE : XML_FALSE);
+    rExport.AddAttribute(XmlNamespace::TABLE, XML_ORIENTATION, eOrient);
     if (pGrandTotal)
-        rExport.AddAttribute(XML_NAMESPACE_TABLE_EXT, XML_DISPLAY_NAME, *pGrandTotal);
+        rExport.AddAttribute(XmlNamespace::TABLE_EXT, XML_DISPLAY_NAME, *pGrandTotal);
 
-    SvXMLElementExport aElemGrandTotal(rExport, XML_NAMESPACE_TABLE_EXT, XML_DATA_PILOT_GRAND_TOTAL, true, true);
+    SvXMLElementExport aElemGrandTotal(rExport, XmlNamespace::TABLE_EXT, XML_DATA_PILOT_GRAND_TOTAL, true, true);
 }
 
 void ScXMLExportDataPilot::WriteDataPilots()
@@ -748,7 +748,7 @@ void ScXMLExportDataPilot::WriteDataPilots()
     if (!nDPCount)
         return;
 
-    SvXMLElementExport aElemDPs(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_TABLES, true, true);
+    SvXMLElementExport aElemDPs(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_TABLES, true, true);
     rExport.CheckAttrList();
     for (size_t i = 0; i < nDPCount; ++i)
     {
@@ -784,31 +784,31 @@ void ScXMLExportDataPilot::WriteDataPilots()
         OUString sApplicationData((*pDPs)[i].GetTag());
         bool bRowGrand = pDPSave->GetRowGrand();
         bool bColumnGrand = pDPSave->GetColumnGrand();
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, sName);
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_APPLICATION_DATA, sApplicationData);
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TARGET_RANGE_ADDRESS, sTargetRangeAddress);
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_BUTTONS, sOUButtonList);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, sName);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_APPLICATION_DATA, sApplicationData);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_TARGET_RANGE_ADDRESS, sTargetRangeAddress);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_BUTTONS, sOUButtonList);
         if (!(bRowGrand && bColumnGrand))
         {
             if (bRowGrand)
-                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GRAND_TOTAL, XML_ROW);
+                rExport.AddAttribute(XmlNamespace::TABLE, XML_GRAND_TOTAL, XML_ROW);
             else if (bColumnGrand)
-                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GRAND_TOTAL, XML_COLUMN);
+                rExport.AddAttribute(XmlNamespace::TABLE, XML_GRAND_TOTAL, XML_COLUMN);
             else
-                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GRAND_TOTAL, XML_NONE);
+                rExport.AddAttribute(XmlNamespace::TABLE, XML_GRAND_TOTAL, XML_NONE);
         }
         if (pDPSave->GetIgnoreEmptyRows())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_IGNORE_EMPTY_ROWS, XML_TRUE);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_IGNORE_EMPTY_ROWS, XML_TRUE);
         if (pDPSave->GetRepeatIfEmpty())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_IDENTIFY_CATEGORIES, XML_TRUE);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_IDENTIFY_CATEGORIES, XML_TRUE);
         if (!pDPSave->GetFilterButton())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SHOW_FILTER_BUTTON, XML_FALSE);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_SHOW_FILTER_BUTTON, XML_FALSE);
         if (!pDPSave->GetDrillDown())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DRILL_DOWN_ON_DOUBLE_CLICK, XML_FALSE);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_DRILL_DOWN_ON_DOUBLE_CLICK, XML_FALSE);
         if ((*pDPs)[i].GetHeaderLayout())
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_HEADER_GRID_LAYOUT, XML_TRUE);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_HEADER_GRID_LAYOUT, XML_TRUE);
 
-        SvXMLElementExport aElemDP(rExport, XML_NAMESPACE_TABLE, XML_DATA_PILOT_TABLE, true, true);
+        SvXMLElementExport aElemDP(rExport, XmlNamespace::TABLE, XML_DATA_PILOT_TABLE, true, true);
 
         // grand total elements.
 
@@ -839,7 +839,7 @@ void ScXMLExportDataPilot::WriteDataPilots()
                     // FIXME this was wrongly exported to TABLE namespace since 2011
                     // so continue doing that in ODF 1.2 extended, for now
                     rExport.AddAttribute(
-                        XML_NAMESPACE_TABLE, XML_NAME, pSheetSource->GetRangeName());
+                        XmlNamespace::TABLE, XML_NAME, pSheetSource->GetRangeName());
                 }
             }
 
@@ -848,8 +848,8 @@ void ScXMLExportDataPilot::WriteDataPilots()
                 sCellRangeAddress, pSheetSource->GetSourceRange(), pDoc,
                 ::formula::FormulaGrammar::CONV_OOO);
 
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CELL_RANGE_ADDRESS, sCellRangeAddress);
-            SvXMLElementExport aElemSCR(rExport, XML_NAMESPACE_TABLE, XML_SOURCE_CELL_RANGE, true, true);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_CELL_RANGE_ADDRESS, sCellRangeAddress);
+            SvXMLElementExport aElemSCR(rExport, XmlNamespace::TABLE, XML_SOURCE_CELL_RANGE, true, true);
             rExport.CheckAttrList();
             WriteDPFilter(pSheetSource->GetQueryParam());
         }
@@ -861,27 +861,27 @@ void ScXMLExportDataPilot::WriteDataPilots()
                 case sheet::DataImportMode_NONE : break;
                 case sheet::DataImportMode_QUERY :
                 {
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATABASE_NAME, pImpSource->aDBName);
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_QUERY_NAME, pImpSource->aObject);
-                    SvXMLElementExport aElemID(rExport, XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_QUERY, true, true);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_DATABASE_NAME, pImpSource->aDBName);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_QUERY_NAME, pImpSource->aObject);
+                    SvXMLElementExport aElemID(rExport, XmlNamespace::TABLE, XML_DATABASE_SOURCE_QUERY, true, true);
                     rExport.CheckAttrList();
                 }
                 break;
                 case sheet::DataImportMode_TABLE :
                 {
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATABASE_NAME, pImpSource->aDBName);
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATABASE_TABLE_NAME, pImpSource->aObject);
-                    SvXMLElementExport aElemID(rExport, XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_TABLE, true, true);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_DATABASE_NAME, pImpSource->aDBName);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_DATABASE_TABLE_NAME, pImpSource->aObject);
+                    SvXMLElementExport aElemID(rExport, XmlNamespace::TABLE, XML_DATABASE_SOURCE_TABLE, true, true);
                     rExport.CheckAttrList();
                 }
                 break;
                 case sheet::DataImportMode_SQL :
                 {
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATABASE_NAME, pImpSource->aDBName);
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SQL_STATEMENT, pImpSource->aObject);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_DATABASE_NAME, pImpSource->aDBName);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_SQL_STATEMENT, pImpSource->aObject);
                     if (!pImpSource->bNative)
-                        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_PARSE_SQL_STATEMENT, XML_TRUE);
-                    SvXMLElementExport aElemID(rExport, XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_SQL, true, true);
+                        rExport.AddAttribute(XmlNamespace::TABLE, XML_PARSE_SQL_STATEMENT, XML_TRUE);
+                    SvXMLElementExport aElemID(rExport, XmlNamespace::TABLE, XML_DATABASE_SOURCE_SQL, true, true);
                     rExport.CheckAttrList();
                 }
                 break;
@@ -891,13 +891,13 @@ void ScXMLExportDataPilot::WriteDataPilots()
         else if ((*pDPs)[i].IsServiceData())
         {
             const ScDPServiceDesc* pServSource = (*pDPs)[i].GetDPServiceDesc();
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, pServSource->aServiceName);
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SOURCE_NAME, pServSource->aParSource);
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_OBJECT_NAME, pServSource->aParName);
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_USER_NAME, pServSource->aParUser);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, pServSource->aServiceName);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_SOURCE_NAME, pServSource->aParSource);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_OBJECT_NAME, pServSource->aParName);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_USER_NAME, pServSource->aParUser);
             // #i111754# leave out password attribute as long as DataPilotSource doesn't specify the content
-            // rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_PASSWORD, OUString(pServSource->aParPass));
-            SvXMLElementExport aElemSD(rExport, XML_NAMESPACE_TABLE, XML_SOURCE_SERVICE, true, true);
+            // rExport.AddAttribute(XmlNamespace::TABLE, XML_PASSWORD, OUString(pServSource->aParPass));
+            SvXMLElementExport aElemSD(rExport, XmlNamespace::TABLE, XML_SOURCE_SERVICE, true, true);
             rExport.CheckAttrList();
         }
         WriteDimensions(pDPSave);
diff --git a/sc/source/filter/xml/XMLExportDatabaseRanges.cxx b/sc/source/filter/xml/XMLExportDatabaseRanges.cxx
index 8f5861c0e52f..713f9dcf9275 100644
--- a/sc/source/filter/xml/XMLExportDatabaseRanges.cxx
+++ b/sc/source/filter/xml/XMLExportDatabaseRanges.cxx
@@ -72,24 +72,24 @@ void writeSort(ScXMLExport& mrExport, const ScSortParam& aParam, const ScRange&
     ScAddress aOutPos(aParam.nDestCol, aParam.nDestRow, aParam.nDestTab);
 
     if (!aParam.bIncludePattern)
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_BIND_STYLES_TO_CONTENT, XML_FALSE);
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_BIND_STYLES_TO_CONTENT, XML_FALSE);
 
     if (!aParam.bInplace)
     {
         OUString aStr;
         ScRangeStringConverter::GetStringFromAddress(
             aStr, aOutPos, mpDoc, ::formula::FormulaGrammar::CONV_OOO);
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TARGET_RANGE_ADDRESS, aStr);
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_TARGET_RANGE_ADDRESS, aStr);
     }
 
     if (aParam.bCaseSens)
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CASE_SENSITIVE, XML_TRUE);
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_CASE_SENSITIVE, XML_TRUE);
 
-    mrExport.AddLanguageTagAttributes( XML_NAMESPACE_TABLE, XML_NAMESPACE_TABLE, aParam.aCollatorLocale, false);
+    mrExport.AddLanguageTagAttributes( XmlNamespace::TABLE, XmlNamespace::TABLE, aParam.aCollatorLocale, false);
     if (!aParam.aCollatorAlgorithm.isEmpty())
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ALGORITHM, aParam.aCollatorAlgorithm);
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_ALGORITHM, aParam.aCollatorAlgorithm);
 
-    SvXMLElementExport aElemS(mrExport, XML_NAMESPACE_TABLE, XML_SORT, true, true);
+    SvXMLElementExport aElemS(mrExport, XmlNamespace::TABLE, XML_SORT, true, true);
 
     SCCOLROW nFieldStart = aParam.bByRow ? aRange.aStart.Col() : aRange.aStart.Row();
 
@@ -97,24 +97,24 @@ void writeSort(ScXMLExport& mrExport, const ScSortParam& aParam, const ScRange&
     {
             // Convert field value from absolute to relative.
         SCCOLROW nField = aParam.maKeyState[i].nField - nFieldStart;
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FIELD_NUMBER, OUString::number(nField));
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_FIELD_NUMBER, OUString::number(nField));
 
         if (!aParam.maKeyState[i].bAscending)
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ORDER, XML_DESCENDING);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_ORDER, XML_DESCENDING);
 
         if (aParam.bUserDef)
         {
             OUString aBuf = SC_USERLIST + OUString::number(static_cast<sal_Int32>(aParam.nUserIndex));
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATA_TYPE, aBuf);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_DATA_TYPE, aBuf);
         }
         else
         {
             // Right now we only support automatic field type.  In the
             // future we may support numeric or alphanumeric field type.
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATA_TYPE, XML_AUTOMATIC);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_DATA_TYPE, XML_AUTOMATIC);
         }
 
-        SvXMLElementExport aElemSb(mrExport, XML_NAMESPACE_TABLE, XML_SORT_BY, true, true);
+        SvXMLElementExport aElemSb(mrExport, XmlNamespace::TABLE, XML_SORT_BY, true, true);
     }
 }
 
@@ -226,7 +226,7 @@ public:
 private:
     void write(const OUString& rName, const ScDBData& rData)
     {
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rName);
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, rName);
 
         // range
         ScRange aRange;
@@ -234,29 +234,29 @@ private:
         OUString aRangeStr;
         ScRangeStringConverter::GetStringFromRange(
             aRangeStr, aRange, mpDoc, ::formula::FormulaGrammar::CONV_OOO);
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TARGET_RANGE_ADDRESS, aRangeStr);
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_TARGET_RANGE_ADDRESS, aRangeStr);
 
         // various boolean flags.
         if (rData.HasImportSelection())
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_IS_SELECTION, XML_TRUE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_IS_SELECTION, XML_TRUE);
         if (rData.HasAutoFilter())
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_FILTER_BUTTONS, XML_TRUE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY_FILTER_BUTTONS, XML_TRUE);
         if (rData.IsKeepFmt())
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ON_UPDATE_KEEP_STYLES, XML_TRUE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_ON_UPDATE_KEEP_STYLES, XML_TRUE);
         if (rData.IsDoSize())
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ON_UPDATE_KEEP_SIZE, XML_FALSE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_ON_UPDATE_KEEP_SIZE, XML_FALSE);
         if (rData.IsStripData())
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_HAS_PERSISTENT_DATA, XML_FALSE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_HAS_PERSISTENT_DATA, XML_FALSE);
 
         ScQueryParam aQueryParam;
         rData.GetQueryParam(aQueryParam);
         if (!aQueryParam.bHasHeader)
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CONTAINS_HEADER, XML_FALSE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_CONTAINS_HEADER, XML_FALSE);
 
         ScSortParam aSortParam;
         rData.GetSortParam(aSortParam);
         if (!aSortParam.bByRow)
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ORIENTATION, XML_COLUMN);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_ORIENTATION, XML_COLUMN);
 
         sal_Int32 nRefresh = rData.GetRefreshDelay();
         if (nRefresh)
@@ -264,10 +264,10 @@ private:
             OUStringBuffer aBuf;
             ::sax::Converter::convertDuration(aBuf,
                 static_cast<double>(nRefresh) / 86400.0);
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_REFRESH_DELAY, aBuf.makeStringAndClear());
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_REFRESH_DELAY, aBuf.makeStringAndClear());
         }
 
-        SvXMLElementExport aElemDR(mrExport, XML_NAMESPACE_TABLE, XML_DATABASE_RANGE, true, true);
+        SvXMLElementExport aElemDR(mrExport, XmlNamespace::TABLE, XML_DATABASE_RANGE, true, true);
 
         ScSortParam aParam;
         rData.GetSortParam(aParam);
@@ -314,41 +314,41 @@ private:
             case sheet::DataImportMode_QUERY :
             {
                 if (!sDatabaseName.isEmpty())
-                    mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATABASE_NAME, sDatabaseName);
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_QUERY_NAME, aParam.aStatement);
-                SvXMLElementExport aElemID(mrExport, XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_QUERY, true, true);
+                    mrExport.AddAttribute(XmlNamespace::TABLE, XML_DATABASE_NAME, sDatabaseName);
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_QUERY_NAME, aParam.aStatement);
+                SvXMLElementExport aElemID(mrExport, XmlNamespace::TABLE, XML_DATABASE_SOURCE_QUERY, true, true);
                 if (!sConRes.isEmpty())
                 {
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sConRes );
-                    SvXMLElementExport aElemCR(mrExport, XML_NAMESPACE_FORM, XML_CONNECTION_RESOURCE, true, true);
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, sConRes );
+                    SvXMLElementExport aElemCR(mrExport, XmlNamespace::FORM, XML_CONNECTION_RESOURCE, true, true);
                 }
             }
             break;
             case sheet::DataImportMode_TABLE :
             {
                 if (!sDatabaseName.isEmpty())
-                    mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATABASE_NAME, sDatabaseName);
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATABASE_TABLE_NAME, aParam.aStatement);
-                SvXMLElementExport aElemID(mrExport, XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_TABLE, true, true);
+                    mrExport.AddAttribute(XmlNamespace::TABLE, XML_DATABASE_NAME, sDatabaseName);
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_DATABASE_TABLE_NAME, aParam.aStatement);
+                SvXMLElementExport aElemID(mrExport, XmlNamespace::TABLE, XML_DATABASE_SOURCE_TABLE, true, true);
                 if (!sConRes.isEmpty())
                 {
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sConRes );
-                    SvXMLElementExport aElemCR(mrExport, XML_NAMESPACE_FORM, XML_CONNECTION_RESOURCE, true, true);
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, sConRes );
+                    SvXMLElementExport aElemCR(mrExport, XmlNamespace::FORM, XML_CONNECTION_RESOURCE, true, true);
                 }
             }
             break;
             case sheet::DataImportMode_SQL :
             {
                 if (!sDatabaseName.isEmpty())
-                    mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATABASE_NAME, sDatabaseName);
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_SQL_STATEMENT, aParam.aStatement);
+                    mrExport.AddAttribute(XmlNamespace::TABLE, XML_DATABASE_NAME, sDatabaseName);
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_SQL_STATEMENT, aParam.aStatement);
                 if (!aParam.bNative)
-                    mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_PARSE_SQL_STATEMENT, XML_TRUE);
-                SvXMLElementExport aElemID(mrExport, XML_NAMESPACE_TABLE, XML_DATABASE_SOURCE_SQL, true, true);
+                    mrExport.AddAttribute(XmlNamespace::TABLE, XML_PARSE_SQL_STATEMENT, XML_TRUE);
+                SvXMLElementExport aElemID(mrExport, XmlNamespace::TABLE, XML_DATABASE_SOURCE_SQL, true, true);
                 if (!sConRes.isEmpty())
                 {
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sConRes );
-                    SvXMLElementExport aElemCR(mrExport, XML_NAMESPACE_FORM, XML_CONNECTION_RESOURCE, true, true);
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, sConRes );
+                    SvXMLElementExport aElemCR(mrExport, XmlNamespace::FORM, XML_CONNECTION_RESOURCE, true, true);
                 }
             }
             break;
@@ -421,8 +421,8 @@ private:
         explicit WriteSetItem(ScXMLExport& r) : mrExport(r) {}
         void operator() (const ScQueryEntry::Item& rItem) const
         {
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_VALUE, rItem.maString.getString());
-            SvXMLElementExport aElem(mrExport, XML_NAMESPACE_TABLE, XML_FILTER_SET_ITEM, true, true);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_VALUE, rItem.maString.getString());
+            SvXMLElementExport aElem(mrExport, XmlNamespace::TABLE, XML_FILTER_SET_ITEM, true, true);
         }
     };
 
@@ -436,26 +436,26 @@ private:
             return;
         }
 
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FIELD_NUMBER, OUString::number(rEntry.nField - nFieldStart));
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_FIELD_NUMBER, OUString::number(rEntry.nField - nFieldStart));
         if (bCaseSens)
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CASE_SENSITIVE, XML_TRUE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_CASE_SENSITIVE, XML_TRUE);
 
         if (rItems.size() == 1)
         {
             // Single item condition.
             const ScQueryEntry::Item& rItem = rItems.front();
             if (rItem.meType == ScQueryEntry::ByString)
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_VALUE, rItem.maString.getString());
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_VALUE, rItem.maString.getString());
             else
             {
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATA_TYPE, XML_NUMBER);
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_DATA_TYPE, XML_NUMBER);
                 OUStringBuffer aBuf;
                 ::sax::Converter::convertDouble(aBuf, rItem.mfVal);
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_VALUE, aBuf.makeStringAndClear());
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_VALUE, aBuf.makeStringAndClear());
             }
 
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_OPERATOR, getOperatorXML(rEntry, eSearchType));
-            SvXMLElementExport aElemC(mrExport, XML_NAMESPACE_TABLE, XML_FILTER_CONDITION, true, true);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_OPERATOR, getOperatorXML(rEntry, eSearchType));
+            SvXMLElementExport aElemC(mrExport, XmlNamespace::TABLE, XML_FILTER_CONDITION, true, true);
         }
         else
         {
@@ -464,9 +464,9 @@ private:
 
             // Store the 1st value for backward compatibility.
             const ScQueryEntry::Item& rItem = rItems.front();
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_VALUE, rItem.maString.getString());
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_OPERATOR, OUString("="));
-            SvXMLElementExport aElemC(mrExport, XML_NAMESPACE_TABLE, XML_FILTER_CONDITION, true, true);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_VALUE, rItem.maString.getString());
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_OPERATOR, OUString("="));
+            SvXMLElementExport aElemC(mrExport, XmlNamespace::TABLE, XML_FILTER_CONDITION, true, true);
 
             std::for_each(rItems.begin(), rItems.end(), WriteSetItem(mrExport));
         }
@@ -492,7 +492,7 @@ private:
             OUString aAddrStr;
             ScRangeStringConverter::GetStringFromAddress(
                 aAddrStr, ScAddress(aParam.nDestCol, aParam.nDestRow, aParam.nDestTab), mpDoc, ::formula::FormulaGrammar::CONV_OOO);
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TARGET_RANGE_ADDRESS, aAddrStr);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_TARGET_RANGE_ADDRESS, aAddrStr);
         }
 
         ScRange aAdvSource;
@@ -502,13 +502,13 @@ private:
             ScRangeStringConverter::GetStringFromRange(
                 aAddrStr, aAdvSource, mpDoc, ::formula::FormulaGrammar::CONV_OOO);
             if (!aAddrStr.isEmpty())
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CONDITION_SOURCE_RANGE_ADDRESS, aAddrStr);
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_CONDITION_SOURCE_RANGE_ADDRESS, aAddrStr);
         }
 
         if (!aParam.bDuplicate)
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_DUPLICATES, XML_FALSE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY_DUPLICATES, XML_FALSE);
 
-        SvXMLElementExport aElemF(mrExport, XML_NAMESPACE_TABLE, XML_FILTER, true, true);
+        SvXMLElementExport aElemF(mrExport, XmlNamespace::TABLE, XML_FILTER, true, true);
 
         bool bAnd = false;
         bool bOr = false;
@@ -529,13 +529,13 @@ private:
 
         if (bOr && !bAnd)
         {
-            SvXMLElementExport aElemOr(mrExport, XML_NAMESPACE_TABLE, XML_FILTER_OR, true, true);
+            SvXMLElementExport aElemOr(mrExport, XmlNamespace::TABLE, XML_FILTER_OR, true, true);
             for (size_t i = 0; i < nCount; ++i)
                 writeCondition(aParam.GetEntry(i), nFieldStart, aParam.bCaseSens, aParam.eSearchType);
         }
         else if (bAnd && !bOr)
         {
-            SvXMLElementExport aElemAnd(mrExport, XML_NAMESPACE_TABLE, XML_FILTER_AND, true, true);
+            SvXMLElementExport aElemAnd(mrExport, XmlNamespace::TABLE, XML_FILTER_AND, true, true);
             for (size_t i = 0; i < nCount; ++i)
                 writeCondition(aParam.GetEntry(i), nFieldStart, aParam.bCaseSens, aParam.eSearchType);
         }
@@ -545,11 +545,11 @@ private:
         }
         else
         {
-            SvXMLElementExport aElemC(mrExport, XML_NAMESPACE_TABLE, XML_FILTER_OR, true, true);
+            SvXMLElementExport aElemC(mrExport, XmlNamespace::TABLE, XML_FILTER_OR, true, true);
             ScQueryEntry aPrevEntry = aParam.GetEntry(0);
             ScQueryConnect eConnect = aParam.GetEntry(1).eConnect;
             bool bOpenAndElement = false;
-            OUString aName = mrExport.GetNamespaceMap().GetQNameByKey(XML_NAMESPACE_TABLE, GetXMLToken(XML_FILTER_AND));
+            OUString aName = mrExport.GetNamespaceMap().GetQNameByKey(XmlNamespace::TABLE, GetXMLToken(XML_FILTER_AND));
 
             if (eConnect == SC_AND)
             {
@@ -620,27 +620,27 @@ private:
             return;
 
         if (!aParam.bIncludePattern)
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_BIND_STYLES_TO_CONTENT, XML_FALSE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_BIND_STYLES_TO_CONTENT, XML_FALSE);
 
         if (aParam.bPagebreak)
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_PAGE_BREAKS_ON_GROUP_CHANGE, XML_TRUE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_PAGE_BREAKS_ON_GROUP_CHANGE, XML_TRUE);
 
         if (aParam.bCaseSens)
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CASE_SENSITIVE, XML_TRUE);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_CASE_SENSITIVE, XML_TRUE);
 
-        SvXMLElementExport aElemSTRs(mrExport, XML_NAMESPACE_TABLE, XML_SUBTOTAL_RULES, true, true);
+        SvXMLElementExport aElemSTRs(mrExport, XmlNamespace::TABLE, XML_SUBTOTAL_RULES, true, true);
 
         if (aParam.bDoSort)
         {
             if (!aParam.bAscending)
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ORDER, XML_DESCENDING);
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_ORDER, XML_DESCENDING);
 
             if (aParam.bUserDef)
             {
                 OUString aBuf = SC_USERLIST + OUString::number(static_cast<sal_Int32>(aParam.nUserIndex));
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DATA_TYPE, aBuf);
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_DATA_TYPE, aBuf);
             }
-            SvXMLElementExport aElemSGs(mrExport, XML_NAMESPACE_TABLE, XML_SORT_GROUPS, true, true);
+            SvXMLElementExport aElemSGs(mrExport, XmlNamespace::TABLE, XML_SORT_GROUPS, true, true);
         }
 
         for (size_t i = 0; i < MAXSUBTOTAL; ++i)
@@ -650,20 +650,20 @@ private:
                 break;
 
             sal_Int32 nFieldCol = static_cast<sal_Int32>(aParam.nField[i]);
-            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_GROUP_BY_FIELD_NUMBER, OUString::number(nFieldCol));
-            SvXMLElementExport aElemSTR(mrExport, XML_NAMESPACE_TABLE, XML_SUBTOTAL_RULE, true, true);
+            mrExport.AddAttribute(XmlNamespace::TABLE, XML_GROUP_BY_FIELD_NUMBER, OUString::number(nFieldCol));
+            SvXMLElementExport aElemSTR(mrExport, XmlNamespace::TABLE, XML_SUBTOTAL_RULE, true, true);
 
             for (SCCOL j = 0, n = aParam.nSubTotals[i]; j < n; ++j)
             {
                 sal_Int32 nCol = static_cast<sal_Int32>(aParam.pSubTotals[i][j]);
                 ScSubTotalFunc eFunc = aParam.pFunctions[i][j];
 
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FIELD_NUMBER, OUString::number(nCol));
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_FIELD_NUMBER, OUString::number(nCol));
                 OUString aFuncStr;
                 ScXMLConverter::GetStringFromFunction(aFuncStr, eFunc);
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_FUNCTION, aFuncStr);
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_FUNCTION, aFuncStr);
 
-                SvXMLElementExport aElemSTF(mrExport, XML_NAMESPACE_TABLE, XML_SUBTOTAL_FIELD, true, true);
+                SvXMLElementExport aElemSTF(mrExport, XmlNamespace::TABLE, XML_SUBTOTAL_FIELD, true, true);
             }
         }
     }
@@ -701,7 +701,7 @@ void ScXMLExportDatabaseRanges::WriteDatabaseRanges()
         // No ranges to export. Bail out.
         return;
 
-    SvXMLElementExport aElemDRs(rExport, XML_NAMESPACE_TABLE, XML_DATABASE_RANGES, true, true);
+    SvXMLElementExport aElemDRs(rExport, XmlNamespace::TABLE, XML_DATABASE_RANGES, true, true);
 
     WriteDatabaseRange func(rExport, pDoc);
 
diff --git a/sc/source/filter/xml/XMLStylesExportHelper.cxx b/sc/source/filter/xml/XMLStylesExportHelper.cxx
index 202c9bd37f60..65e379853ca0 100644
--- a/sc/source/filter/xml/XMLStylesExportHelper.cxx
+++ b/sc/source/filter/xml/XMLStylesExportHelper.cxx
@@ -268,7 +268,7 @@ OUString ScMyValidationsContainer::GetCondition(ScXMLExport& rExport, const ScMy
     if (!sCondition.isEmpty())
     {
         const formula::FormulaGrammar::Grammar eGrammar = rExport.GetDocument()->GetStorageGrammar();
-        sal_uInt16 nNamespacePrefix = (eGrammar == formula::FormulaGrammar::GRAM_ODFF ? XML_NAMESPACE_OF : XML_NAMESPACE_OOOC);
+        sal_uInt16 nNamespacePrefix = (eGrammar == formula::FormulaGrammar::GRAM_ODFF ? XmlNamespace::OF : XmlNamespace::OOOC);
         sCondition = rExport.GetNamespaceMap().GetQNameByKey( nNamespacePrefix, sCondition, false );
     }
 
@@ -287,16 +287,16 @@ void ScMyValidationsContainer::WriteMessage(ScXMLExport& rExport,
     const bool bShowMessage, const bool bIsHelpMessage)
 {
     if (!sTitle.isEmpty())
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TITLE, sTitle);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_TITLE, sTitle);
     if (bShowMessage)
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, XML_TRUE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY, XML_TRUE);
     else
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY, XML_FALSE);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY, XML_FALSE);
     std::unique_ptr<SvXMLElementExport> pMessage;
     if (bIsHelpMessage)
-        pMessage.reset(new SvXMLElementExport(rExport, XML_NAMESPACE_TABLE, XML_HELP_MESSAGE, true, true));
+        pMessage.reset(new SvXMLElementExport(rExport, XmlNamespace::TABLE, XML_HELP_MESSAGE, true, true));
     else
-        pMessage.reset(new SvXMLElementExport(rExport, XML_NAMESPACE_TABLE, XML_ERROR_MESSAGE, true, true));
+        pMessage.reset(new SvXMLElementExport(rExport, XmlNamespace::TABLE, XML_ERROR_MESSAGE, true, true));
     if (sOUMessage.isEmpty())
         return;
 
@@ -308,7 +308,7 @@ void ScMyValidationsContainer::WriteMessage(ScXMLExport& rExport,
     {
         if( sText[i] == '\n')
         {
-            SvXMLElementExport aElemP(rExport, XML_NAMESPACE_TEXT, XML_P, true, false);
+            SvXMLElementExport aElemP(rExport, XmlNamespace::TEXT, XML_P, true, false);
             rExport.GetTextParagraphExport()->exportCharacterData(sTemp.makeStringAndClear(), bPrevCharWasSpace);
             bPrevCharWasSpace = true; // reset for start of next paragraph
         }
@@ -318,7 +318,7 @@ void ScMyValidationsContainer::WriteMessage(ScXMLExport& rExport,
     }
     if (!sTemp.isEmpty())
     {
-        SvXMLElementExport aElemP(rExport, XML_NAMESPACE_TEXT, XML_P, true, false);
+        SvXMLElementExport aElemP(rExport, XmlNamespace::TEXT, XML_P, true, false);
         rExport.GetTextParagraphExport()->exportCharacterData(sTemp.makeStringAndClear(), bPrevCharWasSpace);
     }
 }
@@ -328,38 +328,38 @@ void ScMyValidationsContainer::WriteValidations(ScXMLExport& rExport)
     if (aValidationVec.empty())
         return;
 
-    SvXMLElementExport aElemVs(rExport, XML_NAMESPACE_TABLE, XML_CONTENT_VALIDATIONS, true, true);
+    SvXMLElementExport aElemVs(rExport, XmlNamespace::TABLE, XML_CONTENT_VALIDATIONS, true, true);
     for (const auto& rValidation : aValidationVec)
     {
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, rValidation.sName);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, rValidation.sName);
         OUString sCondition(GetCondition(rExport, rValidation));
         if (!sCondition.isEmpty())
         {
-            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_CONDITION, sCondition);
+            rExport.AddAttribute(XmlNamespace::TABLE, XML_CONDITION, sCondition);
             if (rValidation.bIgnoreBlanks)
-                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ALLOW_EMPTY_CELL, XML_TRUE);
+                rExport.AddAttribute(XmlNamespace::TABLE, XML_ALLOW_EMPTY_CELL, XML_TRUE);
             else
-                rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_ALLOW_EMPTY_CELL, XML_FALSE);
+                rExport.AddAttribute(XmlNamespace::TABLE, XML_ALLOW_EMPTY_CELL, XML_FALSE);
             if (rValidation.aValidationType == sheet::ValidationType_LIST)
             {
                 switch (rValidation.nShowList)
                 {
                 case sheet::TableValidationVisibility::INVISIBLE:
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_LIST, XML_NO);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY_LIST, XML_NO);
                 break;
                 case sheet::TableValidationVisibility::UNSORTED:
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_LIST, XML_UNSORTED);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY_LIST, XML_UNSORTED);
                 break;
                 case sheet::TableValidationVisibility::SORTEDASCENDING:
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_LIST, XML_SORT_ASCENDING);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_DISPLAY_LIST, XML_SORT_ASCENDING);
                 break;
                 default:
                     OSL_FAIL("unknown ListType");
                 }
             }
         }
-        rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_BASE_CELL_ADDRESS, GetBaseCellAddress(rExport.GetDocument(), rValidation.aBaseCell));
-        SvXMLElementExport aElemV(rExport, XML_NAMESPACE_TABLE, XML_CONTENT_VALIDATION, true, true);
+        rExport.AddAttribute(XmlNamespace::TABLE, XML_BASE_CELL_ADDRESS, GetBaseCellAddress(rExport.GetDocument(), rValidation.aBaseCell));
+        SvXMLElementExport aElemV(rExport, XmlNamespace::TABLE, XML_CONTENT_VALIDATION, true, true);
         if (rValidation.bShowInputMessage || !rValidation.sInputMessage.isEmpty() || !rValidation.sInputTitle.isEmpty())
         {
             WriteMessage(rExport, rValidation.sInputTitle, rValidation.sInputMessage, rValidation.bShowInputMessage, true);
@@ -370,31 +370,31 @@ void ScMyValidationsContainer::WriteValidations(ScXMLExport& rExport)
             {
                 case sheet::ValidationAlertStyle_INFO :
                 {
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MESSAGE_TYPE, XML_INFORMATION);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_MESSAGE_TYPE, XML_INFORMATION);
                     WriteMessage(rExport, rValidation.sErrorTitle, rValidation.sErrorMessage, rValidation.bShowErrorMessage, false);
                 }
                 break;
                 case sheet::ValidationAlertStyle_WARNING :
                 {
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MESSAGE_TYPE, XML_WARNING);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_MESSAGE_TYPE, XML_WARNING);
                     WriteMessage(rExport, rValidation.sErrorTitle, rValidation.sErrorMessage, rValidation.bShowErrorMessage, false);
                 }
                 break;
                 case sheet::ValidationAlertStyle_STOP :
                 {
-                    rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_MESSAGE_TYPE, XML_STOP);
+                    rExport.AddAttribute(XmlNamespace::TABLE, XML_MESSAGE_TYPE, XML_STOP);
                     WriteMessage(rExport, rValidation.sErrorTitle, rValidation.sErrorMessage, rValidation.bShowErrorMessage, false);
                 }
                 break;
                 case sheet::ValidationAlertStyle_MACRO :
                 {
                     {
-                        //rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, aItr->sErrorTitle);
+                        //rExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, aItr->sErrorTitle);
                         if (rValidation.bShowErrorMessage)
-                            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_EXECUTE, XML_TRUE);
+                            rExport.AddAttribute(XmlNamespace::TABLE, XML_EXECUTE, XML_TRUE);
                         else
-                            rExport.AddAttribute(XML_NAMESPACE_TABLE, XML_EXECUTE, XML_FALSE);
-                        SvXMLElementExport aEMElem(rExport, XML_NAMESPACE_TABLE, XML_ERROR_MACRO, true, true);
+                            rExport.AddAttribute(XmlNamespace::TABLE, XML_EXECUTE, XML_FALSE);
+                        SvXMLElementExport aEMElem(rExport, XmlNamespace::TABLE, XML_ERROR_MACRO, true, true);
                     }
                     {
                         // #i47525# for a script URL the type and the property name for the URL
diff --git a/sc/source/filter/xml/XMLTableHeaderFooterContext.cxx b/sc/source/filter/xml/XMLTableHeaderFooterContext.cxx
index d75b7c0cd1e8..fb0a17598e43 100644
--- a/sc/source/filter/xml/XMLTableHeaderFooterContext.cxx
+++ b/sc/source/filter/xml/XMLTableHeaderFooterContext.cxx
@@ -63,7 +63,7 @@ XMLTableHeaderFooterContext::XMLTableHeaderFooterContext( SvXMLImport& rImport,
         const OUString& rValue(xAttrList->getValueByIndex( i ));
 
         // TODO: use a map here
-        if( XML_NAMESPACE_STYLE == nPrefix )
+        if( XmlNamespace::STYLE == nPrefix )
         {
             if( IsXMLToken(aLName, XML_DISPLAY ) )
                 bDisplay = IsXMLToken(rValue, XML_TRUE);
@@ -110,7 +110,7 @@ SvXMLImportContextRef XMLTableHeaderFooterContext::CreateChildContext(
 {
     SvXMLImportContext *pContext(nullptr);
 
-    if ((nPrefix == XML_NAMESPACE_TEXT) &&
+    if ((nPrefix == XmlNamespace::TEXT) &&
         IsXMLToken(rLocalName, XML_P))
     {
         if (!xTextCursor.is())
@@ -133,7 +133,7 @@ SvXMLImportContextRef XMLTableHeaderFooterContext::CreateChildContext(
     }
     else
     {
-        if (nPrefix == XML_NAMESPACE_STYLE)
+        if (nPrefix == XmlNamespace::STYLE)
         {
             if (xHeaderFooterContent.is())
             {
@@ -217,7 +217,7 @@ SvXMLImportContextRef XMLHeaderFooterRegionContext::CreateChildContext(
 {
     SvXMLImportContext *pContext(nullptr);
 
-    if ((nPrefix == XML_NAMESPACE_TEXT) &&
+    if ((nPrefix == XmlNamespace::TEXT) &&
         IsXMLToken(rLocalName, XML_P))
     {
         pContext =
diff --git a/sc/source/filter/xml/XMLTableMasterPageExport.cxx b/sc/source/filter/xml/XMLTableMasterPageExport.cxx
index f8bf9d1b0b5e..39ea4d6d23b4 100644
--- a/sc/source/filter/xml/XMLTableMasterPageExport.cxx
+++ b/sc/source/filter/xml/XMLTableMasterPageExport.cxx
@@ -79,9 +79,9 @@ void XMLTableMasterPageExport::exportHeaderFooter(const css::uno::Reference < cs
     OUString sRight (xRight->getString());
 
     if( !bDisplay )
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+        GetExport().AddAttribute( XmlNamespace::STYLE,
                                         XML_DISPLAY, XML_FALSE );
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE,
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE,
                               aName, true, true );
     if (!sCenter.isEmpty() && sLeft.isEmpty() && sRight.isEmpty())
         exportHeaderFooterContent( xCenter, false, false );
@@ -89,19 +89,19 @@ void XMLTableMasterPageExport::exportHeaderFooter(const css::uno::Reference < cs
     {
         if (!sLeft.isEmpty())
         {
-            SvXMLElementExport aSubElem( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aSubElem( GetExport(), XmlNamespace::STYLE,
                                         XML_REGION_LEFT, true, true );
             exportHeaderFooterContent( xLeft, false, false );
         }
         if (!sCenter.isEmpty())
         {
-            SvXMLElementExport aSubElem( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aSubElem( GetExport(), XmlNamespace::STYLE,
                                         XML_REGION_CENTER, true, true );
             exportHeaderFooterContent( xCenter, false, false );
         }
         if (!sRight.isEmpty())
         {
-            SvXMLElementExport aSubElem( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aSubElem( GetExport(), XmlNamespace::STYLE,
                                         XML_REGION_RIGHT, true, true );
             exportHeaderFooterContent( xRight, false, false );
         }
diff --git a/sc/source/filter/xml/XMLTableShapeImportHelper.cxx b/sc/source/filter/xml/XMLTableShapeImportHelper.cxx
index 7c5d1d8c2c0b..866f726d7788 100644
--- a/sc/source/filter/xml/XMLTableShapeImportHelper.cxx
+++ b/sc/source/filter/xml/XMLTableShapeImportHelper.cxx
@@ -105,7 +105,7 @@ void XMLTableShapeImportHelper::finishShape(
                 sal_uInt16 nPrefix(
                     static_cast<ScXMLImport&>(mrImporter).GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                     &aLocalName ));
-                if(nPrefix == XML_NAMESPACE_TABLE)
+                if(nPrefix == XmlNamespace::TABLE)
                 {
                     if (IsXMLToken(aLocalName, XML_END_CELL_ADDRESS))
                     {
@@ -132,7 +132,7 @@ void XMLTableShapeImportHelper::finishShape(
                         if (IsXMLToken(rValue, XML_TRUE))
                             nLayerID = SC_LAYER_BACK;
                 }
-                else if(nPrefix == XML_NAMESPACE_DRAW)
+                else if(nPrefix == XmlNamespace::DRAW)
                 {
                     if (IsXMLToken(aLocalName, XML_NOTIFY_ON_UPDATE_OF_RANGES))
                         xRangeList = rValue;
@@ -172,7 +172,7 @@ void XMLTableShapeImportHelper::finishShape(
                 const OUString& rAttrName(xAttrList->getNameByIndex( i ));
                 OUString aLocalName;
                 sal_uInt16 nPrefix(static_cast<ScXMLImport&>(mrImporter).GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName ));
-                if(nPrefix == XML_NAMESPACE_DRAW)
+                if(nPrefix == XmlNamespace::DRAW)
                 {
                     if (IsXMLToken(aLocalName, XML_STYLE_NAME))
                         aStyleName = xAttrList->getValueByIndex( i );
@@ -221,7 +221,7 @@ void XMLTableShapeImportHelper::finishShape(
 
             OUString aLocalName;
             sal_uInt16 nPrefix(static_cast<ScXMLImport&>(mrImporter).GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName ));
-            if(nPrefix == XML_NAMESPACE_TABLE)
+            if(nPrefix == XmlNamespace::TABLE)
             {
                 if (IsXMLToken(aLocalName, XML_TABLE_BACKGROUND))
                     if (IsXMLToken(rValue, XML_TRUE))
diff --git a/sc/source/filter/xml/XMLTrackedChangesContext.cxx b/sc/source/filter/xml/XMLTrackedChangesContext.cxx
index b4f656133819..f3511b781312 100644
--- a/sc/source/filter/xml/XMLTrackedChangesContext.cxx
+++ b/sc/source/filter/xml/XMLTrackedChangesContext.cxx
@@ -669,7 +669,7 @@ SvXMLImportContextRef ScXMLChangeTextPContext::CreateChildContext( sal_uInt16 nT
 {
     SvXMLImportContextRef xContext;
 
-    if ((nPrefix == XML_NAMESPACE_TEXT) && (IsXMLToken(rLName, XML_S)) && !pTextPContext)
+    if ((nPrefix == XmlNamespace::TEXT) && (IsXMLToken(rLName, XML_S)) && !pTextPContext)
     {
         sal_Int32 nRepeat(0);
         sal_Int16 nAttrCount(xAttrList.is() ? xAttrList->getLength() : 0);
@@ -680,7 +680,7 @@ SvXMLImportContextRef ScXMLChangeTextPContext::CreateChildContext( sal_uInt16 nT
             OUString aLocalName;
             sal_uInt16 nPrfx(GetScImport().GetNamespaceMap().GetKeyByAttrName(
                                                 sAttrName, &aLocalName ));
-            if ((nPrfx == XML_NAMESPACE_TEXT) && (IsXMLToken(aLocalName, XML_C)))
+            if ((nPrfx == XmlNamespace::TEXT) && (IsXMLToken(aLocalName, XML_C)))
                 nRepeat = sValue.toInt32();
         }
         if (nRepeat)
@@ -813,7 +813,7 @@ SvXMLImportContextRef ScXMLChangeCellContext::CreateChildContext( sal_uInt16 nPr
 {
     SvXMLImportContext *pContext(nullptr);
 
-    if ((nPrefix == XML_NAMESPACE_TEXT) && (IsXMLToken(rLocalName, XML_P)))
+    if ((nPrefix == XmlNamespace::TEXT) && (IsXMLToken(rLocalName, XML_P)))
     {
         bEmpty = false;
         if (bFirstParagraph)
diff --git a/sc/source/filter/xml/editattributemap.cxx b/sc/source/filter/xml/editattributemap.cxx
index 6e6c3331d453..6ec9f2610381 100644
--- a/sc/source/filter/xml/editattributemap.cxx
+++ b/sc/source/filter/xml/editattributemap.cxx
@@ -15,54 +15,54 @@
 
 ScXMLEditAttributeMap::Entry const aEntries[] = {
 
-    { XML_NAMESPACE_FO, "color", "CharColor", EE_CHAR_COLOR, 0 },
-    { XML_NAMESPACE_STYLE, "font-charset", "CharFontCharSet", EE_CHAR_FONTINFO, MID_FONT_CHAR_SET },
-    { XML_NAMESPACE_STYLE, "font-charset-asian", "CharFontCharSetAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_CHAR_SET },
-    { XML_NAMESPACE_STYLE, "font-charset-complex", "CharFontCharSetComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_CHAR_SET },
-    { XML_NAMESPACE_FO, "font-family", "CharFontName", EE_CHAR_FONTINFO, MID_FONT_FAMILY_NAME },
-    { XML_NAMESPACE_STYLE, "font-family-asian", "CharFontNameAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_FAMILY_NAME },
-    { XML_NAMESPACE_STYLE, "font-family-complex", "CharFontNameComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_FAMILY_NAME },
-    { XML_NAMESPACE_STYLE, "font-family-generic", "CharFontFamily", EE_CHAR_FONTINFO, MID_FONT_FAMILY },
-    { XML_NAMESPACE_STYLE, "font-family-generic-asian", "CharFontFamilyAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_FAMILY },
-    { XML_NAMESPACE_STYLE, "font-family-generic-complex", "CharFontFamilyComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_FAMILY },
-    { XML_NAMESPACE_STYLE, "font-pitch", "CharFontPitch", EE_CHAR_FONTINFO, MID_FONT_PITCH },
-    { XML_NAMESPACE_STYLE, "font-pitch-asian", "CharFontPitchAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_PITCH },
-    { XML_NAMESPACE_STYLE, "font-pitch-complex", "CharFontPitchComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_PITCH },
-    { XML_NAMESPACE_FO, "font-size", "CharHeight", EE_CHAR_FONTHEIGHT, MID_FONTHEIGHT },
-    { XML_NAMESPACE_STYLE, "font-size-asian", "CharHeightAsian", EE_CHAR_FONTHEIGHT_CJK, MID_FONTHEIGHT },
-    { XML_NAMESPACE_STYLE, "font-size-complex", "CharHeightComplex", EE_CHAR_FONTHEIGHT_CTL, MID_FONTHEIGHT },
-    { XML_NAMESPACE_FO, "font-style", "CharPosture", EE_CHAR_ITALIC, MID_POSTURE },
-    { XML_NAMESPACE_STYLE, "font-style-asian", "CharPostureAsian", EE_CHAR_ITALIC_CJK, MID_POSTURE },
-    { XML_NAMESPACE_STYLE, "font-style-complex", "CharPostureComplex", EE_CHAR_ITALIC_CTL, MID_POSTURE },
-    { XML_NAMESPACE_STYLE, "font-style-name", "CharFontStyleName", EE_CHAR_FONTINFO, MID_FONT_STYLE_NAME },
-    { XML_NAMESPACE_STYLE, "font-style-name-asian", "CharFontStyleNameAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_STYLE_NAME },
-    { XML_NAMESPACE_STYLE, "font-style-name-complex", "CharFontStyleNameComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_STYLE_NAME },
-    { XML_NAMESPACE_FO, "font-weight", "CharWeight", EE_CHAR_WEIGHT, MID_WEIGHT },
-    { XML_NAMESPACE_STYLE, "font-weight-asian", "CharWeightAsian", EE_CHAR_WEIGHT_CJK, MID_WEIGHT },
-    { XML_NAMESPACE_STYLE, "font-weight-complex", "CharWeightComplex", EE_CHAR_WEIGHT_CTL, MID_WEIGHT },
-    { XML_NAMESPACE_STYLE, "text-overline-width", "CharOverline", EE_CHAR_OVERLINE, MID_TL_STYLE },
-    { XML_NAMESPACE_STYLE, "text-overline-color", "CharOverlineColor", EE_CHAR_OVERLINE, MID_TL_COLOR },
-    { XML_NAMESPACE_STYLE, "text-overline-color", "CharOverlineHasColor", EE_CHAR_OVERLINE, MID_TL_HASCOLOR },
-    { XML_NAMESPACE_STYLE, "text-underline-width", "CharUnderline", EE_CHAR_UNDERLINE, MID_TL_STYLE },
-    { XML_NAMESPACE_STYLE, "text-underline-color", "CharUnderlineColor", EE_CHAR_UNDERLINE, MID_TL_COLOR },
-    { XML_NAMESPACE_STYLE, "text-underline-color", "CharUnderlineHasColor", EE_CHAR_UNDERLINE, MID_TL_HASCOLOR },
-    { XML_NAMESPACE_STYLE, "text-line-through-mode", "CharWordMode", EE_CHAR_WLM, 0 },
-    { XML_NAMESPACE_STYLE, "text-line-through-type", "CharStrikeout", EE_CHAR_STRIKEOUT, MID_CROSS_OUT },
-    { XML_NAMESPACE_STYLE, "font-relief", "CharRelief", EE_CHAR_RELIEF, MID_RELIEF },
-    { XML_NAMESPACE_STYLE, "text-outline", "CharContoured", EE_CHAR_OUTLINE, 0 },
-    { XML_NAMESPACE_FO, "text-shadow", "CharShadowed", EE_CHAR_SHADOW, 0 },
-    { XML_NAMESPACE_FO, "letter-spacing", "CharKerning", EE_CHAR_KERNING, 0 },
-    { XML_NAMESPACE_STYLE, "letter-kerning", "CharAutoKerning", EE_CHAR_PAIRKERNING, 0 },
-    { XML_NAMESPACE_STYLE, "text-scale", "CharScaleWidth", EE_CHAR_FONTWIDTH, 0 },
-    { XML_NAMESPACE_STYLE, "text-position", "CharEscapement", EE_CHAR_ESCAPEMENT, MID_ESC },
-    { XML_NAMESPACE_STYLE, "text-position", "CharEscapementHeight", EE_CHAR_ESCAPEMENT, MID_ESC_HEIGHT },
-    { XML_NAMESPACE_STYLE, "text-emphasize", "CharEmphasis", EE_CHAR_EMPHASISMARK, MID_EMPHASIS },
+    { XmlNamespace::FO, "color", "CharColor", EE_CHAR_COLOR, 0 },
+    { XmlNamespace::STYLE, "font-charset", "CharFontCharSet", EE_CHAR_FONTINFO, MID_FONT_CHAR_SET },
+    { XmlNamespace::STYLE, "font-charset-asian", "CharFontCharSetAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_CHAR_SET },
+    { XmlNamespace::STYLE, "font-charset-complex", "CharFontCharSetComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_CHAR_SET },
+    { XmlNamespace::FO, "font-family", "CharFontName", EE_CHAR_FONTINFO, MID_FONT_FAMILY_NAME },
+    { XmlNamespace::STYLE, "font-family-asian", "CharFontNameAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_FAMILY_NAME },
+    { XmlNamespace::STYLE, "font-family-complex", "CharFontNameComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_FAMILY_NAME },
+    { XmlNamespace::STYLE, "font-family-generic", "CharFontFamily", EE_CHAR_FONTINFO, MID_FONT_FAMILY },
+    { XmlNamespace::STYLE, "font-family-generic-asian", "CharFontFamilyAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_FAMILY },
+    { XmlNamespace::STYLE, "font-family-generic-complex", "CharFontFamilyComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_FAMILY },
+    { XmlNamespace::STYLE, "font-pitch", "CharFontPitch", EE_CHAR_FONTINFO, MID_FONT_PITCH },
+    { XmlNamespace::STYLE, "font-pitch-asian", "CharFontPitchAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_PITCH },
+    { XmlNamespace::STYLE, "font-pitch-complex", "CharFontPitchComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_PITCH },
+    { XmlNamespace::FO, "font-size", "CharHeight", EE_CHAR_FONTHEIGHT, MID_FONTHEIGHT },
+    { XmlNamespace::STYLE, "font-size-asian", "CharHeightAsian", EE_CHAR_FONTHEIGHT_CJK, MID_FONTHEIGHT },
+    { XmlNamespace::STYLE, "font-size-complex", "CharHeightComplex", EE_CHAR_FONTHEIGHT_CTL, MID_FONTHEIGHT },
+    { XmlNamespace::FO, "font-style", "CharPosture", EE_CHAR_ITALIC, MID_POSTURE },
+    { XmlNamespace::STYLE, "font-style-asian", "CharPostureAsian", EE_CHAR_ITALIC_CJK, MID_POSTURE },
+    { XmlNamespace::STYLE, "font-style-complex", "CharPostureComplex", EE_CHAR_ITALIC_CTL, MID_POSTURE },
+    { XmlNamespace::STYLE, "font-style-name", "CharFontStyleName", EE_CHAR_FONTINFO, MID_FONT_STYLE_NAME },
+    { XmlNamespace::STYLE, "font-style-name-asian", "CharFontStyleNameAsian", EE_CHAR_FONTINFO_CJK, MID_FONT_STYLE_NAME },
+    { XmlNamespace::STYLE, "font-style-name-complex", "CharFontStyleNameComplex", EE_CHAR_FONTINFO_CTL, MID_FONT_STYLE_NAME },
+    { XmlNamespace::FO, "font-weight", "CharWeight", EE_CHAR_WEIGHT, MID_WEIGHT },
+    { XmlNamespace::STYLE, "font-weight-asian", "CharWeightAsian", EE_CHAR_WEIGHT_CJK, MID_WEIGHT },
+    { XmlNamespace::STYLE, "font-weight-complex", "CharWeightComplex", EE_CHAR_WEIGHT_CTL, MID_WEIGHT },
+    { XmlNamespace::STYLE, "text-overline-width", "CharOverline", EE_CHAR_OVERLINE, MID_TL_STYLE },
+    { XmlNamespace::STYLE, "text-overline-color", "CharOverlineColor", EE_CHAR_OVERLINE, MID_TL_COLOR },
+    { XmlNamespace::STYLE, "text-overline-color", "CharOverlineHasColor", EE_CHAR_OVERLINE, MID_TL_HASCOLOR },
+    { XmlNamespace::STYLE, "text-underline-width", "CharUnderline", EE_CHAR_UNDERLINE, MID_TL_STYLE },
+    { XmlNamespace::STYLE, "text-underline-color", "CharUnderlineColor", EE_CHAR_UNDERLINE, MID_TL_COLOR },
+    { XmlNamespace::STYLE, "text-underline-color", "CharUnderlineHasColor", EE_CHAR_UNDERLINE, MID_TL_HASCOLOR },
+    { XmlNamespace::STYLE, "text-line-through-mode", "CharWordMode", EE_CHAR_WLM, 0 },
+    { XmlNamespace::STYLE, "text-line-through-type", "CharStrikeout", EE_CHAR_STRIKEOUT, MID_CROSS_OUT },
+    { XmlNamespace::STYLE, "font-relief", "CharRelief", EE_CHAR_RELIEF, MID_RELIEF },
+    { XmlNamespace::STYLE, "text-outline", "CharContoured", EE_CHAR_OUTLINE, 0 },
+    { XmlNamespace::FO, "text-shadow", "CharShadowed", EE_CHAR_SHADOW, 0 },
+    { XmlNamespace::FO, "letter-spacing", "CharKerning", EE_CHAR_KERNING, 0 },
+    { XmlNamespace::STYLE, "letter-kerning", "CharAutoKerning", EE_CHAR_PAIRKERNING, 0 },
+    { XmlNamespace::STYLE, "text-scale", "CharScaleWidth", EE_CHAR_FONTWIDTH, 0 },
+    { XmlNamespace::STYLE, "text-position", "CharEscapement", EE_CHAR_ESCAPEMENT, MID_ESC },
+    { XmlNamespace::STYLE, "text-position", "CharEscapementHeight", EE_CHAR_ESCAPEMENT, MID_ESC_HEIGHT },
+    { XmlNamespace::STYLE, "text-emphasize", "CharEmphasis", EE_CHAR_EMPHASISMARK, MID_EMPHASIS },
     // The following 3 "country" entries are just placeholders for language,
     // country, script and rfc-language-tag, which all map to CharLocale,
     // EE_CHAR_LANGUAGE and MID_LANG_LOCALE and are handled individually.
-    { XML_NAMESPACE_FO, "country", "CharLocale", EE_CHAR_LANGUAGE, MID_LANG_LOCALE },
-    { XML_NAMESPACE_STYLE, "country-asian", "CharLocaleAsian", EE_CHAR_LANGUAGE_CJK, MID_LANG_LOCALE },
-    { XML_NAMESPACE_STYLE, "country-complex", "CharLocaleComplex", EE_CHAR_LANGUAGE_CTL, MID_LANG_LOCALE },
+    { XmlNamespace::FO, "country", "CharLocale", EE_CHAR_LANGUAGE, MID_LANG_LOCALE },
+    { XmlNamespace::STYLE, "country-asian", "CharLocaleAsian", EE_CHAR_LANGUAGE_CJK, MID_LANG_LOCALE },
+    { XmlNamespace::STYLE, "country-complex", "CharLocaleComplex", EE_CHAR_LANGUAGE_CTL, MID_LANG_LOCALE },
 };
 
 ScXMLEditAttributeMap::ScXMLEditAttributeMap()
diff --git a/sc/source/filter/xml/xmlannoi.cxx b/sc/source/filter/xml/xmlannoi.cxx
index 55b6df72510c..6786f9fe15a2 100644
--- a/sc/source/filter/xml/xmlannoi.cxx
+++ b/sc/source/filter/xml/xmlannoi.cxx
@@ -119,7 +119,7 @@ SvXMLImportContextRef ScXMLAnnotationContext::CreateChildContext( sal_uInt16 nPr
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_DC == nPrefix )
+    if( XmlNamespace::DC == nPrefix )
     {
         if( IsXMLToken( rLName, XML_CREATOR ) )
             xContext = new ScXMLContentContext(GetScImport(), nPrefix,
@@ -128,7 +128,7 @@ SvXMLImportContextRef ScXMLAnnotationContext::CreateChildContext( sal_uInt16 nPr
             xContext = new ScXMLContentContext(GetScImport(), nPrefix,
                                             rLName, maCreateDateBuffer);
     }
-    else if( XML_NAMESPACE_META == nPrefix )
+    else if( XmlNamespace::META == nPrefix )
     {
         if( IsXMLToken( rLName, XML_DATE_STRING ) )
             xContext = new ScXMLContentContext(GetScImport(), nPrefix,
diff --git a/sc/source/filter/xml/xmlbodyi.cxx b/sc/source/filter/xml/xmlbodyi.cxx
index 753b9cfb1614..be4e21ab588f 100644
--- a/sc/source/filter/xml/xmlbodyi.cxx
+++ b/sc/source/filter/xml/xmlbodyi.cxx
@@ -95,7 +95,7 @@ ScXMLBodyContext::ScXMLBodyContext( ScXMLImport& rImport,
     for (auto &it : *rAttrList)
     {
         sal_Int32 nToken = it.getToken();
-        if( IsTokenInNamespace(nToken, XML_NAMESPACE_TABLE) )
+        if( IsTokenInNamespace(nToken, XmlNamespace::TABLE) )
         {
             const sal_Int32 nLocalToken = nToken & TOKEN_MASK;
             if( nLocalToken == XML_STRUCTURE_PROTECTED )
diff --git a/sc/source/filter/xml/xmlconti.cxx b/sc/source/filter/xml/xmlconti.cxx
index b88760829bff..57e606890721 100644
--- a/sc/source/filter/xml/xmlconti.cxx
+++ b/sc/source/filter/xml/xmlconti.cxx
@@ -50,7 +50,7 @@ SvXMLImportContextRef ScXMLContentContext::CreateChildContext( sal_uInt16 nPrefi
                                             const OUString& rLName,
                                             const css::uno::Reference<css::xml::sax::XAttributeList>& xAttrList )
 {
-    if ((nPrefix == XML_NAMESPACE_TEXT) && IsXMLToken(rLName, XML_S))
+    if ((nPrefix == XmlNamespace::TEXT) && IsXMLToken(rLName, XML_S))
     {
         sal_Int32 nRepeat(0);
         sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
@@ -61,7 +61,7 @@ SvXMLImportContextRef ScXMLContentContext::CreateChildContext( sal_uInt16 nPrefi
             OUString aLocalName;
             sal_uInt16 nPrfx = GetScImport().GetNamespaceMap().GetKeyByAttrName(
                                                 sAttrName, &aLocalName );
-            if ((nPrfx == XML_NAMESPACE_TEXT) && IsXMLToken(aLocalName, XML_C))
+            if ((nPrfx == XmlNamespace::TEXT) && IsXMLToken(aLocalName, XML_C))
                 nRepeat = sAttrValue.toInt32();
         }
         if (nRepeat)
diff --git a/sc/source/filter/xml/xmlexprt.cxx b/sc/source/filter/xml/xmlexprt.cxx
index 0a4b11101acf..eb39f0792161 100644
--- a/sc/source/filter/xml/xmlexprt.cxx
+++ b/sc/source/filter/xml/xmlexprt.cxx
@@ -324,7 +324,7 @@ void ScXMLShapeExport::onExport( const uno::Reference < drawing::XShape >& xShap
     {
         sal_Int16 nLayerID = 0;
         if( (xShapeProp->getPropertyValue( SC_LAYERID ) >>= nLayerID) && (SdrLayerID(nLayerID) == SC_LAYER_BACK) )
-            GetExport().AddAttribute(XML_NAMESPACE_TABLE, XML_TABLE_BACKGROUND, XML_TRUE);
+            GetExport().AddAttribute(XmlNamespace::TABLE, XML_TABLE_BACKGROUND, XML_TRUE);
     }
 }
 
@@ -398,18 +398,18 @@ ScXMLExport::ScXMLExport(
     sExternalRefTabStyleName = "ta_extref";
     GetAutoStylePool()->RegisterName(XmlStyleFamily::TABLE_TABLE, sExternalRefTabStyleName);
 
-    sAttrName = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_NAME));
-    sAttrStyleName = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_STYLE_NAME));
-    sAttrColumnsRepeated = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_NUMBER_COLUMNS_REPEATED));
-    sAttrFormula = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_FORMULA));
-    sAttrStringValue = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, GetXMLToken(XML_STRING_VALUE));
-    sAttrValueType = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, GetXMLToken(XML_VALUE_TYPE));
-    sElemCell = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_TABLE_CELL));
-    sElemCoveredCell = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_COVERED_TABLE_CELL));
-    sElemCol = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_TABLE_COLUMN));
-    sElemRow = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_TABLE_ROW));
-    sElemTab = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TABLE, GetXMLToken(XML_TABLE));
-    sElemP = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_TEXT, GetXMLToken(XML_P));
+    sAttrName = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_NAME));
+    sAttrStyleName = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_STYLE_NAME));
+    sAttrColumnsRepeated = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_NUMBER_COLUMNS_REPEATED));
+    sAttrFormula = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_FORMULA));
+    sAttrStringValue = GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, GetXMLToken(XML_STRING_VALUE));
+    sAttrValueType = GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, GetXMLToken(XML_VALUE_TYPE));
+    sElemCell = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_TABLE_CELL));
+    sElemCoveredCell = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_COVERED_TABLE_CELL));
+    sElemCol = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_TABLE_COLUMN));
+    sElemRow = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_TABLE_ROW));
+    sElemTab = GetNamespaceMap().GetQNameByKey( XmlNamespace::TABLE, GetXMLToken(XML_TABLE));
+    sElemP = GetNamespaceMap().GetQNameByKey( XmlNamespace::TEXT, GetXMLToken(XML_P));
 }
 
 ScXMLExport::~ScXMLExport()
@@ -735,14 +735,14 @@ void ScXMLExport::WriteSingleColumn(const sal_Int32 nRepeatColumns, const sal_In
     CheckAttrList();
     AddAttribute(sAttrStyleName, pColumnStyles->GetStyleNameByIndex(nStyleIndex));
     if (!bIsVisible)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_VISIBILITY, XML_COLLAPSE);
+        AddAttribute(XmlNamespace::TABLE, XML_VISIBILITY, XML_COLLAPSE);
     if (nRepeatColumns > 1)
     {
         OUString sOUEndCol(OUString::number(nRepeatColumns));
         AddAttribute(sAttrColumnsRepeated, sOUEndCol);
     }
     if (nIndex != -1)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_DEFAULT_CELL_STYLE_NAME, pCellStyles->GetStyleNameByIndex(nIndex, bIsAutoStyle));
+        AddAttribute(XmlNamespace::TABLE, XML_DEFAULT_CELL_STYLE_NAME, pCellStyles->GetStyleNameByIndex(nIndex, bIsAutoStyle));
     SvXMLElementExport aElemC(*this, sElemCol, true, true);
 }
 
@@ -770,12 +770,12 @@ void ScXMLExport::WriteColumn(const sal_Int32 nColumn, const sal_Int32 nRepeatCo
 
 void ScXMLExport::OpenHeaderColumn()
 {
-    StartElement( XML_NAMESPACE_TABLE, XML_TABLE_HEADER_COLUMNS, true );
+    StartElement( XmlNamespace::TABLE, XML_TABLE_HEADER_COLUMNS, true );
 }
 
 void ScXMLExport::CloseHeaderColumn()
 {
-    EndElement(XML_NAMESPACE_TABLE, XML_TABLE_HEADER_COLUMNS, true);
+    EndElement(XmlNamespace::TABLE, XML_TABLE_HEADER_COLUMNS, true);
 }
 
 void ScXMLExport::ExportColumns(const sal_Int32 nTable, const ScRange& aColumnHeaderRange, const bool bHasColumnHeader)
@@ -877,7 +877,7 @@ void ScXMLExport::ExportColumns(const sal_Int32 nTable, const ScRange& aColumnHe
 void ScXMLExport::ExportExternalRefCacheStyles()
 {
     sal_Int32 nEntryIndex = GetCellStylesPropertySetMapper()->FindEntryIndex(
-        "NumberFormat", XML_NAMESPACE_STYLE, "data-style-name");
+        "NumberFormat", XmlNamespace::STYLE, "data-style-name");
 
     if (nEntryIndex < 0)
         // No entry index for the number format is found.
@@ -933,7 +933,7 @@ void handleFont(
     // Apparently font info needs special handling.
     const SvxFontItem* pItem = static_cast<const SvxFontItem*>(p);
 
-    sal_Int32 nIndexFontName = xMapper->GetEntryIndex(XML_NAMESPACE_STYLE, rXMLName, 0);
+    sal_Int32 nIndexFontName = xMapper->GetEntryIndex(XmlNamespace::STYLE, rXMLName, 0);
 
     if (nIndexFontName == -1 || nIndexFontName >= nEntryCount)
         return;
@@ -1015,23 +1015,23 @@ const SvxFieldData* toXMLPropertyStates(
             case EE_CHAR_UNDERLINE:
             {
                 // Underline attribute needs to export multiple entries.
-                sal_Int32 nIndexStyle = xMapper->GetEntryIndex(XML_NAMESPACE_STYLE, "text-underline-style", 0);
+                sal_Int32 nIndexStyle = xMapper->GetEntryIndex(XmlNamespace::STYLE, "text-underline-style", 0);
                 if (nIndexStyle == -1 || nIndexStyle > nEntryCount)
                     break;
 
-                sal_Int32 nIndexWidth = xMapper->GetEntryIndex(XML_NAMESPACE_STYLE, "text-underline-width", 0);
+                sal_Int32 nIndexWidth = xMapper->GetEntryIndex(XmlNamespace::STYLE, "text-underline-width", 0);
                 if (nIndexWidth == -1 || nIndexWidth > nEntryCount)
                     break;
 
-                sal_Int32 nIndexType = xMapper->GetEntryIndex(XML_NAMESPACE_STYLE, "text-underline-type", 0);
+                sal_Int32 nIndexType = xMapper->GetEntryIndex(XmlNamespace::STYLE, "text-underline-type", 0);
                 if (nIndexType == -1 || nIndexType > nEntryCount)
                     break;
 
-                sal_Int32 nIndexColor = xMapper->FindEntryIndex("CharUnderlineColor", XML_NAMESPACE_STYLE, "text-underline-color");
+                sal_Int32 nIndexColor = xMapper->FindEntryIndex("CharUnderlineColor", XmlNamespace::STYLE, "text-underline-color");
                 if (nIndexColor == -1 || nIndexColor > nEntryCount)
                     break;
 
-                sal_Int32 nIndexHasColor = xMapper->FindEntryIndex("CharUnderlineHasColor", XML_NAMESPACE_STYLE, "text-underline-color");
+                sal_Int32 nIndexHasColor = xMapper->FindEntryIndex("CharUnderlineHasColor", XmlNamespace::STYLE, "text-underline-color");
                 if (nIndexHasColor == -1 || nIndexHasColor > nEntryCount)
                     break;
 
@@ -1051,23 +1051,23 @@ const SvxFieldData* toXMLPropertyStates(
             case EE_CHAR_OVERLINE:
             {
                 // Same with overline.  Do just as we do with underline attributes.
-                sal_Int32 nIndexStyle = xMapper->GetEntryIndex(XML_NAMESPACE_STYLE, "text-overline-style", 0);
+                sal_Int32 nIndexStyle = xMapper->GetEntryIndex(XmlNamespace::STYLE, "text-overline-style", 0);
                 if (nIndexStyle == -1 || nIndexStyle > nEntryCount)
                     break;
 
-                sal_Int32 nIndexWidth = xMapper->GetEntryIndex(XML_NAMESPACE_STYLE, "text-overline-width", 0);
+                sal_Int32 nIndexWidth = xMapper->GetEntryIndex(XmlNamespace::STYLE, "text-overline-width", 0);
                 if (nIndexWidth == -1 || nIndexWidth > nEntryCount)
                     break;
 
-                sal_Int32 nIndexType = xMapper->GetEntryIndex(XML_NAMESPACE_STYLE, "text-overline-type", 0);
+                sal_Int32 nIndexType = xMapper->GetEntryIndex(XmlNamespace::STYLE, "text-overline-type", 0);
                 if (nIndexType == -1 || nIndexType > nEntryCount)
                     break;
 
-                sal_Int32 nIndexColor = xMapper->FindEntryIndex("CharOverlineColor", XML_NAMESPACE_STYLE, "text-overline-color");
+                sal_Int32 nIndexColor = xMapper->FindEntryIndex("CharOverlineColor", XmlNamespace::STYLE, "text-overline-color");
                 if (nIndexColor == -1 || nIndexColor > nEntryCount)
                     break;
 
-                sal_Int32 nIndexHasColor = xMapper->FindEntryIndex("CharOverlineHasColor", XML_NAMESPACE_STYLE, "text-overline-color");
+                sal_Int32 nIndexHasColor = xMapper->FindEntryIndex("CharOverlineHasColor", XmlNamespace::STYLE, "text-overline-color");
                 if (nIndexHasColor == -1 || nIndexHasColor > nEntryCount)
                     break;
 
@@ -1093,7 +1093,7 @@ const SvxFieldData* toXMLPropertyStates(
                 if ( aAny >>= nColor )
                 {
                     sal_Int32 nIndexColor = ( nColor == COL_AUTO ) ? xMapper->GetEntryIndex(
-                        XML_NAMESPACE_STYLE, GetXMLToken( XML_USE_WINDOW_FONT_COLOR ), 0 ) : nIndex;
+                        XmlNamespace::STYLE, GetXMLToken( XML_USE_WINDOW_FONT_COLOR ), 0 ) : nIndex;
                     rPropStates.emplace_back( nIndexColor, aAny );
                 }
             }
@@ -1164,11 +1164,11 @@ const SvxFieldData* toXMLPropertyStates(
             break;
             case EE_CHAR_ESCAPEMENT:
             {
-                sal_Int32 nIndexEsc = xMapper->FindEntryIndex("CharEscapement", XML_NAMESPACE_STYLE, "text-position");
+                sal_Int32 nIndexEsc = xMapper->FindEntryIndex("CharEscapement", XmlNamespace::STYLE, "text-position");
                 if (nIndexEsc == -1 || nIndexEsc > nEntryCount)
                     break;
 
-                sal_Int32 nIndexEscHeight = xMapper->FindEntryIndex("CharEscapementHeight", XML_NAMESPACE_STYLE, "text-position");
+                sal_Int32 nIndexEscHeight = xMapper->FindEntryIndex("CharEscapementHeight", XmlNamespace::STYLE, "text-position");
                 if (nIndexEscHeight == -1 || nIndexEscHeight > nEntryCount)
                     break;
 
@@ -1202,22 +1202,22 @@ const SvxFieldData* toXMLPropertyStates(
                 switch (p->Which())
                 {
                     case EE_CHAR_LANGUAGE:
-                        nIndexLanguage = xMapper->GetEntryIndex( XML_NAMESPACE_FO, "language", 0);
-                        nIndexCountry = xMapper->GetEntryIndex( XML_NAMESPACE_FO, "country", 0);
-                        nIndexScript = xMapper->GetEntryIndex( XML_NAMESPACE_FO, "script", 0);
-                        nIndexTag = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "rfc-language-tag", 0);
+                        nIndexLanguage = xMapper->GetEntryIndex( XmlNamespace::FO, "language", 0);
+                        nIndexCountry = xMapper->GetEntryIndex( XmlNamespace::FO, "country", 0);
+                        nIndexScript = xMapper->GetEntryIndex( XmlNamespace::FO, "script", 0);
+                        nIndexTag = xMapper->GetEntryIndex( XmlNamespace::STYLE, "rfc-language-tag", 0);
                     break;
                     case EE_CHAR_LANGUAGE_CJK:
-                        nIndexLanguage = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "language-asian", 0);
-                        nIndexCountry = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "country-asian", 0);
-                        nIndexScript = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "script-asian", 0);
-                        nIndexTag = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "rfc-language-tag-asian", 0);
+                        nIndexLanguage = xMapper->GetEntryIndex( XmlNamespace::STYLE, "language-asian", 0);
+                        nIndexCountry = xMapper->GetEntryIndex( XmlNamespace::STYLE, "country-asian", 0);
+                        nIndexScript = xMapper->GetEntryIndex( XmlNamespace::STYLE, "script-asian", 0);
+                        nIndexTag = xMapper->GetEntryIndex( XmlNamespace::STYLE, "rfc-language-tag-asian", 0);
                     break;
                     case EE_CHAR_LANGUAGE_CTL:
-                        nIndexLanguage = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "language-complex", 0);
-                        nIndexCountry = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "country-complex", 0);
-                        nIndexScript = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "script-complex", 0);
-                        nIndexTag = xMapper->GetEntryIndex( XML_NAMESPACE_STYLE, "rfc-language-tag-complex", 0);
+                        nIndexLanguage = xMapper->GetEntryIndex( XmlNamespace::STYLE, "language-complex", 0);
+                        nIndexCountry = xMapper->GetEntryIndex( XmlNamespace::STYLE, "country-complex", 0);
+                        nIndexScript = xMapper->GetEntryIndex( XmlNamespace::STYLE, "script-complex", 0);
+                        nIndexTag = xMapper->GetEntryIndex( XmlNamespace::STYLE, "rfc-language-tag-complex", 0);
                     break;
                     default:
                         nIndexLanguage = nIndexCountry = nIndexScript = nIndexTag = -1;
@@ -1312,7 +1312,7 @@ void ScXMLExport::WriteRowContent()
                 if (nIndex != -1)
                     AddAttribute(sAttrStyleName, pCellStyles->GetStyleNameByIndex(nIndex, bIsAutoStyle));
                 if (nPrevValidationIndex > -1)
-                    AddAttribute(XML_NAMESPACE_TABLE, XML_CONTENT_VALIDATION_NAME, pValidationsContainer->GetValidationName(nPrevValidationIndex));
+                    AddAttribute(XmlNamespace::TABLE, XML_CONTENT_VALIDATION_NAME, pValidationsContainer->GetValidationName(nPrevValidationIndex));
                 if (nCols > 1)
                 {
                     AddAttribute(sAttrColumnsRepeated, OUString::number(nCols));
@@ -1333,7 +1333,7 @@ void ScXMLExport::WriteRowContent()
         if (nIndex != -1)
             AddAttribute(sAttrStyleName, pCellStyles->GetStyleNameByIndex(nIndex, bIsAutoStyle));
         if (nPrevValidationIndex > -1)
-            AddAttribute(XML_NAMESPACE_TABLE, XML_CONTENT_VALIDATION_NAME, pValidationsContainer->GetValidationName(nPrevValidationIndex));
+            AddAttribute(XmlNamespace::TABLE, XML_CONTENT_VALIDATION_NAME, pValidationsContainer->GetValidationName(nPrevValidationIndex));
         if (nCols > 1)
         {
             AddAttribute(sAttrColumnsRepeated, OUString::number(nCols));
@@ -1350,13 +1350,13 @@ void ScXMLExport::WriteRowStartTag(
     if (bHidden)
     {
         if (bFiltered)
-            AddAttribute(XML_NAMESPACE_TABLE, XML_VISIBILITY, XML_FILTER);
+            AddAttribute(XmlNamespace::TABLE, XML_VISIBILITY, XML_FILTER);
         else
-            AddAttribute(XML_NAMESPACE_TABLE, XML_VISIBILITY, XML_COLLAPSE);
+            AddAttribute(XmlNamespace::TABLE, XML_VISIBILITY, XML_COLLAPSE);
     }
     if (nEqualRows > 1)
     {
-        AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_ROWS_REPEATED, OUString::number(nEqualRows));
+        AddAttribute(XmlNamespace::TABLE, XML_NUMBER_ROWS_REPEATED, OUString::number(nEqualRows));
     }
 
     StartElement( sElemRow, true);
@@ -1364,13 +1364,13 @@ void ScXMLExport::WriteRowStartTag(
 
 void ScXMLExport::OpenHeaderRows()
 {
-    StartElement( XML_NAMESPACE_TABLE, XML_TABLE_HEADER_ROWS, true);
+    StartElement( XmlNamespace::TABLE, XML_TABLE_HEADER_ROWS, true);
     bRowHeaderOpen = true;
 }
 
 void ScXMLExport::CloseHeaderRows()
 {
-    EndElement(XML_NAMESPACE_TABLE, XML_TABLE_HEADER_ROWS, true);
+    EndElement(XmlNamespace::TABLE, XML_TABLE_HEADER_ROWS, true);
 }
 
 void ScXMLExport::OpenNewRow(
@@ -1675,7 +1675,7 @@ void ScXMLExport::SetBodyAttributes()
     if (!(pDoc && pDoc->IsDocProtected()))
         return;
 
-    AddAttribute(XML_NAMESPACE_TABLE, XML_STRUCTURE_PROTECTED, XML_TRUE);
+    AddAttribute(XmlNamespace::TABLE, XML_STRUCTURE_PROTECTED, XML_TRUE);
     OUStringBuffer aBuffer;
     uno::Sequence<sal_Int8> aPassHash;
     ScPasswordHash eHashUsed = PASSHASH_UNSPECIFIED;
@@ -1702,26 +1702,26 @@ void ScXMLExport::SetBodyAttributes()
     if (aBuffer.isEmpty())
         return;
 
-    AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTION_KEY, aBuffer.makeStringAndClear());
+    AddAttribute(XmlNamespace::TABLE, XML_PROTECTION_KEY, aBuffer.makeStringAndClear());
     if (getSaneDefaultVersion() < SvtSaveOptions::ODFSVER_012)
         return;
 
     if (eHashUsed == PASSHASH_XL)
     {
-        AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
+        AddAttribute(XmlNamespace::TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
                      ScPassHashHelper::getHashURI(PASSHASH_XL));
         if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
-            AddAttribute(XML_NAMESPACE_LO_EXT, XML_PROTECTION_KEY_DIGEST_ALGORITHM_2,
+            AddAttribute(XmlNamespace::LO_EXT, XML_PROTECTION_KEY_DIGEST_ALGORITHM_2,
                     ScPassHashHelper::getHashURI(PASSHASH_SHA1));
     }
     else if (eHashUsed == PASSHASH_SHA1)
     {
-        AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
+        AddAttribute(XmlNamespace::TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
                      ScPassHashHelper::getHashURI(PASSHASH_SHA1));
     }
     else if (eHashUsed == PASSHASH_SHA256)
     {
-        AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
+        AddAttribute(XmlNamespace::TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
                      ScPassHashHelper::getHashURI(PASSHASH_SHA256));
     }
 }
@@ -2637,11 +2637,11 @@ void ScXMLExport::ExportAutoStyles_()
             if (pRefMgr->hasExternalData())
             {
                 // Special table style for the external ref cache tables.
-                AddAttribute(XML_NAMESPACE_STYLE, XML_NAME, sExternalRefTabStyleName);
-                AddAttribute(XML_NAMESPACE_STYLE, XML_FAMILY, XML_TABLE);
-                SvXMLElementExport aElemStyle(*this, XML_NAMESPACE_STYLE, XML_STYLE, true, true);
-                AddAttribute(XML_NAMESPACE_TABLE,  XML_DISPLAY, XML_FALSE);
-                SvXMLElementExport aElemStyleTabProps(*this, XML_NAMESPACE_STYLE, XML_TABLE_PROPERTIES, true, true);
+                AddAttribute(XmlNamespace::STYLE, XML_NAME, sExternalRefTabStyleName);
+                AddAttribute(XmlNamespace::STYLE, XML_FAMILY, XML_TABLE);
+                SvXMLElementExport aElemStyle(*this, XmlNamespace::STYLE, XML_STYLE, true, true);
+                AddAttribute(XmlNamespace::TABLE,  XML_DISPLAY, XML_FALSE);
+                SvXMLElementExport aElemStyleTabProps(*this, XmlNamespace::STYLE, XML_TABLE_PROPERTIES, true, true);
             }
         }
     }
@@ -2796,7 +2796,7 @@ void ScXMLExport::WriteTable(sal_Int32 nTable, const uno::Reference<sheet::XSpre
     ScTableProtection* pProtect = nullptr;
     if (xProtectable.is() && xProtectable->isProtected())
     {
-        AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTED, XML_TRUE);
+        AddAttribute(XmlNamespace::TABLE, XML_PROTECTED, XML_TRUE);
         if (pDoc)
         {
             pProtect = pDoc->GetTabProtection(nTable);
@@ -2825,25 +2825,25 @@ void ScXMLExport::WriteTable(sal_Int32 nTable, const uno::Reference<sheet::XSpre
                 }
                 if (!aBuffer.isEmpty())
                 {
-                    AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTION_KEY, aBuffer.makeStringAndClear());
+                    AddAttribute(XmlNamespace::TABLE, XML_PROTECTION_KEY, aBuffer.makeStringAndClear());
                     if (getSaneDefaultVersion() >= SvtSaveOptions::ODFSVER_012)
                     {
                         if (eHashUsed == PASSHASH_XL)
                         {
-                            AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
+                            AddAttribute(XmlNamespace::TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
                                          ScPassHashHelper::getHashURI(PASSHASH_XL));
                             if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
-                                AddAttribute(XML_NAMESPACE_LO_EXT, XML_PROTECTION_KEY_DIGEST_ALGORITHM_2,
+                                AddAttribute(XmlNamespace::LO_EXT, XML_PROTECTION_KEY_DIGEST_ALGORITHM_2,
                                         ScPassHashHelper::getHashURI(PASSHASH_SHA1));
                         }
                         else if (eHashUsed == PASSHASH_SHA1)
                         {
-                            AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
+                            AddAttribute(XmlNamespace::TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
                                          ScPassHashHelper::getHashURI(PASSHASH_SHA1));
                         }
                         else if (eHashUsed == PASSHASH_SHA256)
                         {
-                            AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
+                            AddAttribute(XmlNamespace::TABLE, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
                                          ScPassHashHelper::getHashURI(PASSHASH_SHA256));
                         }
                     }
@@ -2856,30 +2856,30 @@ void ScXMLExport::WriteTable(sal_Int32 nTable, const uno::Reference<sheet::XSpre
     bool bHasColumnHeader;
     GetColumnRowHeader(bHasColumnHeader, aColumnHeaderRange, bHasRowHeader, aRowHeaderRange, sPrintRanges);
     if( !sPrintRanges.isEmpty() )
-        AddAttribute( XML_NAMESPACE_TABLE, XML_PRINT_RANGES, sPrintRanges );
+        AddAttribute( XmlNamespace::TABLE, XML_PRINT_RANGES, sPrintRanges );
     else if (pDoc && !pDoc->IsPrintEntireSheet(static_cast<SCTAB>(nTable)))
-        AddAttribute( XML_NAMESPACE_TABLE, XML_PRINT, XML_FALSE);
+        AddAttribute( XmlNamespace::TABLE, XML_PRINT, XML_FALSE);
     SvXMLElementExport aElemT(*this, sElemTab, true, true);
 
     if (pProtect && pProtect->isProtected() && getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
     {
         if (pProtect->isOptionEnabled(ScTableProtection::SELECT_LOCKED_CELLS))
-            AddAttribute(XML_NAMESPACE_LO_EXT, XML_SELECT_PROTECTED_CELLS, XML_TRUE);
+            AddAttribute(XmlNamespace::LO_EXT, XML_SELECT_PROTECTED_CELLS, XML_TRUE);
         if (pProtect->isOptionEnabled(ScTableProtection::SELECT_UNLOCKED_CELLS))
-            AddAttribute(XML_NAMESPACE_LO_EXT, XML_SELECT_UNPROTECTED_CELLS, XML_TRUE);
+            AddAttribute(XmlNamespace::LO_EXT, XML_SELECT_UNPROTECTED_CELLS, XML_TRUE);
 
         if (pProtect->isOptionEnabled(ScTableProtection::INSERT_COLUMNS))
-            AddAttribute(XML_NAMESPACE_LO_EXT, XML_INSERT_COLUMNS, XML_TRUE);
+            AddAttribute(XmlNamespace::LO_EXT, XML_INSERT_COLUMNS, XML_TRUE);
         if (pProtect->isOptionEnabled(ScTableProtection::INSERT_ROWS))
-            AddAttribute(XML_NAMESPACE_LO_EXT, XML_INSERT_ROWS, XML_TRUE);
+            AddAttribute(XmlNamespace::LO_EXT, XML_INSERT_ROWS, XML_TRUE);
 
         if (pProtect->isOptionEnabled(ScTableProtection::DELETE_COLUMNS))
-            AddAttribute(XML_NAMESPACE_LO_EXT, XML_DELETE_COLUMNS, XML_TRUE);
+            AddAttribute(XmlNamespace::LO_EXT, XML_DELETE_COLUMNS, XML_TRUE);
         if (pProtect->isOptionEnabled(ScTableProtection::DELETE_ROWS))
-            AddAttribute(XML_NAMESPACE_LO_EXT, XML_DELETE_ROWS, XML_TRUE);
+            AddAttribute(XmlNamespace::LO_EXT, XML_DELETE_ROWS, XML_TRUE);
 
         OUString aElemName = GetNamespaceMap().GetQNameByKey(
-            XML_NAMESPACE_LO_EXT, GetXMLToken(XML_TABLE_PROTECTION));
+            XmlNamespace::LO_EXT, GetXMLToken(XML_TABLE_PROTECTION));
 
         SvXMLElementExport aElemProtected(*this, aElemName, true, true);
     }
@@ -3000,9 +3000,9 @@ void writeContent(
     if (!rStyleName.isEmpty())
     {
         // Formatted section with automatic style.
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_STYLE_NAME, rStyleName);
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_STYLE_NAME, rStyleName);
         OUString aElemName = rExport.GetNamespaceMap().GetQNameByKey(
-            XML_NAMESPACE_TEXT, GetXMLToken(XML_SPAN));
+            XmlNamespace::TEXT, GetXMLToken(XML_SPAN));
         pElem.reset(new SvXMLElementExport(rExport, aElemName, false, false));
     }
 
@@ -3018,14 +3018,14 @@ void writeContent(
 
                 const SvxURLField* pURLField = static_cast<const SvxURLField*>(pField);
                 const OUString& aURL = pURLField->GetURL();
-                rExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, rExport.GetRelativeReference(aURL));
-                rExport.AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, "simple");
+                rExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, rExport.GetRelativeReference(aURL));
+                rExport.AddAttribute(XmlNamespace::XLINK, XML_TYPE, "simple");
                 const OUString& aTargetFrame = pURLField->GetTargetFrame();
                 if (!aTargetFrame.isEmpty())
-                    rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_TARGET_FRAME_NAME, aTargetFrame);
+                    rExport.AddAttribute(XmlNamespace::OFFICE, XML_TARGET_FRAME_NAME, aTargetFrame);
 
                 OUString aElemName = rExport.GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_TEXT, GetXMLToken(XML_A));
+                    XmlNamespace::TEXT, GetXMLToken(XML_A));
                 SvXMLElementExport aElem(rExport, aElemName, false, false);
                 rExport.Characters(aFieldVal);
             }
@@ -3048,11 +3048,11 @@ void writeContent(
                 if (nVal < 10)
                     aBuf.append('0');
                 aBuf.append(nVal);
-                rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_DATA_STYLE_NAME, "N2");
-                rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_DATE_VALUE, aBuf.makeStringAndClear());
+                rExport.AddAttribute(XmlNamespace::STYLE, XML_DATA_STYLE_NAME, "N2");
+                rExport.AddAttribute(XmlNamespace::TEXT, XML_DATE_VALUE, aBuf.makeStringAndClear());
 
                 OUString aElemName = rExport.GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_TEXT, GetXMLToken(XML_DATE));
+                    XmlNamespace::TEXT, GetXMLToken(XML_DATE));
                 SvXMLElementExport aElem(rExport, aElemName, false, false);
                 rExport.Characters(aFieldVal);
             }
@@ -3062,7 +3062,7 @@ void writeContent(
                 // <text:title>value</text:title>
 
                 OUString aElemName = rExport.GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_TEXT, GetXMLToken(XML_TITLE));
+                    XmlNamespace::TEXT, GetXMLToken(XML_TITLE));
                 SvXMLElementExport aElem(rExport, aElemName, false, false);
                 rExport.Characters(aFieldVal);
             }
@@ -3072,7 +3072,7 @@ void writeContent(
                 // <text:sheet-name>value</text:sheet-name>
 
                 OUString aElemName = rExport.GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_TEXT, GetXMLToken(XML_SHEET_NAME));
+                    XmlNamespace::TEXT, GetXMLToken(XML_SHEET_NAME));
                 SvXMLElementExport aElem(rExport, aElemName, false, false);
                 rExport.Characters(aFieldVal);
             }
@@ -3092,7 +3092,7 @@ void flushParagraph(
     std::vector<editeng::Section>::const_iterator it, std::vector<editeng::Section>::const_iterator const & itEnd )
 {
     OUString aElemName = rExport.GetNamespaceMap().GetQNameByKey(
-        XML_NAMESPACE_TEXT, GetXMLToken(XML_P));
+        XmlNamespace::TEXT, GetXMLToken(XML_P));
     SvXMLElementExport aElemP(rExport, aElemName, false, false);
 
     for (; it != itEnd; ++it)
@@ -3118,14 +3118,14 @@ void ScXMLExport::WriteCell(ScMyCell& aCell, sal_Int32 nEqualCellCount)
     if (aCell.nStyleIndex != -1)
         AddAttribute(sAttrStyleName, pCellStyles->GetStyleNameByIndex(aCell.nStyleIndex, aCell.bIsAutoStyle));
     if (aCell.nValidationIndex > -1)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_CONTENT_VALIDATION_NAME, pValidationsContainer->GetValidationName(aCell.nValidationIndex));
+        AddAttribute(XmlNamespace::TABLE, XML_CONTENT_VALIDATION_NAME, pValidationsContainer->GetValidationName(aCell.nValidationIndex));
     const bool bIsFirstMatrixCell(aCell.bIsMatrixBase);
     if (bIsFirstMatrixCell)
     {
         SCCOL nColumns( aCell.aMatrixRange.aEnd.Col() - aCell.aMatrixRange.aStart.Col() + 1 );
         SCROW nRows( aCell.aMatrixRange.aEnd.Row() - aCell.aMatrixRange.aStart.Row() + 1 );
-        AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_MATRIX_COLUMNS_SPANNED, OUString::number(nColumns));
-        AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_MATRIX_ROWS_SPANNED, OUString::number(nRows));
+        AddAttribute(XmlNamespace::TABLE, XML_NUMBER_MATRIX_COLUMNS_SPANNED, OUString::number(nColumns));
+        AddAttribute(XmlNamespace::TABLE, XML_NUMBER_MATRIX_ROWS_SPANNED, OUString::number(nRows));
     }
     bool bIsEmpty(false);
     switch (aCell.nType)
@@ -3141,7 +3141,7 @@ void ScXMLExport::WriteCell(ScMyCell& aCell, sal_Int32 nEqualCellCount)
                     aCell.nNumberFormat, aCell.maBaseCell.mfValue);
                 if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
                     GetNumberFormatAttributesExportHelper()->SetNumberFormatAttributes(
-                            aCell.nNumberFormat, aCell.maBaseCell.mfValue, false, XML_NAMESPACE_CALC_EXT, false);
+                            aCell.nNumberFormat, aCell.maBaseCell.mfValue, false, XmlNamespace::CALC_EXT, false);
             }
             break;
         case table::CellContentType_TEXT :
@@ -3152,7 +3152,7 @@ void ScXMLExport::WriteCell(ScMyCell& aCell, sal_Int32 nEqualCellCount)
                         sCellString, sFormattedString);
                 if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
                     GetNumberFormatAttributesExportHelper()->SetNumberFormatAttributes(
-                            sCellString, sFormattedString, false, XML_NAMESPACE_CALC_EXT);
+                            sCellString, sFormattedString, false, XmlNamespace::CALC_EXT);
             }
             break;
         case table::CellContentType_FORMULA :
@@ -3171,7 +3171,7 @@ void ScXMLExport::WriteCell(ScMyCell& aCell, sal_Int32 nEqualCellCount)
 
                         OUString aFormula = pFormulaCell->GetFormula(*mpCompileFormulaCxt);
                         sal_uInt16 nNamespacePrefix =
-                            (mpCompileFormulaCxt->getGrammar() == formula::FormulaGrammar::GRAM_ODFF ? XML_NAMESPACE_OF : XML_NAMESPACE_OOOC);
+                            (mpCompileFormulaCxt->getGrammar() == formula::FormulaGrammar::GRAM_ODFF ? XmlNamespace::OF : XmlNamespace::OOOC);
 
                         if (!bIsMatrix)
                         {
@@ -3189,7 +3189,7 @@ void ScXMLExport::WriteCell(ScMyCell& aCell, sal_Int32 nEqualCellCount)
                         if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
                         {
                             //export calcext:value-type="error"
-                            AddAttribute(XML_NAMESPACE_CALC_EXT,XML_VALUE_TYPE, OUString("error"));
+                            AddAttribute(XmlNamespace::CALC_EXT,XML_VALUE_TYPE, OUString("error"));
                         }
                     }
                     else if (pFormulaCell->IsValue())
@@ -3204,7 +3204,7 @@ void ScXMLExport::WriteCell(ScMyCell& aCell, sal_Int32 nEqualCellCount)
                             if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
                             {
                                 GetNumberFormatAttributesExportHelper()->SetNumberFormatAttributes(
-                                        aCell.nNumberFormat, pDoc->GetValue(aCell.maCellAddress), false, XML_NAMESPACE_CALC_EXT, false );
+                                        aCell.nNumberFormat, pDoc->GetValue(aCell.maCellAddress), false, XmlNamespace::CALC_EXT, false );
                             }
                         }
                     }
@@ -3216,7 +3216,7 @@ void ScXMLExport::WriteCell(ScMyCell& aCell, sal_Int32 nEqualCellCount)
                             AddAttribute(sAttrStringValue, aCell.maBaseCell.getString(pDoc));
                             if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
                             {
-                                AddAttribute(XML_NAMESPACE_CALC_EXT,XML_VALUE_TYPE, XML_STRING);
+                                AddAttribute(XmlNamespace::CALC_EXT,XML_VALUE_TYPE, XML_STRING);
                             }
                         }
                     }
@@ -3237,8 +3237,8 @@ void ScXMLExport::WriteCell(ScMyCell& aCell, sal_Int32 nEqualCellCount)
         {
             SCCOL nColumns( aCell.aMergeRange.aEnd.Col() - aCell.aMergeRange.aStart.Col() + 1 );
             SCROW nRows( aCell.aMergeRange.aEnd.Row() - aCell.aMergeRange.aStart.Row() + 1 );
-            AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_SPANNED, OUString::number(nColumns));
-            AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_ROWS_SPANNED, OUString::number(nRows));
+            AddAttribute(XmlNamespace::TABLE, XML_NUMBER_COLUMNS_SPANNED, OUString::number(nColumns));
+            AddAttribute(XmlNamespace::TABLE, XML_NUMBER_ROWS_SPANNED, OUString::number(nRows));
         }
     }
     SvXMLElementExport aElemC(*this, *pCellString, true, true);
@@ -3310,7 +3310,7 @@ void ScXMLExport::WriteEditCell(const EditTextObject* pText)
 
 void ScXMLExport::WriteMultiLineFormulaResult(const ScFormulaCell* pCell)
 {
-    OUString aElemName = GetNamespaceMap().GetQNameByKey(XML_NAMESPACE_TEXT, GetXMLToken(XML_P));
+    OUString aElemName = GetNamespaceMap().GetQNameByKey(XmlNamespace::TEXT, GetXMLToken(XML_P));
 
     OUString aResStr = pCell->GetResultString().getString();
     const sal_Unicode* p = aResStr.getStr();
@@ -3354,7 +3354,7 @@ void ScXMLExport::ExportShape(const uno::Reference < drawing::XShape >& xShape,
         sal_Int32 nZOrder = 0;
         if (xShapeProps->getPropertyValue("ZOrder") >>= nZOrder)
         {
-            AddAttribute(XML_NAMESPACE_DRAW, XML_ZINDEX, OUString::number(nZOrder));
+            AddAttribute(XmlNamespace::DRAW, XML_ZINDEX, OUString::number(nZOrder));
         }
         uno::Reference< beans::XPropertySetInfo > xPropSetInfo = xShapeProps->getPropertySetInfo();
         if( xPropSetInfo->hasPropertyByName( sPropCLSID ) )
@@ -3385,7 +3385,7 @@ void ScXMLExport::ExportShape(const uno::Reference < drawing::XShape >& xShape,
                                         bIsChart = true;
                                         SvXMLAttributeList* pAttrList = new SvXMLAttributeList();
                                         pAttrList->AddAttribute(
-                                            GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_DRAW, GetXMLToken( XML_NOTIFY_ON_UPDATE_OF_RANGES ) ), sRanges );
+                                            GetNamespaceMap().GetQNameByKey( XmlNamespace::DRAW, GetXMLToken( XML_NOTIFY_ON_UPDATE_OF_RANGES ) ), sRanges );
                                         GetShapeExport()->exportShape( xShape, SEF_DEFAULT, pPoint, pAttrList );
                                     }
                                 }
@@ -3418,7 +3418,7 @@ void ScXMLExport::ExportShape(const uno::Reference < drawing::XShape >& xShape,
                                     sRanges = lcl_RangeSequenceToString( aRepresentations, xRangeConverter );
                                     pAttrList = new SvXMLAttributeList();
                                     pAttrList->AddAttribute(
-                                        GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_DRAW, GetXMLToken(XML_NOTIFY_ON_UPDATE_OF_RANGES) ), sRanges );
+                                        GetNamespaceMap().GetQNameByKey( XmlNamespace::DRAW, GetXMLToken(XML_NOTIFY_ON_UPDATE_OF_RANGES) ), sRanges );
                                 }
                                 GetShapeExport()->exportShape(xShape, SEF_DEFAULT, pPoint, pAttrList);
                             }
@@ -3454,9 +3454,9 @@ void ScXMLExport::ExportShape(const uno::Reference < drawing::XShape >& xShape,
             uno::Reference< xml::sax::XAttributeList > xSaveAttribs( new  SvXMLAttributeList( GetAttrList() ) );
             ClearAttrList();
             // Add Hlink
-            AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-            AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sHlink);
-            pDrawA.reset( new SvXMLElementExport( *this, XML_NAMESPACE_DRAW, XML_A, false, false ) );
+            AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+            AddAttribute( XmlNamespace::XLINK, XML_HREF, sHlink);
+            pDrawA.reset( new SvXMLElementExport( *this, XmlNamespace::DRAW, XML_A, false, false ) );
             // Attribute list has been cleared by previous operation
             // re-add pre-loaded attributes
             AddAttributeList( xSaveAttribs );
@@ -3493,14 +3493,14 @@ void ScXMLExport::WriteShapes(const ScMyCell& rMyCell)
             {
                 OUString sEndAddress;
                 ScRangeStringConverter::GetStringFromAddress(sEndAddress, rShape.aEndAddress, pDoc, FormulaGrammar::CONV_OOO);
-                AddAttribute(XML_NAMESPACE_TABLE, XML_END_CELL_ADDRESS, sEndAddress);
+                AddAttribute(XmlNamespace::TABLE, XML_END_CELL_ADDRESS, sEndAddress);
                 OUStringBuffer sBuffer;
                 GetMM100UnitConverter().convertMeasureToXML(
                         sBuffer, rShape.nEndX);
-                AddAttribute(XML_NAMESPACE_TABLE, XML_END_X, sBuffer.makeStringAndClear());
+                AddAttribute(XmlNamespace::TABLE, XML_END_X, sBuffer.makeStringAndClear());
                 GetMM100UnitConverter().convertMeasureToXML(
                         sBuffer, rShape.nEndY);
-                AddAttribute(XML_NAMESPACE_TABLE, XML_END_Y, sBuffer.makeStringAndClear());
+                AddAttribute(XmlNamespace::TABLE, XML_END_Y, sBuffer.makeStringAndClear());
             }
             ExportShape(rShape.xShape, &aPoint);
         }
@@ -3514,7 +3514,7 @@ void ScXMLExport::WriteTableShapes()
         return;
 
     OSL_ENSURE(pTableShapes->size() > static_cast<size_t>(nCurrentTable), "wrong Table");
-    SvXMLElementExport aShapesElem(*this, XML_NAMESPACE_TABLE, XML_SHAPES, true, false);
+    SvXMLElementExport aShapesElem(*this, XmlNamespace::TABLE, XML_SHAPES, true, false);
     for (const auto& rxShape : (*pTableShapes)[nCurrentTable])
     {
         if (rxShape.is())
@@ -3540,22 +3540,22 @@ void ScXMLExport::WriteAreaLink( const ScMyCell& rMyCell )
         return;
 
     const ScMyAreaLink& rAreaLink = rMyCell.aAreaLink;
-    AddAttribute( XML_NAMESPACE_TABLE, XML_NAME, rAreaLink.sSourceStr );
-    AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-    AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, GetRelativeReference(rAreaLink.sURL) );
-    AddAttribute( XML_NAMESPACE_TABLE, XML_FILTER_NAME, rAreaLink.sFilter );
+    AddAttribute( XmlNamespace::TABLE, XML_NAME, rAreaLink.sSourceStr );
+    AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+    AddAttribute( XmlNamespace::XLINK, XML_HREF, GetRelativeReference(rAreaLink.sURL) );
+    AddAttribute( XmlNamespace::TABLE, XML_FILTER_NAME, rAreaLink.sFilter );
     if( !rAreaLink.sFilterOptions.isEmpty() )
-        AddAttribute( XML_NAMESPACE_TABLE, XML_FILTER_OPTIONS, rAreaLink.sFilterOptions );
+        AddAttribute( XmlNamespace::TABLE, XML_FILTER_OPTIONS, rAreaLink.sFilterOptions );
     OUStringBuffer sValue;
-    AddAttribute( XML_NAMESPACE_TABLE, XML_LAST_COLUMN_SPANNED, OUString::number(rAreaLink.GetColCount()) );
-    AddAttribute( XML_NAMESPACE_TABLE, XML_LAST_ROW_SPANNED, OUString::number(rAreaLink.GetRowCount()) );
+    AddAttribute( XmlNamespace::TABLE, XML_LAST_COLUMN_SPANNED, OUString::number(rAreaLink.GetColCount()) );
+    AddAttribute( XmlNamespace::TABLE, XML_LAST_ROW_SPANNED, OUString::number(rAreaLink.GetRowCount()) );
     if( rAreaLink.nRefresh )
     {
         ::sax::Converter::convertDuration( sValue,
                 static_cast<double>(rAreaLink.nRefresh) / 86400 );
-        AddAttribute( XML_NAMESPACE_TABLE, XML_REFRESH_DELAY, sValue.makeStringAndClear() );
+        AddAttribute( XmlNamespace::TABLE, XML_REFRESH_DELAY, sValue.makeStringAndClear() );
     }
-    SvXMLElementExport aElem( *this, XML_NAMESPACE_TABLE, XML_CELL_RANGE_SOURCE, true, true );
+    SvXMLElementExport aElem( *this, XmlNamespace::TABLE, XML_CELL_RANGE_SOURCE, true, true );
 }
 
 void ScXMLExport::exportAnnotationMeta( const uno::Reference < drawing::XShape >& xShape)
@@ -3576,7 +3576,7 @@ void ScXMLExport::exportAnnotationMeta( const uno::Reference < drawing::XShape >
     const OUString& sAuthor(pNote->GetAuthor());
     if (!sAuthor.isEmpty())
     {
-        SvXMLElementExport aCreatorElem( *this, XML_NAMESPACE_DC,
+        SvXMLElementExport aCreatorElem( *this, XmlNamespace::DC,
                                             XML_CREATOR, true,
                                             false );
         Characters(sAuthor);
@@ -3592,14 +3592,14 @@ void ScXMLExport::exportAnnotationMeta( const uno::Reference < drawing::XShape >
         {
             OUStringBuffer sBuf;
             GetMM100UnitConverter().convertDateTime(sBuf, fDate,true);
-            SvXMLElementExport aDateElem( *this, XML_NAMESPACE_DC,
+            SvXMLElementExport aDateElem( *this, XmlNamespace::DC,
                                             XML_DATE, true,
                                             false );
             Characters(sBuf.makeStringAndClear());
         }
         else
         {
-            SvXMLElementExport aDateElem( *this, XML_NAMESPACE_META,
+            SvXMLElementExport aDateElem( *this, XmlNamespace::META,
                                             XML_DATE_STRING, true,
                                             false );
             Characters(aDate);
@@ -3607,7 +3607,7 @@ void ScXMLExport::exportAnnotationMeta( const uno::Reference < drawing::XShape >
     }
     else
     {
-        SvXMLElementExport aDateElem( *this, XML_NAMESPACE_META,
+        SvXMLElementExport aDateElem( *this, XmlNamespace::META,
                                         XML_DATE_STRING, true,
                                         false );
         Characters(aDate);
@@ -3621,7 +3621,7 @@ void ScXMLExport::WriteAnnotation(ScMyCell& rMyCell)
         return;
 
     if (pNote->IsCaptionShown())
-        AddAttribute(XML_NAMESPACE_OFFICE, XML_DISPLAY, XML_TRUE);
+        AddAttribute(XmlNamespace::OFFICE, XML_DISPLAY, XML_TRUE);
 
     pCurrentCell = &rMyCell;
 
@@ -3648,7 +3648,7 @@ void ScXMLExport::WriteDetective( const ScMyCell& rMyCell )
     if( !(nObjCount || nOpCount) )
         return;
 
-    SvXMLElementExport aDetElem( *this, XML_NAMESPACE_TABLE, XML_DETECTIVE, true, true );
+    SvXMLElementExport aDetElem( *this, XmlNamespace::TABLE, XML_DETECTIVE, true, true );
     OUString sString;
     for(const auto& rObj : rObjVec)
     {
@@ -3657,24 +3657,24 @@ void ScXMLExport::WriteDetective( const ScMyCell& rMyCell )
             if( (rObj.eObjType == SC_DETOBJ_ARROW) || (rObj.eObjType == SC_DETOBJ_TOOTHERTAB))
             {
                 ScRangeStringConverter::GetStringFromRange( sString, rObj.aSourceRange, pDoc, FormulaGrammar::CONV_OOO );
-                AddAttribute( XML_NAMESPACE_TABLE, XML_CELL_RANGE_ADDRESS, sString );
+                AddAttribute( XmlNamespace::TABLE, XML_CELL_RANGE_ADDRESS, sString );
             }
             ScXMLConverter::GetStringFromDetObjType( sString, rObj.eObjType );
-            AddAttribute( XML_NAMESPACE_TABLE, XML_DIRECTION, sString );
+            AddAttribute( XmlNamespace::TABLE, XML_DIRECTION, sString );
             if( rObj.bHasError )
-                AddAttribute( XML_NAMESPACE_TABLE, XML_CONTAINS_ERROR, XML_TRUE );
+                AddAttribute( XmlNamespace::TABLE, XML_CONTAINS_ERROR, XML_TRUE );
         }
         else
-            AddAttribute( XML_NAMESPACE_TABLE, XML_MARKED_INVALID, XML_TRUE );
-        SvXMLElementExport aRangeElem( *this, XML_NAMESPACE_TABLE, XML_HIGHLIGHTED_RANGE, true, true );
+            AddAttribute( XmlNamespace::TABLE, XML_MARKED_INVALID, XML_TRUE );
+        SvXMLElementExport aRangeElem( *this, XmlNamespace::TABLE, XML_HIGHLIGHTED_RANGE, true, true );
     }
     for(const auto& rOp : rOpVec)
     {
         OUString sOpString;
         ScXMLConverter::GetStringFromDetOpType( sOpString, rOp.eOpType );
-        AddAttribute( XML_NAMESPACE_TABLE, XML_NAME, sOpString );
-        AddAttribute( XML_NAMESPACE_TABLE, XML_INDEX, OUString::number(rOp.nIndex) );
-        SvXMLElementExport aRangeElem( *this, XML_NAMESPACE_TABLE, XML_OPERATION, true, true );
+        AddAttribute( XmlNamespace::TABLE, XML_NAME, sOpString );
+        AddAttribute( XmlNamespace::TABLE, XML_INDEX, OUString::number(rOp.nIndex) );
+        SvXMLElementExport aRangeElem( *this, XmlNamespace::TABLE, XML_OPERATION, true, true );
     }
 }
 
@@ -3793,46 +3793,46 @@ void ScXMLExport::WriteCalculationSettings(const uno::Reference <sheet::XSpreads
         return;
 
     if (bIgnoreCase)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_CASE_SENSITIVE, XML_FALSE);
+        AddAttribute(XmlNamespace::TABLE, XML_CASE_SENSITIVE, XML_FALSE);
     if (bCalcAsShown)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_PRECISION_AS_SHOWN, XML_TRUE);
+        AddAttribute(XmlNamespace::TABLE, XML_PRECISION_AS_SHOWN, XML_TRUE);
     if (!bMatchWholeCell)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_SEARCH_CRITERIA_MUST_APPLY_TO_WHOLE_CELL, XML_FALSE);
+        AddAttribute(XmlNamespace::TABLE, XML_SEARCH_CRITERIA_MUST_APPLY_TO_WHOLE_CELL, XML_FALSE);
     if (!bLookUpLabels)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_AUTOMATIC_FIND_LABELS, XML_FALSE);
+        AddAttribute(XmlNamespace::TABLE, XML_AUTOMATIC_FIND_LABELS, XML_FALSE);
     if (!bUseRegularExpressions)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_USE_REGULAR_EXPRESSIONS, XML_FALSE);
+        AddAttribute(XmlNamespace::TABLE, XML_USE_REGULAR_EXPRESSIONS, XML_FALSE);
     if (bUseWildcards)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_USE_WILDCARDS, XML_TRUE);
+        AddAttribute(XmlNamespace::TABLE, XML_USE_WILDCARDS, XML_TRUE);
     if (nYear2000 != 1930)
     {
-        AddAttribute(XML_NAMESPACE_TABLE, XML_NULL_YEAR, OUString::number(nYear2000));
+        AddAttribute(XmlNamespace::TABLE, XML_NULL_YEAR, OUString::number(nYear2000));
     }
-    SvXMLElementExport aCalcSettings(*this, XML_NAMESPACE_TABLE, XML_CALCULATION_SETTINGS, true, true);
+    SvXMLElementExport aCalcSettings(*this, XmlNamespace::TABLE, XML_CALCULATION_SETTINGS, true, true);
     {
         if (aNullDate.Day != 30 || aNullDate.Month != 12 || aNullDate.Year != 1899)
         {
             OUStringBuffer sDate;
             SvXMLUnitConverter::convertDateTime(sDate, 0.0, aNullDate);
-            AddAttribute(XML_NAMESPACE_TABLE, XML_DATE_VALUE, sDate.makeStringAndClear());
-            SvXMLElementExport aElemNullDate(*this, XML_NAMESPACE_TABLE, XML_NULL_DATE, true, true);
+            AddAttribute(XmlNamespace::TABLE, XML_DATE_VALUE, sDate.makeStringAndClear());
+            SvXMLElementExport aElemNullDate(*this, XmlNamespace::TABLE, XML_NULL_DATE, true, true);
         }
         if (bIsIterationEnabled || nIterationCount != 100 || !::rtl::math::approxEqual(fIterationEpsilon, 0.001))
         {
             OUStringBuffer sBuffer;
             if (bIsIterationEnabled)
-                AddAttribute(XML_NAMESPACE_TABLE, XML_STATUS, XML_ENABLE);
+                AddAttribute(XmlNamespace::TABLE, XML_STATUS, XML_ENABLE);
             if (nIterationCount != 100)
             {
-                AddAttribute(XML_NAMESPACE_TABLE, XML_STEPS, OUString::number(nIterationCount));
+                AddAttribute(XmlNamespace::TABLE, XML_STEPS, OUString::number(nIterationCount));
             }
             if (!::rtl::math::approxEqual(fIterationEpsilon, 0.001))
             {
                 ::sax::Converter::convertDouble(sBuffer,
                         fIterationEpsilon);
-                AddAttribute(XML_NAMESPACE_TABLE, XML_MAXIMUM_DIFFERENCE, sBuffer.makeStringAndClear());
+                AddAttribute(XmlNamespace::TABLE, XML_MAXIMUM_DIFFERENCE, sBuffer.makeStringAndClear());
             }
-            SvXMLElementExport aElemIteration(*this, XML_NAMESPACE_TABLE, XML_ITERATION, true, true);
+            SvXMLElementExport aElemIteration(*this, XmlNamespace::TABLE, XML_ITERATION, true, true);
         }
     }
 }
@@ -3885,24 +3885,24 @@ void ScXMLExport::WriteTableSource()
     if (sLink.isEmpty())
         return;
 
-    AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE);
-    AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, GetRelativeReference(sLink));
+    AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE);
+    AddAttribute(XmlNamespace::XLINK, XML_HREF, GetRelativeReference(sLink));
     if (!sTableName.isEmpty())
-        AddAttribute(XML_NAMESPACE_TABLE, XML_TABLE_NAME, sTableName);
+        AddAttribute(XmlNamespace::TABLE, XML_TABLE_NAME, sTableName);
     if (!sFilter.isEmpty())
-        AddAttribute(XML_NAMESPACE_TABLE, XML_FILTER_NAME, sFilter);
+        AddAttribute(XmlNamespace::TABLE, XML_FILTER_NAME, sFilter);
     if (!sFilterOptions.isEmpty())
-        AddAttribute(XML_NAMESPACE_TABLE, XML_FILTER_OPTIONS, sFilterOptions);
+        AddAttribute(XmlNamespace::TABLE, XML_FILTER_OPTIONS, sFilterOptions);
     if (nMode != sheet::SheetLinkMode_NORMAL)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_MODE, XML_COPY_RESULTS_ONLY);
+        AddAttribute(XmlNamespace::TABLE, XML_MODE, XML_COPY_RESULTS_ONLY);
     if( nRefresh )
     {
         OUStringBuffer sBuffer;
         ::sax::Converter::convertDuration( sBuffer,
                 static_cast<double>(nRefresh) / 86400 );
-        AddAttribute( XML_NAMESPACE_TABLE, XML_REFRESH_DELAY, sBuffer.makeStringAndClear() );
+        AddAttribute( XmlNamespace::TABLE, XML_REFRESH_DELAY, sBuffer.makeStringAndClear() );
     }
-    SvXMLElementExport aSourceElem(*this, XML_NAMESPACE_TABLE, XML_TABLE_SOURCE, true, true);
+    SvXMLElementExport aSourceElem(*this, XmlNamespace::TABLE, XML_TABLE_SOURCE, true, true);
 }
 
 // core implementation
@@ -3916,28 +3916,28 @@ void ScXMLExport::WriteScenario()
     ScScenarioFlags nFlags;
     pDoc->GetScenarioData(static_cast<SCTAB>(nCurrentTable), sComment, aColor, nFlags);
     if (!(nFlags & ScScenarioFlags::ShowFrame))
-        AddAttribute(XML_NAMESPACE_TABLE, XML_DISPLAY_BORDER, XML_FALSE);
+        AddAttribute(XmlNamespace::TABLE, XML_DISPLAY_BORDER, XML_FALSE);
     OUStringBuffer aBuffer;
     ::sax::Converter::convertColor(aBuffer, aColor);
-    AddAttribute(XML_NAMESPACE_TABLE, XML_BORDER_COLOR, aBuffer.makeStringAndClear());
+    AddAttribute(XmlNamespace::TABLE, XML_BORDER_COLOR, aBuffer.makeStringAndClear());
     if (!(nFlags & ScScenarioFlags::TwoWay))
-        AddAttribute(XML_NAMESPACE_TABLE, XML_COPY_BACK, XML_FALSE);
+        AddAttribute(XmlNamespace::TABLE, XML_COPY_BACK, XML_FALSE);
     if (!(nFlags & ScScenarioFlags::Attrib))
-        AddAttribute(XML_NAMESPACE_TABLE, XML_COPY_STYLES, XML_FALSE);
+        AddAttribute(XmlNamespace::TABLE, XML_COPY_STYLES, XML_FALSE);
     if (nFlags & ScScenarioFlags::Value)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_COPY_FORMULAS, XML_FALSE);
+        AddAttribute(XmlNamespace::TABLE, XML_COPY_FORMULAS, XML_FALSE);
     if (nFlags & ScScenarioFlags::Protected)
-        AddAttribute(XML_NAMESPACE_TABLE, XML_PROTECTED, XML_TRUE);
+        AddAttribute(XmlNamespace::TABLE, XML_PROTECTED, XML_TRUE);
     ::sax::Converter::convertBool(aBuffer,
             pDoc->IsActiveScenario(static_cast<SCTAB>(nCurrentTable)));
-    AddAttribute(XML_NAMESPACE_TABLE, XML_IS_ACTIVE, aBuffer.makeStringAndClear());
+    AddAttribute(XmlNamespace::TABLE, XML_IS_ACTIVE, aBuffer.makeStringAndClear());
     const ScRangeList* pRangeList = pDoc->GetScenarioRanges(static_cast<SCTAB>(nCurrentTable));
     OUString sRangeListStr;
     ScRangeStringConverter::GetStringFromRangeList( sRangeListStr, pRangeList, pDoc, FormulaGrammar::CONV_OOO );
-    AddAttribute(XML_NAMESPACE_TABLE, XML_SCENARIO_RANGES, sRangeListStr);
+    AddAttribute(XmlNamespace::TABLE, XML_SCENARIO_RANGES, sRangeListStr);
     if (!sComment.isEmpty())
-        AddAttribute(XML_NAMESPACE_TABLE, XML_COMMENT, sComment);
-    SvXMLElementExport aElem(*this, XML_NAMESPACE_TABLE, XML_SCENARIO, true, true);
+        AddAttribute(XmlNamespace::TABLE, XML_COMMENT, sComment);
+    SvXMLElementExport aElem(*this, XmlNamespace::TABLE, XML_SCENARIO, true, true);
 }
 
 void ScXMLExport::WriteTheLabelRanges( const uno::Reference< sheet::XSpreadsheetDocument >& xSpreadDoc )
@@ -3956,7 +3956,7 @@ void ScXMLExport::WriteTheLabelRanges( const uno::Reference< sheet::XSpreadsheet
 
     if( nCount )
     {
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_TABLE, XML_LABEL_RANGES, true, true );
+        SvXMLElementExport aElem( *this, XmlNamespace::TABLE, XML_LABEL_RANGES, true, true );
         WriteLabelRanges( xColRangesIAccess, true );
         WriteLabelRanges( xRowRangesIAccess, false );
     }
@@ -3975,12 +3975,12 @@ void ScXMLExport::WriteLabelRanges( const uno::Reference< container::XIndexAcces
             OUString sRangeStr;
             table::CellRangeAddress aCellRange( xRange->getLabelArea() );
             ScRangeStringConverter::GetStringFromRange( sRangeStr, aCellRange, pDoc, FormulaGrammar::CONV_OOO );
-            AddAttribute( XML_NAMESPACE_TABLE, XML_LABEL_CELL_RANGE_ADDRESS, sRangeStr );
+            AddAttribute( XmlNamespace::TABLE, XML_LABEL_CELL_RANGE_ADDRESS, sRangeStr );
             aCellRange = xRange->getDataArea();
             ScRangeStringConverter::GetStringFromRange( sRangeStr, aCellRange, pDoc, FormulaGrammar::CONV_OOO );
-            AddAttribute( XML_NAMESPACE_TABLE, XML_DATA_CELL_RANGE_ADDRESS, sRangeStr );
-            AddAttribute( XML_NAMESPACE_TABLE, XML_ORIENTATION, bColumn ? XML_COLUMN : XML_ROW );
-            SvXMLElementExport aElem( *this, XML_NAMESPACE_TABLE, XML_LABEL_RANGE, true, true );
+            AddAttribute( XmlNamespace::TABLE, XML_DATA_CELL_RANGE_ADDRESS, sRangeStr );
+            AddAttribute( XmlNamespace::TABLE, XML_ORIENTATION, bColumn ? XML_COLUMN : XML_ROW );
+            SvXMLElementExport aElem( *this, XmlNamespace::TABLE, XML_LABEL_RANGE, true, true );
         }
     }
 }
@@ -4008,16 +4008,16 @@ void ScXMLExport::WriteExternalDataMapping()
     if (rDataSources.empty())
         return;
 
-    SvXMLElementExport aMappings(*this, XML_NAMESPACE_CALC_EXT, XML_DATA_MAPPINGS, true, true);
+    SvXMLElementExport aMappings(*this, XmlNamespace::CALC_EXT, XML_DATA_MAPPINGS, true, true);
     for (const auto& itr : rDataSources)
     {
-        AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, itr.getURL());
-        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_PROVIDER, itr.getProvider());
-        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_DATA_FREQUENCY, OUString::number(sc::ExternalDataSource::getUpdateFrequency()));
-        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_ID, itr.getID());
-        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_DATABASE_NAME, itr.getDBName());
+        AddAttribute(XmlNamespace::XLINK, XML_HREF, itr.getURL());
+        AddAttribute(XmlNamespace::CALC_EXT, XML_PROVIDER, itr.getProvider());
+        AddAttribute(XmlNamespace::CALC_EXT, XML_DATA_FREQUENCY, OUString::number(sc::ExternalDataSource::getUpdateFrequency()));
+        AddAttribute(XmlNamespace::CALC_EXT, XML_ID, itr.getID());
+        AddAttribute(XmlNamespace::CALC_EXT, XML_DATABASE_NAME, itr.getDBName());
 
-        SvXMLElementExport aMapping(*this, XML_NAMESPACE_CALC_EXT, XML_DATA_MAPPING, true, true);
+        SvXMLElementExport aMapping(*this, XmlNamespace::CALC_EXT, XML_DATA_MAPPING, true, true);
         // Add the data transformations
         WriteExternalDataTransformations(itr.getDataTransformation());
     }
@@ -4025,7 +4025,7 @@ void ScXMLExport::WriteExternalDataMapping()
 
 void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared_ptr<sc::DataTransformation>>& aDataTransformations)
 {
-    SvXMLElementExport aTransformations(*this, XML_NAMESPACE_CALC_EXT, XML_DATA_TRANSFORMATIONS, true, true);
+    SvXMLElementExport aTransformations(*this, XmlNamespace::CALC_EXT, XML_DATA_TRANSFORMATIONS, true, true);
     for (auto& itr : aDataTransformations)
     {
         sc::TransformationType aTransformationType = itr->getTransformationType();
@@ -4037,12 +4037,12 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
                 // Delete Columns Transformation
                 std::shared_ptr<sc::ColumnRemoveTransformation> aDeleteTransformation = std::dynamic_pointer_cast<sc::ColumnRemoveTransformation>(itr);
                 std::set<SCCOL> aColumns = aDeleteTransformation->getColumns();
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN_REMOVE_TRANSFORMATION, true, true);
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT, XML_COLUMN_REMOVE_TRANSFORMATION, true, true);
                 for(auto& col : aColumns)
                 {
                     // Add Columns
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLUMN, OUString::number(col));
-                    SvXMLElementExport aCol(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_COLUMN, OUString::number(col));
+                    SvXMLElementExport aCol(*this, XmlNamespace::CALC_EXT, XML_COLUMN, true, true);
                 }
             }
             break;
@@ -4050,9 +4050,9 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
             {
                 std::shared_ptr<sc::SplitColumnTransformation> aSplitTransformation = std::dynamic_pointer_cast<sc::SplitColumnTransformation>(itr);
 
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLUMN, OUString::number(aSplitTransformation->getColumn()));
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_SEPARATOR, OUString::number(aSplitTransformation->getSeparator()));
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN_SPLIT_TRANSFORMATION, true, true);
+                AddAttribute(XmlNamespace::CALC_EXT, XML_COLUMN, OUString::number(aSplitTransformation->getColumn()));
+                AddAttribute(XmlNamespace::CALC_EXT, XML_SEPARATOR, OUString::number(aSplitTransformation->getSeparator()));
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT, XML_COLUMN_SPLIT_TRANSFORMATION, true, true);
             }
             break;
             case sc::TransformationType::MERGE_TRANSFORMATION:
@@ -4061,14 +4061,14 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
                 std::shared_ptr<sc::MergeColumnTransformation> aMergeTransformation = std::dynamic_pointer_cast<sc::MergeColumnTransformation>(itr);
                 std::set<SCCOL> aColumns = aMergeTransformation->getColumns();
 
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_MERGE_STRING, aMergeTransformation->getMergeString());
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN_MERGE_TRANSFORMATION, true, true);
+                AddAttribute(XmlNamespace::CALC_EXT, XML_MERGE_STRING, aMergeTransformation->getMergeString());
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT, XML_COLUMN_MERGE_TRANSFORMATION, true, true);
 
                 for(auto& col : aColumns)
                 {
                     // Columns
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLUMN, OUString::number(col));
-                    SvXMLElementExport aCol(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_COLUMN, OUString::number(col));
+                    SvXMLElementExport aCol(*this, XmlNamespace::CALC_EXT, XML_COLUMN, true, true);
                 }
             }
             break;
@@ -4086,7 +4086,7 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
                 // Streamed range
                 ScRange aRange = pStrm->GetRange();
 
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN_SORT_TRANSFORMATION, true, true);
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT, XML_COLUMN_SORT_TRANSFORMATION, true, true);
 
                 writeSort(*this, aSortParam, aRange, pDoc);
             }
@@ -4101,28 +4101,28 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
                 switch ( aTextTransformType )
                 {
                     case sc::TEXT_TRANSFORM_TYPE::TO_LOWER:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_CASEMAP_LOWERCASE);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_CASEMAP_LOWERCASE);
                     break;
                     case sc::TEXT_TRANSFORM_TYPE::TO_UPPER:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_CASEMAP_UPPERCASE);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_CASEMAP_UPPERCASE);
                     break;
                     case sc::TEXT_TRANSFORM_TYPE::CAPITALIZE:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_CASEMAP_CAPITALIZE);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_CASEMAP_CAPITALIZE);
                     break;
                     case sc::TEXT_TRANSFORM_TYPE::TRIM:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_TRIM);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_TRIM);
                     break;
                 }
 
                 std::set<SCCOL> aColumns = aTextTransformation->getColumns();
 
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN_TEXT_TRANSFORMATION, true, true);
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT, XML_COLUMN_TEXT_TRANSFORMATION, true, true);
 
                 for(auto& col : aColumns)
                 {
                     // Columns
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLUMN, OUString::number(col));
-                    SvXMLElementExport aCol(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_COLUMN, OUString::number(col));
+                    SvXMLElementExport aCol(*this, XmlNamespace::CALC_EXT, XML_COLUMN, true, true);
                 }
             }
             break;
@@ -4137,26 +4137,26 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
                 switch (aAggregateType)
                 {
                     case sc::AGGREGATE_FUNCTION::SUM:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_SUM);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_SUM);
                     break;
                     case sc::AGGREGATE_FUNCTION::AVERAGE:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_AVERAGE);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_AVERAGE);
                     break;
                     case sc::AGGREGATE_FUNCTION::MIN:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_MIN);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_MIN);
                     break;
                     case sc::AGGREGATE_FUNCTION::MAX:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_MAX);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_MAX);
                     break;
                 }
 
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT,XML_COLUMN_AGGREGATE_TRANSFORMATION, true, true);
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT,XML_COLUMN_AGGREGATE_TRANSFORMATION, true, true);
 
                 for(auto& col : aColumns)
                 {
                     // Columns
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLUMN, OUString::number(col));
-                    SvXMLElementExport aCol(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_COLUMN, OUString::number(col));
+                    SvXMLElementExport aCol(*this, XmlNamespace::CALC_EXT, XML_COLUMN, true, true);
                 }
             }
             break;
@@ -4170,55 +4170,55 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
                 switch ( aNumberTransformType )
                 {
                     case sc::NUMBER_TRANSFORM_TYPE::ROUND:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_ROUND);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_ROUND);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::ROUND_UP:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_ROUND_UP);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_ROUND_UP);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::ROUND_DOWN:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_ROUND_DOWN);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_ROUND_DOWN);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::ABSOLUTE:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_ABS);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_ABS);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::LOG_E:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_LOG);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_LOG);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::LOG_10:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_LOG_10);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_LOG_10);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::CUBE:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_CUBE);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_CUBE);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::SQUARE:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_SQUARE);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_SQUARE);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::SQUARE_ROOT:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_SQUARE_ROOT);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_SQUARE_ROOT);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::EXPONENT:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_EXPONENTIAL);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_EXPONENTIAL);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::IS_EVEN:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_EVEN);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_EVEN);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::IS_ODD:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_ODD);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_ODD);
                     break;
                     case sc::NUMBER_TRANSFORM_TYPE::SIGN:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_SIGN);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_SIGN);
                     break;
                 }
 
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_PRECISION, OUString::number(aNumberTransformation->getPrecision()));
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN_NUMBER_TRANSFORMATION, true, true);
+                AddAttribute(XmlNamespace::CALC_EXT, XML_PRECISION, OUString::number(aNumberTransformation->getPrecision()));
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT, XML_COLUMN_NUMBER_TRANSFORMATION, true, true);
 
                 std::set<SCCOL> aColumns = aNumberTransformation->getColumn();
                 for(auto& col : aColumns)
                 {
                     // Columns
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLUMN, OUString::number(col));
-                    SvXMLElementExport aCol(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_COLUMN, OUString::number(col));
+                    SvXMLElementExport aCol(*this, XmlNamespace::CALC_EXT, XML_COLUMN, true, true);
                 }
             }
             break;
@@ -4228,14 +4228,14 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
                 std::shared_ptr<sc::ReplaceNullTransformation> aReplaceNullTransformation = std::dynamic_pointer_cast<sc::ReplaceNullTransformation>(itr);
                 std::set<SCCOL> aColumns = aReplaceNullTransformation->getColumn();
 
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_REPLACE_STRING, aReplaceNullTransformation->getReplaceString());
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN_REPLACENULL_TRANSFORMATION, true, true);
+                AddAttribute(XmlNamespace::CALC_EXT, XML_REPLACE_STRING, aReplaceNullTransformation->getReplaceString());
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT, XML_COLUMN_REPLACENULL_TRANSFORMATION, true, true);
 
                 for(auto& col : aColumns)
                 {
                     // Columns
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLUMN, OUString::number(col));
-                    SvXMLElementExport aCol(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_COLUMN, OUString::number(col));
+                    SvXMLElementExport aCol(*this, XmlNamespace::CALC_EXT, XML_COLUMN, true, true);
                 }
             }
             break;
@@ -4249,69 +4249,69 @@ void ScXMLExport::WriteExternalDataTransformations(const std::vector<std::shared
                 switch ( aDateTimeTransformationType )
                 {
                     case sc::DATETIME_TRANSFORMATION_TYPE::DATE_STRING:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_DATE_STRING);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_DATE_STRING);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::YEAR:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_YEAR);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_YEAR);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::START_OF_YEAR:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_START_OF_YEAR);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_START_OF_YEAR);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::END_OF_YEAR:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_END_OF_YEAR);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_END_OF_YEAR);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::MONTH:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_MONTH);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_MONTH);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::MONTH_NAME:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_MONTH_NAME);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_MONTH_NAME);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::START_OF_MONTH:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_START_OF_MONTH);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_START_OF_MONTH);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::END_OF_MONTH:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_END_OF_MONTH);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_END_OF_MONTH);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::DAY:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_DAY);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_DAY);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::DAY_OF_WEEK:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_DAY_OF_WEEK);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_DAY_OF_WEEK);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::DAY_OF_YEAR:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_DAY_OF_YEAR);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_DAY_OF_YEAR);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::QUARTER:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_QUARTER);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_QUARTER);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::START_OF_QUARTER:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_START_OF_QUARTER);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_START_OF_QUARTER);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::END_OF_QUARTER:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_END_OF_QUARTER);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_END_OF_QUARTER);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::TIME:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_TIME);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_TIME);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::HOUR:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_HOUR);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_HOUR);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::MINUTE:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_MINUTE);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_MINUTE);
                     break;
                     case sc::DATETIME_TRANSFORMATION_TYPE::SECOND:
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, XML_SECONDS);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, XML_SECONDS);
                     break;
                 }
 
-                SvXMLElementExport aTransformation(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN_DATETIME_TRANSFORMATION, true, true);
+                SvXMLElementExport aTransformation(*this, XmlNamespace::CALC_EXT, XML_COLUMN_DATETIME_TRANSFORMATION, true, true);
 
                 std::set<SCCOL> aColumns = aDateTimeTransformation->getColumn();
                 for(auto& col : aColumns)
                 {
                     // Columns
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLUMN, OUString::number(col));
-                    SvXMLElementExport aCol(*this, XML_NAMESPACE_CALC_EXT, XML_COLUMN, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_COLUMN, OUString::number(col));
+                    SvXMLElementExport aCol(*this, XmlNamespace::CALC_EXT, XML_COLUMN, true, true);
                 }
             }
             break;
@@ -4342,32 +4342,32 @@ void ScXMLExport::WriteDataStream()
         return;
 
     // Source URL
-    AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, GetRelativeReference(pStrm->GetURL()));
+    AddAttribute(XmlNamespace::XLINK, XML_HREF, GetRelativeReference(pStrm->GetURL()));
 
     // Streamed range
     ScRange aRange = pStrm->GetRange();
     OUString aRangeStr;
     ScRangeStringConverter::GetStringFromRange(
         aRangeStr, aRange, pDoc, formula::FormulaGrammar::CONV_OOO);
-    AddAttribute(XML_NAMESPACE_TABLE, XML_TARGET_RANGE_ADDRESS, aRangeStr);
+    AddAttribute(XmlNamespace::TABLE, XML_TARGET_RANGE_ADDRESS, aRangeStr);
 
     // Empty line refresh option.
-    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_EMPTY_LINE_REFRESH, pStrm->IsRefreshOnEmptyLine() ? XML_TRUE : XML_FALSE);
+    AddAttribute(XmlNamespace::CALC_EXT, XML_EMPTY_LINE_REFRESH, pStrm->IsRefreshOnEmptyLine() ? XML_TRUE : XML_FALSE);
 
     // New data insertion position. Either top of bottom. Default to bottom.
     xmloff::token::XMLTokenEnum eInsertPosition = XML_BOTTOM;
     if (pStrm->GetMove() == sc::DataStream::MOVE_DOWN)
         eInsertPosition = XML_TOP;
 
-    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_INSERTION_POSITION, eInsertPosition);
+    AddAttribute(XmlNamespace::CALC_EXT, XML_INSERTION_POSITION, eInsertPosition);
 
-    SvXMLElementExport aElem(*this, XML_NAMESPACE_CALC_EXT, XML_DATA_STREAM_SOURCE, true, true);
+    SvXMLElementExport aElem(*this, XmlNamespace::CALC_EXT, XML_DATA_STREAM_SOURCE, true, true);
 }
 
 void ScXMLExport::WriteNamedRange(ScRangeName* pRangeName)
 {
     //write a global or local ScRangeName
-    SvXMLElementExport aElemNEs(*this, XML_NAMESPACE_TABLE, XML_NAMED_EXPRESSIONS, true, true);
+    SvXMLElementExport aElemNEs(*this, XmlNamespace::TABLE, XML_NAMED_EXPRESSIONS, true, true);
     for (const auto& rxEntry : *pRangeName)
     {
         AddAttribute(sAttrName, rxEntry.second->GetName());
@@ -4376,7 +4376,7 @@ void ScXMLExport::WriteNamedRange(ScRangeName* pRangeName)
         rxEntry.second->ValidateTabRefs();
         ScRangeStringConverter::GetStringFromAddress( sBaseCellAddress, rxEntry.second->GetPos(), pDoc,
                             FormulaGrammar::CONV_OOO, ' ', false, ScRefFlags::ADDR_ABS_3D);
-        AddAttribute(XML_NAMESPACE_TABLE, XML_BASE_CELL_ADDRESS, sBaseCellAddress);
+        AddAttribute(XmlNamespace::TABLE, XML_BASE_CELL_ADDRESS, sBaseCellAddress);
 
         OUString sSymbol;
         rxEntry.second->GetSymbol(sSymbol, pDoc->GetStorageGrammar());
@@ -4386,7 +4386,7 @@ void ScXMLExport::WriteNamedRange(ScRangeName* pRangeName)
         {
 
             OUString sContent(sTempSymbol.copy(1, sTempSymbol.getLength() -2 ));
-            AddAttribute(XML_NAMESPACE_TABLE, XML_CELL_RANGE_ADDRESS, sContent);
+            AddAttribute(XmlNamespace::TABLE, XML_CELL_RANGE_ADDRESS, sContent);
 
             sal_Int32 nRangeType = rxEntry.second->GetUnoType();
             OUStringBuffer sBufferRangeType;
@@ -4412,14 +4412,14 @@ void ScXMLExport::WriteNamedRange(ScRangeName* pRangeName)
             }
             OUString sRangeType = sBufferRangeType.makeStringAndClear();
             if (!sRangeType.isEmpty())
-                AddAttribute(XML_NAMESPACE_TABLE, XML_RANGE_USABLE_AS, sRangeType);
-            SvXMLElementExport aElemNR(*this, XML_NAMESPACE_TABLE, XML_NAMED_RANGE, true, true);
+                AddAttribute(XmlNamespace::TABLE, XML_RANGE_USABLE_AS, sRangeType);
+            SvXMLElementExport aElemNR(*this, XmlNamespace::TABLE, XML_NAMED_RANGE, true, true);
 
         }
         else
         {
-            AddAttribute(XML_NAMESPACE_TABLE, XML_EXPRESSION, sTempSymbol);
-            SvXMLElementExport aElemNE(*this, XML_NAMESPACE_TABLE, XML_NAMED_EXPRESSION, true, true);
+            AddAttribute(XmlNamespace::TABLE, XML_EXPRESSION, sTempSymbol);
+            SvXMLElementExport aElemNE(*this, XmlNamespace::TABLE, XML_NAMED_EXPRESSION, true, true);
         }
     }
 }
@@ -4498,15 +4498,15 @@ void ScXMLExport::ExportConditionalFormat(SCTAB nTab)
     if (pCondFormatList->empty())
         return;
 
-    SvXMLElementExport aElementCondFormats(*this, XML_NAMESPACE_CALC_EXT, XML_CONDITIONAL_FORMATS, true, true);
+    SvXMLElementExport aElementCondFormats(*this, XmlNamespace::CALC_EXT, XML_CONDITIONAL_FORMATS, true, true);
 
     for(const auto& rxCondFormat : *pCondFormatList)
     {
         OUString sRanges;
         const ScRangeList& rRangeList = rxCondFormat->GetRange();
         ScRangeStringConverter::GetStringFromRangeList( sRanges, &rRangeList, pDoc, formula::FormulaGrammar::CONV_OOO );
-        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TARGET_RANGE_ADDRESS, sRanges);
-        SvXMLElementExport aElementCondFormat(*this, XML_NAMESPACE_CALC_EXT, XML_CONDITIONAL_FORMAT, true, true);
+        AddAttribute(XmlNamespace::CALC_EXT, XML_TARGET_RANGE_ADDRESS, sRanges);
+        SvXMLElementExport aElementCondFormat(*this, XmlNamespace::CALC_EXT, XML_CONDITIONAL_FORMAT, true, true);
         size_t nEntries = rxCondFormat->size();
         for(size_t i = 0; i < nEntries; ++i)
         {
@@ -4631,48 +4631,48 @@ void ScXMLExport::ExportConditionalFormat(SCTAB nTab)
                         SAL_WARN("sc", "unimplemented conditional format export");
                 }
                 OUString sStyle = ScStyleNameConversion::DisplayToProgrammaticName(pEntry->GetStyle(), SfxStyleFamily::Para);
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_APPLY_STYLE_NAME, sStyle);
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, aCond.makeStringAndClear());
+                AddAttribute(XmlNamespace::CALC_EXT, XML_APPLY_STYLE_NAME, sStyle);
+                AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, aCond.makeStringAndClear());
 
                 OUString sBaseAddress;
                 ScRangeStringConverter::GetStringFromAddress( sBaseAddress, aPos, pDoc,formula::FormulaGrammar::CONV_ODF );
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_BASE_CELL_ADDRESS, sBaseAddress);
-                SvXMLElementExport aElementCondEntry(*this, XML_NAMESPACE_CALC_EXT, XML_CONDITION, true, true);
+                AddAttribute(XmlNamespace::CALC_EXT, XML_BASE_CELL_ADDRESS, sBaseAddress);
+                SvXMLElementExport aElementCondEntry(*this, XmlNamespace::CALC_EXT, XML_CONDITION, true, true);
             }
             else if(pFormatEntry->GetType() == ScFormatEntry::Type::Colorscale)
             {
-                SvXMLElementExport aElementColorScale(*this, XML_NAMESPACE_CALC_EXT, XML_COLOR_SCALE, true, true);
+                SvXMLElementExport aElementColorScale(*this, XmlNamespace::CALC_EXT, XML_COLOR_SCALE, true, true);
                 const ScColorScaleFormat& rColorScale = static_cast<const ScColorScaleFormat&>(*pFormatEntry);
                 for(const auto& rxItem : rColorScale)
                 {
                     if(rxItem->GetType() == COLORSCALE_FORMULA)
                     {
                         OUString sFormula = rxItem->GetFormula(formula::FormulaGrammar::GRAM_ODFF);
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, sFormula);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, sFormula);
                     }
                     else
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, OUString::number(rxItem->GetValue()));
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, OUString::number(rxItem->GetValue()));
 
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, getCondFormatEntryType(*rxItem));
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, getCondFormatEntryType(*rxItem));
                     OUStringBuffer aBuffer;
                     ::sax::Converter::convertColor(aBuffer, rxItem->GetColor());
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_COLOR, aBuffer.makeStringAndClear());
-                    SvXMLElementExport aElementColorScaleEntry(*this, XML_NAMESPACE_CALC_EXT, XML_COLOR_SCALE_ENTRY, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_COLOR, aBuffer.makeStringAndClear());
+                    SvXMLElementExport aElementColorScaleEntry(*this, XmlNamespace::CALC_EXT, XML_COLOR_SCALE_ENTRY, true, true);
                 }
             }
             else if(pFormatEntry->GetType() == ScFormatEntry::Type::Databar)
             {
                 const ScDataBarFormatData* pFormatData = static_cast<const ScDataBarFormat&>(*pFormatEntry).GetDataBarData();
                 if(!pFormatData->mbGradient)
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_GRADIENT, XML_FALSE);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_GRADIENT, XML_FALSE);
                 if(pFormatData->mbOnlyBar)
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_SHOW_VALUE, XML_FALSE);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_SHOW_VALUE, XML_FALSE);
 
                 if (pFormatData->mnMinLength != 0.0)
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_MIN_LENGTH, OUString::number(pFormatData->mnMinLength));
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_MIN_LENGTH, OUString::number(pFormatData->mnMinLength));
 
                 if (pFormatData->mnMaxLength != 0.0)
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_MAX_LENGTH, OUString::number(pFormatData->mnMaxLength));
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_MAX_LENGTH, OUString::number(pFormatData->mnMaxLength));
 
                 if(pFormatData->mbNeg)
                 {
@@ -4680,13 +4680,13 @@ void ScXMLExport::ExportConditionalFormat(SCTAB nTab)
                     {
                         OUStringBuffer aBuffer;
                         ::sax::Converter::convertColor(aBuffer, *pFormatData->mpNegativeColor);
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_NEGATIVE_COLOR, aBuffer.makeStringAndClear());
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_NEGATIVE_COLOR, aBuffer.makeStringAndClear());
                     }
                     else
                     {
                         OUStringBuffer aBuffer;
                         ::sax::Converter::convertColor(aBuffer, COL_LIGHTRED);
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_NEGATIVE_COLOR, aBuffer.makeStringAndClear());
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_NEGATIVE_COLOR, aBuffer.makeStringAndClear());
                     }
                 }
 
@@ -4694,82 +4694,82 @@ void ScXMLExport::ExportConditionalFormat(SCTAB nTab)
                 {
                     if(pFormatData->meAxisPosition == databar::NONE)
                     {
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_AXIS_POSITION, OUString("none"));
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_AXIS_POSITION, OUString("none"));
                     }
                     else
                     {
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_AXIS_POSITION, OUString("middle"));
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_AXIS_POSITION, OUString("middle"));
                     }
                 }
 
                 OUStringBuffer aBuffer;
                 ::sax::Converter::convertColor(aBuffer, pFormatData->maPositiveColor);
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_POSITIVE_COLOR, aBuffer.makeStringAndClear());
+                AddAttribute(XmlNamespace::CALC_EXT, XML_POSITIVE_COLOR, aBuffer.makeStringAndClear());
 
                 aBuffer.truncate();
                 ::sax::Converter::convertColor(aBuffer, pFormatData->maAxisColor);
-                AddAttribute(XML_NAMESPACE_CALC_EXT, XML_AXIS_COLOR, aBuffer.makeStringAndClear());
-                SvXMLElementExport aElementDataBar(*this, XML_NAMESPACE_CALC_EXT, XML_DATA_BAR, true, true);
+                AddAttribute(XmlNamespace::CALC_EXT, XML_AXIS_COLOR, aBuffer.makeStringAndClear());
+                SvXMLElementExport aElementDataBar(*this, XmlNamespace::CALC_EXT, XML_DATA_BAR, true, true);
 
                 {
                     if(pFormatData->mpLowerLimit->GetType() == COLORSCALE_FORMULA)
                     {
                         OUString sFormula = pFormatData->mpLowerLimit->GetFormula(formula::FormulaGrammar::GRAM_ODFF);
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, sFormula);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, sFormula);
                     }
                     else
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, OUString::number(pFormatData->mpLowerLimit->GetValue()));
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, getCondFormatEntryType(*pFormatData->mpLowerLimit));
-                    SvXMLElementExport aElementDataBarEntryLower(*this, XML_NAMESPACE_CALC_EXT, XML_FORMATTING_ENTRY, true, true);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, OUString::number(pFormatData->mpLowerLimit->GetValue()));
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, getCondFormatEntryType(*pFormatData->mpLowerLimit));
+                    SvXMLElementExport aElementDataBarEntryLower(*this, XmlNamespace::CALC_EXT, XML_FORMATTING_ENTRY, true, true);
                 }
 
                 {
                     if(pFormatData->mpUpperLimit->GetType() == COLORSCALE_FORMULA)
                     {
                         OUString sFormula = pFormatData->mpUpperLimit->GetFormula(formula::FormulaGrammar::GRAM_ODFF);
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, sFormula);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, sFormula);
                     }
                     else
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, OUString::number(pFormatData->mpUpperLimit->GetValue()));
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, getCondFormatEntryType(*pFormatData->mpUpperLimit, false));
-                    SvXMLElementExport aElementDataBarEntryUpper(*this, XML_NAMESPACE_CALC_EXT, XML_FORMATTING_ENTRY, true, true);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, OUString::number(pFormatData->mpUpperLimit->GetValue()));
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, getCondFormatEntryType(*pFormatData->mpUpperLimit, false));
+                    SvXMLElementExport aElementDataBarEntryUpper(*this, XmlNamespace::CALC_EXT, XML_FORMATTING_ENTRY, true, true);
                 }
             }
             else if(pFormatEntry->GetType() == ScFormatEntry::Type::Iconset)
             {
                 const ScIconSetFormat& rIconSet = static_cast<const ScIconSetFormat&>(*pFormatEntry);
                 OUString aIconSetName = OUString::createFromAscii(ScIconSetFormat::getIconSetName(rIconSet.GetIconSetData()->eIconSetType));
-                AddAttribute( XML_NAMESPACE_CALC_EXT, XML_ICON_SET_TYPE, aIconSetName );
+                AddAttribute( XmlNamespace::CALC_EXT, XML_ICON_SET_TYPE, aIconSetName );
                 if (rIconSet.GetIconSetData()->mbCustom)
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_CUSTOM, OUString::boolean(true));
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_CUSTOM, OUString::boolean(true));
 
-                SvXMLElementExport aElementColorScale(*this, XML_NAMESPACE_CALC_EXT, XML_ICON_SET, true, true);
+                SvXMLElementExport aElementColorScale(*this, XmlNamespace::CALC_EXT, XML_ICON_SET, true, true);
 
                 if (rIconSet.GetIconSetData()->mbCustom)
                 {
                     for (const auto& [rType, rIndex] : rIconSet.GetIconSetData()->maCustomVector)
                     {
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_CUSTOM_ICONSET_NAME, OUString::createFromAscii(ScIconSetFormat::getIconSetName(rType)));
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_CUSTOM_ICONSET_INDEX, OUString::number(rIndex));
-                        SvXMLElementExport aCustomIcon(*this, XML_NAMESPACE_CALC_EXT, XML_CUSTOM_ICONSET, true, true);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_CUSTOM_ICONSET_NAME, OUString::createFromAscii(ScIconSetFormat::getIconSetName(rType)));
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_CUSTOM_ICONSET_INDEX, OUString::number(rIndex));
+                        SvXMLElementExport aCustomIcon(*this, XmlNamespace::CALC_EXT, XML_CUSTOM_ICONSET, true, true);
                     }
 
                 }
 
                 if(!rIconSet.GetIconSetData()->mbShowValue)
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_SHOW_VALUE, XML_FALSE);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_SHOW_VALUE, XML_FALSE);
                 for (auto const& it : rIconSet)
                 {
                     if(it->GetType() == COLORSCALE_FORMULA)
                     {
                         OUString sFormula = it->GetFormula(formula::FormulaGrammar::GRAM_ODFF);
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, sFormula);
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, sFormula);
                     }
                     else
-                        AddAttribute(XML_NAMESPACE_CALC_EXT, XML_VALUE, OUString::number(it->GetValue()));
+                        AddAttribute(XmlNamespace::CALC_EXT, XML_VALUE, OUString::number(it->GetValue()));
 
-                    AddAttribute(XML_NAMESPACE_CALC_EXT, XML_TYPE, getCondFormatEntryType(*it));
-                    SvXMLElementExport aElementColorScaleEntry(*this, XML_NAMESPACE_CALC_EXT, XML_FORMATTING_ENTRY, true, true);
+                    AddAttribute(XmlNamespace::CALC_EXT, XML_TYPE, getCondFormatEntryType(*it));
+                    SvXMLElementExport aElementColorScaleEntry(*this, XmlNamespace::CALC_EXT, XML_FORMATTING_ENTRY, true, true);
                 }
             }
             else if(pFormatEntry->GetType() == ScFormatEntry::Type::Date)
@@ -4777,9 +4777,9 @@ void ScXMLExport::ExportConditionalFormat(SCTAB nTab)
                 const ScCondDateFormatEntry& rDateFormat = static_cast<const ScCondDateFormatEntry&>(*pFormatEntry);
                 OUString aDateType = getDateStringForType(rDateFormat.GetDateType());
                 OUString aStyleName = ScStyleNameConversion::DisplayToProgrammaticName(rDateFormat.GetStyleName(), SfxStyleFamily::Para );
-                AddAttribute( XML_NAMESPACE_CALC_EXT, XML_STYLE, aStyleName);
-                AddAttribute( XML_NAMESPACE_CALC_EXT, XML_DATE, aDateType);
-                SvXMLElementExport aElementDateFormat(*this, XML_NAMESPACE_CALC_EXT, XML_DATE_IS, true, true);
+                AddAttribute( XmlNamespace::CALC_EXT, XML_STYLE, aStyleName);
+                AddAttribute( XmlNamespace::CALC_EXT, XML_DATE, aDateType);
+                SvXMLElementExport aElementDateFormat(*this, XmlNamespace::CALC_EXT, XML_DATE_IS, true, true);
             }
         }
     }
@@ -4810,10 +4810,10 @@ void ScXMLExport::WriteExternalRefCaches()
             if (!pTable || !pTable->isReferenced())
                 continue;
 
-            AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, "'" + *pUrl + "'#" + rTabName);
-            AddAttribute(XML_NAMESPACE_TABLE, XML_PRINT, GetXMLToken(XML_FALSE));
-            AddAttribute(XML_NAMESPACE_TABLE, XML_STYLE_NAME, sExternalRefTabStyleName);
-            SvXMLElementExport aElemTable(*this, XML_NAMESPACE_TABLE, XML_TABLE, true, true);
+            AddAttribute(XmlNamespace::TABLE, XML_NAME, "'" + *pUrl + "'#" + rTabName);
+            AddAttribute(XmlNamespace::TABLE, XML_PRINT, GetXMLToken(XML_FALSE));
+            AddAttribute(XmlNamespace::TABLE, XML_STYLE_NAME, sExternalRefTabStyleName);
+            SvXMLElementExport aElemTable(*this, XmlNamespace::TABLE, XML_TABLE, true, true);
             {
                 const ScExternalRefManager::SrcFileData* pExtFileData = pRefMgr->getExternalFileData(nFileId);
                 if (pExtFileData)
@@ -4823,16 +4823,16 @@ void ScXMLExport::WriteExternalRefCaches()
                         aRelUrl = pExtFileData->maRelativeName;
                     else
                         aRelUrl = GetRelativeReference(pExtFileData->maRelativeName);
-                    AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE);
-                    AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, aRelUrl);
-                    AddAttribute(XML_NAMESPACE_TABLE, XML_TABLE_NAME, rTabName);
+                    AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE);
+                    AddAttribute(XmlNamespace::XLINK, XML_HREF, aRelUrl);
+                    AddAttribute(XmlNamespace::TABLE, XML_TABLE_NAME, rTabName);
                     if (!pExtFileData->maFilterName.isEmpty())
-                        AddAttribute(XML_NAMESPACE_TABLE, XML_FILTER_NAME, pExtFileData->maFilterName);
+                        AddAttribute(XmlNamespace::TABLE, XML_FILTER_NAME, pExtFileData->maFilterName);
                     if (!pExtFileData->maFilterOptions.isEmpty())
-                        AddAttribute(XML_NAMESPACE_TABLE, XML_FILTER_OPTIONS, pExtFileData->maFilterOptions);
-                    AddAttribute(XML_NAMESPACE_TABLE, XML_MODE, XML_COPY_RESULTS_ONLY);
+                        AddAttribute(XmlNamespace::TABLE, XML_FILTER_OPTIONS, pExtFileData->maFilterOptions);
+                    AddAttribute(XmlNamespace::TABLE, XML_MODE, XML_COPY_RESULTS_ONLY);
                 }
-                SvXMLElementExport aElemTableSource(*this, XML_NAMESPACE_TABLE, XML_TABLE_SOURCE, true, true);
+                SvXMLElementExport aElemTableSource(*this, XmlNamespace::TABLE, XML_TABLE_SOURCE, true, true);
             }
 
             // Determine maximum column count of used area, for repeated cells.
@@ -4854,9 +4854,9 @@ void ScXMLExport::WriteExternalRefCaches()
             // Column definitions have to be present to make a valid file
             {
                 if (nMaxColsUsed > 1)
-                    AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED,
+                    AddAttribute(XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED,
                                     OUString::number(nMaxColsUsed));
-                SvXMLElementExport aElemColumn(*this, XML_NAMESPACE_TABLE, XML_TABLE_COLUMN, true, true);
+                SvXMLElementExport aElemColumn(*this, XmlNamespace::TABLE, XML_TABLE_COLUMN, true, true);
             }
 
             // Write cache content for this table.
@@ -4871,12 +4871,12 @@ void ScXMLExport::WriteExternalRefCaches()
                         if (nRow > 1)
                         {
                             OUString aVal = OUString::number(nRow);
-                            AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_ROWS_REPEATED, aVal);
+                            AddAttribute(XmlNamespace::TABLE, XML_NUMBER_ROWS_REPEATED, aVal);
                         }
-                        SvXMLElementExport aElemRow(*this, XML_NAMESPACE_TABLE, XML_TABLE_ROW, true, true);
+                        SvXMLElementExport aElemRow(*this, XmlNamespace::TABLE, XML_TABLE_ROW, true, true);
                         OUString aVal = OUString::number(static_cast<sal_Int32>(nMaxColsUsed));
-                        AddAttribute(XML_NAMESPACE_TABLE,  XML_NUMBER_COLUMNS_REPEATED, aVal);
-                        SvXMLElementExport aElemCell(*this, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true);
+                        AddAttribute(XmlNamespace::TABLE,  XML_NUMBER_COLUMNS_REPEATED, aVal);
+                        SvXMLElementExport aElemCell(*this, XmlNamespace::TABLE, XML_TABLE_CELL, true, true);
                     }
                 }
                 else
@@ -4887,15 +4887,15 @@ void ScXMLExport::WriteExternalRefCaches()
                         if (nRowGap > 2)
                         {
                             OUString aVal = OUString::number(static_cast<sal_Int32>(nRowGap-1));
-                            AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_ROWS_REPEATED, aVal);
+                            AddAttribute(XmlNamespace::TABLE, XML_NUMBER_ROWS_REPEATED, aVal);
                         }
-                        SvXMLElementExport aElemRow(*this, XML_NAMESPACE_TABLE, XML_TABLE_ROW, true, true);
+                        SvXMLElementExport aElemRow(*this, XmlNamespace::TABLE, XML_TABLE_ROW, true, true);
                         OUString aVal = OUString::number(static_cast<sal_Int32>(nMaxColsUsed));
-                        AddAttribute(XML_NAMESPACE_TABLE,  XML_NUMBER_COLUMNS_REPEATED, aVal);
-                        SvXMLElementExport aElemCell(*this, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true);
+                        AddAttribute(XmlNamespace::TABLE,  XML_NUMBER_COLUMNS_REPEATED, aVal);
+                        SvXMLElementExport aElemCell(*this, XmlNamespace::TABLE, XML_TABLE_CELL, true, true);
                     }
                 }
-                SvXMLElementExport aElemRow(*this, XML_NAMESPACE_TABLE, XML_TABLE_ROW, true, true);
+                SvXMLElementExport aElemRow(*this, XmlNamespace::TABLE, XML_TABLE_ROW, true, true);
 
                 vector<SCCOL> aCols;
                 pTable->getAllCols(nRow, aCols);
@@ -4910,9 +4910,9 @@ void ScXMLExport::WriteExternalRefCaches()
                             if (nCol > 1)
                             {
                                 OUString aVal = OUString::number(static_cast<sal_Int32>(nCol));
-                                AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED, aVal);
+                                AddAttribute(XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED, aVal);
                             }
-                            SvXMLElementExport aElemCell(*this, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true);
+                            SvXMLElementExport aElemCell(*this, XmlNamespace::TABLE, XML_TABLE_CELL, true, true);
                         }
                     }
                     else
@@ -4923,9 +4923,9 @@ void ScXMLExport::WriteExternalRefCaches()
                             if (nColGap > 2)
                             {
                                 OUString aVal = OUString::number(static_cast<sal_Int32>(nColGap-1));
-                                AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED, aVal);
+                                AddAttribute(XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED, aVal);
                             }
-                            SvXMLElementExport aElemCell(*this, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true);
+                            SvXMLElementExport aElemCell(*this, XmlNamespace::TABLE, XML_TABLE_CELL, true, true);
                         }
                     }
 
@@ -4939,23 +4939,23 @@ void ScXMLExport::WriteExternalRefCaches()
                         if (nIndex >= 0)
                         {
                             const OUString & aStyleName = pCellStyles->GetStyleNameByIndex(nIndex, true);
-                            AddAttribute(XML_NAMESPACE_TABLE, XML_STYLE_NAME, aStyleName);
+                            AddAttribute(XmlNamespace::TABLE, XML_STYLE_NAME, aStyleName);
                         }
 
                         switch(pToken->GetType())
                         {
                             case svDouble:
                             {
-                                AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT);
+                                AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_FLOAT);
                                 OUStringBuffer aVal;
                                 aVal.append(pToken->GetDouble());
                                 aStrVal = aVal.makeStringAndClear();
-                                AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE, aStrVal);
+                                AddAttribute(XmlNamespace::OFFICE, XML_VALUE, aStrVal);
                             }
                             break;
                             case svString:
                             {
-                                AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING);
+                                AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_STRING);
                                 aStrVal = pToken->GetString().getString();
                             }
                             break;
@@ -4963,8 +4963,8 @@ void ScXMLExport::WriteExternalRefCaches()
                                 ;
                         }
                     }
-                    SvXMLElementExport aElemCell(*this, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true);
-                    SvXMLElementExport aElemText(*this, XML_NAMESPACE_TEXT, XML_P, true, false);
+                    SvXMLElementExport aElemCell(*this, XmlNamespace::TABLE, XML_TABLE_CELL, true, true);
+                    SvXMLElementExport aElemText(*this, XmlNamespace::TEXT, XML_P, true, false);
                     Characters(aStrVal);
 
                     nLastCol = nCol;
@@ -4990,27 +4990,27 @@ void ScXMLExport::WriteConsolidation()
     OUString sStrData;
 
     ScXMLConverter::GetStringFromFunction( sStrData, pCons->eFunction );
-    AddAttribute( XML_NAMESPACE_TABLE, XML_FUNCTION, sStrData );
+    AddAttribute( XmlNamespace::TABLE, XML_FUNCTION, sStrData );
 
     sStrData.clear();
     for( sal_Int32 nIndex = 0; nIndex < pCons->nDataAreaCount; ++nIndex )
         ScRangeStringConverter::GetStringFromArea( sStrData, pCons->pDataAreas[ nIndex ], pDoc, FormulaGrammar::CONV_OOO, ' ', true );
-    AddAttribute( XML_NAMESPACE_TABLE, XML_SOURCE_CELL_RANGE_ADDRESSES, sStrData );
+    AddAttribute( XmlNamespace::TABLE, XML_SOURCE_CELL_RANGE_ADDRESSES, sStrData );
 
     ScRangeStringConverter::GetStringFromAddress( sStrData, ScAddress( pCons->nCol, pCons->nRow, pCons->nTab ), pDoc, FormulaGrammar::CONV_OOO );
-    AddAttribute( XML_NAMESPACE_TABLE, XML_TARGET_CELL_ADDRESS, sStrData );
+    AddAttribute( XmlNamespace::TABLE, XML_TARGET_CELL_ADDRESS, sStrData );
 
     if( pCons->bByCol && !pCons->bByRow )
-        AddAttribute( XML_NAMESPACE_TABLE, XML_USE_LABEL, XML_COLUMN );
+        AddAttribute( XmlNamespace::TABLE, XML_USE_LABEL, XML_COLUMN );
     else if( !pCons->bByCol && pCons->bByRow )
-        AddAttribute( XML_NAMESPACE_TABLE, XML_USE_LABEL, XML_ROW );
+        AddAttribute( XmlNamespace::TABLE, XML_USE_LABEL, XML_ROW );
     else if( pCons->bByCol && pCons->bByRow )
-        AddAttribute( XML_NAMESPACE_TABLE, XML_USE_LABEL, XML_BOTH );
+        AddAttribute( XmlNamespace::TABLE, XML_USE_LABEL, XML_BOTH );
 
     if( pCons->bReferenceData )
-        AddAttribute( XML_NAMESPACE_TABLE, XML_LINK_TO_SOURCE_DATA, XML_TRUE );
+        AddAttribute( XmlNamespace::TABLE, XML_LINK_TO_SOURCE_DATA, XML_TRUE );
 
-    SvXMLElementExport aElem( *this, XML_NAMESPACE_TABLE, XML_CONSOLIDATION, true, true );
+    SvXMLElementExport aElem( *this, XmlNamespace::TABLE, XML_CONSOLIDATION, true, true );
 }
 
 SvXMLAutoStylePoolP* ScXMLExport::CreateAutoStylePool()
@@ -5200,7 +5200,7 @@ void ScXMLExport::CollectUserDefinedNamespaces(const SfxItemPool* pPool, sal_uIn
     GetNamespaceMap_().Add(
         GetXMLToken( XML_NP_PRESENTATION ),
         GetXMLToken( XML_N_PRESENTATION ),
-        XML_NAMESPACE_PRESENTATION );
+        XmlNamespace::PRESENTATION );
 }
 
 void ScXMLExport::IncrementProgressBar(bool bFlush, sal_Int32 nInc)
@@ -5257,7 +5257,7 @@ ErrCode ScXMLExport::exportDoc( enum XMLTokenEnum eClass )
                     GetNamespaceMap_().Add(
                         GetXMLToken( XML_NP_OFFICE_EXT ),
                         GetXMLToken( XML_N_OFFICE_EXT ),
-                        XML_NAMESPACE_OFFICE_EXT );
+                        XmlNamespace::OFFICE_EXT );
             }
         }
     }
diff --git a/sc/source/filter/xml/xmlimprt.cxx b/sc/source/filter/xml/xmlimprt.cxx
index 0290c4fe6ec9..2fe701ad1343 100644
--- a/sc/source/filter/xml/xmlimprt.cxx
+++ b/sc/source/filter/xml/xmlimprt.cxx
@@ -174,22 +174,22 @@ const SvXMLTokenMap& ScXMLImport::GetTableRowCellAttrTokenMap()
 {
     static const SvXMLTokenMapEntry aTableRowCellAttrTokenMap[] =
     {
-        { XML_NAMESPACE_TABLE,  XML_STYLE_NAME,                     XML_TOK_TABLE_ROW_CELL_ATTR_STYLE_NAME              },
-        { XML_NAMESPACE_TABLE,  XML_CONTENT_VALIDATION_NAME,        XML_TOK_TABLE_ROW_CELL_ATTR_CONTENT_VALIDATION_NAME },
-        { XML_NAMESPACE_TABLE,  XML_NUMBER_ROWS_SPANNED,            XML_TOK_TABLE_ROW_CELL_ATTR_SPANNED_ROWS            },
-        { XML_NAMESPACE_TABLE,  XML_NUMBER_COLUMNS_SPANNED,         XML_TOK_TABLE_ROW_CELL_ATTR_SPANNED_COLS            },
-        { XML_NAMESPACE_TABLE,  XML_NUMBER_MATRIX_COLUMNS_SPANNED,  XML_TOK_TABLE_ROW_CELL_ATTR_SPANNED_MATRIX_COLS     },
-        { XML_NAMESPACE_TABLE,  XML_NUMBER_MATRIX_ROWS_SPANNED,     XML_TOK_TABLE_ROW_CELL_ATTR_SPANNED_MATRIX_ROWS     },
-        { XML_NAMESPACE_TABLE,  XML_NUMBER_COLUMNS_REPEATED,        XML_TOK_TABLE_ROW_CELL_ATTR_REPEATED                },
-        { XML_NAMESPACE_OFFICE, XML_VALUE_TYPE,                     XML_TOK_TABLE_ROW_CELL_ATTR_VALUE_TYPE              },
-        { XML_NAMESPACE_CALC_EXT, XML_VALUE_TYPE,                   XML_TOK_TABLE_ROW_CELL_ATTR_NEW_VALUE_TYPE          },
-        { XML_NAMESPACE_OFFICE, XML_VALUE,                          XML_TOK_TABLE_ROW_CELL_ATTR_VALUE                   },
-        { XML_NAMESPACE_OFFICE, XML_DATE_VALUE,                     XML_TOK_TABLE_ROW_CELL_ATTR_DATE_VALUE              },
-        { XML_NAMESPACE_OFFICE, XML_TIME_VALUE,                     XML_TOK_TABLE_ROW_CELL_ATTR_TIME_VALUE              },
-        { XML_NAMESPACE_OFFICE, XML_STRING_VALUE,                   XML_TOK_TABLE_ROW_CELL_ATTR_STRING_VALUE            },
-        { XML_NAMESPACE_OFFICE, XML_BOOLEAN_VALUE,                  XML_TOK_TABLE_ROW_CELL_ATTR_BOOLEAN_VALUE           },
-        { XML_NAMESPACE_TABLE,  XML_FORMULA,                        XML_TOK_TABLE_ROW_CELL_ATTR_FORMULA                 },
-        { XML_NAMESPACE_OFFICE, XML_CURRENCY,                       XML_TOK_TABLE_ROW_CELL_ATTR_CURRENCY                },
+        { XmlNamespace::TABLE,  XML_STYLE_NAME,                     XML_TOK_TABLE_ROW_CELL_ATTR_STYLE_NAME              },
+        { XmlNamespace::TABLE,  XML_CONTENT_VALIDATION_NAME,        XML_TOK_TABLE_ROW_CELL_ATTR_CONTENT_VALIDATION_NAME },
+        { XmlNamespace::TABLE,  XML_NUMBER_ROWS_SPANNED,            XML_TOK_TABLE_ROW_CELL_ATTR_SPANNED_ROWS            },
+        { XmlNamespace::TABLE,  XML_NUMBER_COLUMNS_SPANNED,         XML_TOK_TABLE_ROW_CELL_ATTR_SPANNED_COLS            },
+        { XmlNamespace::TABLE,  XML_NUMBER_MATRIX_COLUMNS_SPANNED,  XML_TOK_TABLE_ROW_CELL_ATTR_SPANNED_MATRIX_COLS     },
+        { XmlNamespace::TABLE,  XML_NUMBER_MATRIX_ROWS_SPANNED,     XML_TOK_TABLE_ROW_CELL_ATTR_SPANNED_MATRIX_ROWS     },
+        { XmlNamespace::TABLE,  XML_NUMBER_COLUMNS_REPEATED,        XML_TOK_TABLE_ROW_CELL_ATTR_REPEATED                },
+        { XmlNamespace::OFFICE, XML_VALUE_TYPE,                     XML_TOK_TABLE_ROW_CELL_ATTR_VALUE_TYPE              },
+        { XmlNamespace::CALC_EXT, XML_VALUE_TYPE,                   XML_TOK_TABLE_ROW_CELL_ATTR_NEW_VALUE_TYPE          },
+        { XmlNamespace::OFFICE, XML_VALUE,                          XML_TOK_TABLE_ROW_CELL_ATTR_VALUE                   },
+        { XmlNamespace::OFFICE, XML_DATE_VALUE,                     XML_TOK_TABLE_ROW_CELL_ATTR_DATE_VALUE              },
+        { XmlNamespace::OFFICE, XML_TIME_VALUE,                     XML_TOK_TABLE_ROW_CELL_ATTR_TIME_VALUE              },
+        { XmlNamespace::OFFICE, XML_STRING_VALUE,                   XML_TOK_TABLE_ROW_CELL_ATTR_STRING_VALUE            },
+        { XmlNamespace::OFFICE, XML_BOOLEAN_VALUE,                  XML_TOK_TABLE_ROW_CELL_ATTR_BOOLEAN_VALUE           },
+        { XmlNamespace::TABLE,  XML_FORMULA,                        XML_TOK_TABLE_ROW_CELL_ATTR_FORMULA                 },
+        { XmlNamespace::OFFICE, XML_CURRENCY,                       XML_TOK_TABLE_ROW_CELL_ATTR_CURRENCY                },
         XML_TOKEN_MAP_END
     };
 
@@ -379,25 +379,25 @@ const SvXMLTokenMap& ScXMLImport::GetTableElemTokenMap()
     {
         static const SvXMLTokenMapEntry aTableTokenMap[] =
         {
-            { XML_NAMESPACE_TABLE,  XML_NAMED_EXPRESSIONS,    XML_TOK_TABLE_NAMED_EXPRESSIONS },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_COLUMN_GROUP,   XML_TOK_TABLE_COL_GROUP       },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_HEADER_COLUMNS, XML_TOK_TABLE_HEADER_COLS },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_COLUMNS,        XML_TOK_TABLE_COLS            },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_COLUMN,         XML_TOK_TABLE_COL         },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_PROTECTION,     XML_TOK_TABLE_PROTECTION    },
-            { XML_NAMESPACE_LO_EXT, XML_TABLE_PROTECTION,     XML_TOK_TABLE_PROTECTION_EXT  },
-            { XML_NAMESPACE_OFFICE_EXT, XML_TABLE_PROTECTION, XML_TOK_TABLE_PROTECTION_EXT  },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_ROW_GROUP,      XML_TOK_TABLE_ROW_GROUP       },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_HEADER_ROWS,    XML_TOK_TABLE_HEADER_ROWS },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_ROWS,           XML_TOK_TABLE_ROWS            },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_ROW,            XML_TOK_TABLE_ROW         },
-            { XML_NAMESPACE_TABLE,  XML_TABLE_SOURCE,         XML_TOK_TABLE_SOURCE      },
-            { XML_NAMESPACE_TABLE,  XML_SCENARIO,             XML_TOK_TABLE_SCENARIO        },
-            { XML_NAMESPACE_TABLE,  XML_SHAPES,               XML_TOK_TABLE_SHAPES      },
-            { XML_NAMESPACE_OFFICE, XML_FORMS,                XML_TOK_TABLE_FORMS           },
-            { XML_NAMESPACE_OFFICE, XML_EVENT_LISTENERS,      XML_TOK_TABLE_EVENT_LISTENERS },
-            { XML_NAMESPACE_OFFICE_EXT, XML_EVENT_LISTENERS,  XML_TOK_TABLE_EVENT_LISTENERS_EXT },
-            { XML_NAMESPACE_CALC_EXT, XML_CONDITIONAL_FORMATS, XML_TOK_TABLE_CONDFORMATS },
+            { XmlNamespace::TABLE,  XML_NAMED_EXPRESSIONS,    XML_TOK_TABLE_NAMED_EXPRESSIONS },
+            { XmlNamespace::TABLE,  XML_TABLE_COLUMN_GROUP,   XML_TOK_TABLE_COL_GROUP       },
+            { XmlNamespace::TABLE,  XML_TABLE_HEADER_COLUMNS, XML_TOK_TABLE_HEADER_COLS },
+            { XmlNamespace::TABLE,  XML_TABLE_COLUMNS,        XML_TOK_TABLE_COLS            },
+            { XmlNamespace::TABLE,  XML_TABLE_COLUMN,         XML_TOK_TABLE_COL         },
+            { XmlNamespace::TABLE,  XML_TABLE_PROTECTION,     XML_TOK_TABLE_PROTECTION    },
+            { XmlNamespace::LO_EXT, XML_TABLE_PROTECTION,     XML_TOK_TABLE_PROTECTION_EXT  },
+            { XmlNamespace::OFFICE_EXT, XML_TABLE_PROTECTION, XML_TOK_TABLE_PROTECTION_EXT  },
+            { XmlNamespace::TABLE,  XML_TABLE_ROW_GROUP,      XML_TOK_TABLE_ROW_GROUP       },
+            { XmlNamespace::TABLE,  XML_TABLE_HEADER_ROWS,    XML_TOK_TABLE_HEADER_ROWS },
+            { XmlNamespace::TABLE,  XML_TABLE_ROWS,           XML_TOK_TABLE_ROWS            },
+            { XmlNamespace::TABLE,  XML_TABLE_ROW,            XML_TOK_TABLE_ROW         },
+            { XmlNamespace::TABLE,  XML_TABLE_SOURCE,         XML_TOK_TABLE_SOURCE      },
+            { XmlNamespace::TABLE,  XML_SCENARIO,             XML_TOK_TABLE_SCENARIO        },
+            { XmlNamespace::TABLE,  XML_SHAPES,               XML_TOK_TABLE_SHAPES      },
+            { XmlNamespace::OFFICE, XML_FORMS,                XML_TOK_TABLE_FORMS           },
+            { XmlNamespace::OFFICE, XML_EVENT_LISTENERS,      XML_TOK_TABLE_EVENT_LISTENERS },
+            { XmlNamespace::OFFICE_EXT, XML_EVENT_LISTENERS,  XML_TOK_TABLE_EVENT_LISTENERS_EXT },
+            { XmlNamespace::CALC_EXT, XML_CONDITIONAL_FORMATS, XML_TOK_TABLE_CONDFORMATS },
             XML_TOKEN_MAP_END
         };
 
@@ -413,10 +413,10 @@ const SvXMLTokenMap& ScXMLImport::GetTableRowsElemTokenMap()
     {
         static const SvXMLTokenMapEntry aTableRowsElemTokenMap[] =
         {
-            { XML_NAMESPACE_TABLE, XML_TABLE_ROW_GROUP,     XML_TOK_TABLE_ROWS_ROW_GROUP    },
-            { XML_NAMESPACE_TABLE, XML_TABLE_HEADER_ROWS,   XML_TOK_TABLE_ROWS_HEADER_ROWS  },
-            { XML_NAMESPACE_TABLE, XML_TABLE_ROWS,          XML_TOK_TABLE_ROWS_ROWS         },
-            { XML_NAMESPACE_TABLE, XML_TABLE_ROW,           XML_TOK_TABLE_ROWS_ROW          },
+            { XmlNamespace::TABLE, XML_TABLE_ROW_GROUP,     XML_TOK_TABLE_ROWS_ROW_GROUP    },
+            { XmlNamespace::TABLE, XML_TABLE_HEADER_ROWS,   XML_TOK_TABLE_ROWS_HEADER_ROWS  },
+            { XmlNamespace::TABLE, XML_TABLE_ROWS,          XML_TOK_TABLE_ROWS_ROWS         },
+            { XmlNamespace::TABLE, XML_TABLE_ROW,           XML_TOK_TABLE_ROWS_ROW          },
             XML_TOKEN_MAP_END
         };
 
@@ -432,8 +432,8 @@ const SvXMLTokenMap& ScXMLImport::GetTableRowElemTokenMap()
     {
         static const SvXMLTokenMapEntry aTableRowTokenMap[] =
         {
-            { XML_NAMESPACE_TABLE, XML_TABLE_CELL,      XML_TOK_TABLE_ROW_CELL              },
-            { XML_NAMESPACE_TABLE, XML_COVERED_TABLE_CELL,  XML_TOK_TABLE_ROW_COVERED_CELL      },
+            { XmlNamespace::TABLE, XML_TABLE_CELL,      XML_TOK_TABLE_ROW_CELL              },
+            { XmlNamespace::TABLE, XML_COVERED_TABLE_CELL,  XML_TOK_TABLE_ROW_COVERED_CELL      },
             XML_TOKEN_MAP_END
         };
 
@@ -449,11 +449,11 @@ const SvXMLTokenMap& ScXMLImport::GetTableRowAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aTableRowAttrTokenMap[] =
         {
-            { XML_NAMESPACE_TABLE, XML_STYLE_NAME,                  XML_TOK_TABLE_ROW_ATTR_STYLE_NAME           },
-            { XML_NAMESPACE_TABLE, XML_VISIBILITY,                  XML_TOK_TABLE_ROW_ATTR_VISIBILITY           },
-            { XML_NAMESPACE_TABLE, XML_NUMBER_ROWS_REPEATED,        XML_TOK_TABLE_ROW_ATTR_REPEATED             },
-            { XML_NAMESPACE_TABLE, XML_DEFAULT_CELL_STYLE_NAME,     XML_TOK_TABLE_ROW_ATTR_DEFAULT_CELL_STYLE_NAME },
-            //  { XML_NAMESPACE_TABLE, XML_USE_OPTIMAL_HEIGHT,          XML_TOK_TABLE_ROW_ATTR_USE_OPTIMAL_HEIGHT   },
+            { XmlNamespace::TABLE, XML_STYLE_NAME,                  XML_TOK_TABLE_ROW_ATTR_STYLE_NAME           },
+            { XmlNamespace::TABLE, XML_VISIBILITY,                  XML_TOK_TABLE_ROW_ATTR_VISIBILITY           },
+            { XmlNamespace::TABLE, XML_NUMBER_ROWS_REPEATED,        XML_TOK_TABLE_ROW_ATTR_REPEATED             },
+            { XmlNamespace::TABLE, XML_DEFAULT_CELL_STYLE_NAME,     XML_TOK_TABLE_ROW_ATTR_DEFAULT_CELL_STYLE_NAME },
+            //  { XmlNamespace::TABLE, XML_USE_OPTIMAL_HEIGHT,          XML_TOK_TABLE_ROW_ATTR_USE_OPTIMAL_HEIGHT   },
             XML_TOKEN_MAP_END
         };
 
@@ -469,11 +469,11 @@ const SvXMLTokenMap& ScXMLImport::GetTableRowCellElemTokenMap()
     {
         static const SvXMLTokenMapEntry aTableRowCellTokenMap[] =
         {
-            { XML_NAMESPACE_TEXT,   XML_P,                  XML_TOK_TABLE_ROW_CELL_P                    },
-            { XML_NAMESPACE_TABLE,  XML_SUB_TABLE,          XML_TOK_TABLE_ROW_CELL_TABLE                },
-            { XML_NAMESPACE_OFFICE, XML_ANNOTATION,         XML_TOK_TABLE_ROW_CELL_ANNOTATION           },
-            { XML_NAMESPACE_TABLE,  XML_DETECTIVE,          XML_TOK_TABLE_ROW_CELL_DETECTIVE            },
-            { XML_NAMESPACE_TABLE,  XML_CELL_RANGE_SOURCE,  XML_TOK_TABLE_ROW_CELL_CELL_RANGE_SOURCE    },
+            { XmlNamespace::TEXT,   XML_P,                  XML_TOK_TABLE_ROW_CELL_P                    },
+            { XmlNamespace::TABLE,  XML_SUB_TABLE,          XML_TOK_TABLE_ROW_CELL_TABLE                },
+            { XmlNamespace::OFFICE, XML_ANNOTATION,         XML_TOK_TABLE_ROW_CELL_ANNOTATION           },
+            { XmlNamespace::TABLE,  XML_DETECTIVE,          XML_TOK_TABLE_ROW_CELL_DETECTIVE            },
+            { XmlNamespace::TABLE,  XML_CELL_RANGE_SOURCE,  XML_TOK_TABLE_ROW_CELL_CELL_RANGE_SOURCE    },
             XML_TOKEN_MAP_END
         };
 
@@ -489,12 +489,12 @@ const SvXMLTokenMap& ScXMLImport::GetTableAnnotationAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aTableAnnotationAttrTokenMap[] =
         {
-            { XML_NAMESPACE_OFFICE, XML_AUTHOR,                 XML_TOK_TABLE_ANNOTATION_ATTR_AUTHOR                },
-            { XML_NAMESPACE_OFFICE, XML_CREATE_DATE,            XML_TOK_TABLE_ANNOTATION_ATTR_CREATE_DATE           },
-            { XML_NAMESPACE_OFFICE, XML_CREATE_DATE_STRING,     XML_TOK_TABLE_ANNOTATION_ATTR_CREATE_DATE_STRING    },
-            { XML_NAMESPACE_OFFICE, XML_DISPLAY,                XML_TOK_TABLE_ANNOTATION_ATTR_DISPLAY               },
-            { XML_NAMESPACE_SVG,    XML_X,                      XML_TOK_TABLE_ANNOTATION_ATTR_X                     },
-            { XML_NAMESPACE_SVG,    XML_Y,                      XML_TOK_TABLE_ANNOTATION_ATTR_Y                     },
+            { XmlNamespace::OFFICE, XML_AUTHOR,                 XML_TOK_TABLE_ANNOTATION_ATTR_AUTHOR                },
+            { XmlNamespace::OFFICE, XML_CREATE_DATE,            XML_TOK_TABLE_ANNOTATION_ATTR_CREATE_DATE           },
+            { XmlNamespace::OFFICE, XML_CREATE_DATE_STRING,     XML_TOK_TABLE_ANNOTATION_ATTR_CREATE_DATE_STRING    },
+            { XmlNamespace::OFFICE, XML_DISPLAY,                XML_TOK_TABLE_ANNOTATION_ATTR_DISPLAY               },
+            { XmlNamespace::SVG,    XML_X,                      XML_TOK_TABLE_ANNOTATION_ATTR_X                     },
+            { XmlNamespace::SVG,    XML_Y,                      XML_TOK_TABLE_ANNOTATION_ATTR_Y                     },
             XML_TOKEN_MAP_END
         };
 
@@ -586,7 +586,7 @@ ScXMLImport::ScXMLImport(
     GetNamespaceMap().Add(
         GetXMLToken( XML_NP_PRESENTATION ),
         GetXMLToken( XML_N_PRESENTATION ),
-        XML_NAMESPACE_PRESENTATION );
+        XmlNamespace::PRESENTATION );
 }
 
 ScXMLImport::~ScXMLImport() throw()
@@ -1768,11 +1768,11 @@ void ScXMLImport::ExtractFormulaNamespaceGrammar(
     // check if we have an ODF formula namespace
     if( !bRestrictToExternalNmsp ) switch( nNsId )
     {
-        case XML_NAMESPACE_OOOC:
+        case XmlNamespace::OOOC:
             rFormulaNmsp.clear();  // remove namespace string for built-in grammar
             reGrammar = FormulaGrammar::GRAM_PODF;
             return;
-        case XML_NAMESPACE_OF:
+        case XmlNamespace::OF:
             rFormulaNmsp.clear();  // remove namespace string for built-in grammar
             reGrammar = FormulaGrammar::GRAM_ODFF;
             return;
@@ -1786,11 +1786,11 @@ void ScXMLImport::ExtractFormulaNamespaceGrammar(
         (GetDocument()->GetStorageGrammar() == FormulaGrammar::GRAM_PODF) ?
             FormulaGrammar::GRAM_PODF : FormulaGrammar::GRAM_ODFF;
 
-    /*  Check if we have no namespace at all. The value XML_NAMESPACE_NONE
+    /*  Check if we have no namespace at all. The value XmlNamespace::NONE
         indicates that there is no colon. If the first character of the
-        attribute value is the equality sign, the value XML_NAMESPACE_UNKNOWN
+        attribute value is the equality sign, the value XmlNamespace::UNKNOWN
         indicates that there is a colon somewhere in the formula string. */
-    if( (nNsId == XML_NAMESPACE_NONE) || ((nNsId == XML_NAMESPACE_UNKNOWN) && (rAttrValue.toChar() == '=')) )
+    if( (nNsId == XmlNamespace::NONE) || ((nNsId == XmlNamespace::UNKNOWN) && (rAttrValue.toChar() == '=')) )
     {
         rFormula = rAttrValue;          // return entire string as formula
         reGrammar = eDefaultGrammar;
diff --git a/sc/source/filter/xml/xmlstyle.cxx b/sc/source/filter/xml/xmlstyle.cxx
index 0cb367174613..a3c909379fd9 100644
--- a/sc/source/filter/xml/xmlstyle.cxx
+++ b/sc/source/filter/xml/xmlstyle.cxx
@@ -60,64 +60,64 @@ using namespace ::formula;
 
 const XMLPropertyMapEntry aXMLScCellStylesProperties[] =
 {
-    MAP( "AsianVerticalMode", XML_NAMESPACE_STYLE, XML_GLYPH_ORIENTATION_VERTICAL, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_VERTICAL, 0),
-    MAP( "BottomBorder", XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_BOTTOMBORDER ),
-    MAP( "BottomBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_BOTTOMBORDERWIDTH ),
-    MAP( "CellBackColor", XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    MAP( "CellProtection", XML_NAMESPACE_STYLE, XML_CELL_PROTECT, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_CELLPROTECTION|MID_FLAG_MERGE_PROPERTY, 0 ),
-    MAP( "CellProtection", XML_NAMESPACE_STYLE, XML_PRINT_CONTENT, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_PRINTCONTENT|MID_FLAG_MERGE_PROPERTY, 0 ),
-    MAP( "CellStyle", XML_NAMESPACE_STYLE, XML_STYLE, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_STRING, CTF_SC_CELLSTYLE ),
-    MAP( "ConditionalFormatXML", XML_NAMESPACE_STYLE, XML_MAP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM, CTF_SC_IMPORT_MAP ),
-    MAP( "ConditionalFormatXML", XML_NAMESPACE_STYLE, XML_MAP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM, CTF_SC_MAP ),
-    MAP( "DiagonalBLTR", XML_NAMESPACE_STYLE, XML_DIAGONAL_BL_TR, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_DIAGONALBLTR ),
-    MAP( "DiagonalBLTR", XML_NAMESPACE_STYLE, XML_DIAGONAL_BL_TR_WIDTH, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_DIAGONALBLTRWIDTH ), // #i102690# for old files
-    MAP( "DiagonalBLTR", XML_NAMESPACE_STYLE, XML_DIAGONAL_BL_TR_WIDTHS, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_DIAGONALBLTRWIDTHS ),
-    MAP( "DiagonalTLBR", XML_NAMESPACE_STYLE, XML_DIAGONAL_TL_BR, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_DIAGONALTLBR ),
-    MAP( "DiagonalTLBR", XML_NAMESPACE_STYLE, XML_DIAGONAL_TL_BR_WIDTH, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_DIAGONALTLBRWIDTH ), // #i102690# for old files
-    MAP( "DiagonalTLBR", XML_NAMESPACE_STYLE, XML_DIAGONAL_TL_BR_WIDTHS, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_DIAGONALTLBRWIDTHS ),
-    MAP( "HoriJustify", XML_NAMESPACE_FO, XML_TEXT_ALIGN, XML_TYPE_PROP_PARAGRAPH|XML_SC_TYPE_HORIJUSTIFY|MID_FLAG_MERGE_PROPERTY, 0 ),
-    MAP( "HoriJustify", XML_NAMESPACE_STYLE, XML_TEXT_ALIGN_SOURCE, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_HORIJUSTIFYSOURCE|MID_FLAG_MERGE_PROPERTY, 0 ),
-    MAP( "HoriJustify", XML_NAMESPACE_STYLE, XML_REPEAT_CONTENT, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_HORIJUSTIFYREPEAT|MID_FLAG_MERGE_PROPERTY, 0 ),
+    MAP( "AsianVerticalMode", XmlNamespace::STYLE, XML_GLYPH_ORIENTATION_VERTICAL, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_VERTICAL, 0),
+    MAP( "BottomBorder", XmlNamespace::FO, XML_BORDER_BOTTOM, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_BOTTOMBORDER ),
+    MAP( "BottomBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_BOTTOMBORDERWIDTH ),
+    MAP( "CellBackColor", XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    MAP( "CellProtection", XmlNamespace::STYLE, XML_CELL_PROTECT, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_CELLPROTECTION|MID_FLAG_MERGE_PROPERTY, 0 ),
+    MAP( "CellProtection", XmlNamespace::STYLE, XML_PRINT_CONTENT, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_PRINTCONTENT|MID_FLAG_MERGE_PROPERTY, 0 ),
+    MAP( "CellStyle", XmlNamespace::STYLE, XML_STYLE, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_STRING, CTF_SC_CELLSTYLE ),
+    MAP( "ConditionalFormatXML", XmlNamespace::STYLE, XML_MAP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM, CTF_SC_IMPORT_MAP ),
+    MAP( "ConditionalFormatXML", XmlNamespace::STYLE, XML_MAP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM, CTF_SC_MAP ),
+    MAP( "DiagonalBLTR", XmlNamespace::STYLE, XML_DIAGONAL_BL_TR, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_DIAGONALBLTR ),
+    MAP( "DiagonalBLTR", XmlNamespace::STYLE, XML_DIAGONAL_BL_TR_WIDTH, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_DIAGONALBLTRWIDTH ), // #i102690# for old files
+    MAP( "DiagonalBLTR", XmlNamespace::STYLE, XML_DIAGONAL_BL_TR_WIDTHS, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_DIAGONALBLTRWIDTHS ),
+    MAP( "DiagonalTLBR", XmlNamespace::STYLE, XML_DIAGONAL_TL_BR, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_DIAGONALTLBR ),
+    MAP( "DiagonalTLBR", XmlNamespace::STYLE, XML_DIAGONAL_TL_BR_WIDTH, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_DIAGONALTLBRWIDTH ), // #i102690# for old files
+    MAP( "DiagonalTLBR", XmlNamespace::STYLE, XML_DIAGONAL_TL_BR_WIDTHS, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_DIAGONALTLBRWIDTHS ),
+    MAP( "HoriJustify", XmlNamespace::FO, XML_TEXT_ALIGN, XML_TYPE_PROP_PARAGRAPH|XML_SC_TYPE_HORIJUSTIFY|MID_FLAG_MERGE_PROPERTY, 0 ),
+    MAP( "HoriJustify", XmlNamespace::STYLE, XML_TEXT_ALIGN_SOURCE, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_HORIJUSTIFYSOURCE|MID_FLAG_MERGE_PROPERTY, 0 ),
+    MAP( "HoriJustify", XmlNamespace::STYLE, XML_REPEAT_CONTENT, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_HORIJUSTIFYREPEAT|MID_FLAG_MERGE_PROPERTY, 0 ),
     // FIXME this was wrongly exported to STYLE namespace since 2013
-    MAP_EXT( SC_UNONAME_HYPERLINK, XML_NAMESPACE_STYLE, XML_HYPERLINK, XML_TYPE_PROP_TABLE_CELL | XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM, CTF_SC_HYPERLINK ),
-    MAP_EXT( SC_UNONAME_HYPERLINK, XML_NAMESPACE_LO_EXT, XML_HYPERLINK, XML_TYPE_PROP_TABLE_CELL | XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM, CTF_SC_HYPERLINK ),
-    MAP_EXT( SC_UNONAME_CELLHJUS_METHOD, XML_NAMESPACE_CSS3TEXT, XML_TEXT_JUSTIFY, XML_TYPE_PROP_PARAGRAPH|XML_SC_TYPE_HORIJUSTIFY_METHOD, 0 ),
-    MAP( "IsCellBackgroundTransparent", XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_ISTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    MAP( "IsTextWrapped", XML_NAMESPACE_FO, XML_WRAP_OPTION, XML_TYPE_PROP_TABLE_CELL|XML_SC_ISTEXTWRAPPED, 0 ),
-    MAP( "LeftBorder", XML_NAMESPACE_FO, XML_BORDER, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_ALLBORDER ),
-    MAP( "LeftBorder", XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_LEFTBORDER ),
-    MAP( "LeftBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_ALLBORDERWIDTH ),
-    MAP( "LeftBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_LEFTBORDERWIDTH ),
-    MAP( "NumberFormat", XML_NAMESPACE_STYLE, XML_DATA_STYLE_NAME, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_NUMBER|MID_FLAG_SPECIAL_ITEM, CTF_SC_NUMBERFORMAT),
-    MAP( "Orientation", XML_NAMESPACE_STYLE, XML_DIRECTION, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_ORIENTATION, 0 ),
-    MAP( "ParaBottomMargin", XML_NAMESPACE_FO, XML_PADDING, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_ALLPADDING ),
-    MAP( "ParaBottomMargin", XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_BOTTOMPADDING ),
-    MAP( "ParaIndent", XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_TYPE_PROP_PARAGRAPH|XML_TYPE_MEASURE16, 0 ),
-    MAP( "ParaLeftMargin", XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_LEFTPADDING ),
-    MAP( "ParaRightMargin", XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_RIGHTPADDING ),
-    MAP( "ParaTopMargin", XML_NAMESPACE_FO, XML_PADDING_TOP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_TOPPADDING ),
-    MAP( "RightBorder", XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_RIGHTBORDER ),
-    MAP( "RightBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_RIGHTBORDERWIDTH ),
-    MAP( "RotateAngle", XML_NAMESPACE_STYLE, XML_ROTATION_ANGLE, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_ROTATEANGLE, 0 ),
-    MAP( "RotateReference", XML_NAMESPACE_STYLE, XML_ROTATION_ALIGN, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_ROTATEREFERENCE, 0),
-    MAP( "ShadowFormat", XML_NAMESPACE_STYLE, XML_SHADOW, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_TEXT_SHADOW, 0 ),
-    MAP( "ShrinkToFit", XML_NAMESPACE_STYLE, XML_SHRINK_TO_FIT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BOOL, 0 ),
-    MAP( "StandardDecimals", XML_NAMESPACE_STYLE, XML_DECIMAL_PLACES, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_NUMBER16, 0 ),
-    MAP( "TopBorder", XML_NAMESPACE_FO, XML_BORDER_TOP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_TOPBORDER ),
-    MAP( "TopBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_TOPBORDERWIDTH ),
-    MAP( "UserDefinedAttributes", XML_NAMESPACE_TEXT, XML_XMLNS, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
-    MAP( "ValidationXML", XML_NAMESPACE_TABLE, XML_CONTENT_VALIDATION, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BUILDIN_CMP_ONLY, CTF_SC_VALIDATION ),
-    MAP( "VertJustify", XML_NAMESPACE_STYLE, XML_VERTICAL_ALIGN, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_VERTJUSTIFY, 0),
-    MAP_EXT_I( SC_UNONAME_CELLVJUS_METHOD, XML_NAMESPACE_STYLE, XML_VERTICAL_JUSTIFY, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_VERTJUSTIFY_METHOD, 0 ), // proposed ODF 1.2+
-    MAP_EXT( SC_UNONAME_CELLVJUS_METHOD, XML_NAMESPACE_LO_EXT, XML_VERTICAL_JUSTIFY, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_VERTJUSTIFY_METHOD, 0 ),  // extension namespace
+    MAP_EXT( SC_UNONAME_HYPERLINK, XmlNamespace::STYLE, XML_HYPERLINK, XML_TYPE_PROP_TABLE_CELL | XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM, CTF_SC_HYPERLINK ),
+    MAP_EXT( SC_UNONAME_HYPERLINK, XmlNamespace::LO_EXT, XML_HYPERLINK, XML_TYPE_PROP_TABLE_CELL | XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM, CTF_SC_HYPERLINK ),
+    MAP_EXT( SC_UNONAME_CELLHJUS_METHOD, XmlNamespace::CSS3TEXT, XML_TEXT_JUSTIFY, XML_TYPE_PROP_PARAGRAPH|XML_SC_TYPE_HORIJUSTIFY_METHOD, 0 ),
+    MAP( "IsCellBackgroundTransparent", XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_ISTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    MAP( "IsTextWrapped", XmlNamespace::FO, XML_WRAP_OPTION, XML_TYPE_PROP_TABLE_CELL|XML_SC_ISTEXTWRAPPED, 0 ),
+    MAP( "LeftBorder", XmlNamespace::FO, XML_BORDER, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_ALLBORDER ),
+    MAP( "LeftBorder", XmlNamespace::FO, XML_BORDER_LEFT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_LEFTBORDER ),
+    MAP( "LeftBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_ALLBORDERWIDTH ),
+    MAP( "LeftBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_LEFTBORDERWIDTH ),
+    MAP( "NumberFormat", XmlNamespace::STYLE, XML_DATA_STYLE_NAME, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_NUMBER|MID_FLAG_SPECIAL_ITEM, CTF_SC_NUMBERFORMAT),
+    MAP( "Orientation", XmlNamespace::STYLE, XML_DIRECTION, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_ORIENTATION, 0 ),
+    MAP( "ParaBottomMargin", XmlNamespace::FO, XML_PADDING, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_ALLPADDING ),
+    MAP( "ParaBottomMargin", XmlNamespace::FO, XML_PADDING_BOTTOM, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_BOTTOMPADDING ),
+    MAP( "ParaIndent", XmlNamespace::FO, XML_MARGIN_LEFT, XML_TYPE_PROP_PARAGRAPH|XML_TYPE_MEASURE16, 0 ),
+    MAP( "ParaLeftMargin", XmlNamespace::FO, XML_PADDING_LEFT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_LEFTPADDING ),
+    MAP( "ParaRightMargin", XmlNamespace::FO, XML_PADDING_RIGHT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_RIGHTPADDING ),
+    MAP( "ParaTopMargin", XmlNamespace::FO, XML_PADDING_TOP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_MEASURE, CTF_SC_TOPPADDING ),
+    MAP( "RightBorder", XmlNamespace::FO, XML_BORDER_RIGHT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_RIGHTBORDER ),
+    MAP( "RightBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_RIGHTBORDERWIDTH ),
+    MAP( "RotateAngle", XmlNamespace::STYLE, XML_ROTATION_ANGLE, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_ROTATEANGLE, 0 ),
+    MAP( "RotateReference", XmlNamespace::STYLE, XML_ROTATION_ALIGN, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_ROTATEREFERENCE, 0),
+    MAP( "ShadowFormat", XmlNamespace::STYLE, XML_SHADOW, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_TEXT_SHADOW, 0 ),
+    MAP( "ShrinkToFit", XmlNamespace::STYLE, XML_SHRINK_TO_FIT, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BOOL, 0 ),
+    MAP( "StandardDecimals", XmlNamespace::STYLE, XML_DECIMAL_PLACES, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_NUMBER16, 0 ),
+    MAP( "TopBorder", XmlNamespace::FO, XML_BORDER_TOP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER, CTF_SC_TOPBORDER ),
+    MAP( "TopBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BORDER_WIDTH, CTF_SC_TOPBORDERWIDTH ),
+    MAP( "UserDefinedAttributes", XmlNamespace::TEXT, XML_XMLNS, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
+    MAP( "ValidationXML", XmlNamespace::TABLE, XML_CONTENT_VALIDATION, XML_TYPE_PROP_TABLE_CELL|XML_TYPE_BUILDIN_CMP_ONLY, CTF_SC_VALIDATION ),
+    MAP( "VertJustify", XmlNamespace::STYLE, XML_VERTICAL_ALIGN, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_VERTJUSTIFY, 0),
+    MAP_EXT_I( SC_UNONAME_CELLVJUS_METHOD, XmlNamespace::STYLE, XML_VERTICAL_JUSTIFY, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_VERTJUSTIFY_METHOD, 0 ), // proposed ODF 1.2+
+    MAP_EXT( SC_UNONAME_CELLVJUS_METHOD, XmlNamespace::LO_EXT, XML_VERTICAL_JUSTIFY, XML_TYPE_PROP_TABLE_CELL|XML_SC_TYPE_VERTJUSTIFY_METHOD, 0 ),  // extension namespace
     MAP_END()
 };
 
 const XMLPropertyMapEntry aXMLScColumnStylesProperties[] =
 {
-    MAP( "IsManualPageBreak", XML_NAMESPACE_FO, XML_BREAK_BEFORE, XML_TYPE_PROP_TABLE_COLUMN|XML_SC_TYPE_BREAKBEFORE, 0),
-    MAP( "IsVisible", XML_NAMESPACE_TABLE, XML_DISPLAY, XML_TYPE_PROP_TABLE_COLUMN|XML_SC_TYPE_EQUAL|MID_FLAG_SPECIAL_ITEM, CTF_SC_ISVISIBLE ),
-    MAP( "Width", XML_NAMESPACE_STYLE, XML_COLUMN_WIDTH, XML_TYPE_PROP_TABLE_COLUMN|XML_TYPE_MEASURE, 0 ),
+    MAP( "IsManualPageBreak", XmlNamespace::FO, XML_BREAK_BEFORE, XML_TYPE_PROP_TABLE_COLUMN|XML_SC_TYPE_BREAKBEFORE, 0),
+    MAP( "IsVisible", XmlNamespace::TABLE, XML_DISPLAY, XML_TYPE_PROP_TABLE_COLUMN|XML_SC_TYPE_EQUAL|MID_FLAG_SPECIAL_ITEM, CTF_SC_ISVISIBLE ),
+    MAP( "Width", XmlNamespace::STYLE, XML_COLUMN_WIDTH, XML_TYPE_PROP_TABLE_COLUMN|XML_TYPE_MEASURE, 0 ),
     MAP_END()
 };
 
@@ -128,27 +128,27 @@ const XMLPropertyMapEntry aXMLScRowStylesImportProperties[] =
     // but this doesn't work at the moment because SvXMLImportPropertyMapper compares MID_FLAG_NO_PROPERTY to 0.
     // If this is changed (not for 2.0.x), a single map can be used again.
 
-    MAP( "CellBackColor", XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    MAP( "Height", XML_NAMESPACE_STYLE, XML_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_MEASURE, CTF_SC_ROWHEIGHT),
-    MAP( "IsCellBackgroundTransparent", XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_ISTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    MAP( "IsManualPageBreak", XML_NAMESPACE_FO, XML_BREAK_BEFORE, XML_TYPE_PROP_TABLE_ROW|XML_SC_TYPE_BREAKBEFORE, CTF_SC_ROWBREAKBEFORE),
-    MAP( "OptimalHeight", XML_NAMESPACE_STYLE, XML_USE_OPTIMAL_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_BOOL, CTF_SC_ROWOPTIMALHEIGHT),
+    MAP( "CellBackColor", XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    MAP( "Height", XmlNamespace::STYLE, XML_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_MEASURE, CTF_SC_ROWHEIGHT),
+    MAP( "IsCellBackgroundTransparent", XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_ISTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    MAP( "IsManualPageBreak", XmlNamespace::FO, XML_BREAK_BEFORE, XML_TYPE_PROP_TABLE_ROW|XML_SC_TYPE_BREAKBEFORE, CTF_SC_ROWBREAKBEFORE),
+    MAP( "OptimalHeight", XmlNamespace::STYLE, XML_USE_OPTIMAL_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_BOOL, CTF_SC_ROWOPTIMALHEIGHT),
     MAP_END()
 };
 
 const XMLPropertyMapEntry aXMLScRowStylesProperties[] =
 {
-    MAP( "Height", XML_NAMESPACE_STYLE, XML_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_MEASURE, CTF_SC_ROWHEIGHT),
-    MAP( "IsManualPageBreak", XML_NAMESPACE_FO, XML_BREAK_BEFORE, XML_TYPE_PROP_TABLE_ROW|XML_SC_TYPE_BREAKBEFORE, CTF_SC_ROWBREAKBEFORE),
-    MAP( "OptimalHeight", XML_NAMESPACE_STYLE, XML_USE_OPTIMAL_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_BOOL, CTF_SC_ROWOPTIMALHEIGHT),
+    MAP( "Height", XmlNamespace::STYLE, XML_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_MEASURE, CTF_SC_ROWHEIGHT),
+    MAP( "IsManualPageBreak", XmlNamespace::FO, XML_BREAK_BEFORE, XML_TYPE_PROP_TABLE_ROW|XML_SC_TYPE_BREAKBEFORE, CTF_SC_ROWBREAKBEFORE),
+    MAP( "OptimalHeight", XmlNamespace::STYLE, XML_USE_OPTIMAL_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_BOOL, CTF_SC_ROWOPTIMALHEIGHT),
     MAP_END()
 };
 
 const XMLPropertyMapEntry aXMLScFromXLSRowStylesProperties[] =
 {
-    MAP( "Height", XML_NAMESPACE_STYLE, XML_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_MEASURE, CTF_SC_ROWHEIGHT),
-    MAP( "IsManualPageBreak", XML_NAMESPACE_FO, XML_BREAK_BEFORE, XML_TYPE_PROP_TABLE_ROW|XML_SC_TYPE_BREAKBEFORE, CTF_SC_ROWBREAKBEFORE),
-    MAP( "OptimalHeight", XML_NAMESPACE_STYLE, XML_USE_OPTIMAL_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_BOOL_FALSE, CTF_SC_ROWOPTIMALHEIGHT),
+    MAP( "Height", XmlNamespace::STYLE, XML_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_MEASURE, CTF_SC_ROWHEIGHT),
+    MAP( "IsManualPageBreak", XmlNamespace::FO, XML_BREAK_BEFORE, XML_TYPE_PROP_TABLE_ROW|XML_SC_TYPE_BREAKBEFORE, CTF_SC_ROWBREAKBEFORE),
+    MAP( "OptimalHeight", XmlNamespace::STYLE, XML_USE_OPTIMAL_ROW_HEIGHT, XML_TYPE_PROP_TABLE_ROW|XML_TYPE_BOOL_FALSE, CTF_SC_ROWOPTIMALHEIGHT),
     MAP_END()
 };
 
@@ -159,24 +159,24 @@ const XMLPropertyMapEntry aXMLScTableStylesImportProperties[] =
     // but this doesn't work at the moment because SvXMLImportPropertyMapper compares MID_FLAG_NO_PROPERTY to 0.
     // If this is changed (not for 2.0.x), a single map can be used again.
 
-    MAP( "CellBackColor", XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    MAP( "IsCellBackgroundTransparent", XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_ISTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    MAP( "IsVisible", XML_NAMESPACE_TABLE, XML_DISPLAY, XML_TYPE_PROP_TABLE|XML_TYPE_BOOL, 0 ),
-    MAP( "PageStyle", XML_NAMESPACE_STYLE, XML_MASTER_PAGE_NAME, XML_TYPE_PROP_TABLE|XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM, CTF_SC_MASTERPAGENAME ),
-    MAP( "TableLayout", XML_NAMESPACE_STYLE, XML_WRITING_MODE, XML_TYPE_PROP_TABLE|XML_TYPE_TEXT_WRITING_MODE, 0 ),
-    MAP_ODF13( "TabColor", XML_NAMESPACE_TABLE, XML_TAB_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORAUTO, 0 ),
-    MAP_ODF13( "TabColor", XML_NAMESPACE_TABLE_EXT, XML_TAB_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORAUTO, 0 ),
+    MAP( "CellBackColor", XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    MAP( "IsCellBackgroundTransparent", XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_ISTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    MAP( "IsVisible", XmlNamespace::TABLE, XML_DISPLAY, XML_TYPE_PROP_TABLE|XML_TYPE_BOOL, 0 ),
+    MAP( "PageStyle", XmlNamespace::STYLE, XML_MASTER_PAGE_NAME, XML_TYPE_PROP_TABLE|XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM, CTF_SC_MASTERPAGENAME ),
+    MAP( "TableLayout", XmlNamespace::STYLE, XML_WRITING_MODE, XML_TYPE_PROP_TABLE|XML_TYPE_TEXT_WRITING_MODE, 0 ),
+    MAP_ODF13( "TabColor", XmlNamespace::TABLE, XML_TAB_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORAUTO, 0 ),
+    MAP_ODF13( "TabColor", XmlNamespace::TABLE_EXT, XML_TAB_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORAUTO, 0 ),
     MAP_END()
 };
 
 const XMLPropertyMapEntry aXMLScTableStylesProperties[] =
 {
-    MAP( "IsVisible", XML_NAMESPACE_TABLE, XML_DISPLAY, XML_TYPE_PROP_TABLE|XML_TYPE_BOOL, 0 ),
-    MAP( "PageStyle", XML_NAMESPACE_STYLE, XML_MASTER_PAGE_NAME, XML_TYPE_PROP_TABLE|XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM, CTF_SC_MASTERPAGENAME ),
-    MAP( "TableLayout", XML_NAMESPACE_STYLE, XML_WRITING_MODE, XML_TYPE_PROP_TABLE|XML_TYPE_TEXT_WRITING_MODE, 0 ),
+    MAP( "IsVisible", XmlNamespace::TABLE, XML_DISPLAY, XML_TYPE_PROP_TABLE|XML_TYPE_BOOL, 0 ),
+    MAP( "PageStyle", XmlNamespace::STYLE, XML_MASTER_PAGE_NAME, XML_TYPE_PROP_TABLE|XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM, CTF_SC_MASTERPAGENAME ),
+    MAP( "TableLayout", XmlNamespace::STYLE, XML_WRITING_MODE, XML_TYPE_PROP_TABLE|XML_TYPE_TEXT_WRITING_MODE, 0 ),
     // ODF 1.3 OFFICE-2173
-    MAP_ODF13( "TabColor", XML_NAMESPACE_TABLE, XML_TAB_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORAUTO, 0 ),
-    MAP_ODF13( "TabColor", XML_NAMESPACE_TABLE_EXT, XML_TAB_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORAUTO, 0 ),
+    MAP_ODF13( "TabColor", XmlNamespace::TABLE, XML_TAB_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORAUTO, 0 ),
+    MAP_ODF13( "TabColor", XmlNamespace::TABLE_EXT, XML_TAB_COLOR, XML_TYPE_PROP_TABLE|XML_TYPE_COLORAUTO, 0 ),
     MAP_END()
 };
 
@@ -536,8 +536,8 @@ void ScXMLCellExportPropertyMapper::handleElementItem(
         ( rProperty.maValue >>= sURL ) &&
         !sURL.isEmpty() )
     {
-        rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sURL );
-        rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE,
+        rExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, sURL );
+        rExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE,
                                       XML_SIMPLE );
         sal_uInt32 nPropIndex = rProperty.mnIndex;
         sal_uInt16 nPrefix = getPropertySetMapper()->GetEntryNameSpace( nPropIndex );
@@ -713,14 +713,14 @@ void ScXMLAutoStylePoolP::exportStyleContent(
                                             OUString sCondition = "is-true-formula("
                                                                 + xSheetCondition->getFormula1()
                                                                 + ")";
-                                            rScXMLExport.AddAttribute(XML_NAMESPACE_STYLE, XML_CONDITION, sCondition);
-                                            rScXMLExport.AddAttribute(XML_NAMESPACE_STYLE, XML_APPLY_STYLE_NAME, rScXMLExport.EncodeStyleName( sStyleName ));
+                                            rScXMLExport.AddAttribute(XmlNamespace::STYLE, XML_CONDITION, sCondition);
+                                            rScXMLExport.AddAttribute(XmlNamespace::STYLE, XML_APPLY_STYLE_NAME, rScXMLExport.EncodeStyleName( sStyleName ));
                                             OUString sOUBaseAddress;
                                             ScDocument* pDoc = rScXMLExport.GetDocument();
                                             ScRangeStringConverter::GetStringFromAddress( sOUBaseAddress,
                                                 xSheetCondition->getSourcePosition(), pDoc, FormulaGrammar::CONV_OOO );
-                                            rScXMLExport.AddAttribute(XML_NAMESPACE_STYLE, XML_BASE_CELL_ADDRESS, sOUBaseAddress);
-                                            SvXMLElementExport aMElem(rScXMLExport, XML_NAMESPACE_STYLE, XML_MAP, true, true);
+                                            rScXMLExport.AddAttribute(XmlNamespace::STYLE, XML_BASE_CELL_ADDRESS, sOUBaseAddress);
+                                            SvXMLElementExport aMElem(rScXMLExport, XmlNamespace::STYLE, XML_MAP, true, true);
                                         }
                                         else
                                         {
@@ -767,13 +767,13 @@ void ScXMLAutoStylePoolP::exportStyleContent(
                                                 }
                                                 sCondition += xSheetCondition->getFormula1();
                                             }
-                                            rScXMLExport.AddAttribute(XML_NAMESPACE_STYLE, XML_CONDITION, sCondition);
-                                            rScXMLExport.AddAttribute(XML_NAMESPACE_STYLE, XML_APPLY_STYLE_NAME, rScXMLExport.EncodeStyleName( sStyleName ));
+                                            rScXMLExport.AddAttribute(XmlNamespace::STYLE, XML_CONDITION, sCondition);
+                                            rScXMLExport.AddAttribute(XmlNamespace::STYLE, XML_APPLY_STYLE_NAME, rScXMLExport.EncodeStyleName( sStyleName ));
                                             OUString sOUBaseAddress;
                                             ScRangeStringConverter::GetStringFromAddress( sOUBaseAddress,
                                                 xSheetCondition->getSourcePosition(), rScXMLExport.GetDocument(), FormulaGrammar::CONV_OOO );
-                                            rScXMLExport.AddAttribute(XML_NAMESPACE_STYLE, XML_BASE_CELL_ADDRESS, sOUBaseAddress);
-                                            SvXMLElementExport aMElem(rScXMLExport, XML_NAMESPACE_STYLE, XML_MAP, true, true);
+                                            rScXMLExport.AddAttribute(XmlNamespace::STYLE, XML_BASE_CELL_ADDRESS, sOUBaseAddress);
+                                            SvXMLElementExport aMElem(rScXMLExport, XmlNamespace::STYLE, XML_MAP, true, true);
                                         }
                                     }
                                 }
diff --git a/sc/source/filter/xml/xmlstyli.cxx b/sc/source/filter/xml/xmlstyli.cxx
index 9dcc5893639b..2aa4a129f155 100644
--- a/sc/source/filter/xml/xmlstyli.cxx
+++ b/sc/source/filter/xml/xmlstyli.cxx
@@ -304,7 +304,7 @@ SvXMLImportContextRef XMLTableCellPropsContext::CreateChildContext( sal_uInt16 n
     // no need for a custom context or indeed a SvXMLTokenMap to grab just the
     // single attribute ( href ) that we are interested in.
     // still though, we will check namespaces etc.
-    if ((XML_NAMESPACE_STYLE == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix)
+    if ((XmlNamespace::STYLE == nPrefix || XmlNamespace::LO_EXT == nPrefix)
         && IsXMLToken(rLocalName, XML_HYPERLINK))
     {
         OUString sURL;
@@ -314,7 +314,7 @@ SvXMLImportContextRef XMLTableCellPropsContext::CreateChildContext( sal_uInt16 n
             OUString sName = xAttrList->getNameByIndex(i);
             sal_uInt16 nPrfx = GetImport().GetNamespaceMap().GetKeyByAttrName( sName,
                                                             &aLocalName );
-            if ( nPrfx == XML_NAMESPACE_XLINK )
+            if ( nPrfx == XmlNamespace::XLINK )
             {
                 if ( IsXMLToken( aLocalName, XML_HREF ) )
                 {
@@ -367,7 +367,7 @@ ScXMLMapContext::ScXMLMapContext(SvXMLImport& rImport, sal_uInt16 nPrfx,
         const OUString& rValue(xAttrList->getValueByIndex( i ));
 
         // TODO: use a map here
-        if( XML_NAMESPACE_STYLE == nPrefix )
+        if( XmlNamespace::STYLE == nPrefix )
         {
             if( IsXMLToken(aLocalName, XML_CONDITION ) )
                 msCondition = rValue;
@@ -451,7 +451,7 @@ SvXMLImportContextRef XMLTableStyleContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( (XML_NAMESPACE_STYLE == nPrefix) &&
+    if( (XmlNamespace::STYLE == nPrefix) &&
         IsXMLToken(rLocalName, XML_MAP ) )
     {
         if(!mpCondFormat)
@@ -460,7 +460,7 @@ SvXMLImportContextRef XMLTableStyleContext::CreateChildContext(
         xContext = pMapContext;
         mpCondFormat->AddEntry(pMapContext->CreateConditionEntry());
     }
-    else if ( ( XML_NAMESPACE_STYLE == nPrefix) &&
+    else if ( ( XmlNamespace::STYLE == nPrefix) &&
         IsXMLToken(rLocalName, XML_TABLE_CELL_PROPERTIES ) )
     {
         rtl::Reference < SvXMLImportPropertyMapper > xImpPrMap =
@@ -922,7 +922,7 @@ SvXMLStyleContext *ScXMLMasterStylesContext::CreateStyleChildContext(
 {
     SvXMLStyleContext *pContext(nullptr);
 
-    if( (XML_NAMESPACE_STYLE == nPrefix) &&
+    if( (XmlNamespace::STYLE == nPrefix) &&
         IsXMLToken(rLocalName, XML_MASTER_PAGE) &&
          InsertStyleFamily( XmlStyleFamily::MASTER_PAGE ) )
         pContext = new ScMasterPageContext(
diff --git a/starmath/source/mathmlexport.cxx b/starmath/source/mathmlexport.cxx
index 2f7f8de552ff..b6d235ffa12c 100644
--- a/starmath/source/mathmlexport.cxx
+++ b/starmath/source/mathmlexport.cxx
@@ -427,10 +427,10 @@ ErrCode SmXMLExport::exportDoc(enum XMLTokenEnum eClass)
 
         // make use of a default namespace
         ResetNamespaceMap();    // Math doesn't need namespaces from xmloff, since it now uses default namespaces (because that is common with current MathML usage in the web)
-        GetNamespaceMap_().Add( OUString(), GetXMLToken(XML_N_MATH), XML_NAMESPACE_MATH );
+        GetNamespaceMap_().Add( OUString(), GetXMLToken(XML_N_MATH), XmlNamespace::MATH );
 
-        rList.AddAttribute(GetNamespaceMap().GetAttrNameByKey(XML_NAMESPACE_MATH),
-                GetNamespaceMap().GetNameByKey( XML_NAMESPACE_MATH));
+        rList.AddAttribute(GetNamespaceMap().GetAttrNameByKey(XmlNamespace::MATH),
+                GetNamespaceMap().GetNameByKey( XmlNamespace::MATH));
 
         //I think we need something like ImplExportEntities();
         ExportContent_();
@@ -454,14 +454,14 @@ void SmXMLExport::ExportContent_()
         // If the Math equation is not in text mode, we attach a display="block"
         // attribute on the <math> root. We don't do anything if it is in
         // text mode, the default display="inline" value will be used.
-        AddAttribute(XML_NAMESPACE_MATH, XML_DISPLAY, XML_BLOCK);
+        AddAttribute(XmlNamespace::MATH, XML_DISPLAY, XML_BLOCK);
     }
-    SvXMLElementExport aEquation(*this, XML_NAMESPACE_MATH, XML_MATH, true, true);
+    SvXMLElementExport aEquation(*this, XmlNamespace::MATH, XML_MATH, true, true);
     std::unique_ptr<SvXMLElementExport> pSemantics;
 
     if (!aText.isEmpty())
     {
-        pSemantics.reset( new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+        pSemantics.reset( new SvXMLElementExport(*this, XmlNamespace::MATH,
             XML_SEMANTICS, true, true) );
     }
 
@@ -482,9 +482,9 @@ void SmXMLExport::ExportContent_()
         rParser.SetExportSymbolNames( bVal );
     }
 
-    AddAttribute(XML_NAMESPACE_MATH, XML_ENCODING,
+    AddAttribute(XmlNamespace::MATH, XML_ENCODING,
         OUString("StarMath 5.0"));
-    SvXMLElementExport aAnnotation(*this, XML_NAMESPACE_MATH,
+    SvXMLElementExport aAnnotation(*this, XmlNamespace::MATH,
         XML_ANNOTATION, true, false);
     GetDocHandler()->characters( aText );
 }
@@ -570,7 +570,7 @@ void SmXMLExport::ExportBinaryHorizontal(const SmNode *pNode, int nLevel)
 {
     TG nGroup = pNode->GetToken().nGroup;
 
-    SvXMLElementExport aRow(*this, XML_NAMESPACE_MATH, XML_MROW, true, true);
+    SvXMLElementExport aRow(*this, XmlNamespace::MATH, XML_MROW, true, true);
 
     // Unfold the binary tree structure as long as the nodes are SmBinHorNode
     // with the same nGroup. This will reduce the number of nested <mrow>
@@ -612,7 +612,7 @@ void SmXMLExport::ExportExpression(const SmNode *pNode, int nLevel,
     // #i115443: nodes of type expression always need to be grouped with mrow statement
     if (!bNoMrowContainer &&
         (nSize > 1 || pNode->GetType() == SmNodeType::Expression))
-        pRow.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MROW, true, true));
+        pRow.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MROW, true, true));
 
     for (size_t i = 0; i < nSize; ++i)
     {
@@ -630,17 +630,17 @@ void SmXMLExport::ExportBinaryVertical(const SmNode *pNode, int nLevel)
     {
         // A left or right alignment is specified on the numerator:
         // attach the corresponding numalign attribute.
-        AddAttribute(XML_NAMESPACE_MATH, XML_NUMALIGN,
+        AddAttribute(XmlNamespace::MATH, XML_NUMALIGN,
             pNum->GetToken().eType == TALIGNL ? XML_LEFT : XML_RIGHT);
     }
     if (pDenom->GetType() == SmNodeType::Align && pDenom->GetToken().eType != TALIGNC)
     {
         // A left or right alignment is specified on the denominator:
         // attach the corresponding denomalign attribute.
-        AddAttribute(XML_NAMESPACE_MATH, XML_DENOMALIGN,
+        AddAttribute(XmlNamespace::MATH, XML_DENOMALIGN,
             pDenom->GetToken().eType == TALIGNL ? XML_LEFT : XML_RIGHT);
     }
-    SvXMLElementExport aFraction(*this, XML_NAMESPACE_MATH, XML_MFRAC, true, true);
+    SvXMLElementExport aFraction(*this, XmlNamespace::MATH, XML_MFRAC, true, true);
     ExportNodes(pNum, nLevel);
     ExportNodes(pDenom, nLevel);
 }
@@ -653,8 +653,8 @@ void SmXMLExport::ExportBinaryDiagonal(const SmNode *pNode, int nLevel)
     {
         // wideslash
         // export the node as <mfrac bevelled="true">
-        AddAttribute(XML_NAMESPACE_MATH, XML_BEVELLED, XML_TRUE);
-        SvXMLElementExport aFraction(*this, XML_NAMESPACE_MATH, XML_MFRAC,
+        AddAttribute(XmlNamespace::MATH, XML_BEVELLED, XML_TRUE);
+        SvXMLElementExport aFraction(*this, XmlNamespace::MATH, XML_MFRAC,
             true, true);
         ExportNodes(pNode->GetSubNode(0), nLevel);
         ExportNodes(pNode->GetSubNode(1), nLevel);
@@ -663,12 +663,12 @@ void SmXMLExport::ExportBinaryDiagonal(const SmNode *pNode, int nLevel)
     {
         // widebslash
         // We can not use <mfrac> to a backslash, so just use <mo>\</mo>
-        SvXMLElementExport aRow(*this, XML_NAMESPACE_MATH, XML_MROW, true, true);
+        SvXMLElementExport aRow(*this, XmlNamespace::MATH, XML_MROW, true, true);
 
         ExportNodes(pNode->GetSubNode(0), nLevel);
 
         { // Scoping for <mo> creation
-        SvXMLElementExport aMo(*this, XML_NAMESPACE_MATH, XML_MO,
+        SvXMLElementExport aMo(*this, XmlNamespace::MATH, XML_MO,
             true, true);
         sal_Unicode const nArse[2] = {MS_BACKSLASH,0x00};
         GetDocHandler()->characters(nArse);
@@ -700,7 +700,7 @@ void SmXMLExport::ExportTable(const SmNode *pNode, int nLevel)
     // try to avoid creating a mtable element when the formula consists only
     // of a single output line
     if (nLevel || (nSize >1))
-        pTable.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MTABLE, true, true));
+        pTable.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MTABLE, true, true));
 
     for (size_t i = 0; i < nSize; ++i)
     {
@@ -710,7 +710,7 @@ void SmXMLExport::ExportTable(const SmNode *pNode, int nLevel)
             std::unique_ptr<SvXMLElementExport> pCell;
             if (pTable)
             {
-                pRow.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MTR, true, true));
+                pRow.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MTR, true, true));
                 SmTokenType eAlign = TALIGNC;
                 if (pTemp->GetType() == SmNodeType::Align)
                 {
@@ -734,10 +734,10 @@ void SmXMLExport::ExportTable(const SmNode *pNode, int nLevel)
                 {
                     // If a left or right alignment is specified on this line,
                     // attach the corresponding columnalign attribute.
-                    AddAttribute(XML_NAMESPACE_MATH, XML_COLUMNALIGN,
+                    AddAttribute(XmlNamespace::MATH, XML_COLUMNALIGN,
                         eAlign == TALIGNL ? XML_LEFT : XML_RIGHT);
                 }
-                pCell.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MTD, true, true));
+                pCell.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MTD, true, true));
             }
             ExportNodes(pTemp, nLevel+1);
         }
@@ -752,14 +752,14 @@ void SmXMLExport::ExportMath(const SmNode *pNode)
     if (pNode->GetType() == SmNodeType::Math || pNode->GetType() == SmNodeType::GlyphSpecial)
     {
         // Export SmNodeType::Math and SmNodeType::GlyphSpecial symbols as <mo> elements
-        pMath.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MO, true, false));
+        pMath.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MO, true, false));
     }
     else if (pNode->GetType() == SmNodeType::Special)
     {
         bool bIsItalic = IsItalic(pNode->GetFont());
         if (!bIsItalic)
-            AddAttribute(XML_NAMESPACE_MATH, XML_MATHVARIANT, XML_NORMAL);
-        pMath.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MI, true, false));
+            AddAttribute(XmlNamespace::MATH, XML_MATHVARIANT, XML_NORMAL);
+        pMath.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MI, true, false));
     }
     else
     {
@@ -771,8 +771,8 @@ void SmXMLExport::ExportMath(const SmNode *pNode)
         // - The MathML specification suggests to use empty <mi> elements as
         // placeholders but they won't be visible in most MathML rendering
         // engines so let's use an empty square for SmNodeType::Place instead.
-        AddAttribute(XML_NAMESPACE_MATH, XML_MATHVARIANT, XML_NORMAL);
-        pMath.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MI, true, false));
+        AddAttribute(XmlNamespace::MATH, XML_MATHVARIANT, XML_NORMAL);
+        pMath.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MI, true, false));
     }
     sal_Unicode nArse[2];
     nArse[0] = pTemp->GetText()[0];
@@ -797,17 +797,17 @@ void SmXMLExport::ExportText(const SmNode *pNode)
             //are italic and longer than a single character.
             bool bIsItalic = IsItalic( pTemp->GetFont() );
             if ((pTemp->GetText().getLength() > 1) && bIsItalic)
-                AddAttribute(XML_NAMESPACE_MATH, XML_MATHVARIANT, XML_ITALIC);
+                AddAttribute(XmlNamespace::MATH, XML_MATHVARIANT, XML_ITALIC);
             else if ((pTemp->GetText().getLength() == 1) && !bIsItalic)
-                AddAttribute(XML_NAMESPACE_MATH, XML_MATHVARIANT, XML_NORMAL);
-            pText.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MI, true, false));
+                AddAttribute(XmlNamespace::MATH, XML_MATHVARIANT, XML_NORMAL);
+            pText.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MI, true, false));
             break;
         }
         case TNUMBER:
-            pText.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MN, true, false));
+            pText.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MN, true, false));
             break;
         case TTEXT:
-            pText.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MTEXT, true, false));
+            pText.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MTEXT, true, false));
             break;
         }
     GetDocHandler()->characters(pTemp->GetText());
@@ -828,10 +828,10 @@ void SmXMLExport::ExportBlank(const SmNode *pNode)
         OUStringBuffer sStrBuf;
         ::sax::Converter::convertDouble(sStrBuf, pTemp->GetBlankNum() * .5);
         sStrBuf.append("em");
-        AddAttribute(XML_NAMESPACE_MATH, XML_WIDTH, sStrBuf.getStr());
+        AddAttribute(XmlNamespace::MATH, XML_WIDTH, sStrBuf.getStr());
     }
 
-    SvXMLElementExport aTextExport(*this, XML_NAMESPACE_MATH, XML_MSPACE,
+    SvXMLElementExport aTextExport(*this, XmlNamespace::MATH, XML_MSPACE,
                                 true, false);
 
     GetDocHandler()->characters( OUString() );
@@ -856,24 +856,24 @@ void SmXMLExport::ExportSubSupScript(const SmNode *pNode, int nLevel)
     pLSup = pNode->GetSubNode(LSUP+1);
     if (pLSub || pLSup)
     {
-        SvXMLElementExport aMultiScripts(*this, XML_NAMESPACE_MATH,
+        SvXMLElementExport aMultiScripts(*this, XmlNamespace::MATH,
             XML_MMULTISCRIPTS, true, true);
 
 
         if (nullptr != (pCSub = pNode->GetSubNode(CSUB+1))
             && nullptr != (pCSup = pNode->GetSubNode(CSUP+1)))
         {
-            pThing2.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+            pThing2.reset(new SvXMLElementExport(*this, XmlNamespace::MATH,
                 XML_MUNDEROVER, true, true));
         }
         else if (nullptr != (pCSub = pNode->GetSubNode(CSUB+1)))
         {
-            pThing2.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+            pThing2.reset(new SvXMLElementExport(*this, XmlNamespace::MATH,
                 XML_MUNDER, true, true));
         }
         else if (nullptr != (pCSup = pNode->GetSubNode(CSUP+1)))
         {
-            pThing2.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+            pThing2.reset(new SvXMLElementExport(*this, XmlNamespace::MATH,
                 XML_MOVER, true, true));
         }
 
@@ -893,19 +893,19 @@ void SmXMLExport::ExportSubSupScript(const SmNode *pNode, int nLevel)
                 ExportNodes(pSub, nLevel+1);
             else
             {
-                SvXMLElementExport aNone(*this, XML_NAMESPACE_MATH, XML_NONE, true, true);
+                SvXMLElementExport aNone(*this, XmlNamespace::MATH, XML_NONE, true, true);
             }
             if (pSup)
                 ExportNodes(pSup, nLevel+1);
             else
             {
-                SvXMLElementExport aNone(*this, XML_NAMESPACE_MATH, XML_NONE, true, true);
+                SvXMLElementExport aNone(*this, XmlNamespace::MATH, XML_NONE, true, true);
             }
         }
 
         //Separator element between suffix and prefix sub/sup pairs
         {
-            SvXMLElementExport aPrescripts(*this, XML_NAMESPACE_MATH,
+            SvXMLElementExport aPrescripts(*this, XmlNamespace::MATH,
                 XML_MPRESCRIPTS, true, true);
         }
 
@@ -913,7 +913,7 @@ void SmXMLExport::ExportSubSupScript(const SmNode *pNode, int nLevel)
             ExportNodes(pLSub, nLevel+1);
         else
         {
-            SvXMLElementExport aNone(*this, XML_NAMESPACE_MATH, XML_NONE,
+            SvXMLElementExport aNone(*this, XmlNamespace::MATH, XML_NONE,
                 true, true);
 
         }
@@ -921,7 +921,7 @@ void SmXMLExport::ExportSubSupScript(const SmNode *pNode, int nLevel)
             ExportNodes(pLSup, nLevel+1);
         else
         {
-            SvXMLElementExport aNone(*this, XML_NAMESPACE_MATH, XML_NONE,
+            SvXMLElementExport aNone(*this, XmlNamespace::MATH, XML_NONE,
                 true, true);
 
         }
@@ -932,34 +932,34 @@ void SmXMLExport::ExportSubSupScript(const SmNode *pNode, int nLevel)
         if (nullptr != (pSub = pNode->GetSubNode(RSUB+1)) &&
             nullptr != (pSup = pNode->GetSubNode(RSUP+1)))
         {
-            pThing.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+            pThing.reset(new SvXMLElementExport(*this, XmlNamespace::MATH,
                 XML_MSUBSUP, true, true));
         }
         else if (nullptr != (pSub = pNode->GetSubNode(RSUB+1)))
         {
-            pThing.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MSUB,
+            pThing.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MSUB,
                 true, true));
         }
         else if (nullptr != (pSup = pNode->GetSubNode(RSUP+1)))
         {
-            pThing.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MSUP,
+            pThing.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MSUP,
                 true, true));
         }
 
         if (nullptr != (pCSub = pNode->GetSubNode(CSUB+1))
             && nullptr != (pCSup=pNode->GetSubNode(CSUP+1)))
         {
-            pThing2.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+            pThing2.reset(new SvXMLElementExport(*this, XmlNamespace::MATH,
                 XML_MUNDEROVER, true, true));
         }
         else if (nullptr != (pCSub = pNode->GetSubNode(CSUB+1)))
         {
-            pThing2.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+            pThing2.reset(new SvXMLElementExport(*this, XmlNamespace::MATH,
                 XML_MUNDER, true, true));
         }
         else if (nullptr != (pCSup = pNode->GetSubNode(CSUP+1)))
         {
-            pThing2.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+            pThing2.reset(new SvXMLElementExport(*this, XmlNamespace::MATH,
                 XML_MOVER, true, true));
         }
         ExportNodes(pNode->GetSubNode(0), nLevel+1);    //Main Term
@@ -993,24 +993,24 @@ void SmXMLExport::ExportBrace(const SmNode *pNode, int nLevel)
     // See #fdo 66282.
 
     // <mrow>
-    SvXMLElementExport aRow(*this, XML_NAMESPACE_MATH, XML_MROW,
+    SvXMLElementExport aRow(*this, XmlNamespace::MATH, XML_MROW,
                                     true, true);
 
     //   <mo fence="true"> opening-fence </mo>
     if (pLeft && (pLeft->GetToken().eType != TNONE))
     {
-        AddAttribute(XML_NAMESPACE_MATH, XML_FENCE, XML_TRUE);
+        AddAttribute(XmlNamespace::MATH, XML_FENCE, XML_TRUE);
         if (pNode->GetScaleMode() == SmScaleMode::Height)
-            AddAttribute(XML_NAMESPACE_MATH, XML_STRETCHY, XML_TRUE);
+            AddAttribute(XmlNamespace::MATH, XML_STRETCHY, XML_TRUE);
         else
-            AddAttribute(XML_NAMESPACE_MATH, XML_STRETCHY, XML_FALSE);
+            AddAttribute(XmlNamespace::MATH, XML_STRETCHY, XML_FALSE);
         ExportNodes(pLeft, nLevel+1);
     }
 
     if (nullptr != (pTemp = pNode->GetSubNode(1)))
     {
         // <mrow>
-        SvXMLElementExport aRowExport(*this, XML_NAMESPACE_MATH, XML_MROW,
+        SvXMLElementExport aRowExport(*this, XmlNamespace::MATH, XML_MROW,
             true, true);
         ExportNodes(pTemp, nLevel+1);
         // </mrow>
@@ -1019,11 +1019,11 @@ void SmXMLExport::ExportBrace(const SmNode *pNode, int nLevel)
     //   <mo fence="true"> closing-fence </mo>
     if (pRight && (pRight->GetToken().eType != TNONE))
     {
-        AddAttribute(XML_NAMESPACE_MATH, XML_FENCE, XML_TRUE);
+        AddAttribute(XmlNamespace::MATH, XML_FENCE, XML_TRUE);
         if (pNode->GetScaleMode() == SmScaleMode::Height)
-            AddAttribute(XML_NAMESPACE_MATH, XML_STRETCHY, XML_TRUE);
+            AddAttribute(XmlNamespace::MATH, XML_STRETCHY, XML_TRUE);
         else
-            AddAttribute(XML_NAMESPACE_MATH, XML_STRETCHY, XML_FALSE);
+            AddAttribute(XmlNamespace::MATH, XML_STRETCHY, XML_FALSE);
         ExportNodes(pRight, nLevel+1);
     }
 
@@ -1034,14 +1034,14 @@ void SmXMLExport::ExportRoot(const SmNode *pNode, int nLevel)
 {
     if (pNode->GetSubNode(0))
     {
-        SvXMLElementExport aRoot(*this, XML_NAMESPACE_MATH, XML_MROOT, true,
+        SvXMLElementExport aRoot(*this, XmlNamespace::MATH, XML_MROOT, true,
             true);
         ExportNodes(pNode->GetSubNode(2), nLevel+1);
         ExportNodes(pNode->GetSubNode(0), nLevel+1);
     }
     else
     {
-        SvXMLElementExport aSqrt(*this, XML_NAMESPACE_MATH, XML_MSQRT, true,
+        SvXMLElementExport aSqrt(*this, XmlNamespace::MATH, XML_MSQRT, true,
             true);
         ExportNodes(pNode->GetSubNode(2), nLevel+1);
     }
@@ -1051,7 +1051,7 @@ void SmXMLExport::ExportOperator(const SmNode *pNode, int nLevel)
 {
     /*we need to either use content or font and size attributes
      *here*/
-    SvXMLElementExport aRow(*this, XML_NAMESPACE_MATH, XML_MROW,
+    SvXMLElementExport aRow(*this, XmlNamespace::MATH, XML_MROW,
         true, true);
     ExportNodes(pNode->GetSubNode(0), nLevel+1);
     ExportNodes(pNode->GetSubNode(1), nLevel+1);
@@ -1063,23 +1063,23 @@ void SmXMLExport::ExportAttributes(const SmNode *pNode, int nLevel)
 
     if (pNode->GetToken().eType == TUNDERLINE)
     {
-        AddAttribute(XML_NAMESPACE_MATH, XML_ACCENTUNDER,
+        AddAttribute(XmlNamespace::MATH, XML_ACCENTUNDER,
             XML_TRUE);
-        pElement.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MUNDER,
+        pElement.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MUNDER,
             true, true));
     }
     else if (pNode->GetToken().eType == TOVERSTRIKE)
     {
         // export as <menclose notation="horizontalstrike">
-        AddAttribute(XML_NAMESPACE_MATH, XML_NOTATION, XML_HORIZONTALSTRIKE);
-        pElement.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH,
+        AddAttribute(XmlNamespace::MATH, XML_NOTATION, XML_HORIZONTALSTRIKE);
+        pElement.reset(new SvXMLElementExport(*this, XmlNamespace::MATH,
             XML_MENCLOSE, true, true));
     }
     else
     {
-        AddAttribute(XML_NAMESPACE_MATH, XML_ACCENT,
+        AddAttribute(XmlNamespace::MATH, XML_ACCENT,
             XML_TRUE);
-        pElement.reset(new SvXMLElementExport(*this, XML_NAMESPACE_MATH, XML_MOVER,
+        pElement.reset(new SvXMLElementExport(*this, XmlNamespace::MATH, XML_MOVER,
             true, true));
     }
 
@@ -1089,7 +1089,7 @@ void SmXMLExport::ExportAttributes(const SmNode *pNode, int nLevel)
         case TOVERLINE:
             {
             //proper entity support required
-            SvXMLElementExport aMath(*this, XML_NAMESPACE_MATH, XML_MO,
+            SvXMLElementExport aMath(*this, XmlNamespace::MATH, XML_MO,
                 true, true);
             sal_Unicode const nArse[2] = {0xAF,0x00};
             GetDocHandler()->characters(nArse);
@@ -1098,7 +1098,7 @@ void SmXMLExport::ExportAttributes(const SmNode *pNode, int nLevel)
         case TUNDERLINE:
             {
             //proper entity support required
-            SvXMLElementExport aMath(*this, XML_NAMESPACE_MATH, XML_MO,
+            SvXMLElementExport aMath(*this, XmlNamespace::MATH, XML_MO,
                 true, true);
             sal_Unicode const nArse[2] = {0x0332,0x00};
             GetDocHandler()->characters(nArse);
@@ -1112,7 +1112,7 @@ void SmXMLExport::ExportAttributes(const SmNode *pNode, int nLevel)
         case TWIDEHARPOON:
             {
             // make these wide accents stretchy
-            AddAttribute(XML_NAMESPACE_MATH, XML_STRETCHY, XML_TRUE);
+            AddAttribute(XmlNamespace::MATH, XML_STRETCHY, XML_TRUE);
             ExportNodes(pNode->GetSubNode(0), nLevel+1);
             }
             break;
@@ -1174,58 +1174,58 @@ void SmXMLExport::ExportFont(const SmNode *pNode, int nLevel)
             // No attribute needed. An <mphantom> element will be used below.
             break;
         case TBLACK:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_BLACK);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_BLACK);
             break;
         case TWHITE:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_WHITE);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_WHITE);
             break;
         case TRED:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_RED);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_RED);
             break;
         case TGREEN:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_GREEN);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_GREEN);
             break;
         case TBLUE:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_BLUE);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_BLUE);
             break;
         case TCYAN:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_AQUA);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_AQUA);
             break;
         case TMAGENTA:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_FUCHSIA);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_FUCHSIA);
             break;
         case TYELLOW:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_YELLOW);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_YELLOW);
             break;
         case TSILVER:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_SILVER);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_SILVER);
             break;
         case TGRAY:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_GRAY);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_GRAY);
             break;
         case TMAROON:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_MAROON);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_MAROON);
             break;
         case TOLIVE:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_OLIVE);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_OLIVE);
             break;
         case TLIME:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_LIME);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_LIME);
             break;
         case TAQUA:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_AQUA);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_AQUA);
             break;
         case TTEAL:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_TEAL);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_TEAL);
             break;
         case TNAVY:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_NAVY);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_NAVY);
             break;
         case TFUCHSIA:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_FUCHSIA);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_FUCHSIA);
             break;
         case TPURPLE:
-            AddAttribute(XML_NAMESPACE_MATH, XML_COLOR, XML_PURPLE);
+            AddAttribute(XmlNamespace::MATH, XML_COLOR, XML_PURPLE);
             break;
         case TSIZE:
             {
@@ -1276,7 +1276,7 @@ void SmXMLExport::ExportFont(const SmNode *pNode, int nLevel)
                 }
 
                 OUString sStr(sStrBuf.makeStringAndClear());
-                AddAttribute(XML_NAMESPACE_MATH, XML_MATHSIZE, sStr);
+                AddAttribute(XmlNamespace::MATH, XML_MATHSIZE, sStr);
             }
             break;
         case TBOLD:
@@ -1317,7 +1317,7 @@ void SmXMLExport::ExportFont(const SmNode *pNode, int nLevel)
                 {
                     SAL_WARN("starmath", "unexpected case");
                 }
-                AddAttribute(XML_NAMESPACE_MATH, XML_MATHVARIANT, OUString::createFromAscii( pText ));
+                AddAttribute(XmlNamespace::MATH, XML_MATHVARIANT, OUString::createFromAscii( pText ));
             }
             break;
         default:
@@ -1328,7 +1328,7 @@ void SmXMLExport::ExportFont(const SmNode *pNode, int nLevel)
         // Wrap everything in an <mphantom> or <mstyle> element. These elements
         // are mrow-like, so ExportExpression doesn't need to add an explicit
         // <mrow> element. See #fdo 66283.
-        SvXMLElementExport aElement(*this, XML_NAMESPACE_MATH,
+        SvXMLElementExport aElement(*this, XmlNamespace::MATH,
             pNode->GetToken().eType == TPHANTOM ? XML_MPHANTOM : XML_MSTYLE,
             true, true);
         ExportExpression(pNode, nLevel, true);
@@ -1362,14 +1362,14 @@ void SmXMLExport::ExportVerticalBrace(const SmVerticalBraceNode *pNode, int nLev
             break;
     }
 
-    SvXMLElementExport aOver1(*this, XML_NAMESPACE_MATH,which, true, true);
+    SvXMLElementExport aOver1(*this, XmlNamespace::MATH,which, true, true);
     {//Scoping
         // using accents will draw the over-/underbraces too close to the base
         // see http://www.w3.org/TR/MathML2/chapter3.html#id.3.4.5.2
         // also XML_ACCENT is illegal with XML_MUNDER. Thus no XML_ACCENT attribute here!
-        SvXMLElementExport aOver2(*this, XML_NAMESPACE_MATH,which, true, true);
+        SvXMLElementExport aOver2(*this, XmlNamespace::MATH,which, true, true);
         ExportNodes(pNode->Body(), nLevel);
-        AddAttribute(XML_NAMESPACE_MATH, XML_STRETCHY, XML_TRUE);
+        AddAttribute(XmlNamespace::MATH, XML_STRETCHY, XML_TRUE);
         ExportNodes(pNode->Brace(), nLevel);
     }
     ExportNodes(pNode->Script(), nLevel);
@@ -1377,12 +1377,12 @@ void SmXMLExport::ExportVerticalBrace(const SmVerticalBraceNode *pNode, int nLev
 
 void SmXMLExport::ExportMatrix(const SmNode *pNode, int nLevel)
 {
-    SvXMLElementExport aTable(*this, XML_NAMESPACE_MATH, XML_MTABLE, true, true);
+    SvXMLElementExport aTable(*this, XmlNamespace::MATH, XML_MTABLE, true, true);
     const SmMatrixNode *pMatrix = static_cast<const SmMatrixNode *>(pNode);
     size_t i = 0;
     for (sal_uInt16 y = 0; y < pMatrix->GetNumRows(); y++)
     {
-        SvXMLElementExport aRow(*this, XML_NAMESPACE_MATH, XML_MTR, true, true);
+        SvXMLElementExport aRow(*this, XmlNamespace::MATH, XML_MTR, true, true);
         for (sal_uInt16 x = 0; x < pMatrix->GetNumCols(); x++)
         {
             if (const SmNode *pTemp = pNode->GetSubNode(i++))
@@ -1392,11 +1392,11 @@ void SmXMLExport::ExportMatrix(const SmNode *pNode, int nLevel)
                 {
                     // A left or right alignment is specified on this cell,
                     // attach the corresponding columnalign attribute.
-                    AddAttribute(XML_NAMESPACE_MATH, XML_COLUMNALIGN,
+                    AddAttribute(XmlNamespace::MATH, XML_COLUMNALIGN,
                         pTemp->GetToken().eType == TALIGNL ?
                         XML_LEFT : XML_RIGHT);
                 }
-                SvXMLElementExport aCell(*this, XML_NAMESPACE_MATH, XML_MTD, true, true);
+                SvXMLElementExport aCell(*this, XmlNamespace::MATH, XML_MTD, true, true);
                 ExportNodes(pTemp, nLevel+1);
             }
         }
@@ -1441,7 +1441,7 @@ void SmXMLExport::ExportNodes(const SmNode *pNode, int nLevel)
                     switch (pNode->GetToken().eType)
                     {
                         case TINTD:
-                            AddAttribute(XML_NAMESPACE_MATH, XML_STRETCHY, XML_TRUE);
+                            AddAttribute(XmlNamespace::MATH, XML_STRETCHY, XML_TRUE);
                             break;
                         default:
                             break;
@@ -1457,7 +1457,7 @@ void SmXMLExport::ExportNodes(const SmNode *pNode, int nLevel)
                         sal_uInt16 nPrefix = GetNamespaceMap().GetKeyByAttrName(
                             GetAttrList().getNameByIndex(i), &sLocalName );
 
-                        if ( ( XML_NAMESPACE_MATH == nPrefix ) &&
+                        if ( ( XmlNamespace::MATH == nPrefix ) &&
                             IsXMLToken(sLocalName, XML_STRETCHY) )
                         {
                             bAddStretch = false;
@@ -1466,7 +1466,7 @@ void SmXMLExport::ExportNodes(const SmNode *pNode, int nLevel)
                     }
                     if (bAddStretch)
                     {
-                        AddAttribute(XML_NAMESPACE_MATH, XML_STRETCHY, XML_FALSE);
+                        AddAttribute(XmlNamespace::MATH, XML_STRETCHY, XML_FALSE);
                     }
                     ExportMath(pNode);
                 }
diff --git a/starmath/source/mathmlimport.cxx b/starmath/source/mathmlimport.cxx
index b7db6414657f..d32841aeb224 100644
--- a/starmath/source/mathmlimport.cxx
+++ b/starmath/source/mathmlimport.cxx
@@ -724,8 +724,8 @@ void SmXMLContext_Helper::ApplyAttrs()
     //StarMath for now.
     const SvXMLTokenMap& rTokenMap =
         rContext.GetSmImport().GetColorTokenMap();
-    sal_uInt16 tok = rTokenMap.Get(XML_NAMESPACE_MATH, sColor);
-    if (tok != XML_TOK_UNKNOWN)
+    sal_uInt16 tok = rTokenMap.Get(XmlNamespace::MATH, sColor);
+    if (tok != XmlNamespace::UNKNOWN)
     {
         aToken.eType = static_cast<SmTokenType>(tok);
         std::unique_ptr<SmFontNode> pFontNode(new SmFontNode(aToken));
@@ -1979,22 +1979,22 @@ uno::Reference< xml::sax::XFastContextHandler > SAL_CALL SmXMLFlatDocContext_Imp
 
 const SvXMLTokenMapEntry aColorTokenMap[] =
 {
-    { XML_NAMESPACE_MATH,   XML_BLACK,        TBLACK},
-    { XML_NAMESPACE_MATH,   XML_WHITE,        TWHITE},
-    { XML_NAMESPACE_MATH,   XML_RED,          TRED},
-    { XML_NAMESPACE_MATH,   XML_GREEN,        TGREEN},
-    { XML_NAMESPACE_MATH,   XML_BLUE,         TBLUE},
-    { XML_NAMESPACE_MATH,   XML_AQUA,         TAQUA},
-    { XML_NAMESPACE_MATH,   XML_FUCHSIA,      TFUCHSIA},
-    { XML_NAMESPACE_MATH,   XML_YELLOW,       TYELLOW},
-    { XML_NAMESPACE_MATH,   XML_NAVY,         TNAVY},
-    { XML_NAMESPACE_MATH,   XML_TEAL,         TTEAL},
-    { XML_NAMESPACE_MATH,   XML_MAROON,       TMAROON},
-    { XML_NAMESPACE_MATH,   XML_PURPLE,       TPURPLE},
-    { XML_NAMESPACE_MATH,   XML_OLIVE,        TOLIVE},
-    { XML_NAMESPACE_MATH,   XML_GRAY,         TGRAY},
-    { XML_NAMESPACE_MATH,   XML_SILVER,       TSILVER},
-    { XML_NAMESPACE_MATH,   XML_LIME,         TLIME},
+    { XmlNamespace::MATH,   XML_BLACK,        TBLACK},
+    { XmlNamespace::MATH,   XML_WHITE,        TWHITE},
+    { XmlNamespace::MATH,   XML_RED,          TRED},
+    { XmlNamespace::MATH,   XML_GREEN,        TGREEN},
+    { XmlNamespace::MATH,   XML_BLUE,         TBLUE},
+    { XmlNamespace::MATH,   XML_AQUA,         TAQUA},
+    { XmlNamespace::MATH,   XML_FUCHSIA,      TFUCHSIA},
+    { XmlNamespace::MATH,   XML_YELLOW,       TYELLOW},
+    { XmlNamespace::MATH,   XML_NAVY,         TNAVY},
+    { XmlNamespace::MATH,   XML_TEAL,         TTEAL},
+    { XmlNamespace::MATH,   XML_MAROON,       TMAROON},
+    { XmlNamespace::MATH,   XML_PURPLE,       TPURPLE},
+    { XmlNamespace::MATH,   XML_OLIVE,        TOLIVE},
+    { XmlNamespace::MATH,   XML_GRAY,         TGRAY},
+    { XmlNamespace::MATH,   XML_SILVER,       TSILVER},
+    { XmlNamespace::MATH,   XML_LIME,         TLIME},
     XML_TOKEN_MAP_END
 };
 
@@ -2606,7 +2606,7 @@ SvXMLImportContext *SmXMLImport::CreateFastContext(sal_Int32 nElement,
         }
         break;
         default:
-            if (IsTokenInNamespace(nElement, XML_NAMESPACE_OFFICE))
+            if (IsTokenInNamespace(nElement, XmlNamespace::OFFICE))
                 pContext = new SmXMLOfficeContext_Impl(*this);
             else
                 pContext = new SmXMLDocContext_Impl(*this);
diff --git a/svx/source/xml/xmlxtexp.cxx b/svx/source/xml/xmlxtexp.cxx
index f501c0ea43a7..bb6081b82cdd 100644
--- a/svx/source/xml/xmlxtexp.cxx
+++ b/svx/source/xml/xmlxtexp.cxx
@@ -146,11 +146,11 @@ SvxXMLXTableExportComponent::SvxXMLXTableExportComponent(
     mxTable( xTable )
 {
 
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XML_NAMESPACE_OOO );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XML_NAMESPACE_OFFICE );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XML_NAMESPACE_DRAW );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK );
-    GetNamespaceMap_().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG),  XML_NAMESPACE_SVG );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XmlNamespace::OOO );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XmlNamespace::OFFICE );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XmlNamespace::DRAW );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK );
+    GetNamespaceMap_().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG),  XmlNamespace::SVG );
     SetGraphicStorageHandler(xGraphicStorageHandler);
 }
 
@@ -370,7 +370,7 @@ bool SvxXMLXTableExportComponent::exportTable() throw()
                 break;
             }
 
-            SvXMLElementExport aElem( *this, XML_NAMESPACE_OOO, pEleName, true, true );
+            SvXMLElementExport aElem( *this, XmlNamespace::OOO, pEleName, true, true );
 
             const Sequence< OUString > aNames = mxTable->getElementNames();
             Any aAny;
@@ -413,16 +413,16 @@ SvxXMLColorEntryExporter::SvxXMLColorEntryExporter( SvXMLExport& rExport )
 
 void SvxXMLColorEntryExporter::exportEntry( const OUString& rStrName, const Any& rValue )
 {
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, rStrName );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, rStrName );
 
     sal_Int32 nColor = 0;
     rValue >>= nColor;
 
     OUStringBuffer aOut;
     ::sax::Converter::convertColor( aOut, nColor );
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_COLOR, aOut.makeStringAndClear() );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_COLOR, aOut.makeStringAndClear() );
 
-    SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DRAW, XML_COLOR, true, true );
+    SvXMLElementExport aElem( mrExport, XmlNamespace::DRAW, XML_COLOR, true, true );
 }
 
 
diff --git a/svx/source/xml/xmlxtimp.cxx b/svx/source/xml/xmlxtimp.cxx
index 7c0a238dcebc..4ab7a6e6ba09 100644
--- a/svx/source/xml/xmlxtimp.cxx
+++ b/svx/source/xml/xmlxtimp.cxx
@@ -101,8 +101,8 @@ css::uno::Reference< css::xml::sax::XFastContextHandler >
         SvxXMLTableImportContext::createFastChildContext(sal_Int32 nElement,
             const css::uno::Reference< css::xml::sax::XFastAttributeList > & rAttrList)
 {
-    if( IsTokenInNamespace(nElement, XML_NAMESPACE_DRAW) ||
-        IsTokenInNamespace(nElement, XML_NAMESPACE_DRAW_OOO) )
+    if( IsTokenInNamespace(nElement, XmlNamespace::DRAW) ||
+        IsTokenInNamespace(nElement, XmlNamespace::DRAW_OOO) )
     {
         SvXMLAttributeList *pAttrList = new SvXMLAttributeList;
         for (auto& aIter : sax_fastparser::castToFastAttributeList( rAttrList ))
@@ -122,7 +122,7 @@ css::uno::Reference< css::xml::sax::XFastContextHandler >
                 sal_uInt16 nPrefix_ =
                     GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                 &aLocalName );
-                if( XML_NAMESPACE_XLINK == nPrefix_ &&
+                if( XmlNamespace::XLINK == nPrefix_ &&
                     SvxXMLTableImportContextEnum::Bitmap == meContext &&
                     IsXMLToken( aLocalName, XML_HREF ) )
                 {
@@ -130,7 +130,7 @@ css::uno::Reference< css::xml::sax::XFastContextHandler >
                     if( !rValue.isEmpty() && '#' == rValue[0] )
                         pAttrList->SetValueByIndex( i, rValue.copy( 1 ) );
                 }
-                else if( (XML_NAMESPACE_DRAW == nPrefix_ || XML_NAMESPACE_DRAW_OOO == nPrefix_) &&
+                else if( (XmlNamespace::DRAW == nPrefix_ || XmlNamespace::DRAW_OOO == nPrefix_) &&
                           ( ( SvxXMLTableImportContextEnum::Dash == meContext &&
                               (IsXMLToken( aLocalName, XML_DOTS1_LENGTH ) ||
                                IsXMLToken( aLocalName, XML_DOTS2_LENGTH ) ||
@@ -209,7 +209,7 @@ void SvxXMLTableImportContext::importColor( const uno::Reference< XAttributeList
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( rFullAttrName, &aLocalName );
 
 
-        if( XML_NAMESPACE_DRAW == nPrefix || XML_NAMESPACE_DRAW_OOO == nPrefix )
+        if( XmlNamespace::DRAW == nPrefix || XmlNamespace::DRAW_OOO == nPrefix )
         {
             if( aLocalName == GetXMLToken(XML_NAME) )
             {
@@ -308,21 +308,21 @@ SvxXMLXTableImport::SvxXMLXTableImport(
 {
     SetGraphicStorageHandler(xGraphicStorageHandler);
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XML_NAMESPACE_OOO);
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XML_NAMESPACE_OFFICE);
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XML_NAMESPACE_DRAW);
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK);
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XmlNamespace::OOO);
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XmlNamespace::OFFICE);
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XmlNamespace::DRAW);
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK);
 
-    GetNamespaceMap().Add( "__ooo", GetXMLToken(XML_N_OOO), XML_NAMESPACE_OOO );
-    GetNamespaceMap().Add( "__xlink", GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK );
+    GetNamespaceMap().Add( "__ooo", GetXMLToken(XML_N_OOO), XmlNamespace::OOO );
+    GetNamespaceMap().Add( "__xlink", GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK );
 
     // OOo namespaces for reading OOo 1.1 files
     GetNamespaceMap().Add( "___office",
                         GetXMLToken(XML_N_OFFICE_OOO),
-                        XML_NAMESPACE_OFFICE );
+                        XmlNamespace::OFFICE );
     GetNamespaceMap().Add( "___draw",
                         GetXMLToken(XML_N_DRAW_OOO),
-                        XML_NAMESPACE_DRAW );
+                        XmlNamespace::DRAW );
 }
 
 SvxXMLXTableImport::~SvxXMLXTableImport() throw ()
@@ -427,12 +427,12 @@ bool SvxXMLXTableImport::load( const OUString &rPath, const OUString &rReferer,
 SvXMLImportContext *SvxXMLXTableImport::CreateFastContext( sal_Int32 nElement,
         const ::css::uno::Reference< ::css::xml::sax::XFastAttributeList >& /*xAttrList*/ )
 {
-    if( IsTokenInNamespace(nElement, XML_NAMESPACE_OOO) ||
-        IsTokenInNamespace(nElement, XML_NAMESPACE_OFFICE) ||
-        IsTokenInNamespace(nElement, XML_NAMESPACE_OFFICE_OOO) )
+    if( IsTokenInNamespace(nElement, XmlNamespace::OOO) ||
+        IsTokenInNamespace(nElement, XmlNamespace::OFFICE) ||
+        IsTokenInNamespace(nElement, XmlNamespace::OFFICE_OOO) )
     {
-        bool bOOoFormat = IsTokenInNamespace(nElement, XML_NAMESPACE_OFFICE) ||
-                          IsTokenInNamespace(nElement, XML_NAMESPACE_OFFICE_OOO);
+        bool bOOoFormat = IsTokenInNamespace(nElement, XmlNamespace::OFFICE) ||
+                          IsTokenInNamespace(nElement, XmlNamespace::OFFICE_OOO);
         Type aType = mrTable->getElementType();
         sal_Int32 nToken = nElement & TOKEN_MASK;
 
diff --git a/sw/source/core/inc/SwXMLBlockImport.hxx b/sw/source/core/inc/SwXMLBlockImport.hxx
index d58ce4bf149a..7500d30f58d7 100644
--- a/sw/source/core/inc/SwXMLBlockImport.hxx
+++ b/sw/source/core/inc/SwXMLBlockImport.hxx
@@ -78,11 +78,11 @@ public:
 
 enum SwXMLTextBlockToken : sal_Int32
 {
-    OFFICE_BODY = FastToken::NAMESPACE | XML_NAMESPACE_OFFICE | XML_BODY,
-    OFFICE_TEXT = FastToken::NAMESPACE | XML_NAMESPACE_OFFICE | XML_TEXT,
-    OFFICE_DOCUMENT = FastToken::NAMESPACE | XML_NAMESPACE_OFFICE | XML_DOCUMENT,
-    OFFICE_DOCUMENT_CONTENT = FastToken::NAMESPACE | XML_NAMESPACE_OFFICE | XML_DOCUMENT_CONTENT,
-    TEXT_P = FastToken::NAMESPACE | XML_NAMESPACE_TEXT | XML_P
+    OFFICE_BODY = FastToken::NAMESPACE | XmlNamespace::OFFICE | XML_BODY,
+    OFFICE_TEXT = FastToken::NAMESPACE | XmlNamespace::OFFICE | XML_TEXT,
+    OFFICE_DOCUMENT = FastToken::NAMESPACE | XmlNamespace::OFFICE | XML_DOCUMENT,
+    OFFICE_DOCUMENT_CONTENT = FastToken::NAMESPACE | XmlNamespace::OFFICE | XML_DOCUMENT_CONTENT,
+    TEXT_P = FastToken::NAMESPACE | XmlNamespace::TEXT | XML_P
 };
 
 class SwXMLTextBlockTokenHandler :
@@ -102,13 +102,13 @@ public:
 
 enum SwXMLBlockListToken : sal_Int32
 {
-    ABBREVIATED_NAME = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_ABBREVIATED_NAME,
-    BLOCK = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_BLOCK,
-    BLOCK_LIST = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_BLOCK_LIST,
-    LIST_NAME = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_LIST_NAME,
-    NAME = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_NAME,
-    PACKAGE_NAME = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_PACKAGE_NAME,
-    UNFORMATTED_TEXT = FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST | XML_UNFORMATTED_TEXT
+    ABBREVIATED_NAME = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_ABBREVIATED_NAME,
+    BLOCK = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_BLOCK,
+    BLOCK_LIST = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_BLOCK_LIST,
+    LIST_NAME = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_LIST_NAME,
+    NAME = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_NAME,
+    PACKAGE_NAME = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_PACKAGE_NAME,
+    UNFORMATTED_TEXT = FastToken::NAMESPACE | XmlNamespace::BLOCKLIST | XML_UNFORMATTED_TEXT
 };
 
 class SwXMLBlockListTokenHandler :
diff --git a/sw/source/core/swg/SwXMLBlockExport.cxx b/sw/source/core/swg/SwXMLBlockExport.cxx
index ae8d81ca2352..2a1881342499 100644
--- a/sw/source/core/swg/SwXMLBlockExport.cxx
+++ b/sw/source/core/swg/SwXMLBlockExport.cxx
@@ -37,7 +37,7 @@ SwXMLBlockListExport::SwXMLBlockListExport(
 {
     GetNamespaceMap_().Add( GetXMLToken ( XML_NP_BLOCK_LIST ),
                             GetXMLToken ( XML_N_BLOCK_LIST ),
-                            XML_NAMESPACE_BLOCKLIST );
+                            XmlNamespace::BLOCKLIST );
 }
 
 ErrCode SwXMLBlockListExport::exportDoc(enum XMLTokenEnum )
@@ -46,31 +46,31 @@ ErrCode SwXMLBlockListExport::exportDoc(enum XMLTokenEnum )
 
     addChaffWhenEncryptedStorage();
 
-    AddAttribute ( XML_NAMESPACE_NONE,
-                   GetNamespaceMap_().GetAttrNameByKey ( XML_NAMESPACE_BLOCKLIST ),
-                   GetNamespaceMap_().GetNameByKey ( XML_NAMESPACE_BLOCKLIST ) );
-    AddAttribute( XML_NAMESPACE_BLOCKLIST,
+    AddAttribute ( XmlNamespace::NONE,
+                   GetNamespaceMap_().GetAttrNameByKey ( XmlNamespace::BLOCKLIST ),
+                   GetNamespaceMap_().GetNameByKey ( XmlNamespace::BLOCKLIST ) );
+    AddAttribute( XmlNamespace::BLOCKLIST,
                   XML_LIST_NAME,
                   rBlockList.GetName());
     {
-        SvXMLElementExport aRoot (*this, XML_NAMESPACE_BLOCKLIST, XML_BLOCK_LIST, true, true);
+        SvXMLElementExport aRoot (*this, XmlNamespace::BLOCKLIST, XML_BLOCK_LIST, true, true);
         sal_uInt16 nBlocks= rBlockList.GetCount();
         for ( sal_uInt16 i = 0; i < nBlocks; i++)
         {
-            AddAttribute( XML_NAMESPACE_BLOCKLIST,
+            AddAttribute( XmlNamespace::BLOCKLIST,
                           XML_ABBREVIATED_NAME,
                           rBlockList.GetShortName(i));
-            AddAttribute( XML_NAMESPACE_BLOCKLIST,
+            AddAttribute( XmlNamespace::BLOCKLIST,
                           XML_PACKAGE_NAME,
                           rBlockList.GetPackageName(i));
-            AddAttribute( XML_NAMESPACE_BLOCKLIST,
+            AddAttribute( XmlNamespace::BLOCKLIST,
                           XML_NAME,
                           rBlockList.GetLongName(i));
-            AddAttribute( XML_NAMESPACE_BLOCKLIST,
+            AddAttribute( XmlNamespace::BLOCKLIST,
                           XML_UNFORMATTED_TEXT,
                           rBlockList.IsOnlyTextBlock(i) ? XML_TRUE : XML_FALSE );
 
-            SvXMLElementExport aBlock( *this, XML_NAMESPACE_BLOCKLIST, XML_BLOCK, true, true);
+            SvXMLElementExport aBlock( *this, XmlNamespace::BLOCKLIST, XML_BLOCK, true, true);
         }
     }
     GetDocHandler()->endDocument();
@@ -87,13 +87,13 @@ SwXMLTextBlockExport::SwXMLTextBlockExport(
 {
     GetNamespaceMap_().Add( GetXMLToken ( XML_NP_BLOCK_LIST ),
                             GetXMLToken ( XML_N_BLOCK_LIST ),
-                            XML_NAMESPACE_BLOCKLIST );
+                            XmlNamespace::BLOCKLIST );
     GetNamespaceMap_().Add( GetXMLToken ( XML_NP_OFFICE ),
                             GetXMLToken(XML_N_OFFICE_OOO),
-                            XML_NAMESPACE_OFFICE );
+                            XmlNamespace::OFFICE );
     GetNamespaceMap_().Add( GetXMLToken ( XML_NP_TEXT ),
                             GetXMLToken(XML_N_TEXT_OOO),
-                            XML_NAMESPACE_TEXT );
+                            XmlNamespace::TEXT );
 }
 
 void SwXMLTextBlockExport::exportDoc(const OUString &rText)
@@ -102,28 +102,28 @@ void SwXMLTextBlockExport::exportDoc(const OUString &rText)
 
     addChaffWhenEncryptedStorage();
 
-    AddAttribute ( XML_NAMESPACE_NONE,
-                   GetNamespaceMap_().GetAttrNameByKey ( XML_NAMESPACE_BLOCKLIST ),
-                   GetNamespaceMap_().GetNameByKey ( XML_NAMESPACE_BLOCKLIST ) );
-    AddAttribute ( XML_NAMESPACE_NONE,
-                   GetNamespaceMap_().GetAttrNameByKey ( XML_NAMESPACE_TEXT ),
-                   GetNamespaceMap_().GetNameByKey ( XML_NAMESPACE_TEXT ) );
-    AddAttribute ( XML_NAMESPACE_NONE,
-                   GetNamespaceMap_().GetAttrNameByKey ( XML_NAMESPACE_OFFICE ),
-                   GetNamespaceMap_().GetNameByKey ( XML_NAMESPACE_OFFICE ) );
-    AddAttribute( XML_NAMESPACE_BLOCKLIST,
+    AddAttribute ( XmlNamespace::NONE,
+                   GetNamespaceMap_().GetAttrNameByKey ( XmlNamespace::BLOCKLIST ),
+                   GetNamespaceMap_().GetNameByKey ( XmlNamespace::BLOCKLIST ) );
+    AddAttribute ( XmlNamespace::NONE,
+                   GetNamespaceMap_().GetAttrNameByKey ( XmlNamespace::TEXT ),
+                   GetNamespaceMap_().GetNameByKey ( XmlNamespace::TEXT ) );
+    AddAttribute ( XmlNamespace::NONE,
+                   GetNamespaceMap_().GetAttrNameByKey ( XmlNamespace::OFFICE ),
+                   GetNamespaceMap_().GetNameByKey ( XmlNamespace::OFFICE ) );
+    AddAttribute( XmlNamespace::BLOCKLIST,
                   XML_LIST_NAME,
                   rBlockList.GetName());
     {
-        SvXMLElementExport aDocument (*this, XML_NAMESPACE_OFFICE, XML_DOCUMENT, true, true);
+        SvXMLElementExport aDocument (*this, XmlNamespace::OFFICE, XML_DOCUMENT, true, true);
         {
-            SvXMLElementExport aBody (*this, XML_NAMESPACE_OFFICE, XML_BODY, true, true);
+            SvXMLElementExport aBody (*this, XmlNamespace::OFFICE, XML_BODY, true, true);
             {
                 sal_Int32 nPos = 0;
                 do
                 {
                     OUString sTemp ( rText.getToken( 0, '\015', nPos ) );
-                    SvXMLElementExport aPara (*this, XML_NAMESPACE_TEXT, XML_P, true, false);
+                    SvXMLElementExport aPara (*this, XmlNamespace::TEXT, XML_P, true, false);
                     GetDocHandler()->characters(sTemp);
                 } while (-1 != nPos );
             }
diff --git a/sw/source/core/swg/SwXMLSectionList.cxx b/sw/source/core/swg/SwXMLSectionList.cxx
index aa6c63b8bb29..96f3a4a4e32c 100644
--- a/sw/source/core/swg/SwXMLSectionList.cxx
+++ b/sw/source/core/swg/SwXMLSectionList.cxx
@@ -66,8 +66,8 @@ public:
         {
             return new SvXMLSectionListContext(GetImport());
         }
-        if (IsTokenInNamespace(Element, XML_NAMESPACE_TEXT) ||
-            IsTokenInNamespace(Element, XML_NAMESPACE_TEXT_OOO))
+        if (IsTokenInNamespace(Element, XmlNamespace::TEXT) ||
+            IsTokenInNamespace(Element, XmlNamespace::TEXT_OOO))
         {
             auto nToken = Element & TOKEN_MASK;
             if (nToken == XML_P ||
diff --git a/sw/source/core/swg/SwXMLTextBlocks1.cxx b/sw/source/core/swg/SwXMLTextBlocks1.cxx
index 30c6a9ce1b83..4743ac247ca3 100644
--- a/sw/source/core/swg/SwXMLTextBlocks1.cxx
+++ b/sw/source/core/swg/SwXMLTextBlocks1.cxx
@@ -117,8 +117,8 @@ ErrCode SwXMLTextBlocks::GetDoc( sal_uInt16 nIdx )
             xParser->setFastDocumentHandler( xFilter );
             xParser->setTokenHandler( xTokenHandler );
 
-            xParser->registerNamespace( "http://openoffice.org/2000/text", FastToken::NAMESPACE | XML_NAMESPACE_TEXT );
-            xParser->registerNamespace( "http://openoffice.org/2000/office", FastToken::NAMESPACE | XML_NAMESPACE_OFFICE );
+            xParser->registerNamespace( "http://openoffice.org/2000/text", FastToken::NAMESPACE | XmlNamespace::TEXT );
+            xParser->registerNamespace( "http://openoffice.org/2000/office", FastToken::NAMESPACE | XmlNamespace::OFFICE );
 
             // parse
             try
@@ -280,8 +280,8 @@ ErrCode SwXMLTextBlocks::GetBlockText( const OUString& rShort, OUString& rText )
         xParser->setFastDocumentHandler( xFilter );
         xParser->setTokenHandler( xTokenHandler );
 
-        xParser->registerNamespace( "urn:oasis:names:tc:opendocument:xmlns:office:1.0", FastToken::NAMESPACE | XML_NAMESPACE_OFFICE );
-        xParser->registerNamespace( "urn:oasis:names:tc:opendocument:xmlns:text:1.0", FastToken::NAMESPACE | XML_NAMESPACE_TEXT );
+        xParser->registerNamespace( "urn:oasis:names:tc:opendocument:xmlns:office:1.0", FastToken::NAMESPACE | XmlNamespace::OFFICE );
+        xParser->registerNamespace( "urn:oasis:names:tc:opendocument:xmlns:text:1.0", FastToken::NAMESPACE | XmlNamespace::TEXT );
 
         // parse
         try
@@ -402,7 +402,7 @@ void SwXMLTextBlocks::ReadInfo()
         // connect parser and filter
         uno::Reference< xml::sax::XFastParser > xParser = xml::sax::FastParser::create(xContext);
         xParser->setFastDocumentHandler( xFilter );
-        xParser->registerNamespace( "http://openoffice.org/2001/block-list", FastToken::NAMESPACE | XML_NAMESPACE_BLOCKLIST );
+        xParser->registerNamespace( "http://openoffice.org/2001/block-list", FastToken::NAMESPACE | XmlNamespace::BLOCKLIST );
         xParser->setTokenHandler( xTokenHandler );
 
         // parse
diff --git a/sw/source/filter/xml/xmlbrsh.cxx b/sw/source/filter/xml/xmlbrsh.cxx
index 4f16010ee1a4..d29b5504921e 100644
--- a/sw/source/filter/xml/xmlbrsh.cxx
+++ b/sw/source/filter/xml/xmlbrsh.cxx
@@ -55,13 +55,13 @@ enum SvXMLTokenMapAttrs
 
 const SvXMLTokenMapEntry aBGImgAttributesAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XLINK, XML_HREF,        XML_TOK_BGIMG_HREF      },
-    { XML_NAMESPACE_XLINK, XML_TYPE,        XML_TOK_BGIMG_TYPE      },
-    { XML_NAMESPACE_XLINK, XML_ACTUATE,     XML_TOK_BGIMG_ACTUATE   },
-    { XML_NAMESPACE_XLINK, XML_SHOW,        XML_TOK_BGIMG_SHOW      },
-    { XML_NAMESPACE_STYLE, XML_POSITION,    XML_TOK_BGIMG_POSITION  },
-    { XML_NAMESPACE_STYLE, XML_REPEAT,      XML_TOK_BGIMG_REPEAT    },
-    { XML_NAMESPACE_STYLE, XML_FILTER_NAME, XML_TOK_BGIMG_FILTER    },
+    { XmlNamespace::XLINK, XML_HREF,        XML_TOK_BGIMG_HREF      },
+    { XmlNamespace::XLINK, XML_TYPE,        XML_TOK_BGIMG_TYPE      },
+    { XmlNamespace::XLINK, XML_ACTUATE,     XML_TOK_BGIMG_ACTUATE   },
+    { XmlNamespace::XLINK, XML_SHOW,        XML_TOK_BGIMG_SHOW      },
+    { XmlNamespace::STYLE, XML_POSITION,    XML_TOK_BGIMG_POSITION  },
+    { XmlNamespace::STYLE, XML_REPEAT,      XML_TOK_BGIMG_REPEAT    },
+    { XmlNamespace::STYLE, XML_FILTER_NAME, XML_TOK_BGIMG_FILTER    },
     XML_TOKEN_MAP_END
 };
 
@@ -206,24 +206,24 @@ void SwXMLBrushItemExport::exportXML( const SvxBrushItem& rItem )
         OUString sValue = GetExport().AddEmbeddedXGraphic(xGraphic, sMimeType);
         if (!sValue.isEmpty())
         {
-            GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sValue );
-            GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-            GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+            GetExport().AddAttribute( XmlNamespace::XLINK, XML_HREF, sValue );
+            GetExport().AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+            GetExport().AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
         }
 
         const SvXMLUnitConverter& rUnitConv = GetExport().GetTwipUnitConverter();
         if (SvXMLExportItemMapper::QueryXMLValue(rItem, sValue, MID_GRAPHIC_POSITION, rUnitConv))
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_POSITION, sValue );
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_POSITION, sValue );
 
         if (SvXMLExportItemMapper::QueryXMLValue(rItem, sValue, MID_GRAPHIC_REPEAT, rUnitConv))
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_REPEAT, sValue );
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_REPEAT, sValue );
 
         if (SvXMLExportItemMapper::QueryXMLValue(rItem, sValue, MID_GRAPHIC_FILTER, rUnitConv))
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_FILTER_NAME, sValue );
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_FILTER_NAME, sValue );
     }
 
     {
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE, XML_BACKGROUND_IMAGE,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE, XML_BACKGROUND_IMAGE,
                                   true, true );
         if (xGraphic.is())
         {
diff --git a/sw/source/filter/xml/xmlexp.cxx b/sw/source/filter/xml/xmlexp.cxx
index f49eb50d8a00..128c62bb41f6 100644
--- a/sw/source/filter/xml/xmlexp.cxx
+++ b/sw/source/filter/xml/xmlexp.cxx
@@ -130,7 +130,7 @@ ErrCode SwXMLExport::exportDoc( enum XMLTokenEnum eClass )
             GetNamespaceMap_().Add(
                 GetXMLToken(XML_NP_OFFICE_EXT),
                 GetXMLToken(XML_N_OFFICE_EXT),
-                XML_NAMESPACE_OFFICE_EXT);
+                XmlNamespace::OFFICE_EXT);
         }
 
         GetTextParagraphExport()->SetBlockMode( m_bBlock );
@@ -413,7 +413,7 @@ void SwXMLExport::SetBodyAttributes()
     {
         OUStringBuffer sBuffer;
         ::sax::Converter::convertBool(sBuffer, true);
-        AddAttribute(XML_NAMESPACE_TEXT, XML_USE_SOFT_PAGE_BREAKS,
+        AddAttribute(XmlNamespace::TEXT, XML_USE_SOFT_PAGE_BREAKS,
             sBuffer.makeStringAndClear());
     }
 }
@@ -455,8 +455,8 @@ void SwXMLExport::ExportContent_()
         aAny >>= nYear;
         if (nYear != 1930 )
         {
-            AddAttribute(XML_NAMESPACE_TABLE, XML_NULL_YEAR, OUString::number(nYear));
-            SvXMLElementExport aCalcSettings(*this, XML_NAMESPACE_TABLE, XML_CALCULATION_SETTINGS, true, true);
+            AddAttribute(XmlNamespace::TABLE, XML_NULL_YEAR, OUString::number(nYear));
+            SvXMLElementExport aCalcSettings(*this, XmlNamespace::TABLE, XML_CALCULATION_SETTINGS, true, true);
         }
     }
 
diff --git a/sw/source/filter/xml/xmlexpit.cxx b/sw/source/filter/xml/xmlexpit.cxx
index bbb4e9830a97..5fd2382cf8ea 100644
--- a/sw/source/filter/xml/xmlexpit.cxx
+++ b/sw/source/filter/xml/xmlexpit.cxx
@@ -118,7 +118,7 @@ void SvXMLExportItemMapper::exportXML(const SvXMLExport&,
         {
             OUString aValue;
             bool bAddAttribute = true;
-            if( rEntry.nNameSpace == XML_NAMESPACE_STYLE )
+            if( rEntry.nNameSpace == XmlNamespace::STYLE )
             {
                 bAddAttribute = false;
             }
@@ -196,14 +196,14 @@ void SvXMLExportItemMapper::exportXML(const SvXMLExport&,
                 // Write bt-lr to the extension namespace, handle other values
                 // below.
                 auto pDirection = static_cast<const SvxFrameDirectionItem*>(&rItem);
-                if (rEntry.nNameSpace == XML_NAMESPACE_LO_EXT
+                if (rEntry.nNameSpace == XmlNamespace::LO_EXT
                     && pDirection->GetValue() == SvxFrameDirection::Vertical_LR_BT)
                 {
                     const OUString sName(rNamespaceMap.GetQNameByKey(
-                        XML_NAMESPACE_LO_EXT, GetXMLToken(XML_WRITING_MODE)));
+                        XmlNamespace::LO_EXT, GetXMLToken(XML_WRITING_MODE)));
                     rAttrList.AddAttribute(sName, GetXMLToken(XML_BT_LR));
                 }
-                if (rEntry.nNameSpace == XML_NAMESPACE_LO_EXT
+                if (rEntry.nNameSpace == XmlNamespace::LO_EXT
                     || pDirection->GetValue() == SvxFrameDirection::Vertical_LR_BT)
                     bDone = true;
                 break;
@@ -299,7 +299,7 @@ void SvXMLExportItemMapper::exportXML( SvXMLExport& rExport,
     {
         rExport.IgnorableWhitespace();
 
-        SvXMLElementExport aElem( rExport, XML_NAMESPACE_STYLE, ePropToken,
+        SvXMLElementExport aElem( rExport, XmlNamespace::STYLE, ePropToken,
                                   false, false );
         exportElementItems( rExport, rSet, aIndexArray );
     }
diff --git a/sw/source/filter/xml/xmlfmt.cxx b/sw/source/filter/xml/xmlfmt.cxx
index 75af22b8e3f8..c24d6f8bd9dc 100644
--- a/sw/source/filter/xml/xmlfmt.cxx
+++ b/sw/source/filter/xml/xmlfmt.cxx
@@ -241,7 +241,7 @@ SwXMLConditionContext_Impl::SwXMLConditionContext_Impl(
         const OUString& rValue = xAttrList->getValueByIndex( i );
 
         // TODO: use a map here
-        if( XML_NAMESPACE_STYLE == nPrefix )
+        if( XmlNamespace::STYLE == nPrefix )
         {
             if( IsXMLToken( aLocalName, XML_CONDITION ) )
             {
@@ -374,7 +374,7 @@ SvXMLImportContextRef SwXMLTextStyleContext_Impl::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix && IsXMLToken( rLocalName, XML_MAP ) )
+    if( XmlNamespace::STYLE == nPrefix && IsXMLToken( rLocalName, XML_MAP ) )
     {
         rtl::Reference<SwXMLConditionContext_Impl> xCond{
             new SwXMLConditionContext_Impl( GetImport(), nPrefix,
@@ -489,7 +489,7 @@ void SwXMLCellStyleContext::AddDataFormat()
     }
 
     const rtl::Reference<XMLPropertySetMapper>& xPropertySetMapper(xPropertyMapper->getPropertySetMapper());
-    sal_Int32 nIndex = xPropertySetMapper->GetEntryIndex(XML_NAMESPACE_STYLE, GetXMLToken(XML_DATA_STYLE_NAME), 0);
+    sal_Int32 nIndex = xPropertySetMapper->GetEntryIndex(XmlNamespace::STYLE, GetXMLToken(XML_DATA_STYLE_NAME), 0);
     if (nIndex < 0)
     {
         SAL_WARN("sw.xml", "could not find id for " << GetXMLToken(XML_DATA_STYLE_NAME));
@@ -525,7 +525,7 @@ void SwXMLItemSetStyleContext_Impl::SetAttribute( sal_uInt16 nPrefixKey,
                                            const OUString& rLocalName,
                                            const OUString& rValue )
 {
-    if( XML_NAMESPACE_STYLE == nPrefixKey )
+    if( XmlNamespace::STYLE == nPrefixKey )
     {
         if ( IsXMLToken( rLocalName, XML_MASTER_PAGE_NAME ) )
         {
@@ -623,7 +623,7 @@ SvXMLImportContextRef SwXMLItemSetStyleContext_Impl::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix )
+    if( XmlNamespace::STYLE == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_TABLE_PROPERTIES ) ||
             IsXMLToken( rLocalName, XML_TABLE_COLUMN_PROPERTIES ) ||
@@ -793,7 +793,7 @@ SvXMLStyleContext *SwXMLStylesContext_Impl::CreateStyleChildContext( sal_uInt16
 {
     SvXMLStyleContext* pContext = nullptr;
 
-    if(nPrefix == XML_NAMESPACE_TABLE && IsXMLToken(rLocalName, XML_TABLE_TEMPLATE))
+    if(nPrefix == XmlNamespace::TABLE && IsXMLToken(rLocalName, XML_TABLE_TEMPLATE))
     {
         rtl::Reference<XMLTableImport> xTableImport = GetImport().GetShapeImport()->GetShapeTableImport();
         pContext = xTableImport->CreateTableTemplateContext(nPrefix, rLocalName, xAttrList);
diff --git a/sw/source/filter/xml/xmlfmte.cxx b/sw/source/filter/xml/xmlfmte.cxx
index ff9b22ab3472..8319ed2a83c5 100644
--- a/sw/source/filter/xml/xmlfmte.cxx
+++ b/sw/source/filter/xml/xmlfmte.cxx
@@ -58,13 +58,13 @@ void SwXMLExport::ExportFormat( const SwFormat& rFormat, enum XMLTokenEnum eFami
     OSL_ENSURE( eFamily != XML_TOKEN_INVALID, "family must be specified" );
     // style:name="..."
     bool bEncoded = false;
-    AddAttribute( XML_NAMESPACE_STYLE, XML_NAME, EncodeStyleName(
+    AddAttribute( XmlNamespace::STYLE, XML_NAME, EncodeStyleName(
                     rFormat.GetName(), &bEncoded ) );
     if( bEncoded )
-        AddAttribute( XML_NAMESPACE_STYLE, XML_DISPLAY_NAME, rFormat.GetName() );
+        AddAttribute( XmlNamespace::STYLE, XML_DISPLAY_NAME, rFormat.GetName() );
 
     if( eFamily != XML_TOKEN_INVALID )
-        AddAttribute( XML_NAMESPACE_STYLE, XML_FAMILY, eFamily );
+        AddAttribute( XmlNamespace::STYLE, XML_FAMILY, eFamily );
 
 #if OSL_DEBUG_LEVEL > 0
     // style:parent-style-name="..." (if it's not the default only)
@@ -93,7 +93,7 @@ void SwXMLExport::ExportFormat( const SwFormat& rFormat, enum XMLTokenEnum eFami
                                     pPageDesc->GetName(),
                                     sName,
                                     SwGetPoolIdFromName::PageDesc);
-            AddAttribute( XML_NAMESPACE_STYLE, XML_MASTER_PAGE_NAME,
+            AddAttribute( XmlNamespace::STYLE, XML_MASTER_PAGE_NAME,
                           EncodeStyleName( sName ) );
         }
     }
@@ -117,14 +117,14 @@ void SwXMLExport::ExportFormat( const SwFormat& rFormat, enum XMLTokenEnum eFami
                 addDataStyle(nFormat);
                 OUString sDataStyleName = getDataStyleName(nFormat);
                 if( !sDataStyleName.isEmpty() )
-                    AddAttribute( XML_NAMESPACE_STYLE, XML_DATA_STYLE_NAME,
+                    AddAttribute( XmlNamespace::STYLE, XML_DATA_STYLE_NAME,
                                   sDataStyleName );
             }
         }
     }
 
     {
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_STYLE, XML_STYLE,
+        SvXMLElementExport aElem( *this, XmlNamespace::STYLE, XML_STYLE,
                                   true, true );
 
         SvXMLItemMapEntriesRef xItemMap;
@@ -316,7 +316,7 @@ void SwXMLAutoStylePoolP::exportStyleAttributes(
                         if( !sTmp.isEmpty() )
                             sStyleName = sTmp;
                     }
-                    GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                    GetExport().AddAttribute( XmlNamespace::STYLE,
                           sListStyleName,
                           GetExport().EncodeStyleName( sStyleName ) );
                 }
@@ -325,7 +325,7 @@ void SwXMLAutoStylePoolP::exportStyleAttributes(
                 {
                     OUString sStyleName;
                     rProperty.maValue >>= sStyleName;
-                    GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                    GetExport().AddAttribute( XmlNamespace::STYLE,
                                   sMasterPageName,
                                   GetExport().EncodeStyleName( sStyleName ) );
                 }
diff --git a/sw/source/filter/xml/xmlimp.cxx b/sw/source/filter/xml/xmlimp.cxx
index bcec7a220d80..2f97ac2b5aed 100644
--- a/sw/source/filter/xml/xmlimp.cxx
+++ b/sw/source/filter/xml/xmlimp.cxx
@@ -109,15 +109,15 @@ enum SwXMLDocTokens
 
 const SvXMLTokenMapEntry aDocTokenMap[] =
 {
-    { XML_NAMESPACE_OFFICE, XML_FONT_FACE_DECLS,     XML_TOK_DOC_FONTDECLS  },
-    { XML_NAMESPACE_OFFICE, XML_STYLES,         XML_TOK_DOC_STYLES      },
-    { XML_NAMESPACE_OFFICE, XML_AUTOMATIC_STYLES, XML_TOK_DOC_AUTOSTYLES    },
-    { XML_NAMESPACE_OFFICE, XML_MASTER_STYLES,   XML_TOK_DOC_MASTERSTYLES   },
-    { XML_NAMESPACE_OFFICE, XML_META,           XML_TOK_DOC_META        },
-    { XML_NAMESPACE_OFFICE, XML_BODY,           XML_TOK_DOC_BODY        },
-    { XML_NAMESPACE_OFFICE, XML_SCRIPTS,        XML_TOK_DOC_SCRIPT      },
-    { XML_NAMESPACE_OFFICE, XML_SETTINGS,       XML_TOK_DOC_SETTINGS    },
-    { XML_NAMESPACE_XFORMS, XML_MODEL,          XML_TOK_DOC_XFORMS      },
+    { XmlNamespace::OFFICE, XML_FONT_FACE_DECLS,     XML_TOK_DOC_FONTDECLS  },
+    { XmlNamespace::OFFICE, XML_STYLES,         XML_TOK_DOC_STYLES      },
+    { XmlNamespace::OFFICE, XML_AUTOMATIC_STYLES, XML_TOK_DOC_AUTOSTYLES    },
+    { XmlNamespace::OFFICE, XML_MASTER_STYLES,   XML_TOK_DOC_MASTERSTYLES   },
+    { XmlNamespace::OFFICE, XML_META,           XML_TOK_DOC_META        },
+    { XmlNamespace::OFFICE, XML_BODY,           XML_TOK_DOC_BODY        },
+    { XmlNamespace::OFFICE, XML_SCRIPTS,        XML_TOK_DOC_SCRIPT      },
+    { XmlNamespace::OFFICE, XML_SETTINGS,       XML_TOK_DOC_SETTINGS    },
+    { XmlNamespace::XFORMS, XML_MODEL,          XML_TOK_DOC_XFORMS      },
     XML_TOKEN_MAP_END
 };
 
diff --git a/sw/source/filter/xml/xmlimpit.cxx b/sw/source/filter/xml/xmlimpit.cxx
index 78d1e9b14937..b163b07f54fe 100644
--- a/sw/source/filter/xml/xmlimpit.cxx
+++ b/sw/source/filter/xml/xmlimpit.cxx
@@ -90,7 +90,7 @@ void SvXMLImportItemMapper::importXML( SfxItemSet& rSet,
         sal_uInt16 nPrefix =
             rNamespaceMap.GetKeyByAttrName( rAttrName, &aPrefix, &aLocalName,
                                             &aNamespace );
-        if( XML_NAMESPACE_XMLNS == nPrefix )
+        if( XmlNamespace::XMLNS == nPrefix )
             continue;
 
         const OUString& rValue = xAttrList->getValueByIndex( i );
@@ -163,7 +163,7 @@ void SvXMLImportItemMapper::importXML( SfxItemSet& rSet,
             }
             if( pUnknownItem )
             {
-                if( XML_NAMESPACE_NONE == nPrefix )
+                if( XmlNamespace::NONE == nPrefix )
                     pUnknownItem->AddAttr( aLocalName, rValue );
                 else
                     pUnknownItem->AddAttr( aPrefix, aNamespace, aLocalName,
diff --git a/sw/source/filter/xml/xmlitemi.cxx b/sw/source/filter/xml/xmlitemi.cxx
index c4e977e8bd11..ea902701f913 100644
--- a/sw/source/filter/xml/xmlitemi.cxx
+++ b/sw/source/filter/xml/xmlitemi.cxx
@@ -164,7 +164,7 @@ bool SwXMLImportTableItemMapper_Impl::handleNoItem(
      SvXMLUnitConverter const& rUnitConverter,
      SvXMLNamespaceMap const& rNamespaceMap)
 {
-    if ((XML_NAMESPACE_FO == rEntry.nNameSpace) &&
+    if ((XmlNamespace::FO == rEntry.nNameSpace) &&
         (xmloff::token::XML_MARGIN == rEntry.eLocalName))
     {
         m_FoMarginValue = rValue;
diff --git a/sw/source/filter/xml/xmlitemm.cxx b/sw/source/filter/xml/xmlitemm.cxx
index e7c093190250..785799a0cdd8 100644
--- a/sw/source/filter/xml/xmlitemm.cxx
+++ b/sw/source/filter/xml/xmlitemm.cxx
@@ -30,13 +30,13 @@
 using namespace ::xmloff::token;
 
 #define MAP_ENTRY( p, l, w, m ) \
-    { XML_NAMESPACE_##p, XML_##l, static_cast<sal_uInt16>(w), m }
+    { XmlNamespace::##p, XML_##l, static_cast<sal_uInt16>(w), m }
 #define M_E_SI( p, l, w, m ) \
-    { XML_NAMESPACE_##p, XML_##l, static_cast<sal_uInt16>(w), MID_SW_FLAG_SPECIAL_ITEM_IMPORT|m }
+    { XmlNamespace::##p, XML_##l, static_cast<sal_uInt16>(w), MID_SW_FLAG_SPECIAL_ITEM_IMPORT|m }
 #define M_E_SE( p, l, w, m ) \
-    { XML_NAMESPACE_##p, XML_##l, static_cast<sal_uInt16>(w), MID_SW_FLAG_SPECIAL_ITEM_EXPORT|m }
+    { XmlNamespace::##p, XML_##l, static_cast<sal_uInt16>(w), MID_SW_FLAG_SPECIAL_ITEM_EXPORT|m }
 #define M_E_SIE( p, l, w, m ) \
-    { XML_NAMESPACE_##p, XML_##l, static_cast<sal_uInt16>(w), MID_SW_FLAG_SPECIAL_ITEM_EXPORT|MID_SW_FLAG_SPECIAL_ITEM_IMPORT|m }
+    { XmlNamespace::##p, XML_##l, static_cast<sal_uInt16>(w), MID_SW_FLAG_SPECIAL_ITEM_EXPORT|MID_SW_FLAG_SPECIAL_ITEM_IMPORT|m }
 
 #define M_END { 0, XML_TOKEN_INVALID, 0, 0 }
 
diff --git a/sw/source/filter/xml/xmlmeta.cxx b/sw/source/filter/xml/xmlmeta.cxx
index 50c8f8b1c9c7..861570886dd0 100644
--- a/sw/source/filter/xml/xmlmeta.cxx
+++ b/sw/source/filter/xml/xmlmeta.cxx
@@ -76,7 +76,7 @@ enum SvXMLTokenMapAttrs
     XML_TOK_META_STAT_WORD = 32,
     XML_TOK_META_STAT_CHAR = 64,
     XML_TOK_META_STAT_NON_WHITE_SPACE_CHAR = 128,
-    XML_TOK_META_STAT_END=XML_TOK_UNKNOWN
+    XML_TOK_META_STAT_END=XmlNamespace::UNKNOWN
 };
 
 struct statistic {
diff --git a/sw/source/filter/xml/xmltble.cxx b/sw/source/filter/xml/xmltble.cxx
index e0c3cc57fd54..56eb80aa74b3 100644
--- a/sw/source/filter/xml/xmltble.cxx
+++ b/sw/source/filter/xml/xmltble.cxx
@@ -520,35 +520,35 @@ void SwXMLExport::ExportTableColumnStyle( const SwXMLTableColumn_Impl& rCol )
 
     // style:name="..."
     bool bEncoded = false;
-    AddAttribute( XML_NAMESPACE_STYLE, XML_NAME,
+    AddAttribute( XmlNamespace::STYLE, XML_NAME,
                     EncodeStyleName( rCol.GetStyleName(), &bEncoded ) );
     if( bEncoded )
-        AddAttribute( XML_NAMESPACE_STYLE, XML_DISPLAY_NAME, rCol.GetStyleName() );
+        AddAttribute( XmlNamespace::STYLE, XML_DISPLAY_NAME, rCol.GetStyleName() );
 
     // style:family="table-column"
-    AddAttribute( XML_NAMESPACE_STYLE, XML_FAMILY, XML_TABLE_COLUMN );
+    AddAttribute( XmlNamespace::STYLE, XML_FAMILY, XML_TABLE_COLUMN );
 
     {
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_STYLE, XML_STYLE, true,
+        SvXMLElementExport aElem( *this, XmlNamespace::STYLE, XML_STYLE, true,
                                   true );
         OUStringBuffer sValue;
         if( rCol.GetWidthOpt() )
         {
             GetTwipUnitConverter().convertMeasureToXML( sValue,
                     rCol.GetWidthOpt() );
-            AddAttribute( XML_NAMESPACE_STYLE, XML_COLUMN_WIDTH,
+            AddAttribute( XmlNamespace::STYLE, XML_COLUMN_WIDTH,
                           sValue.makeStringAndClear() );
         }
         if( rCol.GetRelWidth() )
         {
             sValue.append( static_cast<sal_Int32>(rCol.GetRelWidth()) );
             sValue.append( '*' );
-            AddAttribute( XML_NAMESPACE_STYLE, XML_REL_COLUMN_WIDTH,
+            AddAttribute( XmlNamespace::STYLE, XML_REL_COLUMN_WIDTH,
                           sValue.makeStringAndClear() );
         }
 
         {
-            SvXMLElementExport aElemExport( *this, XML_NAMESPACE_STYLE,
+            SvXMLElementExport aElemExport( *this, XmlNamespace::STYLE,
                                       XML_TABLE_COLUMN_PROPERTIES,
                                       true, true );
         }
@@ -746,7 +746,7 @@ void SwXMLExport::ExportTableAutoStyles( const SwTableNode& rTableNd )
     SwXMLTableColumnsSortByWidth_Impl aExpCols;
     SwXMLTableFrameFormatsSort_Impl aExpRows;
     SwXMLTableFrameFormatsSort_Impl aExpCells;
-    SwXMLTableInfo_Impl aTableInfo( &rTable, XML_NAMESPACE_TABLE );
+    SwXMLTableInfo_Impl aTableInfo( &rTable, XmlNamespace::TABLE );
     ExportTableLinesAutoStyles( rTable.GetTabLines(), nAbsWidth, nBaseWidth,
                                 pTableFormat->GetName(), aExpCols, aExpRows, aExpCells,
                                 aTableInfo, true);
@@ -767,20 +767,20 @@ void SwXMLExport::ExportTableBox( const SwTableBox& rBox,
             const OUString& sName = pFrameFormat->GetName();
             if( !sName.isEmpty() )
             {
-                AddAttribute( XML_NAMESPACE_TABLE, XML_STYLE_NAME, EncodeStyleName(sName) );
+                AddAttribute( XmlNamespace::TABLE, XML_STYLE_NAME, EncodeStyleName(sName) );
             }
         }
     }
 
     if( nRowSpan != 1 )
     {
-        AddAttribute( XML_NAMESPACE_TABLE, XML_NUMBER_ROWS_SPANNED,
+        AddAttribute( XmlNamespace::TABLE, XML_NUMBER_ROWS_SPANNED,
                       OUString::number(nRowSpan) );
     }
 
     if( nColSpan != 1 )
     {
-        AddAttribute( XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_SPANNED,
+        AddAttribute( XmlNamespace::TABLE, XML_NUMBER_COLUMNS_SPANNED,
                       OUString::number(nColSpan) );
     }
 
@@ -806,9 +806,9 @@ void SwXMLExport::ExportTableBox( const SwTableBox& rBox,
                 {
                     const OUString sQValue =
                         GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_OOOW, sCellFormula, false );
+                                XmlNamespace::OOOW, sCellFormula, false );
                     // formula
-                    AddAttribute(XML_NAMESPACE_TABLE, XML_FORMULA, sQValue );
+                    AddAttribute(XmlNamespace::TABLE, XML_FORMULA, sQValue );
                 }
 
                 // value and format (if NumberFormat != -1)
@@ -823,7 +823,7 @@ void SwXMLExport::ExportTableBox( const SwTableBox& rBox,
                     if (static_cast<sal_Int32>(getSwDefaultTextFormat()) == nNumberFormat)
                     {
                         // text format
-                        AddAttribute( XML_NAMESPACE_OFFICE,
+                        AddAttribute( XmlNamespace::OFFICE,
                                     XML_VALUE_TYPE, XML_STRING );
                     }
                     else if ( (-1 != nNumberFormat) && !xText->getString().isEmpty() )
@@ -840,7 +840,7 @@ void SwXMLExport::ExportTableBox( const SwTableBox& rBox,
                     aAny = xCellPropertySet->getPropertyValue("IsProtected");
                     if (*o3tl::doAccess<bool>(aAny))
                     {
-                        AddAttribute( XML_NAMESPACE_TABLE, XML_PROTECTED,
+                        AddAttribute( XmlNamespace::TABLE, XML_PROTECTED,
                                         XML_TRUE );
                     }
 
@@ -871,13 +871,13 @@ void SwXMLExport::ExportTableBox( const SwTableBox& rBox,
         else
         {
             // no start node -> merged cells: export subtable in cell
-            SvXMLElementExport aElem( *this, XML_NAMESPACE_TABLE,
+            SvXMLElementExport aElem( *this, XmlNamespace::TABLE,
                                       XML_TABLE_CELL, true, true );
             {
-                AddAttribute( XML_NAMESPACE_TABLE, XML_IS_SUB_TABLE,
+                AddAttribute( XmlNamespace::TABLE, XML_IS_SUB_TABLE,
                                 GetXMLToken( XML_TRUE ) );
 
-                SvXMLElementExport aElemExport( *this, XML_NAMESPACE_TABLE,
+                SvXMLElementExport aElemExport( *this, XmlNamespace::TABLE,
                                           XML_TABLE, true, true );
                 ExportTableLines( rBox.GetTabLines(), rTableInfo );
             }
@@ -891,7 +891,7 @@ void SwXMLExport::ExportTableLine( const SwTableLine& rLine,
 {
     if( rLine.hasSoftPageBreak() )
     {
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_TEXT,
+        SvXMLElementExport aElem( *this, XmlNamespace::TEXT,
                                   XML_SOFT_PAGE_BREAK, true, true );
     }
     const SwFrameFormat *pFrameFormat = rLine.GetFrameFormat();
@@ -900,7 +900,7 @@ void SwXMLExport::ExportTableLine( const SwTableLine& rLine,
         const OUString& sName = pFrameFormat->GetName();
         if( !sName.isEmpty() )
         {
-            AddAttribute( XML_NAMESPACE_TABLE, XML_STYLE_NAME, EncodeStyleName(sName) );
+            AddAttribute( XmlNamespace::TABLE, XML_STYLE_NAME, EncodeStyleName(sName) );
         }
     }
 
@@ -1013,12 +1013,12 @@ void SwXMLExport::ExportTableLines( const SwTableLines& rLines,
         }
         else
         {
-            AddAttribute( XML_NAMESPACE_TABLE, XML_STYLE_NAME,
+            AddAttribute( XmlNamespace::TABLE, XML_STYLE_NAME,
                           EncodeStyleName(pColumn->GetStyleName()) );
 
             if( nColRep > 1 )
             {
-                AddAttribute( XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED,
+                AddAttribute( XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED,
                               OUString::number(nColRep) );
             }
 
@@ -1036,7 +1036,7 @@ void SwXMLExport::ExportTableLines( const SwTableLines& rLines,
     // export header rows, if present
     if( nHeaderRows > 0 )
     {
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_TABLE,
+        SvXMLElementExport aElem( *this, XmlNamespace::TABLE,
                                   XML_TABLE_HEADER_ROWS, true, true );
 
         OSL_ENSURE( nHeaderRows <= nLines, "more headers then lines?" );
@@ -1077,7 +1077,7 @@ void lcl_xmltble_ClearName_Line( SwTableLine* pLine )
 
 void SwXMLExport::ExportTable( const SwTableNode& rTableNd )
 {
-    ::std::optional<sal_uInt16> oPrefix = XML_NAMESPACE_TABLE;
+    ::std::optional<sal_uInt16> oPrefix = XmlNamespace::TABLE;
     if (const SwFrameFormat* pFlyFormat = rTableNd.GetFlyFormat())
     {
         if (SwTextBoxHelper::isTextBox(pFlyFormat, RES_FLYFRMFMT))
@@ -1085,7 +1085,7 @@ void SwXMLExport::ExportTable( const SwTableNode& rTableNd )
             // TODO ODF 1.4 OFFICE-3761
             if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
             {
-                oPrefix = XML_NAMESPACE_LO_EXT;
+                oPrefix = XmlNamespace::LO_EXT;
             }
             else
             {
@@ -1101,8 +1101,8 @@ void SwXMLExport::ExportTable( const SwTableNode& rTableNd )
     const SwFrameFormat *pTableFormat = rTable.GetFrameFormat();
     if (pTableFormat && !pTableFormat->GetName().isEmpty())
     {
-        AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, pTableFormat->GetName());
-        AddAttribute(XML_NAMESPACE_TABLE, XML_STYLE_NAME,
+        AddAttribute(XmlNamespace::TABLE, XML_NAME, pTableFormat->GetName());
+        AddAttribute(XmlNamespace::TABLE, XML_STYLE_NAME,
                      EncodeStyleName(pTableFormat->GetName()));
     }
 
@@ -1111,7 +1111,7 @@ void SwXMLExport::ExportTable( const SwTableNode& rTableNd )
     {
         OUString sStyleName;
         SwStyleNameMapper::FillProgName(rTable.GetTableStyleName(), sStyleName, SwGetPoolIdFromName::TabStyle);
-        AddAttribute(XML_NAMESPACE_TABLE, XML_TEMPLATE_NAME, sStyleName);
+        AddAttribute(XmlNamespace::TABLE, XML_TEMPLATE_NAME, sStyleName);
     }
 
     SvXMLElementExport aElem(*this, *oPrefix, XML_TABLE, true, true);
@@ -1124,28 +1124,28 @@ void SwXMLExport::ExportTable( const SwTableNode& rTableNd )
             static_cast<const SwDDETable&>(rTable).GetDDEFieldType();
 
         // connection name
-        AddAttribute( XML_NAMESPACE_OFFICE, XML_NAME,
+        AddAttribute( XmlNamespace::OFFICE, XML_NAME,
                       pDDEFieldType->GetName() );
 
         // DDE command
         const OUString& sCmd = pDDEFieldType->GetCmd();
         sal_Int32 nIdx{ 0 };
-        AddAttribute( XML_NAMESPACE_OFFICE, XML_DDE_APPLICATION,
+        AddAttribute( XmlNamespace::OFFICE, XML_DDE_APPLICATION,
                       sCmd.getToken(0, sfx2::cTokenSeparator, nIdx) );
-        AddAttribute( XML_NAMESPACE_OFFICE, XML_DDE_ITEM,
+        AddAttribute( XmlNamespace::OFFICE, XML_DDE_ITEM,
                       sCmd.getToken(0, sfx2::cTokenSeparator, nIdx) );
-        AddAttribute( XML_NAMESPACE_OFFICE, XML_DDE_TOPIC,
+        AddAttribute( XmlNamespace::OFFICE, XML_DDE_TOPIC,
                       sCmd.getToken(0, sfx2::cTokenSeparator, nIdx) );
 
         // auto update
         if (pDDEFieldType->GetType() == SfxLinkUpdateMode::ALWAYS)
         {
-            AddAttribute( XML_NAMESPACE_OFFICE,
+            AddAttribute( XmlNamespace::OFFICE,
                           XML_AUTOMATIC_UPDATE, XML_TRUE );
         }
 
         // DDE source element (always empty)
-        SvXMLElementExport aSource(*this, XML_NAMESPACE_OFFICE,
+        SvXMLElementExport aSource(*this, XmlNamespace::OFFICE,
                                    XML_DDE_SOURCE, true, false);
     }
 
diff --git a/sw/source/filter/xml/xmltbli.cxx b/sw/source/filter/xml/xmltbli.cxx
index d4928cdf7fd8..499991b525ef 100644
--- a/sw/source/filter/xml/xmltbli.cxx
+++ b/sw/source/filter/xml/xmltbli.cxx
@@ -112,17 +112,17 @@ enum SwXMLTableCellAttrTokens
 
 const SvXMLTokenMapEntry aTableElemTokenMap[] =
 {
-    { XML_NAMESPACE_TABLE, XML_TABLE_HEADER_COLUMNS,
+    { XmlNamespace::TABLE, XML_TABLE_HEADER_COLUMNS,
             XML_TOK_TABLE_HEADER_COLS },
-    { XML_NAMESPACE_TABLE, XML_TABLE_COLUMNS,           XML_TOK_TABLE_COLS },
-    { XML_NAMESPACE_TABLE, XML_TABLE_COLUMN,            XML_TOK_TABLE_COL },
-    { XML_NAMESPACE_LO_EXT, XML_TABLE_COLUMN,           XML_TOK_TABLE_COL },
-    { XML_NAMESPACE_TABLE, XML_TABLE_HEADER_ROWS,
+    { XmlNamespace::TABLE, XML_TABLE_COLUMNS,           XML_TOK_TABLE_COLS },
+    { XmlNamespace::TABLE, XML_TABLE_COLUMN,            XML_TOK_TABLE_COL },
+    { XmlNamespace::LO_EXT, XML_TABLE_COLUMN,           XML_TOK_TABLE_COL },
+    { XmlNamespace::TABLE, XML_TABLE_HEADER_ROWS,
             XML_TOK_TABLE_HEADER_ROWS },
-    { XML_NAMESPACE_TABLE, XML_TABLE_ROWS,              XML_TOK_TABLE_ROWS },
-    { XML_NAMESPACE_TABLE, XML_TABLE_ROW,               XML_TOK_TABLE_ROW },
-    { XML_NAMESPACE_LO_EXT, XML_TABLE_ROW,              XML_TOK_TABLE_ROW },
-    { XML_NAMESPACE_OFFICE, XML_DDE_SOURCE,
+    { XmlNamespace::TABLE, XML_TABLE_ROWS,              XML_TOK_TABLE_ROWS },
+    { XmlNamespace::TABLE, XML_TABLE_ROW,               XML_TOK_TABLE_ROW },
+    { XmlNamespace::LO_EXT, XML_TABLE_ROW,              XML_TOK_TABLE_ROW },
+    { XmlNamespace::OFFICE, XML_DDE_SOURCE,
             XML_TOK_OFFICE_DDE_SOURCE },
 
     // There are slight differences between <table:table-columns> and
@@ -130,27 +130,27 @@ const SvXMLTokenMapEntry aTableElemTokenMap[] =
     // supported in Writer (they are Calc-only features), so we
     // support column groups by simply using the <table:table-columns>
     // token for column groups, too.
-    { XML_NAMESPACE_TABLE, XML_TABLE_COLUMN_GROUP,      XML_TOK_TABLE_COLS },
+    { XmlNamespace::TABLE, XML_TABLE_COLUMN_GROUP,      XML_TOK_TABLE_COLS },
 
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTableCellAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XML, XML_ID, XML_TOK_TABLE_XMLID },
-    { XML_NAMESPACE_TABLE, XML_STYLE_NAME, XML_TOK_TABLE_STYLE_NAME },
-    { XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_SPANNED, XML_TOK_TABLE_NUM_COLS_SPANNED },
-    { XML_NAMESPACE_TABLE, XML_NUMBER_ROWS_SPANNED, XML_TOK_TABLE_NUM_ROWS_SPANNED },
-    { XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED, XML_TOK_TABLE_NUM_COLS_REPEATED },
-    { XML_NAMESPACE_TABLE, XML_FORMULA, XML_TOK_TABLE_FORMULA },
-    { XML_NAMESPACE_OFFICE, XML_VALUE, XML_TOK_TABLE_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_TIME_VALUE, XML_TOK_TABLE_TIME_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_DATE_VALUE, XML_TOK_TABLE_DATE_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_BOOLEAN_VALUE, XML_TOK_TABLE_BOOLEAN_VALUE },
-    { XML_NAMESPACE_TABLE, XML_PROTECTED, XML_TOK_TABLE_PROTECTED },
-    { XML_NAMESPACE_TABLE, XML_PROTECT, XML_TOK_TABLE_PROTECTED }, // for backwards compatibility with SRC629 (and before)
-    { XML_NAMESPACE_OFFICE, XML_STRING_VALUE, XML_TOK_TABLE_STRING_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_TOK_TABLE_VALUE_TYPE },
+    { XmlNamespace::XML, XML_ID, XML_TOK_TABLE_XMLID },
+    { XmlNamespace::TABLE, XML_STYLE_NAME, XML_TOK_TABLE_STYLE_NAME },
+    { XmlNamespace::TABLE, XML_NUMBER_COLUMNS_SPANNED, XML_TOK_TABLE_NUM_COLS_SPANNED },
+    { XmlNamespace::TABLE, XML_NUMBER_ROWS_SPANNED, XML_TOK_TABLE_NUM_ROWS_SPANNED },
+    { XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED, XML_TOK_TABLE_NUM_COLS_REPEATED },
+    { XmlNamespace::TABLE, XML_FORMULA, XML_TOK_TABLE_FORMULA },
+    { XmlNamespace::OFFICE, XML_VALUE, XML_TOK_TABLE_VALUE },
+    { XmlNamespace::OFFICE, XML_TIME_VALUE, XML_TOK_TABLE_TIME_VALUE },
+    { XmlNamespace::OFFICE, XML_DATE_VALUE, XML_TOK_TABLE_DATE_VALUE },
+    { XmlNamespace::OFFICE, XML_BOOLEAN_VALUE, XML_TOK_TABLE_BOOLEAN_VALUE },
+    { XmlNamespace::TABLE, XML_PROTECTED, XML_TOK_TABLE_PROTECTED },
+    { XmlNamespace::TABLE, XML_PROTECT, XML_TOK_TABLE_PROTECTED }, // for backwards compatibility with SRC629 (and before)
+    { XmlNamespace::OFFICE, XML_STRING_VALUE, XML_TOK_TABLE_STRING_VALUE },
+    { XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_TOK_TABLE_VALUE_TYPE },
     XML_TOKEN_MAP_END
 };
 
@@ -493,7 +493,7 @@ SwXMLTableCellContext_Impl::SwXMLTableCellContext_Impl(
                 OUString sTmp;
                 const sal_uInt16 nPrefix2 = GetImport().GetNamespaceMap().
                         GetKeyByAttrValueQName(rValue, &sTmp);
-                m_sFormula = XML_NAMESPACE_OOOW == nPrefix2 ? sTmp : rValue;
+                m_sFormula = XmlNamespace::OOOW == nPrefix2 ? sTmp : rValue;
             }
             break;
         case XML_TOK_TABLE_VALUE:
@@ -600,7 +600,7 @@ SvXMLImportContextRef SwXMLTableCellContext_Impl::CreateChildContext(
     SvXMLImportContext *pContext = nullptr;
 
     bool bSubTable = false;
-    if( XML_NAMESPACE_TABLE == nPrefix &&
+    if( XmlNamespace::TABLE == nPrefix &&
         IsXMLToken( rLocalName, XML_TABLE ) )
     {
         sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
@@ -612,7 +612,7 @@ SvXMLImportContextRef SwXMLTableCellContext_Impl::CreateChildContext(
             const sal_uInt16 nPrefix2 =
                 GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                 &aLocalName );
-            if( XML_NAMESPACE_TABLE == nPrefix2 &&
+            if( XmlNamespace::TABLE == nPrefix2 &&
                  IsXMLToken( aLocalName, XML_IS_SUB_TABLE ) &&
                  IsXMLToken( xAttrList->getValueByIndex( i ), XML_TRUE ) )
             {
@@ -750,7 +750,7 @@ SwXMLTableColContext_Impl::SwXMLTableColContext_Impl(
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
         const OUString& rValue = xAttrList->getValueByIndex( i );
-        if( XML_NAMESPACE_TABLE == nPrefix )
+        if( XmlNamespace::TABLE == nPrefix )
         {
             if( IsXMLToken( aLocalName, XML_STYLE_NAME ) )
                 aStyleName = rValue;
@@ -766,7 +766,7 @@ SwXMLTableColContext_Impl::SwXMLTableColContext_Impl(
             else if( IsXMLToken( aLocalName, XML_DEFAULT_CELL_STYLE_NAME ) )
                 aDfltCellStyleName = rValue;
         }
-        else if ( (XML_NAMESPACE_XML == nPrefix) &&
+        else if ( (XmlNamespace::XML == nPrefix) &&
                  IsXMLToken( aLocalName, XML_ID ) )
         {
         //FIXME where to put this??? columns do not actually exist in writer...
@@ -838,7 +838,7 @@ SvXMLImportContextRef SwXMLTableColsContext_Impl::CreateChildContext(
 {
     SvXMLImportContext *pContext = nullptr;
 
-    if( XML_NAMESPACE_TABLE == nPrefix &&
+    if( XmlNamespace::TABLE == nPrefix &&
         IsXMLToken( rLocalName, XML_TABLE_COLUMN ) &&
         GetTable()->IsInsertColPossible() )
         pContext = new SwXMLTableColContext_Impl( GetSwImport(), nPrefix,
@@ -899,7 +899,7 @@ SwXMLTableRowContext_Impl::SwXMLTableRowContext_Impl( SwXMLImport& rImport,
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
         const OUString& rValue = xAttrList->getValueByIndex( i );
-        if( XML_NAMESPACE_TABLE == nPrefix )
+        if( XmlNamespace::TABLE == nPrefix )
         {
             if( IsXMLToken( aLocalName, XML_STYLE_NAME ) )
             {
@@ -919,7 +919,7 @@ SwXMLTableRowContext_Impl::SwXMLTableRowContext_Impl( SwXMLImport& rImport,
                 aDfltCellStyleName = rValue;
             }
         }
-        else if ( (XML_NAMESPACE_XML == nPrefix) &&
+        else if ( (XmlNamespace::XML == nPrefix) &&
                  IsXMLToken( aLocalName, XML_ID ) )
         {
             sXmlId = rValue;
@@ -946,7 +946,7 @@ SvXMLImportContextRef SwXMLTableRowContext_Impl::CreateChildContext(
 {
     SvXMLImportContext *pContext = nullptr;
 
-    if( XML_NAMESPACE_TABLE == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix )
+    if( XmlNamespace::TABLE == nPrefix || XmlNamespace::LO_EXT == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_TABLE_CELL ) )
         {
@@ -1009,7 +1009,7 @@ SvXMLImportContextRef SwXMLTableRowsContext_Impl::CreateChildContext(
 {
     SvXMLImportContext *pContext = nullptr;
 
-    if( XML_NAMESPACE_TABLE == nPrefix &&
+    if( XmlNamespace::TABLE == nPrefix &&
         IsXMLToken( rLocalName, XML_TABLE_ROW ) &&
         GetTable()->IsInsertRowPossible() )
         pContext = new SwXMLTableRowContext_Impl( GetSwImport(), nPrefix,
@@ -1070,7 +1070,7 @@ void SwXMLDDETableContext_Impl::StartElement(
                                                             &aLocalName );
         const OUString& rValue = xAttrList->getValueByIndex( i );
 
-        if (XML_NAMESPACE_OFFICE == nPrefix)
+        if (XmlNamespace::OFFICE == nPrefix)
         {
             if ( IsXMLToken( aLocalName, XML_DDE_APPLICATION ) )
             {
@@ -1266,7 +1266,7 @@ SwXMLTableContext::SwXMLTableContext( SwXMLImport& rImport,
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
         const OUString& rValue = xAttrList->getValueByIndex( i );
-        if( XML_NAMESPACE_TABLE == nPrefix )
+        if( XmlNamespace::TABLE == nPrefix )
         {
             if( IsXMLToken( aLocalName, XML_STYLE_NAME ) )
                 m_aStyleName = rValue;
@@ -1277,7 +1277,7 @@ SwXMLTableContext::SwXMLTableContext( SwXMLImport& rImport,
             else if( IsXMLToken( aLocalName, XML_TEMPLATE_NAME ) )
                 m_aTemplateName = rValue;
         }
-        else if ( (XML_NAMESPACE_XML == nPrefix) &&
+        else if ( (XmlNamespace::XML == nPrefix) &&
                  IsXMLToken( aLocalName, XML_ID ) )
         {
             sXmlId = rValue;
diff --git a/sw/source/filter/xml/xmltexte.cxx b/sw/source/filter/xml/xmltexte.cxx
index cfef654e59e6..ab66f0b70611 100644
--- a/sw/source/filter/xml/xmltexte.cxx
+++ b/sw/source/filter/xml/xmltexte.cxx
@@ -105,10 +105,10 @@ static void lcl_addURL ( SvXMLExport &rExport, const OUString &rURL,
 
     if (!sRelURL.isEmpty())
     {
-        rExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_HREF, sRelURL );
-        rExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-        rExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-        rExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+        rExport.AddAttribute ( XmlNamespace::XLINK, XML_HREF, sRelURL );
+        rExport.AddAttribute ( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+        rExport.AddAttribute ( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+        rExport.AddAttribute ( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
     }
 }
 
@@ -309,10 +309,10 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
     }
 
     if( !sAutoStyle.isEmpty() )
-        rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_STYLE_NAME, sAutoStyle );
+        rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_STYLE_NAME, sAutoStyle );
     addTextFrameAttributes( rPropSet, false );
 
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::DRAW,
                               XML_FRAME, false, true );
 
     switch (nType)
@@ -380,7 +380,7 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
                 sRange = aBuffer.makeStringAndClear();
             }
 
-            rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NOTIFY_ON_UPDATE_OF_RANGES,
+            rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_NOTIFY_ON_UPDATE_OF_RANGES,
             sRange );
         }
         eElementName = SV_EMBEDDED_OUTPLACE==nType ? XML_OBJECT_OLE
@@ -401,16 +401,16 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
                 aAny2 = xSet->getPropertyValue("AppletName");
                 aAny2 >>= aStr;
                 if (!aStr.isEmpty())
-                    rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_APPLET_NAME, aStr );
+                    rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_APPLET_NAME, aStr );
 
                 aAny2 = xSet->getPropertyValue("AppletCode");
                 aAny2 >>= aStr;
-                rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CODE, aStr );
+                rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_CODE, aStr );
 
                 bool bScript = false;
                 aAny2 = xSet->getPropertyValue("AppletIsScript");
                 aAny2 >>= bScript;
-                rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_MAY_SCRIPT, bScript ? XML_TRUE : XML_FALSE );
+                rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_MAY_SCRIPT, bScript ? XML_TRUE : XML_FALSE );
 
                 uno::Sequence < beans::PropertyValue > aProps;
                 aAny2 = xSet->getPropertyValue("AppletCommands");
@@ -425,7 +425,7 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
                     {
                         OUString aStr2;
                         aProp.Value >>= aStr2;
-                        rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, aProp.Name, aStr2);
+                        rXMLExport.AddAttribute( XmlNamespace::DRAW, aProp.Name, aStr2);
                     }
                 }
 
@@ -447,7 +447,7 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
                 aAny2 = xSet->getPropertyValue("PluginMimeType");
                 aAny2 >>= aStr;
                 if (!aStr.isEmpty())
-                    rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_MIME_TYPE, aStr );
+                    rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_MIME_TYPE, aStr );
                 eElementName = XML_PLUGIN;
             }
         }
@@ -468,7 +468,7 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
                 aAny2 >>= aStr;
 
                 if (!aStr.isEmpty())
-                    rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_FRAME_NAME, aStr );
+                    rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_FRAME_NAME, aStr );
                 eElementName = XML_FLOATING_FRAME;
             }
         }
@@ -478,7 +478,7 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
     }
 
     {
-        SvXMLElementExport aElementExport( rXMLExport, XML_NAMESPACE_DRAW, eElementName,
+        SvXMLElementExport aElementExport( rXMLExport, XmlNamespace::DRAW, eElementName,
                                       false, true );
         switch( nType )
         {
@@ -520,9 +520,9 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
                         {
                             OUString aStr;
                             aProp.Value >>= aStr;
-                            rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, aProp.Name );
-                            rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_VALUE, aStr );
-                            SvXMLElementExport aElementExport2( rXMLExport, XML_NAMESPACE_DRAW, XML_PARAM, false, true );
+                            rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, aProp.Name );
+                            rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_VALUE, aStr );
+                            SvXMLElementExport aElementExport2( rXMLExport, XmlNamespace::DRAW, XML_PARAM, false, true );
                         }
                     }
                 }
@@ -546,9 +546,9 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
                         {
                             OUString aStr;
                             aProp.Value >>= aStr;
-                            rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, aProp.Name );
-                            rXMLExport.AddAttribute( XML_NAMESPACE_DRAW, XML_VALUE, aStr );
-                            SvXMLElementExport aElementExport2( rXMLExport, XML_NAMESPACE_DRAW, XML_PARAM, false, true );
+                            rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, aProp.Name );
+                            rXMLExport.AddAttribute( XmlNamespace::DRAW, XML_VALUE, aStr );
+                            SvXMLElementExport aElementExport2( rXMLExport, XmlNamespace::DRAW, XML_PARAM, false, true );
                         }
                     }
                 }
@@ -567,7 +567,7 @@ void SwXMLTextParagraphExport::_exportTextEmbedded(
             lcl_addURL( rXMLExport, sURL, false );
         }
 
-        SvXMLElementExport aElementExport( GetExport(), XML_NAMESPACE_DRAW,
+        SvXMLElementExport aElementExport( GetExport(), XmlNamespace::DRAW,
                                   XML_IMAGE, false, true );
 
         if( rXMLExport.getExportFlags() & SvXMLExportFlags::EMBEDDED )
diff --git a/sw/source/uibase/config/StoredChapterNumbering.cxx b/sw/source/uibase/config/StoredChapterNumbering.cxx
index 89b72040adb5..fa111cf9aeb1 100644
--- a/sw/source/uibase/config/StoredChapterNumbering.cxx
+++ b/sw/source/uibase/config/StoredChapterNumbering.cxx
@@ -170,15 +170,15 @@ public:
             util::MeasureUnit::CM, xHandler)
     {
         GetNamespaceMap_().Add(GetXMLToken(XML_NP_OFFICE),
-                               GetXMLToken(XML_N_OFFICE), XML_NAMESPACE_OFFICE);
+                               GetXMLToken(XML_N_OFFICE), XmlNamespace::OFFICE);
         GetNamespaceMap_().Add(GetXMLToken(XML_NP_TEXT),
-                               GetXMLToken(XML_N_TEXT), XML_NAMESPACE_TEXT);
+                               GetXMLToken(XML_N_TEXT), XmlNamespace::TEXT);
         GetNamespaceMap_().Add(GetXMLToken(XML_NP_STYLE),
-                               GetXMLToken(XML_N_STYLE), XML_NAMESPACE_STYLE);
+                               GetXMLToken(XML_N_STYLE), XmlNamespace::STYLE);
         GetNamespaceMap_().Add(GetXMLToken(XML_NP_FO),
-                               GetXMLToken(XML_N_FO), XML_NAMESPACE_FO);
+                               GetXMLToken(XML_N_FO), XmlNamespace::FO);
         GetNamespaceMap_().Add(GetXMLToken(XML_NP_SVG),
-                               GetXMLToken(XML_N_SVG), XML_NAMESPACE_SVG);
+                               GetXMLToken(XML_N_SVG), XmlNamespace::SVG);
     }
 
     virtual void ExportAutoStyles_() override {}
@@ -191,14 +191,14 @@ public:
         uno::Reference<container::XNamed> const xNamed(xRule, uno::UNO_QUERY);
         OUString const name(xNamed->getName());
         bool bEncoded(false);
-        AddAttribute( XML_NAMESPACE_STYLE, XML_NAME,
+        AddAttribute( XmlNamespace::STYLE, XML_NAME,
                       EncodeStyleName(name, &bEncoded) );
         if (bEncoded)
         {
-            AddAttribute(XML_NAMESPACE_STYLE, XML_DISPLAY_NAME, name);
+            AddAttribute(XmlNamespace::STYLE, XML_DISPLAY_NAME, name);
         }
 
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_TEXT,
+        SvXMLElementExport aElem( *this, XmlNamespace::TEXT,
                                   XML_OUTLINE_STYLE, true, true );
         rExport.exportLevelStyles(xRule, true);
     }
@@ -209,41 +209,41 @@ public:
     {
         GetDocHandler()->startDocument();
 
-        AddAttribute(XML_NAMESPACE_NONE,
-                      GetNamespaceMap_().GetAttrNameByKey(XML_NAMESPACE_OFFICE),
-                      GetNamespaceMap_().GetNameByKey(XML_NAMESPACE_OFFICE));
-        AddAttribute(XML_NAMESPACE_NONE,
-                      GetNamespaceMap_().GetAttrNameByKey (XML_NAMESPACE_TEXT),
-                      GetNamespaceMap_().GetNameByKey(XML_NAMESPACE_TEXT));
-        AddAttribute(XML_NAMESPACE_NONE,
-                      GetNamespaceMap_().GetAttrNameByKey(XML_NAMESPACE_STYLE),
-                      GetNamespaceMap_().GetNameByKey(XML_NAMESPACE_STYLE));
-        AddAttribute(XML_NAMESPACE_NONE,
-                      GetNamespaceMap_().GetAttrNameByKey(XML_NAMESPACE_FO),
-                      GetNamespaceMap_().GetNameByKey(XML_NAMESPACE_FO));
-        AddAttribute(XML_NAMESPACE_NONE,
-                      GetNamespaceMap_().GetAttrNameByKey(XML_NAMESPACE_SVG),
-                      GetNamespaceMap_().GetNameByKey(XML_NAMESPACE_SVG));
+        AddAttribute(XmlNamespace::NONE,
+                      GetNamespaceMap_().GetAttrNameByKey(XmlNamespace::OFFICE),
+                      GetNamespaceMap_().GetNameByKey(XmlNamespace::OFFICE));
+        AddAttribute(XmlNamespace::NONE,
+                      GetNamespaceMap_().GetAttrNameByKey (XmlNamespace::TEXT),
+                      GetNamespaceMap_().GetNameByKey(XmlNamespace::TEXT));
+        AddAttribute(XmlNamespace::NONE,
+                      GetNamespaceMap_().GetAttrNameByKey(XmlNamespace::STYLE),
+                      GetNamespaceMap_().GetNameByKey(XmlNamespace::STYLE));
+        AddAttribute(XmlNamespace::NONE,
+                      GetNamespaceMap_().GetAttrNameByKey(XmlNamespace::FO),
+                      GetNamespaceMap_().GetNameByKey(XmlNamespace::FO));
+        AddAttribute(XmlNamespace::NONE,
+                      GetNamespaceMap_().GetAttrNameByKey(XmlNamespace::SVG),
+                      GetNamespaceMap_().GetNameByKey(XmlNamespace::SVG));
 
         {
             // let's just have an office:styles as a dummy root
             SvXMLElementExport styles(*this,
-                    XML_NAMESPACE_OFFICE, XML_STYLES, true, true);
+                    XmlNamespace::OFFICE, XML_STYLES, true, true);
 
             // horrible hack for char styles to get display-name mapping
             for (const auto& rCharStyle : rCharStyles)
             {
-                AddAttribute( XML_NAMESPACE_STYLE, XML_FAMILY, XML_TEXT );
+                AddAttribute( XmlNamespace::STYLE, XML_FAMILY, XML_TEXT );
                 bool bEncoded(false);
-                AddAttribute( XML_NAMESPACE_STYLE, XML_NAME,
+                AddAttribute( XmlNamespace::STYLE, XML_NAME,
                               EncodeStyleName(rCharStyle, &bEncoded) );
                 if (bEncoded)
                 {
-                    AddAttribute(XML_NAMESPACE_STYLE, XML_DISPLAY_NAME, rCharStyle);
+                    AddAttribute(XmlNamespace::STYLE, XML_DISPLAY_NAME, rCharStyle);
                 }
 
                 SvXMLElementExport style(*this,
-                        XML_NAMESPACE_STYLE, XML_STYLE, true, true);
+                        XmlNamespace::STYLE, XML_STYLE, true, true);
             }
 
             SvxXMLNumRuleExport numRuleExport(*this);
@@ -278,7 +278,7 @@ public:
         XmlStyleFamily nFamily(XmlStyleFamily::DATA_STYLE);
 
         for (auto &aIter : sax_fastparser::castToFastAttributeList( xAttrList ))
-            if (aIter.getToken() == (XML_NAMESPACE_STYLE | XML_FAMILY))
+            if (aIter.getToken() == (XmlNamespace::STYLE | XML_FAMILY))
             {
                 if (IsXMLToken(aIter, XML_TEXT))
                     nFamily = XmlStyleFamily::TEXT_TEXT;
@@ -342,7 +342,7 @@ public:
             const OUString& rLocalName,
             const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override
     {
-        if (XML_NAMESPACE_TEXT == nPrefix && IsXMLToken(rLocalName, XML_OUTLINE_STYLE))
+        if (XmlNamespace::TEXT == nPrefix && IsXMLToken(rLocalName, XML_OUTLINE_STYLE))
         {
             ++m_nCounter;
             if (m_nCounter <= SwChapterNumRules::nMaxRules)
diff --git a/unoxml/source/dom/document.cxx b/unoxml/source/dom/document.cxx
index c753f37c6054..5a095143d626 100644
--- a/unoxml/source/dom/document.cxx
+++ b/unoxml/source/dom/document.cxx
@@ -241,7 +241,7 @@ namespace DOM
             case XML_ELEMENT_DECL:
             case XML_ATTRIBUTE_DECL:
             case XML_ENTITY_DECL:
-            case XML_NAMESPACE_DECL:
+            case XmlNamespace::DECL:
             default:
             break;
         }
diff --git a/xmloff/inc/DomBuilderContext.hxx b/xmloff/inc/DomBuilderContext.hxx
index dcdd16819083..b42c9fc33323 100644
--- a/xmloff/inc/DomBuilderContext.hxx
+++ b/xmloff/inc/DomBuilderContext.hxx
@@ -49,12 +49,12 @@ public:
 
     /** default constructor: create new DOM tree */
     DomBuilderContext( SvXMLImport& rImport,
-                       sal_uInt16 nPrefix,
+                       XmlNamespace nPrefix,
                        const OUString& rLocalName );
 
     /** constructor: create DOM subtree under the given node */
     DomBuilderContext( SvXMLImport& rImport,
-                       sal_uInt16 nPrefix,
+                       XmlNamespace nPrefix,
                        const OUString& rLocalName,
                        css::uno::Reference<css::xml::dom::XNode> const & );
 
@@ -72,7 +72,7 @@ public:
 
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference<css::xml::sax::XAttributeList >& xAttrList ) override;
 
diff --git a/xmloff/inc/XMLChartStyleContext.hxx b/xmloff/inc/XMLChartStyleContext.hxx
index 3f4413392920..80a5ce961a2d 100644
--- a/xmloff/inc/XMLChartStyleContext.hxx
+++ b/xmloff/inc/XMLChartStyleContext.hxx
@@ -48,7 +48,7 @@ public:
 
     /// necessary for property context (element-property symbol-image)
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList ) override;
 
diff --git a/xmloff/inc/XMLElementPropertyContext.hxx b/xmloff/inc/XMLElementPropertyContext.hxx
index 2027131cc493..8d40ef04c696 100644
--- a/xmloff/inc/XMLElementPropertyContext.hxx
+++ b/xmloff/inc/XMLElementPropertyContext.hxx
@@ -39,7 +39,7 @@ protected:
 
 public:
 
-    XMLElementPropertyContext( SvXMLImport& rImport, sal_uInt16 nPrfx,
+    XMLElementPropertyContext( SvXMLImport& rImport, XmlNamespace nPrfx,
                                const OUString& rLName,
                                const XMLPropertyState& rProp,
                                 ::std::vector< XMLPropertyState > &rProps );
diff --git a/xmloff/inc/XMLEmbeddedObjectImportContext.hxx b/xmloff/inc/XMLEmbeddedObjectImportContext.hxx
index 029dfd45815e..f0143e843227 100644
--- a/xmloff/inc/XMLEmbeddedObjectImportContext.hxx
+++ b/xmloff/inc/XMLEmbeddedObjectImportContext.hxx
@@ -44,7 +44,7 @@ public:
 
     virtual ~XMLEmbeddedObjectImportContext() override;
 
-    virtual SvXMLImportContextRef CreateChildContext( sal_uInt16 nPrefix,
+    virtual SvXMLImportContextRef CreateChildContext( XmlNamespace nPrefix,
                                    const OUString& rLocalName,
                                    const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
diff --git a/xmloff/inc/XMLStringBufferImportContext.hxx b/xmloff/inc/XMLStringBufferImportContext.hxx
index 9c607480084f..34083d0f9a5a 100644
--- a/xmloff/inc/XMLStringBufferImportContext.hxx
+++ b/xmloff/inc/XMLStringBufferImportContext.hxx
@@ -40,7 +40,7 @@ public:
 
     XMLStringBufferImportContext(
         SvXMLImport& rImport,
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& sLocalName,
         OUStringBuffer& rBuffer);
 
@@ -51,7 +51,7 @@ public:
     virtual ~XMLStringBufferImportContext() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference<css::xml::sax::XAttributeList >& xAttrList ) override;
 
diff --git a/xmloff/inc/txtflde.hxx b/xmloff/inc/txtflde.hxx
index 63a6e0351671..0430464f9ca3 100644
--- a/xmloff/inc/txtflde.hxx
+++ b/xmloff/inc/txtflde.hxx
@@ -261,7 +261,7 @@ private:
         enum ::xmloff::token::XMLTokenEnum eXmlName,        /// attribute token (namespace text)
         const OUString& sValue,  /// attribute value
         bool bOmitEmpty = false, /// omit attribute, if value is empty
-        sal_uInt16 nPrefix = XML_NAMESPACE_TEXT);   /// attribute name prefix
+        sal_uInt16 nPrefix = XmlNamespace::TEXT);   /// attribute name prefix
 
     /// export a string attribute that gets a QName value
     void ProcessString(
@@ -287,7 +287,7 @@ private:
     void ProcessString(
         enum ::xmloff::token::XMLTokenEnum eXmlName,        /// attribute token (namespace text)
         enum ::xmloff::token::XMLTokenEnum eValue,          /// attribute token
-        sal_uInt16 nPrefix = XML_NAMESPACE_TEXT);   /// attribute name prefix
+        sal_uInt16 nPrefix = XmlNamespace::TEXT);   /// attribute name prefix
 
     /// export a string attribute, omit if default
     void ProcessString(
@@ -328,7 +328,7 @@ private:
         bool bIsDate,           /// export as date (rather than date/time)?
         bool bIsDuration,           /// export as duration
         bool bOmitDurationIfZero = true,    /// omit zero-length durat.
-        sal_uInt16 nPrefix = XML_NAMESPACE_TEXT);   /// attribute name prefix
+        sal_uInt16 nPrefix = XmlNamespace::TEXT);   /// attribute name prefix
 
     /// export a date, time, or duration
     void ProcessDateTime(
diff --git a/xmloff/source/chart/PropertyMap.hxx b/xmloff/source/chart/PropertyMap.hxx
index d1149784771c..93f63be432c2 100644
--- a/xmloff/source/chart/PropertyMap.hxx
+++ b/xmloff/source/chart/PropertyMap.hxx
@@ -84,16 +84,16 @@
 #define XML_SCH_CONTEXT_SPECIAL_ERRORBAR_RANGE      ( XML_SCH_CTF_START + 25 )
 #define XML_SCH_CONTEXT_SPECIAL_REGRESSION_TYPE     ( XML_SCH_CTF_START + 26 )
 
-#define MAP_FULL( ApiName, NameSpace, XMLTokenName, XMLType, ContextId, EarliestODFVersionForExport ) { ApiName, sizeof(ApiName)-1, XML_NAMESPACE_##NameSpace, xmloff::token::XMLTokenName, XMLType|XML_TYPE_PROP_CHART, ContextId, EarliestODFVersionForExport, false }
-#define MAP_ENTRY( a, ns, nm, t )            { a, sizeof(a)-1, XML_NAMESPACE_##ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_010, false }
-#define MAP_ENTRY_ODF12( a, ns, nm, t )      { a, sizeof(a)-1, XML_NAMESPACE_##ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_012, false }
+#define MAP_FULL( ApiName, NameSpace, XMLTokenName, XMLType, ContextId, EarliestODFVersionForExport ) { ApiName, sizeof(ApiName)-1, XmlNamespace::NameSpace, xmloff::token::XMLTokenName, XMLType|XML_TYPE_PROP_CHART, ContextId, EarliestODFVersionForExport, false }
+#define MAP_ENTRY( a, ns, nm, t )            { a, sizeof(a)-1, XmlNamespace::ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_010, false }
+#define MAP_ENTRY_ODF12( a, ns, nm, t )      { a, sizeof(a)-1, XmlNamespace::ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_012, false }
 #define MAP_ENTRY_ODF13( a, ns, nm, t )      { a, sizeof(a)-1, ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_013, false }
-#define MAP_ENTRY_ODF_EXT( a, ns, nm, t )    { a, sizeof(a)-1, XML_NAMESPACE_##ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false }
-#define MAP_ENTRY_ODF_EXT_IMPORT( a, ns, nm, t )    { a, sizeof(a)-1, XML_NAMESPACE_##ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, true }
-#define MAP_CONTEXT( a, ns, nm, t, c )       { a, sizeof(a)-1, XML_NAMESPACE_##ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, c, SvtSaveOptions::ODFSVER_010, false }
-#define MAP_SPECIAL( a, ns, nm, t, c )       { a, sizeof(a)-1, XML_NAMESPACE_##ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART | MID_FLAG_SPECIAL_ITEM, c, SvtSaveOptions::ODFSVER_010, false }
-#define MAP_SPECIAL_ODF12( a, ns, nm, t, c ) { a, sizeof(a)-1, XML_NAMESPACE_##ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART | MID_FLAG_SPECIAL_ITEM, c, SvtSaveOptions::ODFSVER_012, false }
-#define MAP_ENTRY_END { nullptr,0,0,xmloff::token::XML_TOKEN_INVALID,0,0,SvtSaveOptions::ODFSVER_010, false }
+#define MAP_ENTRY_ODF_EXT( a, ns, nm, t )    { a, sizeof(a)-1, XmlNamespace::ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false }
+#define MAP_ENTRY_ODF_EXT_IMPORT( a, ns, nm, t )    { a, sizeof(a)-1, XmlNamespace::ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, true }
+#define MAP_CONTEXT( a, ns, nm, t, c )       { a, sizeof(a)-1, XmlNamespace::ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART, c, SvtSaveOptions::ODFSVER_010, false }
+#define MAP_SPECIAL( a, ns, nm, t, c )       { a, sizeof(a)-1, XmlNamespace::ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART | MID_FLAG_SPECIAL_ITEM, c, SvtSaveOptions::ODFSVER_010, false }
+#define MAP_SPECIAL_ODF12( a, ns, nm, t, c ) { a, sizeof(a)-1, XmlNamespace::ns, xmloff::token::nm, t|XML_TYPE_PROP_CHART | MID_FLAG_SPECIAL_ITEM, c, SvtSaveOptions::ODFSVER_012, false }
+#define MAP_ENTRY_END { nullptr,0,XmlNamespace::UNKNOWN,xmloff::token::XML_TOKEN_INVALID,0,0,SvtSaveOptions::ODFSVER_010, false }
 
 // PropertyMap for Chart properties drawing- and
 // textproperties are added later using the chaining
@@ -214,20 +214,20 @@ const XMLPropertyMapEntry aXMLChartPropMap[] =
     MAP_SPECIAL( "RegressionType", CHART, XML_REGRESSION_TYPE, XML_TYPE_STRING, XML_SCH_CONTEXT_SPECIAL_REGRESSION_TYPE ),
 
     // ODF 1.3 OFFICE-3958
-    MAP_ENTRY_ODF13( "CurveName", XML_NAMESPACE_LO_EXT, XML_REGRESSION_CURVE_NAME, XML_TYPE_STRING ),
-    MAP_ENTRY_ODF13( "CurveName", XML_NAMESPACE_CHART, XML_REGRESSION_CURVE_NAME, XML_TYPE_STRING ),
-    MAP_ENTRY_ODF13( "PolynomialDegree", XML_NAMESPACE_LO_EXT, XML_REGRESSION_MAX_DEGREE, XML_TYPE_NUMBER ),
-    MAP_ENTRY_ODF13( "PolynomialDegree", XML_NAMESPACE_CHART, XML_REGRESSION_MAX_DEGREE, XML_TYPE_NUMBER ),
-    MAP_ENTRY_ODF13( "ForceIntercept", XML_NAMESPACE_LO_EXT, XML_REGRESSION_FORCE_INTERCEPT, XML_TYPE_BOOL ),
-    MAP_ENTRY_ODF13( "ForceIntercept", XML_NAMESPACE_CHART, XML_REGRESSION_FORCE_INTERCEPT, XML_TYPE_BOOL ),
-    MAP_ENTRY_ODF13( "InterceptValue", XML_NAMESPACE_LO_EXT, XML_REGRESSION_INTERCEPT_VALUE, XML_TYPE_DOUBLE ),
-    MAP_ENTRY_ODF13( "InterceptValue", XML_NAMESPACE_CHART, XML_REGRESSION_INTERCEPT_VALUE, XML_TYPE_DOUBLE ),
+    MAP_ENTRY_ODF13( "CurveName", XmlNamespace::LO_EXT, XML_REGRESSION_CURVE_NAME, XML_TYPE_STRING ),
+    MAP_ENTRY_ODF13( "CurveName", XmlNamespace::CHART, XML_REGRESSION_CURVE_NAME, XML_TYPE_STRING ),
+    MAP_ENTRY_ODF13( "PolynomialDegree", XmlNamespace::LO_EXT, XML_REGRESSION_MAX_DEGREE, XML_TYPE_NUMBER ),
+    MAP_ENTRY_ODF13( "PolynomialDegree", XmlNamespace::CHART, XML_REGRESSION_MAX_DEGREE, XML_TYPE_NUMBER ),
+    MAP_ENTRY_ODF13( "ForceIntercept", XmlNamespace::LO_EXT, XML_REGRESSION_FORCE_INTERCEPT, XML_TYPE_BOOL ),
+    MAP_ENTRY_ODF13( "ForceIntercept", XmlNamespace::CHART, XML_REGRESSION_FORCE_INTERCEPT, XML_TYPE_BOOL ),
+    MAP_ENTRY_ODF13( "InterceptValue", XmlNamespace::LO_EXT, XML_REGRESSION_INTERCEPT_VALUE, XML_TYPE_DOUBLE ),
+    MAP_ENTRY_ODF13( "InterceptValue", XmlNamespace::CHART, XML_REGRESSION_INTERCEPT_VALUE, XML_TYPE_DOUBLE ),
 
     // ODF 1.3 OFFICE-3959
-    MAP_ENTRY_ODF13( "MovingAveragePeriod", XML_NAMESPACE_LO_EXT, XML_REGRESSION_PERIOD, XML_TYPE_NUMBER ),
-    MAP_ENTRY_ODF13( "MovingAveragePeriod", XML_NAMESPACE_CHART, XML_REGRESSION_PERIOD, XML_TYPE_NUMBER ),
-    MAP_ENTRY_ODF13( "MovingAverageType", XML_NAMESPACE_LO_EXT, XML_REGRESSION_MOVING_TYPE, XML_TYPE_STRING ),
-    MAP_ENTRY_ODF13( "MovingAverageType", XML_NAMESPACE_CHART, XML_REGRESSION_MOVING_TYPE, XML_TYPE_STRING ),
+    MAP_ENTRY_ODF13( "MovingAveragePeriod", XmlNamespace::LO_EXT, XML_REGRESSION_PERIOD, XML_TYPE_NUMBER ),
+    MAP_ENTRY_ODF13( "MovingAveragePeriod", XmlNamespace::CHART, XML_REGRESSION_PERIOD, XML_TYPE_NUMBER ),
+    MAP_ENTRY_ODF13( "MovingAverageType", XmlNamespace::LO_EXT, XML_REGRESSION_MOVING_TYPE, XML_TYPE_STRING ),
+    MAP_ENTRY_ODF13( "MovingAverageType", XmlNamespace::CHART, XML_REGRESSION_MOVING_TYPE, XML_TYPE_STRING ),
 
     MAP_ENTRY_ODF_EXT( "ExtrapolateForward", LO_EXT, XML_REGRESSION_EXTRAPOLATE_FORWARD, XML_TYPE_DOUBLE ),
     MAP_ENTRY_ODF_EXT( "ExtrapolateBackward", LO_EXT, XML_REGRESSION_EXTRAPOLATE_BACKWARD, XML_TYPE_DOUBLE ),
diff --git a/xmloff/source/chart/PropertyMaps.cxx b/xmloff/source/chart/PropertyMaps.cxx
index ce3b458ec0dc..a43d3ca7fc1c 100644
--- a/xmloff/source/chart/PropertyMaps.cxx
+++ b/xmloff/source/chart/PropertyMaps.cxx
@@ -317,7 +317,7 @@ void XMLChartExportPropertyMapper::handleElementItem(
                 }
                 if (!sInternalURL.isEmpty())
                 {
-                    mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sInternalURL);
+                    mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, sInternalURL);
                 }
 
                 {
@@ -401,7 +401,7 @@ void XMLChartExportPropertyMapper::handleSpecialItem(
         bHandled = true;
 
         OUString sAttrName = getPropertySetMapper()->GetEntryXMLName( rProperty.mnIndex );
-        sal_uInt16 nNameSpace = getPropertySetMapper()->GetEntryNameSpace( rProperty.mnIndex );
+        XmlNamespace nNameSpace = getPropertySetMapper()->GetEntryNameSpace( rProperty.mnIndex );
         OUStringBuffer sValueBuffer;
         OUString sValue;
 
@@ -551,7 +551,7 @@ XMLChartImportPropertyMapper::XMLChartImportPropertyMapper( const rtl::Reference
     //#i14365# save and load writing-mode for chart elements
     //The property TextWritingMode is mapped wrongly in the underlying draw mapper, but for draw it is necessary
     //We remove that property here only for chart thus the chart can use the correct mapping from the writer paragraph settings (attribute 'writing-mode' <-> property 'WritingMode')
-    sal_Int32 nUnwantedWrongEntry = maPropMapper->FindEntryIndex( "TextWritingMode", XML_NAMESPACE_STYLE, GetXMLToken(XML_WRITING_MODE) );
+    sal_Int32 nUnwantedWrongEntry = maPropMapper->FindEntryIndex( "TextWritingMode", XmlNamespace::STYLE, GetXMLToken(XML_WRITING_MODE) );
     maPropMapper->RemoveEntry(nUnwantedWrongEntry);
 
     // do not chain text properties: on import this is done by shape mapper
diff --git a/xmloff/source/chart/SchXMLAxisContext.cxx b/xmloff/source/chart/SchXMLAxisContext.cxx
index 0e1163ad75bb..f4dc1df20f66 100644
--- a/xmloff/source/chart/SchXMLAxisContext.cxx
+++ b/xmloff/source/chart/SchXMLAxisContext.cxx
@@ -80,7 +80,7 @@ private:
 
 public:
     SchXMLCategoriesContext( SvXMLImport& rImport,
-                                   sal_uInt16 nPrefix,
+                                   XmlNamespace nPrefix,
                                    const OUString& rLocalName,
                                    OUString& rAddress );
     virtual void StartElement( const Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
@@ -90,7 +90,7 @@ class DateScaleContext : public SvXMLImportContext
 {
 public:
     DateScaleContext( SvXMLImport& rImport,
-                        sal_uInt16 nPrefix, const OUString& rLocalName,
+                        XmlNamespace nPrefix, const OUString& rLocalName,
                         const Reference< beans::XPropertySet >& rAxisProps );
 
     virtual void StartElement( const Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
@@ -110,7 +110,7 @@ SchXMLAxisContext::SchXMLAxisContext( SchXMLImportHelper& rImpHelper,
                                       bool bAdaptWrongPercentScaleValues,
                                       bool bAdaptXAxisOrientationForOld2DBarCharts,
                                       bool& rbAxisPositionAttributeImported ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_CHART, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::CHART, rLocalName ),
         m_rImportHelper( rImpHelper ),
         m_xDiagram( xDiagram ),
         m_rAxes( rAxes ),
@@ -243,11 +243,11 @@ enum AxisAttributeTokens
 
 const SvXMLTokenMapEntry aAxisAttributeTokenMap[] =
 {
-    { XML_NAMESPACE_CHART,      XML_DIMENSION,  XML_TOK_AXIS_DIMENSION      },
-    { XML_NAMESPACE_CHART,      XML_NAME,       XML_TOK_AXIS_NAME           },
-    { XML_NAMESPACE_CHART,      XML_STYLE_NAME, XML_TOK_AXIS_STYLE_NAME     },
-    { XML_NAMESPACE_CHART,      XML_AXIS_TYPE,  XML_TOK_AXIS_TYPE           },
-    { XML_NAMESPACE_CHART_EXT,  XML_AXIS_TYPE,  XML_TOK_AXIS_TYPE_EXT       },
+    { XmlNamespace::CHART,      XML_DIMENSION,  XML_TOK_AXIS_DIMENSION      },
+    { XmlNamespace::CHART,      XML_NAME,       XML_TOK_AXIS_NAME           },
+    { XmlNamespace::CHART,      XML_STYLE_NAME, XML_TOK_AXIS_STYLE_NAME     },
+    { XmlNamespace::CHART,      XML_AXIS_TYPE,  XML_TOK_AXIS_TYPE           },
+    { XmlNamespace::CHART_EXT,  XML_AXIS_TYPE,  XML_TOK_AXIS_TYPE_EXT       },
     XML_TOKEN_MAP_END
 };
 
@@ -273,7 +273,7 @@ void SchXMLAxisContext::StartElement( const Reference< xml::sax::XAttributeList
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
@@ -624,11 +624,11 @@ enum AxisChildTokens
 
 const SvXMLTokenMapEntry aAxisChildTokenMap[] =
 {
-    { XML_NAMESPACE_CHART,      XML_TITLE,              XML_TOK_AXIS_TITLE          },
-    { XML_NAMESPACE_CHART,      XML_CATEGORIES,         XML_TOK_AXIS_CATEGORIES     },
-    { XML_NAMESPACE_CHART,      XML_GRID,               XML_TOK_AXIS_GRID           },
-    { XML_NAMESPACE_CHART,      XML_DATE_SCALE,         XML_TOK_AXIS_DATE_SCALE     },
-    { XML_NAMESPACE_CHART_EXT,  XML_DATE_SCALE,         XML_TOK_AXIS_DATE_SCALE_EXT },
+    { XmlNamespace::CHART,      XML_TITLE,              XML_TOK_AXIS_TITLE          },
+    { XmlNamespace::CHART,      XML_CATEGORIES,         XML_TOK_AXIS_CATEGORIES     },
+    { XmlNamespace::CHART,      XML_GRID,               XML_TOK_AXIS_GRID           },
+    { XmlNamespace::CHART,      XML_DATE_SCALE,         XML_TOK_AXIS_DATE_SCALE     },
+    { XmlNamespace::CHART_EXT,  XML_DATE_SCALE,         XML_TOK_AXIS_DATE_SCALE_EXT },
     XML_TOKEN_MAP_END
 };
 
@@ -644,7 +644,7 @@ struct theAxisChildTokenMap : public rtl::Static< AxisChildTokenMap, theAxisChil
 }
 
 SvXMLImportContextRef SchXMLAxisContext::CreateChildContext(
-    sal_uInt16 p_nPrefix,
+    XmlNamespace p_nPrefix,
     const OUString& rLocalName,
     const Reference< xml::sax::XAttributeList >& xAttrList )
 {
@@ -686,9 +686,9 @@ SvXMLImportContextRef SchXMLAxisContext::CreateChildContext(
             {
                 OUString sAttrName = xAttrList->getNameByIndex( i );
                 OUString aLocalName;
-                sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+                XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-                if( nPrefix == XML_NAMESPACE_CHART )
+                if( nPrefix == XmlNamespace::CHART )
                 {
                     if( IsXMLToken( aLocalName, XML_CLASS ) )
                     {
@@ -868,7 +868,7 @@ void SchXMLAxisContext::CorrectAxisPositions( const Reference< chart2::XChartDoc
 
 SchXMLCategoriesContext::SchXMLCategoriesContext(
     SvXMLImport& rImport,
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     OUString& rAddress ) :
         SvXMLImportContext( rImport, nPrefix, rLocalName ),
@@ -884,9 +884,9 @@ void SchXMLCategoriesContext::StartElement( const Reference< xml::sax::XAttribut
     {
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_TABLE &&
+        if( nPrefix == XmlNamespace::TABLE &&
             IsXMLToken( aLocalName, XML_CELL_RANGE_ADDRESS ) )
         {
             mrAddress = xAttrList->getValueByIndex( i );
@@ -896,7 +896,7 @@ void SchXMLCategoriesContext::StartElement( const Reference< xml::sax::XAttribut
 
 DateScaleContext::DateScaleContext(
     SvXMLImport& rImport,
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const Reference< beans::XPropertySet >& rAxisProps ) :
         SvXMLImportContext( rImport, nPrefix, rLocalName ),
@@ -917,11 +917,11 @@ enum DateScaleAttributeTokens
 
 const SvXMLTokenMapEntry aDateScaleAttributeTokenMap[] =
 {
-    { XML_NAMESPACE_CHART,  XML_BASE_TIME_UNIT,         XML_TOK_DATESCALE_BASE_TIME_UNIT  },
-    { XML_NAMESPACE_CHART,  XML_MAJOR_INTERVAL_VALUE,   XML_TOK_DATESCALE_MAJOR_INTERVAL_VALUE  },
-    { XML_NAMESPACE_CHART,  XML_MAJOR_INTERVAL_UNIT,    XML_TOK_DATESCALE_MAJOR_INTERVAL_UNIT  },
-    { XML_NAMESPACE_CHART,  XML_MINOR_INTERVAL_VALUE,   XML_TOK_DATESCALE_MINOR_INTERVAL_VALUE  },
-    { XML_NAMESPACE_CHART,  XML_MINOR_INTERVAL_UNIT,    XML_TOK_DATESCALE_MINOR_INTERVAL_UNIT  },
+    { XmlNamespace::CHART,  XML_BASE_TIME_UNIT,         XML_TOK_DATESCALE_BASE_TIME_UNIT  },
+    { XmlNamespace::CHART,  XML_MAJOR_INTERVAL_VALUE,   XML_TOK_DATESCALE_MAJOR_INTERVAL_VALUE  },
+    { XmlNamespace::CHART,  XML_MAJOR_INTERVAL_UNIT,    XML_TOK_DATESCALE_MAJOR_INTERVAL_UNIT  },
+    { XmlNamespace::CHART,  XML_MINOR_INTERVAL_VALUE,   XML_TOK_DATESCALE_MINOR_INTERVAL_VALUE  },
+    { XmlNamespace::CHART,  XML_MINOR_INTERVAL_UNIT,    XML_TOK_DATESCALE_MINOR_INTERVAL_UNIT  },
     XML_TOKEN_MAP_END
 };
 
@@ -966,7 +966,7 @@ void DateScaleContext::StartElement( const Reference< xml::sax::XAttributeList >
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
diff --git a/xmloff/source/chart/SchXMLAxisContext.hxx b/xmloff/source/chart/SchXMLAxisContext.hxx
index 622c6282aeb0..4fe0563d1733 100644
--- a/xmloff/source/chart/SchXMLAxisContext.hxx
+++ b/xmloff/source/chart/SchXMLAxisContext.hxx
@@ -44,7 +44,7 @@ public:
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void EndElement() override;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
diff --git a/xmloff/source/chart/SchXMLCalculationSettingsContext.cxx b/xmloff/source/chart/SchXMLCalculationSettingsContext.cxx
index 74780fe7eecd..07001f89a6ee 100644
--- a/xmloff/source/chart/SchXMLCalculationSettingsContext.cxx
+++ b/xmloff/source/chart/SchXMLCalculationSettingsContext.cxx
@@ -36,7 +36,7 @@ using namespace ::com::sun::star;
 using namespace ::xmloff::token;
 
 SchXMLCalculationSettingsContext::SchXMLCalculationSettingsContext( SvXMLImport& rImport,
-                                    sal_uInt16 p_nPrefix,
+                                    XmlNamespace p_nPrefix,
                                     const OUString& rLocalName,
                                     const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList )
 : SvXMLImportContext ( rImport, p_nPrefix, rLocalName )
@@ -47,8 +47,8 @@ SchXMLCalculationSettingsContext::SchXMLCalculationSettingsContext( SvXMLImport&
     {
         const OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
-        const sal_uInt16 nPrefix = rMap.GetKeyByAttrName(sAttrName, &aLocalName );
-        if ( nPrefix == XML_NAMESPACE_TABLE && IsXMLToken( aLocalName, XML_DATE_VALUE ) )
+        const XmlNamespace nPrefix = rMap.GetKeyByAttrName(sAttrName, &aLocalName );
+        if ( nPrefix == XmlNamespace::TABLE && IsXMLToken( aLocalName, XML_DATE_VALUE ) )
         {
             util::DateTime aNullDate;
             const OUString sValue = xAttrList->getValueByIndex( i );
@@ -57,7 +57,7 @@ SchXMLCalculationSettingsContext::SchXMLCalculationSettingsContext( SvXMLImport&
         }
     }
 }
-SvXMLImportContextRef SchXMLCalculationSettingsContext::CreateChildContext( sal_uInt16 nPrefix,
+SvXMLImportContextRef SchXMLCalculationSettingsContext::CreateChildContext( XmlNamespace nPrefix,
                                    const OUString& rLocalName,
                                    const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList )
 {
diff --git a/xmloff/source/chart/SchXMLCalculationSettingsContext.hxx b/xmloff/source/chart/SchXMLCalculationSettingsContext.hxx
index 0fbe3056a162..d5bb60761b02 100644
--- a/xmloff/source/chart/SchXMLCalculationSettingsContext.hxx
+++ b/xmloff/source/chart/SchXMLCalculationSettingsContext.hxx
@@ -27,11 +27,11 @@ class SchXMLCalculationSettingsContext : public SvXMLImportContext
     css::uno::Any m_aNullDate;
 public:
     SchXMLCalculationSettingsContext( SvXMLImport& rImport,
-                                    sal_uInt16 nPrefix,
+                                    XmlNamespace nPrefix,
                                     const OUString& rLocalName,
                                     const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList );
 
-    virtual SvXMLImportContextRef CreateChildContext( sal_uInt16 nPrefix,
+    virtual SvXMLImportContextRef CreateChildContext( XmlNamespace nPrefix,
                                    const OUString& rLocalName,
                                    const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
diff --git a/xmloff/source/chart/SchXMLChartContext.cxx b/xmloff/source/chart/SchXMLChartContext.cxx
index b5f85d77dda4..65f64c98dfde 100644
--- a/xmloff/source/chart/SchXMLChartContext.cxx
+++ b/xmloff/source/chart/SchXMLChartContext.cxx
@@ -222,7 +222,7 @@ uno::Sequence< sal_Int32 > lcl_getNumberSequenceFromString( const OUString& rStr
 
 SchXMLChartContext::SchXMLChartContext( SchXMLImportHelper& rImpHelper,
                                         SvXMLImport& rImport, const OUString& rLocalName ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_CHART, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::CHART, rLocalName ),
         mrImportHelper( rImpHelper ),
         m_bHasRangeAtPlotArea( false ),
         m_bHasTableElement( false ),
@@ -323,7 +323,7 @@ void SchXMLChartContext::StartElement( const uno::Reference< xml::sax::XAttribut
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
@@ -336,10 +336,10 @@ void SchXMLChartContext::StartElement( const uno::Reference< xml::sax::XAttribut
             case XML_TOK_CHART_CLASS:
                 {
                     OUString sClassName;
-                    sal_uInt16 nClassPrefix =
+                    XmlNamespace nClassPrefix =
                         GetImport().GetNamespaceMap().GetKeyByAttrValueQName(
                                 aValue, &sClassName );
-                    if( XML_NAMESPACE_CHART == nClassPrefix )
+                    if( XmlNamespace::CHART == nClassPrefix )
                     {
                         SchXMLChartTypeEnum eChartTypeEnum = SchXMLTools::GetChartTypeEnum( sClassName );
                         if( eChartTypeEnum != XML_CHART_CLASS_UNKNOWN )
@@ -356,7 +356,7 @@ void SchXMLChartContext::StartElement( const uno::Reference< xml::sax::XAttribut
                             }
                         }
                     }
-                    else if( XML_NAMESPACE_OOO == nClassPrefix )
+                    else if( XmlNamespace::OOO == nClassPrefix )
                     {
                         // service is taken from add-in-name attribute
                         bHasAddin = true;
@@ -1020,7 +1020,7 @@ void SchXMLChartContext::MergeSeriesForStockChart()
 }
 
 SvXMLImportContextRef SchXMLChartContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& xAttrList )
 {
@@ -1165,7 +1165,7 @@ SchXMLTitleContext::SchXMLTitleContext( SchXMLImportHelper& rImpHelper, SvXMLImp
                                         const OUString& rLocalName,
                                         OUString& rTitle,
                                         uno::Reference< drawing::XShape > const & xTitleShape ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_CHART, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::CHART, rLocalName ),
         mrImportHelper( rImpHelper ),
         mrTitle( rTitle ),
         mxTitleShape( xTitleShape )
@@ -1188,9 +1188,9 @@ void SchXMLTitleContext::StartElement( const uno::Reference< xml::sax::XAttribut
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_SVG )
+        if( nPrefix == XmlNamespace::SVG )
         {
             if( IsXMLToken( aLocalName, XML_X ) )
             {
@@ -1205,7 +1205,7 @@ void SchXMLTitleContext::StartElement( const uno::Reference< xml::sax::XAttribut
                 bHasYPosition = true;
             }
         }
-        else if( nPrefix == XML_NAMESPACE_CHART )
+        else if( nPrefix == XmlNamespace::CHART )
         {
             if( IsXMLToken( aLocalName, XML_STYLE_NAME ) )
                 msAutoStyleName = aValue;
@@ -1223,14 +1223,14 @@ void SchXMLTitleContext::StartElement( const uno::Reference< xml::sax::XAttribut
 }
 
 SvXMLImportContextRef SchXMLTitleContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
     SvXMLImportContext* pContext = nullptr;
 
-    if( (nPrefix == XML_NAMESPACE_TEXT ||
-                nPrefix == XML_NAMESPACE_LO_EXT) &&
+    if( (nPrefix == XmlNamespace::TEXT ||
+                nPrefix == XmlNamespace::LO_EXT) &&
         IsXMLToken( rLocalName, XML_P ) )
     {
         pContext = new SchXMLParagraphContext( GetImport(), rLocalName, mrTitle );
diff --git a/xmloff/source/chart/SchXMLChartContext.hxx b/xmloff/source/chart/SchXMLChartContext.hxx
index ae99d92fa2f6..09bb5c26098e 100644
--- a/xmloff/source/chart/SchXMLChartContext.hxx
+++ b/xmloff/source/chart/SchXMLChartContext.hxx
@@ -82,7 +82,7 @@ public:
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void EndElement() override;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
@@ -141,7 +141,7 @@ public:
 
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 };
diff --git a/xmloff/source/chart/SchXMLExport.cxx b/xmloff/source/chart/SchXMLExport.cxx
index 31a3582085e4..64b4549dc461 100644
--- a/xmloff/source/chart/SchXMLExport.cxx
+++ b/xmloff/source/chart/SchXMLExport.cxx
@@ -951,8 +951,8 @@ bool lcl_exportDomainForThisSequence( const Reference< chart2::data::XDataSequen
         //work around error in OOo 2.0 (problems with multiple series having a domain element)
         if( rFirstRangeForThisDomainIndex.isEmpty() || aRange != rFirstRangeForThisDomainIndex )
         {
-            rExport.AddAttribute( XML_NAMESPACE_TABLE, XML_CELL_RANGE_ADDRESS, aRange);
-            SvXMLElementExport aDomain( rExport, XML_NAMESPACE_CHART, XML_DOMAIN, true, true );
+            rExport.AddAttribute( XmlNamespace::TABLE, XML_CELL_RANGE_ADDRESS, aRange);
+            SvXMLElementExport aDomain( rExport, XmlNamespace::CHART, XML_DOMAIN, true, true );
             bDomainExported = true;
         }
 
@@ -1157,12 +1157,12 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
 
     if ( bIncludeTable && (aNullDate.Day != 30 || aNullDate.Month != 12 || aNullDate.Year != 1899 ) )
     {
-        SvXMLElementExport aSet( mrExport, XML_NAMESPACE_TABLE, XML_CALCULATION_SETTINGS, true, true );
+        SvXMLElementExport aSet( mrExport, XmlNamespace::TABLE, XML_CALCULATION_SETTINGS, true, true );
         {
             OUStringBuffer sBuffer;
             ::sax::Converter::convertDateTime(sBuffer, aNullDate, nullptr);
-            mrExport.AddAttribute( XML_NAMESPACE_TABLE,XML_DATE_VALUE,sBuffer.makeStringAndClear());
-            SvXMLElementExport aNull( mrExport, XML_NAMESPACE_TABLE, XML_NULL_DATE, true, true );
+            mrExport.AddAttribute( XmlNamespace::TABLE,XML_DATE_VALUE,sBuffer.makeStringAndClear());
+            SvXMLElementExport aNull( mrExport, XmlNamespace::TABLE, XML_NULL_DATE, true, true );
         }
     }
 
@@ -1192,15 +1192,15 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
                 if( xDBDataProvider.is() )
                     aDataProviderURL = ".";
             }
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, aDataProviderURL );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, aDataProviderURL );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
         }
 
         Reference<chart2::data::XPivotTableDataProvider> xPivotTableDataProvider(xNewDoc->getDataProvider(), uno::UNO_QUERY);
         if (xPivotTableDataProvider.is() && nCurrentODFVersion & SvtSaveOptions::ODFSVER_EXTENDED)
         {
             OUString sPivotTableName = xPivotTableDataProvider->getPivotTableName();
-            mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_DATA_PILOT_SOURCE, sPivotTableName);
+            mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_DATA_PILOT_SOURCE, sPivotTableName);
         }
 
         OUString sChartType( xDiagram->getDiagramType() );
@@ -1218,15 +1218,15 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
             if( eXMLChartType == XML_ADD_IN )
             {
                 // sChartType is the service-name of the add-in
-                mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_CLASS,
+                mrExport.AddAttribute( XmlNamespace::CHART, XML_CLASS,
                                        mrExport.GetNamespaceMap().GetQNameByKey(
-                                           XML_NAMESPACE_OOO, sChartType) );
+                                           XmlNamespace::OOO, sChartType) );
             }
             else if( eXMLChartType != XML_TOKEN_INVALID )
             {
-                mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_CLASS,
+                mrExport.AddAttribute( XmlNamespace::CHART, XML_CLASS,
                         mrExport.GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_CHART, GetXMLToken(eXMLChartType )) );
+                            XmlNamespace::CHART, GetXMLToken(eXMLChartType )) );
             }
 
             //column-mapping or row-mapping
@@ -1238,7 +1238,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
                 OUString aSequenceMappingStr( lcl_GetStringFromNumberSequence(
                     maSequenceMapping, mbHasCategoryLabels && !xNewDoc->hasInternalDataProvider() ) );
 
-                mrExport.AddAttribute( XML_NAMESPACE_CHART,
+                mrExport.AddAttribute( XmlNamespace::CHART,
                                         ::xmloff::token::GetXMLToken( eTransToken ),
                                         aSequenceMappingStr );
             }
@@ -1247,7 +1247,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
         AddAutoStyleAttribute( aPropertyStates );
 
         //element
-        xElChart.reset(new SvXMLElementExport( mrExport, XML_NAMESPACE_CHART, XML_CHART, true, true ));
+        xElChart.reset(new SvXMLElementExport( mrExport, XmlNamespace::CHART, XML_CHART, true, true ));
     }
     else    // autostyles
     {
@@ -1276,7 +1276,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
             AddAutoStyleAttribute( aPropertyStates );
 
             // element
-            SvXMLElementExport aElTitle( mrExport, XML_NAMESPACE_CHART, XML_TITLE, true, true );
+            SvXMLElementExport aElTitle( mrExport, XmlNamespace::CHART, XML_TITLE, true, true );
 
             // content (text:p)
             Reference< beans::XPropertySet > xPropSet( xShape, uno::UNO_QUERY );
@@ -1317,7 +1317,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
             AddAutoStyleAttribute( aPropertyStates );
 
             // element (has no subelements)
-            SvXMLElementExport aElSubTitle( mrExport, XML_NAMESPACE_CHART, XML_SUBTITLE, true, true );
+            SvXMLElementExport aElSubTitle( mrExport, XmlNamespace::CHART, XML_SUBTITLE, true, true );
 
             // content (text:p)
             Reference< beans::XPropertySet > xPropSet( xShape, uno::UNO_QUERY );
@@ -1360,7 +1360,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
                 {
                     Any aAny( xProp->getPropertyValue("Alignment"));
                     if( SchXMLEnumConverter::getLegendPositionConverter().exportXML( msString, aAny, mrExport.GetMM100UnitConverter() ) )
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_LEGEND_POSITION, msString );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_LEGEND_POSITION, msString );
                 }
                 catch( const beans::UnknownPropertyException & )
                 {
@@ -1374,7 +1374,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
                     {
                         Any aAny( xProp->getPropertyValue("Overlay"));
                         if(aAny.get<bool>())
-                            mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_OVERLAY, OUString::boolean(true));
+                            mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_OVERLAY, OUString::boolean(true));
                     }
                 }
                 catch( const beans::UnknownPropertyException & )
@@ -1397,7 +1397,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
                         bool bHasExpansion = (aAny >>= nLegendExpansion);
                         if( bHasExpansion && SchXMLEnumConverter::getLegendExpansionConverter().exportXML( aExpansionString, aAny, mrExport.GetMM100UnitConverter() ) )
                         {
-                            mrExport.AddAttribute( XML_NAMESPACE_STYLE, XML_LEGEND_EXPANSION, aExpansionString );
+                            mrExport.AddAttribute( XmlNamespace::STYLE, XML_LEGEND_EXPANSION, aExpansionString );
                             if( nLegendExpansion == chart::ChartLegendExpansion_CUSTOM)
                             {
                                 awt::Size aSize( xLegendShape->getSize() );
@@ -1416,7 +1416,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
                                     (aSize.Height == 0
                                      ? 1.0
                                      : double(aSize.Width)/double(aSize.Height)));
-                                mrExport.AddAttribute( XML_NAMESPACE_STYLE, XML_LEGEND_EXPANSION_ASPECT_RATIO, aAspectRatioString.makeStringAndClear() );
+                                mrExport.AddAttribute( XmlNamespace::STYLE, XML_LEGEND_EXPANSION_ASPECT_RATIO, aAspectRatioString.makeStringAndClear() );
                             }
                         }
                     }
@@ -1431,7 +1431,7 @@ void SchXMLExportHelper_Impl::parseDocument( Reference< chart::XChartDocument >
             AddAutoStyleAttribute( aPropertyStates );
 
             // element
-            SvXMLElementExport aLegend( mrExport, XML_NAMESPACE_CHART, XML_LEGEND, true, true );
+            SvXMLElementExport aLegend( mrExport, XmlNamespace::CHART, XML_LEGEND, true, true );
         }
         else    // autostyles
         {
@@ -1535,10 +1535,10 @@ static void lcl_exportComplexLabel( const Sequence< uno::Any >& rComplexLabel, S
     sal_Int32 nLength = rComplexLabel.getLength();
     if( nLength<=1 )
         return;
-    SvXMLElementExport aTextList( rExport, XML_NAMESPACE_TEXT, XML_LIST, true, true );
+    SvXMLElementExport aTextList( rExport, XmlNamespace::TEXT, XML_LIST, true, true );
     for(const auto& rElem : rComplexLabel)
     {
-        SvXMLElementExport aListItem( rExport, XML_NAMESPACE_TEXT, XML_LIST_ITEM, true, true );
+        SvXMLElementExport aListItem( rExport, XmlNamespace::TEXT, XML_LIST_ITEM, true, true );
         OUString aString;
         if( !(rElem >>= aString) )
         {
@@ -1551,7 +1551,7 @@ static void lcl_exportComplexLabel( const Sequence< uno::Any >& rComplexLabel, S
 void SchXMLExportHelper_Impl::exportTable()
 {
     // table element
-    mrExport.AddAttribute( XML_NAMESPACE_TABLE, XML_NAME, gsTableName );
+    mrExport.AddAttribute( XmlNamespace::TABLE, XML_NAME, gsTableName );
 
     try
     {
@@ -1560,14 +1560,14 @@ void SchXMLExportHelper_Impl::exportTable()
         if ( ( xProps->getPropertyValue("DisableDataTableDialog") >>= bProtected ) &&
              bProtected )
         {
-            mrExport.AddAttribute( XML_NAMESPACE_TABLE, XML_PROTECTED, XML_TRUE );
+            mrExport.AddAttribute( XmlNamespace::TABLE, XML_PROTECTED, XML_TRUE );
         }
     }
     catch ( const uno::Exception& )
     {
     }
 
-    SvXMLElementExport aTable( mrExport, XML_NAMESPACE_TABLE, XML_TABLE, true, true );
+    SvXMLElementExport aTable( mrExport, XmlNamespace::TABLE, XML_TABLE, true, true );
 
     bool bHasOwnData = false;
     Reference< chart2::XChartDocument > xNewDoc( mrExport.GetModel(), uno::UNO_QUERY );
@@ -1599,11 +1599,11 @@ void SchXMLExportHelper_Impl::exportTable()
 
     // declare columns
     {
-        SvXMLElementExport aHeaderColumns( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_HEADER_COLUMNS, true, true );
-        SvXMLElementExport aHeaderColumn( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_COLUMN, true, true );
+        SvXMLElementExport aHeaderColumns( mrExport, XmlNamespace::TABLE, XML_TABLE_HEADER_COLUMNS, true, true );
+        SvXMLElementExport aHeaderColumn( mrExport, XmlNamespace::TABLE, XML_TABLE_COLUMN, true, true );
     }
     {
-        SvXMLElementExport aColumns( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_COLUMNS, true, true );
+        SvXMLElementExport aColumns( mrExport, XmlNamespace::TABLE, XML_TABLE_COLUMNS, true, true );
 
         sal_Int32 nNextIndex = 0;
         for(sal_Int32 nHiddenIndex : aData.aHiddenColumns)
@@ -1613,12 +1613,12 @@ void SchXMLExportHelper_Impl::exportTable()
             {
                 sal_Int64 nRepeat = static_cast< sal_Int64 >( nHiddenIndex - nNextIndex );
                 if(nRepeat>1)
-                    mrExport.AddAttribute( XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED,
+                    mrExport.AddAttribute( XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED,
                                    OUString::number( nRepeat ));
-                SvXMLElementExport aColumn( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_COLUMN, true, true );
+                SvXMLElementExport aColumn( mrExport, XmlNamespace::TABLE, XML_TABLE_COLUMN, true, true );
             }
-            mrExport.AddAttribute( XML_NAMESPACE_TABLE, XML_VISIBILITY, GetXMLToken( XML_COLLAPSE ) );
-            SvXMLElementExport aColumn( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_COLUMN, true, true );
+            mrExport.AddAttribute( XmlNamespace::TABLE, XML_VISIBILITY, GetXMLToken( XML_COLLAPSE ) );
+            SvXMLElementExport aColumn( mrExport, XmlNamespace::TABLE, XML_TABLE_COLUMN, true, true );
             nNextIndex = nHiddenIndex+1;
         }
 
@@ -1627,22 +1627,22 @@ void SchXMLExportHelper_Impl::exportTable()
         {
             sal_Int64 nRepeat = static_cast< sal_Int64 >( nEndIndex - nNextIndex + 1 );
             if(nRepeat>1)
-                mrExport.AddAttribute( XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_REPEATED,
+                mrExport.AddAttribute( XmlNamespace::TABLE, XML_NUMBER_COLUMNS_REPEATED,
                                OUString::number( nRepeat ));
-            SvXMLElementExport aColumn( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_COLUMN, true, true );
+            SvXMLElementExport aColumn( mrExport, XmlNamespace::TABLE, XML_TABLE_COLUMN, true, true );
         }
     }
 
     // export rows with content
     //export header row
     {
-        SvXMLElementExport aHeaderRows( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_HEADER_ROWS, true, true );
-        SvXMLElementExport aRow( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_ROW, true, true );
+        SvXMLElementExport aHeaderRows( mrExport, XmlNamespace::TABLE, XML_TABLE_HEADER_ROWS, true, true );
+        SvXMLElementExport aRow( mrExport, XmlNamespace::TABLE, XML_TABLE_ROW, true, true );
 
         //first one empty cell for the row descriptions
         {
-            SvXMLElementExport aEmptyCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true );
-            SvXMLElementExport aEmptyParagraph( mrExport, XML_NAMESPACE_TEXT, XML_P, true, true );
+            SvXMLElementExport aEmptyCell( mrExport, XmlNamespace::TABLE, XML_TABLE_CELL, true, true );
+            SvXMLElementExport aEmptyParagraph( mrExport, XmlNamespace::TEXT, XML_P, true, true );
         }
 
         //export column descriptions
@@ -1667,17 +1667,17 @@ void SchXMLExportHelper_Impl::exportTable()
                         ::sax::Converter::convertDouble(
                                 msStringBuffer, fValue);
                         msString = msStringBuffer.makeStringAndClear();
-                        mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT );
-                        mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE, msString );
+                        mrExport.AddAttribute( XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_FLOAT );
+                        mrExport.AddAttribute( XmlNamespace::OFFICE, XML_VALUE, msString );
                     }
                 }
             }
             if( bExportString )
             {
-                mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING );
+                mrExport.AddAttribute( XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_STRING );
             }
 
-            SvXMLElementExport aCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true );
+            SvXMLElementExport aCell( mrExport, XmlNamespace::TABLE, XML_TABLE_CELL, true, true );
             exportText( rDesc );
             if( nC < nComplexCount )
                 lcl_exportComplexLabel( rComplexColumnDescriptions[nC], mrExport );
@@ -1696,7 +1696,7 @@ void SchXMLExportHelper_Impl::exportTable()
 
     // export value rows
     {
-        SvXMLElementExport aRows( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_ROWS, true, true );
+        SvXMLElementExport aRows( mrExport, XmlNamespace::TABLE, XML_TABLE_ROWS, true, true );
         tStringVector::const_iterator aRowDescriptionsIter( aData.aRowDescriptions.begin());
         const Sequence< Sequence< uno::Any > >& rComplexRowDescriptions = aData.aComplexRowDescriptions;
         sal_Int32 nComplexCount = rComplexRowDescriptions.getLength();
@@ -1704,7 +1704,7 @@ void SchXMLExportHelper_Impl::exportTable()
 
         for( const auto& rRow : aData.aDataInRows )
         {
-            SvXMLElementExport aRow( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_ROW, true, true );
+            SvXMLElementExport aRow( mrExport, XmlNamespace::TABLE, XML_TABLE_ROW, true, true );
 
             //export row descriptions
             {
@@ -1721,17 +1721,17 @@ void SchXMLExportHelper_Impl::exportTable()
 
                             ::sax::Converter::convertDouble(msStringBuffer, fValue);
                             msString = msStringBuffer.makeStringAndClear();
-                            mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT );
-                            mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE, msString );
+                            mrExport.AddAttribute( XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_FLOAT );
+                            mrExport.AddAttribute( XmlNamespace::OFFICE, XML_VALUE, msString );
                         }
                     }
                 }
                 if( bExportString )
                 {
-                    mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING );
+                    mrExport.AddAttribute( XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_STRING );
                 }
 
-                SvXMLElementExport aCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true );
+                SvXMLElementExport aCell( mrExport, XmlNamespace::TABLE, XML_TABLE_CELL, true, true );
                 if( aRowDescriptionsIter != aData.aRowDescriptions.end())
                 {
                     exportText( *aRowDescriptionsIter );
@@ -1753,9 +1753,9 @@ void SchXMLExportHelper_Impl::exportTable()
             {
                 ::sax::Converter::convertDouble( msStringBuffer, *aColIt );
                 msString = msStringBuffer.makeStringAndClear();
-                mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT );
-                mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_VALUE, msString );
-                SvXMLElementExport aCell( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_CELL, true, true );
+                mrExport.AddAttribute( XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_FLOAT );
+                mrExport.AddAttribute( XmlNamespace::OFFICE, XML_VALUE, msString );
+                SvXMLElementExport aCell( mrExport, XmlNamespace::TABLE, XML_TABLE_CELL, true, true );
                 exportText( msString ); // do not convert tabs and lfs
                 if( ( !bHasOwnData && aDataRangeIter != aDataRangeEndIter ) &&
                     ( mbRowSourceColumns || (aColIt == rRow.begin()) ) )
@@ -1864,7 +1864,7 @@ void SchXMLExportHelper_Impl::exportPlotArea(
         if( !msChartAddress.isEmpty() )
         {
             if( !bIncludeTable )
-                mrExport.AddAttribute( XML_NAMESPACE_TABLE, XML_CELL_RANGE_ADDRESS, msChartAddress );
+                mrExport.AddAttribute( XmlNamespace::TABLE, XML_CELL_RANGE_ADDRESS, msChartAddress );
 
             Reference< chart::XChartDocument > xDoc( mrExport.GetModel(), uno::UNO_QUERY );
             if( xDoc.is() )
@@ -1885,7 +1885,7 @@ void SchXMLExportHelper_Impl::exportPlotArea(
 
                         if( bFirstCol || bFirstRow )
                         {
-                            mrExport.AddAttribute( XML_NAMESPACE_CHART,
+                            mrExport.AddAttribute( XmlNamespace::CHART,
                                                    ::xmloff::token::GetXMLToken( ::xmloff::token::XML_DATA_SOURCE_HAS_LABELS ),
                                                    ( bFirstCol
                                                      ? ( bFirstRow
@@ -1935,7 +1935,7 @@ void SchXMLExportHelper_Impl::exportPlotArea(
         }
 
         // plot-area element
-        xElPlotArea.reset(new SvXMLElementExport( mrExport, XML_NAMESPACE_CHART, XML_PLOT_AREA, true, true ));
+        xElPlotArea.reset(new SvXMLElementExport( mrExport, XmlNamespace::CHART, XML_PLOT_AREA, true, true ));
 
         //inner position rectangle element
         exportCoordinateRegion( xDiagram );
@@ -1979,7 +1979,7 @@ void SchXMLExportHelper_Impl::exportPlotArea(
                     {
                         AddAutoStyleAttribute( aPropertyStates );
 
-                        SvXMLElementExport aGain( mrExport, XML_NAMESPACE_CHART, XML_STOCK_GAIN_MARKER, true, true );
+                        SvXMLElementExport aGain( mrExport, XmlNamespace::CHART, XML_STOCK_GAIN_MARKER, true, true );
                     }
                     else
                     {
@@ -2001,7 +2001,7 @@ void SchXMLExportHelper_Impl::exportPlotArea(
                     {
                         AddAutoStyleAttribute( aPropertyStates );
 
-                        SvXMLElementExport aGain( mrExport, XML_NAMESPACE_CHART, XML_STOCK_LOSS_MARKER, true, true );
+                        SvXMLElementExport aGain( mrExport, XmlNamespace::CHART, XML_STOCK_LOSS_MARKER, true, true );
                     }
                     else
                     {
@@ -2023,7 +2023,7 @@ void SchXMLExportHelper_Impl::exportPlotArea(
                     {
                         AddAutoStyleAttribute( aPropertyStates );
 
-                        SvXMLElementExport aGain( mrExport, XML_NAMESPACE_CHART, XML_STOCK_RANGE_LINE, true, true );
+                        SvXMLElementExport aGain( mrExport, XmlNamespace::CHART, XML_STOCK_RANGE_LINE, true, true );
                     }
                     else
                     {
@@ -2056,7 +2056,7 @@ void SchXMLExportHelper_Impl::exportPlotArea(
                 // add style name attribute
                 AddAutoStyleAttribute( aPropertyStates );
 
-                SvXMLElementExport aWall( mrExport, XML_NAMESPACE_CHART, XML_WALL, true, true );
+                SvXMLElementExport aWall( mrExport, XmlNamespace::CHART, XML_WALL, true, true );
             }
             else    // autostyles
             {
@@ -2084,7 +2084,7 @@ void SchXMLExportHelper_Impl::exportPlotArea(
         // add style name attribute
         AddAutoStyleAttribute( aPropertyStates );
 
-        SvXMLElementExport aFloor( mrExport, XML_NAMESPACE_CHART, XML_FLOOR, true, true );
+        SvXMLElementExport aFloor( mrExport, XmlNamespace::CHART, XML_FLOOR, true, true );
     }
     else    // autostyles
     {
@@ -2109,7 +2109,7 @@ void SchXMLExportHelper_Impl::exportCoordinateRegion( const uno::Reference< char
 
     // ODF 1.3 OFFICE-3928
     SvXMLElementExport aCoordinateRegion( mrExport,
-        (SvtSaveOptions::ODFSVER_013 <= nCurrentODFVersion) ? XML_NAMESPACE_CHART : XML_NAMESPACE_CHART_EXT,
+        (SvtSaveOptions::ODFSVER_013 <= nCurrentODFVersion) ? XmlNamespace::CHART : XmlNamespace::CHART_EXT,
         XML_COORDINATE_REGION, true, true );
 }
 
@@ -2144,21 +2144,21 @@ void SchXMLExportHelper_Impl::exportDateScale( const Reference< beans::XProperty
 
     sal_Int32 nTimeResolution = css::chart::TimeUnit::DAY;
     if( aIncrement.TimeResolution >>= nTimeResolution )
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_BASE_TIME_UNIT, lcl_getTimeUnitToken( nTimeResolution ) );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_BASE_TIME_UNIT, lcl_getTimeUnitToken( nTimeResolution ) );
 
     chart::TimeInterval aInterval;
     if( aIncrement.MajorTimeInterval >>= aInterval )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_MAJOR_INTERVAL_VALUE, OUString::number(aInterval.Number) );
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_MAJOR_INTERVAL_UNIT, lcl_getTimeUnitToken( aInterval.TimeUnit ) );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_MAJOR_INTERVAL_VALUE, OUString::number(aInterval.Number) );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_MAJOR_INTERVAL_UNIT, lcl_getTimeUnitToken( aInterval.TimeUnit ) );
     }
     if( aIncrement.MinorTimeInterval >>= aInterval )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_MINOR_INTERVAL_VALUE, OUString::number(aInterval.Number) );
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_MINOR_INTERVAL_UNIT, lcl_getTimeUnitToken( aInterval.TimeUnit ) );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_MINOR_INTERVAL_VALUE, OUString::number(aInterval.Number) );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_MINOR_INTERVAL_UNIT, lcl_getTimeUnitToken( aInterval.TimeUnit ) );
     }
 
-    SvXMLElementExport aDateScale( mrExport, XML_NAMESPACE_CHART_EXT, XML_DATE_SCALE, true, true );//#i25706#todo: change namespace for next ODF version
+    SvXMLElementExport aDateScale( mrExport, XmlNamespace::CHART_EXT, XML_DATE_SCALE, true, true );//#i25706#todo: change namespace for next ODF version
 }
 
 void SchXMLExportHelper_Impl::exportAxisTitle( const Reference< beans::XPropertySet >& rTitleProps, bool bExportContent )
@@ -2177,7 +2177,7 @@ void SchXMLExportHelper_Impl::exportAxisTitle( const Reference< beans::XProperty
             addPosition( xShape );
 
         AddAutoStyleAttribute( aPropertyStates );
-        SvXMLElementExport aTitle( mrExport, XML_NAMESPACE_CHART, XML_TITLE, true, true );
+        SvXMLElementExport aTitle( mrExport, XmlNamespace::CHART, XML_TITLE, true, true );
 
         // paragraph containing title
         exportText( aText );
@@ -2197,8 +2197,8 @@ void SchXMLExportHelper_Impl::exportGrid( const Reference< beans::XPropertySet >
     if( bExportContent )
     {
         AddAutoStyleAttribute( aPropertyStates );
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_CLASS, bMajor ? XML_MAJOR : XML_MINOR );
-        SvXMLElementExport aGrid( mrExport, XML_NAMESPACE_CHART, XML_GRID, true, true );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_CLASS, bMajor ? XML_MAJOR : XML_MINOR );
+        SvXMLElementExport aGrid( mrExport, XmlNamespace::CHART, XML_GRID, true, true );
     }
     else
     {
@@ -2223,7 +2223,7 @@ bool lcl_exportAxisType( const Reference< chart2::XAxis >& rChart2Axis, SvXMLExp
 
     chart2::ScaleData aScale( rChart2Axis->getScaleData() );
     //#i25706#todo: change namespace for next ODF version
-    sal_uInt16 nNameSpace = XML_NAMESPACE_CHART_EXT;
+    XmlNamespace nNameSpace = XmlNamespace::CHART_EXT;
 
     switch(aScale.AxisType)
     {
@@ -2267,7 +2267,7 @@ void disableLinkedNumberFormat(
     }
 
     // Entry not found.  Insert a new entry for this.
-    sal_Int32 nIndex = rMapper->GetEntryIndex(XML_NAMESPACE_CHART, "link-data-style-to-source", 0);
+    sal_Int32 nIndex = rMapper->GetEntryIndex(XmlNamespace::CHART, "link-data-style-to-source", 0);
     XMLPropertyState aState(nIndex);
     aState.maValue <<= false;
     rPropStates.push_back(aState);
@@ -2320,14 +2320,14 @@ void SchXMLExportHelper_Impl::exportAxis(
     bool bExportDateScale = false;
     if( bExportContent )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_DIMENSION, eDimension );
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_NAME, eAxisName );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_DIMENSION, eDimension );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_NAME, eAxisName );
         AddAutoStyleAttribute( aPropertyStates ); // write style name
         if( !rCategoriesRange.isEmpty() )
             bExportDateScale = lcl_exportAxisType( rChart2Axis, mrExport );
 
         // open axis element
-        pAxis.reset(new SvXMLElementExport( mrExport, XML_NAMESPACE_CHART, XML_AXIS, true, true ));
+        pAxis.reset(new SvXMLElementExport( mrExport, XmlNamespace::CHART, XML_AXIS, true, true ));
     }
     else
     {
@@ -2356,8 +2356,8 @@ void SchXMLExportHelper_Impl::exportAxis(
     // categories if we have a categories chart
     if( bExportContent && !rCategoriesRange.isEmpty() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_TABLE, XML_CELL_RANGE_ADDRESS, rCategoriesRange );
-        SvXMLElementExport aCategories( mrExport, XML_NAMESPACE_CHART, XML_CATEGORIES, true, true );
+        mrExport.AddAttribute( XmlNamespace::TABLE, XML_CELL_RANGE_ADDRESS, rCategoriesRange );
+        SvXMLElementExport aCategories( mrExport, XmlNamespace::CHART, XML_CATEGORIES, true, true );
     }
 
     // grid
@@ -2673,22 +2673,22 @@ void SchXMLExportHelper_Impl::exportSeries(
                                 if( bHasTwoYAxes )
                                 {
                                     if( nAttachedAxis == chart::ChartAxisAssign::SECONDARY_Y )
-                                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
+                                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
                                     else
-                                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
+                                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
                                 }
 
                                 // write style name
                                 AddAutoStyleAttribute( aPropertyStates );
 
                                 if( xValuesSeq.is())
-                                    mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_VALUES_CELL_RANGE_ADDRESS,
+                                    mrExport.AddAttribute( XmlNamespace::CHART, XML_VALUES_CELL_RANGE_ADDRESS,
                                                            lcl_ConvertRange(
                                                                xValuesSeq->getSourceRangeRepresentation(),
                                                                xNewDoc ));
                                 else
                                     // #i75297# allow empty series, export empty range to have all ranges on import
-                                    mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_VALUES_CELL_RANGE_ADDRESS, OUString());
+                                    mrExport.AddAttribute( XmlNamespace::CHART, XML_VALUES_CELL_RANGE_ADDRESS, OUString());
 
                                 const SvtSaveOptions::ODFSaneDefaultVersion nCurrentODFVersion(SvtSaveOptions().GetODFSaneDefaultVersion());
                                 if (nCurrentODFVersion & SvtSaveOptions::ODFSVER_EXTENDED) // do not export to ODF 1.3 or older
@@ -2698,7 +2698,7 @@ void SchXMLExportHelper_Impl::exportSeries(
                                         Any aAny = xPropSet->getPropertyValue("ShowLegendEntry");
                                         if (!aAny.get<bool>())
                                         {
-                                            mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_HIDE_LEGEND, OUString::boolean(true));
+                                            mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_HIDE_LEGEND, OUString::boolean(true));
                                         }
                                     }
                                 }
@@ -2722,12 +2722,12 @@ void SchXMLExportHelper_Impl::exportSeries(
                                     if (bHasString)
                                     {
                                         mrExport.AddAttribute(
-                                            XML_NAMESPACE_LO_EXT, XML_LABEL_STRING, aRange);
+                                            XmlNamespace::LO_EXT, XML_LABEL_STRING, aRange);
                                     }
                                     else
                                     {
                                         mrExport.AddAttribute(
-                                            XML_NAMESPACE_CHART, XML_LABEL_CELL_ADDRESS,
+                                            XmlNamespace::CHART, XML_LABEL_CELL_ADDRESS,
                                                 lcl_ConvertRange(
                                                     xLabelSeq->getSourceRangeRepresentation(), xNewDoc));
                                     }
@@ -2740,12 +2740,12 @@ void SchXMLExportHelper_Impl::exportSeries(
                                 enum XMLTokenEnum eCTToken(
                                     SchXMLTools::getTokenByChartType( aChartType, false /* bUseOldNames */ ));
                                 //@todo: get token for current charttype
-                                mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_CLASS,
+                                mrExport.AddAttribute( XmlNamespace::CHART, XML_CLASS,
                                                        mrExport.GetNamespaceMap().GetQNameByKey(
-                                                           XML_NAMESPACE_CHART, GetXMLToken( eCTToken )));
+                                                           XmlNamespace::CHART, GetXMLToken( eCTToken )));
 
                                 // open series element until end of for loop
-                                pSeries.reset(new SvXMLElementExport( mrExport, XML_NAMESPACE_CHART, XML_SERIES, true, true ));
+                                pSeries.reset(new SvXMLElementExport( mrExport, XmlNamespace::CHART, XML_SERIES, true, true ));
                             }
                             else    // autostyles
                             {
@@ -2838,7 +2838,7 @@ void SchXMLExportHelper_Impl::exportSeries(
                                     // add style name attribute
                                     AddAutoStyleAttribute( aPropertyStates );
 
-                                    SvXMLElementExport( mrExport, XML_NAMESPACE_CHART, XML_MEAN_VALUE, true, true );
+                                    SvXMLElementExport( mrExport, XmlNamespace::CHART, XML_MEAN_VALUE, true, true );
                                 }
                                 else    // autostyles
                                 {
@@ -2892,12 +2892,12 @@ void SchXMLExportHelper_Impl::exportPropertyMapping(
             Reference< chart2::data::XDataSequence > xValues( xSequence->getValues() );
             if( xValues.is())
             {
-                mrExport.AddAttribute( XML_NAMESPACE_LO_EXT, XML_PROPERTY, rSupportedMapping);
-                mrExport.AddAttribute( XML_NAMESPACE_LO_EXT, XML_CELL_RANGE_ADDRESS,
+                mrExport.AddAttribute( XmlNamespace::LO_EXT, XML_PROPERTY, rSupportedMapping);
+                mrExport.AddAttribute( XmlNamespace::LO_EXT, XML_CELL_RANGE_ADDRESS,
                         lcl_ConvertRange(
                             xValues->getSourceRangeRepresentation(),
                             xNewDoc ));
-                SvXMLElementExport( mrExport, XML_NAMESPACE_LO_EXT, XML_PROPERTY_MAPPING, true, true );
+                SvXMLElementExport( mrExport, XmlNamespace::LO_EXT, XML_PROPERTY_MAPPING, true, true );
 
                 // register range for data table export
                 m_aDataSequencesToExport.emplace_back(
@@ -2984,11 +2984,11 @@ void SchXMLExportHelper_Impl::exportRegressionCurve(
                     AddAutoStyleAttribute( aPropertyStates );
                 }
 
-                SvXMLElementExport aRegressionExport( mrExport, XML_NAMESPACE_CHART, XML_REGRESSION_CURVE, true, true );
+                SvXMLElementExport aRegressionExport( mrExport, XmlNamespace::CHART, XML_REGRESSION_CURVE, true, true );
                 if( bExportEquation )
                 {
-                    mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_DISPLAY_EQUATION, (bShowEquation ? XML_TRUE : XML_FALSE) );
-                    mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_DISPLAY_R_SQUARE, (bShowRSquared ? XML_TRUE : XML_FALSE) );
+                    mrExport.AddAttribute( XmlNamespace::CHART, XML_DISPLAY_EQUATION, (bShowEquation ? XML_TRUE : XML_FALSE) );
+                    mrExport.AddAttribute( XmlNamespace::CHART, XML_DISPLAY_R_SQUARE, (bShowRSquared ? XML_TRUE : XML_FALSE) );
 
                     // export position
                     chart2::RelativePosition aRelativePosition;
@@ -3007,7 +3007,7 @@ void SchXMLExportHelper_Impl::exportRegressionCurve(
                         AddAutoStyleAttribute( aEquationPropertyStates );
                     }
 
-                    SvXMLElementExport( mrExport, XML_NAMESPACE_CHART, XML_EQUATION, true, true );
+                    SvXMLElementExport( mrExport, XmlNamespace::CHART, XML_EQUATION, true, true );
                 }
             }
             else    // autostyles
@@ -3092,8 +3092,8 @@ void SchXMLExportHelper_Impl::exportErrorBar( const Reference<beans::XPropertySe
         AddAutoStyleAttribute( aPropertyStates );
 
         if (nCurrentVersion >= SvtSaveOptions::ODFSVER_012)
-            mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_DIMENSION, bYError ? XML_Y : XML_X );//#i114149#
-        SvXMLElementExport( mrExport, XML_NAMESPACE_CHART, XML_ERROR_INDICATOR, true, true );
+            mrExport.AddAttribute( XmlNamespace::CHART, XML_DIMENSION, bYError ? XML_Y : XML_X );//#i114149#
+        SvXMLElementExport( mrExport, XmlNamespace::CHART, XML_ERROR_INDICATOR, true, true );
     }
     else    // autostyles
     {
@@ -3138,14 +3138,14 @@ void SchXMLExportHelper_Impl::exportCandleStickSeries(
                     tLabelAndValueRange aRanges( lcl_getLabelAndValueRangeByRole(
                         aSeqCnt, "values-first",  xNewDoc, m_aDataSequencesToExport ));
                     if( !aRanges.second.isEmpty())
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_VALUES_CELL_RANGE_ADDRESS, aRanges.second );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_VALUES_CELL_RANGE_ADDRESS, aRanges.second );
                     if( !aRanges.first.isEmpty())
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_LABEL_CELL_ADDRESS, aRanges.first );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_LABEL_CELL_ADDRESS, aRanges.first );
                     if( nAttachedAxis == chart::ChartAxisAssign::SECONDARY_Y )
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
                     else
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
-                    SvXMLElementExport aOpenSeries( mrExport, XML_NAMESPACE_CHART, XML_SERIES, true, true );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
+                    SvXMLElementExport aOpenSeries( mrExport, XmlNamespace::CHART, XML_SERIES, true, true );
                     // export empty data points
                     exportDataPoints( nullptr, nSeriesLength, xDiagram, bExportContent );
                 }
@@ -3155,14 +3155,14 @@ void SchXMLExportHelper_Impl::exportCandleStickSeries(
                     tLabelAndValueRange aRanges( lcl_getLabelAndValueRangeByRole(
                         aSeqCnt, "values-min",  xNewDoc, m_aDataSequencesToExport ));
                     if( !aRanges.second.isEmpty())
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_VALUES_CELL_RANGE_ADDRESS, aRanges.second );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_VALUES_CELL_RANGE_ADDRESS, aRanges.second );
                     if( !aRanges.first.isEmpty())
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_LABEL_CELL_ADDRESS, aRanges.first );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_LABEL_CELL_ADDRESS, aRanges.first );
                     if( nAttachedAxis == chart::ChartAxisAssign::SECONDARY_Y )
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
                     else
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
-                    SvXMLElementExport aLowSeries( mrExport, XML_NAMESPACE_CHART, XML_SERIES, true, true );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
+                    SvXMLElementExport aLowSeries( mrExport, XmlNamespace::CHART, XML_SERIES, true, true );
                     // export empty data points
                     exportDataPoints( nullptr, nSeriesLength, xDiagram, bExportContent );
                 }
@@ -3172,14 +3172,14 @@ void SchXMLExportHelper_Impl::exportCandleStickSeries(
                     tLabelAndValueRange aRanges( lcl_getLabelAndValueRangeByRole(
                         aSeqCnt, "values-max",  xNewDoc, m_aDataSequencesToExport ));
                     if( !aRanges.second.isEmpty())
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_VALUES_CELL_RANGE_ADDRESS, aRanges.second );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_VALUES_CELL_RANGE_ADDRESS, aRanges.second );
                     if( !aRanges.first.isEmpty())
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_LABEL_CELL_ADDRESS, aRanges.first );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_LABEL_CELL_ADDRESS, aRanges.first );
                     if( nAttachedAxis == chart::ChartAxisAssign::SECONDARY_Y )
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
                     else
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
-                    SvXMLElementExport aHighSeries( mrExport, XML_NAMESPACE_CHART, XML_SERIES, true, true );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
+                    SvXMLElementExport aHighSeries( mrExport, XmlNamespace::CHART, XML_SERIES, true, true );
                     // export empty data points
                     exportDataPoints( nullptr, nSeriesLength, xDiagram, bExportContent );
                 }
@@ -3189,14 +3189,14 @@ void SchXMLExportHelper_Impl::exportCandleStickSeries(
                     tLabelAndValueRange aRanges( lcl_getLabelAndValueRangeByRole(
                         aSeqCnt, "values-last",  xNewDoc, m_aDataSequencesToExport ));
                     if( !aRanges.second.isEmpty())
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_VALUES_CELL_RANGE_ADDRESS, aRanges.second );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_VALUES_CELL_RANGE_ADDRESS, aRanges.second );
                     if( !aRanges.first.isEmpty())
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_LABEL_CELL_ADDRESS, aRanges.first );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_LABEL_CELL_ADDRESS, aRanges.first );
                     if( nAttachedAxis == chart::ChartAxisAssign::SECONDARY_Y )
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_SECONDARY_Y );
                     else
-                        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
-                    SvXMLElementExport aCloseSeries( mrExport, XML_NAMESPACE_CHART, XML_SERIES, true, true );
+                        mrExport.AddAttribute( XmlNamespace::CHART, XML_ATTACHED_AXIS, XML_PRIMARY_Y );
+                    SvXMLElementExport aCloseSeries( mrExport, XmlNamespace::CHART, XML_SERIES, true, true );
                     // export empty data points
                     exportDataPoints( nullptr, nSeriesLength, xDiagram, bExportContent );
                 }
@@ -3427,23 +3427,23 @@ void SchXMLExportHelper_Impl::exportDataPoints(
         {
             // write last element
             if( !aLastPoint.maStyleName.isEmpty() )
-                mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_STYLE_NAME, aLastPoint.maStyleName );
+                mrExport.AddAttribute( XmlNamespace::CHART, XML_STYLE_NAME, aLastPoint.maStyleName );
 
             if( aLastPoint.mnRepeat > 1 )
-                mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_REPEATED,
+                mrExport.AddAttribute( XmlNamespace::CHART, XML_REPEATED,
                                     OUString::number( ( aLastPoint.mnRepeat ) ));
 
             for (auto& deletedLegendEntry : deletedLegendEntriesSeq)
             {
                 if (nIndex == deletedLegendEntry)
                 {
-                    mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_HIDE_LEGEND, OUString::boolean(true));
+                    mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_HIDE_LEGEND, OUString::boolean(true));
                     break;
                 }
             }
             nIndex++;
             exportCustomLabelPosition(aLastPoint.mCustomLabelPos);
-            SvXMLElementExport aPointElem( mrExport, XML_NAMESPACE_CHART, XML_DATA_POINT, true, true );
+            SvXMLElementExport aPointElem( mrExport, XmlNamespace::CHART, XML_DATA_POINT, true, true );
             exportCustomLabel(aLastPoint.mCustomLabelText);
         }
         aLastPoint = aPoint;
@@ -3453,23 +3453,23 @@ void SchXMLExportHelper_Impl::exportDataPoints(
         return;
 
     if( !aLastPoint.maStyleName.isEmpty() )
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_STYLE_NAME, aLastPoint.maStyleName );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_STYLE_NAME, aLastPoint.maStyleName );
 
     if( aLastPoint.mnRepeat > 1 )
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_REPEATED,
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_REPEATED,
                             OUString::number( ( aLastPoint.mnRepeat ) ));
 
     for (auto& deletedLegendEntry : deletedLegendEntriesSeq)
     {
         if (nIndex == deletedLegendEntry)
         {
-            mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_HIDE_LEGEND, OUString::boolean(true));
+            mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_HIDE_LEGEND, OUString::boolean(true));
             break;
         }
     }
 
     exportCustomLabelPosition(aLastPoint.mCustomLabelPos);
-    SvXMLElementExport aPointElem( mrExport, XML_NAMESPACE_CHART, XML_DATA_POINT, true, true );
+    SvXMLElementExport aPointElem( mrExport, XmlNamespace::CHART, XML_DATA_POINT, true, true );
     exportCustomLabel(aLastPoint.mCustomLabelText);
 }
 
@@ -3478,12 +3478,12 @@ void SchXMLExportHelper_Impl::exportCustomLabel( const CustomLabelSeq & xCustomL
     if( xCustomLabel.getLength() < 1 )
         return; // nothing to export
 
-    SvXMLElementExport aLabelElem( mrExport, XML_NAMESPACE_CHART, XML_DATA_LABEL, true, true);
-    SvXMLElementExport aPara( mrExport, XML_NAMESPACE_TEXT, XML_P, true, false );
+    SvXMLElementExport aLabelElem( mrExport, XmlNamespace::CHART, XML_DATA_LABEL, true, true);
+    SvXMLElementExport aPara( mrExport, XmlNamespace::TEXT, XML_P, true, false );
     for( const Reference<chart2::XDataPointCustomLabelField>& label : xCustomLabel )
     {
         // TODO add style
-        SvXMLElementExport aSpan( mrExport, XML_NAMESPACE_TEXT, XML_SPAN, true, false);
+        SvXMLElementExport aSpan( mrExport, XmlNamespace::TEXT, XML_SPAN, true, false);
         mrExport.GetDocHandler()->characters(label->getString());
     }
 }
@@ -3495,10 +3495,10 @@ void SchXMLExportHelper_Impl::exportCustomLabelPosition( const chart2::RelativeP
 
     OUStringBuffer aCustomLabelPosString;
     ::sax::Converter::convertDouble(aCustomLabelPosString, xCustomLabelPosition.Primary);
-    mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_CUSTOM_LABEL_POS_X, aCustomLabelPosString.makeStringAndClear());
+    mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_CUSTOM_LABEL_POS_X, aCustomLabelPosString.makeStringAndClear());
 
     ::sax::Converter::convertDouble(aCustomLabelPosString, xCustomLabelPosition.Secondary);
-    mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_CUSTOM_LABEL_POS_Y, aCustomLabelPosString.makeStringAndClear());
+    mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_CUSTOM_LABEL_POS_Y, aCustomLabelPosString.makeStringAndClear());
 }
 
 void SchXMLExportHelper_Impl::addPosition( const awt::Point & rPosition )
@@ -3506,12 +3506,12 @@ void SchXMLExportHelper_Impl::addPosition( const awt::Point & rPosition )
     mrExport.GetMM100UnitConverter().convertMeasureToXML(
             msStringBuffer, rPosition.X );
     msString = msStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_X, msString );
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_X, msString );
 
     mrExport.GetMM100UnitConverter().convertMeasureToXML(
             msStringBuffer, rPosition.Y );
     msString = msStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_Y, msString );
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_Y, msString );
 }
 
 void SchXMLExportHelper_Impl::addPosition( const Reference< drawing::XShape >& xShape )
@@ -3525,12 +3525,12 @@ void SchXMLExportHelper_Impl::addSize( const awt::Size & rSize, bool bIsOOoNames
     mrExport.GetMM100UnitConverter().convertMeasureToXML(
             msStringBuffer, rSize.Width );
     msString = msStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute( bIsOOoNamespace ? XML_NAMESPACE_CHART_EXT : XML_NAMESPACE_SVG , XML_WIDTH,  msString );
+    mrExport.AddAttribute( bIsOOoNamespace ? XmlNamespace::CHART_EXT : XmlNamespace::SVG , XML_WIDTH,  msString );
 
     mrExport.GetMM100UnitConverter().convertMeasureToXML(
             msStringBuffer, rSize.Height);
     msString = msStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute( bIsOOoNamespace ? XML_NAMESPACE_CHART_EXT : XML_NAMESPACE_SVG, XML_HEIGHT, msString );
+    mrExport.AddAttribute( bIsOOoNamespace ? XmlNamespace::CHART_EXT : XmlNamespace::SVG, XML_HEIGHT, msString );
 }
 
 void SchXMLExportHelper_Impl::addSize( const Reference< drawing::XShape >& xShape )
@@ -3562,7 +3562,7 @@ void SchXMLExportHelper_Impl::AddAutoStyleAttribute( const std::vector< XMLPrope
     {
         SAL_WARN_IF( maAutoStyleNameQueue.empty(), "xmloff.chart", "Autostyle queue empty!" );
 
-        mrExport.AddAttribute( XML_NAMESPACE_CHART, XML_STYLE_NAME,  maAutoStyleNameQueue.front() );
+        mrExport.AddAttribute( XmlNamespace::CHART, XML_STYLE_NAME,  maAutoStyleNameQueue.front() );
         maAutoStyleNameQueue.pop();
     }
 }
@@ -3581,7 +3581,7 @@ SchXMLExport::SchXMLExport(const Reference<uno::XComponentContext>& xContext,
     , maExportHelper(new SchXMLExportHelper(*this, *maAutoStylePool))
 {
     if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
-        GetNamespaceMap_().Add( GetXMLToken(XML_NP_CHART_EXT), GetXMLToken(XML_N_CHART_EXT), XML_NAMESPACE_CHART_EXT);
+        GetNamespaceMap_().Add( GetXMLToken(XML_NP_CHART_EXT), GetXMLToken(XML_N_CHART_EXT), XmlNamespace::CHART_EXT);
 }
 
 SchXMLExport::~SchXMLExport()
diff --git a/xmloff/source/chart/SchXMLImport.cxx b/xmloff/source/chart/SchXMLImport.cxx
index e44e908c365c..7e53dc3f250e 100644
--- a/xmloff/source/chart/SchXMLImport.cxx
+++ b/xmloff/source/chart/SchXMLImport.cxx
@@ -85,7 +85,7 @@ SchXMLImportHelper::SchXMLImportHelper() :
 
 SvXMLImportContext* SchXMLImportHelper::CreateChartContext(
     SvXMLImport& rImport,
-    sal_uInt16 /*nPrefix*/, const OUString& rLocalName,
+    XmlNamespace /*nPrefix*/, const OUString& rLocalName,
     const Reference< frame::XModel >& rChartModel,
     const Reference< xml::sax::XAttributeList >& )
 {
@@ -128,10 +128,10 @@ const SvXMLTokenMap& SchXMLImportHelper::GetDocElemTokenMap()
     {
         static const SvXMLTokenMapEntry aDocElemTokenMap[] =
         {
-            { XML_NAMESPACE_OFFICE, XML_AUTOMATIC_STYLES,   XML_TOK_DOC_AUTOSTYLES  },
-            { XML_NAMESPACE_OFFICE, XML_STYLES,             XML_TOK_DOC_STYLES  },
-            { XML_NAMESPACE_OFFICE, XML_META,               XML_TOK_DOC_META    },
-            { XML_NAMESPACE_OFFICE, XML_BODY,               XML_TOK_DOC_BODY    },
+            { XmlNamespace::OFFICE, XML_AUTOMATIC_STYLES,   XML_TOK_DOC_AUTOSTYLES  },
+            { XmlNamespace::OFFICE, XML_STYLES,             XML_TOK_DOC_STYLES  },
+            { XmlNamespace::OFFICE, XML_META,               XML_TOK_DOC_META    },
+            { XmlNamespace::OFFICE, XML_BODY,               XML_TOK_DOC_BODY    },
             XML_TOKEN_MAP_END
         };
 
@@ -147,12 +147,12 @@ const SvXMLTokenMap& SchXMLImportHelper::GetTableElemTokenMap()
     {
         static const SvXMLTokenMapEntry aTableElemTokenMap[] =
     {
-        { XML_NAMESPACE_TABLE,  XML_TABLE_HEADER_COLUMNS,   XML_TOK_TABLE_HEADER_COLS   },
-        { XML_NAMESPACE_TABLE,  XML_TABLE_COLUMNS,          XML_TOK_TABLE_COLUMNS       },
-        { XML_NAMESPACE_TABLE,  XML_TABLE_COLUMN,           XML_TOK_TABLE_COLUMN        },
-        { XML_NAMESPACE_TABLE,  XML_TABLE_HEADER_ROWS,      XML_TOK_TABLE_HEADER_ROWS   },
-        { XML_NAMESPACE_TABLE,  XML_TABLE_ROWS,             XML_TOK_TABLE_ROWS          },
-        { XML_NAMESPACE_TABLE,  XML_TABLE_ROW,              XML_TOK_TABLE_ROW           },
+        { XmlNamespace::TABLE,  XML_TABLE_HEADER_COLUMNS,   XML_TOK_TABLE_HEADER_COLS   },
+        { XmlNamespace::TABLE,  XML_TABLE_COLUMNS,          XML_TOK_TABLE_COLUMNS       },
+        { XmlNamespace::TABLE,  XML_TABLE_COLUMN,           XML_TOK_TABLE_COLUMN        },
+        { XmlNamespace::TABLE,  XML_TABLE_HEADER_ROWS,      XML_TOK_TABLE_HEADER_ROWS   },
+        { XmlNamespace::TABLE,  XML_TABLE_ROWS,             XML_TOK_TABLE_ROWS          },
+        { XmlNamespace::TABLE,  XML_TABLE_ROW,              XML_TOK_TABLE_ROW           },
         XML_TOKEN_MAP_END
     };
 
@@ -168,11 +168,11 @@ const SvXMLTokenMap& SchXMLImportHelper::GetChartElemTokenMap()
     {
         static const SvXMLTokenMapEntry aChartElemTokenMap[] =
         {
-            { XML_NAMESPACE_CHART,  XML_PLOT_AREA,              XML_TOK_CHART_PLOT_AREA     },
-            { XML_NAMESPACE_CHART,  XML_TITLE,                  XML_TOK_CHART_TITLE         },
-            { XML_NAMESPACE_CHART,  XML_SUBTITLE,               XML_TOK_CHART_SUBTITLE      },
-            { XML_NAMESPACE_CHART,  XML_LEGEND,             XML_TOK_CHART_LEGEND        },
-            { XML_NAMESPACE_TABLE,  XML_TABLE,                  XML_TOK_CHART_TABLE         },
+            { XmlNamespace::CHART,  XML_PLOT_AREA,              XML_TOK_CHART_PLOT_AREA     },
+            { XmlNamespace::CHART,  XML_TITLE,                  XML_TOK_CHART_TITLE         },
+            { XmlNamespace::CHART,  XML_SUBTITLE,               XML_TOK_CHART_SUBTITLE      },
+            { XmlNamespace::CHART,  XML_LEGEND,             XML_TOK_CHART_LEGEND        },
+            { XmlNamespace::TABLE,  XML_TABLE,                  XML_TOK_CHART_TABLE         },
             XML_TOKEN_MAP_END
         };
 
@@ -188,16 +188,16 @@ const SvXMLTokenMap& SchXMLImportHelper::GetPlotAreaElemTokenMap()
     {
         static const SvXMLTokenMapEntry aPlotAreaElemTokenMap[] =
 {
-    { XML_NAMESPACE_CHART_EXT,  XML_COORDINATE_REGION,      XML_TOK_PA_COORDINATE_REGION_EXT },
-    { XML_NAMESPACE_CHART,  XML_COORDINATE_REGION,      XML_TOK_PA_COORDINATE_REGION },
-    { XML_NAMESPACE_CHART,  XML_AXIS,                   XML_TOK_PA_AXIS             },
-    { XML_NAMESPACE_CHART,  XML_SERIES,                 XML_TOK_PA_SERIES           },
-    { XML_NAMESPACE_CHART,  XML_WALL,                   XML_TOK_PA_WALL             },
-    { XML_NAMESPACE_CHART,  XML_FLOOR,                  XML_TOK_PA_FLOOR            },
-    { XML_NAMESPACE_DR3D,   XML_LIGHT,                  XML_TOK_PA_LIGHT_SOURCE     },
-    { XML_NAMESPACE_CHART,  XML_STOCK_GAIN_MARKER,      XML_TOK_PA_STOCK_GAIN       },
-    { XML_NAMESPACE_CHART,  XML_STOCK_LOSS_MARKER,      XML_TOK_PA_STOCK_LOSS       },
-    { XML_NAMESPACE_CHART,  XML_STOCK_RANGE_LINE,       XML_TOK_PA_STOCK_RANGE      },
+    { XmlNamespace::CHART_EXT,  XML_COORDINATE_REGION,      XML_TOK_PA_COORDINATE_REGION_EXT },
+    { XmlNamespace::CHART,  XML_COORDINATE_REGION,      XML_TOK_PA_COORDINATE_REGION },
+    { XmlNamespace::CHART,  XML_AXIS,                   XML_TOK_PA_AXIS             },
+    { XmlNamespace::CHART,  XML_SERIES,                 XML_TOK_PA_SERIES           },
+    { XmlNamespace::CHART,  XML_WALL,                   XML_TOK_PA_WALL             },
+    { XmlNamespace::CHART,  XML_FLOOR,                  XML_TOK_PA_FLOOR            },
+    { XmlNamespace::DR3D,   XML_LIGHT,                  XML_TOK_PA_LIGHT_SOURCE     },
+    { XmlNamespace::CHART,  XML_STOCK_GAIN_MARKER,      XML_TOK_PA_STOCK_GAIN       },
+    { XmlNamespace::CHART,  XML_STOCK_LOSS_MARKER,      XML_TOK_PA_STOCK_LOSS       },
+    { XmlNamespace::CHART,  XML_STOCK_RANGE_LINE,       XML_TOK_PA_STOCK_RANGE      },
     XML_TOKEN_MAP_END
 };
 
@@ -213,13 +213,13 @@ const SvXMLTokenMap& SchXMLImportHelper::GetSeriesElemTokenMap()
     {
         static const SvXMLTokenMapEntry aSeriesElemTokenMap[] =
 {
-    { XML_NAMESPACE_CHART,  XML_DATA_POINT,       XML_TOK_SERIES_DATA_POINT       },
-    { XML_NAMESPACE_CHART,  XML_DOMAIN,           XML_TOK_SERIES_DOMAIN           },
-    { XML_NAMESPACE_CHART,  XML_MEAN_VALUE,       XML_TOK_SERIES_MEAN_VALUE_LINE  },
-    { XML_NAMESPACE_CHART,  XML_REGRESSION_CURVE, XML_TOK_SERIES_REGRESSION_CURVE },
-    { XML_NAMESPACE_CHART,  XML_ERROR_INDICATOR,  XML_TOK_SERIES_ERROR_INDICATOR  },
-    { XML_NAMESPACE_LO_EXT, XML_PROPERTY_MAPPING, XML_TOK_SERIES_PROPERTY_MAPPING },
-    { XML_NAMESPACE_CHART, XML_DATA_LABEL,       XML_TOK_SERIES_DATA_LABEL       },
+    { XmlNamespace::CHART,  XML_DATA_POINT,       XML_TOK_SERIES_DATA_POINT       },
+    { XmlNamespace::CHART,  XML_DOMAIN,           XML_TOK_SERIES_DOMAIN           },
+    { XmlNamespace::CHART,  XML_MEAN_VALUE,       XML_TOK_SERIES_MEAN_VALUE_LINE  },
+    { XmlNamespace::CHART,  XML_REGRESSION_CURVE, XML_TOK_SERIES_REGRESSION_CURVE },
+    { XmlNamespace::CHART,  XML_ERROR_INDICATOR,  XML_TOK_SERIES_ERROR_INDICATOR  },
+    { XmlNamespace::LO_EXT, XML_PROPERTY_MAPPING, XML_TOK_SERIES_PROPERTY_MAPPING },
+    { XmlNamespace::CHART, XML_DATA_LABEL,       XML_TOK_SERIES_DATA_LABEL       },
     XML_TOKEN_MAP_END
 };
 
@@ -235,14 +235,14 @@ const SvXMLTokenMap& SchXMLImportHelper::GetChartAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aChartAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XLINK,  XML_HREF,                   XML_TOK_CHART_HREF          },
-    { XML_NAMESPACE_CHART,  XML_CLASS,                  XML_TOK_CHART_CLASS         },
-    { XML_NAMESPACE_SVG,    XML_WIDTH,                  XML_TOK_CHART_WIDTH         },
-    { XML_NAMESPACE_SVG,    XML_HEIGHT,                 XML_TOK_CHART_HEIGHT        },
-    { XML_NAMESPACE_CHART,  XML_STYLE_NAME,             XML_TOK_CHART_STYLE_NAME    },
-    { XML_NAMESPACE_CHART,  XML_COLUMN_MAPPING,         XML_TOK_CHART_COL_MAPPING   },
-    { XML_NAMESPACE_CHART,  XML_ROW_MAPPING,            XML_TOK_CHART_ROW_MAPPING   },
-    { XML_NAMESPACE_LO_EXT, XML_DATA_PILOT_SOURCE,      XML_TOK_CHART_DATA_PILOT_SOURCE },
+    { XmlNamespace::XLINK,  XML_HREF,                   XML_TOK_CHART_HREF          },
+    { XmlNamespace::CHART,  XML_CLASS,                  XML_TOK_CHART_CLASS         },
+    { XmlNamespace::SVG,    XML_WIDTH,                  XML_TOK_CHART_WIDTH         },
+    { XmlNamespace::SVG,    XML_HEIGHT,                 XML_TOK_CHART_HEIGHT        },
+    { XmlNamespace::CHART,  XML_STYLE_NAME,             XML_TOK_CHART_STYLE_NAME    },
+    { XmlNamespace::CHART,  XML_COLUMN_MAPPING,         XML_TOK_CHART_COL_MAPPING   },
+    { XmlNamespace::CHART,  XML_ROW_MAPPING,            XML_TOK_CHART_ROW_MAPPING   },
+    { XmlNamespace::LO_EXT, XML_DATA_PILOT_SOURCE,      XML_TOK_CHART_DATA_PILOT_SOURCE },
     XML_TOKEN_MAP_END
 };
 
@@ -258,24 +258,24 @@ const SvXMLTokenMap& SchXMLImportHelper::GetPlotAreaAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aPlotAreaAttrTokenMap[] =
 {
-    { XML_NAMESPACE_SVG,    XML_X,                      XML_TOK_PA_X                 },
-    { XML_NAMESPACE_SVG,    XML_Y,                      XML_TOK_PA_Y                 },
-    { XML_NAMESPACE_SVG,    XML_WIDTH,                  XML_TOK_PA_WIDTH             },
-    { XML_NAMESPACE_SVG,    XML_HEIGHT,                 XML_TOK_PA_HEIGHT            },
-    { XML_NAMESPACE_CHART,  XML_STYLE_NAME,             XML_TOK_PA_STYLE_NAME        },
-    { XML_NAMESPACE_TABLE,  XML_CELL_RANGE_ADDRESS,     XML_TOK_PA_CHART_ADDRESS     },
-    { XML_NAMESPACE_CHART,  XML_DATA_SOURCE_HAS_LABELS, XML_TOK_PA_DS_HAS_LABELS     },
-    { XML_NAMESPACE_DR3D,   XML_TRANSFORM,              XML_TOK_PA_TRANSFORM         },
-    { XML_NAMESPACE_DR3D,   XML_VRP,                    XML_TOK_PA_VRP               },
-    { XML_NAMESPACE_DR3D,   XML_VPN,                    XML_TOK_PA_VPN               },
-    { XML_NAMESPACE_DR3D,   XML_VUP,                    XML_TOK_PA_VUP               },
-    { XML_NAMESPACE_DR3D,   XML_PROJECTION,             XML_TOK_PA_PROJECTION        },
-    { XML_NAMESPACE_DR3D,   XML_DISTANCE,               XML_TOK_PA_DISTANCE          },
-    { XML_NAMESPACE_DR3D,   XML_FOCAL_LENGTH,           XML_TOK_PA_FOCAL_LENGTH      },
-    { XML_NAMESPACE_DR3D,   XML_SHADOW_SLANT,           XML_TOK_PA_SHADOW_SLANT      },
-    { XML_NAMESPACE_DR3D,   XML_SHADE_MODE,             XML_TOK_PA_SHADE_MODE        },
-    { XML_NAMESPACE_DR3D,   XML_AMBIENT_COLOR,          XML_TOK_PA_AMBIENT_COLOR     },
-    { XML_NAMESPACE_DR3D,   XML_LIGHTING_MODE,          XML_TOK_PA_LIGHTING_MODE     },
+    { XmlNamespace::SVG,    XML_X,                      XML_TOK_PA_X                 },
+    { XmlNamespace::SVG,    XML_Y,                      XML_TOK_PA_Y                 },
+    { XmlNamespace::SVG,    XML_WIDTH,                  XML_TOK_PA_WIDTH             },
+    { XmlNamespace::SVG,    XML_HEIGHT,                 XML_TOK_PA_HEIGHT            },
+    { XmlNamespace::CHART,  XML_STYLE_NAME,             XML_TOK_PA_STYLE_NAME        },
+    { XmlNamespace::TABLE,  XML_CELL_RANGE_ADDRESS,     XML_TOK_PA_CHART_ADDRESS     },
+    { XmlNamespace::CHART,  XML_DATA_SOURCE_HAS_LABELS, XML_TOK_PA_DS_HAS_LABELS     },
+    { XmlNamespace::DR3D,   XML_TRANSFORM,              XML_TOK_PA_TRANSFORM         },
+    { XmlNamespace::DR3D,   XML_VRP,                    XML_TOK_PA_VRP               },
+    { XmlNamespace::DR3D,   XML_VPN,                    XML_TOK_PA_VPN               },
+    { XmlNamespace::DR3D,   XML_VUP,                    XML_TOK_PA_VUP               },
+    { XmlNamespace::DR3D,   XML_PROJECTION,             XML_TOK_PA_PROJECTION        },
+    { XmlNamespace::DR3D,   XML_DISTANCE,               XML_TOK_PA_DISTANCE          },
+    { XmlNamespace::DR3D,   XML_FOCAL_LENGTH,           XML_TOK_PA_FOCAL_LENGTH      },
+    { XmlNamespace::DR3D,   XML_SHADOW_SLANT,           XML_TOK_PA_SHADOW_SLANT      },
+    { XmlNamespace::DR3D,   XML_SHADE_MODE,             XML_TOK_PA_SHADE_MODE        },
+    { XmlNamespace::DR3D,   XML_AMBIENT_COLOR,          XML_TOK_PA_AMBIENT_COLOR     },
+    { XmlNamespace::DR3D,   XML_LIGHTING_MODE,          XML_TOK_PA_LIGHTING_MODE     },
     XML_TOKEN_MAP_END
 };
 
@@ -291,8 +291,8 @@ const SvXMLTokenMap& SchXMLImportHelper::GetCellAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aCellAttrTokenMap[] =
 {
-    { XML_NAMESPACE_OFFICE, XML_VALUE_TYPE,             XML_TOK_CELL_VAL_TYPE       },
-    { XML_NAMESPACE_OFFICE, XML_VALUE,                  XML_TOK_CELL_VALUE          },
+    { XmlNamespace::OFFICE, XML_VALUE_TYPE,             XML_TOK_CELL_VAL_TYPE       },
+    { XmlNamespace::OFFICE, XML_VALUE,                  XML_TOK_CELL_VALUE          },
     XML_TOKEN_MAP_END
 };
 
@@ -308,13 +308,13 @@ const SvXMLTokenMap& SchXMLImportHelper::GetSeriesAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aSeriesAttrTokenMap[] =
 {
-    { XML_NAMESPACE_CHART,  XML_VALUES_CELL_RANGE_ADDRESS,  XML_TOK_SERIES_CELL_RANGE    },
-    { XML_NAMESPACE_CHART,  XML_LABEL_CELL_ADDRESS,         XML_TOK_SERIES_LABEL_ADDRESS },
-    { XML_NAMESPACE_LO_EXT, XML_LABEL_STRING,               XML_TOK_SERIES_LABEL_STRING  },
-    { XML_NAMESPACE_CHART,  XML_ATTACHED_AXIS,              XML_TOK_SERIES_ATTACHED_AXIS },
-    { XML_NAMESPACE_CHART,  XML_STYLE_NAME,                 XML_TOK_SERIES_STYLE_NAME    },
-    { XML_NAMESPACE_CHART,  XML_CLASS,                      XML_TOK_SERIES_CHART_CLASS   },
-    { XML_NAMESPACE_LO_EXT, XML_HIDE_LEGEND,                XML_TOK_SERIES_HIDE_LEGEND   },
+    { XmlNamespace::CHART,  XML_VALUES_CELL_RANGE_ADDRESS,  XML_TOK_SERIES_CELL_RANGE    },
+    { XmlNamespace::CHART,  XML_LABEL_CELL_ADDRESS,         XML_TOK_SERIES_LABEL_ADDRESS },
+    { XmlNamespace::LO_EXT, XML_LABEL_STRING,               XML_TOK_SERIES_LABEL_STRING  },
+    { XmlNamespace::CHART,  XML_ATTACHED_AXIS,              XML_TOK_SERIES_ATTACHED_AXIS },
+    { XmlNamespace::CHART,  XML_STYLE_NAME,                 XML_TOK_SERIES_STYLE_NAME    },
+    { XmlNamespace::CHART,  XML_CLASS,                      XML_TOK_SERIES_CHART_CLASS   },
+    { XmlNamespace::LO_EXT, XML_HIDE_LEGEND,                XML_TOK_SERIES_HIDE_LEGEND   },
     XML_TOKEN_MAP_END
 };
 
@@ -330,8 +330,8 @@ const SvXMLTokenMap& SchXMLImportHelper::GetPropMappingAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aPropMappingAttrTokenMap[] =
         {
-            { XML_NAMESPACE_LO_EXT, XML_PROPERTY, XML_TOK_PROPERTY_MAPPING_PROPERTY },
-            { XML_NAMESPACE_LO_EXT, XML_CELL_RANGE_ADDRESS, XML_TOK_PROPERTY_MAPPING_RANGE },
+            { XmlNamespace::LO_EXT, XML_PROPERTY, XML_TOK_PROPERTY_MAPPING_PROPERTY },
+            { XmlNamespace::LO_EXT, XML_CELL_RANGE_ADDRESS, XML_TOK_PROPERTY_MAPPING_RANGE },
             XML_TOKEN_MAP_END
         };
 
@@ -347,11 +347,11 @@ const SvXMLTokenMap& SchXMLImportHelper::GetRegEquationAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aRegressionEquationAttrTokenMap[] =
 {
-    { XML_NAMESPACE_CHART,  XML_STYLE_NAME,             XML_TOK_REGEQ_STYLE_NAME         },
-    { XML_NAMESPACE_CHART,  XML_DISPLAY_EQUATION,       XML_TOK_REGEQ_DISPLAY_EQUATION   },
-    { XML_NAMESPACE_CHART,  XML_DISPLAY_R_SQUARE,       XML_TOK_REGEQ_DISPLAY_R_SQUARE   },
-    { XML_NAMESPACE_SVG,    XML_X,                      XML_TOK_REGEQ_POS_X              },
-    { XML_NAMESPACE_SVG,    XML_Y,                      XML_TOK_REGEQ_POS_Y              },
+    { XmlNamespace::CHART,  XML_STYLE_NAME,             XML_TOK_REGEQ_STYLE_NAME         },
+    { XmlNamespace::CHART,  XML_DISPLAY_EQUATION,       XML_TOK_REGEQ_DISPLAY_EQUATION   },
+    { XmlNamespace::CHART,  XML_DISPLAY_R_SQUARE,       XML_TOK_REGEQ_DISPLAY_R_SQUARE   },
+    { XmlNamespace::SVG,    XML_X,                      XML_TOK_REGEQ_POS_X              },
+    { XmlNamespace::SVG,    XML_Y,                      XML_TOK_REGEQ_POS_Y              },
     XML_TOKEN_MAP_END
 };
 
@@ -484,8 +484,8 @@ SchXMLImport::SchXMLImport(
     SvXMLImport( xContext, implementationName, nImportFlags ),
     maImportHelper(new SchXMLImportHelper)
 {
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK );
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_CHART_EXT), GetXMLToken(XML_N_CHART_EXT), XML_NAMESPACE_CHART_EXT);
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_CHART_EXT), GetXMLToken(XML_N_CHART_EXT), XmlNamespace::CHART_EXT);
 }
 
 SchXMLImport::~SchXMLImport() throw ()
diff --git a/xmloff/source/chart/SchXMLLegendContext.cxx b/xmloff/source/chart/SchXMLLegendContext.cxx
index 3427fa3683a7..0931dc17ba92 100644
--- a/xmloff/source/chart/SchXMLLegendContext.cxx
+++ b/xmloff/source/chart/SchXMLLegendContext.cxx
@@ -54,17 +54,17 @@ enum LegendAttributeTokens
 
 const SvXMLTokenMapEntry aLegendAttributeTokenMap[] =
 {
-    { XML_NAMESPACE_CHART,      XML_LEGEND_POSITION,    XML_TOK_LEGEND_POSITION     },
-    { XML_NAMESPACE_LO_EXT,     XML_OVERLAY,            XML_TOK_LEGEND_OVERLAY      },
-    { XML_NAMESPACE_SVG,        XML_X,                  XML_TOK_LEGEND_X            },
-    { XML_NAMESPACE_SVG,        XML_Y,                  XML_TOK_LEGEND_Y            },
-    { XML_NAMESPACE_CHART,      XML_STYLE_NAME,         XML_TOK_LEGEND_STYLE_NAME   },
-    { XML_NAMESPACE_STYLE,      XML_LEGEND_EXPANSION,   XML_TOK_LEGEND_EXPANSION    },
-    { XML_NAMESPACE_STYLE,      XML_LEGEND_EXPANSION_ASPECT_RATIO,   XML_TOK_LEGEND_EXPANSION_ASPECT_RATIO    },
-    { XML_NAMESPACE_SVG,        XML_WIDTH,              XML_TOK_LEGEND_WIDTH        },
-    { XML_NAMESPACE_CHART_EXT,  XML_WIDTH,              XML_TOK_LEGEND_WIDTH_EXT    },
-    { XML_NAMESPACE_SVG,        XML_HEIGHT,             XML_TOK_LEGEND_HEIGHT       },
-    { XML_NAMESPACE_CHART_EXT,  XML_HEIGHT,             XML_TOK_LEGEND_HEIGHT_EXT   },
+    { XmlNamespace::CHART,      XML_LEGEND_POSITION,    XML_TOK_LEGEND_POSITION     },
+    { XmlNamespace::LO_EXT,     XML_OVERLAY,            XML_TOK_LEGEND_OVERLAY      },
+    { XmlNamespace::SVG,        XML_X,                  XML_TOK_LEGEND_X            },
+    { XmlNamespace::SVG,        XML_Y,                  XML_TOK_LEGEND_Y            },
+    { XmlNamespace::CHART,      XML_STYLE_NAME,         XML_TOK_LEGEND_STYLE_NAME   },
+    { XmlNamespace::STYLE,      XML_LEGEND_EXPANSION,   XML_TOK_LEGEND_EXPANSION    },
+    { XmlNamespace::STYLE,      XML_LEGEND_EXPANSION_ASPECT_RATIO,   XML_TOK_LEGEND_EXPANSION_ASPECT_RATIO    },
+    { XmlNamespace::SVG,        XML_WIDTH,              XML_TOK_LEGEND_WIDTH        },
+    { XmlNamespace::CHART_EXT,  XML_WIDTH,              XML_TOK_LEGEND_WIDTH_EXT    },
+    { XmlNamespace::SVG,        XML_HEIGHT,             XML_TOK_LEGEND_HEIGHT       },
+    { XmlNamespace::CHART_EXT,  XML_HEIGHT,             XML_TOK_LEGEND_HEIGHT_EXT   },
     XML_TOKEN_MAP_END
 };
 
@@ -81,7 +81,7 @@ struct theLegendAttributeTokenMap : public rtl::Static< LegendAttributeTokenMap,
 }//end anonymous namespace
 
 SchXMLLegendContext::SchXMLLegendContext( SchXMLImportHelper& rImpHelper, SvXMLImport& rImport, const OUString& rLocalName ) :
-    SvXMLImportContext( rImport, XML_NAMESPACE_CHART, rLocalName ),
+    SvXMLImportContext( rImport, XmlNamespace::CHART, rLocalName ),
     mrImportHelper( rImpHelper )
 {
 }
@@ -136,7 +136,7 @@ void SchXMLLegendContext::StartElement( const uno::Reference< xml::sax::XAttribu
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
diff --git a/xmloff/source/chart/SchXMLParagraphContext.cxx b/xmloff/source/chart/SchXMLParagraphContext.cxx
index 8e56c0489e40..7300cd28fd29 100644
--- a/xmloff/source/chart/SchXMLParagraphContext.cxx
+++ b/xmloff/source/chart/SchXMLParagraphContext.cxx
@@ -34,7 +34,7 @@ SchXMLParagraphContext::SchXMLParagraphContext( SvXMLImport& rImport,
                                                 const OUString& rLocalName,
                                                 OUString& rText,
                                                 OUString * pOutId /* = 0 */ ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_TEXT, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::TEXT, rLocalName ),
         mrText( rText ),
         mpId( pOutId )
 {
@@ -57,16 +57,16 @@ void SchXMLParagraphContext::StartElement( const uno::Reference< xml::sax::XAttr
     {
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         if (IsXMLToken(aLocalName, XML_ID))
         {
-            if (nPrefix == XML_NAMESPACE_XML)
+            if (nPrefix == XmlNamespace::XML)
             {
                 (*mpId) = xAttrList->getValueByIndex( i );
                 bHaveXmlId = true;
             }
-            if (nPrefix == XML_NAMESPACE_TEXT)
+            if (nPrefix == XmlNamespace::TEXT)
             {   // text:id shall be ignored if xml:id exists
                 if (!bHaveXmlId)
                 {
@@ -83,11 +83,11 @@ void SchXMLParagraphContext::EndElement()
 }
 
 SvXMLImportContextRef SchXMLParagraphContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
-    if( nPrefix == XML_NAMESPACE_TEXT )
+    if( nPrefix == XmlNamespace::TEXT )
     {
         if( rLocalName == ::xmloff::token::GetXMLToken( ::xmloff::token::XML_TAB_STOP ))
         {
diff --git a/xmloff/source/chart/SchXMLParagraphContext.hxx b/xmloff/source/chart/SchXMLParagraphContext.hxx
index 655e7e33bd08..f11bac2e35bb 100644
--- a/xmloff/source/chart/SchXMLParagraphContext.hxx
+++ b/xmloff/source/chart/SchXMLParagraphContext.hxx
@@ -44,7 +44,7 @@ public:
     virtual void EndElement() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
diff --git a/xmloff/source/chart/SchXMLPlotAreaContext.cxx b/xmloff/source/chart/SchXMLPlotAreaContext.cxx
index 1e32ac3d4d95..d3b8be6a2aec 100644
--- a/xmloff/source/chart/SchXMLPlotAreaContext.cxx
+++ b/xmloff/source/chart/SchXMLPlotAreaContext.cxx
@@ -132,7 +132,7 @@ SchXMLPlotAreaContext::SchXMLPlotAreaContext(
     const OUString& aChartTypeServiceName,
     tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
     const awt::Size & rChartSize ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_CHART, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::CHART, rLocalName ),
         mrImportHelper( rImpHelper ),
         mrCategoriesAddress( rCategoriesAddress ),
         mrSeriesDefaultsAndStyles( rSeriesDefaultsAndStyles ),
@@ -218,7 +218,7 @@ void SchXMLPlotAreaContext::StartElement( const uno::Reference< xml::sax::XAttri
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
@@ -400,7 +400,7 @@ void SchXMLPlotAreaContext::StartElement( const uno::Reference< xml::sax::XAttri
 }
 
 SvXMLImportContextRef SchXMLPlotAreaContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& xAttrList )
 {
@@ -584,7 +584,7 @@ void SchXMLPlotAreaContext::EndElement()
 }
 
 SchXMLDataLabelSpanContext::SchXMLDataLabelSpanContext( SvXMLImport& rImport, const OUString& rLocalName, ::std::vector<OUString>& rLabels):
-    SvXMLImportContext( rImport, XML_NAMESPACE_TEXT, rLocalName),
+    SvXMLImportContext( rImport, XmlNamespace::TEXT, rLocalName),
     mrLabels(rLabels)
 {
 }
@@ -600,35 +600,35 @@ void SchXMLDataLabelSpanContext::EndElement()
 }
 
 SchXMLDataLabelParaContext::SchXMLDataLabelParaContext( SvXMLImport& rImport, const OUString& rLocalName, ::std::vector<OUString>& rLabels):
-    SvXMLImportContext( rImport, XML_NAMESPACE_TEXT, rLocalName),
+    SvXMLImportContext( rImport, XmlNamespace::TEXT, rLocalName),
     mrLabels(rLabels)
 {
 }
 
 SvXMLImportContextRef SchXMLDataLabelParaContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& /*xAttrList*/ )
 {
     SvXMLImportContextRef xContext;
-    if ( IsXMLToken( rLocalName, XML_SPAN ) && nPrefix == XML_NAMESPACE_TEXT )
+    if ( IsXMLToken( rLocalName, XML_SPAN ) && nPrefix == XmlNamespace::TEXT )
         xContext = new SchXMLDataLabelSpanContext(GetImport(), rLocalName, mrLabels);
     return xContext;
 }
 
 SchXMLDataLabelContext::SchXMLDataLabelContext( SvXMLImport& rImport, const OUString& rLocalName, ::std::vector<OUString>& rLabels):
-    SvXMLImportContext( rImport, XML_NAMESPACE_CHART, rLocalName),
+    SvXMLImportContext( rImport, XmlNamespace::CHART, rLocalName),
     mrLabels(rLabels)
 {
 }
 
 SvXMLImportContextRef SchXMLDataLabelContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& /*xAttrList*/ )
 {
     SvXMLImportContextRef xContext;
-    if ( IsXMLToken( rLocalName, XML_P ) && nPrefix == XML_NAMESPACE_TEXT )
+    if ( IsXMLToken( rLocalName, XML_P ) && nPrefix == XmlNamespace::TEXT )
         xContext = new SchXMLDataLabelParaContext(GetImport(), rLocalName, mrLabels);
 
     return xContext;
@@ -641,7 +641,7 @@ SchXMLDataPointContext::SchXMLDataPointContext(  SchXMLImportHelper& rImportHelp
                                                  const css::uno::Reference< css::chart2::XDataSeries >& xSeries,
                                                  sal_Int32& rIndex,
                                                  bool bSymbolSizeForSeriesIsMissingInFile ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_CHART, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::CHART, rLocalName ),
         mrImportHelper( rImportHelper ),
         mrStyleVector( rStyleVector ),
         mrIndex( rIndex ),
@@ -651,7 +651,7 @@ SchXMLDataPointContext::SchXMLDataPointContext(  SchXMLImportHelper& rImportHelp
 }
 
 SvXMLImportContextRef SchXMLDataPointContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& /*xAttrList*/ )
 {
@@ -684,9 +684,9 @@ void SchXMLDataPointContext::StartElement( const uno::Reference< xml::sax::XAttr
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         bool bHideLegend = false;
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_CHART )
+        if( nPrefix == XmlNamespace::CHART )
         {
             if( IsXMLToken( aLocalName, XML_STYLE_NAME ) )
             {
@@ -699,7 +699,7 @@ void SchXMLDataPointContext::StartElement( const uno::Reference< xml::sax::XAttr
                 mDataPoint.m_nPointRepeat = nRepeat;
             }
         }
-        else if( nPrefix == XML_NAMESPACE_LO_EXT)
+        else if( nPrefix == XmlNamespace::LO_EXT)
         {
             // Deprecated. New documents use the chart:data-label element
             // instead in order to store custom label text.
@@ -774,9 +774,9 @@ bool SchXMLPositionAttributesHelper::isAutomatic() const
     return m_bAutoSize || m_bAutoPosition;
 }
 
-void SchXMLPositionAttributesHelper::readPositioningAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
+void SchXMLPositionAttributesHelper::readPositioningAttribute( XmlNamespace nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_SVG != nPrefix )
+    if( XmlNamespace::SVG != nPrefix )
         return;
 
     if( IsXMLToken( rLocalName, XML_X ) )
@@ -819,7 +819,7 @@ void SchXMLPositionAttributesHelper::readAutomaticPositioningProperties( XMLProp
 
 SchXMLCoordinateRegionContext::SchXMLCoordinateRegionContext(
           SvXMLImport& rImport
-        , sal_uInt16 nPrefix
+        , XmlNamespace nPrefix
         , const OUString& rLocalName
         , SchXMLPositionAttributesHelper& rPositioning )
         : SvXMLImportContext( rImport, nPrefix, rLocalName )
@@ -841,7 +841,7 @@ void SchXMLCoordinateRegionContext::StartElement( const uno::Reference< xml::sax
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
         m_rPositioning.readPositioningAttribute( nPrefix, aLocalName, aValue );
     }
 }
@@ -849,7 +849,7 @@ void SchXMLCoordinateRegionContext::StartElement( const uno::Reference< xml::sax
 SchXMLWallFloorContext::SchXMLWallFloorContext(
     SchXMLImportHelper& rImpHelper,
     SvXMLImport& rImport,
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     uno::Reference< chart::XDiagram > const & xDiagram,
     ContextType eContextType ) :
@@ -876,9 +876,9 @@ void SchXMLWallFloorContext::StartElement( const uno::Reference< xml::sax::XAttr
     {
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_CHART &&
+        if( nPrefix == XmlNamespace::CHART &&
             IsXMLToken( aLocalName, XML_STYLE_NAME ) )
         {
             sAutoStyleName = xAttrList->getValueByIndex( i );
@@ -897,7 +897,7 @@ void SchXMLWallFloorContext::StartElement( const uno::Reference< xml::sax::XAttr
 SchXMLStockContext::SchXMLStockContext(
     SchXMLImportHelper& rImpHelper,
     SvXMLImport& rImport,
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     uno::Reference< chart::XDiagram > const & xDiagram,
     ContextType eContextType ) :
@@ -924,9 +924,9 @@ void SchXMLStockContext::StartElement( const uno::Reference< xml::sax::XAttribut
     {
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_CHART &&
+        if( nPrefix == XmlNamespace::CHART &&
             IsXMLToken( aLocalName, XML_STYLE_NAME ) )
         {
             sAutoStyleName = xAttrList->getValueByIndex( i );
@@ -1016,7 +1016,7 @@ static void lcl_setErrorBarSequence ( const uno::Reference< chart2::XChartDocume
 SchXMLStatisticsObjectContext::SchXMLStatisticsObjectContext(
     SchXMLImportHelper& rImpHelper,
     SvXMLImport& rImport,
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const OUString &rSeriesStyleName,
     ::std::vector< DataRowPointStyle >& rStyleVector,
@@ -1177,9 +1177,9 @@ void SchXMLStatisticsObjectContext::StartElement( const uno::Reference< xml::sax
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
 
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_CHART )
+        if( nPrefix == XmlNamespace::CHART )
         {
             if( IsXMLToken( aLocalName, XML_STYLE_NAME ) )
                 sAutoStyleName = xAttrList->getValueByIndex( i );
diff --git a/xmloff/source/chart/SchXMLPlotAreaContext.hxx b/xmloff/source/chart/SchXMLPlotAreaContext.hxx
index 1541c4ef6788..37090d3a0940 100644
--- a/xmloff/source/chart/SchXMLPlotAreaContext.hxx
+++ b/xmloff/source/chart/SchXMLPlotAreaContext.hxx
@@ -60,7 +60,7 @@ public:
     explicit SchXMLPositionAttributesHelper( SvXMLImport& rImporter );
     ~SchXMLPositionAttributesHelper();
 
-    void readPositioningAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue );
+    void readPositioningAttribute( XmlNamespace nPrefix, const OUString& rLocalName, const OUString& rValue );
     void readAutomaticPositioningProperties( XMLPropStyleContext const * pPropStyleContext, const SvXMLStylesContext* pStylesCtxt );
 
     bool hasPosSize() const;
@@ -102,7 +102,7 @@ public:
 
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void EndElement() override;
@@ -157,7 +157,7 @@ private:
 public:
     SchXMLDataLabelParaContext( SvXMLImport& rImport, const OUString& rLocalName, ::std::vector<OUString>& rLabels);
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 };
@@ -169,7 +169,7 @@ private:
 public:
     SchXMLDataLabelContext( SvXMLImport& rImport, const OUString& rLocalName, ::std::vector<OUString>& rLabels);
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 };
@@ -195,7 +195,7 @@ public:
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void EndElement() override;
@@ -206,7 +206,7 @@ class SchXMLCoordinateRegionContext : public SvXMLImportContext
 public:
     SchXMLCoordinateRegionContext(
             SvXMLImport& rImport
-            , sal_uInt16 nPrefix
+            , XmlNamespace nPrefix
             , const OUString& rLocalName
             , SchXMLPositionAttributesHelper& rPositioning );
     virtual ~SchXMLCoordinateRegionContext() override;
@@ -233,7 +233,7 @@ private:
 public:
     SchXMLWallFloorContext( SchXMLImportHelper& rImportHelper,
                             SvXMLImport& rImport,
-                            sal_uInt16 nPrefix,
+                            XmlNamespace nPrefix,
                             const OUString& rLocalName,
                             css::uno::Reference< css::chart::XDiagram > const & xDiagram,
                             ContextType eContextType );
@@ -259,7 +259,7 @@ private:
 public:
     SchXMLStockContext( SchXMLImportHelper& rImportHelper,
                         SvXMLImport& rImport,
-                        sal_uInt16 nPrefix,
+                        XmlNamespace nPrefix,
                         const OUString& rLocalName,
                         css::uno::Reference< css::chart::XDiagram > const & xDiagram,
                         ContextType eContextType );
@@ -279,7 +279,7 @@ public:
     SchXMLStatisticsObjectContext(
         SchXMLImportHelper& rImportHelper,
         SvXMLImport& rImport,
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const OUString &rSeriesStyleName,
         ::std::vector< DataRowPointStyle >& rStyleVector,
diff --git a/xmloff/source/chart/SchXMLPropertyMappingContext.cxx b/xmloff/source/chart/SchXMLPropertyMappingContext.cxx
index 688cfd752a1e..ef75e0a1ea01 100644
--- a/xmloff/source/chart/SchXMLPropertyMappingContext.cxx
+++ b/xmloff/source/chart/SchXMLPropertyMappingContext.cxx
@@ -65,7 +65,7 @@ SchXMLPropertyMappingContext::SchXMLPropertyMappingContext( SchXMLImportHelper&
         tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
         uno::Reference<
         chart2::XDataSeries > const & xSeries ):
-    SvXMLImportContext( rImport, XML_NAMESPACE_LO_EXT, rLocalName ),
+    SvXMLImportContext( rImport, XmlNamespace::LO_EXT, rLocalName ),
     mrImportHelper( rImpHelper ),
     mxDataSeries(xSeries),
     mrLSequencesPerIndex(rLSequencesPerIndex)
@@ -90,7 +90,7 @@ void SchXMLPropertyMappingContext::StartElement(const uno::Reference< xml::sax::
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
diff --git a/xmloff/source/chart/SchXMLRegressionCurveObjectContext.cxx b/xmloff/source/chart/SchXMLRegressionCurveObjectContext.cxx
index 022a1f0ba6cd..6ad9ae21887e 100644
--- a/xmloff/source/chart/SchXMLRegressionCurveObjectContext.cxx
+++ b/xmloff/source/chart/SchXMLRegressionCurveObjectContext.cxx
@@ -42,7 +42,7 @@ using namespace xmloff::token;
 SchXMLRegressionCurveObjectContext::SchXMLRegressionCurveObjectContext(
                                         SchXMLImportHelper& rImpHelper,
                                         SvXMLImport& rImport,
-                                        sal_uInt16 nPrefix,
+                                        XmlNamespace nPrefix,
                                         const OUString& rLocalName,
                                         std::vector< RegressionStyle >& rRegressionStyleVector,
                                         const css::uno::Reference<
@@ -70,9 +70,9 @@ void SchXMLRegressionCurveObjectContext::StartElement( const uno::Reference< xml
         OUString sAttributeName = xAttributeList->getNameByIndex( i );
         OUString aLocalName;
 
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttributeName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttributeName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_CHART )
+        if( nPrefix == XmlNamespace::CHART )
         {
             if( IsXMLToken( aLocalName, XML_STYLE_NAME ) )
             {
@@ -86,13 +86,13 @@ void SchXMLRegressionCurveObjectContext::StartElement( const uno::Reference< xml
 }
 
 SvXMLImportContextRef SchXMLRegressionCurveObjectContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& /*xAttrList*/ )
 {
     SvXMLImportContextRef xContext;
 
-    if( nPrefix == XML_NAMESPACE_CHART && IsXMLToken( rLocalName, XML_EQUATION ) )
+    if( nPrefix == XmlNamespace::CHART && IsXMLToken( rLocalName, XML_EQUATION ) )
     {
         xContext = new SchXMLEquationContext(
             mrImportHelper, GetImport(), nPrefix, rLocalName, maChartSize, mrRegressionStyleVector.back());
@@ -104,7 +104,7 @@ SvXMLImportContextRef SchXMLRegressionCurveObjectContext::CreateChildContext(
 SchXMLEquationContext::SchXMLEquationContext(
     SchXMLImportHelper& rImpHelper,
     SvXMLImport& rImport,
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const awt::Size& rChartSize,
     RegressionStyle& rRegressionStyle ) :
@@ -137,7 +137,7 @@ void SchXMLEquationContext::StartElement( const uno::Reference< xml::sax::XAttri
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = rImport.GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = rImport.GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
diff --git a/xmloff/source/chart/SchXMLRegressionCurveObjectContext.hxx b/xmloff/source/chart/SchXMLRegressionCurveObjectContext.hxx
index c9f13f4e53d6..73c5e0c7c65f 100644
--- a/xmloff/source/chart/SchXMLRegressionCurveObjectContext.hxx
+++ b/xmloff/source/chart/SchXMLRegressionCurveObjectContext.hxx
@@ -31,7 +31,7 @@ public:
     SchXMLRegressionCurveObjectContext(
         SchXMLImportHelper& rImportHelper,
         SvXMLImport& rImport,
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         std::vector< RegressionStyle >& rRegressionStyleVector,
         const css::uno::Reference< css::chart2::XDataSeries >& xSeries,
@@ -41,7 +41,7 @@ public:
 
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
@@ -59,7 +59,7 @@ public:
     SchXMLEquationContext(
         SchXMLImportHelper& rImportHelper,
         SvXMLImport& rImport,
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::awt::Size & rChartSize,
         RegressionStyle & rRegressionStyle );
diff --git a/xmloff/source/chart/SchXMLSeries2Context.cxx b/xmloff/source/chart/SchXMLSeries2Context.cxx
index 266bc5f65ce7..cc5044c0454d 100644
--- a/xmloff/source/chart/SchXMLSeries2Context.cxx
+++ b/xmloff/source/chart/SchXMLSeries2Context.cxx
@@ -70,7 +70,7 @@ private:
 
 public:
     SchXMLDomain2Context( SvXMLImport& rImport,
-                          sal_uInt16 nPrefix,
+                          XmlNamespace nPrefix,
                           const OUString& rLocalName,
                           ::std::vector< OUString > & rAddresses );
     virtual void StartElement( const Reference< xml::sax::XAttributeList >& xAttrList ) override;
@@ -78,7 +78,7 @@ public:
 
 SchXMLDomain2Context::SchXMLDomain2Context(
     SvXMLImport& rImport,
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     ::std::vector< OUString > & rAddresses ) :
         SvXMLImportContext( rImport, nPrefix, rLocalName ),
@@ -94,9 +94,9 @@ void SchXMLDomain2Context::StartElement( const uno::Reference< xml::sax::XAttrib
     {
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_TABLE &&
+        if( nPrefix == XmlNamespace::TABLE &&
             IsXMLToken( aLocalName, XML_CELL_RANGE_ADDRESS ) )
         {
             mrAddresses.push_back( xAttrList->getValueByIndex( i ));
@@ -271,7 +271,7 @@ SchXMLSeries2Context::SchXMLSeries2Context(
     tSchXMLLSequencesPerIndex & rLSequencesPerIndex,
     bool& rGlobalChartTypeUsedBySeries,
     const awt::Size & rChartSize ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_CHART, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::CHART, rLocalName ),
         mrImportHelper( rImpHelper ),
         mxNewDoc( xNewDoc ),
         mrAxes( rAxes ),
@@ -320,7 +320,7 @@ void SchXMLSeries2Context::StartElement( const uno::Reference< xml::sax::XAttrib
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         OUString aValue = xAttrList->getValueByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
@@ -353,10 +353,10 @@ void SchXMLSeries2Context::StartElement( const uno::Reference< xml::sax::XAttrib
             case XML_TOK_SERIES_CHART_CLASS:
                 {
                     OUString aClassName;
-                    sal_uInt16 nClassPrefix =
+                    XmlNamespace nClassPrefix =
                         GetImport().GetNamespaceMap().GetKeyByAttrValueQName(
                             aValue, &aClassName );
-                    if( XML_NAMESPACE_CHART == nClassPrefix )
+                    if( XmlNamespace::CHART == nClassPrefix )
                         maSeriesChartTypeName = SchXMLTools::GetChartTypeByClassName( aClassName, false /* bUseOldNames */ );
 
                     if( maSeriesChartTypeName.isEmpty())
@@ -664,7 +664,7 @@ void SchXMLSeries2Context::EndElement()
 }
 
 SvXMLImportContextRef SchXMLSeries2Context::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >&  )
 {
diff --git a/xmloff/source/chart/SchXMLSeries2Context.hxx b/xmloff/source/chart/SchXMLSeries2Context.hxx
index 7f825974e9a6..7bf6b14d19a3 100644
--- a/xmloff/source/chart/SchXMLSeries2Context.hxx
+++ b/xmloff/source/chart/SchXMLSeries2Context.hxx
@@ -86,7 +86,7 @@ public:
 
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void EndElement() override;
diff --git a/xmloff/source/chart/SchXMLTableContext.cxx b/xmloff/source/chart/SchXMLTableContext.cxx
index 16f656e24108..41da6e4c0bfa 100644
--- a/xmloff/source/chart/SchXMLTableContext.cxx
+++ b/xmloff/source/chart/SchXMLTableContext.cxx
@@ -198,7 +198,7 @@ SchXMLTableContext::SchXMLTableContext( SchXMLImportHelper& rImpHelper,
                                         SvXMLImport& rImport,
                                         const OUString& rLName,
                                         SchXMLTable& aTable ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_TABLE, rLName ),
+        SvXMLImportContext( rImport, XmlNamespace::TABLE, rLName ),
         mrImportHelper( rImpHelper ),
         mrTable( aTable ),
         mbHasRowPermutation( false ),
@@ -215,7 +215,7 @@ SchXMLTableContext::~SchXMLTableContext()
 }
 
 SvXMLImportContextRef SchXMLTableContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
@@ -259,8 +259,8 @@ void SchXMLTableContext::StartElement( const uno::Reference< xml::sax::XAttribut
     {
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
-        if ( nPrefix == XML_NAMESPACE_TABLE )
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        if ( nPrefix == XmlNamespace::TABLE )
         {
             if ( IsXMLToken( aLocalName, XML_NAME ) )
             {
@@ -388,7 +388,7 @@ SchXMLTableColumnsContext::SchXMLTableColumnsContext(
     SvXMLImport& rImport,
     const OUString& rLocalName,
     SchXMLTable& aTable ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_TABLE, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::TABLE, rLocalName ),
         mrTable( aTable )
 {
 }
@@ -398,13 +398,13 @@ SchXMLTableColumnsContext::~SchXMLTableColumnsContext()
 }
 
 SvXMLImportContextRef SchXMLTableColumnsContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
     SvXMLImportContext* pContext = nullptr;
 
-    if( nPrefix == XML_NAMESPACE_TABLE &&
+    if( nPrefix == XmlNamespace::TABLE &&
         IsXMLToken( rLocalName, XML_TABLE_COLUMN ) )
     {
         pContext = new SchXMLTableColumnContext( GetImport(), rLocalName, mrTable );
@@ -418,7 +418,7 @@ SchXMLTableColumnContext::SchXMLTableColumnContext(
     SvXMLImport& rImport,
     const OUString& rLocalName,
     SchXMLTable& aTable ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_TABLE, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::TABLE, rLocalName ),
         mrTable( aTable )
 {
 }
@@ -434,16 +434,16 @@ void SchXMLTableColumnContext::StartElement( const uno::Reference< xml::sax::XAt
     {
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_TABLE &&
+        if( nPrefix == XmlNamespace::TABLE &&
             IsXMLToken( aLocalName, XML_NUMBER_COLUMNS_REPEATED ) )
         {
             OUString aValue = xAttrList->getValueByIndex( i );
             if( !aValue.isEmpty())
                 nRepeated = aValue.toInt32();
         }
-        else if( nPrefix == XML_NAMESPACE_TABLE &&
+        else if( nPrefix == XmlNamespace::TABLE &&
             IsXMLToken( aLocalName, XML_VISIBILITY ) )
         {
             OUString aVisibility = xAttrList->getValueByIndex( i );
@@ -479,7 +479,7 @@ SchXMLTableRowsContext::SchXMLTableRowsContext(
     SvXMLImport& rImport,
     const OUString& rLocalName,
     SchXMLTable& aTable ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_TABLE, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::TABLE, rLocalName ),
         mrImportHelper( rImpHelper ),
         mrTable( aTable )
 {
@@ -490,13 +490,13 @@ SchXMLTableRowsContext::~SchXMLTableRowsContext()
 }
 
 SvXMLImportContextRef SchXMLTableRowsContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
     SvXMLImportContext* pContext = nullptr;
 
-    if( nPrefix == XML_NAMESPACE_TABLE &&
+    if( nPrefix == XmlNamespace::TABLE &&
         IsXMLToken( rLocalName, XML_TABLE_ROW ) )
     {
         pContext = new SchXMLTableRowContext( mrImportHelper, GetImport(), rLocalName, mrTable );
@@ -511,7 +511,7 @@ SchXMLTableRowContext::SchXMLTableRowContext(
     SvXMLImport& rImport,
     const OUString& rLocalName,
     SchXMLTable& aTable ) :
-        SvXMLImportContext( rImport, XML_NAMESPACE_TABLE, rLocalName ),
+        SvXMLImportContext( rImport, XmlNamespace::TABLE, rLocalName ),
         mrImportHelper( rImpHelper ),
         mrTable( aTable )
 {
@@ -529,14 +529,14 @@ SchXMLTableRowContext::~SchXMLTableRowContext()
 }
 
 SvXMLImportContextRef SchXMLTableRowContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
     SvXMLImportContext* pContext = nullptr;
 
     // <table:table-cell> element
-    if( nPrefix == XML_NAMESPACE_TABLE &&
+    if( nPrefix == XmlNamespace::TABLE &&
         IsXMLToken(rLocalName, XML_TABLE_CELL ) )
     {
         pContext = new SchXMLTableCellContext( mrImportHelper, GetImport(), rLocalName, mrTable );
@@ -564,12 +564,12 @@ private:
 
 public:
     SchXMLRangeSomewhereContext( SvXMLImport& rImport,
-                            sal_uInt16 nPrefix,
+                            XmlNamespace nPrefix,
                             const OUString& rLocalName,
                             OUString& rRangeString );
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void EndElement() override;
@@ -582,7 +582,7 @@ public:
 SchXMLTableCellContext::SchXMLTableCellContext(
     SchXMLImportHelper& rImpHelper, SvXMLImport& rImport,
     const OUString& rLocalName, SchXMLTable& aTable)
-    : SvXMLImportContext(rImport, XML_NAMESPACE_TABLE, rLocalName)
+    : SvXMLImportContext(rImport, XmlNamespace::TABLE, rLocalName)
     , mrImportHelper(rImpHelper)
     , mrTable(aTable)
     , mbReadText(false)
@@ -605,7 +605,7 @@ void SchXMLTableCellContext::StartElement( const uno::Reference< xml::sax::XAttr
     for( sal_Int16 i = 0; i < nAttrCount; i++ )
     {
         OUString sAttrName = xAttrList->getNameByIndex( i );
-        sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
+        XmlNamespace nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
         switch( rAttrTokenMap.Get( nPrefix, aLocalName ))
         {
@@ -645,14 +645,14 @@ void SchXMLTableCellContext::StartElement( const uno::Reference< xml::sax::XAttr
 }
 
 SvXMLImportContextRef SchXMLTableCellContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
     SvXMLImportContext* pContext = nullptr;
 
     // <text:list> element
-    if( nPrefix == XML_NAMESPACE_TEXT && IsXMLToken( rLocalName, XML_LIST ) && mbReadText )
+    if( nPrefix == XmlNamespace::TEXT && IsXMLToken( rLocalName, XML_LIST ) && mbReadText )
     {
         SchXMLCell& rCell = mrTable.aData[ mrTable.nRowIndex ][ mrTable.nColumnIndex ];
         rCell.aComplexString = Sequence< OUString >();
@@ -661,13 +661,13 @@ SvXMLImportContextRef SchXMLTableCellContext::CreateChildContext(
         mbReadText = false;//don't apply text from <text:p>
     }
     // <text:p> element - read text (and range from text:id old version)
-    else if( (nPrefix == XML_NAMESPACE_TEXT ||
-                nPrefix == XML_NAMESPACE_LO_EXT) && IsXMLToken( rLocalName, XML_P ) )
+    else if( (nPrefix == XmlNamespace::TEXT ||
+                nPrefix == XmlNamespace::LO_EXT) && IsXMLToken( rLocalName, XML_P ) )
     {
         pContext = new SchXMLParagraphContext( GetImport(), rLocalName, maCellContent, &maRangeId );
     }
     // <draw:g> element - read range
-    else if( nPrefix == XML_NAMESPACE_DRAW && IsXMLToken( rLocalName, XML_G ) )
+    else if( nPrefix == XmlNamespace::DRAW && IsXMLToken( rLocalName, XML_G ) )
     {
         //#i113950# previously the range was exported to attribute text:id, but that attribute does not allow arbitrary strings anymore
         //so we need to find an alternative to save that range info for copy/paste scenario ... -> use description at an empty group element for now
@@ -1044,7 +1044,7 @@ void SchXMLTableHelper::switchRangesFromOuterToInternalIfNecessary(
 }
 
 SchXMLRangeSomewhereContext::SchXMLRangeSomewhereContext( SvXMLImport& rImport,
-                                                sal_uInt16 nPrefix,
+                                                XmlNamespace nPrefix,
                                                 const OUString& rLocalName,
                                                 OUString& rRangeString ) :
         SvXMLImportContext( rImport, nPrefix, rLocalName ),
@@ -1053,11 +1053,11 @@ SchXMLRangeSomewhereContext::SchXMLRangeSomewhereContext( SvXMLImport& rImport,
 }
 
 SvXMLImportContextRef SchXMLRangeSomewhereContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
-    if( XML_NAMESPACE_SVG == nPrefix && IsXMLToken( rLocalName, XML_DESC ) )
+    if( XmlNamespace::SVG == nPrefix && IsXMLToken( rLocalName, XML_DESC ) )
     {
         return new XMLStringBufferImportContext(
             GetImport(), nPrefix, rLocalName, maRangeStringBuffer );
diff --git a/xmloff/source/chart/SchXMLTableContext.hxx b/xmloff/source/chart/SchXMLTableContext.hxx
index f0293195d6ae..5fac9fc78539 100644
--- a/xmloff/source/chart/SchXMLTableContext.hxx
+++ b/xmloff/source/chart/SchXMLTableContext.hxx
@@ -55,7 +55,7 @@ public:
     virtual ~SchXMLTableContext() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
@@ -99,7 +99,7 @@ public:
     virtual ~SchXMLTableColumnsContext() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 };
@@ -133,7 +133,7 @@ public:
     virtual ~SchXMLTableRowsContext() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 };
@@ -152,7 +152,7 @@ public:
     virtual ~SchXMLTableRowContext() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 };
@@ -176,7 +176,7 @@ public:
     virtual ~SchXMLTableCellContext() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
diff --git a/xmloff/source/chart/SchXMLTextListContext.cxx b/xmloff/source/chart/SchXMLTextListContext.cxx
index a494c79a0cb3..880299b826cb 100644
--- a/xmloff/source/chart/SchXMLTextListContext.cxx
+++ b/xmloff/source/chart/SchXMLTextListContext.cxx
@@ -39,7 +39,7 @@ public:
     virtual void EndElement() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
@@ -53,7 +53,7 @@ SchXMLListItemContext::SchXMLListItemContext(
         SvXMLImport& rImport
         , const OUString& rLocalName
         , OUString& rText )
-        : SvXMLImportContext( rImport, XML_NAMESPACE_TEXT, rLocalName )
+        : SvXMLImportContext( rImport, XmlNamespace::TEXT, rLocalName )
         , m_rText( rText )
 {
 }
@@ -67,12 +67,12 @@ void SchXMLListItemContext::EndElement()
 }
 
 SvXMLImportContextRef SchXMLListItemContext::CreateChildContext(
-    sal_uInt16 nPrefix, const OUString& rLocalName,
+    XmlNamespace nPrefix, const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
     SvXMLImportContext* pContext = nullptr;
-    if( (nPrefix == XML_NAMESPACE_TEXT ||
-                nPrefix == XML_NAMESPACE_LO_EXT) && IsXMLToken( rLocalName, XML_P ) )
+    if( (nPrefix == XmlNamespace::TEXT ||
+                nPrefix == XmlNamespace::LO_EXT) && IsXMLToken( rLocalName, XML_P ) )
         pContext = new SchXMLParagraphContext( GetImport(), rLocalName, m_rText );
     return pContext;
 }
@@ -81,7 +81,7 @@ SchXMLTextListContext::SchXMLTextListContext(
         SvXMLImport& rImport
         , const OUString& rLocalName
         , Sequence< OUString>& rTextList )
-        : SvXMLImportContext( rImport, XML_NAMESPACE_TEXT, rLocalName )
+        : SvXMLImportContext( rImport, XmlNamespace::TEXT, rLocalName )
         , m_rTextList( rTextList )
         , m_aTextVector()
 {
@@ -104,11 +104,11 @@ void SchXMLTextListContext::EndElement()
 }
 
 SvXMLImportContextRef SchXMLTextListContext::CreateChildContext(
-    sal_uInt16 nPrefix, const OUString& rLocalName,
+    XmlNamespace nPrefix, const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& )
 {
     SvXMLImportContext* pContext = nullptr;
-    if( nPrefix == XML_NAMESPACE_TEXT && IsXMLToken( rLocalName, XML_LIST_ITEM ) )
+    if( nPrefix == XmlNamespace::TEXT && IsXMLToken( rLocalName, XML_LIST_ITEM ) )
     {
         m_aTextVector.emplace_back( );
         pContext = new SchXMLListItemContext( GetImport(), rLocalName, m_aTextVector.back() );
diff --git a/xmloff/source/chart/SchXMLTextListContext.hxx b/xmloff/source/chart/SchXMLTextListContext.hxx
index 2b15c17c6192..11843211903e 100644
--- a/xmloff/source/chart/SchXMLTextListContext.hxx
+++ b/xmloff/source/chart/SchXMLTextListContext.hxx
@@ -38,7 +38,7 @@ public:
     virtual void EndElement() override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
diff --git a/xmloff/source/chart/SchXMLTools.cxx b/xmloff/source/chart/SchXMLTools.cxx
index 5205819cbb8b..2581ed387fb5 100644
--- a/xmloff/source/chart/SchXMLTools.cxx
+++ b/xmloff/source/chart/SchXMLTools.cxx
@@ -545,7 +545,7 @@ uno::Any getPropertyFromContext( const OUString& rPropertyName, const XMLPropSty
 
 void exportText( SvXMLExport& rExport, const OUString& rText, bool bConvertTabsLFs )
 {
-    SvXMLElementExport aPara( rExport, XML_NAMESPACE_TEXT,
+    SvXMLElementExport aPara( rExport, XmlNamespace::TEXT,
                               ::xmloff::token::GetXMLToken( ::xmloff::token::XML_P ),
                               true, false );
 
@@ -566,7 +566,7 @@ void exportText( SvXMLExport& rExport, const OUString& rText, bool bConvertTabsL
                             rExport.GetDocHandler()->characters( rText.copy( nStartPos, (nPos - nStartPos)) );
                         nStartPos = nPos + 1;
 
-                        SvXMLElementExport aElem( rExport, XML_NAMESPACE_TEXT,
+                        SvXMLElementExport aElem( rExport, XmlNamespace::TEXT,
                                                   ::xmloff::token::GetXMLToken( ::xmloff::token::XML_TAB_STOP ),
                                                   false, false );
                     }
@@ -578,7 +578,7 @@ void exportText( SvXMLExport& rExport, const OUString& rText, bool bConvertTabsL
                             rExport.GetDocHandler()->characters( rText.copy( nStartPos, (nPos - nStartPos)) );
                         nStartPos = nPos + 1;
 
-                        SvXMLElementExport aElem( rExport, XML_NAMESPACE_TEXT,
+                        SvXMLElementExport aElem( rExport, XmlNamespace::TEXT,
                                                   ::xmloff::token::GetXMLToken( ::xmloff::token::XML_LINE_BREAK ),
                                                   false, false );
                     }
@@ -613,10 +613,10 @@ void exportRangeToSomewhere( SvXMLExport& rExport, const OUString& rValue )
     if (nCurrentODFVersion == SvtSaveOptions::ODFSVER_010 || nCurrentODFVersion == SvtSaveOptions::ODFSVER_011)
         return;//svg:desc is not allowed at draw:g in ODF1.0; but as the ranges for error bars are anyhow not allowed within ODF1.0 nor ODF1.1 we do not need the information
 
-    SvXMLElementExport aEmptyShapeGroup( rExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aEmptyShapeGroup( rExport, XmlNamespace::DRAW,
                               ::xmloff::token::GetXMLToken( ::xmloff::token::XML_G ),
                               true, false );
-    SvXMLElementExport aDescription( rExport, XML_NAMESPACE_SVG,
+    SvXMLElementExport aDescription( rExport, XmlNamespace::SVG,
                               ::xmloff::token::GetXMLToken( ::xmloff::token::XML_DESC ),
                               true, false );
     rExport.GetDocHandler()->characters( rValue );
diff --git a/xmloff/source/chart/XMLChartPropertyContext.cxx b/xmloff/source/chart/XMLChartPropertyContext.cxx
index ea3ead155232..92bb888ae072 100644
--- a/xmloff/source/chart/XMLChartPropertyContext.cxx
+++ b/xmloff/source/chart/XMLChartPropertyContext.cxx
@@ -30,7 +30,7 @@ using namespace ::com::sun::star;
 
 XMLChartPropertyContext::XMLChartPropertyContext(
     SvXMLImport& rImport,
-    sal_uInt16 nPrfx,
+    XmlNamespace nPrfx,
     const OUString& rLName,
     const uno::Reference< xml::sax::XAttributeList > & xAttrList,
     sal_uInt32 nFamily,
@@ -44,7 +44,7 @@ XMLChartPropertyContext::~XMLChartPropertyContext()
 {}
 
 SvXMLImportContextRef XMLChartPropertyContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList > & xAttrList,
     ::std::vector< XMLPropertyState > &rProperties,
diff --git a/xmloff/source/chart/XMLChartPropertyContext.hxx b/xmloff/source/chart/XMLChartPropertyContext.hxx
index ba572e7e5c9e..27de510089df 100644
--- a/xmloff/source/chart/XMLChartPropertyContext.hxx
+++ b/xmloff/source/chart/XMLChartPropertyContext.hxx
@@ -25,7 +25,7 @@ class XMLChartPropertyContext : public SvXMLPropertySetContext
 {
 public:
 
-    XMLChartPropertyContext( SvXMLImport& rImport, sal_uInt16 nPrfx,
+    XMLChartPropertyContext( SvXMLImport& rImport, XmlNamespace nPrfx,
                              const OUString& rLName,
                              const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList,
                              sal_uInt32 nFamily,
@@ -35,7 +35,7 @@ public:
 
     using SvXMLPropertySetContext::CreateChildContext;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList,
         ::std::vector< XMLPropertyState > &rProperties,
diff --git a/xmloff/source/chart/XMLChartStyleContext.cxx b/xmloff/source/chart/XMLChartStyleContext.cxx
index c0c33afc76f8..1aee0c3c0258 100644
--- a/xmloff/source/chart/XMLChartStyleContext.cxx
+++ b/xmloff/source/chart/XMLChartStyleContext.cxx
@@ -110,13 +110,13 @@ void XMLChartStyleContext::FillPropertySet(
 }
 
 SvXMLImportContextRef XMLChartStyleContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList > & xAttrList )
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix )
+    if( XmlNamespace::STYLE == nPrefix || XmlNamespace::LO_EXT == nPrefix )
     {
         sal_uInt32 nFamily = 0;
         if( IsXMLToken( rLocalName, XML_TEXT_PROPERTIES ) )
diff --git a/xmloff/source/chart/XMLLabelSeparatorContext.cxx b/xmloff/source/chart/XMLLabelSeparatorContext.cxx
index dec08c2ad3da..5a53c0894dc4 100644
--- a/xmloff/source/chart/XMLLabelSeparatorContext.cxx
+++ b/xmloff/source/chart/XMLLabelSeparatorContext.cxx
@@ -27,7 +27,7 @@
 using namespace ::com::sun::star;
 
 XMLLabelSeparatorContext::XMLLabelSeparatorContext(
-    SvXMLImport& rImport, sal_uInt16 nPrfx,
+    SvXMLImport& rImport, XmlNamespace nPrfx,
     const OUString& rLocalName,
     const XMLPropertyState& rProp,
     ::std::vector< XMLPropertyState > &rProps ) :
@@ -45,7 +45,7 @@ void XMLLabelSeparatorContext::StartElement( const uno::Reference< xml::sax::XAt
 }
 
 SvXMLImportContextRef XMLLabelSeparatorContext::CreateChildContext(
-    sal_uInt16 /*nPrefix*/, const OUString& rLocalName,
+    XmlNamespace /*nPrefix*/, const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList > & /*xAttrList*/ )
 {
     SvXMLImportContext* pContext = nullptr;
diff --git a/xmloff/source/chart/XMLLabelSeparatorContext.hxx b/xmloff/source/chart/XMLLabelSeparatorContext.hxx
index e2153ea6565e..799165790d56 100644
--- a/xmloff/source/chart/XMLLabelSeparatorContext.hxx
+++ b/xmloff/source/chart/XMLLabelSeparatorContext.hxx
@@ -25,7 +25,7 @@ class XMLLabelSeparatorContext : public XMLElementPropertyContext
 {
 public:
 
-    XMLLabelSeparatorContext( SvXMLImport& rImport, sal_uInt16 nPrfx,
+    XMLLabelSeparatorContext( SvXMLImport& rImport, XmlNamespace nPrfx,
                            const OUString& rLName,
                            const XMLPropertyState& rProp,
                            ::std::vector< XMLPropertyState > &rProps );
@@ -33,7 +33,7 @@ public:
 
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void EndElement() override;
diff --git a/xmloff/source/chart/XMLSymbolImageContext.cxx b/xmloff/source/chart/XMLSymbolImageContext.cxx
index 8bc2a018ca7a..e7b6ea821e9d 100644
--- a/xmloff/source/chart/XMLSymbolImageContext.cxx
+++ b/xmloff/source/chart/XMLSymbolImageContext.cxx
@@ -43,15 +43,15 @@ enum SvXMLTokenMapAttrs
 
 const SvXMLTokenMapEntry aSymbolImageAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XLINK,  ::xmloff::token::XML_HREF,     XML_TOK_SYMBOL_IMAGE_HREF    },
-    { XML_NAMESPACE_XLINK,  ::xmloff::token::XML_TYPE,     XML_TOK_SYMBOL_IMAGE_TYPE    },
-    { XML_NAMESPACE_XLINK,  ::xmloff::token::XML_ACTUATE,  XML_TOK_SYMBOL_IMAGE_ACTUATE },
-    { XML_NAMESPACE_XLINK,  ::xmloff::token::XML_SHOW,     XML_TOK_SYMBOL_IMAGE_SHOW },
+    { XmlNamespace::XLINK,  ::xmloff::token::XML_HREF,     XML_TOK_SYMBOL_IMAGE_HREF    },
+    { XmlNamespace::XLINK,  ::xmloff::token::XML_TYPE,     XML_TOK_SYMBOL_IMAGE_TYPE    },
+    { XmlNamespace::XLINK,  ::xmloff::token::XML_ACTUATE,  XML_TOK_SYMBOL_IMAGE_ACTUATE },
+    { XmlNamespace::XLINK,  ::xmloff::token::XML_SHOW,     XML_TOK_SYMBOL_IMAGE_SHOW },
     XML_TOKEN_MAP_END
 };
 
 XMLSymbolImageContext::XMLSymbolImageContext(
-    SvXMLImport& rImport, sal_uInt16 nPrfx,
+    SvXMLImport& rImport, XmlNamespace nPrfx,
     const OUString& rLName,
     const XMLPropertyState& rProp,
     ::std::vector< XMLPropertyState > &rProps ) :
@@ -72,7 +72,7 @@ void XMLSymbolImageContext::StartElement( const uno::Reference< xml::sax::XAttri
     for( sal_Int16 i = 0; i < nAttrCount; i++ )
     {
         const OUString& rAttrName = xAttrList->getNameByIndex( i );
-        sal_uInt16 nPrefix =
+        XmlNamespace nPrefix =
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
         const OUString& rValue = xAttrList->getValueByIndex( i );
@@ -93,7 +93,7 @@ void XMLSymbolImageContext::StartElement( const uno::Reference< xml::sax::XAttri
 }
 
 SvXMLImportContextRef XMLSymbolImageContext::CreateChildContext(
-    sal_uInt16 nPrefix, const OUString& rLocalName,
+    XmlNamespace nPrefix, const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList > & xAttrList )
 {
     SvXMLImportContext* pContext = nullptr;
diff --git a/xmloff/source/chart/XMLSymbolImageContext.hxx b/xmloff/source/chart/XMLSymbolImageContext.hxx
index 14f87879e7a0..e1c6635776e2 100644
--- a/xmloff/source/chart/XMLSymbolImageContext.hxx
+++ b/xmloff/source/chart/XMLSymbolImageContext.hxx
@@ -29,7 +29,7 @@ class XMLSymbolImageContext : public XMLElementPropertyContext
 {
 public:
 
-    XMLSymbolImageContext( SvXMLImport& rImport, sal_uInt16 nPrfx,
+    XMLSymbolImageContext( SvXMLImport& rImport, XmlNamespace nPrfx,
                            const OUString& rLName,
                            const XMLPropertyState& rProp,
                            ::std::vector< XMLPropertyState > &rProps );
@@ -37,7 +37,7 @@ public:
 
     virtual void StartElement( const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
     virtual void EndElement() override;
diff --git a/xmloff/source/chart/contexts.cxx b/xmloff/source/chart/contexts.cxx
index 218a91e194a2..a7b065c8b5d3 100644
--- a/xmloff/source/chart/contexts.cxx
+++ b/xmloff/source/chart/contexts.cxx
@@ -82,7 +82,7 @@ SchXMLDocContext::~SchXMLDocContext()
 
 
 SvXMLImportContextRef SchXMLDocContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& /*xAttrList*/ )
 {
@@ -169,14 +169,14 @@ css::uno::Reference< css::xml::sax::XFastContextHandler > SchXMLBodyContext::cre
 }
 
 SvXMLImportContextRef SchXMLBodyContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const uno::Reference< xml::sax::XAttributeList >& xAttrList )
 {
     SvXMLImportContextRef xContext;
 
     // <chart:chart> element
-    if( nPrefix == XML_NAMESPACE_CHART &&
+    if( nPrefix == XmlNamespace::CHART &&
         IsXMLToken( rLocalName, XML_CHART ) )
     {
         xContext = mrImportHelper.CreateChartContext( GetImport(),
@@ -184,7 +184,7 @@ SvXMLImportContextRef SchXMLBodyContext::CreateChildContext(
                                                       GetImport().GetModel(),
                                                       xAttrList );
     }
-    else if(nPrefix == XML_NAMESPACE_TABLE &&
+    else if(nPrefix == XmlNamespace::TABLE &&
             IsXMLToken( rLocalName, XML_CALCULATION_SETTINGS ))
     {
         // i99104 handle null date correctly
diff --git a/xmloff/source/chart/contexts.hxx b/xmloff/source/chart/contexts.hxx
index 7cfcf2d5f44c..613764134be0 100644
--- a/xmloff/source/chart/contexts.hxx
+++ b/xmloff/source/chart/contexts.hxx
@@ -51,7 +51,7 @@ public:
                const css::uno::Reference< css::xml::sax::XFastAttributeList >& ) override {}
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
@@ -97,7 +97,7 @@ public:
         sal_Int32 nElement, const css::uno::Reference< css::xml::sax::XFastAttributeList >& xAttrList ) override;
 
     virtual SvXMLImportContextRef CreateChildContext(
-        sal_uInt16 nPrefix,
+        XmlNamespace nPrefix,
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 };
diff --git a/xmloff/source/core/DocumentSettingsContext.cxx b/xmloff/source/core/DocumentSettingsContext.cxx
index 0a114ab0d87d..aa384e5ac9e5 100644
--- a/xmloff/source/core/DocumentSettingsContext.cxx
+++ b/xmloff/source/core/DocumentSettingsContext.cxx
@@ -262,11 +262,11 @@ css::uno::Reference< css::xml::sax::XFastContextHandler >  XMLDocumentSettingsCo
     if (nElement == XML_ELEMENT(CONFIG, XML_CONFIG_ITEM_SET))
     {
         OUString aLocalConfigName;
-        sal_uInt16 nConfigPrefix =
+        XmlNamespace nConfigPrefix =
             GetImport().GetNamespaceMap().GetKeyByAttrValueQName(
                                         sName, &aLocalConfigName );
 
-        if( XML_NAMESPACE_OOO == nConfigPrefix )
+        if( XmlNamespace::OOO == nConfigPrefix )
         {
             if (IsXMLToken(aLocalConfigName, XML_VIEW_SETTINGS))
                 pContext = new XMLConfigItemSetContext(GetImport(),
diff --git a/xmloff/source/core/DomBuilderContext.cxx b/xmloff/source/core/DomBuilderContext.cxx
index 9f893d710ae0..8319459f2af5 100644
--- a/xmloff/source/core/DomBuilderContext.cxx
+++ b/xmloff/source/core/DomBuilderContext.cxx
@@ -55,13 +55,13 @@ using com::sun::star::xml::dom::NodeType_ELEMENT_NODE;
 // helper functions; implemented below
 static Reference<XNode> lcl_createDomInstance();
 static Reference<XNode> lcl_createElement( SvXMLImport& rImport,
-                                    sal_uInt16 nPrefix,
+                                    XmlNamespace nPrefix,
                                     const OUString& rLocalName,
                                     const Reference<XNode>& xParent);
 
 
 DomBuilderContext::DomBuilderContext( SvXMLImport& rImport,
-                                      sal_uInt16 nPrefix,
+                                      XmlNamespace nPrefix,
                                       const OUString& rLocalName ) :
     SvXMLImportContext( rImport, nPrefix, rLocalName ),
     mxNode( lcl_createElement( rImport, nPrefix, rLocalName,
@@ -73,7 +73,7 @@ DomBuilderContext::DomBuilderContext( SvXMLImport& rImport,
 }
 
 DomBuilderContext::DomBuilderContext( SvXMLImport& rImport,
-                                      sal_uInt16 nPrefix,
+                                      XmlNamespace nPrefix,
                                       const OUString& rLocalName,
                                       Reference<XNode> const & xParent ) :
     SvXMLImportContext( rImport, nPrefix, rLocalName ),
@@ -95,7 +95,7 @@ Reference<XDocument> DomBuilderContext::getTree()
 }
 
 SvXMLImportContextRef DomBuilderContext::CreateChildContext(
-    sal_uInt16 nPrefix,
+    XmlNamespace nPrefix,
     const OUString& rLocalName,
     const Reference<XAttributeList>& )
 {
@@ -120,7 +120,7 @@ void DomBuilderContext::StartElement(
 
         // namespace handling: determine namespace & namespace key
         OUString sNamespace;
-        sal_uInt16 nNamespaceKey =
+        XmlNamespace nNamespaceKey =
             GetImport().GetNamespaceMap().GetKeyByAttrName(
                 rName, nullptr, nullptr, &sNamespace);
 
@@ -128,15 +128,15 @@ void DomBuilderContext::StartElement(
         Reference<XElement> xElement( mxNode, UNO_QUERY_THROW );
         switch( nNamespaceKey )
         {
-        case XML_NAMESPACE_NONE:
+        case XmlNamespace::NONE:
             // no namespace: create a non-namespaced attribute
             xElement->setAttribute( rName, rValue );
             break;
-        case XML_NAMESPACE_XMLNS:
+        case XmlNamespace::XMLNS:
             // namespace declaration: ignore, since the DOM tree handles these
             // declarations implicitly
             break;
-        case XML_NAMESPACE_UNKNOWN:
+        case XmlNamespace::UNKNOWN:
             // unknown namespace: illegal input. Raise Warning.
             {
                 Sequence<OUString> aSeq(2);
@@ -189,7 +189,7 @@ static Reference<XNode> lcl_createDomInstance()
 }
 
 static Reference<XNode> lcl_createElement( SvXMLImport& rImport,
-                                    sal_uInt16 nPrefix,
+                                    XmlNamespace nPrefix,
                                     const OUString& rLocalName,
                                     const Reference<XNode>& xParent)
 {
@@ -205,12 +205,12 @@ static Reference<XNode> lcl_createElement( SvXMLImport& rImport,
     Reference<XElement> xElement;
     switch( nPrefix )
     {
-    case XML_NAMESPACE_NONE:
+    case XmlNamespace::NONE:
         // no namespace: use local name
         xElement = xDocument->createElement( rLocalName );
         break;
-    case XML_NAMESPACE_XMLNS:
-    case XML_NAMESPACE_UNKNOWN:
+    case XmlNamespace::XMLNS:
+    case XmlNamespace::UNKNOWN:
         // both cases are illegal; raise warning (and use only local name)
         xElement = xDocument->createElement( rLocalName );
         {
diff --git a/xmloff/source/core/DomExport.cxx b/xmloff/source/core/DomExport.cxx
index 1a16a155a3fc..349565c0e4ae 100644
--- a/xmloff/source/core/DomExport.cxx
+++ b/xmloff/source/core/DomExport.cxx
@@ -166,11 +166,11 @@ void DomExport::pushNamespace()
 void DomExport::addNamespace( const OUString& sPrefix, const OUString& sURI )
 {
     SvXMLNamespaceMap& rMap = maNamespaces.back();
-    sal_uInt16 nKey = rMap.GetKeyByPrefix( sPrefix );
+    XmlNamespace nKey = rMap.GetKeyByPrefix( sPrefix );
 
     // we need to register the namespace, if either the prefix isn't known or
     // is used for a different namespace
-    if( nKey == XML_NAMESPACE_UNKNOWN  ||
+    if( nKey == XmlNamespace::UNKNOWN  ||
         rMap.GetNameByKey( nKey ) != sURI )
     {
         // add prefix to map, and add declaration
diff --git a/xmloff/source/core/RDFaExportHelper.cxx b/xmloff/source/core/RDFaExportHelper.cxx
index 5b9e3b965840..6287ea8521c1 100644
--- a/xmloff/source/core/RDFaExportHelper.cxx
+++ b/xmloff/source/core/RDFaExportHelper.cxx
@@ -145,12 +145,12 @@ RDFaExportHelper::AddRDFa(
         {
             const OUString datatype(
                 makeCURIE(&m_rExport, xDatatype) );
-            m_rExport.AddAttribute(XML_NAMESPACE_XHTML,
+            m_rExport.AddAttribute(XmlNamespace::XHTML,
                 token::XML_DATATYPE, datatype);
         }
         if (RDFaResult.Second) // there is xhtml:content
         {
-            m_rExport.AddAttribute(XML_NAMESPACE_XHTML, token::XML_CONTENT,
+            m_rExport.AddAttribute(XmlNamespace::XHTML, token::XML_CONTENT,
                 xContent->getValue());
         }
 
@@ -164,10 +164,10 @@ RDFaExportHelper::AddRDFa(
             ::comphelper::OUStringBufferAppender(property),
             OUString(" "));
 
-        m_rExport.AddAttribute(XML_NAMESPACE_XHTML, token::XML_PROPERTY,
+        m_rExport.AddAttribute(XmlNamespace::XHTML, token::XML_PROPERTY,
             property.makeStringAndClear());
 
-        m_rExport.AddAttribute(XML_NAMESPACE_XHTML, token::XML_ABOUT, about);
+        m_rExport.AddAttribute(XmlNamespace::XHTML, token::XML_ABOUT, about);
     }
     catch (uno::Exception &)
     {
diff --git a/xmloff/source/core/RDFaImportHelper.cxx b/xmloff/source/core/RDFaImportHelper.cxx
index e0cc65698a0a..410fe8e81655 100644
--- a/xmloff/source/core/RDFaImportHelper.cxx
+++ b/xmloff/source/core/RDFaImportHelper.cxx
@@ -170,7 +170,7 @@ RDFaReader::ReadCURIE(OUString const & i_rCURIE) const
         OUString LocalName;
         OUString Namespace;
         // LocalName may contain ':', see "ipchar" in RFC 3987
-        sal_uInt16 nKey( GetImport().GetNamespaceMap().GetKeyByQName(
+        XmlNamespace nKey( GetImport().GetNamespaceMap().GetKeyByQName(
             i_rCURIE, &Prefix, &LocalName, &Namespace, SvXMLNamespaceMap::QNameMode::AttrValue) );
         if ( Prefix == "_" )
         {
@@ -180,9 +180,9 @@ RDFaReader::ReadCURIE(OUString const & i_rCURIE) const
         }
         else
         {
-            SAL_WARN_IF(XML_NAMESPACE_NONE == nKey, "xmloff.core", "no namespace?");
-            if ((XML_NAMESPACE_UNKNOWN != nKey) &&
-                (XML_NAMESPACE_XMLNS   != nKey))
+            SAL_WARN_IF(XmlNamespace::NONE == nKey, "xmloff.core", "no namespace?");
+            if ((XmlNamespace::UNKNOWN != nKey) &&
+                (XmlNamespace::XMLNS   != nKey))
             {
                 // N.B.: empty LocalName is valid!
                 const OUString URI(Namespace + LocalName);
diff --git a/xmloff/source/core/XMLBase64Export.cxx b/xmloff/source/core/XMLBase64Export.cxx
index 0aa2ff136f3f..102d6fbaf410 100644
--- a/xmloff/source/core/XMLBase64Export.cxx
+++ b/xmloff/source/core/XMLBase64Export.cxx
@@ -71,7 +71,7 @@ bool XMLBase64Export::exportElement(
             const Reference < XInputStream > & rIn,
             enum ::xmloff::token::XMLTokenEnum eName )
 {
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_OFFICE, eName, true, true );
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::OFFICE, eName, true, true );
     return exportXML( rIn );
 }
 
diff --git a/xmloff/source/core/XMLBase64ImportContext.cxx b/xmloff/source/core/XMLBase64ImportContext.cxx
index 4e46b81811b0..4e1b76344850 100644
--- a/xmloff/source/core/XMLBase64ImportContext.cxx
+++ b/xmloff/source/core/XMLBase64ImportContext.cxx
@@ -30,7 +30,7 @@ using namespace ::com::sun::star::io;
 
 
 XMLBase64ImportContext::XMLBase64ImportContext(
-        SvXMLImport& rImport, sal_uInt16 nPrfx, const OUString& rLName,
+        SvXMLImport& rImport, XmlNamespace nPrfx, const OUString& rLName,
         const Reference< XAttributeList >&,
         const Reference< XOutputStream >& rOut ) :
     SvXMLImportContext( rImport, nPrfx, rLName ),
diff --git a/xmloff/source/core/XMLEmbeddedObjectImportContext.cxx b/xmloff/source/core/XMLEmbeddedObjectImportContext.cxx
index 06e1d8cd5b87..1add663dd867 100644
--- a/xmloff/source/core/XMLEmbeddedObjectImportContext.cxx
+++ b/xmloff/source/core/XMLEmbeddedObjectImportContext.cxx
@@ -50,7 +50,7 @@ public:
                                     const OUString& rLName,
     const css::uno::Reference< css::xml::sax::XDocumentHandler >& rHandler );
 
-    virtual SvXMLImportContextRef CreateChildContext( sal_uInt16 nPrefix,
+    virtual SvXMLImportContextRef CreateChildContext( XmlNamespace nPrefix,
                                    const OUString& rLocalName,
                                    const css::uno::Reference< css::xml::sax::XAttributeList >& xAttrList ) override;
 
@@ -137,19 +137,19 @@ void XMLEmbeddedObjectImportContext::SetComponent( Reference< XComponent > const
 }
 
 XMLEmbeddedObjectImportContext::XMLEmbeddedObjectImportContext(
-        SvXMLImport& rImport, sal_uInt16 nPrfx, const OUString& rLName,
+        SvXMLImport& rImport, XmlNamespace nPrfx, const OUString& rLName,
         const Reference< XAttributeList >& xAttrList ) :
     SvXMLImportContext( rImport, nPrfx, rLName )
 {
     SvGlobalName aName;
 
-    if( nPrfx == XML_NAMESPACE_MATH &&
+    if( nPrfx == XmlNamespace::MATH &&
         IsXMLToken( rLName, XML_MATH ) )
     {
         sFilterService = XML_IMPORT_FILTER_MATH;
         aName = SvGlobalName(SO3_SM_CLASSID);
     }
-    else if( nPrfx == XML_NAMESPACE_OFFICE &&
+    else if( nPrfx == XmlNamespace::OFFICE &&
         IsXMLToken( rLName, XML_DOCUMENT ) )
     {
         OUString sMime;
@@ -160,7 +160,7 @@ XMLEmbeddedObjectImportContext::XMLEmbeddedObjectImportContext(
             const OUString& rAttrName = xAttrList->getNameByIndex( i );
             OUString aLocalName;
             sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName );
-            if( nPrefix == XML_NAMESPACE_OFFICE &&
+            if( nPrefix == XmlNamespace::OFFICE &&
                 IsXMLToken( aLocalName, XML_MIMETYPE ) )
             {
                 sMime = xAttrList->getValueByIndex( i );
diff --git a/xmloff/source/core/nmspmap.cxx b/xmloff/source/core/nmspmap.cxx
index 5b5017c7941b..1b4b04e8b3dd 100644
--- a/xmloff/source/core/nmspmap.cxx
+++ b/xmloff/source/core/nmspmap.cxx
@@ -76,9 +76,9 @@ bool SvXMLNamespaceMap::operator ==( const SvXMLNamespaceMap& rCmp ) const
     return aNameHash == rCmp.aNameHash;
 }
 
-sal_uInt16 SvXMLNamespaceMap::Add_( const OUString& rPrefix, const OUString &rName, sal_uInt16 nKey )
+sal_uInt16 SvXMLNamespaceMap::Add_( const OUString& rPrefix, const OUString &rName, XmlNamespace nKey )
 {
-    if( XML_NAMESPACE_UNKNOWN == nKey )
+    if( XmlNamespace::UNKNOWN == nKey )
     {
         // create a new unique key with UNKNOWN flag set
         nKey = XML_NAMESPACE_UNKNOWN_FLAG;
@@ -101,16 +101,16 @@ sal_uInt16 SvXMLNamespaceMap::Add_( const OUString& rPrefix, const OUString &rNa
 }
 
 sal_uInt16 SvXMLNamespaceMap::Add( const OUString& rPrefix, const OUString& rName,
-                               sal_uInt16 nKey )
+                               XmlNamespace nKey )
 {
-    if( XML_NAMESPACE_UNKNOWN == nKey )
+    if( XmlNamespace::UNKNOWN == nKey )
         nKey = GetKeyByName( rName );
 
 #ifdef NDEBUG
-    if( XML_NAMESPACE_NONE == nKey )
+    if( XmlNamespace::NONE == nKey )
         return USHRT_MAX;
 #else
-    assert(XML_NAMESPACE_NONE != nKey);
+    assert(XmlNamespace::NONE != nKey);
 #endif
 
     if ( aNameHash.find ( rPrefix ) == aNameHash.end() )
@@ -124,13 +124,13 @@ sal_uInt16 SvXMLNamespaceMap::AddIfKnown( const OUString& rPrefix, const OUStrin
     sal_uInt16 nKey = GetKeyByName( rName );
 
 #ifdef NDEBUG
-    if( XML_NAMESPACE_NONE == nKey )
-        return XML_NAMESPACE_UNKNOWN;
+    if( XmlNamespace::NONE == nKey )
+        return XmlNamespace::UNKNOWN;
 #else
-    assert(nKey != XML_NAMESPACE_NONE);
+    assert(nKey != XmlNamespace::NONE);
 #endif
 
-    if( XML_NAMESPACE_UNKNOWN != nKey )
+    if( XmlNamespace::UNKNOWN != nKey )
     {
         NameSpaceHash::const_iterator aIter = aNameHash.find( rPrefix );
         if( aIter == aNameHash.end() || (*aIter).second->sName != rName )
@@ -149,7 +149,7 @@ sal_uInt16 SvXMLNamespaceMap::GetKeyByPrefix( const OUString& rPrefix ) const
 
 sal_uInt16 SvXMLNamespaceMap::GetKeyByName( const OUString& rName ) const
 {
-    sal_uInt16 nKey = XML_NAMESPACE_UNKNOWN;
+    sal_uInt16 nKey = XmlNamespace::UNKNOWN;
     auto aIter = std::find_if(aNameHash.cbegin(), aNameHash.cend(),
         [&rName](const NameSpaceHash::value_type& rEntry) { return rEntry.second->sName == rName; });
 
@@ -192,14 +192,14 @@ OUString SvXMLNamespaceMap::GetQNameByKey( sal_uInt16 nKey,
 
     switch ( nKey )
     {
-        case XML_NAMESPACE_UNKNOWN:
+        case XmlNamespace::UNKNOWN:
             // ...if it's a completely unknown namespace, assert and return the local name
             SAL_WARN("xmloff.core", "unknown namespace, probable missing xmlns: declaration");
             [[fallthrough]];
-        case XML_NAMESPACE_NONE:
+        case XmlNamespace::NONE:
             // ...if there isn't one, return the local name
             return rLocalName;
-        case XML_NAMESPACE_XMLNS:
+        case XmlNamespace::XMLNS:
         {
             // ...if it's in the xmlns namespace, make the prefix
             // don't bother caching this, it rarely happens
@@ -212,7 +212,7 @@ OUString SvXMLNamespaceMap::GetQNameByKey( sal_uInt16 nKey,
             }
             return sQName.makeStringAndClear();
         }
-        case XML_NAMESPACE_XML:
+        case XmlNamespace::XML:
         {
             // this namespace is reserved, and needs not to be declared
             return GetXMLToken(XML_XML) + ":" + rLocalName;
@@ -319,7 +319,7 @@ sal_uInt16 SvXMLNamespaceMap::GetKeyByQName(const OUString& rQName,
         if (eMode == QNameMode::AttrNameCached && sEntryName.indexOf(':') != -1)
         {
             SAL_INFO("xmloff", "invalid attribute name with multiple ':'");
-            return XML_NAMESPACE_UNKNOWN;
+            return XmlNamespace::UNKNOWN;
         }
 
         if( pPrefix )
@@ -337,12 +337,12 @@ sal_uInt16 SvXMLNamespaceMap::GetKeyByQName(const OUString& rQName,
         }
         else if ( sEntryPrefix == sXMLNS )
             // not found, but xmlns prefix: return xmlns 'namespace'
-            nKey = XML_NAMESPACE_XMLNS;
+            nKey = XmlNamespace::XMLNS;
         else if( nColonPos == -1 )
             // not found, and no namespace: 'namespace' none
-            nKey = XML_NAMESPACE_NONE;
+            nKey = XmlNamespace::NONE;
         else
-            nKey = XML_NAMESPACE_UNKNOWN;
+            nKey = XmlNamespace::UNKNOWN;
 
         if (eMode == QNameMode::AttrNameCached)
         {
@@ -389,11 +389,11 @@ sal_uInt16 SvXMLNamespaceMap::GetNextIndex( sal_uInt16 nOldIdx ) const
 void SvXMLNamespaceMap::AddAtIndex( const OUString& rPrefix,
                                     const OUString& rName, sal_uInt16 nKey )
 {
-    if( XML_NAMESPACE_UNKNOWN == nKey )
+    if( XmlNamespace::UNKNOWN == nKey )
         nKey = GetKeyByName( rName );
 
-    assert(XML_NAMESPACE_NONE != nKey);
-    if( XML_NAMESPACE_NONE != nKey && ! ( aNameHash.count ( rPrefix ) ) )
+    assert(XmlNamespace::NONE != nKey);
+    if( XmlNamespace::NONE != nKey && ! ( aNameHash.count ( rPrefix ) ) )
     {
         Add_( rPrefix, rName, nKey );
     }
diff --git a/xmloff/source/core/xmlexp.cxx b/xmloff/source/core/xmlexp.cxx
index 313d74c02994..f970099e92d0 100644
--- a/xmloff/source/core/xmlexp.cxx
+++ b/xmloff/source/core/xmlexp.cxx
@@ -181,17 +181,17 @@ private:
 
 void SettingsExportFacade::AddAttribute( enum ::xmloff::token::XMLTokenEnum i_eName, const OUString& i_rValue )
 {
-    m_rExport.AddAttribute( XML_NAMESPACE_CONFIG, i_eName, i_rValue );
+    m_rExport.AddAttribute( XmlNamespace::CONFIG, i_eName, i_rValue );
 }
 
 void SettingsExportFacade::AddAttribute( enum ::xmloff::token::XMLTokenEnum i_eName, enum ::xmloff::token::XMLTokenEnum i_eValue )
 {
-    m_rExport.AddAttribute( XML_NAMESPACE_CONFIG, i_eName, i_eValue );
+    m_rExport.AddAttribute( XmlNamespace::CONFIG, i_eName, i_eValue );
 }
 
 void SettingsExportFacade::StartElement( enum ::xmloff::token::XMLTokenEnum i_eName )
 {
-    const OUString sElementName( m_rExport.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_CONFIG, GetXMLToken( i_eName ) ) );
+    const OUString sElementName( m_rExport.GetNamespaceMap().GetQNameByKey( XmlNamespace::CONFIG, GetXMLToken( i_eName ) ) );
     m_rExport.StartElement( sElementName, true/*i_bIgnoreWhitespace*/ );
     m_aElements.push( sElementName );
 }
@@ -307,97 +307,97 @@ void SvXMLExport::InitCtor_()
     // note: it is not necessary to add XML_NP_XML (it is declared implicitly)
     if( getExportFlags() & ~SvXMLExportFlags::OASIS )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XML_NAMESPACE_OFFICE );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XML_NAMESPACE_OOO );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XmlNamespace::OFFICE );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XmlNamespace::OOO );
     }
     if( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::FONTDECLS) )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XML_NAMESPACE_FO );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XmlNamespace::FO );
     }
     if( getExportFlags() & (SvXMLExportFlags::META|SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::CONTENT|SvXMLExportFlags::SCRIPTS|SvXMLExportFlags::SETTINGS) )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK );
     }
     if( getExportFlags() & SvXMLExportFlags::SETTINGS )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XML_NAMESPACE_CONFIG );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XmlNamespace::CONFIG );
     }
 
     if( getExportFlags() & (SvXMLExportFlags::META|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::CONTENT) )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_DC), GetXMLToken(XML_N_DC), XML_NAMESPACE_DC );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META), XML_NAMESPACE_META );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_DC), GetXMLToken(XML_N_DC), XmlNamespace::DC );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META), XmlNamespace::META );
     }
     if( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::CONTENT|SvXMLExportFlags::FONTDECLS) )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XML_NAMESPACE_STYLE );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XmlNamespace::STYLE );
     }
 
     // namespaces for documents
     if( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::CONTENT) )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_DC),    GetXMLToken(XML_N_DC),      XML_NAMESPACE_DC );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_TEXT),  GetXMLToken(XML_N_TEXT),    XML_NAMESPACE_TEXT );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_DRAW),  GetXMLToken(XML_N_DRAW),    XML_NAMESPACE_DRAW );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_DR3D),  GetXMLToken(XML_N_DR3D),    XML_NAMESPACE_DR3D );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_SVG),   GetXMLToken(XML_N_SVG_COMPAT),  XML_NAMESPACE_SVG );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART),   XML_NAMESPACE_CHART );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_RPT),   GetXMLToken(XML_N_RPT),     XML_NAMESPACE_REPORT );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE),   XML_NAMESPACE_TABLE );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_NUMBER),GetXMLToken(XML_N_NUMBER),  XML_NAMESPACE_NUMBER );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_OOOW),  GetXMLToken(XML_N_OOOW),    XML_NAMESPACE_OOOW );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_OOOC),  GetXMLToken(XML_N_OOOC),    XML_NAMESPACE_OOOC );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_OF),    GetXMLToken(XML_N_OF),      XML_NAMESPACE_OF );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_DC),    GetXMLToken(XML_N_DC),      XmlNamespace::DC );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_TEXT),  GetXMLToken(XML_N_TEXT),    XmlNamespace::TEXT );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_DRAW),  GetXMLToken(XML_N_DRAW),    XmlNamespace::DRAW );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_DR3D),  GetXMLToken(XML_N_DR3D),    XmlNamespace::DR3D );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_SVG),   GetXMLToken(XML_N_SVG_COMPAT),  XmlNamespace::SVG );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART),   XmlNamespace::CHART );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_RPT),   GetXMLToken(XML_N_RPT),     XmlNamespace::REPORT );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE),   XmlNamespace::TABLE );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_NUMBER),GetXMLToken(XML_N_NUMBER),  XmlNamespace::NUMBER );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_OOOW),  GetXMLToken(XML_N_OOOW),    XmlNamespace::OOOW );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_OOOC),  GetXMLToken(XML_N_OOOC),    XmlNamespace::OOOC );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_OF),    GetXMLToken(XML_N_OF),      XmlNamespace::OF );
 
         if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
         {
             mpNamespaceMap->Add(
-                GetXMLToken(XML_NP_TABLE_EXT), GetXMLToken(XML_N_TABLE_EXT), XML_NAMESPACE_TABLE_EXT);
+                GetXMLToken(XML_NP_TABLE_EXT), GetXMLToken(XML_N_TABLE_EXT), XmlNamespace::TABLE_EXT);
             mpNamespaceMap->Add(
-                GetXMLToken(XML_NP_CALC_EXT), GetXMLToken(XML_N_CALC_EXT), XML_NAMESPACE_CALC_EXT);
+                GetXMLToken(XML_NP_CALC_EXT), GetXMLToken(XML_N_CALC_EXT), XmlNamespace::CALC_EXT);
             mpNamespaceMap->Add(
-                GetXMLToken(XML_NP_DRAW_EXT), GetXMLToken(XML_N_DRAW_EXT), XML_NAMESPACE_DRAW_EXT);
+                GetXMLToken(XML_NP_DRAW_EXT), GetXMLToken(XML_N_DRAW_EXT), XmlNamespace::DRAW_EXT);
             mpNamespaceMap->Add(
                 GetXMLToken(XML_NP_LO_EXT), GetXMLToken(XML_N_LO_EXT),
-                XML_NAMESPACE_LO_EXT);
-            mpNamespaceMap->Add( GetXMLToken(XML_NP_FIELD), GetXMLToken(XML_N_FIELD), XML_NAMESPACE_FIELD );
+                XmlNamespace::LO_EXT);
+            mpNamespaceMap->Add( GetXMLToken(XML_NP_FIELD), GetXMLToken(XML_N_FIELD), XmlNamespace::FIELD );
         }
     }
     if( getExportFlags() & (SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::CONTENT) )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_MATH), GetXMLToken(XML_N_MATH), XML_NAMESPACE_MATH );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM), XML_NAMESPACE_FORM );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_MATH), GetXMLToken(XML_N_MATH), XmlNamespace::MATH );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM), XmlNamespace::FORM );
     }
     if( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::CONTENT|SvXMLExportFlags::SCRIPTS) )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT), XML_NAMESPACE_SCRIPT );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_DOM), GetXMLToken(XML_N_DOM), XML_NAMESPACE_DOM );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT), XmlNamespace::SCRIPT );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_DOM), GetXMLToken(XML_N_DOM), XmlNamespace::DOM );
     }
     if( getExportFlags() & SvXMLExportFlags::CONTENT )
     {
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_XFORMS_1_0), GetXMLToken(XML_N_XFORMS_1_0), XML_NAMESPACE_XFORMS );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_XSD), GetXMLToken(XML_N_XSD), XML_NAMESPACE_XSD );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_XSI), GetXMLToken(XML_N_XSI), XML_NAMESPACE_XSI );
-        mpNamespaceMap->Add( GetXMLToken(XML_NP_FORMX), GetXMLToken(XML_N_FORMX), XML_NAMESPACE_FORMX );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_XFORMS_1_0), GetXMLToken(XML_N_XFORMS_1_0), XmlNamespace::XFORMS );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_XSD), GetXMLToken(XML_N_XSD), XmlNamespace::XSD );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_XSI), GetXMLToken(XML_N_XSI), XmlNamespace::XSI );
+        mpNamespaceMap->Add( GetXMLToken(XML_NP_FORMX), GetXMLToken(XML_N_FORMX), XmlNamespace::FORMX );
     }
 
     // RDFa: needed for content and header/footer styles
     if( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::CONTENT) )
     {
         mpNamespaceMap->Add( GetXMLToken(XML_NP_XHTML),
-            GetXMLToken(XML_N_XHTML), XML_NAMESPACE_XHTML );
+            GetXMLToken(XML_N_XHTML), XmlNamespace::XHTML );
     }
     // GRDDL: to convert RDFa and meta.xml to RDF
     if( getExportFlags() & (SvXMLExportFlags::META|SvXMLExportFlags::STYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::MASTERSTYLES|SvXMLExportFlags::CONTENT) )
     {
         mpNamespaceMap->Add( GetXMLToken(XML_NP_GRDDL),
-            GetXMLToken(XML_N_GRDDL), XML_NAMESPACE_GRDDL );
+            GetXMLToken(XML_N_GRDDL), XmlNamespace::GRDDL );
     }
     // CSS Text Level 3 for distributed text justification.
     if ( getExportFlags() & (SvXMLExportFlags::STYLES|SvXMLExportFlags::AUTOSTYLES|SvXMLExportFlags::MASTERSTYLES) )
     {
         mpNamespaceMap->Add(
-            GetXMLToken(XML_NP_CSS3TEXT), GetXMLToken(XML_N_CSS3TEXT), XML_NAMESPACE_CSS3TEXT );
+            GetXMLToken(XML_NP_CSS3TEXT), GetXMLToken(XML_N_CSS3TEXT), XmlNamespace::CSS3TEXT );
     }
 
     if (mxModel.is() && !mxEventListener.is())
@@ -854,7 +854,7 @@ SvXMLExport::EnsureNamespace(OUString const & i_rNamespace)
     OUString const aPreferredPrefix("gen");
     OUString sPrefix;
     sal_uInt16 nKey( GetNamespaceMap_().GetKeyByName( i_rNamespace ) );
-    if( XML_NAMESPACE_UNKNOWN == nKey )
+    if( XmlNamespace::UNKNOWN == nKey )
     {
         // There is no prefix for the namespace, so
         // we have to generate one and have to add it.
@@ -1065,7 +1065,7 @@ void SvXMLExport::ImplExportSettings()
     {
         SvXMLElementExport aElem( *this,
                                 nSettingsCount != 0,
-                                XML_NAMESPACE_OFFICE, XML_SETTINGS,
+                                XmlNamespace::OFFICE, XML_SETTINGS,
                                 true, true );
 
         SettingsExportFacade aSettingsExportContext( *this );
@@ -1077,7 +1077,7 @@ void SvXMLExport::ImplExportSettings()
                 continue;
 
             const OUString& sSettingsName( GetXMLToken( settings.eGroupName ) );
-            OUString sQName = GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OOO, sSettingsName );
+            OUString sQName = GetNamespaceMap().GetQNameByKey( XmlNamespace::OOO, sSettingsName );
             aSettingsExportHelper.exportAllSettings( settings.aSettings, sQName );
         }
     }
@@ -1089,7 +1089,7 @@ void SvXMLExport::ImplExportStyles()
 
     {
         // <style:styles>
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_OFFICE, XML_STYLES,
+        SvXMLElementExport aElem( *this, XmlNamespace::OFFICE, XML_STYLES,
                                 true, true );
 
         ExportStyles_( false );
@@ -1132,7 +1132,7 @@ void SvXMLExport::ImplExportAutoStyles()
 
     {
         // <style:automatic-styles>
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_OFFICE,
+        SvXMLElementExport aElem( *this, XmlNamespace::OFFICE,
                                   XML_AUTOMATIC_STYLES, true, true );
 
         ExportAutoStyles_();
@@ -1142,7 +1142,7 @@ void SvXMLExport::ImplExportAutoStyles()
 void SvXMLExport::ImplExportMasterStyles()
 {
     // <style:master-styles>
-    SvXMLElementExport aElem( *this, XML_NAMESPACE_OFFICE, XML_MASTER_STYLES,
+    SvXMLElementExport aElem( *this, XmlNamespace::OFFICE, XML_MASTER_STYLES,
                             true, true );
 
     ExportMasterStyles_();
@@ -1155,13 +1155,13 @@ void SvXMLExport::ImplExportContent()
     CheckAttrList();
 
     {
-        SvXMLElementExport aElement( *this, XML_NAMESPACE_OFFICE, XML_BODY,
+        SvXMLElementExport aElement( *this, XmlNamespace::OFFICE, XML_BODY,
                                   true, true );
         {
             XMLTokenEnum eClass = meClass;
             if( XML_TEXT_GLOBAL == eClass )
             {
-                AddAttribute( XML_NAMESPACE_TEXT, XML_GLOBAL,
+                AddAttribute( XmlNamespace::TEXT, XML_GLOBAL,
                       GetXMLToken( XML_TRUE ) );
                 eClass = XML_TEXT;
             }
@@ -1170,7 +1170,7 @@ void SvXMLExport::ImplExportContent()
             // <office:body ...>
             SetBodyAttributes();
             SvXMLElementExport aElem( *this, meClass != XML_TOKEN_INVALID,
-                                      XML_NAMESPACE_OFFICE, eClass,
+                                      XmlNamespace::OFFICE, eClass,
                                         true, true );
 
             ExportContent_();
@@ -1196,7 +1196,7 @@ lcl_AddGrddl(SvXMLExport const & rExport, const SvXMLExportFlags /*nExportMode*/
 #if 0
     if (SvXMLExportFlags::SETTINGS != nExportMode) // meta, content, styles
     {
-        rExport.AddAttribute( XML_NAMESPACE_GRDDL, XML_TRANSFORMATION,
+        rExport.AddAttribute( XmlNamespace::GRDDL, XML_TRANSFORMATION,
             OUString("http://FIXME") );
     }
 #endif
@@ -1329,7 +1329,7 @@ ErrCode SvXMLExport::exportDoc( enum ::xmloff::token::XMLTokenEnum eClass )
 
     if (pVersion)
     {
-        AddAttribute( XML_NAMESPACE_OFFICE, XML_VERSION,
+        AddAttribute( XmlNamespace::OFFICE, XML_VERSION,
                           OUString::createFromAscii(pVersion) );
     }
 
@@ -1367,11 +1367,11 @@ ErrCode SvXMLExport::exportDoc( enum ::xmloff::token::XMLTokenEnum eClass )
             if( eClass != XML_TOKEN_INVALID )
             {
                 OUString aTmp = "application/vnd.oasis.opendocument." + GetXMLToken( eClass );
-                AddAttribute( XML_NAMESPACE_OFFICE, XML_MIMETYPE, aTmp );
+                AddAttribute( XmlNamespace::OFFICE, XML_MIMETYPE, aTmp );
             }
         }
 
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_OFFICE, eRootService, true, true );
+        SvXMLElementExport aElem( *this, XmlNamespace::OFFICE, eRootService, true, true );
 
         // meta information
         if( mnExportFlags & SvXMLExportFlags::META )
@@ -1453,12 +1453,12 @@ void SvXMLExport::ExportMeta_()
         pMeta->Export();
     } else {
         // office:meta
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_OFFICE, XML_META,
+        SvXMLElementExport aElem( *this, XmlNamespace::OFFICE, XML_META,
                                 true, true );
         {
     // BM: #i60323# export generator even if xInfoProp is empty (which is the
     // case for charts). The generator does not depend on xInfoProp
-            SvXMLElementExport anElem( *this, XML_NAMESPACE_META, XML_GENERATOR,
+            SvXMLElementExport anElem( *this, XmlNamespace::META, XML_GENERATOR,
                                       true, true );
             Characters(generator);
         }
@@ -1467,15 +1467,15 @@ void SvXMLExport::ExportMeta_()
 
 void SvXMLExport::ExportScripts_()
 {
-    SvXMLElementExport aElement( *this, XML_NAMESPACE_OFFICE, XML_SCRIPTS, true, true );
+    SvXMLElementExport aElement( *this, XmlNamespace::OFFICE, XML_SCRIPTS, true, true );
 
     // export Basic macros (only for FlatXML)
     if ( mnExportFlags & SvXMLExportFlags::EMBEDDED )
     {
-        OUString aValue( GetNamespaceMap().GetPrefixByKey( XML_NAMESPACE_OOO ) + ":Basic" );
-        AddAttribute( XML_NAMESPACE_SCRIPT, XML_LANGUAGE, aValue );
+        OUString aValue( GetNamespaceMap().GetPrefixByKey( XmlNamespace::OOO ) + ":Basic" );
+        AddAttribute( XmlNamespace::SCRIPT, XML_LANGUAGE, aValue );
 
-        SvXMLElementExport aElem( *this, XML_NAMESPACE_OFFICE, XML_SCRIPT, true, true );
+        SvXMLElementExport aElem( *this, XmlNamespace::OFFICE, XML_SCRIPT, true, true );
 
         // initialize Basic
         if ( mxModel.is() )
@@ -2311,7 +2311,7 @@ SvXMLExport::AddAttributeIdLegacy(
         case SvtSaveOptions::ODFSVER_011: // fall through
         case SvtSaveOptions::ODFSVER_010: break;
         default: // ODF 1.2: xml:id
-            AddAttribute(XML_NAMESPACE_XML, XML_ID, rValue);
+            AddAttribute(XmlNamespace::XML, XML_ID, rValue);
     }
     // in ODF 1.1 this was form:id, anim:id, draw:id, or text:id
     // backward compatibility: in ODF 1.2 write _both_ id attrs
@@ -2343,7 +2343,7 @@ SvXMLExport::AddAttributeXmlId(uno::Reference<uno::XInterface> const & i_xIfc)
     {
         if ( streamName == mdref.First )
         {
-            AddAttribute( XML_NAMESPACE_XML, XML_ID, mdref.Second );
+            AddAttribute( XmlNamespace::XML, XML_ID, mdref.Second );
         }
         else
         {
@@ -2360,7 +2360,7 @@ SvXMLExport::AddAttributeXmlId(uno::Reference<uno::XInterface> const & i_xIfc)
         //    or content, and prefix "s" or "c" => unique
         if ( mdref.First == "content.xml" )
         {
-            AddAttribute( XML_NAMESPACE_XML, XML_ID, mdref.Second );
+            AddAttribute( XmlNamespace::XML, XML_ID, mdref.Second );
         }
         else
         {
diff --git a/xmloff/source/core/xmlictxt.cxx b/xmloff/source/core/xmlictxt.cxx
index bc1d2a8486bf..c04ef7fe7e68 100644
--- a/xmloff/source/core/xmlictxt.cxx
+++ b/xmloff/source/core/xmlictxt.cxx
@@ -26,7 +26,7 @@
 
 using namespace ::com::sun::star;
 
-SvXMLImportContext::SvXMLImportContext( SvXMLImport& rImp, sal_uInt16 nPrfx,
+SvXMLImportContext::SvXMLImportContext( SvXMLImport& rImp, XmlNamespace nPrfx,
                               const OUString& rLName )
     : mrImport(rImp)
     , maLocalName(rLName)
@@ -48,7 +48,7 @@ SvXMLImportContext::~SvXMLImportContext()
 {
 }
 
-SvXMLImportContextRef SvXMLImportContext::CreateChildContext( sal_uInt16 /*nPrefix*/,
+SvXMLImportContextRef SvXMLImportContext::CreateChildContext( XmlNamespace /*nPrefix*/,
         const OUString& /*rLocalName*/,
         const uno::Reference<xml::sax::XAttributeList>& )
 {
diff --git a/xmloff/source/core/xmlimp.cxx b/xmloff/source/core/xmlimp.cxx
index 1da507dfda76..08fc47a5c0b7 100644
--- a/xmloff/source/core/xmlimp.cxx
+++ b/xmloff/source/core/xmlimp.cxx
@@ -344,43 +344,43 @@ void SvXMLImport::InitCtor_()
     if( mnImportFlags != SvXMLImportFlags::NONE )
     {
         // implicit "xml" namespace prefix
-        mpNamespaceMap->Add( GetXMLToken(XML_XML), GetXMLToken(XML_N_XML), XML_NAMESPACE_XML );
-        mpNamespaceMap->Add( "_office", GetXMLToken(XML_N_OFFICE), XML_NAMESPACE_OFFICE );
-        mpNamespaceMap->Add( "_office_ooo", GetXMLToken(XML_N_OFFICE_EXT), XML_NAMESPACE_OFFICE_EXT );
-        mpNamespaceMap->Add( "_ooo", GetXMLToken(XML_N_OOO), XML_NAMESPACE_OOO );
-        mpNamespaceMap->Add( "_style", GetXMLToken(XML_N_STYLE), XML_NAMESPACE_STYLE );
-        mpNamespaceMap->Add( "_text", GetXMLToken(XML_N_TEXT), XML_NAMESPACE_TEXT );
-        mpNamespaceMap->Add( "_table", GetXMLToken(XML_N_TABLE), XML_NAMESPACE_TABLE );
-        mpNamespaceMap->Add( "_table_ooo", GetXMLToken(XML_N_TABLE_EXT), XML_NAMESPACE_TABLE_EXT );
-        mpNamespaceMap->Add( "_draw", GetXMLToken(XML_N_DRAW), XML_NAMESPACE_DRAW );
-        mpNamespaceMap->Add( "_draw_ooo", GetXMLToken(XML_N_DRAW_EXT), XML_NAMESPACE_DRAW_EXT );
-        mpNamespaceMap->Add( "_dr3d", GetXMLToken(XML_N_DR3D), XML_NAMESPACE_DR3D );
-        mpNamespaceMap->Add( "_fo", GetXMLToken(XML_N_FO_COMPAT), XML_NAMESPACE_FO );
-        mpNamespaceMap->Add( "_xlink", GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK );
-        mpNamespaceMap->Add( "_dc", GetXMLToken(XML_N_DC), XML_NAMESPACE_DC );
-        mpNamespaceMap->Add( "_dom", GetXMLToken(XML_N_DOM), XML_NAMESPACE_DOM );
-        mpNamespaceMap->Add( "_meta", GetXMLToken(XML_N_META), XML_NAMESPACE_META );
-        mpNamespaceMap->Add( "_number", GetXMLToken(XML_N_NUMBER), XML_NAMESPACE_NUMBER );
-        mpNamespaceMap->Add( "_svg", GetXMLToken(XML_N_SVG_COMPAT), XML_NAMESPACE_SVG );
-        mpNamespaceMap->Add( "_chart", GetXMLToken(XML_N_CHART), XML_NAMESPACE_CHART );
-        mpNamespaceMap->Add( "_math", GetXMLToken(XML_N_MATH), XML_NAMESPACE_MATH );
-        mpNamespaceMap->Add( "_form", GetXMLToken(XML_N_FORM), XML_NAMESPACE_FORM );
-        mpNamespaceMap->Add( "_script", GetXMLToken(XML_N_SCRIPT), XML_NAMESPACE_SCRIPT );
-        mpNamespaceMap->Add( "_config", GetXMLToken(XML_N_CONFIG), XML_NAMESPACE_CONFIG );
-        mpNamespaceMap->Add( "_xforms", GetXMLToken(XML_N_XFORMS_1_0), XML_NAMESPACE_XFORMS );
-        mpNamespaceMap->Add( "_formx", GetXMLToken( XML_N_FORMX ), XML_NAMESPACE_FORMX );
-        mpNamespaceMap->Add( "_xsd", GetXMLToken(XML_N_XSD), XML_NAMESPACE_XSD );
-        mpNamespaceMap->Add( "_xsi", GetXMLToken(XML_N_XSI), XML_NAMESPACE_XFORMS );
-        mpNamespaceMap->Add( "_ooow", GetXMLToken(XML_N_OOOW), XML_NAMESPACE_OOOW );
-        mpNamespaceMap->Add( "_oooc", GetXMLToken(XML_N_OOOC), XML_NAMESPACE_OOOC );
-        mpNamespaceMap->Add( "_field", GetXMLToken(XML_N_FIELD), XML_NAMESPACE_FIELD );
-        mpNamespaceMap->Add( "_of", GetXMLToken(XML_N_OF), XML_NAMESPACE_OF );
-        mpNamespaceMap->Add( "_xhtml", GetXMLToken(XML_N_XHTML), XML_NAMESPACE_XHTML );
-        mpNamespaceMap->Add( "_css3text", GetXMLToken(XML_N_CSS3TEXT), XML_NAMESPACE_CSS3TEXT );
-
-        mpNamespaceMap->Add( "_calc_libo", GetXMLToken(XML_N_CALC_EXT), XML_NAMESPACE_CALC_EXT);
+        mpNamespaceMap->Add( GetXMLToken(XML_XML), GetXMLToken(XML_N_XML), XmlNamespace::XML );
+        mpNamespaceMap->Add( "_office", GetXMLToken(XML_N_OFFICE), XmlNamespace::OFFICE );
+        mpNamespaceMap->Add( "_office_ooo", GetXMLToken(XML_N_OFFICE_EXT), XmlNamespace::OFFICE_EXT );
+        mpNamespaceMap->Add( "_ooo", GetXMLToken(XML_N_OOO), XmlNamespace::OOO );
+        mpNamespaceMap->Add( "_style", GetXMLToken(XML_N_STYLE), XmlNamespace::STYLE );
+        mpNamespaceMap->Add( "_text", GetXMLToken(XML_N_TEXT), XmlNamespace::TEXT );
+        mpNamespaceMap->Add( "_table", GetXMLToken(XML_N_TABLE), XmlNamespace::TABLE );
+        mpNamespaceMap->Add( "_table_ooo", GetXMLToken(XML_N_TABLE_EXT), XmlNamespace::TABLE_EXT );
+        mpNamespaceMap->Add( "_draw", GetXMLToken(XML_N_DRAW), XmlNamespace::DRAW );
+        mpNamespaceMap->Add( "_draw_ooo", GetXMLToken(XML_N_DRAW_EXT), XmlNamespace::DRAW_EXT );
+        mpNamespaceMap->Add( "_dr3d", GetXMLToken(XML_N_DR3D), XmlNamespace::DR3D );
+        mpNamespaceMap->Add( "_fo", GetXMLToken(XML_N_FO_COMPAT), XmlNamespace::FO );
+        mpNamespaceMap->Add( "_xlink", GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK );
+        mpNamespaceMap->Add( "_dc", GetXMLToken(XML_N_DC), XmlNamespace::DC );
+        mpNamespaceMap->Add( "_dom", GetXMLToken(XML_N_DOM), XmlNamespace::DOM );
+        mpNamespaceMap->Add( "_meta", GetXMLToken(XML_N_META), XmlNamespace::META );
+        mpNamespaceMap->Add( "_number", GetXMLToken(XML_N_NUMBER), XmlNamespace::NUMBER );
+        mpNamespaceMap->Add( "_svg", GetXMLToken(XML_N_SVG_COMPAT), XmlNamespace::SVG );
+        mpNamespaceMap->Add( "_chart", GetXMLToken(XML_N_CHART), XmlNamespace::CHART );
+        mpNamespaceMap->Add( "_math", GetXMLToken(XML_N_MATH), XmlNamespace::MATH );
+        mpNamespaceMap->Add( "_form", GetXMLToken(XML_N_FORM), XmlNamespace::FORM );
+        mpNamespaceMap->Add( "_script", GetXMLToken(XML_N_SCRIPT), XmlNamespace::SCRIPT );
+        mpNamespaceMap->Add( "_config", GetXMLToken(XML_N_CONFIG), XmlNamespace::CONFIG );
+        mpNamespaceMap->Add( "_xforms", GetXMLToken(XML_N_XFORMS_1_0), XmlNamespace::XFORMS );
+        mpNamespaceMap->Add( "_formx", GetXMLToken( XML_N_FORMX ), XmlNamespace::FORMX );
+        mpNamespaceMap->Add( "_xsd", GetXMLToken(XML_N_XSD), XmlNamespace::XSD );
+        mpNamespaceMap->Add( "_xsi", GetXMLToken(XML_N_XSI), XmlNamespace::XFORMS );
+        mpNamespaceMap->Add( "_ooow", GetXMLToken(XML_N_OOOW), XmlNamespace::OOOW );
+        mpNamespaceMap->Add( "_oooc", GetXMLToken(XML_N_OOOC), XmlNamespace::OOOC );
+        mpNamespaceMap->Add( "_field", GetXMLToken(XML_N_FIELD), XmlNamespace::FIELD );
+        mpNamespaceMap->Add( "_of", GetXMLToken(XML_N_OF), XmlNamespace::OF );
+        mpNamespaceMap->Add( "_xhtml", GetXMLToken(XML_N_XHTML), XmlNamespace::XHTML );
+        mpNamespaceMap->Add( "_css3text", GetXMLToken(XML_N_CSS3TEXT), XmlNamespace::CSS3TEXT );
+
+        mpNamespaceMap->Add( "_calc_libo", GetXMLToken(XML_N_CALC_EXT), XmlNamespace::CALC_EXT);
         mpNamespaceMap->Add( "_office_libo",
-                             GetXMLToken(XML_N_LO_EXT), XML_NAMESPACE_LO_EXT);
+                             GetXMLToken(XML_N_LO_EXT), XmlNamespace::LO_EXT);
     }
 
     if (mxNumberFormatsSupplier.is())
@@ -702,14 +702,14 @@ std::unique_ptr<SvXMLNamespaceMap> SvXMLImport::processNSAttributes(
             sal_uInt16 nKey = mpNamespaceMap->AddIfKnown( aPrefix, rAttrValue );
             // If namespace is unknown, try to match a name with similar
             // TC Id and version
-            if( XML_NAMESPACE_UNKNOWN == nKey  )
+            if( XmlNamespace::UNKNOWN == nKey  )
             {
                 OUString aTestName( rAttrValue );
                 if( SvXMLNamespaceMap::NormalizeURI( aTestName ) )
                     nKey = mpNamespaceMap->AddIfKnown( aPrefix, aTestName );
             }
             // If that namespace is not known, too, add it as unknown
-            if( XML_NAMESPACE_UNKNOWN == nKey  )
+            if( XmlNamespace::UNKNOWN == nKey  )
                 mpNamespaceMap->Add( aPrefix, rAttrValue );
 
         }
@@ -1646,7 +1646,7 @@ void SvXMLImport::SetAutoStyles( SvXMLStylesContext *pAutoStyles )
             if (aAny >>= nKey)
             {
                 SvXMLStyleContext* pContext = new SvXMLNumFormatContext(
-                    *this, XML_NAMESPACE_NUMBER, name, xAttrList, nKey,
+                    *this, XmlNamespace::NUMBER, name, xAttrList, nKey,
                     GetDataStylesImport()->GetLanguageForKey(nKey), *pAutoStyles);
                 pAutoStyles->AddStyle(*pContext);
             }
@@ -2094,82 +2094,82 @@ void SvXMLImport::initializeNamespaceMaps()
         }
     };
 
-    mapTokenToNamespace( XML_NAMESPACE_OFFICE,           XML_NP_OFFICE,        XML_N_OFFICE           );
-    mapTokenToNamespace( XML_NAMESPACE_OFFICE_SO52,      XML_NP_OFFICE,        XML_N_OFFICE_OLD       );
-    mapTokenToNamespace( XML_NAMESPACE_OFFICE_OOO,       XML_NP_OFFICE,        XML_N_OFFICE_OOO       );
-    mapTokenToNamespace( XML_NAMESPACE_STYLE,            XML_NP_STYLE,         XML_N_STYLE            );
-    mapTokenToNamespace( XML_NAMESPACE_STYLE_SO52,       XML_NP_STYLE,         XML_N_STYLE_OLD        );
-    mapTokenToNamespace( XML_NAMESPACE_STYLE_OOO,        XML_NP_STYLE,         XML_N_STYLE_OOO        );
-    mapTokenToNamespace( XML_NAMESPACE_TEXT,             XML_NP_TEXT,          XML_N_TEXT             );
-    mapTokenToNamespace( XML_NAMESPACE_TEXT_SO52,        XML_NP_TEXT,          XML_N_TEXT_OLD         );
-    mapTokenToNamespace( XML_NAMESPACE_TEXT_OOO,         XML_NP_TEXT,          XML_N_TEXT_OOO         );
-    mapTokenToNamespace( XML_NAMESPACE_TABLE,            XML_NP_TABLE,         XML_N_TABLE            );
-    mapTokenToNamespace( XML_NAMESPACE_TABLE_SO52,       XML_NP_TABLE,         XML_N_TABLE_OLD        );
-    mapTokenToNamespace( XML_NAMESPACE_TABLE_OOO,        XML_NP_TABLE,         XML_N_TABLE_OOO        );
-    mapTokenToNamespace( XML_NAMESPACE_DRAW,             XML_NP_DRAW,          XML_N_DRAW             );
-    mapTokenToNamespace( XML_NAMESPACE_DRAW_SO52,        XML_NP_DRAW,          XML_N_DRAW_OLD         );
-    mapTokenToNamespace( XML_NAMESPACE_DRAW_OOO,         XML_NP_DRAW,          XML_N_DRAW_OOO         );
-    mapTokenToNamespace( XML_NAMESPACE_FO,               XML_NP_FO,            XML_N_FO               );
-    mapTokenToNamespace( XML_NAMESPACE_FO_SO52,          XML_NP_FO,            XML_N_FO_OLD           );
-    mapTokenToNamespace( XML_NAMESPACE_FO_COMPAT,        XML_NP_FO,            XML_N_FO_COMPAT        );
-    mapTokenToNamespace( XML_NAMESPACE_XLINK,            XML_NP_XLINK,         XML_N_XLINK            );
-    mapTokenToNamespace( XML_NAMESPACE_XLINK_SO52,       XML_NP_XLINK,         XML_N_XLINK_OLD        );
-    mapTokenToNamespace( XML_NAMESPACE_DC,               XML_NP_DC,            XML_N_DC               );
-    mapTokenToNamespace( XML_NAMESPACE_META,             XML_NP_META,          XML_N_META             );
-    mapTokenToNamespace( XML_NAMESPACE_META_SO52,        XML_NP_META,          XML_N_META_OLD         );
-    mapTokenToNamespace( XML_NAMESPACE_META_OOO,         XML_NP_META,          XML_N_META_OOO         );
-    mapTokenToNamespace( XML_NAMESPACE_NUMBER,           XML_NP_NUMBER,        XML_N_NUMBER           );
-    mapTokenToNamespace( XML_NAMESPACE_NUMBER_SO52,      XML_NP_NUMBER,        XML_N_NUMBER_OLD       );
-    mapTokenToNamespace( XML_NAMESPACE_NUMBER_OOO,       XML_NP_NUMBER,        XML_N_NUMBER_OOO       );
-    mapTokenToNamespace( XML_NAMESPACE_PRESENTATION,     XML_NP_PRESENTATION,  XML_N_PRESENTATION     );
-    mapTokenToNamespace( XML_NAMESPACE_PRESENTATION_SO52,XML_NP_PRESENTATION,  XML_N_PRESENTATION_OLD );
-    mapTokenToNamespace( XML_NAMESPACE_PRESENTATION_OOO, XML_NP_PRESENTATION,  XML_N_PRESENTATION_OOO );
-    mapTokenToNamespace( XML_NAMESPACE_PRESENTATION_OASIS, XML_NP_PRESENTATION, XML_N_PRESENTATION_OASIS );
-    mapTokenToNamespace( XML_NAMESPACE_SVG,              XML_NP_SVG,           XML_N_SVG              );
-    mapTokenToNamespace( XML_NAMESPACE_SVG_COMPAT,       XML_NP_SVG,           XML_N_SVG_COMPAT       );
-    mapTokenToNamespace( XML_NAMESPACE_CHART,            XML_NP_CHART,         XML_N_CHART            );
-    mapTokenToNamespace( XML_NAMESPACE_CHART_SO52,       XML_NP_CHART,         XML_N_CHART_OLD        );
-    mapTokenToNamespace( XML_NAMESPACE_CHART_OOO,        XML_NP_CHART,         XML_N_CHART_OOO        );
-    mapTokenToNamespace( XML_NAMESPACE_DR3D,             XML_NP_DR3D,          XML_N_DR3D             );
-    mapTokenToNamespace( XML_NAMESPACE_DR3D_OOO,         XML_NP_DR3D,          XML_N_DR3D_OOO         );
-    mapTokenToNamespace( XML_NAMESPACE_MATH,             XML_NP_MATH,          XML_N_MATH             );
-    mapTokenToNamespace( XML_NAMESPACE_VERSIONS_LIST,    XML_NP_VERSIONS_LIST, XML_N_VERSIONS_LIST    );
-    mapTokenToNamespace( XML_NAMESPACE_FORM,             XML_NP_FORM,          XML_N_FORM             );
-    mapTokenToNamespace( XML_NAMESPACE_FORM_OOO,         XML_NP_FORM,          XML_N_FORM_OOO         );
-    mapTokenToNamespace( XML_NAMESPACE_SCRIPT,           XML_NP_SCRIPT,        XML_N_SCRIPT           );
-    mapTokenToNamespace( XML_NAMESPACE_SCRIPT_OOO,       XML_NP_SCRIPT,        XML_N_SCRIPT_OOO       );
-    mapTokenToNamespace( XML_NAMESPACE_BLOCKLIST,        XML_NP_BLOCK_LIST,    XML_N_BLOCK_LIST       );
-    mapTokenToNamespace( XML_NAMESPACE_CONFIG,           XML_NP_CONFIG,        XML_N_CONFIG           );
-    mapTokenToNamespace( XML_NAMESPACE_CONFIG_OOO,       XML_NP_CONFIG,        XML_N_CONFIG_OOO       );
-    mapTokenToNamespace( XML_NAMESPACE_OOO,              XML_NP_OOO,           XML_N_OOO              );
-    mapTokenToNamespace( XML_NAMESPACE_OOOW,             XML_NP_OOOW,          XML_N_OOOW             );
-    mapTokenToNamespace( XML_NAMESPACE_OOOC,             XML_NP_OOOC,          XML_N_OOOC             );
-    mapTokenToNamespace( XML_NAMESPACE_DOM,              XML_NP_DOM,           XML_N_DOM              );
-    mapTokenToNamespace( XML_NAMESPACE_DB,               XML_NP_DB,            XML_N_DB               );
-    mapTokenToNamespace( XML_NAMESPACE_DB_OASIS,         XML_NP_DB,            XML_N_DB_OASIS         );
-    mapTokenToNamespace( XML_NAMESPACE_DLG,              XML_NP_DLG,           XML_N_DLG              );
-    mapTokenToNamespace( XML_NAMESPACE_XFORMS,           XML_NP_XFORMS_1_0,    XML_N_XFORMS_1_0       );
-    mapTokenToNamespace( XML_NAMESPACE_XSD,              XML_NP_XSD,           XML_N_XSD              );
-    mapTokenToNamespace( XML_NAMESPACE_XSI,              XML_NP_XSI,           XML_N_XSI              );
-    mapTokenToNamespace( XML_NAMESPACE_SMIL,             XML_NP_SMIL,          XML_N_SMIL             );
-    mapTokenToNamespace( XML_NAMESPACE_SMIL_SO52,        XML_NP_SMIL,          XML_N_SMIL_OLD         );
-    mapTokenToNamespace( XML_NAMESPACE_SMIL_COMPAT,      XML_NP_SMIL,          XML_N_SMIL_COMPAT      );
-    mapTokenToNamespace( XML_NAMESPACE_ANIMATION,        XML_NP_ANIMATION,     XML_N_ANIMATION        );
-    mapTokenToNamespace( XML_NAMESPACE_ANIMATION_OOO,    XML_NP_ANIMATION,     XML_N_ANIMATION_OOO    );
-    mapTokenToNamespace( XML_NAMESPACE_REPORT,           XML_NP_RPT,           XML_N_RPT              );
-    mapTokenToNamespace( XML_NAMESPACE_REPORT_OASIS,     XML_NP_RPT,           XML_N_RPT_OASIS        );
-    mapTokenToNamespace( XML_NAMESPACE_OF,               XML_NP_OF,            XML_N_OF               );
-    mapTokenToNamespace( XML_NAMESPACE_XHTML,            XML_NP_XHTML,         XML_N_XHTML            );
-    mapTokenToNamespace( XML_NAMESPACE_GRDDL,            XML_NP_GRDDL,         XML_N_GRDDL            );
-    mapTokenToNamespace( XML_NAMESPACE_OFFICE_EXT,       XML_NP_OFFICE_EXT,    XML_N_OFFICE_EXT       );
-    mapTokenToNamespace( XML_NAMESPACE_TABLE_EXT,        XML_NP_TABLE_EXT,     XML_N_TABLE_EXT        );
-    mapTokenToNamespace( XML_NAMESPACE_CHART_EXT,        XML_NP_CHART_EXT,     XML_N_CHART_EXT        );
-    mapTokenToNamespace( XML_NAMESPACE_DRAW_EXT,         XML_NP_DRAW_EXT,      XML_N_DRAW_EXT         );
-    mapTokenToNamespace( XML_NAMESPACE_CALC_EXT,         XML_NP_CALC_EXT,      XML_N_CALC_EXT         );
-    mapTokenToNamespace( XML_NAMESPACE_LO_EXT,           XML_NP_LO_EXT,        XML_N_LO_EXT           );
-    mapTokenToNamespace( XML_NAMESPACE_CSS3TEXT,         XML_NP_CSS3TEXT,      XML_N_CSS3TEXT         );
-    mapTokenToNamespace( XML_NAMESPACE_FIELD,            XML_NP_FIELD,         XML_N_FIELD            );
-    mapTokenToNamespace( XML_NAMESPACE_FORMX,            XML_NP_FORMX,         XML_N_FORMX            );
+    mapTokenToNamespace( XmlNamespace::OFFICE,           XML_NP_OFFICE,        XML_N_OFFICE           );
+    mapTokenToNamespace( XmlNamespace::OFFICE_SO52,      XML_NP_OFFICE,        XML_N_OFFICE_OLD       );
+    mapTokenToNamespace( XmlNamespace::OFFICE_OOO,       XML_NP_OFFICE,        XML_N_OFFICE_OOO       );
+    mapTokenToNamespace( XmlNamespace::STYLE,            XML_NP_STYLE,         XML_N_STYLE            );
+    mapTokenToNamespace( XmlNamespace::STYLE_SO52,       XML_NP_STYLE,         XML_N_STYLE_OLD        );
+    mapTokenToNamespace( XmlNamespace::STYLE_OOO,        XML_NP_STYLE,         XML_N_STYLE_OOO        );
+    mapTokenToNamespace( XmlNamespace::TEXT,             XML_NP_TEXT,          XML_N_TEXT             );
+    mapTokenToNamespace( XmlNamespace::TEXT_SO52,        XML_NP_TEXT,          XML_N_TEXT_OLD         );
+    mapTokenToNamespace( XmlNamespace::TEXT_OOO,         XML_NP_TEXT,          XML_N_TEXT_OOO         );
+    mapTokenToNamespace( XmlNamespace::TABLE,            XML_NP_TABLE,         XML_N_TABLE            );
+    mapTokenToNamespace( XmlNamespace::TABLE_SO52,       XML_NP_TABLE,         XML_N_TABLE_OLD        );
+    mapTokenToNamespace( XmlNamespace::TABLE_OOO,        XML_NP_TABLE,         XML_N_TABLE_OOO        );
+    mapTokenToNamespace( XmlNamespace::DRAW,             XML_NP_DRAW,          XML_N_DRAW             );
+    mapTokenToNamespace( XmlNamespace::DRAW_SO52,        XML_NP_DRAW,          XML_N_DRAW_OLD         );
+    mapTokenToNamespace( XmlNamespace::DRAW_OOO,         XML_NP_DRAW,          XML_N_DRAW_OOO         );
+    mapTokenToNamespace( XmlNamespace::FO,               XML_NP_FO,            XML_N_FO               );
+    mapTokenToNamespace( XmlNamespace::FO_SO52,          XML_NP_FO,            XML_N_FO_OLD           );
+    mapTokenToNamespace( XmlNamespace::FO_COMPAT,        XML_NP_FO,            XML_N_FO_COMPAT        );
+    mapTokenToNamespace( XmlNamespace::XLINK,            XML_NP_XLINK,         XML_N_XLINK            );
+    mapTokenToNamespace( XmlNamespace::XLINK_SO52,       XML_NP_XLINK,         XML_N_XLINK_OLD        );
+    mapTokenToNamespace( XmlNamespace::DC,               XML_NP_DC,            XML_N_DC               );
+    mapTokenToNamespace( XmlNamespace::META,             XML_NP_META,          XML_N_META             );
+    mapTokenToNamespace( XmlNamespace::META_SO52,        XML_NP_META,          XML_N_META_OLD         );
+    mapTokenToNamespace( XmlNamespace::META_OOO,         XML_NP_META,          XML_N_META_OOO         );
+    mapTokenToNamespace( XmlNamespace::NUMBER,           XML_NP_NUMBER,        XML_N_NUMBER           );
+    mapTokenToNamespace( XmlNamespace::NUMBER_SO52,      XML_NP_NUMBER,        XML_N_NUMBER_OLD       );
+    mapTokenToNamespace( XmlNamespace::NUMBER_OOO,       XML_NP_NUMBER,        XML_N_NUMBER_OOO       );
+    mapTokenToNamespace( XmlNamespace::PRESENTATION,     XML_NP_PRESENTATION,  XML_N_PRESENTATION     );
+    mapTokenToNamespace( XmlNamespace::PRESENTATION_SO52,XML_NP_PRESENTATION,  XML_N_PRESENTATION_OLD );
+    mapTokenToNamespace( XmlNamespace::PRESENTATION_OOO, XML_NP_PRESENTATION,  XML_N_PRESENTATION_OOO );
+    mapTokenToNamespace( XmlNamespace::PRESENTATION_OASIS, XML_NP_PRESENTATION, XML_N_PRESENTATION_OASIS );
+    mapTokenToNamespace( XmlNamespace::SVG,              XML_NP_SVG,           XML_N_SVG              );
+    mapTokenToNamespace( XmlNamespace::SVG_COMPAT,       XML_NP_SVG,           XML_N_SVG_COMPAT       );
+    mapTokenToNamespace( XmlNamespace::CHART,            XML_NP_CHART,         XML_N_CHART            );
+    mapTokenToNamespace( XmlNamespace::CHART_SO52,       XML_NP_CHART,         XML_N_CHART_OLD        );
+    mapTokenToNamespace( XmlNamespace::CHART_OOO,        XML_NP_CHART,         XML_N_CHART_OOO        );
+    mapTokenToNamespace( XmlNamespace::DR3D,             XML_NP_DR3D,          XML_N_DR3D             );
+    mapTokenToNamespace( XmlNamespace::DR3D_OOO,         XML_NP_DR3D,          XML_N_DR3D_OOO         );
+    mapTokenToNamespace( XmlNamespace::MATH,             XML_NP_MATH,          XML_N_MATH             );
+    mapTokenToNamespace( XmlNamespace::VERSIONS_LIST,    XML_NP_VERSIONS_LIST, XML_N_VERSIONS_LIST    );
+    mapTokenToNamespace( XmlNamespace::FORM,             XML_NP_FORM,          XML_N_FORM             );
+    mapTokenToNamespace( XmlNamespace::FORM_OOO,         XML_NP_FORM,          XML_N_FORM_OOO         );
+    mapTokenToNamespace( XmlNamespace::SCRIPT,           XML_NP_SCRIPT,        XML_N_SCRIPT           );
+    mapTokenToNamespace( XmlNamespace::SCRIPT_OOO,       XML_NP_SCRIPT,        XML_N_SCRIPT_OOO       );
+    mapTokenToNamespace( XmlNamespace::BLOCKLIST,        XML_NP_BLOCK_LIST,    XML_N_BLOCK_LIST       );
+    mapTokenToNamespace( XmlNamespace::CONFIG,           XML_NP_CONFIG,        XML_N_CONFIG           );
+    mapTokenToNamespace( XmlNamespace::CONFIG_OOO,       XML_NP_CONFIG,        XML_N_CONFIG_OOO       );
+    mapTokenToNamespace( XmlNamespace::OOO,              XML_NP_OOO,           XML_N_OOO              );
+    mapTokenToNamespace( XmlNamespace::OOOW,             XML_NP_OOOW,          XML_N_OOOW             );
+    mapTokenToNamespace( XmlNamespace::OOOC,             XML_NP_OOOC,          XML_N_OOOC             );
+    mapTokenToNamespace( XmlNamespace::DOM,              XML_NP_DOM,           XML_N_DOM              );
+    mapTokenToNamespace( XmlNamespace::DB,               XML_NP_DB,            XML_N_DB               );
+    mapTokenToNamespace( XmlNamespace::DB_OASIS,         XML_NP_DB,            XML_N_DB_OASIS         );
+    mapTokenToNamespace( XmlNamespace::DLG,              XML_NP_DLG,           XML_N_DLG              );
+    mapTokenToNamespace( XmlNamespace::XFORMS,           XML_NP_XFORMS_1_0,    XML_N_XFORMS_1_0       );
+    mapTokenToNamespace( XmlNamespace::XSD,              XML_NP_XSD,           XML_N_XSD              );
+    mapTokenToNamespace( XmlNamespace::XSI,              XML_NP_XSI,           XML_N_XSI              );
+    mapTokenToNamespace( XmlNamespace::SMIL,             XML_NP_SMIL,          XML_N_SMIL             );
+    mapTokenToNamespace( XmlNamespace::SMIL_SO52,        XML_NP_SMIL,          XML_N_SMIL_OLD         );
+    mapTokenToNamespace( XmlNamespace::SMIL_COMPAT,      XML_NP_SMIL,          XML_N_SMIL_COMPAT      );
+    mapTokenToNamespace( XmlNamespace::ANIMATION,        XML_NP_ANIMATION,     XML_N_ANIMATION        );
+    mapTokenToNamespace( XmlNamespace::ANIMATION_OOO,    XML_NP_ANIMATION,     XML_N_ANIMATION_OOO    );
+    mapTokenToNamespace( XmlNamespace::REPORT,           XML_NP_RPT,           XML_N_RPT              );
+    mapTokenToNamespace( XmlNamespace::REPORT_OASIS,     XML_NP_RPT,           XML_N_RPT_OASIS        );
+    mapTokenToNamespace( XmlNamespace::OF,               XML_NP_OF,            XML_N_OF               );
+    mapTokenToNamespace( XmlNamespace::XHTML,            XML_NP_XHTML,         XML_N_XHTML            );
+    mapTokenToNamespace( XmlNamespace::GRDDL,            XML_NP_GRDDL,         XML_N_GRDDL            );
+    mapTokenToNamespace( XmlNamespace::OFFICE_EXT,       XML_NP_OFFICE_EXT,    XML_N_OFFICE_EXT       );
+    mapTokenToNamespace( XmlNamespace::TABLE_EXT,        XML_NP_TABLE_EXT,     XML_N_TABLE_EXT        );
+    mapTokenToNamespace( XmlNamespace::CHART_EXT,        XML_NP_CHART_EXT,     XML_N_CHART_EXT        );
+    mapTokenToNamespace( XmlNamespace::DRAW_EXT,         XML_NP_DRAW_EXT,      XML_N_DRAW_EXT         );
+    mapTokenToNamespace( XmlNamespace::CALC_EXT,         XML_NP_CALC_EXT,      XML_N_CALC_EXT         );
+    mapTokenToNamespace( XmlNamespace::LO_EXT,           XML_NP_LO_EXT,        XML_N_LO_EXT           );
+    mapTokenToNamespace( XmlNamespace::CSS3TEXT,         XML_NP_CSS3TEXT,      XML_N_CSS3TEXT         );
+    mapTokenToNamespace( XmlNamespace::FIELD,            XML_NP_FIELD,         XML_N_FIELD            );
+    mapTokenToNamespace( XmlNamespace::FORMX,            XML_NP_FORMX,         XML_N_FORMX            );
 }
 
 void SvXMLImport::registerNamespaces()
@@ -2269,7 +2269,7 @@ void SAL_CALL SvXMLLegacyToFastDocHandler::startElement( const OUString& rName,
         const OUString& rAttrValue = xAttrList->getValueByIndex( i );
         sal_uInt16 const nAttrPrefix(mrImport->mpNamespaceMap->GetKeyByAttrName(
                 rAttrName, nullptr, &aLocalAttrName, &aNamespace));
-        if( XML_NAMESPACE_XMLNS != nAttrPrefix )
+        if( XmlNamespace::XMLNS != nAttrPrefix )
         {
             Sequence< sal_Int8 > aAttrSeq( reinterpret_cast<sal_Int8 const *>(
                                     OUStringToOString( aLocalAttrName, RTL_TEXTENCODING_UTF8 ).getStr()), aLocalAttrName.getLength() );
diff --git a/xmloff/source/core/xmltkmap.cxx b/xmloff/source/core/xmltkmap.cxx
index d89eb9621638..1eb3466d9cdf 100644
--- a/xmloff/source/core/xmltkmap.cxx
+++ b/xmloff/source/core/xmltkmap.cxx
@@ -64,7 +64,7 @@ sal_uInt16 SvXMLTokenMap_Impl::get( sal_uInt16 nKeyPrefix, const OUString& rLNam
     if ( aIter != m_aPrefixAndNameToTokenMap.end() )
         return (*aIter).second;
     else
-        return XML_TOK_UNKNOWN;
+        return XmlNamespace::UNKNOWN;
 }
 
 sal_uInt16 SvXMLTokenMap_Impl::get( sal_Int32 nFastTok ) const
@@ -73,7 +73,7 @@ sal_uInt16 SvXMLTokenMap_Impl::get( sal_Int32 nFastTok ) const
     if ( aIter != m_aFastTokenToTokenMap.end() )
         return (*aIter).second;
     else
-        return XML_TOK_UNKNOWN;
+        return XmlNamespace::UNKNOWN;
 }
 
 SvXMLTokenMap::SvXMLTokenMap( const SvXMLTokenMapEntry *pMap )
@@ -90,7 +90,7 @@ SvXMLTokenMap::~SvXMLTokenMap()
 {
 }
 
-sal_uInt16 SvXMLTokenMap::Get( sal_uInt16 nKeyPrefix,
+sal_uInt16 SvXMLTokenMap::Get( XmlNamespace nKeyPrefix,
                                const OUString& rLName ) const
 {
     return m_pImpl->get( nKeyPrefix, rLName );
diff --git a/xmloff/source/draw/QRCodeContext.cxx b/xmloff/source/draw/QRCodeContext.cxx
index 7a20e929a897..6fa4c88d0b35 100644
--- a/xmloff/source/draw/QRCodeContext.cxx
+++ b/xmloff/source/draw/QRCodeContext.cxx
@@ -54,7 +54,7 @@ QRCodeContext::QRCodeContext(SvXMLImport& rImport, sal_uInt16 nPrfx, const OUStr
 
         switch (nPrefix)
         {
-            case XML_NAMESPACE_LO_EXT:
+            case XmlNamespace::LO_EXT:
                 if (IsXMLToken(aLocalName, XML_QRCODE_ERROR_CORRECTION))
                 {
                     OUString aErrorCorrValue = sValue;
@@ -77,7 +77,7 @@ QRCodeContext::QRCodeContext(SvXMLImport& rImport, sal_uInt16 nPrfx, const OUStr
                 }
                 break;
 
-            case XML_NAMESPACE_OFFICE:
+            case XmlNamespace::OFFICE:
                 if (IsXMLToken(aLocalName, XML_STRING_VALUE))
                 {
                     aQRCode.Payload = sValue;
diff --git a/xmloff/source/draw/XMLGraphicsDefaultStyle.cxx b/xmloff/source/draw/XMLGraphicsDefaultStyle.cxx
index 5676d248a73f..8f2c742160b6 100644
--- a/xmloff/source/draw/XMLGraphicsDefaultStyle.cxx
+++ b/xmloff/source/draw/XMLGraphicsDefaultStyle.cxx
@@ -62,7 +62,7 @@ SvXMLImportContextRef XMLGraphicsDefaultStyle::CreateChildContext( sal_uInt16 nP
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix )
+    if( XmlNamespace::STYLE == nPrefix || XmlNamespace::LO_EXT == nPrefix )
     {
         sal_uInt32 nFamily = 0;
         if( IsXMLToken( rLocalName, XML_TEXT_PROPERTIES ) )
@@ -155,7 +155,7 @@ void XMLGraphicsDefaultStyle::SetDefaults()
             GetStyles()->GetImportPropertyMapper(GetFamily())
                 ->getPropertySetMapper());
         sal_Int32 const nStrokeIndex(
-            pImpPrMap->GetEntryIndex(XML_NAMESPACE_SVG, "stroke-color", 0));
+            pImpPrMap->GetEntryIndex(XmlNamespace::SVG, "stroke-color", 0));
         if (std::none_of(GetProperties().begin(), GetProperties().end(),
                          XMLPropertyByIndex(nStrokeIndex)))
         {
@@ -166,7 +166,7 @@ void XMLGraphicsDefaultStyle::SetDefaults()
         Color const nFillColor( bIsAOO4
             ? Color(0xCF, 0xE7, 0xF5) : Color(153, 204, 255));
         sal_Int32 const nFillIndex(
-            pImpPrMap->GetEntryIndex(XML_NAMESPACE_DRAW, "fill-color", 0));
+            pImpPrMap->GetEntryIndex(XmlNamespace::DRAW, "fill-color", 0));
         if (std::none_of(GetProperties().begin(), GetProperties().end(),
                          XMLPropertyByIndex(nFillIndex)))
         {
@@ -175,7 +175,7 @@ void XMLGraphicsDefaultStyle::SetDefaults()
         if (xInfo->hasPropertyByName("FillColor2"))
         {
             sal_Int32 const nFill2Index(pImpPrMap->GetEntryIndex(
-                        XML_NAMESPACE_DRAW, "secondary-fill-color", 0));
+                        XmlNamespace::DRAW, "secondary-fill-color", 0));
             if (std::none_of(GetProperties().begin(), GetProperties().end(),
                              XMLPropertyByIndex(nFill2Index)))
             {
diff --git a/xmloff/source/draw/XMLImageMapContext.cxx b/xmloff/source/draw/XMLImageMapContext.cxx
index 8421dd119c37..65852f1d07df 100644
--- a/xmloff/source/draw/XMLImageMapContext.cxx
+++ b/xmloff/source/draw/XMLImageMapContext.cxx
@@ -58,7 +58,7 @@ using ::com::sun::star::document::XEventsSupplier;
 
 namespace {
 
-enum XMLImageMapToken: decltype(XML_TOK_UNKNOWN)
+enum XMLImageMapToken: decltype(XmlNamespace::UNKNOWN)
 {
     XML_TOK_IMAP_URL,
     XML_TOK_IMAP_X,
@@ -79,19 +79,19 @@ enum XMLImageMapToken: decltype(XML_TOK_UNKNOWN)
 
 const SvXMLTokenMapEntry aImageMapObjectTokenMap[] =
 {
-    { XML_NAMESPACE_XLINK,  XML_HREF,           XML_TOK_IMAP_URL            },
-    { XML_NAMESPACE_OFFICE, XML_NAME,           XML_TOK_IMAP_NAME           },
-    { XML_NAMESPACE_DRAW,   XML_NOHREF,         XML_TOK_IMAP_NOHREF         },
-    { XML_NAMESPACE_SVG,    XML_X,              XML_TOK_IMAP_X              },
-    { XML_NAMESPACE_SVG,    XML_Y,              XML_TOK_IMAP_Y              },
-    { XML_NAMESPACE_SVG,    XML_CX,             XML_TOK_IMAP_CENTER_X       },
-    { XML_NAMESPACE_SVG,    XML_CY,             XML_TOK_IMAP_CENTER_Y       },
-    { XML_NAMESPACE_SVG,    XML_WIDTH,          XML_TOK_IMAP_WIDTH          },
-    { XML_NAMESPACE_SVG,    XML_HEIGHT,         XML_TOK_IMAP_HEIGHT         },
-    { XML_NAMESPACE_SVG,    XML_R,              XML_TOK_IMAP_RADIUS         },
-    { XML_NAMESPACE_SVG,    XML_VIEWBOX,        XML_TOK_IMAP_VIEWBOX        },
-    { XML_NAMESPACE_DRAW,   XML_POINTS,         XML_TOK_IMAP_POINTS         },
-    { XML_NAMESPACE_OFFICE, XML_TARGET_FRAME_NAME, XML_TOK_IMAP_TARGET      },
+    { XmlNamespace::XLINK,  XML_HREF,           XML_TOK_IMAP_URL            },
+    { XmlNamespace::OFFICE, XML_NAME,           XML_TOK_IMAP_NAME           },
+    { XmlNamespace::DRAW,   XML_NOHREF,         XML_TOK_IMAP_NOHREF         },
+    { XmlNamespace::SVG,    XML_X,              XML_TOK_IMAP_X              },
+    { XmlNamespace::SVG,    XML_Y,              XML_TOK_IMAP_Y              },
+    { XmlNamespace::SVG,    XML_CX,             XML_TOK_IMAP_CENTER_X       },
+    { XmlNamespace::SVG,    XML_CY,             XML_TOK_IMAP_CENTER_Y       },
+    { XmlNamespace::SVG,    XML_WIDTH,          XML_TOK_IMAP_WIDTH          },
+    { XmlNamespace::SVG,    XML_HEIGHT,         XML_TOK_IMAP_HEIGHT         },
+    { XmlNamespace::SVG,    XML_R,              XML_TOK_IMAP_RADIUS         },
+    { XmlNamespace::SVG,    XML_VIEWBOX,        XML_TOK_IMAP_VIEWBOX        },
+    { XmlNamespace::DRAW,   XML_POINTS,         XML_TOK_IMAP_POINTS         },
+    { XmlNamespace::OFFICE, XML_TARGET_FRAME_NAME, XML_TOK_IMAP_TARGET      },
     XML_TOKEN_MAP_END
 };
 
@@ -215,20 +215,20 @@ SvXMLImportContextRef XMLImageMapObjectContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & /*xAttrList*/ )
 {
-    if ( (XML_NAMESPACE_OFFICE == nPrefix) &&
+    if ( (XmlNamespace::OFFICE == nPrefix) &&
          IsXMLToken(rLocalName, XML_EVENT_LISTENERS) )
     {
         Reference<XEventsSupplier> xEvents( xMapEntry, UNO_QUERY );
         return new XMLEventsImportContext(
             GetImport(), nPrefix, rLocalName, xEvents);
     }
-    else if ( (XML_NAMESPACE_SVG == nPrefix) &&
+    else if ( (XmlNamespace::SVG == nPrefix) &&
               IsXMLToken(rLocalName, XML_TITLE) )
     {
         return new XMLStringBufferImportContext(
             GetImport(), nPrefix, rLocalName, sTitleBuffer);
     }
-    else if ( (XML_NAMESPACE_SVG == nPrefix) &&
+    else if ( (XmlNamespace::SVG == nPrefix) &&
               IsXMLToken(rLocalName, XML_DESC) )
     {
         return new XMLStringBufferImportContext(
@@ -589,7 +589,7 @@ SvXMLImportContextRef XMLImageMapContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if ( XML_NAMESPACE_DRAW == nPrefix )
+    if ( XmlNamespace::DRAW == nPrefix )
     {
         if ( IsXMLToken(rLocalName, XML_AREA_RECTANGLE) )
         {
diff --git a/xmloff/source/draw/XMLImageMapExport.cxx b/xmloff/source/draw/XMLImageMapExport.cxx
index 85b29122f6ad..6124f2aa3562 100644
--- a/xmloff/source/draw/XMLImageMapExport.cxx
+++ b/xmloff/source/draw/XMLImageMapExport.cxx
@@ -100,7 +100,7 @@ void XMLImageMapExport::Export(
 
     // image map container element
     SvXMLElementExport aImageMapElement(
-        mrExport, XML_NAMESPACE_DRAW, XML_IMAGE_MAP,
+        mrExport, XmlNamespace::DRAW, XML_IMAGE_MAP,
         true/*bWhiteSpace*/, true/*bWhiteSpace*/);
 
     // iterate over image map elements and call ExportMapEntry(...)
@@ -168,9 +168,9 @@ void XMLImageMapExport::ExportMapEntry(
     aAny >>= sHref;
     if (!sHref.isEmpty())
     {
-        mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, mrExport.GetRelativeReference(sHref));
+        mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, mrExport.GetRelativeReference(sHref));
     }
-    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
+    mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
 
     // Target property (and xlink:show)
     aAny = rPropertySet->getPropertyValue(gsTarget);
@@ -179,10 +179,10 @@ void XMLImageMapExport::ExportMapEntry(
     if (!sTargt.isEmpty())
     {
         mrExport.AddAttribute(
-            XML_NAMESPACE_OFFICE, XML_TARGET_FRAME_NAME, sTargt);
+            XmlNamespace::OFFICE, XML_TARGET_FRAME_NAME, sTargt);
 
         mrExport.AddAttribute(
-            XML_NAMESPACE_XLINK, XML_SHOW,
+            XmlNamespace::XLINK, XML_SHOW,
             sTargt == "_blank" ? XML_NEW : XML_REPLACE );
     }
 
@@ -192,14 +192,14 @@ void XMLImageMapExport::ExportMapEntry(
     aAny >>= sItemName;
     if (!sItemName.isEmpty())
     {
-        mrExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_NAME, sItemName);
+        mrExport.AddAttribute(XmlNamespace::OFFICE, XML_NAME, sItemName);
     }
 
     // is-active
     aAny = rPropertySet->getPropertyValue(gsIsActive);
     if (! *o3tl::doAccess<bool>(aAny))
     {
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_NOHREF, XML_NOHREF);
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_NOHREF, XML_NOHREF);
     }
 
     // call specific rectangle/circle/... method
@@ -222,7 +222,7 @@ void XMLImageMapExport::ExportMapEntry(
     // write element
     DBG_ASSERT(XML_TOKEN_INVALID != eType,
                "No name?! How did this happen?");
-    SvXMLElementExport aAreaElement(mrExport, XML_NAMESPACE_DRAW, eType,
+    SvXMLElementExport aAreaElement(mrExport, XmlNamespace::DRAW, eType,
                                     true/*bWhiteSpace*/, true/*bWhiteSpace*/);
 
     // title property (as <svg:title> element)
@@ -230,7 +230,7 @@ void XMLImageMapExport::ExportMapEntry(
     rPropertySet->getPropertyValue(gsTitle) >>= sTitle;
     if(!sTitle.isEmpty())
     {
-        SvXMLElementExport aEventElemt(mrExport, XML_NAMESPACE_SVG, XML_TITLE, true/*bWhiteSpace*/, false);
+        SvXMLElementExport aEventElemt(mrExport, XmlNamespace::SVG, XML_TITLE, true/*bWhiteSpace*/, false);
         mrExport.Characters(sTitle);
     }
 
@@ -239,7 +239,7 @@ void XMLImageMapExport::ExportMapEntry(
     rPropertySet->getPropertyValue(gsDescription) >>= sDescription;
     if (!sDescription.isEmpty())
     {
-        SvXMLElementExport aDesc(mrExport, XML_NAMESPACE_SVG, XML_DESC, true/*bWhiteSpace*/, false);
+        SvXMLElementExport aDesc(mrExport, XmlNamespace::SVG, XML_DESC, true/*bWhiteSpace*/, false);
         mrExport.Characters(sDescription);
     }
 
@@ -261,18 +261,18 @@ void XMLImageMapExport::ExportRectangle(
     // parameters svg:x, svg:y, svg:width, svg:height
     OUStringBuffer aBuffer;
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, aRectangle.X);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_X,
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_X,
                           aBuffer.makeStringAndClear() );
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, aRectangle.Y);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_Y,
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_Y,
                           aBuffer.makeStringAndClear() );
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer,
             aRectangle.Width);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_WIDTH,
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_WIDTH,
                           aBuffer.makeStringAndClear() );
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer,
             aRectangle.Height);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_HEIGHT,
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_HEIGHT,
                           aBuffer.makeStringAndClear() );
 }
 
@@ -287,10 +287,10 @@ void XMLImageMapExport::ExportCircle(
     // parameters svg:cx, svg:cy
     OUStringBuffer aBuffer;
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, aCenter.X);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_CX,
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_CX,
                           aBuffer.makeStringAndClear() );
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, aCenter.Y);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_CY,
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_CY,
                           aBuffer.makeStringAndClear() );
 
     // radius
@@ -298,7 +298,7 @@ void XMLImageMapExport::ExportCircle(
     sal_Int32 nRadius = 0;
     aAny >>= nRadius;
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, nRadius);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_R,
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_R,
                           aBuffer.makeStringAndClear() );
 }
 
@@ -321,24 +321,24 @@ void XMLImageMapExport::ExportPolygon(const Reference<XPropertySet> & rPropertyS
     OUStringBuffer aBuffer;
 
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, 0);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_X, aBuffer.makeStringAndClear() );
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_X, aBuffer.makeStringAndClear() );
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, 0);
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_Y, aBuffer.makeStringAndClear() );
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_Y, aBuffer.makeStringAndClear() );
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, basegfx::fround(aPolygonRange.getWidth()));
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_WIDTH, aBuffer.makeStringAndClear() );
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_WIDTH, aBuffer.makeStringAndClear() );
     mrExport.GetMM100UnitConverter().convertMeasureToXML(aBuffer, basegfx::fround(aPolygonRange.getHeight()));
-    mrExport.AddAttribute( XML_NAMESPACE_SVG, XML_HEIGHT, aBuffer.makeStringAndClear() );
+    mrExport.AddAttribute( XmlNamespace::SVG, XML_HEIGHT, aBuffer.makeStringAndClear() );
 
     // svg:viewbox
     SdXMLImExViewBox aViewBox(0.0, 0.0, aPolygonRange.getWidth(), aPolygonRange.getHeight());
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_VIEWBOX, aViewBox.GetExportString());
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_VIEWBOX, aViewBox.GetExportString());
 
     // export point sequence
     const OUString aPointString(
         basegfx::utils::exportToSvgPoints(
             aPolygon));
 
-    mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_POINTS, aPointString);
+    mrExport.AddAttribute(XmlNamespace::DRAW, XML_POINTS, aPointString);
 }
 
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/xmloff/source/draw/XMLNumberStyles.cxx b/xmloff/source/draw/XMLNumberStyles.cxx
index 99cdb55b11d6..5cb215aa941f 100644
--- a/xmloff/source/draw/XMLNumberStyles.cxx
+++ b/xmloff/source/draw/XMLNumberStyles.cxx
@@ -321,20 +321,20 @@ static void SdXMLExportDataStyleNumber( SdXMLExport& rExport, SdXMLDataStyleNumb
 {
     if( rElement.mbDecimal02 )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_DECIMAL_PLACES, XML_2 );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_DECIMAL_PLACES, XML_2 );
     }
 
     if( rElement.mbLong )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_STYLE, XML_LONG );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_STYLE, XML_LONG );
     }
 
     if( rElement.mbTextual )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TEXTUAL, XML_TRUE );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_TEXTUAL, XML_TRUE );
     }
 
-    SvXMLElementExport aNumberStyle( rExport, XML_NAMESPACE_NUMBER, rElement.meNumberStyle, true, false );
+    SvXMLElementExport aNumberStyle( rExport, XmlNamespace::NUMBER, rElement.meNumberStyle, true, false );
     if( rElement.mpText )
     {
         OUString sAttrValue( OUString::createFromAscii( rElement.mpText ) );
@@ -349,14 +349,14 @@ static void SdXMLExportStyle( SdXMLExport& rExport, const SdXMLFixedDataStyle* p
     if( pStyle2 )
         sAttrValue += OUString::createFromAscii( pStyle2->mpName );
 
-    rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_NAME, sAttrValue );
+    rExport.AddAttribute( XmlNamespace::STYLE, XML_NAME, sAttrValue );
 
     if( pStyle->mbAutomatic )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_AUTOMATIC_ORDER, XML_TRUE );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_AUTOMATIC_ORDER, XML_TRUE );
     }
 
-    SvXMLElementExport aElement( rExport, XML_NAMESPACE_NUMBER, pStyle->mbDateStyle ? XML_DATE_STYLE : XML_TIME_STYLE, true, true );
+    SvXMLElementExport aElement( rExport, XmlNamespace::NUMBER, pStyle->mbDateStyle ? XML_DATE_STYLE : XML_TIME_STYLE, true, true );
 
     do
     {
@@ -530,7 +530,7 @@ SdXMLNumberFormatMemberImportContext::SdXMLNumberFormatMemberImportContext( SvXM
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
         OUString sValue = xAttrList->getValueByIndex( i );
 
-        if( nPrefix == XML_NAMESPACE_NUMBER )
+        if( nPrefix == XmlNamespace::NUMBER )
         {
             if( IsXMLToken( aLocalName, XML_DECIMAL_PLACES ) )
             {
@@ -592,7 +592,7 @@ SdXMLNumberFormatImportContext::SdXMLNumberFormatImportContext( SdXMLImport& rIm
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
         OUString sValue = xAttrList->getValueByIndex( i );
 
-        if( nPrefix == XML_NAMESPACE_NUMBER )
+        if( nPrefix == XmlNamespace::NUMBER )
         {
             if( IsXMLToken( aLocalName, XML_AUTOMATIC_ORDER ) )
             {
diff --git a/xmloff/source/draw/XMLReplacementImageContext.cxx b/xmloff/source/draw/XMLReplacementImageContext.cxx
index 31ff35fb697d..c73f78478b27 100644
--- a/xmloff/source/draw/XMLReplacementImageContext.cxx
+++ b/xmloff/source/draw/XMLReplacementImageContext.cxx
@@ -105,7 +105,7 @@ SvXMLImportContextRef XMLReplacementImageContext::CreateChildContext(
 {
     SvXMLImportContext *pContext = nullptr;
 
-    if( XML_NAMESPACE_OFFICE == nPrefix &&
+    if( XmlNamespace::OFFICE == nPrefix &&
         IsXMLToken( rLocalName, ::xmloff::token::XML_BINARY_DATA ) &&
         !m_xBase64Stream.is() )
     {
diff --git a/xmloff/source/draw/XMLShapeStyleContext.cxx b/xmloff/source/draw/XMLShapeStyleContext.cxx
index 73ce7f048c28..0071e1214973 100644
--- a/xmloff/source/draw/XMLShapeStyleContext.cxx
+++ b/xmloff/source/draw/XMLShapeStyleContext.cxx
@@ -70,7 +70,7 @@ void XMLShapeStyleContext::SetAttribute( sal_uInt16 nPrefixKey, const OUString&
     {
         m_sControlDataStyleName = rValue;
     }
-    else if( (XML_NAMESPACE_STYLE == nPrefixKey) && IsXMLToken( rLocalName, ::xmloff::token::XML_LIST_STYLE_NAME ) )
+    else if( (XmlNamespace::STYLE == nPrefixKey) && IsXMLToken( rLocalName, ::xmloff::token::XML_LIST_STYLE_NAME ) )
     {
         m_sListStyleName = rValue;
     }
@@ -78,7 +78,7 @@ void XMLShapeStyleContext::SetAttribute( sal_uInt16 nPrefixKey, const OUString&
     {
         XMLPropStyleContext::SetAttribute( nPrefixKey, rLocalName, rValue );
 
-        if( (XML_NAMESPACE_STYLE == nPrefixKey) &&
+        if( (XmlNamespace::STYLE == nPrefixKey) &&
             ( IsXMLToken( rLocalName, ::xmloff::token::XML_NAME ) || IsXMLToken( rLocalName, ::xmloff::token::XML_DISPLAY_NAME ) ) )
         {
             if( !GetName().isEmpty() && !GetDisplayName().isEmpty() && GetName() != GetDisplayName() )
@@ -97,7 +97,7 @@ SvXMLImportContextRef XMLShapeStyleContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix )
+    if( XmlNamespace::STYLE == nPrefix || XmlNamespace::LO_EXT == nPrefix )
     {
         sal_uInt32 nFamily = 0;
         if( IsXMLToken( rLocalName, XML_TEXT_PROPERTIES ) )
diff --git a/xmloff/source/draw/animationexport.cxx b/xmloff/source/draw/animationexport.cxx
index ad06922257cb..0d5f5585a8a5 100644
--- a/xmloff/source/draw/animationexport.cxx
+++ b/xmloff/source/draw/animationexport.cxx
@@ -574,9 +574,9 @@ void AnimationsExporterImpl::exportTransitionNode()
     aEvent.Repeat = 0;
 
     convertTiming( sTmp, Any( aEvent ) );
-    mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_BEGIN, sTmp.makeStringAndClear() );
+    mxExport->AddAttribute( XmlNamespace::SMIL, XML_BEGIN, sTmp.makeStringAndClear() );
 
-    SvXMLElementExport aElement( *mxExport, XML_NAMESPACE_ANIMATION, XML_PAR, true, true );
+    SvXMLElementExport aElement( *mxExport, XmlNamespace::ANIMATION, XML_PAR, true, true );
 
     if( nTransition != 0 )
     {
@@ -591,44 +591,44 @@ void AnimationsExporterImpl::exportTransitionNode()
 
         ::sax::Converter::convertDouble( sTmp, fDuration );
         sTmp.append( 's');
-        mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_DUR, sTmp.makeStringAndClear() );
+        mxExport->AddAttribute( XmlNamespace::SMIL, XML_DUR, sTmp.makeStringAndClear() );
 
         SvXMLUnitConverter::convertEnum( sTmp, nTransition, aAnimations_EnumMap_TransitionType );
-        mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_TYPE, sTmp.makeStringAndClear() );
+        mxExport->AddAttribute( XmlNamespace::SMIL, XML_TYPE, sTmp.makeStringAndClear() );
 
         if( nSubtype != TransitionSubType::DEFAULT )
         {
             SvXMLUnitConverter::convertEnum( sTmp, nSubtype, aAnimations_EnumMap_TransitionSubType );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_SUBTYPE, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_SUBTYPE, sTmp.makeStringAndClear() );
         }
 
         if( !bDirection )
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_DIRECTION, XML_REVERSE );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_DIRECTION, XML_REVERSE );
 
         if( (nTransition == TransitionType::FADE) && ((nSubtype == TransitionSubType::FADETOCOLOR) || (nSubtype == TransitionSubType::FADEFROMCOLOR) ))
         {
             ::sax::Converter::convertColor( sTmp, nFadeColor );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_FADECOLOR, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_FADECOLOR, sTmp.makeStringAndClear() );
         }
-        SvXMLElementExport aElement2( *mxExport, XML_NAMESPACE_ANIMATION, XML_TRANSITIONFILTER, true, true );
+        SvXMLElementExport aElement2( *mxExport, XmlNamespace::ANIMATION, XML_TRANSITIONFILTER, true, true );
     }
 
     if( bStopSound )
     {
-        mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_COMMAND, XML_STOP_AUDIO );
-        SvXMLElementExport aElement2( *mxExport, XML_NAMESPACE_ANIMATION, XML_COMMAND, true, true );
+        mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_COMMAND, XML_STOP_AUDIO );
+        SvXMLElementExport aElement2( *mxExport, XmlNamespace::ANIMATION, XML_COMMAND, true, true );
     }
     else if( !sSoundURL.isEmpty())
     {
         sSoundURL = lcl_StoreMediaAndGetURL(*mxExport, sSoundURL);
-        mxExport->AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sSoundURL );
+        mxExport->AddAttribute( XmlNamespace::XLINK, XML_HREF, sSoundURL );
 
         bool bLoopSound = false;
         mxPageProps->getPropertyValue("LoopSound") >>= bLoopSound;
 
         if( bLoopSound )
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_REPEATCOUNT, XML_INDEFINITE );
-        SvXMLElementExport aElement2( *mxExport, XML_NAMESPACE_ANIMATION, XML_AUDIO, true, true );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_REPEATCOUNT, XML_INDEFINITE );
+        SvXMLElementExport aElement2( *mxExport, XmlNamespace::ANIMATION, XML_AUDIO, true, true );
     }
 }
 
@@ -751,14 +751,14 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
         if( !rExportIdentifier.isEmpty() )
         {
             mxExport->AddAttributeIdLegacy(
-                XML_NAMESPACE_ANIMATION, rExportIdentifier);
+                XmlNamespace::ANIMATION, rExportIdentifier);
         }
 
         Any aTemp( xNode->getBegin() );
         if( aTemp.hasValue() )
         {
             convertTiming( sTmp, aTemp );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_BEGIN, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_BEGIN, sTmp.makeStringAndClear() );
         }
 
         double fTemp = 0;
@@ -771,13 +771,13 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
             {
                 ::sax::Converter::convertDouble( sTmp, fTemp );
                 sTmp.append( 's');
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_DUR, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_DUR, sTmp.makeStringAndClear() );
             }
             else
             {
                 Timing eTiming;
                 if( aTemp >>= eTiming )
-                    mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_DUR, eTiming == Timing_INDEFINITE ? XML_INDEFINITE : XML_MEDIA );
+                    mxExport->AddAttribute( XmlNamespace::SMIL, XML_DUR, eTiming == Timing_INDEFINITE ? XML_INDEFINITE : XML_MEDIA );
             }
         }
 
@@ -785,56 +785,56 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
         if( aTemp.hasValue() )
         {
             convertTiming( sTmp, aTemp );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_END, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_END, sTmp.makeStringAndClear() );
         }
 
         nTemp = xNode->getFill();
         if( nTemp != AnimationFill::DEFAULT )
         {
             SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_Fill );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_FILL, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_FILL, sTmp.makeStringAndClear() );
         }
 
         nTemp = xNode->getFillDefault();
         if( nTemp != AnimationFill::INHERIT )
         {
             SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_FillDefault );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_FILLDEFAULT, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_FILLDEFAULT, sTmp.makeStringAndClear() );
         }
 
         nTemp = xNode->getRestart();
         if( nTemp != AnimationRestart::DEFAULT )
         {
             SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_Restart );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_RESTART, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_RESTART, sTmp.makeStringAndClear() );
         }
 
         nTemp = xNode->getRestartDefault();
         if( nTemp != AnimationRestart::INHERIT )
         {
             SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_RestartDefault );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_RESTARTDEFAULT, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_RESTARTDEFAULT, sTmp.makeStringAndClear() );
         }
 
         fTemp = xNode->getAcceleration();
         if( fTemp != 0.0 )
         {
             ::sax::Converter::convertDouble( sTmp, fTemp );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_ACCELERATE, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_ACCELERATE, sTmp.makeStringAndClear() );
         }
 
         fTemp = xNode->getDecelerate();
         if( fTemp != 0.0 )
         {
             ::sax::Converter::convertDouble( sTmp, fTemp );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_DECELERATE, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_DECELERATE, sTmp.makeStringAndClear() );
         }
 
         bool bTemp = xNode->getAutoReverse();
         if( bTemp )
         {
             ::sax::Converter::convertBool( sTmp, bTemp );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_AUTOREVERSE, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_AUTOREVERSE, sTmp.makeStringAndClear() );
         }
 
         aTemp = xNode->getRepeatCount();
@@ -842,11 +842,11 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
         {
             Timing eTiming;
             if( (aTemp >>= eTiming ) && (eTiming == Timing_INDEFINITE ) )
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_REPEATCOUNT, XML_INDEFINITE );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_REPEATCOUNT, XML_INDEFINITE );
             else if( aTemp >>= fTemp )
             {
                 ::sax::Converter::convertDouble( sTmp, fTemp );
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_REPEATCOUNT, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_REPEATCOUNT, sTmp.makeStringAndClear() );
             }
         }
 
@@ -856,12 +856,12 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
             Timing eTiming;
             if( ( aTemp >>= eTiming ) && (eTiming == Timing_INDEFINITE) )
             {
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_REPEATDUR, XML_INDEFINITE );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_REPEATDUR, XML_INDEFINITE );
             }
             else if( aTemp >>= fTemp )
             {
                 ::sax::Converter::convertDouble( sTmp, fTemp );
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_REPEATDUR, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_REPEATDUR, sTmp.makeStringAndClear() );
             }
         }
 
@@ -869,7 +869,7 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
         if( aTemp.hasValue() && (aTemp >>= nTemp) )
         {
             SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_Endsync );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_ENDSYNC, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_ENDSYNC, sTmp.makeStringAndClear() );
         }
 
         sal_Int16 nContainerNodeType = EffectNodeType::DEFAULT;
@@ -882,14 +882,14 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
                 if( (rValue.Value >>= nContainerNodeType) && (nContainerNodeType != EffectNodeType::DEFAULT) )
                 {
                     SvXMLUnitConverter::convertEnum( sTmp, nContainerNodeType, aAnimations_EnumMap_EffectNodeType );
-                    mxExport->AddAttribute( XML_NAMESPACE_PRESENTATION, XML_NODE_TYPE, sTmp.makeStringAndClear() );
+                    mxExport->AddAttribute( XmlNamespace::PRESENTATION, XML_NODE_TYPE, sTmp.makeStringAndClear() );
                 }
             }
             else if( IsXMLToken( rValue.Name, XML_PRESET_ID ) )
             {
                 if( rValue.Value >>= aPresetId )
                 {
-                    mxExport->AddAttribute( XML_NAMESPACE_PRESENTATION, XML_PRESET_ID, aPresetId );
+                    mxExport->AddAttribute( XmlNamespace::PRESENTATION, XML_PRESET_ID, aPresetId );
                 }
             }
             else if( IsXMLToken( rValue.Name, XML_PRESET_SUB_TYPE ) )
@@ -897,7 +897,7 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
                 OUString aPresetSubType;
                 if( rValue.Value >>= aPresetSubType )
                 {
-                    mxExport->AddAttribute( XML_NAMESPACE_PRESENTATION, XML_PRESET_SUB_TYPE, aPresetSubType );
+                    mxExport->AddAttribute( XmlNamespace::PRESENTATION, XML_PRESET_SUB_TYPE, aPresetSubType );
                 }
             }
             else if( IsXMLToken( rValue.Name, XML_PRESET_CLASS ) )
@@ -906,7 +906,7 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
                 if( rValue.Value >>= nEffectPresetClass )
                 {
                     SvXMLUnitConverter::convertEnum( sTmp, nEffectPresetClass, aAnimations_EnumMap_EffectPresetClass );
-                    mxExport->AddAttribute( XML_NAMESPACE_PRESENTATION, XML_PRESET_CLASS, sTmp.makeStringAndClear() );
+                    mxExport->AddAttribute( XmlNamespace::PRESENTATION, XML_PRESET_CLASS, sTmp.makeStringAndClear() );
                 }
             }
             else if( IsXMLToken( rValue.Name, XML_MASTER_ELEMENT ) )
@@ -917,20 +917,20 @@ void AnimationsExporterImpl::exportNode( const Reference< XAnimationNode >& xNod
                 {
                     const OUString& rIdentifier = mxExport->getInterfaceToIdentifierMapper().getIdentifier(xMaster);
                     if( !rIdentifier.isEmpty() )
-                        mxExport->AddAttribute( XML_NAMESPACE_PRESENTATION, XML_MASTER_ELEMENT, rIdentifier );
+                        mxExport->AddAttribute( XmlNamespace::PRESENTATION, XML_MASTER_ELEMENT, rIdentifier );
                 }
             }
             else if( IsXMLToken( rValue.Name, XML_GROUP_ID ) )
             {
                 sal_Int32 nGroupId = 0;
                 if( rValue.Value >>= nGroupId )
-                    mxExport->AddAttribute( XML_NAMESPACE_PRESENTATION, XML_GROUP_ID, OUString::number( nGroupId ) );
+                    mxExport->AddAttribute( XmlNamespace::PRESENTATION, XML_GROUP_ID, OUString::number( nGroupId ) );
             }
             else
             {
                 OUString aTmp;
                 if( rValue.Value >>= aTmp )
-                    mxExport->AddAttribute( XML_NAMESPACE_PRESENTATION, rValue.Name, aTmp );
+                    mxExport->AddAttribute( XmlNamespace::PRESENTATION, rValue.Name, aTmp );
             }
         }
 
@@ -997,21 +997,21 @@ void AnimationsExporterImpl::exportContainer( const Reference< XTimeContainer >&
             if( aTemp.hasValue() )
             {
                 convertTarget( sTmp, aTemp );
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_TARGETELEMENT, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_TARGETELEMENT, sTmp.makeStringAndClear() );
             }
 
             sal_Int16 nTemp = xIter->getSubItem();
             if( nTemp )
             {
                 SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_SubItem );
-                mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_SUB_ITEM, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_SUB_ITEM, sTmp.makeStringAndClear() );
             }
 
             nTemp = xIter->getIterateType();
             if( nTemp )
             {
                 SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_IterateType );
-                mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_ITERATE_TYPE, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_ITERATE_TYPE, sTmp.makeStringAndClear() );
             }
 
             double fTemp = xIter->getIterateInterval();
@@ -1019,7 +1019,7 @@ void AnimationsExporterImpl::exportContainer( const Reference< XTimeContainer >&
             {
                 OUStringBuffer buf;
                 ::sax::Converter::convertDuration(buf, fTemp / (24*60*60));
-                mxExport->AddAttribute( XML_NAMESPACE_ANIMATION,
+                mxExport->AddAttribute( XmlNamespace::ANIMATION,
                         XML_ITERATE_INTERVAL, buf.makeStringAndClear());
             }
         }
@@ -1034,7 +1034,7 @@ void AnimationsExporterImpl::exportContainer( const Reference< XTimeContainer >&
             OSL_FAIL( "xmloff::AnimationsExporterImpl::exportContainer(), invalid TimeContainerType!" );
             return;
         }
-        SvXMLElementExport aElement( *mxExport, XML_NAMESPACE_ANIMATION, eElementToken, true, true );
+        SvXMLElementExport aElement( *mxExport, XmlNamespace::ANIMATION, eElementToken, true, true );
 
         if( nContainerNodeType == EffectNodeType::TIMING_ROOT )
             exportTransitionNode();
@@ -1067,14 +1067,14 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
         if( aTemp.hasValue() )
         {
             convertTarget( sTmp, aTemp );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_TARGETELEMENT, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_TARGETELEMENT, sTmp.makeStringAndClear() );
         }
 
         nTemp = xAnimate->getSubItem();
         if( nTemp )
         {
             SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_SubItem );
-            mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_SUB_ITEM, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_SUB_ITEM, sTmp.makeStringAndClear() );
         }
 
         XMLTokenEnum eAttributeName = XML_TOKEN_INVALID;
@@ -1109,11 +1109,11 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
                     p++;
                 }
 
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_ATTRIBUTENAME, sTemp );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_ATTRIBUTENAME, sTemp );
             }
             else
             {
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_ATTRIBUTENAME, "invalid" );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_ATTRIBUTENAME, "invalid" );
             }
         }
 
@@ -1122,7 +1122,7 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
         {
             aTemp <<= aValues;
             convertValue( eAttributeName, sTmp, aTemp );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_VALUES, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_VALUES, sTmp.makeStringAndClear() );
         }
         else
         {
@@ -1130,21 +1130,21 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
             if( aTemp.hasValue() )
             {
                 convertValue( eAttributeName, sTmp, aTemp );
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_FROM, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_FROM, sTmp.makeStringAndClear() );
             }
 
             aTemp = xAnimate->getBy();
             if( aTemp.hasValue() )
             {
                 convertValue( eAttributeName, sTmp, aTemp );
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_BY, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_BY, sTmp.makeStringAndClear() );
             }
 
             aTemp = xAnimate->getTo();
             if( aTemp.hasValue() )
             {
                 convertValue( eAttributeName, sTmp, aTemp );
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_TO, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_TO, sTmp.makeStringAndClear() );
             }
         }
 
@@ -1160,12 +1160,12 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
 
                     sTmp.append( rKeyTime );
                 }
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_KEYTIMES, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_KEYTIMES, sTmp.makeStringAndClear() );
             }
 
             OUString sTemp( xAnimate->getFormula() );
             if( !sTemp.isEmpty() )
-                mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_FORMULA, sTemp );
+                mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_FORMULA, sTemp );
 
             if( (nNodeType != AnimationNodeType::TRANSITIONFILTER) &&
                 (nNodeType != AnimationNodeType::AUDIO ) )
@@ -1176,18 +1176,18 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
                     ((nNodeType != AnimationNodeType::ANIMATEMOTION ) && (nTemp != AnimationCalcMode::LINEAR)) )
                 {
                     SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_CalcMode );
-                    mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_CALCMODE, sTmp.makeStringAndClear() );
+                    mxExport->AddAttribute( XmlNamespace::SMIL, XML_CALCMODE, sTmp.makeStringAndClear() );
                 }
 
                 bTemp = xAnimate->getAccumulate();
                 if( bTemp )
-                    mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_ACCUMULATE, XML_SUM );
+                    mxExport->AddAttribute( XmlNamespace::SMIL, XML_ACCUMULATE, XML_SUM );
 
                 nTemp = xAnimate->getAdditive();
                 if( nTemp != AnimationAdditiveMode::REPLACE )
                 {
                     SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_AdditiveMode );
-                    mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_ADDITIVE, sTmp.makeStringAndClear() );
+                    mxExport->AddAttribute( XmlNamespace::SMIL, XML_ADDITIVE, sTmp.makeStringAndClear() );
                 }
             }
 
@@ -1202,7 +1202,7 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
                     sTmp.append( OUString::number(rPair.Time) ).append( "," ).append( OUString::number(rPair.Progress) );
                 }
 
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_KEYSPLINES, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_KEYSPLINES, sTmp.makeStringAndClear() );
             }
         }
 
@@ -1228,7 +1228,7 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
             if( aTemp.hasValue() )
             {
                 convertPath( sTmp, aTemp );
-                mxExport->AddAttribute( XML_NAMESPACE_SVG, XML_PATH, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SVG, XML_PATH, sTmp.makeStringAndClear() );
             }
 
             // TODO: origin = ( parent | layout )
@@ -1243,10 +1243,10 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
             Reference< XAnimateColor > xAnimateColor( xAnimate, UNO_QUERY_THROW );
 
             nTemp = xAnimateColor->getColorInterpolation();
-            mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_COLOR_INTERPOLATION, (nTemp == AnimationColorSpace::RGB) ? XML_RGB : XML_HSL );
+            mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_COLOR_INTERPOLATION, (nTemp == AnimationColorSpace::RGB) ? XML_RGB : XML_HSL );
 
             bTemp = xAnimateColor->getDirection();
-            mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_COLOR_INTERPOLATION_DIRECTION, bTemp ? XML_CLOCKWISE : XML_COUNTER_CLOCKWISE );
+            mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_COLOR_INTERPOLATION_DIRECTION, bTemp ? XML_CLOCKWISE : XML_COUNTER_CLOCKWISE );
         }
         break;
 
@@ -1254,12 +1254,12 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
         {
             eElementToken = XML_ANIMATETRANSFORM;
 
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_ATTRIBUTENAME, XML_TRANSFORM );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_ATTRIBUTENAME, XML_TRANSFORM );
 
             Reference< XAnimateTransform > xTransform( xAnimate, UNO_QUERY_THROW );
             nTemp = xTransform->getTransformType();
             SvXMLUnitConverter::convertEnum( sTmp, nTemp, aAnimations_EnumMap_TransformType );
-            mxExport->AddAttribute( XML_NAMESPACE_SVG, XML_TYPE, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SVG, XML_TYPE, sTmp.makeStringAndClear() );
         }
         break;
 
@@ -1270,34 +1270,34 @@ void AnimationsExporterImpl::exportAnimate( const Reference< XAnimate >& xAnimat
 
             sal_Int16 nTransition = xTransitionFilter->getTransition();
             SvXMLUnitConverter::convertEnum( sTmp, nTransition, aAnimations_EnumMap_TransitionType );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_TYPE, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_TYPE, sTmp.makeStringAndClear() );
 
             sal_Int16 nSubtype = xTransitionFilter->getSubtype();
             if( nSubtype != TransitionSubType::DEFAULT )
             {
                 SvXMLUnitConverter::convertEnum( sTmp, nSubtype, aAnimations_EnumMap_TransitionSubType );
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_SUBTYPE, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_SUBTYPE, sTmp.makeStringAndClear() );
             }
 
             bTemp = xTransitionFilter->getMode();
             if( !bTemp )
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_MODE, XML_OUT );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_MODE, XML_OUT );
 
             bTemp = xTransitionFilter->getDirection();
             if( !bTemp )
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_DIRECTION, XML_REVERSE );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_DIRECTION, XML_REVERSE );
 
             if( (nTransition == TransitionType::FADE) && ((nSubtype == TransitionSubType::FADETOCOLOR) || (nSubtype == TransitionSubType::FADEFROMCOLOR) ))
             {
                 nTemp = xTransitionFilter->getFadeColor();
                 ::sax::Converter::convertColor( sTmp, nTemp );
-                mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_FADECOLOR, sTmp.makeStringAndClear() );
+                mxExport->AddAttribute( XmlNamespace::SMIL, XML_FADECOLOR, sTmp.makeStringAndClear() );
             }
         }
         break;
         }
 
-        SvXMLElementExport aElement( *mxExport, XML_NAMESPACE_ANIMATION, eElementToken, true, true );
+        SvXMLElementExport aElement( *mxExport, XmlNamespace::ANIMATION, eElementToken, true, true );
 
     }
     catch (const Exception&)
@@ -1316,14 +1316,14 @@ void AnimationsExporterImpl::exportAudio( const Reference< XAudio >& xAudio )
         OUString aSourceURL;
         xAudio->getSource() >>= aSourceURL;
         if( !aSourceURL.isEmpty() )
-            mxExport->AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, mxExport->GetRelativeReference( aSourceURL ) );
+            mxExport->AddAttribute( XmlNamespace::XLINK, XML_HREF, mxExport->GetRelativeReference( aSourceURL ) );
 
         const double fVolume = xAudio->getVolume();
         if( fVolume != 1.0 )
         {
             OUStringBuffer sTmp;
             ::sax::Converter::convertDouble( sTmp, fVolume );
-            mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_AUDIO_LEVEL, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_AUDIO_LEVEL, sTmp.makeStringAndClear() );
         }
 
     /* todo?
@@ -1332,7 +1332,7 @@ void AnimationsExporterImpl::exportAudio( const Reference< XAudio >& xAudio )
         if( nEndAfterSlide != 0 )
             mxExport->AddAttribute( );
     */
-        SvXMLElementExport aElement( *mxExport, XML_NAMESPACE_ANIMATION, XML_AUDIO, true, true );
+        SvXMLElementExport aElement( *mxExport, XmlNamespace::ANIMATION, XML_AUDIO, true, true );
 
     }
     catch (const Exception&)
@@ -1353,16 +1353,16 @@ void AnimationsExporterImpl::exportCommand( const Reference< XCommand >& xComman
         if( aTemp.hasValue() )
         {
             convertTarget( sTmp, aTemp );
-            mxExport->AddAttribute( XML_NAMESPACE_SMIL, XML_TARGETELEMENT, sTmp.makeStringAndClear() );
+            mxExport->AddAttribute( XmlNamespace::SMIL, XML_TARGETELEMENT, sTmp.makeStringAndClear() );
         }
 
         sal_Int16 nCommand = xCommand->getCommand();
         SvXMLUnitConverter::convertEnum( sTmp, nCommand, aAnimations_EnumMap_Command );
-        mxExport->AddAttribute( XML_NAMESPACE_ANIMATION, XML_COMMAND, sTmp.makeStringAndClear() );
+        mxExport->AddAttribute( XmlNamespace::ANIMATION, XML_COMMAND, sTmp.makeStringAndClear() );
 
     // todo virtual css::uno::Any SAL_CALL getParameter() throw (css::uno::RuntimeException) = 0;
 
-        SvXMLElementExport aElement( *mxExport, XML_NAMESPACE_ANIMATION, XML_COMMAND, true, true );
+        SvXMLElementExport aElement( *mxExport, XmlNamespace::ANIMATION, XML_COMMAND, true, true );
 
     }
     catch (const Exception&)
diff --git a/xmloff/source/draw/animationimport.cxx b/xmloff/source/draw/animationimport.cxx
index 5be84ec67391..6e0f5d56c75b 100644
--- a/xmloff/source/draw/animationimport.cxx
+++ b/xmloff/source/draw/animationimport.cxx
@@ -1080,10 +1080,10 @@ void AnimationNodeContext::init_node(  const css::uno::Reference< css::xml::sax:
             default:
             {
                 // push all unknown attributes within the presentation namespace as user data
-                if (IsTokenInNamespace(nToken, XML_NAMESPACE_PRESENTATION)
-                    || IsTokenInNamespace(nToken, XML_NAMESPACE_PRESENTATION_SO52)
-                    || IsTokenInNamespace(nToken, XML_NAMESPACE_PRESENTATION_OASIS)
-                    || IsTokenInNamespace(nToken, XML_NAMESPACE_PRESENTATION_OOO))
+                if (IsTokenInNamespace(nToken, XmlNamespace::PRESENTATION)
+                    || IsTokenInNamespace(nToken, XmlNamespace::PRESENTATION_SO52)
+                    || IsTokenInNamespace(nToken, XmlNamespace::PRESENTATION_OASIS)
+                    || IsTokenInNamespace(nToken, XmlNamespace::PRESENTATION_OOO))
                 {
                     aUserData.emplace_back( SvXMLImport::getNameFromToken(aIter.getToken()), makeAny( rValue ) );
                 }
diff --git a/xmloff/source/draw/animexp.cxx b/xmloff/source/draw/animexp.cxx
index 3dfbe0175450..d1bde23c784d 100644
--- a/xmloff/source/draw/animexp.cxx
+++ b/xmloff/source/draw/animexp.cxx
@@ -419,32 +419,32 @@ void XMLAnimationsExporter::exportAnimations( SvXMLExport& rExport )
 
     if( !mpImpl->maEffects.empty() )
     {
-        SvXMLElementExport aElement( rExport, XML_NAMESPACE_PRESENTATION, XML_ANIMATIONS, true, true );
+        SvXMLElementExport aElement( rExport, XmlNamespace::PRESENTATION, XML_ANIMATIONS, true, true );
 
         for (const auto& rEffect : mpImpl->maEffects)
         {
             SAL_WARN_IF( !rEffect.mxShape.is(), "xmloff", "shape id creation failed for animation effect?" );
 
-            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_SHAPE_ID, rExport.getInterfaceToIdentifierMapper().getIdentifier( rEffect.mxShape ) );
+            rExport.AddAttribute( XmlNamespace::DRAW, XML_SHAPE_ID, rExport.getInterfaceToIdentifierMapper().getIdentifier( rEffect.mxShape ) );
 
             if( rEffect.meKind == XMLE_DIM )
             {
                 // export a dim action;
 
                 ::sax::Converter::convertColor( sTmp, rEffect.maDimColor );
-                rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_COLOR, sTmp.makeStringAndClear() );
+                rExport.AddAttribute( XmlNamespace::DRAW, XML_COLOR, sTmp.makeStringAndClear() );
 
-                SvXMLElementExport aElem( rExport, XML_NAMESPACE_PRESENTATION, XML_DIM, true, true );
+                SvXMLElementExport aElem( rExport, XmlNamespace::PRESENTATION, XML_DIM, true, true );
             }
             else if( rEffect.meKind == XMLE_PLAY )
             {
                 if( rEffect.meSpeed != AnimationSpeed_MEDIUM )
                 {
                     SvXMLUnitConverter::convertEnum( sTmp, rEffect.meSpeed, aXML_AnimationSpeed_EnumMap );
-                    rExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_SPEED, sTmp.makeStringAndClear() );
+                    rExport.AddAttribute( XmlNamespace::PRESENTATION, XML_SPEED, sTmp.makeStringAndClear() );
                 }
 
-                SvXMLElementExport aElem( rExport, XML_NAMESPACE_PRESENTATION, XML_PLAY, true, true );
+                SvXMLElementExport aElem( rExport, XmlNamespace::PRESENTATION, XML_PLAY, true, true );
             }
             else
             {
@@ -452,25 +452,25 @@ void XMLAnimationsExporter::exportAnimations( SvXMLExport& rExport )
                 if( rEffect.meEffect != EK_none )
                 {
                     SvXMLUnitConverter::convertEnum( sTmp, rEffect.meEffect, aXML_AnimationEffect_EnumMap );
-                    rExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_EFFECT, sTmp.makeStringAndClear() );
+                    rExport.AddAttribute( XmlNamespace::PRESENTATION, XML_EFFECT, sTmp.makeStringAndClear() );
                 }
 
                 if( rEffect.meDirection != ED_none )
                 {
                     SvXMLUnitConverter::convertEnum( sTmp, rEffect.meDirection, aXML_AnimationDirection_EnumMap );
-                    rExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_DIRECTION, sTmp.makeStringAndClear() );
+                    rExport.AddAttribute( XmlNamespace::PRESENTATION, XML_DIRECTION, sTmp.makeStringAndClear() );
                 }
 
                 if( rEffect.mnStartScale != -1 )
                 {
                     ::sax::Converter::convertPercent(sTmp, rEffect.mnStartScale);
-                    rExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_START_SCALE, sTmp.makeStringAndClear() );
+                    rExport.AddAttribute( XmlNamespace::PRESENTATION, XML_START_SCALE, sTmp.makeStringAndClear() );
                 }
 
                 if( rEffect.meSpeed != AnimationSpeed_MEDIUM )
                 {
                     SvXMLUnitConverter::convertEnum( sTmp, rEffect.meSpeed, aXML_AnimationSpeed_EnumMap );
-                    rExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_SPEED, sTmp.makeStringAndClear() );
+                    rExport.AddAttribute( XmlNamespace::PRESENTATION, XML_SPEED, sTmp.makeStringAndClear() );
                 }
 
                 enum XMLTokenEnum eLocalName;
@@ -489,17 +489,17 @@ void XMLAnimationsExporter::exportAnimations( SvXMLExport& rExport )
                         eLocalName = XML_HIDE_SHAPE;
                 }
 
-                SvXMLElementExport aEle( rExport, XML_NAMESPACE_PRESENTATION, eLocalName, true, true );
+                SvXMLElementExport aEle( rExport, XmlNamespace::PRESENTATION, eLocalName, true, true );
                 if( !rEffect.maSoundURL.isEmpty() )
                 {
-                    rExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, rExport.GetRelativeReference(rEffect.maSoundURL) );
-                    rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                    rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_NEW );
-                    rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONREQUEST );
+                    rExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, rExport.GetRelativeReference(rEffect.maSoundURL) );
+                    rExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                    rExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_NEW );
+                    rExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONREQUEST );
                     if( rEffect.mbPlayFull )
-                        rExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_PLAY_FULL, XML_TRUE );
+                        rExport.AddAttribute( XmlNamespace::PRESENTATION, XML_PLAY_FULL, XML_TRUE );
 
-                    SvXMLElementExport aElem( rExport, XML_NAMESPACE_PRESENTATION, XML_SOUND, true, true );
+                    SvXMLElementExport aElem( rExport, XmlNamespace::PRESENTATION, XML_SOUND, true, true );
                 }
             }
         }
diff --git a/xmloff/source/draw/eventimp.cxx b/xmloff/source/draw/eventimp.cxx
index 0c3b6a981570..b36518e8b4c8 100644
--- a/xmloff/source/draw/eventimp.cxx
+++ b/xmloff/source/draw/eventimp.cxx
@@ -102,7 +102,7 @@ public:
 XMLEventSoundContext::XMLEventSoundContext( SvXMLImport& rImp, sal_uInt16 nPrfx, const OUString& rLocalName, const Reference< XAttributeList >& xAttrList, SdXMLEventContext* pParent )
 : SvXMLImportContext( rImp, nPrfx, rLocalName )
 {
-    if( !(pParent && nPrfx == XML_NAMESPACE_PRESENTATION && IsXMLToken( rLocalName, XML_SOUND )) )
+    if( !(pParent && nPrfx == XmlNamespace::PRESENTATION && IsXMLToken( rLocalName, XML_SOUND )) )
         return;
 
     const sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
@@ -115,13 +115,13 @@ XMLEventSoundContext::XMLEventSoundContext( SvXMLImport& rImp, sal_uInt16 nPrfx,
 
         switch( nAttrPrefix )
         {
-        case XML_NAMESPACE_XLINK:
+        case XmlNamespace::XLINK:
             if( IsXMLToken( aAttrLocalName, XML_HREF ) )
             {
                 pParent->maData.msSoundURL = rImp.GetAbsoluteReference(sValue);
             }
             break;
-        case XML_NAMESPACE_PRESENTATION:
+        case XmlNamespace::PRESENTATION:
             if( IsXMLToken( aAttrLocalName, XML_PLAY_FULL ) )
             {
                 pParent->maData.mbPlayFull = IsXMLToken( sValue, XML_TRUE );
@@ -134,11 +134,11 @@ SdXMLEventContext::SdXMLEventContext( SvXMLImport& rImp,  sal_uInt16 nPrfx, cons
     : SvXMLImportContext(rImp, nPrfx, rLocalName)
     , maData(rxShape)
 {
-    if( nPrfx == XML_NAMESPACE_PRESENTATION && IsXMLToken( rLocalName, XML_EVENT_LISTENER ) )
+    if( nPrfx == XmlNamespace::PRESENTATION && IsXMLToken( rLocalName, XML_EVENT_LISTENER ) )
     {
         maData.mbValid = true;
     }
-    else if( nPrfx == XML_NAMESPACE_SCRIPT && IsXMLToken( rLocalName, XML_EVENT_LISTENER ) )
+    else if( nPrfx == XmlNamespace::SCRIPT && IsXMLToken( rLocalName, XML_EVENT_LISTENER ) )
     {
         maData.mbScript = true;
         maData.mbValid = true;
@@ -160,7 +160,7 @@ SdXMLEventContext::SdXMLEventContext( SvXMLImport& rImp,  sal_uInt16 nPrfx, cons
 
         switch( nAttrPrefix )
         {
-        case XML_NAMESPACE_PRESENTATION:
+        case XmlNamespace::PRESENTATION:
             if( IsXMLToken( aAttrLocalName, XML_ACTION ) )
             {
                 SvXMLUnitConverter::convertEnum( maData.meClickAction, sValue, aXML_EventActions_EnumMap );
@@ -189,13 +189,13 @@ SdXMLEventContext::SdXMLEventContext( SvXMLImport& rImp,  sal_uInt16 nPrfx, cons
             }
             break;
 
-        case XML_NAMESPACE_SCRIPT:
+        case XmlNamespace::SCRIPT:
             if( IsXMLToken( aAttrLocalName, XML_EVENT_NAME ) )
             {
                 sEventName = sValue;
                 sal_uInt16 nScriptPrefix =
                     GetImport().GetNamespaceMap().GetKeyByAttrValueQName(sValue, &sEventName);
-                maData.mbValid = XML_NAMESPACE_DOM == nScriptPrefix && sEventName == "click";
+                maData.mbValid = XmlNamespace::DOM == nScriptPrefix && sEventName == "click";
             }
             else if( IsXMLToken( aAttrLocalName, XML_LANGUAGE ) )
             {
@@ -204,7 +204,7 @@ SdXMLEventContext::SdXMLEventContext( SvXMLImport& rImp,  sal_uInt16 nPrfx, cons
                 maData.msLanguage = sValue;
                 sal_uInt16 nScriptPrefix = rImp.GetNamespaceMap().
                     GetKeyByAttrValueQName(maData.msLanguage, &aScriptLanguage);
-                if( XML_NAMESPACE_OOO == nScriptPrefix )
+                if( XmlNamespace::OOO == nScriptPrefix )
                     maData.msLanguage = aScriptLanguage;
             }
             else if( IsXMLToken( aAttrLocalName, XML_MACRO_NAME ) )
@@ -213,7 +213,7 @@ SdXMLEventContext::SdXMLEventContext( SvXMLImport& rImp,  sal_uInt16 nPrfx, cons
             }
             break;
 
-        case XML_NAMESPACE_XLINK:
+        case XmlNamespace::XLINK:
             if( IsXMLToken( aAttrLocalName, XML_HREF ) )
             {
                 if ( maData.mbScript )
diff --git a/xmloff/source/draw/layerexp.cxx b/xmloff/source/draw/layerexp.cxx
index 64d0536f2805..5b09ca556fb4 100644
--- a/xmloff/source/draw/layerexp.cxx
+++ b/xmloff/source/draw/layerexp.cxx
@@ -63,7 +63,7 @@ void SdXMLayerExporter::exportLayer( SvXMLExport& rExport )
     OUString sTmp;
 
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_DRAW, XML_LAYER_SET, true, true );
+    SvXMLElementExport aElem( rExport, XmlNamespace::DRAW, XML_LAYER_SET, true, true );
 
     for( sal_Int32 nIndex = 0; nIndex < nCount; nIndex++ )
     {
@@ -72,7 +72,7 @@ void SdXMLayerExporter::exportLayer( SvXMLExport& rExport )
             Reference< XPropertySet> xLayer( xLayerManager->getByIndex( nIndex ), UNO_QUERY_THROW );
             xLayer->getPropertyValue( strName ) >>= sTmp;
             if(!sTmp.isEmpty())
-                rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, sTmp );
+                rExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, sTmp );
 
             bool bTmpVisible( true );
             bool bTmpPrintable( true );
@@ -82,14 +82,14 @@ void SdXMLayerExporter::exportLayer( SvXMLExport& rExport )
             if ( bTmpVisible )
             {
                 if ( !bTmpPrintable )
-                    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISPLAY, OUString("screen") );
+                    rExport.AddAttribute( XmlNamespace::DRAW, XML_DISPLAY, OUString("screen") );
             }
             else
             {
                 if ( bTmpPrintable)
-                    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISPLAY, OUString("printer") );
+                    rExport.AddAttribute( XmlNamespace::DRAW, XML_DISPLAY, OUString("printer") );
                 else
-                    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISPLAY, OUString("none") );
+                    rExport.AddAttribute( XmlNamespace::DRAW, XML_DISPLAY, OUString("none") );
             }
 
             bool bTmpLocked( false );
@@ -97,16 +97,16 @@ void SdXMLayerExporter::exportLayer( SvXMLExport& rExport )
             // only write non-default value, default is "false"
             if ( bTmpLocked )
             {
-                rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_PROTECTED, OUString("true") );
+                rExport.AddAttribute( XmlNamespace::DRAW, XML_PROTECTED, OUString("true") );
             }
 
-            SvXMLElementExport aEle( rExport, XML_NAMESPACE_DRAW, XML_LAYER, true, true );
+            SvXMLElementExport aEle( rExport, XmlNamespace::DRAW, XML_LAYER, true, true );
 
             // title property (as <svg:title> element)
             xLayer->getPropertyValue(strTitle) >>= sTmp;
             if(!sTmp.isEmpty())
             {
-                SvXMLElementExport aEventElemt(rExport, XML_NAMESPACE_SVG, XML_TITLE, true, false);
+                SvXMLElementExport aEventElemt(rExport, XmlNamespace::SVG, XML_TITLE, true, false);
                 rExport.Characters(sTmp);
             }
 
@@ -114,7 +114,7 @@ void SdXMLayerExporter::exportLayer( SvXMLExport& rExport )
             xLayer->getPropertyValue(strDescription) >>= sTmp;
             if(!sTmp.isEmpty())
             {
-                SvXMLElementExport aDesc(rExport, XML_NAMESPACE_SVG, XML_DESC, true, false);
+                SvXMLElementExport aDesc(rExport, XmlNamespace::SVG, XML_DESC, true, false);
                 rExport.Characters(sTmp);
             }
         }
diff --git a/xmloff/source/draw/layerimp.cxx b/xmloff/source/draw/layerimp.cxx
index b5ecedf4bc23..f70b8d6135e5 100644
--- a/xmloff/source/draw/layerimp.cxx
+++ b/xmloff/source/draw/layerimp.cxx
@@ -76,7 +76,7 @@ SdXMLLayerContext::SdXMLLayerContext( SvXMLImport& rImport, sal_uInt16 nPrefix,
     for(sal_Int16 i=0; i < nAttrCount; i++)
     {
         OUString aLocalName;
-        if( GetImport().GetNamespaceMap().GetKeyByAttrName( xAttrList->getNameByIndex( i ), &aLocalName ) == XML_NAMESPACE_DRAW )
+        if( GetImport().GetNamespaceMap().GetKeyByAttrName( xAttrList->getNameByIndex( i ), &aLocalName ) == XmlNamespace::DRAW )
         {
             const OUString sValue( xAttrList->getValueByIndex( i ) );
 
@@ -99,11 +99,11 @@ SdXMLLayerContext::SdXMLLayerContext( SvXMLImport& rImport, sal_uInt16 nPrefix,
 
 SvXMLImportContextRef SdXMLLayerContext::CreateChildContext( sal_uInt16 nPrefix, const OUString& rLocalName, const Reference< XAttributeList >& )
 {
-    if( (XML_NAMESPACE_SVG == nPrefix) && IsXMLToken(rLocalName, XML_TITLE) )
+    if( (XmlNamespace::SVG == nPrefix) && IsXMLToken(rLocalName, XML_TITLE) )
     {
         return new XMLStringBufferImportContext( GetImport(), nPrefix, rLocalName, sTitleBuffer);
     }
-    else if( (XML_NAMESPACE_SVG == nPrefix) && IsXMLToken(rLocalName, XML_DESC) )
+    else if( (XmlNamespace::SVG == nPrefix) && IsXMLToken(rLocalName, XML_DESC) )
     {
         return new XMLStringBufferImportContext( GetImport(), nPrefix, rLocalName, sDescriptionBuffer);
     }
diff --git a/xmloff/source/draw/sdpropls.cxx b/xmloff/source/draw/sdpropls.cxx
index 5134a947d4c6..ea9cd410ef49 100644
--- a/xmloff/source/draw/sdpropls.cxx
+++ b/xmloff/source/draw/sdpropls.cxx
@@ -84,231 +84,231 @@ const XMLPropertyMapEntry aXMLSDProperties[] =
     // this entry must be first! this is needed for XMLShapeImportHelper::CreateExternalShapePropMapper
 
     // ^^^though CreateExternalShapePropMapper is gone now, hmm^^^
-    GMAP( "UserDefinedAttributes",          XML_NAMESPACE_TEXT, XML_XMLNS,                  XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
+    GMAP( "UserDefinedAttributes",          XmlNamespace::TEXT, XML_XMLNS,                  XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
 
     // stroke attributes
-    GMAP( "LineStyle",                      XML_NAMESPACE_DRAW, XML_STROKE,                 XML_SD_TYPE_STROKE, 0 ),
-    GMAP( "LineDashName",                   XML_NAMESPACE_DRAW, XML_STROKE_DASH,            XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT , CTF_DASHNAME ),
-    GMAP( "LineWidth",                      XML_NAMESPACE_SVG,  XML_STROKE_WIDTH,           XML_TYPE_MEASURE, 0 ),
-    GMAP_D("LineColor",                     XML_NAMESPACE_SVG,  XML_STROKE_COLOR,           XML_TYPE_COLOR, 0),
-    GMAP( "LineStartName",                  XML_NAMESPACE_DRAW, XML_MARKER_START,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_LINESTARTNAME ),
-    GMAP( "LineStartWidth",                 XML_NAMESPACE_DRAW, XML_MARKER_START_WIDTH,     XML_TYPE_MEASURE, 0 ),
-    GMAP( "LineStartCenter",                XML_NAMESPACE_DRAW, XML_MARKER_START_CENTER,    XML_TYPE_BOOL, 0 ),
-    GMAP( "LineEndName",                    XML_NAMESPACE_DRAW, XML_MARKER_END,             XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_LINEENDNAME ),
-    GMAP( "LineEndWidth",                   XML_NAMESPACE_DRAW, XML_MARKER_END_WIDTH,       XML_TYPE_MEASURE, 0 ),
-    GMAP( "LineEndCenter",                  XML_NAMESPACE_DRAW, XML_MARKER_END_CENTER,      XML_TYPE_BOOL, 0 ),
-    GMAP( "LineTransparence",               XML_NAMESPACE_SVG,  XML_STROKE_OPACITY,         XML_SD_TYPE_OPACITY, 0 ),
-    GMAP( "LineJoint",                      XML_NAMESPACE_DRAW, XML_STROKE_LINEJOIN,        XML_SD_TYPE_LINEJOIN, 0 ),
-    GMAP( "LineCap",                        XML_NAMESPACE_SVG , XML_STROKE_LINECAP,         XML_SD_TYPE_LINECAP, 0 ),
+    GMAP( "LineStyle",                      XmlNamespace::DRAW, XML_STROKE,                 XML_SD_TYPE_STROKE, 0 ),
+    GMAP( "LineDashName",                   XmlNamespace::DRAW, XML_STROKE_DASH,            XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT , CTF_DASHNAME ),
+    GMAP( "LineWidth",                      XmlNamespace::SVG,  XML_STROKE_WIDTH,           XML_TYPE_MEASURE, 0 ),
+    GMAP_D("LineColor",                     XmlNamespace::SVG,  XML_STROKE_COLOR,           XML_TYPE_COLOR, 0),
+    GMAP( "LineStartName",                  XmlNamespace::DRAW, XML_MARKER_START,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_LINESTARTNAME ),
+    GMAP( "LineStartWidth",                 XmlNamespace::DRAW, XML_MARKER_START_WIDTH,     XML_TYPE_MEASURE, 0 ),
+    GMAP( "LineStartCenter",                XmlNamespace::DRAW, XML_MARKER_START_CENTER,    XML_TYPE_BOOL, 0 ),
+    GMAP( "LineEndName",                    XmlNamespace::DRAW, XML_MARKER_END,             XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_LINEENDNAME ),
+    GMAP( "LineEndWidth",                   XmlNamespace::DRAW, XML_MARKER_END_WIDTH,       XML_TYPE_MEASURE, 0 ),
+    GMAP( "LineEndCenter",                  XmlNamespace::DRAW, XML_MARKER_END_CENTER,      XML_TYPE_BOOL, 0 ),
+    GMAP( "LineTransparence",               XmlNamespace::SVG,  XML_STROKE_OPACITY,         XML_SD_TYPE_OPACITY, 0 ),
+    GMAP( "LineJoint",                      XmlNamespace::DRAW, XML_STROKE_LINEJOIN,        XML_SD_TYPE_LINEJOIN, 0 ),
+    GMAP( "LineCap",                        XmlNamespace::SVG , XML_STROKE_LINECAP,         XML_SD_TYPE_LINECAP, 0 ),
 
     // fill attributes
-    GMAP( "FillStyle",                      XML_NAMESPACE_DRAW, XML_FILL,                   XML_SD_TYPE_FILLSTYLE, CTF_FILLSTYLE ),
-    GMAP_D("FillColor",                     XML_NAMESPACE_DRAW, XML_FILL_COLOR,             XML_TYPE_COLOR, CTF_FILLCOLOR ),
-    GMAP_D("FillColor2",                    XML_NAMESPACE_DRAW, XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR, 0),
-    GMAP( "FillGradientName",               XML_NAMESPACE_DRAW, XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLGRADIENTNAME ),
-    GMAP( "FillGradientStepCount",          XML_NAMESPACE_DRAW, XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16, 0 ),
-    GMAP( "FillHatchName",                  XML_NAMESPACE_DRAW, XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLHATCHNAME ),
-    GMAP( "FillBackground",                 XML_NAMESPACE_DRAW, XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL, 0 ),
-    GMAP( "FillBitmapName",                 XML_NAMESPACE_DRAW, XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLBITMAPNAME ),
-    GMAP( "FillTransparence",               XML_NAMESPACE_DRAW, XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY, 0 ),    // exists in SW, too
-    GMAP( "FillTransparenceGradientName",   XML_NAMESPACE_DRAW, XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLTRANSNAME ),
-    GMAP( "FillBitmapSizeX",                XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH,       XML_SD_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapLogicalSize",          XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH,       XML_SD_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapSizeY",                XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SD_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapLogicalSize",          XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SD_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapMode",                 XML_NAMESPACE_STYLE,XML_REPEAT,                 XML_SD_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapPositionOffsetX",      XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT, 0 ),
-    GMAP( "FillBitmapPositionOffsetY",      XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT, 0 ),
-    GMAP( "FillBitmapRectanglePoint",       XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT,   XML_SD_TYPE_BITMAP_REFPOINT, 0 ),
-    GMAP( "FillBitmapOffsetX",              XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET,     XML_SD_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_X ),
-    GMAP( "FillBitmapOffsetY",              XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET,     XML_SD_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_Y ),
+    GMAP( "FillStyle",                      XmlNamespace::DRAW, XML_FILL,                   XML_SD_TYPE_FILLSTYLE, CTF_FILLSTYLE ),
+    GMAP_D("FillColor",                     XmlNamespace::DRAW, XML_FILL_COLOR,             XML_TYPE_COLOR, CTF_FILLCOLOR ),
+    GMAP_D("FillColor2",                    XmlNamespace::DRAW, XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR, 0),
+    GMAP( "FillGradientName",               XmlNamespace::DRAW, XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLGRADIENTNAME ),
+    GMAP( "FillGradientStepCount",          XmlNamespace::DRAW, XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16, 0 ),
+    GMAP( "FillHatchName",                  XmlNamespace::DRAW, XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLHATCHNAME ),
+    GMAP( "FillBackground",                 XmlNamespace::DRAW, XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL, 0 ),
+    GMAP( "FillBitmapName",                 XmlNamespace::DRAW, XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLBITMAPNAME ),
+    GMAP( "FillTransparence",               XmlNamespace::DRAW, XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY, 0 ),    // exists in SW, too
+    GMAP( "FillTransparenceGradientName",   XmlNamespace::DRAW, XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLTRANSNAME ),
+    GMAP( "FillBitmapSizeX",                XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH,       XML_SD_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapLogicalSize",          XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH,       XML_SD_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapSizeY",                XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SD_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapLogicalSize",          XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SD_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapMode",                 XmlNamespace::STYLE,XML_REPEAT,                 XML_SD_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapPositionOffsetX",      XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT, 0 ),
+    GMAP( "FillBitmapPositionOffsetY",      XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT, 0 ),
+    GMAP( "FillBitmapRectanglePoint",       XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT,   XML_SD_TYPE_BITMAP_REFPOINT, 0 ),
+    GMAP( "FillBitmapOffsetX",              XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET,     XML_SD_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_X ),
+    GMAP( "FillBitmapOffsetY",              XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET,     XML_SD_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_Y ),
 
     // text frame attributes
-    GMAP( "TextHorizontalAdjust",           XML_NAMESPACE_DRAW, XML_TEXTAREA_HORIZONTAL_ALIGN,  XML_SD_TYPE_TEXT_ALIGN, 0 ),
-    GMAP( "TextVerticalAdjust",             XML_NAMESPACE_DRAW, XML_TEXTAREA_VERTICAL_ALIGN,    XML_SD_TYPE_VERTICAL_ALIGN, 0 ),
-    GMAP( "TextAutoGrowHeight",             XML_NAMESPACE_DRAW, XML_AUTO_GROW_HEIGHT,       XML_TYPE_BOOL, 0 ),
-    GMAP( "TextAutoGrowWidth",              XML_NAMESPACE_DRAW, XML_AUTO_GROW_WIDTH,        XML_TYPE_BOOL, 0 ),
-    GMAP( "TextFitToSize",                  XML_NAMESPACE_DRAW, XML_FIT_TO_SIZE,            XML_SD_TYPE_FITTOSIZE|MID_FLAG_MERGE_PROPERTY, 0),
-    GMAPV( "TextFitToSize",                 XML_NAMESPACE_STYLE, XML_SHRINK_TO_FIT,         XML_SD_TYPE_FITTOSIZE_AUTOFIT|MID_FLAG_MERGE_PROPERTY, 0, SvtSaveOptions::ODFSVER_012 ),
-    GMAP( "TextContourFrame",               XML_NAMESPACE_DRAW, XML_FIT_TO_CONTOUR,         XML_TYPE_BOOL, 0 ),
-    GMAP( "TextMaximumFrameHeight",         XML_NAMESPACE_FO,   XML_MAX_HEIGHT,             XML_TYPE_MEASURE, 0 ),
-    GMAP( "TextMaximumFrameWidth",          XML_NAMESPACE_FO,   XML_MAX_WIDTH,              XML_TYPE_MEASURE, 0 ),
-    GMAP( "TextMinimumFrameHeight",         XML_NAMESPACE_FO,   XML_MIN_HEIGHT,             XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
-    GMAP( "TextMinimumFrameWidth",          XML_NAMESPACE_FO,   XML_MIN_WIDTH,              XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "TextUpperDistance",              XML_NAMESPACE_FO,   XML_PADDING_TOP,            XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
-    GMAP( "TextLowerDistance",              XML_NAMESPACE_FO,   XML_PADDING_BOTTOM,         XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
-    GMAP( "TextLeftDistance",               XML_NAMESPACE_FO,   XML_PADDING_LEFT,           XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
-    GMAP( "TextRightDistance",              XML_NAMESPACE_FO,   XML_PADDING_RIGHT,          XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
-    PMAP( "TextWritingMode",                XML_NAMESPACE_STYLE,XML_WRITING_MODE,           XML_SD_TYPE_WRITINGMODE|MID_FLAG_MULTI_PROPERTY, CTF_WRITINGMODE ),
-    GMAP( "NumberingRules",                 XML_NAMESPACE_TEXT, XML_LIST_STYLE,             XML_SD_TYPE_NUMBULLET|MID_FLAG_ELEMENT_ITEM, CTF_NUMBERINGRULES ),
-    GMAP( "NumberingRules",                 XML_NAMESPACE_TEXT, XML_LIST_STYLE_NAME,        XML_TYPE_STRING, CTF_SD_NUMBERINGRULES_NAME ),
-    GMAP( "TextWordWrap",                   XML_NAMESPACE_FO,   XML_WRAP_OPTION,            XML_TYPE_WRAP_OPTION, 0 ),
-    GMAP( "TextChainNextName",              XML_NAMESPACE_DRAW,   XML_CHAIN_NEXT_NAME,      XML_TYPE_STRING, 0 ),
+    GMAP( "TextHorizontalAdjust",           XmlNamespace::DRAW, XML_TEXTAREA_HORIZONTAL_ALIGN,  XML_SD_TYPE_TEXT_ALIGN, 0 ),
+    GMAP( "TextVerticalAdjust",             XmlNamespace::DRAW, XML_TEXTAREA_VERTICAL_ALIGN,    XML_SD_TYPE_VERTICAL_ALIGN, 0 ),
+    GMAP( "TextAutoGrowHeight",             XmlNamespace::DRAW, XML_AUTO_GROW_HEIGHT,       XML_TYPE_BOOL, 0 ),
+    GMAP( "TextAutoGrowWidth",              XmlNamespace::DRAW, XML_AUTO_GROW_WIDTH,        XML_TYPE_BOOL, 0 ),
+    GMAP( "TextFitToSize",                  XmlNamespace::DRAW, XML_FIT_TO_SIZE,            XML_SD_TYPE_FITTOSIZE|MID_FLAG_MERGE_PROPERTY, 0),
+    GMAPV( "TextFitToSize",                 XmlNamespace::STYLE, XML_SHRINK_TO_FIT,         XML_SD_TYPE_FITTOSIZE_AUTOFIT|MID_FLAG_MERGE_PROPERTY, 0, SvtSaveOptions::ODFSVER_012 ),
+    GMAP( "TextContourFrame",               XmlNamespace::DRAW, XML_FIT_TO_CONTOUR,         XML_TYPE_BOOL, 0 ),
+    GMAP( "TextMaximumFrameHeight",         XmlNamespace::FO,   XML_MAX_HEIGHT,             XML_TYPE_MEASURE, 0 ),
+    GMAP( "TextMaximumFrameWidth",          XmlNamespace::FO,   XML_MAX_WIDTH,              XML_TYPE_MEASURE, 0 ),
+    GMAP( "TextMinimumFrameHeight",         XmlNamespace::FO,   XML_MIN_HEIGHT,             XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
+    GMAP( "TextMinimumFrameWidth",          XmlNamespace::FO,   XML_MIN_WIDTH,              XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "TextUpperDistance",              XmlNamespace::FO,   XML_PADDING_TOP,            XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
+    GMAP( "TextLowerDistance",              XmlNamespace::FO,   XML_PADDING_BOTTOM,         XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
+    GMAP( "TextLeftDistance",               XmlNamespace::FO,   XML_PADDING_LEFT,           XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
+    GMAP( "TextRightDistance",              XmlNamespace::FO,   XML_PADDING_RIGHT,          XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too
+    PMAP( "TextWritingMode",                XmlNamespace::STYLE,XML_WRITING_MODE,           XML_SD_TYPE_WRITINGMODE|MID_FLAG_MULTI_PROPERTY, CTF_WRITINGMODE ),
+    GMAP( "NumberingRules",                 XmlNamespace::TEXT, XML_LIST_STYLE,             XML_SD_TYPE_NUMBULLET|MID_FLAG_ELEMENT_ITEM, CTF_NUMBERINGRULES ),
+    GMAP( "NumberingRules",                 XmlNamespace::TEXT, XML_LIST_STYLE_NAME,        XML_TYPE_STRING, CTF_SD_NUMBERINGRULES_NAME ),
+    GMAP( "TextWordWrap",                   XmlNamespace::FO,   XML_WRAP_OPTION,            XML_TYPE_WRAP_OPTION, 0 ),
+    GMAP( "TextChainNextName",              XmlNamespace::DRAW,   XML_CHAIN_NEXT_NAME,      XML_TYPE_STRING, 0 ),
 
     // shadow attributes
-    GMAP( "Shadow",                         XML_NAMESPACE_DRAW, XML_SHADOW,                 XML_SD_TYPE_VISIBLE_HIDDEN, 0 ),
-    GMAP( "ShadowXDistance",                    XML_NAMESPACE_DRAW, XML_SHADOW_OFFSET_X,        XML_TYPE_MEASURE, 0 ),
-    GMAP( "ShadowYDistance",                    XML_NAMESPACE_DRAW, XML_SHADOW_OFFSET_Y,        XML_TYPE_MEASURE, 0 ),
-    GMAP( "ShadowColor",                        XML_NAMESPACE_DRAW, XML_SHADOW_COLOR,           XML_TYPE_COLOR, 0 ),
-    GMAP( "ShadowTransparence",             XML_NAMESPACE_DRAW, XML_SHADOW_OPACITY, XML_TYPE_NEG_PERCENT, 0 ),
-    GMAPV( "ShadowBlur",                     XML_NAMESPACE_LO_EXT, XML_SHADOW_BLUR, XML_TYPE_MEASURE, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAP( "Shadow",                         XmlNamespace::DRAW, XML_SHADOW,                 XML_SD_TYPE_VISIBLE_HIDDEN, 0 ),
+    GMAP( "ShadowXDistance",                    XmlNamespace::DRAW, XML_SHADOW_OFFSET_X,        XML_TYPE_MEASURE, 0 ),
+    GMAP( "ShadowYDistance",                    XmlNamespace::DRAW, XML_SHADOW_OFFSET_Y,        XML_TYPE_MEASURE, 0 ),
+    GMAP( "ShadowColor",                        XmlNamespace::DRAW, XML_SHADOW_COLOR,           XML_TYPE_COLOR, 0 ),
+    GMAP( "ShadowTransparence",             XmlNamespace::DRAW, XML_SHADOW_OPACITY, XML_TYPE_NEG_PERCENT, 0 ),
+    GMAPV( "ShadowBlur",                     XmlNamespace::LO_EXT, XML_SHADOW_BLUR, XML_TYPE_MEASURE, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
 
     // glow attributes
-    GMAPV( "GlowEffectRadius",                 XML_NAMESPACE_LO_EXT, XML_GLOW_RADIUS,          XML_TYPE_MEASURE  , 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV( "GlowEffectColor",                  XML_NAMESPACE_LO_EXT, XML_GLOW_COLOR,           XML_TYPE_COLOR    , 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV( "GlowEffectTransparency",           XML_NAMESPACE_LO_EXT, XML_GLOW_TRANSPARENCY,    XML_TYPE_PERCENT16, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV( "GlowEffectRadius",                 XmlNamespace::LO_EXT, XML_GLOW_RADIUS,          XML_TYPE_MEASURE  , 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV( "GlowEffectColor",                  XmlNamespace::LO_EXT, XML_GLOW_COLOR,           XML_TYPE_COLOR    , 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV( "GlowEffectTransparency",           XmlNamespace::LO_EXT, XML_GLOW_TRANSPARENCY,    XML_TYPE_PERCENT16, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
 
     // soft edge attributes
-    GMAPV( "SoftEdgeRadius",                XML_NAMESPACE_LO_EXT, XML_SOFTEDGE_RADIUS,      XML_TYPE_MEASURE          , 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV( "SoftEdgeRadius",                XmlNamespace::LO_EXT, XML_SOFTEDGE_RADIUS,      XML_TYPE_MEASURE          , 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
 
     // graphic attributes
-    GMAP( "GraphicColorMode",               XML_NAMESPACE_DRAW, XML_COLOR_MODE,             XML_TYPE_COLOR_MODE, 0 ), // exists in SW, too, with same property name
-    GMAP( "AdjustLuminance",                XML_NAMESPACE_DRAW, XML_LUMINANCE,              XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
-    GMAP( "AdjustContrast",                 XML_NAMESPACE_DRAW, XML_CONTRAST,               XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
-    GMAP( "Gamma",                          XML_NAMESPACE_DRAW, XML_GAMMA,                  XML_TYPE_DOUBLE_PERCENT, 0 ), // signed? exists in SW, too, with same property name
-    GMAP( "AdjustRed",                      XML_NAMESPACE_DRAW, XML_RED,                    XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
-    GMAP( "AdjustGreen",                    XML_NAMESPACE_DRAW, XML_GREEN,                  XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
-    GMAP( "AdjustBlue",                     XML_NAMESPACE_DRAW, XML_BLUE,                   XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
-    GMAPV( "GraphicCrop",                   XML_NAMESPACE_FO,   XML_CLIP,                   XML_TYPE_TEXT_CLIP, CTF_TEXT_CLIP, SvtSaveOptions::ODFSVER_012), // exists in SW, too, with same property name
-    GMAP( "GraphicCrop",                    XML_NAMESPACE_FO,   XML_CLIP,                   XML_TYPE_TEXT_CLIP11, CTF_TEXT_CLIP11 ), // exists in SW, too, with same property name
-    GMAP( "Transparency",                   XML_NAMESPACE_DRAW, XML_IMAGE_OPACITY,          XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY, 0 ), // exists in SW, too, with same property name // #i25616#
-    GMAP( "IsMirrored",                     XML_NAMESPACE_STYLE,    XML_MIRROR,             XML_TYPE_SD_MIRROR|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too // #i40214#
+    GMAP( "GraphicColorMode",               XmlNamespace::DRAW, XML_COLOR_MODE,             XML_TYPE_COLOR_MODE, 0 ), // exists in SW, too, with same property name
+    GMAP( "AdjustLuminance",                XmlNamespace::DRAW, XML_LUMINANCE,              XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
+    GMAP( "AdjustContrast",                 XmlNamespace::DRAW, XML_CONTRAST,               XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
+    GMAP( "Gamma",                          XmlNamespace::DRAW, XML_GAMMA,                  XML_TYPE_DOUBLE_PERCENT, 0 ), // signed? exists in SW, too, with same property name
+    GMAP( "AdjustRed",                      XmlNamespace::DRAW, XML_RED,                    XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
+    GMAP( "AdjustGreen",                    XmlNamespace::DRAW, XML_GREEN,                  XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
+    GMAP( "AdjustBlue",                     XmlNamespace::DRAW, XML_BLUE,                   XML_TYPE_PERCENT16, 0 ), // signed? exists in SW, too, with same property name
+    GMAPV( "GraphicCrop",                   XmlNamespace::FO,   XML_CLIP,                   XML_TYPE_TEXT_CLIP, CTF_TEXT_CLIP, SvtSaveOptions::ODFSVER_012), // exists in SW, too, with same property name
+    GMAP( "GraphicCrop",                    XmlNamespace::FO,   XML_CLIP,                   XML_TYPE_TEXT_CLIP11, CTF_TEXT_CLIP11 ), // exists in SW, too, with same property name
+    GMAP( "Transparency",                   XmlNamespace::DRAW, XML_IMAGE_OPACITY,          XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY, 0 ), // exists in SW, too, with same property name // #i25616#
+    GMAP( "IsMirrored",                     XmlNamespace::STYLE,    XML_MIRROR,             XML_TYPE_SD_MIRROR|MID_FLAG_MULTI_PROPERTY, 0 ),  // exists in SW, too // #i40214#
 
     // animation text attributes
-    TMAP( "TextAnimationKind",              XML_NAMESPACE_STYLE,XML_TEXT_BLINKING,          XML_TYPE_TEXT_ANIMATION_BLINKING, CTF_TEXTANIMATION_BLINKING ),
-    GMAP( "TextAnimationKind",              XML_NAMESPACE_TEXT, XML_ANIMATION,              XML_TYPE_TEXT_ANIMATION, CTF_TEXTANIMATION_KIND ),
-    GMAP( "TextAnimationDirection",         XML_NAMESPACE_TEXT, XML_ANIMATION_DIRECTION,    XML_TYPE_TEXT_ANIMATION_DIRECTION, 0 ),
-    GMAP( "TextAnimationStartInside",       XML_NAMESPACE_TEXT, XML_ANIMATION_START_INSIDE, XML_TYPE_BOOL, 0 ),
-    GMAP( "TextAnimationStopInside",            XML_NAMESPACE_TEXT, XML_ANIMATION_STOP_INSIDE,  XML_TYPE_BOOL, 0 ),
-    GMAP( "TextAnimationCount",             XML_NAMESPACE_TEXT, XML_ANIMATION_REPEAT,       XML_TYPE_NUMBER16, 0 ),
-    GMAP( "TextAnimationDelay",             XML_NAMESPACE_TEXT, XML_ANIMATION_DELAY,        XML_TYPE_DURATION16_MS, 0 ),
-    GMAP( "TextAnimationAmount",                XML_NAMESPACE_TEXT, XML_ANIMATION_STEPS,        XML_TYPE_TEXT_ANIMATION_STEPS, 0 ),
+    TMAP( "TextAnimationKind",              XmlNamespace::STYLE,XML_TEXT_BLINKING,          XML_TYPE_TEXT_ANIMATION_BLINKING, CTF_TEXTANIMATION_BLINKING ),
+    GMAP( "TextAnimationKind",              XmlNamespace::TEXT, XML_ANIMATION,              XML_TYPE_TEXT_ANIMATION, CTF_TEXTANIMATION_KIND ),
+    GMAP( "TextAnimationDirection",         XmlNamespace::TEXT, XML_ANIMATION_DIRECTION,    XML_TYPE_TEXT_ANIMATION_DIRECTION, 0 ),
+    GMAP( "TextAnimationStartInside",       XmlNamespace::TEXT, XML_ANIMATION_START_INSIDE, XML_TYPE_BOOL, 0 ),
+    GMAP( "TextAnimationStopInside",            XmlNamespace::TEXT, XML_ANIMATION_STOP_INSIDE,  XML_TYPE_BOOL, 0 ),
+    GMAP( "TextAnimationCount",             XmlNamespace::TEXT, XML_ANIMATION_REPEAT,       XML_TYPE_NUMBER16, 0 ),
+    GMAP( "TextAnimationDelay",             XmlNamespace::TEXT, XML_ANIMATION_DELAY,        XML_TYPE_DURATION16_MS, 0 ),
+    GMAP( "TextAnimationAmount",                XmlNamespace::TEXT, XML_ANIMATION_STEPS,        XML_TYPE_TEXT_ANIMATION_STEPS, 0 ),
 
     // connector attributes
-    GMAP( "EdgeNode1HorzDist",              XML_NAMESPACE_DRAW, XML_START_LINE_SPACING_HORIZONTAL,  XML_TYPE_MEASURE, 0 ),
-    GMAP( "EdgeNode1VertDist",              XML_NAMESPACE_DRAW, XML_START_LINE_SPACING_VERTICAL,    XML_TYPE_MEASURE, 0 ),
-    GMAP( "EdgeNode2HorzDist",              XML_NAMESPACE_DRAW, XML_END_LINE_SPACING_HORIZONTAL,    XML_TYPE_MEASURE, 0 ),
-    GMAP( "EdgeNode2VertDist",              XML_NAMESPACE_DRAW, XML_END_LINE_SPACING_VERTICAL,      XML_TYPE_MEASURE, 0 ),
+    GMAP( "EdgeNode1HorzDist",              XmlNamespace::DRAW, XML_START_LINE_SPACING_HORIZONTAL,  XML_TYPE_MEASURE, 0 ),
+    GMAP( "EdgeNode1VertDist",              XmlNamespace::DRAW, XML_START_LINE_SPACING_VERTICAL,    XML_TYPE_MEASURE, 0 ),
+    GMAP( "EdgeNode2HorzDist",              XmlNamespace::DRAW, XML_END_LINE_SPACING_HORIZONTAL,    XML_TYPE_MEASURE, 0 ),
+    GMAP( "EdgeNode2VertDist",              XmlNamespace::DRAW, XML_END_LINE_SPACING_VERTICAL,      XML_TYPE_MEASURE, 0 ),
 
     // measure attributes
-    GMAP( "MeasureLineDistance",                XML_NAMESPACE_DRAW, XML_LINE_DISTANCE,          XML_TYPE_MEASURE, 0 ),
-    GMAP( "MeasureHelpLineOverhang",            XML_NAMESPACE_DRAW, XML_GUIDE_OVERHANG,         XML_TYPE_MEASURE, 0 ),
-    GMAP( "MeasureHelpLineDistance",            XML_NAMESPACE_DRAW, XML_GUIDE_DISTANCE,         XML_TYPE_MEASURE, 0 ),
-    GMAP( "MeasureHelpLine1Length",         XML_NAMESPACE_DRAW, XML_START_GUIDE,            XML_TYPE_MEASURE, 0 ),
-    GMAP( "MeasureHelpLine2Length",         XML_NAMESPACE_DRAW, XML_END_GUIDE,              XML_TYPE_MEASURE, 0 ),
-    GMAP( "MeasureTextHorizontalPosition",  XML_NAMESPACE_DRAW, XML_MEASURE_ALIGN,          XML_SD_TYPE_MEASURE_HALIGN, 0 ),
-    GMAP( "MeasureTextVerticalPosition",    XML_NAMESPACE_DRAW, XML_MEASURE_VERTICAL_ALIGN, XML_SD_TYPE_MEASURE_VALIGN, 0 ),
-    GMAP( "MeasureUnit",                        XML_NAMESPACE_DRAW, XML_UNIT,                   XML_SD_TYPE_MEASURE_UNIT, 0 ),
-    GMAP( "MeasureShowUnit",                    XML_NAMESPACE_DRAW, XML_SHOW_UNIT,              XML_TYPE_BOOL, 0 ),
-    GMAP( "MeasureBelowReferenceEdge",      XML_NAMESPACE_DRAW, XML_PLACING,                XML_SD_TYPE_MEASURE_PLACING, 0 ),
-    GMAP( "MeasureTextRotate90",                XML_NAMESPACE_DRAW, XML_PARALLEL,               XML_TYPE_BOOL, 0 ),
-    GMAP( "MeasureDecimalPlaces",           XML_NAMESPACE_DRAW, XML_DECIMAL_PLACES,         XML_TYPE_NUMBER16, 0 ),
+    GMAP( "MeasureLineDistance",                XmlNamespace::DRAW, XML_LINE_DISTANCE,          XML_TYPE_MEASURE, 0 ),
+    GMAP( "MeasureHelpLineOverhang",            XmlNamespace::DRAW, XML_GUIDE_OVERHANG,         XML_TYPE_MEASURE, 0 ),
+    GMAP( "MeasureHelpLineDistance",            XmlNamespace::DRAW, XML_GUIDE_DISTANCE,         XML_TYPE_MEASURE, 0 ),
+    GMAP( "MeasureHelpLine1Length",         XmlNamespace::DRAW, XML_START_GUIDE,            XML_TYPE_MEASURE, 0 ),
+    GMAP( "MeasureHelpLine2Length",         XmlNamespace::DRAW, XML_END_GUIDE,              XML_TYPE_MEASURE, 0 ),
+    GMAP( "MeasureTextHorizontalPosition",  XmlNamespace::DRAW, XML_MEASURE_ALIGN,          XML_SD_TYPE_MEASURE_HALIGN, 0 ),
+    GMAP( "MeasureTextVerticalPosition",    XmlNamespace::DRAW, XML_MEASURE_VERTICAL_ALIGN, XML_SD_TYPE_MEASURE_VALIGN, 0 ),
+    GMAP( "MeasureUnit",                        XmlNamespace::DRAW, XML_UNIT,                   XML_SD_TYPE_MEASURE_UNIT, 0 ),
+    GMAP( "MeasureShowUnit",                    XmlNamespace::DRAW, XML_SHOW_UNIT,              XML_TYPE_BOOL, 0 ),
+    GMAP( "MeasureBelowReferenceEdge",      XmlNamespace::DRAW, XML_PLACING,                XML_SD_TYPE_MEASURE_PLACING, 0 ),
+    GMAP( "MeasureTextRotate90",                XmlNamespace::DRAW, XML_PARALLEL,               XML_TYPE_BOOL, 0 ),
+    GMAP( "MeasureDecimalPlaces",           XmlNamespace::DRAW, XML_DECIMAL_PLACES,         XML_TYPE_NUMBER16, 0 ),
 
     // 3D geometry attributes
-    GMAP( "D3DHorizontalSegments",          XML_NAMESPACE_DR3D, XML_HORIZONTAL_SEGMENTS,    XML_TYPE_NUMBER, 0 ),
-    GMAP( "D3DVerticalSegments",                XML_NAMESPACE_DR3D, XML_VERTICAL_SEGMENTS,      XML_TYPE_NUMBER, 0 ),
-    GMAP( "D3DPercentDiagonal",             XML_NAMESPACE_DR3D, XML_EDGE_ROUNDING,          XML_TYPE_PERCENT, 0 ),
-    GMAP( "D3DBackscale",                   XML_NAMESPACE_DR3D, XML_BACK_SCALE,             XML_TYPE_PERCENT, 0 ),
-    GMAP( "D3DEndAngle",                        XML_NAMESPACE_DR3D, XML_END_ANGLE,              XML_TYPE_NUMBER, 0 ),
-    GMAP( "D3DDepth",                       XML_NAMESPACE_DR3D, XML_DEPTH,                  XML_TYPE_MEASURE, 0 ),
-    GMAP( "D3DDoubleSided",                 XML_NAMESPACE_DR3D, XML_BACKFACE_CULLING,       XML_SD_TYPE_BACKFACE_CULLING, 0 ),
+    GMAP( "D3DHorizontalSegments",          XmlNamespace::DR3D, XML_HORIZONTAL_SEGMENTS,    XML_TYPE_NUMBER, 0 ),
+    GMAP( "D3DVerticalSegments",                XmlNamespace::DR3D, XML_VERTICAL_SEGMENTS,      XML_TYPE_NUMBER, 0 ),
+    GMAP( "D3DPercentDiagonal",             XmlNamespace::DR3D, XML_EDGE_ROUNDING,          XML_TYPE_PERCENT, 0 ),
+    GMAP( "D3DBackscale",                   XmlNamespace::DR3D, XML_BACK_SCALE,             XML_TYPE_PERCENT, 0 ),
+    GMAP( "D3DEndAngle",                        XmlNamespace::DR3D, XML_END_ANGLE,              XML_TYPE_NUMBER, 0 ),
+    GMAP( "D3DDepth",                       XmlNamespace::DR3D, XML_DEPTH,                  XML_TYPE_MEASURE, 0 ),
+    GMAP( "D3DDoubleSided",                 XmlNamespace::DR3D, XML_BACKFACE_CULLING,       XML_SD_TYPE_BACKFACE_CULLING, 0 ),
 
     // #107245# New 3D properties which are possible for lathe and extrude 3d objects
-    GMAP( "D3DCloseFront",                  XML_NAMESPACE_DR3D, XML_CLOSE_FRONT,            XML_TYPE_BOOL, 0 ),
-    GMAP( "D3DCloseBack",                   XML_NAMESPACE_DR3D, XML_CLOSE_BACK,             XML_TYPE_BOOL, 0 ),
+    GMAP( "D3DCloseFront",                  XmlNamespace::DR3D, XML_CLOSE_FRONT,            XML_TYPE_BOOL, 0 ),
+    GMAP( "D3DCloseBack",                   XmlNamespace::DR3D, XML_CLOSE_BACK,             XML_TYPE_BOOL, 0 ),
 
     // 3D lighting attributes
-    GMAP( "D3DNormalsKind",                 XML_NAMESPACE_DR3D, XML_NORMALS_KIND,           XML_SD_TYPE_NORMALS_KIND, 0 ),
-    GMAP( "D3DNormalsInvert",               XML_NAMESPACE_DR3D, XML_NORMALS_DIRECTION,      XML_SD_TYPE_NORMALS_DIRECTION, 0 ),
+    GMAP( "D3DNormalsKind",                 XmlNamespace::DR3D, XML_NORMALS_KIND,           XML_SD_TYPE_NORMALS_KIND, 0 ),
+    GMAP( "D3DNormalsInvert",               XmlNamespace::DR3D, XML_NORMALS_DIRECTION,      XML_SD_TYPE_NORMALS_DIRECTION, 0 ),
 
     // 3D texture attributes
-    GMAP( "D3DTextureProjectionX",          XML_NAMESPACE_DR3D, XML_TEX_GENERATION_MODE_X,  XML_SD_TYPE_TEX_GENERATION_MODE_X, 0 ),
-    GMAP( "D3DTextureProjectionY",          XML_NAMESPACE_DR3D, XML_TEX_GENERATION_MODE_Y,  XML_SD_TYPE_TEX_GENERATION_MODE_Y, 0 ),
-    GMAP( "D3DTextureKind",                 XML_NAMESPACE_DR3D, XML_TEX_KIND,               XML_SD_TYPE_TEX_KIND, 0 ),
-    GMAP( "D3DTextureMode",                 XML_NAMESPACE_DR3D, XML_TEX_MODE,               XML_SD_TYPE_TEX_MODE, 0 ),
-    GMAP( "D3DTextureFilter",               XML_NAMESPACE_DR3D, XML_TEX_FILTER,             XML_SD_TYPE_BACKFACE_CULLING, 0 ),
+    GMAP( "D3DTextureProjectionX",          XmlNamespace::DR3D, XML_TEX_GENERATION_MODE_X,  XML_SD_TYPE_TEX_GENERATION_MODE_X, 0 ),
+    GMAP( "D3DTextureProjectionY",          XmlNamespace::DR3D, XML_TEX_GENERATION_MODE_Y,  XML_SD_TYPE_TEX_GENERATION_MODE_Y, 0 ),
+    GMAP( "D3DTextureKind",                 XmlNamespace::DR3D, XML_TEX_KIND,               XML_SD_TYPE_TEX_KIND, 0 ),
+    GMAP( "D3DTextureMode",                 XmlNamespace::DR3D, XML_TEX_MODE,               XML_SD_TYPE_TEX_MODE, 0 ),
+    GMAP( "D3DTextureFilter",               XmlNamespace::DR3D, XML_TEX_FILTER,             XML_SD_TYPE_BACKFACE_CULLING, 0 ),
 
     // 3D material attributes
-    GMAP( "D3DMaterialColor",               XML_NAMESPACE_DR3D, XML_DIFFUSE_COLOR,          XML_TYPE_COLOR, 0 ),
-    GMAP( "D3DMaterialEmission",                XML_NAMESPACE_DR3D, XML_EMISSIVE_COLOR,         XML_TYPE_COLOR, 0 ),
-    GMAP( "D3DMaterialSpecular",                XML_NAMESPACE_DR3D, XML_SPECULAR_COLOR,         XML_TYPE_COLOR, 0 ),
-    GMAP( "D3DMaterialSpecularIntensity",   XML_NAMESPACE_DR3D, XML_SHININESS,              XML_TYPE_PERCENT, 0 ),
+    GMAP( "D3DMaterialColor",               XmlNamespace::DR3D, XML_DIFFUSE_COLOR,          XML_TYPE_COLOR, 0 ),
+    GMAP( "D3DMaterialEmission",                XmlNamespace::DR3D, XML_EMISSIVE_COLOR,         XML_TYPE_COLOR, 0 ),
+    GMAP( "D3DMaterialSpecular",                XmlNamespace::DR3D, XML_SPECULAR_COLOR,         XML_TYPE_COLOR, 0 ),
+    GMAP( "D3DMaterialSpecularIntensity",   XmlNamespace::DR3D, XML_SHININESS,              XML_TYPE_PERCENT, 0 ),
 
     // 3D shadow attributes
-    GMAP( "D3DShadow3D",                        XML_NAMESPACE_DR3D, XML_SHADOW,                 XML_SD_TYPE_VISIBLE_HIDDEN, 0 ),
+    GMAP( "D3DShadow3D",                        XmlNamespace::DR3D, XML_SHADOW,                 XML_SD_TYPE_VISIBLE_HIDDEN, 0 ),
 
     // #FontWork# attributes
-    GMAP( "FontWorkStyle",                  XML_NAMESPACE_DRAW, XML_FONTWORK_STYLE,                 XML_SD_TYPE_FONTWORK_STYLE| MID_FLAG_ELEMENT_ITEM_EXPORT, CTF_FONTWORK_STYLE  ),
-    GMAP( "FontWorkAdjust",                 XML_NAMESPACE_DRAW, XML_FONTWORK_ADJUST,                XML_SD_TYPE_FONTWORK_ADJUST | MID_FLAG_ELEMENT_ITEM_EXPORT,CTF_FONTWORK_ADJUST ),
-    GMAP( "FontWorkDistance",               XML_NAMESPACE_DRAW, XML_FONTWORK_DISTANCE,              XML_TYPE_MEASURE | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_DISTANCE   ),
-    GMAP( "FontWorkStart",                  XML_NAMESPACE_DRAW, XML_FONTWORK_START,                 XML_TYPE_MEASURE | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_START  ),
-    GMAP( "FontWorkMirror",                 XML_NAMESPACE_DRAW, XML_FONTWORK_MIRROR,                XML_TYPE_BOOL | MID_FLAG_ELEMENT_ITEM_EXPORT,              CTF_FONTWORK_MIRROR ),
-    GMAP( "FontWorkOutline",                XML_NAMESPACE_DRAW, XML_FONTWORK_OUTLINE,               XML_TYPE_BOOL | MID_FLAG_ELEMENT_ITEM_EXPORT,              CTF_FONTWORK_OUTLINE    ),
-    GMAP( "FontWorkShadow",                 XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW,                XML_SD_TYPE_FONTWORK_SHADOW | MID_FLAG_ELEMENT_ITEM_EXPORT,CTF_FONTWORK_SHADOW ),
-    GMAP( "FontWorkShadowColor",            XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_COLOR,          XML_TYPE_COLOR | MID_FLAG_ELEMENT_ITEM_EXPORT,             CTF_FONTWORK_SHADOWCOLOR    ),
-    GMAP( "FontWorkShadowOffsetX",          XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_OFFSET_X,       XML_TYPE_MEASURE | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_SHADOWOFFSETX  ),
-    GMAP( "FontWorkShadowOffsetY",          XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_OFFSET_Y,       XML_TYPE_MEASURE | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_SHADOWOFFSETY  ),
-    GMAP( "FontWorkForm",                   XML_NAMESPACE_DRAW, XML_FONTWORK_FORM,                  XML_SD_TYPE_FONTWORK_FORM | MID_FLAG_ELEMENT_ITEM_EXPORT,  CTF_FONTWORK_FORM   ),
-    GMAP( "FontWorkHideForm",               XML_NAMESPACE_DRAW, XML_FONTWORK_HIDE_FORM,             XML_TYPE_BOOL | MID_FLAG_ELEMENT_ITEM_EXPORT,              CTF_FONTWORK_HIDEFORM   ),
-    GMAP( "FontWorkShadowTransparence",     XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_TRANSPARENCE,   XML_TYPE_PERCENT | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_SHADOWTRANSPARENCE ),
+    GMAP( "FontWorkStyle",                  XmlNamespace::DRAW, XML_FONTWORK_STYLE,                 XML_SD_TYPE_FONTWORK_STYLE| MID_FLAG_ELEMENT_ITEM_EXPORT, CTF_FONTWORK_STYLE  ),
+    GMAP( "FontWorkAdjust",                 XmlNamespace::DRAW, XML_FONTWORK_ADJUST,                XML_SD_TYPE_FONTWORK_ADJUST | MID_FLAG_ELEMENT_ITEM_EXPORT,CTF_FONTWORK_ADJUST ),
+    GMAP( "FontWorkDistance",               XmlNamespace::DRAW, XML_FONTWORK_DISTANCE,              XML_TYPE_MEASURE | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_DISTANCE   ),
+    GMAP( "FontWorkStart",                  XmlNamespace::DRAW, XML_FONTWORK_START,                 XML_TYPE_MEASURE | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_START  ),
+    GMAP( "FontWorkMirror",                 XmlNamespace::DRAW, XML_FONTWORK_MIRROR,                XML_TYPE_BOOL | MID_FLAG_ELEMENT_ITEM_EXPORT,              CTF_FONTWORK_MIRROR ),
+    GMAP( "FontWorkOutline",                XmlNamespace::DRAW, XML_FONTWORK_OUTLINE,               XML_TYPE_BOOL | MID_FLAG_ELEMENT_ITEM_EXPORT,              CTF_FONTWORK_OUTLINE    ),
+    GMAP( "FontWorkShadow",                 XmlNamespace::DRAW, XML_FONTWORK_SHADOW,                XML_SD_TYPE_FONTWORK_SHADOW | MID_FLAG_ELEMENT_ITEM_EXPORT,CTF_FONTWORK_SHADOW ),
+    GMAP( "FontWorkShadowColor",            XmlNamespace::DRAW, XML_FONTWORK_SHADOW_COLOR,          XML_TYPE_COLOR | MID_FLAG_ELEMENT_ITEM_EXPORT,             CTF_FONTWORK_SHADOWCOLOR    ),
+    GMAP( "FontWorkShadowOffsetX",          XmlNamespace::DRAW, XML_FONTWORK_SHADOW_OFFSET_X,       XML_TYPE_MEASURE | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_SHADOWOFFSETX  ),
+    GMAP( "FontWorkShadowOffsetY",          XmlNamespace::DRAW, XML_FONTWORK_SHADOW_OFFSET_Y,       XML_TYPE_MEASURE | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_SHADOWOFFSETY  ),
+    GMAP( "FontWorkForm",                   XmlNamespace::DRAW, XML_FONTWORK_FORM,                  XML_SD_TYPE_FONTWORK_FORM | MID_FLAG_ELEMENT_ITEM_EXPORT,  CTF_FONTWORK_FORM   ),
+    GMAP( "FontWorkHideForm",               XmlNamespace::DRAW, XML_FONTWORK_HIDE_FORM,             XML_TYPE_BOOL | MID_FLAG_ELEMENT_ITEM_EXPORT,              CTF_FONTWORK_HIDEFORM   ),
+    GMAP( "FontWorkShadowTransparence",     XmlNamespace::DRAW, XML_FONTWORK_SHADOW_TRANSPARENCE,   XML_TYPE_PERCENT | MID_FLAG_ELEMENT_ITEM_EXPORT,           CTF_FONTWORK_SHADOWTRANSPARENCE ),
 
     // #FontWork# attributes
-    GMAPV("FontWorkStyle",              XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_STYLE,                 XML_SD_TYPE_FONTWORK_STYLE, CTF_FONTWORK_STYLE,         SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkAdjust",             XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_ADJUST,                XML_SD_TYPE_FONTWORK_ADJUST,CTF_FONTWORK_ADJUST,        SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkDistance",           XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_DISTANCE,              XML_TYPE_MEASURE,           CTF_FONTWORK_DISTANCE,      SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkStart",              XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_START,                 XML_TYPE_MEASURE,           CTF_FONTWORK_START,         SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkMirror",             XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_MIRROR,                XML_TYPE_BOOL,              CTF_FONTWORK_MIRROR,        SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkOutline",            XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_OUTLINE,               XML_TYPE_BOOL,              CTF_FONTWORK_OUTLINE,       SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkShadow",             XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_SHADOW,                XML_SD_TYPE_FONTWORK_SHADOW,CTF_FONTWORK_SHADOW,        SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkShadowColor",        XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_SHADOW_COLOR,          XML_TYPE_COLOR,             CTF_FONTWORK_SHADOWCOLOR,   SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkShadowOffsetX",      XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_SHADOW_OFFSET_X,       XML_TYPE_MEASURE,           CTF_FONTWORK_SHADOWOFFSETX, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkShadowOffsetY",      XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_SHADOW_OFFSET_Y,       XML_TYPE_MEASURE,           CTF_FONTWORK_SHADOWOFFSETY, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkForm",               XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_FORM,                  XML_SD_TYPE_FONTWORK_FORM,  CTF_FONTWORK_FORM,          SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkHideForm",           XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_HIDE_FORM,             XML_TYPE_BOOL,              CTF_FONTWORK_HIDEFORM,      SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
-    GMAPV("FontWorkShadowTransparence", XML_NAMESPACE_DRAW_EXT, XML_FONTWORK_SHADOW_TRANSPARENCE,   XML_TYPE_PERCENT,           CTF_FONTWORK_SHADOWTRANSPARENCE, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkStyle",              XmlNamespace::DRAW_EXT, XML_FONTWORK_STYLE,                 XML_SD_TYPE_FONTWORK_STYLE, CTF_FONTWORK_STYLE,         SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkAdjust",             XmlNamespace::DRAW_EXT, XML_FONTWORK_ADJUST,                XML_SD_TYPE_FONTWORK_ADJUST,CTF_FONTWORK_ADJUST,        SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkDistance",           XmlNamespace::DRAW_EXT, XML_FONTWORK_DISTANCE,              XML_TYPE_MEASURE,           CTF_FONTWORK_DISTANCE,      SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkStart",              XmlNamespace::DRAW_EXT, XML_FONTWORK_START,                 XML_TYPE_MEASURE,           CTF_FONTWORK_START,         SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkMirror",             XmlNamespace::DRAW_EXT, XML_FONTWORK_MIRROR,                XML_TYPE_BOOL,              CTF_FONTWORK_MIRROR,        SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkOutline",            XmlNamespace::DRAW_EXT, XML_FONTWORK_OUTLINE,               XML_TYPE_BOOL,              CTF_FONTWORK_OUTLINE,       SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkShadow",             XmlNamespace::DRAW_EXT, XML_FONTWORK_SHADOW,                XML_SD_TYPE_FONTWORK_SHADOW,CTF_FONTWORK_SHADOW,        SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkShadowColor",        XmlNamespace::DRAW_EXT, XML_FONTWORK_SHADOW_COLOR,          XML_TYPE_COLOR,             CTF_FONTWORK_SHADOWCOLOR,   SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkShadowOffsetX",      XmlNamespace::DRAW_EXT, XML_FONTWORK_SHADOW_OFFSET_X,       XML_TYPE_MEASURE,           CTF_FONTWORK_SHADOWOFFSETX, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkShadowOffsetY",      XmlNamespace::DRAW_EXT, XML_FONTWORK_SHADOW_OFFSET_Y,       XML_TYPE_MEASURE,           CTF_FONTWORK_SHADOWOFFSETY, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkForm",               XmlNamespace::DRAW_EXT, XML_FONTWORK_FORM,                  XML_SD_TYPE_FONTWORK_FORM,  CTF_FONTWORK_FORM,          SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkHideForm",           XmlNamespace::DRAW_EXT, XML_FONTWORK_HIDE_FORM,             XML_TYPE_BOOL,              CTF_FONTWORK_HIDEFORM,      SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
+    GMAPV("FontWorkShadowTransparence", XmlNamespace::DRAW_EXT, XML_FONTWORK_SHADOW_TRANSPARENCE,   XML_TYPE_PERCENT,           CTF_FONTWORK_SHADOWTRANSPARENCE, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED),
 
     // control attributes (border exists one more time for the text additions of shapes)
-    GMAP( "ControlSymbolColor",             XML_NAMESPACE_DRAW, XML_SYMBOL_COLOR,           XML_TYPE_COLOR, 0 ),
-    GMAP( "ControlBackground",              XML_NAMESPACE_FO,   XML_BACKGROUND_COLOR,       XML_TYPE_COLOR|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "ControlBorder",                  XML_NAMESPACE_FO,   XML_BORDER,                 XML_SD_TYPE_CONTROL_BORDER|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    GMAP( "ControlBorderColor",             XML_NAMESPACE_FO,   XML_BORDER,                 XML_SD_TYPE_CONTROL_BORDER_COLOR|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    GMAP( "ControlDataStyle",               XML_NAMESPACE_STYLE,XML_DATA_STYLE_NAME,        XML_TYPE_STRING|MID_FLAG_NO_PROPERTY_EXPORT|MID_FLAG_SPECIAL_ITEM, CTF_SD_CONTROL_SHAPE_DATA_STYLE ),
-    GMAP( "ControlTextEmphasis",            XML_NAMESPACE_STYLE,XML_TEXT_EMPHASIZE,         XML_TYPE_CONTROL_TEXT_EMPHASIZE, 0 ),
-    GMAP( "ImageScaleMode",                 XML_NAMESPACE_STYLE,XML_REPEAT,                 XML_SD_TYPE_IMAGE_SCALE_MODE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "ControlWritingMode",             XML_NAMESPACE_STYLE,XML_WRITING_MODE,           XML_TYPE_TEXT_WRITING_MODE_WITH_DEFAULT|MID_FLAG_MULTI_PROPERTY, CTF_CONTROLWRITINGMODE ),
+    GMAP( "ControlSymbolColor",             XmlNamespace::DRAW, XML_SYMBOL_COLOR,           XML_TYPE_COLOR, 0 ),
+    GMAP( "ControlBackground",              XmlNamespace::FO,   XML_BACKGROUND_COLOR,       XML_TYPE_COLOR|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "ControlBorder",                  XmlNamespace::FO,   XML_BORDER,                 XML_SD_TYPE_CONTROL_BORDER|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    GMAP( "ControlBorderColor",             XmlNamespace::FO,   XML_BORDER,                 XML_SD_TYPE_CONTROL_BORDER_COLOR|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    GMAP( "ControlDataStyle",               XmlNamespace::STYLE,XML_DATA_STYLE_NAME,        XML_TYPE_STRING|MID_FLAG_NO_PROPERTY_EXPORT|MID_FLAG_SPECIAL_ITEM, CTF_SD_CONTROL_SHAPE_DATA_STYLE ),
+    GMAP( "ControlTextEmphasis",            XmlNamespace::STYLE,XML_TEXT_EMPHASIZE,         XML_TYPE_CONTROL_TEXT_EMPHASIZE, 0 ),
+    GMAP( "ImageScaleMode",                 XmlNamespace::STYLE,XML_REPEAT,                 XML_SD_TYPE_IMAGE_SCALE_MODE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "ControlWritingMode",             XmlNamespace::STYLE,XML_WRITING_MODE,           XML_TYPE_TEXT_WRITING_MODE_WITH_DEFAULT|MID_FLAG_MULTI_PROPERTY, CTF_CONTROLWRITINGMODE ),
 
     // special entries for floating frames
-    GMAP( "FrameIsAutoScroll",          XML_NAMESPACE_DRAW, XML_FRAME_DISPLAY_SCROLLBAR,    XML_TYPE_BOOL|MID_FLAG_MULTI_PROPERTY,              CTF_FRAME_DISPLAY_SCROLLBAR ),
-    GMAP( "FrameIsBorder",              XML_NAMESPACE_DRAW, XML_FRAME_DISPLAY_BORDER,       XML_TYPE_BOOL|MID_FLAG_MULTI_PROPERTY,              CTF_FRAME_DISPLAY_BORDER ),
-    GMAP( "FrameMarginWidth",           XML_NAMESPACE_DRAW, XML_FRAME_MARGIN_HORIZONTAL,    XML_TYPE_MEASURE_PX|MID_FLAG_MULTI_PROPERTY,        CTF_FRAME_MARGIN_HORI ),
-    GMAP( "FrameMarginHeight",          XML_NAMESPACE_DRAW, XML_FRAME_MARGIN_VERTICAL,      XML_TYPE_MEASURE_PX|MID_FLAG_MULTI_PROPERTY,        CTF_FRAME_MARGIN_VERT ),
-    GMAP( "VisibleArea",                XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_LEFT,          XML_TYPE_RECTANGLE_LEFT|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY,   CTF_SD_OLE_VIS_AREA_IMPORT_LEFT ),
-    GMAP( "VisibleArea",                XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_TOP,           XML_TYPE_RECTANGLE_TOP|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY,    CTF_SD_OLE_VIS_AREA_IMPORT_TOP ),
-    GMAP( "VisibleArea",                XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_WIDTH,         XML_TYPE_RECTANGLE_WIDTH|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY,  CTF_SD_OLE_VIS_AREA_IMPORT_WIDTH ),
-    GMAP( "VisibleArea",                XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_HEIGHT,        XML_TYPE_RECTANGLE_HEIGHT|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY, CTF_SD_OLE_VIS_AREA_IMPORT_HEIGHT ),
-    GMAP( "IsInternal",                 XML_NAMESPACE_DRAW, XML__EMPTY,                     XML_TYPE_BUILDIN_CMP_ONLY,                          CTF_SD_OLE_ISINTERNAL ),
-    GMAP( "IsInternal",                 XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_LEFT,          XML_TYPE_RECTANGLE_LEFT|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT,    CTF_SD_OLE_VIS_AREA_EXPORT_LEFT ),
-    GMAP( "IsInternal",                 XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_TOP,           XML_TYPE_RECTANGLE_TOP|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT,     CTF_SD_OLE_VIS_AREA_EXPORT_TOP ),
-    GMAP( "IsInternal",                 XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_WIDTH,         XML_TYPE_RECTANGLE_WIDTH|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT,   CTF_SD_OLE_VIS_AREA_EXPORT_WIDTH ),
-    GMAP( "IsInternal",                 XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_HEIGHT,        XML_TYPE_RECTANGLE_HEIGHT|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT,  CTF_SD_OLE_VIS_AREA_EXPORT_HEIGHT ),
-
-    GMAP( "Aspect",                     XML_NAMESPACE_DRAW, XML_DRAW_ASPECT,                XML_TYPE_TEXT_DRAW_ASPECT|MID_FLAG_MULTI_PROPERTY,  CTF_SD_OLE_ASPECT ),
+    GMAP( "FrameIsAutoScroll",          XmlNamespace::DRAW, XML_FRAME_DISPLAY_SCROLLBAR,    XML_TYPE_BOOL|MID_FLAG_MULTI_PROPERTY,              CTF_FRAME_DISPLAY_SCROLLBAR ),
+    GMAP( "FrameIsBorder",              XmlNamespace::DRAW, XML_FRAME_DISPLAY_BORDER,       XML_TYPE_BOOL|MID_FLAG_MULTI_PROPERTY,              CTF_FRAME_DISPLAY_BORDER ),
+    GMAP( "FrameMarginWidth",           XmlNamespace::DRAW, XML_FRAME_MARGIN_HORIZONTAL,    XML_TYPE_MEASURE_PX|MID_FLAG_MULTI_PROPERTY,        CTF_FRAME_MARGIN_HORI ),
+    GMAP( "FrameMarginHeight",          XmlNamespace::DRAW, XML_FRAME_MARGIN_VERTICAL,      XML_TYPE_MEASURE_PX|MID_FLAG_MULTI_PROPERTY,        CTF_FRAME_MARGIN_VERT ),
+    GMAP( "VisibleArea",                XmlNamespace::DRAW, XML_VISIBLE_AREA_LEFT,          XML_TYPE_RECTANGLE_LEFT|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY,   CTF_SD_OLE_VIS_AREA_IMPORT_LEFT ),
+    GMAP( "VisibleArea",                XmlNamespace::DRAW, XML_VISIBLE_AREA_TOP,           XML_TYPE_RECTANGLE_TOP|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY,    CTF_SD_OLE_VIS_AREA_IMPORT_TOP ),
+    GMAP( "VisibleArea",                XmlNamespace::DRAW, XML_VISIBLE_AREA_WIDTH,         XML_TYPE_RECTANGLE_WIDTH|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY,  CTF_SD_OLE_VIS_AREA_IMPORT_WIDTH ),
+    GMAP( "VisibleArea",                XmlNamespace::DRAW, XML_VISIBLE_AREA_HEIGHT,        XML_TYPE_RECTANGLE_HEIGHT|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY, CTF_SD_OLE_VIS_AREA_IMPORT_HEIGHT ),
+    GMAP( "IsInternal",                 XmlNamespace::DRAW, XML__EMPTY,                     XML_TYPE_BUILDIN_CMP_ONLY,                          CTF_SD_OLE_ISINTERNAL ),
+    GMAP( "IsInternal",                 XmlNamespace::DRAW, XML_VISIBLE_AREA_LEFT,          XML_TYPE_RECTANGLE_LEFT|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT,    CTF_SD_OLE_VIS_AREA_EXPORT_LEFT ),
+    GMAP( "IsInternal",                 XmlNamespace::DRAW, XML_VISIBLE_AREA_TOP,           XML_TYPE_RECTANGLE_TOP|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT,     CTF_SD_OLE_VIS_AREA_EXPORT_TOP ),
+    GMAP( "IsInternal",                 XmlNamespace::DRAW, XML_VISIBLE_AREA_WIDTH,         XML_TYPE_RECTANGLE_WIDTH|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT,   CTF_SD_OLE_VIS_AREA_EXPORT_WIDTH ),
+    GMAP( "IsInternal",                 XmlNamespace::DRAW, XML_VISIBLE_AREA_HEIGHT,        XML_TYPE_RECTANGLE_HEIGHT|MID_FLAG_MERGE_PROPERTY|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT,  CTF_SD_OLE_VIS_AREA_EXPORT_HEIGHT ),
+
+    GMAP( "Aspect",                     XmlNamespace::DRAW, XML_DRAW_ASPECT,                XML_TYPE_TEXT_DRAW_ASPECT|MID_FLAG_MULTI_PROPERTY,  CTF_SD_OLE_ASPECT ),
 
     // caption properties
-    GMAP( "CaptionType",                    XML_NAMESPACE_DRAW, XML_CAPTION_TYPE,               XML_SD_TYPE_CAPTION_TYPE, 0 ),
-    GMAP( "CaptionIsFixedAngle",            XML_NAMESPACE_DRAW, XML_CAPTION_ANGLE_TYPE,         XML_SD_TYPE_CAPTION_ANGLE_TYPE, 0 ),
-    GMAP( "CaptionAngle",               XML_NAMESPACE_DRAW, XML_CAPTION_ANGLE,              XML_TYPE_NUMBER, 0 ),
-    GMAP( "CaptionGap",                 XML_NAMESPACE_DRAW, XML_CAPTION_GAP,                XML_TYPE_MEASURE, 0 ),
-    GMAP( "CaptionEscapeDirection",     XML_NAMESPACE_DRAW, XML_CAPTION_ESCAPE_DIRECTION,   XML_SD_TYPE_CAPTION_ESC_DIR, 0 ),
-    GMAP( "CaptionIsEscapeRelative",    XML_NAMESPACE_DRAW, XML_CAPTION_ESCAPE,             XML_SD_TYPE_CAPTION_IS_ESC_REL|MID_FLAG_MULTI_PROPERTY, CTF_CAPTION_ISESCREL ),
-    GMAP( "CaptionEscapeRelative",      XML_NAMESPACE_DRAW, XML_CAPTION_ESCAPE,             XML_SD_TYPE_CAPTION_ESC_REL|MID_FLAG_MULTI_PROPERTY, CTF_CAPTION_ESCREL ),
-    GMAP( "CaptionEscapeAbsolute",      XML_NAMESPACE_DRAW, XML_CAPTION_ESCAPE,             XML_SD_TYPE_CAPTION_ESC_ABS|MID_FLAG_MULTI_PROPERTY, CTF_CAPTION_ESCABS ),
-    GMAP( "CaptionLineLength",          XML_NAMESPACE_DRAW, XML_CAPTION_LINE_LENGTH,        XML_TYPE_MEASURE, 0 ),
-    GMAP( "CaptionIsFitLineLength",     XML_NAMESPACE_DRAW, XML_CAPTION_FIT_LINE_LENGTH,    XML_TYPE_BOOL, 0 ),
+    GMAP( "CaptionType",                    XmlNamespace::DRAW, XML_CAPTION_TYPE,               XML_SD_TYPE_CAPTION_TYPE, 0 ),
+    GMAP( "CaptionIsFixedAngle",            XmlNamespace::DRAW, XML_CAPTION_ANGLE_TYPE,         XML_SD_TYPE_CAPTION_ANGLE_TYPE, 0 ),
+    GMAP( "CaptionAngle",               XmlNamespace::DRAW, XML_CAPTION_ANGLE,              XML_TYPE_NUMBER, 0 ),
+    GMAP( "CaptionGap",                 XmlNamespace::DRAW, XML_CAPTION_GAP,                XML_TYPE_MEASURE, 0 ),
+    GMAP( "CaptionEscapeDirection",     XmlNamespace::DRAW, XML_CAPTION_ESCAPE_DIRECTION,   XML_SD_TYPE_CAPTION_ESC_DIR, 0 ),
+    GMAP( "CaptionIsEscapeRelative",    XmlNamespace::DRAW, XML_CAPTION_ESCAPE,             XML_SD_TYPE_CAPTION_IS_ESC_REL|MID_FLAG_MULTI_PROPERTY, CTF_CAPTION_ISESCREL ),
+    GMAP( "CaptionEscapeRelative",      XmlNamespace::DRAW, XML_CAPTION_ESCAPE,             XML_SD_TYPE_CAPTION_ESC_REL|MID_FLAG_MULTI_PROPERTY, CTF_CAPTION_ESCREL ),
+    GMAP( "CaptionEscapeAbsolute",      XmlNamespace::DRAW, XML_CAPTION_ESCAPE,             XML_SD_TYPE_CAPTION_ESC_ABS|MID_FLAG_MULTI_PROPERTY, CTF_CAPTION_ESCABS ),
+    GMAP( "CaptionLineLength",          XmlNamespace::DRAW, XML_CAPTION_LINE_LENGTH,        XML_TYPE_MEASURE, 0 ),
+    GMAP( "CaptionIsFitLineLength",     XmlNamespace::DRAW, XML_CAPTION_FIT_LINE_LENGTH,    XML_TYPE_BOOL, 0 ),
 
     // misc object properties
-    GMAP( "MoveProtect",                    XML_NAMESPACE_STYLE, XML_PROTECT,               XML_SD_TYPE_MOVE_PROTECT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, CTF_SD_MOVE_PROTECT ),
-    GMAP( "SizeProtect",                    XML_NAMESPACE_STYLE, XML_PROTECT,               XML_SD_TYPE_SIZE_PROTECT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, CTF_SD_SIZE_PROTECT ),
+    GMAP( "MoveProtect",                    XmlNamespace::STYLE, XML_PROTECT,               XML_SD_TYPE_MOVE_PROTECT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, CTF_SD_MOVE_PROTECT ),
+    GMAP( "SizeProtect",                    XmlNamespace::STYLE, XML_PROTECT,               XML_SD_TYPE_SIZE_PROTECT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, CTF_SD_SIZE_PROTECT ),
 
     MAP_END()
 };
@@ -317,57 +317,57 @@ const XMLPropertyMapEntry aXMLSDProperties[] =
 
 const XMLPropertyMapEntry aXMLSDPresPageProps[] =
 {
-    DPMAP( "UserDefinedAttributes",     XML_NAMESPACE_TEXT, XML_XMLNS,                  XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
-
-    DPMAP( "Change",                        XML_NAMESPACE_PRESENTATION, XML_TRANSITION_TYPE,    XML_SD_TYPE_PRESPAGE_TYPE, CTF_PAGE_TRANS_TYPE ),
-    DPMAP( "Effect",                        XML_NAMESPACE_PRESENTATION, XML_TRANSITION_STYLE,   XML_SD_TYPE_PRESPAGE_STYLE, CTF_PAGE_TRANS_STYLE ),
-    DPMAP( "Speed",                     XML_NAMESPACE_PRESENTATION, XML_TRANSITION_SPEED,   XML_SD_TYPE_PRESPAGE_SPEED, CTF_PAGE_TRANS_SPEED ),
-    DPMAP( "HighResDuration",           XML_NAMESPACE_PRESENTATION, XML_DURATION,           XML_SD_TYPE_PRESPAGE_DURATION, CTF_PAGE_TRANS_DURATION ),
-    DPMAP( "Visible",                   XML_NAMESPACE_PRESENTATION, XML_VISIBILITY,         XML_SD_TYPE_PRESPAGE_VISIBILITY, CTF_PAGE_VISIBLE ),
-    DPMAP( "Sound",                     XML_NAMESPACE_PRESENTATION, XML_SOUND,              XML_TYPE_STRING|MID_FLAG_ELEMENT_ITEM, CTF_PAGE_SOUND_URL ),
-    DPMAP( "BackgroundFullSize",            XML_NAMESPACE_DRAW,         XML_BACKGROUND_SIZE,    XML_SD_TYPE_PRESPAGE_BACKSIZE, CTF_PAGE_BACKSIZE ),
-
-    DPMAP( "IsBackgroundVisible",       XML_NAMESPACE_PRESENTATION, XML_BACKGROUND_VISIBLE, XML_TYPE_BOOL, 0 ),
-    DPMAP( "IsBackgroundObjectsVisible",    XML_NAMESPACE_PRESENTATION, XML_BACKGROUND_OBJECTS_VISIBLE, XML_TYPE_BOOL, 0 ),
-
-    DPMAP( "FillStyle",                 XML_NAMESPACE_DRAW, XML_FILL,                   XML_SD_TYPE_FILLSTYLE, 0 ),
-    DPMAP( "FillColor",                 XML_NAMESPACE_DRAW, XML_FILL_COLOR,             XML_TYPE_COLOR, 0 ),
-    DPMAP( "FillGradientName",          XML_NAMESPACE_DRAW, XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLGRADIENTNAME ),
-    DPMAP( "FillGradientStepCount",     XML_NAMESPACE_DRAW, XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER, 0 ),
-    DPMAP( "FillHatchName",             XML_NAMESPACE_DRAW, XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLHATCHNAME ),
-    GMAP( "FillBackground",                 XML_NAMESPACE_DRAW, XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL, 0 ),
-    DPMAP( "FillBitmapName",                XML_NAMESPACE_DRAW, XML_FILL_IMAGE_NAME,    XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLBITMAPNAME ),
-    DPMAP( "FillTransparence",              XML_NAMESPACE_DRAW, XML_OPACITY,           XML_TYPE_NEG_PERCENT|MID_FLAG_MULTI_PROPERTY,  0 ),
-    DPMAP( "FillTransparenceGradientName",  XML_NAMESPACE_DRAW, XML_OPACITY_NAME,       XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLTRANSNAME ),
-    DPMAP( "FillBitmapSizeX",           XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH,       XML_SD_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    DPMAP( "FillBitmapLogicalSize",     XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH,       XML_SD_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    DPMAP( "FillBitmapSizeY",           XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SD_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    DPMAP( "FillBitmapLogicalSize",     XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SD_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    DPMAP( "FillBitmapMode",            XML_NAMESPACE_STYLE,XML_REPEAT,                 XML_SD_TYPE_BITMAP_MODE, 0 ),
-    DPMAP( "FillBitmapPositionOffsetX", XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT, 0 ),
-    DPMAP( "FillBitmapPositionOffsetY", XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT, 0 ),
-    DPMAP( "FillBitmapRectanglePoint",  XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT,   XML_SD_TYPE_BITMAP_REFPOINT, 0 ),
-    DPMAP( "FillBitmapOffsetX",         XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET,     XML_SD_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_X ),
-    DPMAP( "FillBitmapOffsetY",         XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET, XML_SD_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_Y ),
-
-    DPMAP( "IsHeaderVisible",           XML_NAMESPACE_PRESENTATION, XML_DISPLAY_HEADER,         XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_HEADER_VISIBLE ),
-    DPMAP( "IsFooterVisible",           XML_NAMESPACE_PRESENTATION, XML_DISPLAY_FOOTER,         XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_FOOTER_VISIBLE ),
-    DPMAP( "IsPageNumberVisible",       XML_NAMESPACE_PRESENTATION, XML_DISPLAY_PAGE_NUMBER,    XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_PAGE_NUMBER_VISIBLE ),
-    DPMAP( "IsDateTimeVisible",         XML_NAMESPACE_PRESENTATION, XML_DISPLAY_DATE_TIME,      XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_DATE_TIME_VISIBLE ),
-
-    DPMAP( "TransitionType",            XML_NAMESPACE_SMIL, XML_TYPE,                   XML_SD_TYPE_TRANSITION_TYPE, CTF_PAGE_TRANSITION_TYPE ),
-    DPMAP( "TransitionSubtype",         XML_NAMESPACE_SMIL, XML_SUBTYPE,                XML_SD_TYPE_TRANSTIION_SUBTYPE, CTF_PAGE_TRANSITION_SUBTYPE ),
-    DPMAP( "TransitionDirection",       XML_NAMESPACE_SMIL, XML_DIRECTION,              XML_SD_TYPE_TRANSTIION_DIRECTION, CTF_PAGE_TRANSITION_DIRECTION ),
-    DPMAP( "TransitionFadeColor",       XML_NAMESPACE_SMIL, XML_FADECOLOR,              XML_TYPE_COLOR, CTF_PAGE_TRANSITION_FADECOLOR ),
+    DPMAP( "UserDefinedAttributes",     XmlNamespace::TEXT, XML_XMLNS,                  XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
+
+    DPMAP( "Change",                        XmlNamespace::PRESENTATION, XML_TRANSITION_TYPE,    XML_SD_TYPE_PRESPAGE_TYPE, CTF_PAGE_TRANS_TYPE ),
+    DPMAP( "Effect",                        XmlNamespace::PRESENTATION, XML_TRANSITION_STYLE,   XML_SD_TYPE_PRESPAGE_STYLE, CTF_PAGE_TRANS_STYLE ),
+    DPMAP( "Speed",                     XmlNamespace::PRESENTATION, XML_TRANSITION_SPEED,   XML_SD_TYPE_PRESPAGE_SPEED, CTF_PAGE_TRANS_SPEED ),
+    DPMAP( "HighResDuration",           XmlNamespace::PRESENTATION, XML_DURATION,           XML_SD_TYPE_PRESPAGE_DURATION, CTF_PAGE_TRANS_DURATION ),
+    DPMAP( "Visible",                   XmlNamespace::PRESENTATION, XML_VISIBILITY,         XML_SD_TYPE_PRESPAGE_VISIBILITY, CTF_PAGE_VISIBLE ),
+    DPMAP( "Sound",                     XmlNamespace::PRESENTATION, XML_SOUND,              XML_TYPE_STRING|MID_FLAG_ELEMENT_ITEM, CTF_PAGE_SOUND_URL ),
+    DPMAP( "BackgroundFullSize",            XmlNamespace::DRAW,         XML_BACKGROUND_SIZE,    XML_SD_TYPE_PRESPAGE_BACKSIZE, CTF_PAGE_BACKSIZE ),
+
+    DPMAP( "IsBackgroundVisible",       XmlNamespace::PRESENTATION, XML_BACKGROUND_VISIBLE, XML_TYPE_BOOL, 0 ),
+    DPMAP( "IsBackgroundObjectsVisible",    XmlNamespace::PRESENTATION, XML_BACKGROUND_OBJECTS_VISIBLE, XML_TYPE_BOOL, 0 ),
+
+    DPMAP( "FillStyle",                 XmlNamespace::DRAW, XML_FILL,                   XML_SD_TYPE_FILLSTYLE, 0 ),
+    DPMAP( "FillColor",                 XmlNamespace::DRAW, XML_FILL_COLOR,             XML_TYPE_COLOR, 0 ),
+    DPMAP( "FillGradientName",          XmlNamespace::DRAW, XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLGRADIENTNAME ),
+    DPMAP( "FillGradientStepCount",     XmlNamespace::DRAW, XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER, 0 ),
+    DPMAP( "FillHatchName",             XmlNamespace::DRAW, XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLHATCHNAME ),
+    GMAP( "FillBackground",                 XmlNamespace::DRAW, XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL, 0 ),
+    DPMAP( "FillBitmapName",                XmlNamespace::DRAW, XML_FILL_IMAGE_NAME,    XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLBITMAPNAME ),
+    DPMAP( "FillTransparence",              XmlNamespace::DRAW, XML_OPACITY,           XML_TYPE_NEG_PERCENT|MID_FLAG_MULTI_PROPERTY,  0 ),
+    DPMAP( "FillTransparenceGradientName",  XmlNamespace::DRAW, XML_OPACITY_NAME,       XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLTRANSNAME ),
+    DPMAP( "FillBitmapSizeX",           XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH,       XML_SD_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    DPMAP( "FillBitmapLogicalSize",     XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH,       XML_SD_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    DPMAP( "FillBitmapSizeY",           XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SD_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    DPMAP( "FillBitmapLogicalSize",     XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SD_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    DPMAP( "FillBitmapMode",            XmlNamespace::STYLE,XML_REPEAT,                 XML_SD_TYPE_BITMAP_MODE, 0 ),
+    DPMAP( "FillBitmapPositionOffsetX", XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT, 0 ),
+    DPMAP( "FillBitmapPositionOffsetY", XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT, 0 ),
+    DPMAP( "FillBitmapRectanglePoint",  XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT,   XML_SD_TYPE_BITMAP_REFPOINT, 0 ),
+    DPMAP( "FillBitmapOffsetX",         XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET,     XML_SD_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_X ),
+    DPMAP( "FillBitmapOffsetY",         XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET, XML_SD_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_Y ),
+
+    DPMAP( "IsHeaderVisible",           XmlNamespace::PRESENTATION, XML_DISPLAY_HEADER,         XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_HEADER_VISIBLE ),
+    DPMAP( "IsFooterVisible",           XmlNamespace::PRESENTATION, XML_DISPLAY_FOOTER,         XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_FOOTER_VISIBLE ),
+    DPMAP( "IsPageNumberVisible",       XmlNamespace::PRESENTATION, XML_DISPLAY_PAGE_NUMBER,    XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_PAGE_NUMBER_VISIBLE ),
+    DPMAP( "IsDateTimeVisible",         XmlNamespace::PRESENTATION, XML_DISPLAY_DATE_TIME,      XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_DATE_TIME_VISIBLE ),
+
+    DPMAP( "TransitionType",            XmlNamespace::SMIL, XML_TYPE,                   XML_SD_TYPE_TRANSITION_TYPE, CTF_PAGE_TRANSITION_TYPE ),
+    DPMAP( "TransitionSubtype",         XmlNamespace::SMIL, XML_SUBTYPE,                XML_SD_TYPE_TRANSTIION_SUBTYPE, CTF_PAGE_TRANSITION_SUBTYPE ),
+    DPMAP( "TransitionDirection",       XmlNamespace::SMIL, XML_DIRECTION,              XML_SD_TYPE_TRANSTIION_DIRECTION, CTF_PAGE_TRANSITION_DIRECTION ),
+    DPMAP( "TransitionFadeColor",       XmlNamespace::SMIL, XML_FADECOLOR,              XML_TYPE_COLOR, CTF_PAGE_TRANSITION_FADECOLOR ),
     MAP_END()
 };
 
 const XMLPropertyMapEntry aXMLSDPresPageProps_onlyHeadersFooter[] =
 {
-    DPMAP( "IsHeaderVisible",               XML_NAMESPACE_PRESENTATION, XML_DISPLAY_HEADER,         XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_HEADER_VISIBLE ),
-    DPMAP( "IsFooterVisible",               XML_NAMESPACE_PRESENTATION, XML_DISPLAY_FOOTER,         XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_FOOTER_VISIBLE ),
-    DPMAP( "IsPageNumberVisible",           XML_NAMESPACE_PRESENTATION, XML_DISPLAY_PAGE_NUMBER,    XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_PAGE_NUMBER_VISIBLE ),
-    DPMAP( "IsDateTimeVisible",             XML_NAMESPACE_PRESENTATION, XML_DISPLAY_DATE_TIME,      XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_DATE_TIME_VISIBLE ),
+    DPMAP( "IsHeaderVisible",               XmlNamespace::PRESENTATION, XML_DISPLAY_HEADER,         XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_HEADER_VISIBLE ),
+    DPMAP( "IsFooterVisible",               XmlNamespace::PRESENTATION, XML_DISPLAY_FOOTER,         XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_FOOTER_VISIBLE ),
+    DPMAP( "IsPageNumberVisible",           XmlNamespace::PRESENTATION, XML_DISPLAY_PAGE_NUMBER,    XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_PAGE_NUMBER_VISIBLE ),
+    DPMAP( "IsDateTimeVisible",             XmlNamespace::PRESENTATION, XML_DISPLAY_DATE_TIME,      XML_SD_TYPE_HEADER_FOOTER_VISIBILITY_TYPE, CTF_DATE_TIME_VISIBLE ),
 
     MAP_END()
 };
@@ -377,12 +377,12 @@ const XMLPropertyMapEntry aXMLSDPresPageProps_onlyHeadersFooter[] =
 */
 const XMLPropertyMapEntry aXMLTableShapeAttributes[] =
 {
-    MAP_( "UseFirstRowStyle",       XML_NAMESPACE_TABLE, XML_USE_FIRST_ROW_STYLES, XML_TYPE_BOOL, 0 ),
-    MAP_( "UseLastRowStyle",        XML_NAMESPACE_TABLE, XML_USE_LAST_ROW_STYLES, XML_TYPE_BOOL, 0 ),
-    MAP_( "UseFirstColumnStyle",    XML_NAMESPACE_TABLE, XML_USE_FIRST_COLUMN_STYLES, XML_TYPE_BOOL, 0 ),
-    MAP_( "UseLastColumnStyle",     XML_NAMESPACE_TABLE, XML_USE_LAST_COLUMN_STYLES, XML_TYPE_BOOL, 0 ),
-    MAP_( "UseBandingRowStyle",     XML_NAMESPACE_TABLE, XML_USE_BANDING_ROWS_STYLES, XML_TYPE_BOOL, 0 ),
-    MAP_( "UseBandingColumnStyle",  XML_NAMESPACE_TABLE, XML_USE_BANDING_COLUMNS_STYLES, XML_TYPE_BOOL, 0 ),
+    MAP_( "UseFirstRowStyle",       XmlNamespace::TABLE, XML_USE_FIRST_ROW_STYLES, XML_TYPE_BOOL, 0 ),
+    MAP_( "UseLastRowStyle",        XmlNamespace::TABLE, XML_USE_LAST_ROW_STYLES, XML_TYPE_BOOL, 0 ),
+    MAP_( "UseFirstColumnStyle",    XmlNamespace::TABLE, XML_USE_FIRST_COLUMN_STYLES, XML_TYPE_BOOL, 0 ),
+    MAP_( "UseLastColumnStyle",     XmlNamespace::TABLE, XML_USE_LAST_COLUMN_STYLES, XML_TYPE_BOOL, 0 ),
+    MAP_( "UseBandingRowStyle",     XmlNamespace::TABLE, XML_USE_BANDING_ROWS_STYLES, XML_TYPE_BOOL, 0 ),
+    MAP_( "UseBandingColumnStyle",  XmlNamespace::TABLE, XML_USE_BANDING_COLUMNS_STYLES, XML_TYPE_BOOL, 0 ),
     MAP_END()
 };
 
@@ -1863,11 +1863,11 @@ void XMLPageExportPropertyMapper::handleElementItem(
                 OUString aSoundURL;
                 if( (rProperty.maValue >>= aSoundURL) && !aSoundURL.isEmpty() )
                 {
-                    mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, mrExport.GetRelativeReference(aSoundURL) );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_NEW );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONREQUEST );
-                    SvXMLElementExport aElem( mrExport, XML_NAMESPACE_PRESENTATION, XML_SOUND, true, true );
+                    mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, mrExport.GetRelativeReference(aSoundURL) );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_NEW );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONREQUEST );
+                    SvXMLElementExport aElem( mrExport, XmlNamespace::PRESENTATION, XML_SOUND, true, true );
                 }
             }
             break;
diff --git a/xmloff/source/draw/sdxmlexp.cxx b/xmloff/source/draw/sdxmlexp.cxx
index 8d9ef7e21eed..834d01b28bf2 100644
--- a/xmloff/source/draw/sdxmlexp.cxx
+++ b/xmloff/source/draw/sdxmlexp.cxx
@@ -539,24 +539,24 @@ void SAL_CALL SdXMLExport::setSourceDocument( const Reference< lang::XComponent
     GetNamespaceMap_().Add(
         GetXMLToken(XML_NP_PRESENTATION),
         GetXMLToken(XML_N_PRESENTATION),
-        XML_NAMESPACE_PRESENTATION);
+        XmlNamespace::PRESENTATION);
 
     GetNamespaceMap_().Add(
         GetXMLToken(XML_NP_SMIL),
         GetXMLToken(XML_N_SMIL_COMPAT),
-        XML_NAMESPACE_SMIL);
+        XmlNamespace::SMIL);
 
     GetNamespaceMap_().Add(
         GetXMLToken(XML_NP_ANIMATION),
         GetXMLToken(XML_N_ANIMATION),
-        XML_NAMESPACE_ANIMATION);
+        XmlNamespace::ANIMATION);
 
     if (getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
     {
         GetNamespaceMap_().Add(
             GetXMLToken(XML_NP_OFFICE_EXT),
             GetXMLToken(XML_N_OFFICE_EXT),
-            XML_NAMESPACE_OFFICE_EXT);
+            XmlNamespace::OFFICE_EXT);
     }
 
     GetShapeExport()->enableLayerExport();
@@ -709,10 +709,10 @@ void SdXMLExport::ImpWriteAutoLayoutInfos()
         if(pInfo)
         {
             // prepare presentation-page layout attributes, style-name
-            AddAttribute(XML_NAMESPACE_STYLE, XML_NAME, pInfo->GetLayoutName());
+            AddAttribute(XmlNamespace::STYLE, XML_NAME, pInfo->GetLayoutName());
 
             // write draw-style attributes
-            SvXMLElementExport aDSE(*this, XML_NAMESPACE_STYLE, XML_PRESENTATION_PAGE_LAYOUT, true, true);
+            SvXMLElementExport aDSE(*this, XmlNamespace::STYLE, XML_PRESENTATION_PAGE_LAYOUT, true, true);
 
             // write presentation placeholders
             switch(pInfo->GetLayoutType())
@@ -1109,29 +1109,29 @@ void SdXMLExport::ImpWriteAutoLayoutPlaceholder(XmlPlaceholder ePl, const tools:
         case XmlPlaceholderVerticalOutline: aStr = "vertical_outline"; break;
     }
 
-    AddAttribute(XML_NAMESPACE_PRESENTATION, XML_OBJECT, aStr);
+    AddAttribute(XmlNamespace::PRESENTATION, XML_OBJECT, aStr);
 
     // svg:x,y,width,height
     GetMM100UnitConverter().convertMeasureToXML(sStringBuffer, rRect.Left());
     aStr = sStringBuffer.makeStringAndClear();
-    AddAttribute(XML_NAMESPACE_SVG, XML_X, aStr);
+    AddAttribute(XmlNamespace::SVG, XML_X, aStr);
 
     GetMM100UnitConverter().convertMeasureToXML(sStringBuffer, rRect.Top());
     aStr = sStringBuffer.makeStringAndClear();
-    AddAttribute(XML_NAMESPACE_SVG, XML_Y, aStr);
+    AddAttribute(XmlNamespace::SVG, XML_Y, aStr);
 
     GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
             rRect.GetWidth());
     aStr = sStringBuffer.makeStringAndClear();
-    AddAttribute(XML_NAMESPACE_SVG, XML_WIDTH, aStr);
+    AddAttribute(XmlNamespace::SVG, XML_WIDTH, aStr);
 
     GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
             rRect.GetHeight());
     aStr = sStringBuffer.makeStringAndClear();
-    AddAttribute(XML_NAMESPACE_SVG, XML_HEIGHT, aStr);
+    AddAttribute(XmlNamespace::SVG, XML_HEIGHT, aStr);
 
     // write presentation-placeholder
-    SvXMLElementExport aPPL(*this, XML_NAMESPACE_PRESENTATION, XML_PLACEHOLDER, true, true);
+    SvXMLElementExport aPPL(*this, XmlNamespace::PRESENTATION, XML_PLACEHOLDER, true, true);
 }
 
 ImpXMLEXPPageMasterInfo* SdXMLExport::ImpGetOrCreatePageMasterInfo( const Reference< XDrawPage >& xMasterPage )
@@ -1224,49 +1224,49 @@ void SdXMLExport::ImpWritePageMasterInfos()
             OUStringBuffer sStringBuffer;
 
             sString = sNewName;
-            AddAttribute(XML_NAMESPACE_STYLE, XML_NAME, sString);
+            AddAttribute(XmlNamespace::STYLE, XML_NAME, sString);
 
             // write page-layout
-            SvXMLElementExport aPME(*this, XML_NAMESPACE_STYLE, XML_PAGE_LAYOUT, true, true);
+            SvXMLElementExport aPME(*this, XmlNamespace::STYLE, XML_PAGE_LAYOUT, true, true);
 
             // prepare style:properties inside page-master
             GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                     pInfo->GetBorderTop());
             sString = sStringBuffer.makeStringAndClear();
-            AddAttribute(XML_NAMESPACE_FO, XML_MARGIN_TOP, sString);
+            AddAttribute(XmlNamespace::FO, XML_MARGIN_TOP, sString);
 
             GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                     pInfo->GetBorderBottom());
             sString = sStringBuffer.makeStringAndClear();
-            AddAttribute(XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, sString);
+            AddAttribute(XmlNamespace::FO, XML_MARGIN_BOTTOM, sString);
 
             GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                     pInfo->GetBorderLeft());
             sString = sStringBuffer.makeStringAndClear();
-            AddAttribute(XML_NAMESPACE_FO, XML_MARGIN_LEFT, sString);
+            AddAttribute(XmlNamespace::FO, XML_MARGIN_LEFT, sString);
 
             GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                     pInfo->GetBorderRight());
             sString = sStringBuffer.makeStringAndClear();
-            AddAttribute(XML_NAMESPACE_FO, XML_MARGIN_RIGHT, sString);
+            AddAttribute(XmlNamespace::FO, XML_MARGIN_RIGHT, sString);
 
             GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                     pInfo->GetWidth());
             sString = sStringBuffer.makeStringAndClear();
-            AddAttribute(XML_NAMESPACE_FO, XML_PAGE_WIDTH, sString);
+            AddAttribute(XmlNamespace::FO, XML_PAGE_WIDTH, sString);
 
             GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                     pInfo->GetHeight());
             sString = sStringBuffer.makeStringAndClear();
-            AddAttribute(XML_NAMESPACE_FO, XML_PAGE_HEIGHT, sString);
+            AddAttribute(XmlNamespace::FO, XML_PAGE_HEIGHT, sString);
 
             if(pInfo->GetOrientation() == view::PaperOrientation_PORTRAIT)
-                AddAttribute(XML_NAMESPACE_STYLE, XML_PRINT_ORIENTATION, XML_PORTRAIT);
+                AddAttribute(XmlNamespace::STYLE, XML_PRINT_ORIENTATION, XML_PORTRAIT);
             else
-                AddAttribute(XML_NAMESPACE_STYLE, XML_PRINT_ORIENTATION, XML_LANDSCAPE);
+                AddAttribute(XmlNamespace::STYLE, XML_PRINT_ORIENTATION, XML_LANDSCAPE);
 
             // write style:properties
-            SvXMLElementExport aPMF(*this, XML_NAMESPACE_STYLE, XML_PAGE_LAYOUT_PROPERTIES, true, true);
+            SvXMLElementExport aPMF(*this, XmlNamespace::STYLE, XML_PAGE_LAYOUT_PROPERTIES, true, true);
         }
     }
 }
@@ -1423,9 +1423,9 @@ void SdXMLExport::ImpWriteHeaderFooterDecls()
         {
             sBuffer.append( aPrefix );
             sBuffer.append( nIndex );
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_NAME, sBuffer.makeStringAndClear());
+            AddAttribute(XmlNamespace::PRESENTATION, XML_NAME, sBuffer.makeStringAndClear());
 
-            SvXMLElementExport aElem(*this, XML_NAMESPACE_PRESENTATION, XML_HEADER_DECL, true, true);
+            SvXMLElementExport aElem(*this, XmlNamespace::PRESENTATION, XML_HEADER_DECL, true, true);
             Characters(rDecl);
             ++nIndex;
         }
@@ -1440,9 +1440,9 @@ void SdXMLExport::ImpWriteHeaderFooterDecls()
         {
             sBuffer.append( aPrefix );
             sBuffer.append( nIndex );
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_NAME, sBuffer.makeStringAndClear());
+            AddAttribute(XmlNamespace::PRESENTATION, XML_NAME, sBuffer.makeStringAndClear());
 
-            SvXMLElementExport aElem(*this, XML_NAMESPACE_PRESENTATION, XML_FOOTER_DECL, false, false);
+            SvXMLElementExport aElem(*this, XmlNamespace::PRESENTATION, XML_FOOTER_DECL, false, false);
             Characters(rDecl);
             ++nIndex;
         }
@@ -1458,14 +1458,14 @@ void SdXMLExport::ImpWriteHeaderFooterDecls()
     {
         sBuffer.append( aPrefix );
         sBuffer.append( nIndex );
-        AddAttribute( XML_NAMESPACE_PRESENTATION, XML_NAME, sBuffer.makeStringAndClear());
+        AddAttribute( XmlNamespace::PRESENTATION, XML_NAME, sBuffer.makeStringAndClear());
 
-        AddAttribute( XML_NAMESPACE_PRESENTATION, XML_SOURCE, rDecl.mbFixed ? XML_FIXED : XML_CURRENT_DATE );
+        AddAttribute( XmlNamespace::PRESENTATION, XML_SOURCE, rDecl.mbFixed ? XML_FIXED : XML_CURRENT_DATE );
 
         if( !rDecl.mbFixed )
-            AddAttribute( XML_NAMESPACE_STYLE, XML_DATA_STYLE_NAME, getDataStyleName( rDecl.mnFormat ) );
+            AddAttribute( XmlNamespace::STYLE, XML_DATA_STYLE_NAME, getDataStyleName( rDecl.mnFormat ) );
 
-        SvXMLElementExport aElem(*this, XML_NAMESPACE_PRESENTATION, XML_DATE_TIME_DECL, false, false);
+        SvXMLElementExport aElem(*this, XmlNamespace::PRESENTATION, XML_DATE_TIME_DECL, false, false);
         if( rDecl.mbFixed )
             Characters(rDecl.maStrText);
 
@@ -1476,13 +1476,13 @@ void SdXMLExport::ImpWriteHeaderFooterDecls()
 void SdXMLExport::ImplExportHeaderFooterDeclAttributes( const HeaderFooterPageSettingsImpl& aSettings )
 {
     if( !aSettings.maStrHeaderDeclName.isEmpty() )
-        AddAttribute( XML_NAMESPACE_PRESENTATION, XML_USE_HEADER_NAME, aSettings.maStrHeaderDeclName );
+        AddAttribute( XmlNamespace::PRESENTATION, XML_USE_HEADER_NAME, aSettings.maStrHeaderDeclName );
 
     if( !aSettings.maStrFooterDeclName.isEmpty() )
-        AddAttribute( XML_NAMESPACE_PRESENTATION, XML_USE_FOOTER_NAME, aSettings.maStrFooterDeclName );
+        AddAttribute( XmlNamespace::PRESENTATION, XML_USE_FOOTER_NAME, aSettings.maStrFooterDeclName );
 
     if( !aSettings.maStrDateTimeDeclName.isEmpty() )
-        AddAttribute( XML_NAMESPACE_PRESENTATION, XML_USE_DATE_TIME_NAME, aSettings.maStrDateTimeDeclName );
+        AddAttribute( XmlNamespace::PRESENTATION, XML_USE_DATE_TIME_NAME, aSettings.maStrDateTimeDeclName );
 }
 
 OUString SdXMLExport::ImpCreatePresPageStyleName( const Reference<XDrawPage>& xDrawPage, bool bExportBackground /* = true */ )
@@ -1643,11 +1643,11 @@ void SdXMLExport::ExportContent_()
             // prepare page attributes, name of page
             Reference < container::XNamed > xNamed(xDrawPage, UNO_QUERY);
             if(xNamed.is())
-                AddAttribute(XML_NAMESPACE_DRAW, XML_NAME, xNamed->getName());
+                AddAttribute(XmlNamespace::DRAW, XML_NAME, xNamed->getName());
 
             // draw:style-name (presentation page attributes AND background attributes)
             if( !maDrawPagesStyleNames[nPageInd].isEmpty() )
-                AddAttribute(XML_NAMESPACE_DRAW, XML_STYLE_NAME,
+                AddAttribute(XmlNamespace::DRAW, XML_STYLE_NAME,
                         maDrawPagesStyleNames[nPageInd]);
 
             // draw:master-page-name
@@ -1660,7 +1660,7 @@ void SdXMLExport::ExportContent_()
                     Reference < container::XNamed > xMasterNamed(xUsedMasterPage, UNO_QUERY);
                     if(xMasterNamed.is())
                     {
-                        AddAttribute(XML_NAMESPACE_DRAW, XML_MASTER_PAGE_NAME,
+                        AddAttribute(XmlNamespace::DRAW, XML_MASTER_PAGE_NAME,
                             EncodeStyleName( xMasterNamed->getName()) );
                     }
                 }
@@ -1669,7 +1669,7 @@ void SdXMLExport::ExportContent_()
             // presentation:page-layout-name
             if( IsImpress() && !maDrawPagesAutoLayoutNames[nPageInd+1].isEmpty())
             {
-                AddAttribute(XML_NAMESPACE_PRESENTATION, XML_PRESENTATION_PAGE_LAYOUT_NAME, maDrawPagesAutoLayoutNames[nPageInd+1] );
+                AddAttribute(XmlNamespace::PRESENTATION, XML_PRESENTATION_PAGE_LAYOUT_NAME, maDrawPagesAutoLayoutNames[nPageInd+1] );
             }
 
             Reference< beans::XPropertySet > xProps( xDrawPage, UNO_QUERY );
@@ -1691,10 +1691,10 @@ void SdXMLExport::ExportContent_()
                             aBookmarkURL = GetRelativeReference( aFileName ) + "#" + aBookmarkName;
                         }
 
-                        AddAttribute ( XML_NAMESPACE_XLINK, XML_HREF, aBookmarkURL);
-                        AddAttribute ( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                        AddAttribute ( XML_NAMESPACE_XLINK, XML_SHOW, XML_REPLACE );
-                        AddAttribute ( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONREQUEST );
+                        AddAttribute ( XmlNamespace::XLINK, XML_HREF, aBookmarkURL);
+                        AddAttribute ( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                        AddAttribute ( XmlNamespace::XLINK, XML_SHOW, XML_REPLACE );
+                        AddAttribute ( XmlNamespace::XLINK, XML_ACTUATE, XML_ONREQUEST );
                     }
                 }
                 catch(const Exception&)
@@ -1708,7 +1708,7 @@ void SdXMLExport::ExportContent_()
 
             OUString sNavigationOrder( getNavigationOrder( xDrawPage ) );
             if( !sNavigationOrder.isEmpty() )
-                AddAttribute ( XML_NAMESPACE_DRAW, XML_NAV_ORDER, sNavigationOrder );
+                AddAttribute ( XmlNamespace::DRAW, XML_NAV_ORDER, sNavigationOrder );
 
             rtl::Reference< xmloff::AnimationsExporter >  xAnimationsExporter;
             uno::Reference< css::animations::XAnimationNodeSupplier > xAnimNodeSupplier;
@@ -1740,11 +1740,11 @@ void SdXMLExport::ExportContent_()
             const OUString aPageId = getInterfaceToIdentifierMapper().getIdentifier( xDrawPage );
             if( !aPageId.isEmpty() )
             {
-                AddAttributeIdLegacy(XML_NAMESPACE_DRAW, aPageId);
+                AddAttributeIdLegacy(XmlNamespace::DRAW, aPageId);
             }
 
             // write page
-            SvXMLElementExport aDPG(*this, XML_NAMESPACE_DRAW, XML_PAGE, true, true);
+            SvXMLElementExport aDPG(*this, XmlNamespace::DRAW, XML_PAGE, true, true);
 
             // write optional office:forms
             exportFormsElement( xDrawPage );
@@ -1779,12 +1779,12 @@ void SdXMLExport::ExportContent_()
                     if(xNotesPage.is())
                     {
                         if( !maDrawNotesPagesStyleNames[nPageInd].isEmpty() )
-                            AddAttribute(XML_NAMESPACE_DRAW, XML_STYLE_NAME, maDrawNotesPagesStyleNames[nPageInd]);
+                            AddAttribute(XmlNamespace::DRAW, XML_STYLE_NAME, maDrawNotesPagesStyleNames[nPageInd]);
 
                         ImplExportHeaderFooterDeclAttributes( maDrawNotesPagesHeaderFooterSettings[nPageInd] );
 
                         // write presentation notes
-                        SvXMLElementExport aPSY(*this, XML_NAMESPACE_PRESENTATION, XML_NOTES, true, true);
+                        SvXMLElementExport aPSY(*this, XmlNamespace::PRESENTATION, XML_NOTES, true, true);
 
                         // write optional office:forms
                         exportFormsElement( xNotesPage );
@@ -1827,7 +1827,7 @@ void SdXMLExport::exportPresentationSettings()
             xPresProps->getPropertyValue("FirstPage") >>= aFirstPage;
             if( !aFirstPage.isEmpty() )
             {
-                AddAttribute(XML_NAMESPACE_PRESENTATION, XML_START_PAGE, aFirstPage );
+                AddAttribute(XmlNamespace::PRESENTATION, XML_START_PAGE, aFirstPage );
                 bHasAttr = true;
             }
             else
@@ -1836,7 +1836,7 @@ void SdXMLExport::exportPresentationSettings()
                 xPresProps->getPropertyValue("CustomShow") >>= aCustomShow;
                 if( !aCustomShow.isEmpty() )
                 {
-                    AddAttribute(XML_NAMESPACE_PRESENTATION, XML_SHOW, aCustomShow );
+                    AddAttribute(XmlNamespace::PRESENTATION, XML_SHOW, aCustomShow );
                     bHasAttr = true;
                 }
             }
@@ -1845,7 +1845,7 @@ void SdXMLExport::exportPresentationSettings()
         xPresProps->getPropertyValue("IsEndless") >>= bTemp;
         if( bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_ENDLESS, XML_TRUE );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_ENDLESS, XML_TRUE );
             bHasAttr = true;
 
             sal_Int32 nPause = 0;
@@ -1856,67 +1856,67 @@ void SdXMLExport::exportPresentationSettings()
 
             OUStringBuffer aOut;
             ::sax::Converter::convertDuration(aOut, aDuration);
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_PAUSE, aOut.makeStringAndClear() );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_PAUSE, aOut.makeStringAndClear() );
         }
 
         xPresProps->getPropertyValue("AllowAnimations") >>= bTemp;
         if( !bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_ANIMATIONS, XML_DISABLED );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_ANIMATIONS, XML_DISABLED );
             bHasAttr = true;
         }
 
         xPresProps->getPropertyValue("IsAlwaysOnTop") >>= bTemp;
         if( bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_STAY_ON_TOP, XML_TRUE );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_STAY_ON_TOP, XML_TRUE );
             bHasAttr = true;
         }
 
         xPresProps->getPropertyValue("IsAutomatic") >>= bTemp;
         if( bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_FORCE_MANUAL, XML_TRUE );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_FORCE_MANUAL, XML_TRUE );
             bHasAttr = true;
         }
 
         xPresProps->getPropertyValue("IsFullScreen") >>= bTemp;
         if( !bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_FULL_SCREEN, XML_FALSE );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_FULL_SCREEN, XML_FALSE );
             bHasAttr = true;
         }
 
         // We need to always export this attribute, because the import had the wrong default (tdf#108824)
         xPresProps->getPropertyValue("IsMouseVisible") >>= bTemp;
-        AddAttribute(XML_NAMESPACE_PRESENTATION, XML_MOUSE_VISIBLE, bTemp ? XML_TRUE : XML_FALSE);
+        AddAttribute(XmlNamespace::PRESENTATION, XML_MOUSE_VISIBLE, bTemp ? XML_TRUE : XML_FALSE);
         bHasAttr = true;
 
         xPresProps->getPropertyValue("StartWithNavigator") >>= bTemp;
         if( bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_START_WITH_NAVIGATOR, XML_TRUE );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_START_WITH_NAVIGATOR, XML_TRUE );
             bHasAttr = true;
         }
 
         xPresProps->getPropertyValue("UsePen") >>= bTemp;
         if( bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_MOUSE_AS_PEN, XML_TRUE );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_MOUSE_AS_PEN, XML_TRUE );
             bHasAttr = true;
         }
 
         xPresProps->getPropertyValue("IsTransitionOnClick") >>= bTemp;
         if( !bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_TRANSITION_ON_CLICK, XML_DISABLED );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_TRANSITION_ON_CLICK, XML_DISABLED );
             bHasAttr = true;
         }
 
         xPresProps->getPropertyValue("IsShowLogo") >>= bTemp;
         if( bTemp )
         {
-            AddAttribute(XML_NAMESPACE_PRESENTATION, XML_SHOW_LOGO, XML_TRUE );
+            AddAttribute(XmlNamespace::PRESENTATION, XML_SHOW_LOGO, XML_TRUE );
             bHasAttr = true;
         }
 
@@ -1937,7 +1937,7 @@ void SdXMLExport::exportPresentationSettings()
 
         if( bHasAttr || bHasNames )
         {
-            SvXMLElementExport aSettings(*this, XML_NAMESPACE_PRESENTATION, XML_SETTINGS, true, true);
+            SvXMLElementExport aSettings(*this, XmlNamespace::PRESENTATION, XML_SETTINGS, true, true);
 
             if( !bHasNames )
                 return;
@@ -1949,7 +1949,7 @@ void SdXMLExport::exportPresentationSettings()
 
             for( const auto& rShowName : std::as_const(aShowNames) )
             {
-                AddAttribute(XML_NAMESPACE_PRESENTATION, XML_NAME, rShowName );
+                AddAttribute(XmlNamespace::PRESENTATION, XML_NAME, rShowName );
 
                 xShows->getByName( rShowName ) >>= xShow;
                 SAL_WARN_IF( !xShow.is(), "xmloff", "invalid custom show!" );
@@ -1971,9 +1971,9 @@ void SdXMLExport::exportPresentationSettings()
                 }
 
                 if( !sTmp.isEmpty() )
-                    AddAttribute(XML_NAMESPACE_PRESENTATION, XML_PAGES, sTmp.makeStringAndClear() );
+                    AddAttribute(XmlNamespace::PRESENTATION, XML_PAGES, sTmp.makeStringAndClear() );
 
-                SvXMLElementExport aShows(*this, XML_NAMESPACE_PRESENTATION, XML_SHOW, true, true);
+                SvXMLElementExport aShows(*this, XmlNamespace::PRESENTATION, XML_SHOW, true, true);
             }
         }
     }
@@ -2231,24 +2231,24 @@ void SdXMLExport::ExportMasterStyles_()
                 // presentation:page-layout-name
                 if( IsImpress() && !maDrawPagesAutoLayoutNames[0].isEmpty())
                 {
-                    AddAttribute(XML_NAMESPACE_PRESENTATION, XML_PRESENTATION_PAGE_LAYOUT_NAME, EncodeStyleName( maDrawPagesAutoLayoutNames[0] ));
+                    AddAttribute(XmlNamespace::PRESENTATION, XML_PRESENTATION_PAGE_LAYOUT_NAME, EncodeStyleName( maDrawPagesAutoLayoutNames[0] ));
                 }
 
                 ImpXMLEXPPageMasterInfo* pInfo = mpHandoutPageMaster;
                 if(pInfo)
                 {
                     const OUString& sString = pInfo->GetName();
-                    AddAttribute(XML_NAMESPACE_STYLE, XML_PAGE_LAYOUT_NAME, sString );
+                    AddAttribute(XmlNamespace::STYLE, XML_PAGE_LAYOUT_NAME, sString );
                 }
 
                 // draw:style-name
                 if( !maHandoutMasterStyleName.isEmpty() )
-                    AddAttribute(XML_NAMESPACE_DRAW, XML_STYLE_NAME, maHandoutMasterStyleName);
+                    AddAttribute(XmlNamespace::DRAW, XML_STYLE_NAME, maHandoutMasterStyleName);
 
                 ImplExportHeaderFooterDeclAttributes( maHandoutPageHeaderFooterSettings );
 
                 // write masterpage
-                SvXMLElementExport aMPG(*this, XML_NAMESPACE_STYLE, XML_HANDOUT_MASTER, true, true);
+                SvXMLElementExport aMPG(*this, XmlNamespace::STYLE, XML_HANDOUT_MASTER, true, true);
 
                 // write graphic objects on this master page (if any)
                 if(xHandoutPage.is() && xHandoutPage->getCount())
@@ -2270,11 +2270,11 @@ void SdXMLExport::ExportMasterStyles_()
             {
                 bool bEncoded = false;
                 sMasterPageName = xNamed->getName();
-                AddAttribute(XML_NAMESPACE_STYLE, XML_NAME,
+                AddAttribute(XmlNamespace::STYLE, XML_NAME,
                     EncodeStyleName( sMasterPageName, &bEncoded ));
                 if( bEncoded )
                     AddAttribute(
-                        XML_NAMESPACE_STYLE, XML_DISPLAY_NAME,
+                        XmlNamespace::STYLE, XML_DISPLAY_NAME,
                         sMasterPageName );
             }
 
@@ -2282,16 +2282,16 @@ void SdXMLExport::ExportMasterStyles_()
             if(pInfo)
             {
                 const OUString& sString = pInfo->GetName();
-                AddAttribute(XML_NAMESPACE_STYLE, XML_PAGE_LAYOUT_NAME, sString );
+                AddAttribute(XmlNamespace::STYLE, XML_PAGE_LAYOUT_NAME, sString );
             }
 
             // draw:style-name (background attributes)
             if( !maMasterPagesStyleNames[nMPageId].isEmpty() )
-                AddAttribute(XML_NAMESPACE_DRAW, XML_STYLE_NAME,
+                AddAttribute(XmlNamespace::DRAW, XML_STYLE_NAME,
                         maMasterPagesStyleNames[nMPageId]);
 
             // write masterpage
-            SvXMLElementExport aMPG(*this, XML_NAMESPACE_STYLE, XML_MASTER_PAGE, true, true);
+            SvXMLElementExport aMPG(*this, XmlNamespace::STYLE, XML_MASTER_PAGE, true, true);
 
             // write optional office:forms
             exportFormsElement( xMasterPage );
@@ -2313,11 +2313,11 @@ void SdXMLExport::ExportMasterStyles_()
                         if(pMasterInfo)
                         {
                             const OUString& sString = pMasterInfo->GetName();
-                            AddAttribute(XML_NAMESPACE_STYLE, XML_PAGE_LAYOUT_NAME, sString);
+                            AddAttribute(XmlNamespace::STYLE, XML_PAGE_LAYOUT_NAME, sString);
                         }
 
                         // write presentation notes
-                        SvXMLElementExport aPSY(*this, XML_NAMESPACE_PRESENTATION, XML_NOTES, true, true);
+                        SvXMLElementExport aPSY(*this, XmlNamespace::PRESENTATION, XML_NOTES, true, true);
 
                         // write optional office:forms
                         exportFormsElement( xNotesPage );
@@ -2523,11 +2523,11 @@ void SdXMLExport::exportAnnotations( const Reference<XDrawPage>& xDrawPage )
 
                 GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                         static_cast<sal_Int32>( aPosition.X * 100 ) );
-                AddAttribute(XML_NAMESPACE_SVG, XML_X, sStringBuffer.makeStringAndClear());
+                AddAttribute(XmlNamespace::SVG, XML_X, sStringBuffer.makeStringAndClear());
 
                 GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                         static_cast<sal_Int32>( aPosition.Y * 100 ) );
-                AddAttribute(XML_NAMESPACE_SVG, XML_Y, sStringBuffer.makeStringAndClear());
+                AddAttribute(XmlNamespace::SVG, XML_Y, sStringBuffer.makeStringAndClear());
 
                 RealSize2D aSize( xAnnotation->getSize() );
 
@@ -2535,20 +2535,20 @@ void SdXMLExport::exportAnnotations( const Reference<XDrawPage>& xDrawPage )
                 {
                     GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                             static_cast<sal_Int32>( aSize.Width * 100 ) );
-                    AddAttribute(XML_NAMESPACE_SVG, XML_WIDTH, sStringBuffer.makeStringAndClear());
+                    AddAttribute(XmlNamespace::SVG, XML_WIDTH, sStringBuffer.makeStringAndClear());
                     GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                             static_cast<sal_Int32>( aSize.Height * 100 ) );
-                    AddAttribute(XML_NAMESPACE_SVG, XML_HEIGHT, sStringBuffer.makeStringAndClear());
+                    AddAttribute(XmlNamespace::SVG, XML_HEIGHT, sStringBuffer.makeStringAndClear());
                 }
 
                 // annotation element + content
-                SvXMLElementExport aElem(*this, XML_NAMESPACE_OFFICE_EXT, XML_ANNOTATION, false, true);
+                SvXMLElementExport aElem(*this, XmlNamespace::OFFICE_EXT, XML_ANNOTATION, false, true);
 
                 // author
                 OUString aAuthor( xAnnotation->getAuthor() );
                 if( !aAuthor.isEmpty() )
                 {
-                    SvXMLElementExport aCreatorElem( *this, XML_NAMESPACE_DC, XML_CREATOR, true, false );
+                    SvXMLElementExport aCreatorElem( *this, XmlNamespace::DC, XML_CREATOR, true, false );
                     Characters(aAuthor);
                 }
 
@@ -2559,8 +2559,8 @@ void SdXMLExport::exportAnnotations( const Reference<XDrawPage>& xDrawPage )
                     // OFFICE-3776 export meta:creator-initials for ODF 1.3
                     SvXMLElementExport aInitialsElem( *this,
                             (SvtSaveOptions::ODFSVER_013 <= getSaneDefaultVersion())
-                                ? XML_NAMESPACE_META
-                                : XML_NAMESPACE_LO_EXT,
+                                ? XmlNamespace::META
+                                : XmlNamespace::LO_EXT,
                             (SvtSaveOptions::ODFSVER_013 <= getSaneDefaultVersion())
                                 ? XML_CREATOR_INITIALS
                                 : XML_SENDER_INITIALS,
@@ -2572,7 +2572,7 @@ void SdXMLExport::exportAnnotations( const Reference<XDrawPage>& xDrawPage )
                     // date time
                     css::util::DateTime aDate( xAnnotation->getDateTime() );
                     ::sax::Converter::convertDateTime(sStringBuffer, aDate, nullptr, true);
-                    SvXMLElementExport aDateElem( *this, XML_NAMESPACE_DC, XML_DATE, true, false );
+                    SvXMLElementExport aDateElem( *this, XmlNamespace::DC, XML_DATE, true, false );
                     Characters(sStringBuffer.makeStringAndClear());
                 }
 
diff --git a/xmloff/source/draw/sdxmlimp.cxx b/xmloff/source/draw/sdxmlimp.cxx
index 8cf178cbe73e..c411387801e7 100644
--- a/xmloff/source/draw/sdxmlimp.cxx
+++ b/xmloff/source/draw/sdxmlimp.cxx
@@ -343,12 +343,12 @@ SdXMLImport::SdXMLImport(
     GetNamespaceMap().Add(
         GetXMLToken(XML_NP_PRESENTATION),
         GetXMLToken(XML_N_PRESENTATION),
-        XML_NAMESPACE_PRESENTATION);
+        XmlNamespace::PRESENTATION);
 
     GetNamespaceMap().Add(
         GetXMLToken(XML_NP_SMIL),
         GetXMLToken(XML_N_SMIL_COMPAT),
-        XML_NAMESPACE_SMIL);
+        XmlNamespace::SMIL);
 }
 
 // XImporter
@@ -436,11 +436,11 @@ const SvXMLTokenMap& SdXMLImport::GetBodyElemTokenMap()
     {
         static const SvXMLTokenMapEntry aBodyElemTokenMap[] =
         {
-            { XML_NAMESPACE_DRAW,   XML_PAGE,               XML_TOK_BODY_PAGE   },
-            { XML_NAMESPACE_PRESENTATION, XML_SETTINGS,     XML_TOK_BODY_SETTINGS   },
-            { XML_NAMESPACE_PRESENTATION, XML_HEADER_DECL,  XML_TOK_BODY_HEADER_DECL    },
-            { XML_NAMESPACE_PRESENTATION, XML_FOOTER_DECL,  XML_TOK_BODY_FOOTER_DECL    },
-            { XML_NAMESPACE_PRESENTATION, XML_DATE_TIME_DECL,XML_TOK_BODY_DATE_TIME_DECL    },
+            { XmlNamespace::DRAW,   XML_PAGE,               XML_TOK_BODY_PAGE   },
+            { XmlNamespace::PRESENTATION, XML_SETTINGS,     XML_TOK_BODY_SETTINGS   },
+            { XmlNamespace::PRESENTATION, XML_HEADER_DECL,  XML_TOK_BODY_HEADER_DECL    },
+            { XmlNamespace::PRESENTATION, XML_FOOTER_DECL,  XML_TOK_BODY_FOOTER_DECL    },
+            { XmlNamespace::PRESENTATION, XML_DATE_TIME_DECL,XML_TOK_BODY_DATE_TIME_DECL    },
 
             XML_TOKEN_MAP_END
         };
@@ -457,9 +457,9 @@ const SvXMLTokenMap& SdXMLImport::GetStylesElemTokenMap()
     {
         static const SvXMLTokenMapEntry aStylesElemTokenMap[] =
         {
-            { XML_NAMESPACE_STYLE,  XML_PAGE_LAYOUT,                XML_TOK_STYLES_PAGE_MASTER              },
-            { XML_NAMESPACE_STYLE,  XML_PRESENTATION_PAGE_LAYOUT,   XML_TOK_STYLES_PRESENTATION_PAGE_LAYOUT },
-            { XML_NAMESPACE_STYLE,  XML_STYLE,                      XML_TOK_STYLES_STYLE    },
+            { XmlNamespace::STYLE,  XML_PAGE_LAYOUT,                XML_TOK_STYLES_PAGE_MASTER              },
+            { XmlNamespace::STYLE,  XML_PRESENTATION_PAGE_LAYOUT,   XML_TOK_STYLES_PRESENTATION_PAGE_LAYOUT },
+            { XmlNamespace::STYLE,  XML_STYLE,                      XML_TOK_STYLES_STYLE    },
             XML_TOKEN_MAP_END
         };
 
@@ -475,8 +475,8 @@ const SvXMLTokenMap& SdXMLImport::GetMasterPageElemTokenMap()
     {
         static const SvXMLTokenMapEntry aMasterPageElemTokenMap[] =
         {
-            { XML_NAMESPACE_STYLE,          XML_STYLE,      XML_TOK_MASTERPAGE_STYLE    },
-            { XML_NAMESPACE_PRESENTATION,   XML_NOTES,      XML_TOK_MASTERPAGE_NOTES    },
+            { XmlNamespace::STYLE,          XML_STYLE,      XML_TOK_MASTERPAGE_STYLE    },
+            { XmlNamespace::PRESENTATION,   XML_NOTES,      XML_TOK_MASTERPAGE_NOTES    },
             XML_TOKEN_MAP_END
         };
 
@@ -492,7 +492,7 @@ const SvXMLTokenMap& SdXMLImport::GetPageMasterAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aPageMasterAttrTokenMap[] =
         {
-            { XML_NAMESPACE_STYLE,          XML_NAME,               XML_TOK_PAGEMASTER_NAME                 },
+            { XmlNamespace::STYLE,          XML_NAME,               XML_TOK_PAGEMASTER_NAME                 },
             XML_TOKEN_MAP_END
         };
 
@@ -508,13 +508,13 @@ const SvXMLTokenMap& SdXMLImport::GetPageMasterStyleAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aPageMasterStyleAttrTokenMap[] =
         {
-            { XML_NAMESPACE_FO,             XML_MARGIN_TOP,         XML_TOK_PAGEMASTERSTYLE_MARGIN_TOP          },
-            { XML_NAMESPACE_FO,             XML_MARGIN_BOTTOM,      XML_TOK_PAGEMASTERSTYLE_MARGIN_BOTTOM       },
-            { XML_NAMESPACE_FO,             XML_MARGIN_LEFT,        XML_TOK_PAGEMASTERSTYLE_MARGIN_LEFT         },
-            { XML_NAMESPACE_FO,             XML_MARGIN_RIGHT,       XML_TOK_PAGEMASTERSTYLE_MARGIN_RIGHT        },
-            { XML_NAMESPACE_FO,             XML_PAGE_WIDTH,         XML_TOK_PAGEMASTERSTYLE_PAGE_WIDTH          },
-            { XML_NAMESPACE_FO,             XML_PAGE_HEIGHT,        XML_TOK_PAGEMASTERSTYLE_PAGE_HEIGHT         },
-            { XML_NAMESPACE_STYLE,          XML_PRINT_ORIENTATION,  XML_TOK_PAGEMASTERSTYLE_PAGE_ORIENTATION    },
+            { XmlNamespace::FO,             XML_MARGIN_TOP,         XML_TOK_PAGEMASTERSTYLE_MARGIN_TOP          },
+            { XmlNamespace::FO,             XML_MARGIN_BOTTOM,      XML_TOK_PAGEMASTERSTYLE_MARGIN_BOTTOM       },
+            { XmlNamespace::FO,             XML_MARGIN_LEFT,        XML_TOK_PAGEMASTERSTYLE_MARGIN_LEFT         },
+            { XmlNamespace::FO,             XML_MARGIN_RIGHT,       XML_TOK_PAGEMASTERSTYLE_MARGIN_RIGHT        },
+            { XmlNamespace::FO,             XML_PAGE_WIDTH,         XML_TOK_PAGEMASTERSTYLE_PAGE_WIDTH          },
+            { XmlNamespace::FO,             XML_PAGE_HEIGHT,        XML_TOK_PAGEMASTERSTYLE_PAGE_HEIGHT         },
+            { XmlNamespace::STYLE,          XML_PRINT_ORIENTATION,  XML_TOK_PAGEMASTERSTYLE_PAGE_ORIENTATION    },
             XML_TOKEN_MAP_END
         };
 
@@ -530,11 +530,11 @@ const SvXMLTokenMap& SdXMLImport::GetPresentationPlaceholderAttrTokenMap()
     {
         static const SvXMLTokenMapEntry aPresentationPlaceholderAttrTokenMap[] =
         {
-            { XML_NAMESPACE_PRESENTATION,   XML_OBJECT,     XML_TOK_PRESENTATIONPLACEHOLDER_OBJECTNAME  },
-            { XML_NAMESPACE_SVG,            XML_X,          XML_TOK_PRESENTATIONPLACEHOLDER_X           },
-            { XML_NAMESPACE_SVG,            XML_Y,          XML_TOK_PRESENTATIONPLACEHOLDER_Y           },
-            { XML_NAMESPACE_SVG,            XML_WIDTH,      XML_TOK_PRESENTATIONPLACEHOLDER_WIDTH       },
-            { XML_NAMESPACE_SVG,            XML_HEIGHT,     XML_TOK_PRESENTATIONPLACEHOLDER_HEIGHT      },
+            { XmlNamespace::PRESENTATION,   XML_OBJECT,     XML_TOK_PRESENTATIONPLACEHOLDER_OBJECTNAME  },
+            { XmlNamespace::SVG,            XML_X,          XML_TOK_PRESENTATIONPLACEHOLDER_X           },
+            { XmlNamespace::SVG,            XML_Y,          XML_TOK_PRESENTATIONPLACEHOLDER_Y           },
+            { XmlNamespace::SVG,            XML_WIDTH,      XML_TOK_PRESENTATIONPLACEHOLDER_WIDTH       },
+            { XmlNamespace::SVG,            XML_HEIGHT,     XML_TOK_PRESENTATIONPLACEHOLDER_HEIGHT      },
             XML_TOKEN_MAP_END
         };
 
diff --git a/xmloff/source/draw/shapeexport.cxx b/xmloff/source/draw/shapeexport.cxx
index 75146f63839f..ad584cb0f918 100644
--- a/xmloff/source/draw/shapeexport.cxx
+++ b/xmloff/source/draw/shapeexport.cxx
@@ -595,10 +595,10 @@ void XMLShapeExport::exportShape(const uno::Reference< drawing::XShape >& xShape
 
             if( !sURL.isEmpty() )
             {
-                mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sURL );
-                mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-                pHyperlinkElement.reset( new SvXMLElementExport(mrExport, XML_NAMESPACE_DRAW, XML_A, true, true) );
+                mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, sURL );
+                mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                mrExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+                pHyperlinkElement.reset( new SvXMLElementExport(mrExport, XmlNamespace::DRAW, XML_A, true, true) );
             }
         }
     }
@@ -664,7 +664,7 @@ void XMLShapeExport::exportShape(const uno::Reference< drawing::XShape >& xShape
             {
                 const OUString aName( xNamed->getName() );
                 if( !aName.isEmpty() )
-                    mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_NAME, aName );
+                    mrExport.AddAttribute(XmlNamespace::DRAW, XML_NAME, aName );
             }
         }
     }
@@ -673,15 +673,15 @@ void XMLShapeExport::exportShape(const uno::Reference< drawing::XShape >& xShape
     if( !aShapeInfo.msStyleName.isEmpty() )
     {
         if(XmlStyleFamily::SD_GRAPHICS_ID == aShapeInfo.mnFamily)
-            mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_STYLE_NAME, mrExport.EncodeStyleName( aShapeInfo.msStyleName) );
+            mrExport.AddAttribute(XmlNamespace::DRAW, XML_STYLE_NAME, mrExport.EncodeStyleName( aShapeInfo.msStyleName) );
         else
-            mrExport.AddAttribute(XML_NAMESPACE_PRESENTATION, XML_STYLE_NAME, mrExport.EncodeStyleName( aShapeInfo.msStyleName) );
+            mrExport.AddAttribute(XmlNamespace::PRESENTATION, XML_STYLE_NAME, mrExport.EncodeStyleName( aShapeInfo.msStyleName) );
     }
 
     // export text style name
     if( !aShapeInfo.msTextStyleName.isEmpty() )
     {
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_TEXT_STYLE_NAME, aShapeInfo.msTextStyleName );
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_TEXT_STYLE_NAME, aShapeInfo.msTextStyleName );
     }
 
     // export shapes id if needed
@@ -690,7 +690,7 @@ void XMLShapeExport::exportShape(const uno::Reference< drawing::XShape >& xShape
         const OUString& rShapeId = mrExport.getInterfaceToIdentifierMapper().getIdentifier( xRef );
         if( !rShapeId.isEmpty() )
         {
-            mrExport.AddAttributeIdLegacy(XML_NAMESPACE_DRAW, rShapeId);
+            mrExport.AddAttributeIdLegacy(XmlNamespace::DRAW, rShapeId);
         }
     }
 
@@ -706,7 +706,7 @@ void XMLShapeExport::exportShape(const uno::Reference< drawing::XShape >& xShape
                 uno::Reference< beans::XPropertySet > xProps( xShape, uno::UNO_QUERY );
                 OUString aLayerName;
                 xProps->getPropertyValue("LayerName") >>= aLayerName;
-                mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_LAYER, aLayerName );
+                mrExport.AddAttribute(XmlNamespace::DRAW, XML_LAYER, aLayerName );
 
             }
             catch(const uno::Exception&)
@@ -740,7 +740,7 @@ void XMLShapeExport::exportShape(const uno::Reference< drawing::XShape >& xShape
                 }
 
                 if( eDisplayToken != XML_TOKEN_INVALID )
-                    mrExport.AddAttribute(XML_NAMESPACE_DRAW_EXT, XML_DISPLAY, eDisplayToken );
+                    mrExport.AddAttribute(XmlNamespace::DRAW_EXT, XML_DISPLAY, eDisplayToken );
             }
             catch(const uno::Exception&)
             {
@@ -1193,29 +1193,29 @@ void XMLShapeExport::ImpExportGluePoints( const uno::Reference< drawing::XShape
             // export only user defined glue points
 
             const OUString sId( OUString::number( nIdentifier ) );
-            mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_ID, sId );
+            mrExport.AddAttribute(XmlNamespace::DRAW, XML_ID, sId );
 
             mrExport.GetMM100UnitConverter().convertMeasureToXML(msBuffer,
                     aGluePoint.Position.X);
-            mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_X, msBuffer.makeStringAndClear());
+            mrExport.AddAttribute(XmlNamespace::SVG, XML_X, msBuffer.makeStringAndClear());
 
             mrExport.GetMM100UnitConverter().convertMeasureToXML(msBuffer,
                     aGluePoint.Position.Y);
-            mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_Y, msBuffer.makeStringAndClear());
+            mrExport.AddAttribute(XmlNamespace::SVG, XML_Y, msBuffer.makeStringAndClear());
 
             if( !aGluePoint.IsRelative )
             {
                 SvXMLUnitConverter::convertEnum( msBuffer, aGluePoint.PositionAlignment, aXML_GlueAlignment_EnumMap );
-                mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_ALIGN, msBuffer.makeStringAndClear() );
+                mrExport.AddAttribute( XmlNamespace::DRAW, XML_ALIGN, msBuffer.makeStringAndClear() );
             }
 
             if( aGluePoint.Escape != drawing::EscapeDirection_SMART )
             {
                 SvXMLUnitConverter::convertEnum( msBuffer, aGluePoint.Escape, aXML_GlueEscapeDirection_EnumMap );
-                mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_ESCAPE_DIRECTION, msBuffer.makeStringAndClear() );
+                mrExport.AddAttribute( XmlNamespace::DRAW, XML_ESCAPE_DIRECTION, msBuffer.makeStringAndClear() );
             }
 
-            SvXMLElementExport aEventsElemt(mrExport, XML_NAMESPACE_DRAW, XML_GLUE_POINT, true, true);
+            SvXMLElementExport aEventsElemt(mrExport, XmlNamespace::DRAW, XML_GLUE_POINT, true, true);
         }
     }
 }
@@ -1231,39 +1231,39 @@ void XMLShapeExport::ImpExportSignatureLine(const uno::Reference<drawing::XShape
 
     OUString aSignatureLineId;
     xPropSet->getPropertyValue("SignatureLineId") >>= aSignatureLineId;
-    mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_ID, aSignatureLineId);
+    mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_ID, aSignatureLineId);
 
     OUString aSuggestedSignerName;
     xPropSet->getPropertyValue("SignatureLineSuggestedSignerName") >>= aSuggestedSignerName;
     if (!aSuggestedSignerName.isEmpty())
-        mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_SUGGESTED_SIGNER_NAME, aSuggestedSignerName);
+        mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_SUGGESTED_SIGNER_NAME, aSuggestedSignerName);
 
     OUString aSuggestedSignerTitle;
     xPropSet->getPropertyValue("SignatureLineSuggestedSignerTitle") >>= aSuggestedSignerTitle;
     if (!aSuggestedSignerTitle.isEmpty())
-        mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_SUGGESTED_SIGNER_TITLE, aSuggestedSignerTitle);
+        mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_SUGGESTED_SIGNER_TITLE, aSuggestedSignerTitle);
 
     OUString aSuggestedSignerEmail;
     xPropSet->getPropertyValue("SignatureLineSuggestedSignerEmail") >>= aSuggestedSignerEmail;
     if (!aSuggestedSignerEmail.isEmpty())
-        mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_SUGGESTED_SIGNER_EMAIL, aSuggestedSignerEmail);
+        mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_SUGGESTED_SIGNER_EMAIL, aSuggestedSignerEmail);
 
     OUString aSigningInstructions;
     xPropSet->getPropertyValue("SignatureLineSigningInstructions") >>= aSigningInstructions;
     if (!aSigningInstructions.isEmpty())
-        mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_SIGNING_INSTRUCTIONS, aSigningInstructions);
+        mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_SIGNING_INSTRUCTIONS, aSigningInstructions);
 
     bool bShowSignDate = false;
     xPropSet->getPropertyValue("SignatureLineShowSignDate") >>= bShowSignDate;
-    mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_SHOW_SIGN_DATE,
+    mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_SHOW_SIGN_DATE,
                           bShowSignDate ? XML_TRUE : XML_FALSE);
 
     bool bCanAddComment = false;
     xPropSet->getPropertyValue("SignatureLineCanAddComment") >>= bCanAddComment;
-    mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_CAN_ADD_COMMENT,
+    mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_CAN_ADD_COMMENT,
                           bCanAddComment ? XML_TRUE : XML_FALSE);
 
-    SvXMLElementExport aSignatureLineElement(mrExport, XML_NAMESPACE_LO_EXT, XML_SIGNATURELINE, true,
+    SvXMLElementExport aSignatureLineElement(mrExport, XmlNamespace::LO_EXT, XML_SIGNATURELINE, true,
                                              true);
 }
 
@@ -1277,7 +1277,7 @@ void XMLShapeExport::ImpExportQRCode(const uno::Reference<drawing::XShape>& xSha
     if(!(aAny >>= aQRCode))
         return;
 
-    mrExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_STRING_VALUE, aQRCode.Payload);
+    mrExport.AddAttribute(XmlNamespace::OFFICE, XML_STRING_VALUE, aQRCode.Payload);
     /* Export QR Code as per customised schema, @see OpenDocument-schema-v1.3+libreoffice */
     OUString temp;
     switch(aQRCode.ErrorCorrection){
@@ -1294,10 +1294,10 @@ void XMLShapeExport::ImpExportQRCode(const uno::Reference<drawing::XShape>& xSha
             temp = "high";
             break;
     }
-    mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_QRCODE_ERROR_CORRECTION, temp);
-    mrExport.AddAttribute(XML_NAMESPACE_LO_EXT, XML_QRCODE_BORDER, OUStringBuffer(20).append(aQRCode.Border).makeStringAndClear());
+    mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_QRCODE_ERROR_CORRECTION, temp);
+    mrExport.AddAttribute(XmlNamespace::LO_EXT, XML_QRCODE_BORDER, OUStringBuffer(20).append(aQRCode.Border).makeStringAndClear());
 
-    SvXMLElementExport aQRCodeElement(mrExport, XML_NAMESPACE_LO_EXT, XML_QRCODE, true,
+    SvXMLElementExport aQRCodeElement(mrExport, XmlNamespace::LO_EXT, XML_QRCODE, true,
                                             true);
 }
 
@@ -1448,7 +1448,7 @@ void XMLShapeExport::ImpExportNewTrans_FeaturesAndWrite(::basegfx::B2DTuple cons
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
             FRound(aTRScale.getX()));
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_WIDTH, aStr);
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_WIDTH, aStr);
 
     // svg: height
     if(!(nFeatures & XMLShapeExportFlags::HEIGHT))
@@ -1466,7 +1466,7 @@ void XMLShapeExport::ImpExportNewTrans_FeaturesAndWrite(::basegfx::B2DTuple cons
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
             FRound(aTRScale.getY()));
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_HEIGHT, aStr);
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_HEIGHT, aStr);
 
     // decide if transformation is necessary
     bool bTransformationIsNecessary(fTRShear != 0.0 || fTRRotate != 0.0);
@@ -1490,7 +1490,7 @@ void XMLShapeExport::ImpExportNewTrans_FeaturesAndWrite(::basegfx::B2DTuple cons
 
         // does transformation need to be exported?
         if(aTransform.NeedsAction())
-            mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_TRANSFORM, aTransform.GetExportString(mrExport.GetMM100UnitConverter()));
+            mrExport.AddAttribute(XmlNamespace::DRAW, XML_TRANSFORM, aTransform.GetExportString(mrExport.GetMM100UnitConverter()));
     }
     else
     {
@@ -1501,7 +1501,7 @@ void XMLShapeExport::ImpExportNewTrans_FeaturesAndWrite(::basegfx::B2DTuple cons
             mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                     FRound(rTRTranslate.getX()));
             aStr = sStringBuffer.makeStringAndClear();
-            mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_X, aStr);
+            mrExport.AddAttribute(XmlNamespace::SVG, XML_X, aStr);
         }
 
         if(nFeatures & XMLShapeExportFlags::Y)
@@ -1510,7 +1510,7 @@ void XMLShapeExport::ImpExportNewTrans_FeaturesAndWrite(::basegfx::B2DTuple cons
             mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                     FRound(rTRTranslate.getY()));
             aStr = sStringBuffer.makeStringAndClear();
-            mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_Y, aStr);
+            mrExport.AddAttribute(XmlNamespace::SVG, XML_Y, aStr);
         }
     }
 }
@@ -1520,7 +1520,7 @@ bool XMLShapeExport::ImpExportPresentationAttributes( const uno::Reference< bean
     bool bIsEmpty = false;
 
     // write presentation class entry
-    mrExport.AddAttribute(XML_NAMESPACE_PRESENTATION, XML_CLASS, rClass);
+    mrExport.AddAttribute(XmlNamespace::PRESENTATION, XML_CLASS, rClass);
 
     if( xPropSet.is() )
     {
@@ -1532,7 +1532,7 @@ bool XMLShapeExport::ImpExportPresentationAttributes( const uno::Reference< bean
         {
             xPropSet->getPropertyValue("IsEmptyPresentationObject") >>= bIsEmpty;
             if( bIsEmpty )
-                mrExport.AddAttribute(XML_NAMESPACE_PRESENTATION, XML_PLACEHOLDER, XML_TRUE);
+                mrExport.AddAttribute(XmlNamespace::PRESENTATION, XML_PLACEHOLDER, XML_TRUE);
         }
 
         // is user-transformed?
@@ -1541,7 +1541,7 @@ bool XMLShapeExport::ImpExportPresentationAttributes( const uno::Reference< bean
             bool bTemp = false;
             xPropSet->getPropertyValue("IsPlaceholderDependent") >>= bTemp;
             if(!bTemp)
-                mrExport.AddAttribute(XML_NAMESPACE_PRESENTATION, XML_USER_TRANSFORMED, XML_TRUE);
+                mrExport.AddAttribute(XmlNamespace::PRESENTATION, XML_USER_TRANSFORMED, XML_TRUE);
         }
     }
 
@@ -1677,7 +1677,7 @@ void XMLShapeExport::ImpExportEvents( const uno::Reference< drawing::XShape >& x
         if( !(nFound & Found::CLICKACTION) || (eClickAction == presentation::ClickAction_NONE) )
             return;
 
-        SvXMLElementExport aEventsElemt(mrExport, XML_NAMESPACE_OFFICE, XML_EVENT_LISTENERS, true, true);
+        SvXMLElementExport aEventsElemt(mrExport, XmlNamespace::OFFICE, XML_EVENT_LISTENERS, true, true);
 
         enum XMLTokenEnum eStrAction;
 
@@ -1703,9 +1703,9 @@ void XMLShapeExport::ImpExportEvents( const uno::Reference< drawing::XShape >& x
 
         OUString aEventQName(
             mrExport.GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_DOM, "click" ) );
-        mrExport.AddAttribute( XML_NAMESPACE_SCRIPT, XML_EVENT_NAME, aEventQName );
-        mrExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_ACTION, eStrAction );
+                    XmlNamespace::DOM, "click" ) );
+        mrExport.AddAttribute( XmlNamespace::SCRIPT, XML_EVENT_NAME, aEventQName );
+        mrExport.AddAttribute( XmlNamespace::PRESENTATION, XML_ACTION, eStrAction );
 
         if( eClickAction == presentation::ClickAction_VANISH )
         {
@@ -1721,19 +1721,19 @@ void XMLShapeExport::ImpExportEvents( const uno::Reference< drawing::XShape >& x
                 if( eKind != EK_none )
                 {
                     SvXMLUnitConverter::convertEnum( msBuffer, eKind, aXML_AnimationEffect_EnumMap );
-                    mrExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_EFFECT, msBuffer.makeStringAndClear() );
+                    mrExport.AddAttribute( XmlNamespace::PRESENTATION, XML_EFFECT, msBuffer.makeStringAndClear() );
                 }
 
                 if( eDirection != ED_none )
                 {
                     SvXMLUnitConverter::convertEnum( msBuffer, eDirection, aXML_AnimationDirection_EnumMap );
-                    mrExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_DIRECTION, msBuffer.makeStringAndClear() );
+                    mrExport.AddAttribute( XmlNamespace::PRESENTATION, XML_DIRECTION, msBuffer.makeStringAndClear() );
                 }
 
                 if( nStartScale != -1 )
                 {
                     ::sax::Converter::convertPercent( msBuffer, nStartScale );
-                    mrExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_START_SCALE, msBuffer.makeStringAndClear() );
+                    mrExport.AddAttribute( XmlNamespace::PRESENTATION, XML_START_SCALE, msBuffer.makeStringAndClear() );
                 }
             }
 
@@ -1742,7 +1742,7 @@ void XMLShapeExport::ImpExportEvents( const uno::Reference< drawing::XShape >& x
                  if( eSpeed != presentation::AnimationSpeed_MEDIUM )
                     {
                     SvXMLUnitConverter::convertEnum( msBuffer, eSpeed, aXML_AnimationSpeed_EnumMap );
-                    mrExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_SPEED, msBuffer.makeStringAndClear() );
+                    mrExport.AddAttribute( XmlNamespace::PRESENTATION, XML_SPEED, msBuffer.makeStringAndClear() );
                 }
             }
         }
@@ -1755,32 +1755,32 @@ void XMLShapeExport::ImpExportEvents( const uno::Reference< drawing::XShape >& x
                 msBuffer.append( '#' );
 
             msBuffer.append( aStrBookmark );
-            mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, GetExport().GetRelativeReference(msBuffer.makeStringAndClear()) );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONREQUEST );
+            mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, GetExport().GetRelativeReference(msBuffer.makeStringAndClear()) );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONREQUEST );
         }
 
         if( ( nFound & Found::VERB ) && eClickAction == presentation::ClickAction_VERB )
         {
             msBuffer.append( nVerb );
-            mrExport.AddAttribute(XML_NAMESPACE_PRESENTATION, XML_VERB, msBuffer.makeStringAndClear());
+            mrExport.AddAttribute(XmlNamespace::PRESENTATION, XML_VERB, msBuffer.makeStringAndClear());
         }
 
-        SvXMLElementExport aEventElemt(mrExport, XML_NAMESPACE_PRESENTATION, XML_EVENT_LISTENER, true, true);
+        SvXMLElementExport aEventElemt(mrExport, XmlNamespace::PRESENTATION, XML_EVENT_LISTENER, true, true);
 
         if( eClickAction == presentation::ClickAction_VANISH || eClickAction == presentation::ClickAction_SOUND )
         {
             if( ( nFound & Found::SOUNDURL ) && !aStrSoundURL.isEmpty() )
             {
-                mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, GetExport().GetRelativeReference(aStrSoundURL) );
-                mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_NEW );
-                mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONREQUEST );
+                mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, GetExport().GetRelativeReference(aStrSoundURL) );
+                mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                mrExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_NEW );
+                mrExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONREQUEST );
                 if( nFound & Found::PLAYFULL && bPlayFull )
-                    mrExport.AddAttribute( XML_NAMESPACE_PRESENTATION, XML_PLAY_FULL, XML_TRUE );
+                    mrExport.AddAttribute( XmlNamespace::PRESENTATION, XML_PLAY_FULL, XML_TRUE );
 
-                SvXMLElementExport aElem( mrExport, XML_NAMESPACE_PRESENTATION, XML_SOUND, true, true );
+                SvXMLElementExport aElem( mrExport, XmlNamespace::PRESENTATION, XML_SOUND, true, true );
             }
        }
     }
@@ -1788,16 +1788,16 @@ void XMLShapeExport::ImpExportEvents( const uno::Reference< drawing::XShape >& x
     {
         if( nFound & Found::MACRO )
         {
-            SvXMLElementExport aEventsElemt(mrExport, XML_NAMESPACE_OFFICE, XML_EVENT_LISTENERS, true, true);
+            SvXMLElementExport aEventsElemt(mrExport, XmlNamespace::OFFICE, XML_EVENT_LISTENERS, true, true);
 
-            mrExport.AddAttribute( XML_NAMESPACE_SCRIPT, XML_LANGUAGE,
+            mrExport.AddAttribute( XmlNamespace::SCRIPT, XML_LANGUAGE,
                         mrExport.GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_OOO,
+                            XmlNamespace::OOO,
                             "starbasic" ) );
             OUString aEventQName(
                 mrExport.GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_DOM, "click" ) );
-            mrExport.AddAttribute( XML_NAMESPACE_SCRIPT, XML_EVENT_NAME, aEventQName );
+                        XmlNamespace::DOM, "click" ) );
+            mrExport.AddAttribute( XmlNamespace::SCRIPT, XML_EVENT_NAME, aEventQName );
 
             if( nFound & Found::LIBRARY )
             {
@@ -1805,33 +1805,33 @@ void XMLShapeExport::ImpExportEvents( const uno::Reference< drawing::XShape >& x
                     (aStrLibrary.equalsIgnoreAsciiCase("StarOffice") ||
                      aStrLibrary.equalsIgnoreAsciiCase("application") ) ? XML_APPLICATION
                                                                        : XML_DOCUMENT ) );
-                mrExport.AddAttribute(XML_NAMESPACE_SCRIPT, XML_MACRO_NAME,
+                mrExport.AddAttribute(XmlNamespace::SCRIPT, XML_MACRO_NAME,
                     sLocation + ":" + aStrMacro);
             }
             else
             {
-                mrExport.AddAttribute( XML_NAMESPACE_SCRIPT, XML_MACRO_NAME, aStrMacro );
+                mrExport.AddAttribute( XmlNamespace::SCRIPT, XML_MACRO_NAME, aStrMacro );
             }
 
-            SvXMLElementExport aEventElemt(mrExport, XML_NAMESPACE_SCRIPT, XML_EVENT_LISTENER, true, true);
+            SvXMLElementExport aEventElemt(mrExport, XmlNamespace::SCRIPT, XML_EVENT_LISTENER, true, true);
         }
     }
     else if( aClickEventType == gsScript )
     {
         if( nFound & Found::MACRO )
         {
-            SvXMLElementExport aEventsElemt(mrExport, XML_NAMESPACE_OFFICE, XML_EVENT_LISTENERS, true, true);
+            SvXMLElementExport aEventsElemt(mrExport, XmlNamespace::OFFICE, XML_EVENT_LISTENERS, true, true);
 
-            mrExport.AddAttribute( XML_NAMESPACE_SCRIPT, XML_LANGUAGE, mrExport.GetNamespaceMap().GetQNameByKey(
-                     XML_NAMESPACE_OOO, GetXMLToken(XML_SCRIPT) ) );
+            mrExport.AddAttribute( XmlNamespace::SCRIPT, XML_LANGUAGE, mrExport.GetNamespaceMap().GetQNameByKey(
+                     XmlNamespace::OOO, GetXMLToken(XML_SCRIPT) ) );
             OUString aEventQName(
                 mrExport.GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_DOM, "click" ) );
-            mrExport.AddAttribute( XML_NAMESPACE_SCRIPT, XML_EVENT_NAME, aEventQName );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, aStrMacro );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, "simple" );
+                        XmlNamespace::DOM, "click" ) );
+            mrExport.AddAttribute( XmlNamespace::SCRIPT, XML_EVENT_NAME, aEventQName );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, aStrMacro );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, "simple" );
 
-            SvXMLElementExport aEventElemt(mrExport, XML_NAMESPACE_SCRIPT, XML_EVENT_LISTENER, true, true);
+            SvXMLElementExport aEventElemt(mrExport, XmlNamespace::SCRIPT, XML_EVENT_LISTENER, true, true);
         }
     }
 }
@@ -1850,13 +1850,13 @@ void XMLShapeExport::ImpExportDescription( const uno::Reference< drawing::XShape
 
         if(!aTitle.isEmpty())
         {
-            SvXMLElementExport aEventElemt(mrExport, XML_NAMESPACE_SVG, XML_TITLE, true, false);
+            SvXMLElementExport aEventElemt(mrExport, XmlNamespace::SVG, XML_TITLE, true, false);
             mrExport.Characters( aTitle );
         }
 
         if(!aDescription.isEmpty())
         {
-            SvXMLElementExport aEventElemt(mrExport, XML_NAMESPACE_SVG, XML_DESC, true, false );
+            SvXMLElementExport aEventElemt(mrExport, XmlNamespace::SVG, XML_DESC, true, false );
             mrExport.Characters( aDescription );
         }
     }
@@ -1874,7 +1874,7 @@ void XMLShapeExport::ImpExportGroupShape( const uno::Reference< drawing::XShape
 
     // write group shape
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aPGR(mrExport, XML_NAMESPACE_DRAW, XML_G, bCreateNewline, true);
+    SvXMLElementExport aPGR(mrExport, XmlNamespace::DRAW, XML_G, bCreateNewline, true);
 
     ImpExportDescription( xShape ); // #i68101#
     ImpExportEvents( xShape );
@@ -1970,7 +1970,7 @@ void XMLShapeExport::ImpExportTextBoxShape(
         bIsEmptyPresObj = ImpExportPresentationAttributes( xPropSet, aStr );
 
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElem( mrExport, XmlNamespace::DRAW,
                               XML_FRAME, bCreateNewline, true );
 
     // evtl. corner radius?
@@ -1981,12 +1981,12 @@ void XMLShapeExport::ImpExportTextBoxShape(
         OUStringBuffer sStringBuffer;
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 nCornerRadius);
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_CORNER_RADIUS, sStringBuffer.makeStringAndClear());
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_CORNER_RADIUS, sStringBuffer.makeStringAndClear());
     }
 
     {
         // write text-box
-        SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_TEXT_BOX, true, true);
+        SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_TEXT_BOX, true, true);
         if(!bIsEmptyPresObj)
             ImpExportText( xShape );
     }
@@ -2016,12 +2016,12 @@ void XMLShapeExport::ImpExportRectangleShape(
         OUStringBuffer sStringBuffer;
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 nCornerRadius);
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_CORNER_RADIUS, sStringBuffer.makeStringAndClear());
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_CORNER_RADIUS, sStringBuffer.makeStringAndClear());
     }
 
     // write rectangle
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_RECT, bCreateNewline, true);
+    SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_RECT, bCreateNewline, true);
 
     ImpExportDescription( xShape ); // #i68101#
     ImpExportEvents( xShape );
@@ -2086,7 +2086,7 @@ void XMLShapeExport::ImpExportLineShape(
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 aStart.X);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_X1, aStr);
+        mrExport.AddAttribute(XmlNamespace::SVG, XML_X1, aStr);
     }
     else
     {
@@ -2099,7 +2099,7 @@ void XMLShapeExport::ImpExportLineShape(
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 aStart.Y);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_Y1, aStr);
+        mrExport.AddAttribute(XmlNamespace::SVG, XML_Y1, aStr);
     }
     else
     {
@@ -2110,17 +2110,17 @@ void XMLShapeExport::ImpExportLineShape(
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
             aEnd.X);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_X2, aStr);
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_X2, aStr);
 
     // svg: y2
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
             aEnd.Y);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_Y2, aStr);
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_Y2, aStr);
 
     // write line
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_LINE, bCreateNewline, true);
+    SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_LINE, bCreateNewline, true);
 
     ImpExportDescription( xShape ); // #i68101#
     ImpExportEvents( xShape );
@@ -2161,21 +2161,21 @@ void XMLShapeExport::ImpExportEllipseShape(
 
         // export circle kind
         SvXMLUnitConverter::convertEnum( sStringBuffer, eKind, aXML_CircleKind_EnumMap );
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_KIND, sStringBuffer.makeStringAndClear() );
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_KIND, sStringBuffer.makeStringAndClear() );
 
         // export start angle
         ::sax::Converter::convertDouble( sStringBuffer, dStartAngle );
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_START_ANGLE, sStringBuffer.makeStringAndClear() );
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_START_ANGLE, sStringBuffer.makeStringAndClear() );
 
         // export end angle
         ::sax::Converter::convertDouble( sStringBuffer, dEndAngle );
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_END_ANGLE, sStringBuffer.makeStringAndClear() );
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_END_ANGLE, sStringBuffer.makeStringAndClear() );
     }
 
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
 
     // write ellipse or circle
-    SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW,
                             bCircle ? XML_CIRCLE : XML_ELLIPSE,
                             bCreateNewline, true);
 
@@ -2214,7 +2214,7 @@ void XMLShapeExport::ImpExportPolygonShape(
     // create and export ViewBox
     awt::Size aSize(FRound(aTRScale.getX()), FRound(aTRScale.getY()));
     SdXMLImExViewBox aViewBox(0, 0, aSize.Width, aSize.Height);
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_VIEWBOX, aViewBox.GetExportString());
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_VIEWBOX, aViewBox.GetExportString());
 
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
 
@@ -2239,7 +2239,7 @@ void XMLShapeExport::ImpExportPolygonShape(
                     true));     // bHandleRelativeNextPointCompatible
 
             // write point array
-            mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_D, aPolygonString);
+            mrExport.AddAttribute(XmlNamespace::SVG, XML_D, aPolygonString);
         }
     }
     else
@@ -2256,7 +2256,7 @@ void XMLShapeExport::ImpExportPolygonShape(
             const OUString aPointString(basegfx::utils::exportToSvgPoints(aPolygon));
 
             // write point array
-            mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_POINTS, aPointString);
+            mrExport.AddAttribute(XmlNamespace::DRAW, XML_POINTS, aPointString);
 
             // set name
             eName = aPolygon.isClosed() ? XML_POLYGON : XML_POLYLINE;
@@ -2272,7 +2272,7 @@ void XMLShapeExport::ImpExportPolygonShape(
                     true));     // bHandleRelativeNextPointCompatible
 
             // write point array
-            mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_D, aPolygonString);
+            mrExport.AddAttribute(XmlNamespace::SVG, XML_D, aPolygonString);
         }
     }
 
@@ -2281,7 +2281,7 @@ void XMLShapeExport::ImpExportPolygonShape(
     // scope. Also before text is added; this may add sub-scopes as needed
     SvXMLElementExport aOBJ(
         mrExport,
-        XML_NAMESPACE_DRAW,
+        XmlNamespace::DRAW,
         eName,
         bCreateNewline,
         true);
@@ -2337,7 +2337,7 @@ void XMLShapeExport::ImpExportGraphicObjectShape(
         bIsEmptyPresObj = ImpExportPresentationAttributes( xPropSet, GetXMLToken(XML_GRAPHIC) );
 
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElem( mrExport, XmlNamespace::DRAW,
                               XML_FRAME, bCreateNewline, true );
 
     if (!bIsEmptyPresObj)
@@ -2378,10 +2378,10 @@ void XMLShapeExport::ImpExportGraphicObjectShape(
                     }
                 }
 
-                mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sInternalURL);
-                mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE);
-                mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED);
-                mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD);
+                mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, sInternalURL);
+                mrExport.AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE);
+                mrExport.AddAttribute(XmlNamespace::XLINK, XML_SHOW, XML_EMBED);
+                mrExport.AddAttribute(XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD);
             }
         }
 
@@ -2396,13 +2396,13 @@ void XMLShapeExport::ImpExportGraphicObjectShape(
                 {   // ODF 1.3 OFFICE-3943
                     GetExport().AddAttribute(
                         SvtSaveOptions::ODFSVER_013 <= GetExport().getSaneDefaultVersion()
-                            ? XML_NAMESPACE_DRAW
-                            : XML_NAMESPACE_LO_EXT,
+                            ? XmlNamespace::DRAW
+                            : XmlNamespace::LO_EXT,
                         "mime-type", sOutMimeType);
                 }
             }
 
-            SvXMLElementExport aElement(mrExport, XML_NAMESPACE_DRAW, XML_IMAGE, true, true);
+            SvXMLElementExport aElement(mrExport, XmlNamespace::DRAW, XML_IMAGE, true, true);
 
             // optional office:binary-data
             if (xGraphic.is())
@@ -2432,22 +2432,22 @@ void XMLShapeExport::ImpExportGraphicObjectShape(
 
                 if (!aHref.isEmpty())
                 {
-                    mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, aHref);
-                    mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                    mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-                    mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+                    mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, aHref);
+                    mrExport.AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                    mrExport.AddAttribute(XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+                    mrExport.AddAttribute(XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
                 }
 
                 if (!aMimeType.isEmpty() && GetExport().getSaneDefaultVersion() > SvtSaveOptions::ODFSVER_012)
                 {   // ODF 1.3 OFFICE-3943
                     mrExport.AddAttribute(
                         SvtSaveOptions::ODFSVER_013 <= GetExport().getSaneDefaultVersion()
-                            ? XML_NAMESPACE_DRAW
-                            : XML_NAMESPACE_LO_EXT,
+                            ? XmlNamespace::DRAW
+                            : XmlNamespace::LO_EXT,
                         "mime-type", aMimeType);
                 }
 
-                SvXMLElementExport aElement(mrExport, XML_NAMESPACE_DRAW, XML_IMAGE, true, true);
+                SvXMLElementExport aElement(mrExport, XmlNamespace::DRAW, XML_IMAGE, true, true);
 
                 // optional office:binary-data
                 mrExport.AddEmbeddedXGraphicAsBase64(xReplacementGraphic);
@@ -2497,12 +2497,12 @@ void XMLShapeExport::ImpExportControlShape(
         SAL_WARN_IF( !xControlModel.is(), "xmloff", "Control shape has not XControlModel" );
         if( xControlModel.is() )
         {
-            mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CONTROL, mrExport.GetFormExport()->getControlId( xControlModel ) );
+            mrExport.AddAttribute( XmlNamespace::DRAW, XML_CONTROL, mrExport.GetFormExport()->getControlId( xControlModel ) );
         }
     }
 
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_CONTROL, bCreateNewline, true);
+    SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_CONTROL, bCreateNewline, true);
 
     ImpExportDescription( xShape ); // #i68101#
 }
@@ -2525,7 +2525,7 @@ void XMLShapeExport::ImpExportConnectorShape(
     {
         SvXMLUnitConverter::convertEnum( sStringBuffer, eType, aXML_ConnectionKind_EnumMap );
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_TYPE, aStr);
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_TYPE, aStr);
     }
 
     // export line skew
@@ -2556,7 +2556,7 @@ void XMLShapeExport::ImpExportConnectorShape(
         }
 
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_LINE_SKEW, aStr);
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_LINE_SKEW, aStr);
     }
 
     // export start and end point
@@ -2602,7 +2602,7 @@ void XMLShapeExport::ImpExportConnectorShape(
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 aStart.X);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_X1, aStr);
+        mrExport.AddAttribute(XmlNamespace::SVG, XML_X1, aStr);
     }
     else
     {
@@ -2615,7 +2615,7 @@ void XMLShapeExport::ImpExportConnectorShape(
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 aStart.Y);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_Y1, aStr);
+        mrExport.AddAttribute(XmlNamespace::SVG, XML_Y1, aStr);
     }
     else
     {
@@ -2625,12 +2625,12 @@ void XMLShapeExport::ImpExportConnectorShape(
     // svg: x2
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer, aEnd.X);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_X2, aStr);
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_X2, aStr);
 
     // svg: y2
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer, aEnd.Y);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_Y2, aStr);
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_Y2, aStr);
 
     // #i39320#
     uno::Reference< uno::XInterface > xRefS;
@@ -2641,7 +2641,7 @@ void XMLShapeExport::ImpExportConnectorShape(
     if( xRefS.is() )
     {
         const OUString& rShapeId = mrExport.getInterfaceToIdentifierMapper().getIdentifier( xRefS );
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_START_SHAPE, rShapeId);
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_START_SHAPE, rShapeId);
 
         aAny = xProps->getPropertyValue("StartGluePointIndex");
         sal_Int32 nGluePointId = 0;
@@ -2649,7 +2649,7 @@ void XMLShapeExport::ImpExportConnectorShape(
         {
             if( nGluePointId != -1 )
             {
-                mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_START_GLUE_POINT, OUString::number( nGluePointId ));
+                mrExport.AddAttribute(XmlNamespace::DRAW, XML_START_GLUE_POINT, OUString::number( nGluePointId ));
             }
         }
     }
@@ -2659,7 +2659,7 @@ void XMLShapeExport::ImpExportConnectorShape(
     if( xRefE.is() )
     {
         const OUString& rShapeId = mrExport.getInterfaceToIdentifierMapper().getIdentifier( xRefE );
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_END_SHAPE, rShapeId);
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_END_SHAPE, rShapeId);
 
         aAny = xProps->getPropertyValue("EndGluePointIndex");
         sal_Int32 nGluePointId = 0;
@@ -2667,7 +2667,7 @@ void XMLShapeExport::ImpExportConnectorShape(
         {
             if( nGluePointId != -1 )
             {
-                mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_END_GLUE_POINT, OUString::number( nGluePointId ));
+                mrExport.AddAttribute(XmlNamespace::DRAW, XML_END_GLUE_POINT, OUString::number( nGluePointId ));
             }
         }
     }
@@ -2688,7 +2688,7 @@ void XMLShapeExport::ImpExportConnectorShape(
                 true));         // bHandleRelativeNextPointCompatible
 
         // write point array
-        mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_D, aPolygonString);
+        mrExport.AddAttribute(XmlNamespace::SVG, XML_D, aPolygonString);
     }
 
     // get matrix
@@ -2706,11 +2706,11 @@ void XMLShapeExport::ImpExportConnectorShape(
     // fdo#49678: create and export ViewBox
     awt::Size aSize(FRound(aTRScale.getX()), FRound(aTRScale.getY()));
     SdXMLImExViewBox aViewBox(0, 0, aSize.Width, aSize.Height);
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_VIEWBOX, aViewBox.GetExportString());
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_VIEWBOX, aViewBox.GetExportString());
 
     // write connector shape. Add Export later.
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_CONNECTOR, bCreateNewline, true);
+    SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_CONNECTOR, bCreateNewline, true);
 
     ImpExportDescription( xShape ); // #i68101#
     ImpExportEvents( xShape );
@@ -2770,7 +2770,7 @@ void XMLShapeExport::ImpExportMeasureShape(
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 aStart.X);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_X1, aStr);
+        mrExport.AddAttribute(XmlNamespace::SVG, XML_X1, aStr);
     }
     else
     {
@@ -2783,7 +2783,7 @@ void XMLShapeExport::ImpExportMeasureShape(
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 aStart.Y);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_Y1, aStr);
+        mrExport.AddAttribute(XmlNamespace::SVG, XML_Y1, aStr);
     }
     else
     {
@@ -2793,16 +2793,16 @@ void XMLShapeExport::ImpExportMeasureShape(
     // svg: x2
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer, aEnd.X);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_X2, aStr);
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_X2, aStr);
 
     // svg: y2
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer, aEnd.Y);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_Y2, aStr);
+    mrExport.AddAttribute(XmlNamespace::SVG, XML_Y2, aStr);
 
     // write measure shape
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_MEASURE, bCreateNewline, true);
+    SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_MEASURE, bCreateNewline, true);
 
     ImpExportDescription( xShape ); // #i68101#
     ImpExportEvents( xShape );
@@ -2841,7 +2841,7 @@ void XMLShapeExport::ImpExportOLE2Shape(
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
     bool bExportEmbedded(mrExport.getExportFlags() & SvXMLExportFlags::EMBEDDED);
     OUString sPersistName;
-    SvXMLElementExport aElement( mrExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElement( mrExport, XmlNamespace::DRAW,
                               XML_FRAME, bCreateNewline, true );
 
     if (!bIsEmptyPresObj)
@@ -2878,7 +2878,7 @@ void XMLShapeExport::ImpExportOLE2Shape(
                 xPropSet->getPropertyValue("CLSID") >>= sClassId;
 
             if( !sClassId.isEmpty() )
-                mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_CLASS_ID, sClassId );
+                mrExport.AddAttribute(XmlNamespace::DRAW, XML_CLASS_ID, sClassId );
 
             if(!bExportEmbedded)
             {
@@ -2890,16 +2890,16 @@ void XMLShapeExport::ImpExportOLE2Shape(
                     // to change this so we better dispose this on load
                     sURL = mrExport.AddEmbeddedObject( sURL );
 
-                    mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sURL );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+                    mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, sURL );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
                 }
             }
         }
 
         enum XMLTokenEnum eElem = sClassId.isEmpty() ? XML_OBJECT : XML_OBJECT_OLE ;
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DRAW, eElem, true, true );
+        SvXMLElementExport aElem( mrExport, XmlNamespace::DRAW, eElem, true, true );
 
         // tdf#112547 export text as child of draw:object, where import expects it
         if (!bIsEmptyPresObj && supportsText(eShapeType))
@@ -2937,13 +2937,13 @@ void XMLShapeExport::ImpExportOLE2Shape(
         if( !bExportEmbedded )
         {
             sURL = GetExport().AddEmbeddedObject( sURL );
-            mrExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sURL );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-            mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+            mrExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, sURL );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+            mrExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
         }
 
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_DRAW,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::DRAW,
                                   XML_IMAGE, false, true );
 
         if( bExportEmbedded )
@@ -2975,7 +2975,7 @@ void XMLShapeExport::ImpExportPageShape(
         sal_Int32 nPageNumber = 0;
         xPropSet->getPropertyValue(aPageNumberStr) >>= nPageNumber;
         if( nPageNumber )
-            mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_PAGE_NUMBER, OUString::number(nPageNumber));
+            mrExport.AddAttribute(XmlNamespace::DRAW, XML_PAGE_NUMBER, OUString::number(nPageNumber));
     }
 
     // a presentation page shape, normally used on notes pages only. If
@@ -2983,13 +2983,13 @@ void XMLShapeExport::ImpExportPageShape(
     // copy-paste exchange between draw and impress (this IS possible...)
     if(eShapeType == XmlShapeTypePresPageShape)
     {
-        mrExport.AddAttribute(XML_NAMESPACE_PRESENTATION, XML_CLASS,
+        mrExport.AddAttribute(XmlNamespace::PRESENTATION, XML_CLASS,
                              XML_PAGE);
     }
 
     // write Page shape
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_PAGE_THUMBNAIL, bCreateNewline, true);
+    SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_PAGE_THUMBNAIL, bCreateNewline, true);
 }
 
 void XMLShapeExport::ImpExportCaptionShape(
@@ -3011,7 +3011,7 @@ void XMLShapeExport::ImpExportCaptionShape(
         OUStringBuffer sStringBuffer;
         mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
                 nCornerRadius);
-        mrExport.AddAttribute(XML_NAMESPACE_DRAW, XML_CORNER_RADIUS, sStringBuffer.makeStringAndClear());
+        mrExport.AddAttribute(XmlNamespace::DRAW, XML_CORNER_RADIUS, sStringBuffer.makeStringAndClear());
     }
 
     awt::Point aCaptionPoint;
@@ -3019,18 +3019,18 @@ void XMLShapeExport::ImpExportCaptionShape(
 
     mrExport.GetMM100UnitConverter().convertMeasureToXML(msBuffer,
             aCaptionPoint.X);
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CAPTION_POINT_X, msBuffer.makeStringAndClear() );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_CAPTION_POINT_X, msBuffer.makeStringAndClear() );
     mrExport.GetMM100UnitConverter().convertMeasureToXML(msBuffer,
             aCaptionPoint.Y);
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CAPTION_POINT_Y, msBuffer.makeStringAndClear() );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_CAPTION_POINT_Y, msBuffer.makeStringAndClear() );
 
     // write Caption shape. Add export later.
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
     bool bAnnotation( (nFeatures & XMLShapeExportFlags::ANNOTATION) == XMLShapeExportFlags::ANNOTATION );
 
     SvXMLElementExport aObj( mrExport,
-                             (bAnnotation ? XML_NAMESPACE_OFFICE
-                                           : XML_NAMESPACE_DRAW),
+                             (bAnnotation ? XmlNamespace::OFFICE
+                                           : XmlNamespace::DRAW),
                              (bAnnotation ? XML_ANNOTATION : XML_CAPTION),
                              bCreateNewline, true );
 
@@ -3055,25 +3055,25 @@ void XMLShapeExport::ImpExportFrameShape(
     ImpExportNewTrans(xPropSet, nFeatures, pRefPoint);
 
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElem( mrExport, XmlNamespace::DRAW,
                               XML_FRAME, bCreateNewline, true );
 
     // export frame url
     OUString aStr;
     xPropSet->getPropertyValue("FrameURL") >>= aStr;
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_HREF, GetExport().GetRelativeReference(aStr) );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_HREF, GetExport().GetRelativeReference(aStr) );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
 
     // export name
     xPropSet->getPropertyValue("FrameName") >>= aStr;
     if( !aStr.isEmpty() )
-        mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_FRAME_NAME, aStr );
+        mrExport.AddAttribute( XmlNamespace::DRAW, XML_FRAME_NAME, aStr );
 
     // write floating frame
     {
-        SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_FLOATING_FRAME, true, true);
+        SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_FLOATING_FRAME, true, true);
     }
 
 }
@@ -3090,34 +3090,34 @@ void XMLShapeExport::ImpExportAppletShape(
     ImpExportNewTrans(xPropSet, nFeatures, pRefPoint);
 
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aElement( mrExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElement( mrExport, XmlNamespace::DRAW,
                               XML_FRAME, bCreateNewline, true );
 
     // export frame url
     OUString aStr;
     xPropSet->getPropertyValue("AppletCodeBase") >>= aStr;
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_HREF, GetExport().GetRelativeReference(aStr) );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_HREF, GetExport().GetRelativeReference(aStr) );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
 
     // export draw:applet-name
     xPropSet->getPropertyValue("AppletName") >>= aStr;
     if( !aStr.isEmpty() )
-        mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_APPLET_NAME, aStr );
+        mrExport.AddAttribute( XmlNamespace::DRAW, XML_APPLET_NAME, aStr );
 
     // export draw:code
     xPropSet->getPropertyValue("AppletCode") >>= aStr;
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CODE, aStr );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_CODE, aStr );
 
     // export draw:may-script
     bool bIsScript = false;
     xPropSet->getPropertyValue("AppletIsScript") >>= bIsScript;
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_MAY_SCRIPT, bIsScript ? XML_TRUE : XML_FALSE );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_MAY_SCRIPT, bIsScript ? XML_TRUE : XML_FALSE );
 
     {
         // write applet
-        SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_APPLET, true, true);
+        SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_APPLET, true, true);
 
         // export parameters
         uno::Sequence< beans::PropertyValue > aCommands;
@@ -3125,9 +3125,9 @@ void XMLShapeExport::ImpExportAppletShape(
         for( const auto& rCommand : std::as_const(aCommands) )
         {
             rCommand.Value >>= aStr;
-            mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, rCommand.Name );
-            mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_VALUE, aStr );
-            SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DRAW, XML_PARAM, false, true );
+            mrExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, rCommand.Name );
+            mrExport.AddAttribute( XmlNamespace::DRAW, XML_VALUE, aStr );
+            SvXMLElementExport aElem( mrExport, XmlNamespace::DRAW, XML_PARAM, false, true );
         }
     }
 
@@ -3145,25 +3145,25 @@ void XMLShapeExport::ImpExportPluginShape(
     ImpExportNewTrans(xPropSet, nFeatures, pRefPoint);
 
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aElement( mrExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElement( mrExport, XmlNamespace::DRAW,
                               XML_FRAME, bCreateNewline, true );
 
     // export plugin url
     OUString aStr;
     xPropSet->getPropertyValue("PluginURL") >>= aStr;
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_HREF, GetExport().GetRelativeReference(aStr) );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_HREF, GetExport().GetRelativeReference(aStr) );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
 
     // export mime-type
     xPropSet->getPropertyValue("PluginMimeType") >>= aStr;
     if(!aStr.isEmpty())
-        mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_MIME_TYPE, aStr );
+        mrExport.AddAttribute( XmlNamespace::DRAW, XML_MIME_TYPE, aStr );
 
     {
         // write plugin
-        SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DRAW, XML_PLUGIN, true, true);
+        SvXMLElementExport aOBJ(mrExport, XmlNamespace::DRAW, XML_PLUGIN, true, true);
 
         // export parameters
         uno::Sequence< beans::PropertyValue > aCommands;
@@ -3171,9 +3171,9 @@ void XMLShapeExport::ImpExportPluginShape(
         for( const auto& rCommand : std::as_const(aCommands) )
         {
             rCommand.Value >>= aStr;
-            mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, rCommand.Name );
-            mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_VALUE, aStr );
-            SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DRAW, XML_PARAM, false, true );
+            mrExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, rCommand.Name );
+            mrExport.AddAttribute( XmlNamespace::DRAW, XML_VALUE, aStr );
+            SvXMLElementExport aElem( mrExport, XmlNamespace::DRAW, XML_PARAM, false, true );
         }
     }
 
@@ -3263,7 +3263,7 @@ void XMLShapeExport::ImpExportMediaShape(
         (void)ImpExportPresentationAttributes( xPropSet, GetXMLToken(XML_OBJECT) );
     }
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElem( mrExport, XmlNamespace::DRAW,
                               XML_FRAME, bCreateNewline, true );
 
     // export media url
@@ -3275,16 +3275,16 @@ void XMLShapeExport::ImpExportMediaShape(
     OUString const persistentURL =
         lcl_StoreMediaAndGetURL(GetExport(), xPropSet, aMediaURL, sMimeType);
 
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_HREF, persistentURL );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-    mrExport.AddAttribute ( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_HREF, persistentURL );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+    mrExport.AddAttribute ( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
 
     // export mime-type
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_MIME_TYPE, sMimeType );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_MIME_TYPE, sMimeType );
 
     // write plugin
-    SvXMLElementExport aPluginOBJ(mrExport, XML_NAMESPACE_DRAW, XML_PLUGIN, !( nFeatures & XMLShapeExportFlags::NO_WS ), true);
+    SvXMLElementExport aPluginOBJ(mrExport, XmlNamespace::DRAW, XML_PLUGIN, !( nFeatures & XMLShapeExportFlags::NO_WS ), true);
 
     // export parameters
     const OUString aFalseStr(  "false"  ), aTrueStr(  "true"  );
@@ -3292,22 +3292,22 @@ void XMLShapeExport::ImpExportMediaShape(
     bool bLoop = false;
     const OUString aLoopStr(  "Loop"  );
     xPropSet->getPropertyValue( aLoopStr ) >>= bLoop;
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, aLoopStr );
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_VALUE, bLoop ? aTrueStr : aFalseStr );
-    delete new SvXMLElementExport( mrExport, XML_NAMESPACE_DRAW, XML_PARAM, false, true );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, aLoopStr );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_VALUE, bLoop ? aTrueStr : aFalseStr );
+    delete new SvXMLElementExport( mrExport, XmlNamespace::DRAW, XML_PARAM, false, true );
 
     bool bMute = false;
     const OUString aMuteStr(  "Mute"  );
     xPropSet->getPropertyValue( aMuteStr ) >>= bMute;
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, aMuteStr );
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_VALUE, bMute ? aTrueStr : aFalseStr );
-    delete new SvXMLElementExport( mrExport, XML_NAMESPACE_DRAW, XML_PARAM, false, true );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, aMuteStr );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_VALUE, bMute ? aTrueStr : aFalseStr );
+    delete new SvXMLElementExport( mrExport, XmlNamespace::DRAW, XML_PARAM, false, true );
 
     sal_Int16 nVolumeDB = 0;
     xPropSet->getPropertyValue("VolumeDB") >>= nVolumeDB;
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, "VolumeDB" );
-    mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_VALUE, OUString::number( nVolumeDB ) );
-    delete new SvXMLElementExport( mrExport, XML_NAMESPACE_DRAW, XML_PARAM, false, true );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, "VolumeDB" );
+    mrExport.AddAttribute( XmlNamespace::DRAW, XML_VALUE, OUString::number( nVolumeDB ) );
+    delete new SvXMLElementExport( mrExport, XmlNamespace::DRAW, XML_PARAM, false, true );
 
     media::ZoomLevel eZoom;
     OUString aZoomValue;
@@ -3329,9 +3329,9 @@ void XMLShapeExport::ImpExportMediaShape(
 
     if( !aZoomValue.isEmpty() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, "Zoom" );
-        mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_VALUE, aZoomValue );
-        delete new SvXMLElementExport( mrExport, XML_NAMESPACE_DRAW, XML_PARAM, false, true );
+        mrExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, "Zoom" );
+        mrExport.AddAttribute( XmlNamespace::DRAW, XML_VALUE, aZoomValue );
+        delete new SvXMLElementExport( mrExport, XmlNamespace::DRAW, XML_PARAM, false, true );
     }
 
 }
@@ -3355,7 +3355,7 @@ void XMLShapeExport::ImpExport3DSceneShape( const uno::Reference< drawing::XShap
 
     // write 3DScene shape
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aOBJ( mrExport, XML_NAMESPACE_DR3D, XML_SCENE, bCreateNewline, true);
+    SvXMLElementExport aOBJ( mrExport, XmlNamespace::DR3D, XML_SCENE, bCreateNewline, true);
 
     ImpExportDescription( xShape ); // #i68101#
     ImpExportEvents( xShape );
@@ -3397,7 +3397,7 @@ void XMLShapeExport::ImpExport3DShape(
     SdXMLImExTransform3D aTransform;
     aTransform.AddHomogenMatrix(aHomMat);
     if(aTransform.NeedsAction())
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_TRANSFORM, aTransform.GetExportString(mrExport.GetMM100UnitConverter()));
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_TRANSFORM, aTransform.GetExportString(mrExport.GetMM100UnitConverter()));
 
     switch(eShapeType)
     {
@@ -3423,7 +3423,7 @@ void XMLShapeExport::ImpExport3DShape(
             {
                 SvXMLUnitConverter::convertB3DVector(sStringBuffer, aPos3D);
                 aStr = sStringBuffer.makeStringAndClear();
-                mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_MIN_EDGE, aStr);
+                mrExport.AddAttribute(XmlNamespace::DR3D, XML_MIN_EDGE, aStr);
             }
 
             // write maxEdge
@@ -3431,13 +3431,13 @@ void XMLShapeExport::ImpExport3DShape(
             {
                 SvXMLUnitConverter::convertB3DVector(sStringBuffer, aDir3D);
                 aStr = sStringBuffer.makeStringAndClear();
-                mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_MAX_EDGE, aStr);
+                mrExport.AddAttribute(XmlNamespace::DR3D, XML_MAX_EDGE, aStr);
             }
 
             // write 3DCube shape
             // #i123542# Do this *after* the attributes are added, else these will be lost since opening
             // the scope will clear the global attribute list at the exporter
-            SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DR3D, XML_CUBE, true, true);
+            SvXMLElementExport aOBJ(mrExport, XmlNamespace::DR3D, XML_CUBE, true, true);
 
             break;
         }
@@ -3460,7 +3460,7 @@ void XMLShapeExport::ImpExport3DShape(
             {
                 SvXMLUnitConverter::convertB3DVector(sStringBuffer, aPos3D);
                 aStr = sStringBuffer.makeStringAndClear();
-                mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_CENTER, aStr);
+                mrExport.AddAttribute(XmlNamespace::DR3D, XML_CENTER, aStr);
             }
 
             // write Size
@@ -3468,13 +3468,13 @@ void XMLShapeExport::ImpExport3DShape(
             {
                 SvXMLUnitConverter::convertB3DVector(sStringBuffer, aDir3D);
                 aStr = sStringBuffer.makeStringAndClear();
-                mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_SIZE, aStr);
+                mrExport.AddAttribute(XmlNamespace::DR3D, XML_SIZE, aStr);
             }
 
             // write 3DSphere shape
             // #i123542# Do this *after* the attributes are added, else these will be lost since opening
             // the scope will clear the global attribute list at the exporter
-            SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DR3D, XML_SPHERE, true, true);
+            SvXMLElementExport aOBJ(mrExport, XmlNamespace::DR3D, XML_SPHERE, true, true);
 
             break;
         }
@@ -3508,7 +3508,7 @@ void XMLShapeExport::ImpExport3DShape(
                 aPolyPolygonRange.getWidth(),
                 aPolyPolygonRange.getHeight());
 
-            mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_VIEWBOX, aViewBox.GetExportString());
+            mrExport.AddAttribute(XmlNamespace::SVG, XML_VIEWBOX, aViewBox.GetExportString());
 
             // prepare svg:d string
             const OUString aPolygonString(
@@ -3519,17 +3519,17 @@ void XMLShapeExport::ImpExport3DShape(
                     true));         // bHandleRelativeNextPointCompatible
 
             // write point array
-            mrExport.AddAttribute(XML_NAMESPACE_SVG, XML_D, aPolygonString);
+            mrExport.AddAttribute(XmlNamespace::SVG, XML_D, aPolygonString);
 
             if(eShapeType == XmlShapeTypeDraw3DLatheObject)
             {
                 // write 3DLathe shape
-                SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DR3D, XML_ROTATE, true, true);
+                SvXMLElementExport aOBJ(mrExport, XmlNamespace::DR3D, XML_ROTATE, true, true);
             }
             else
             {
                 // write 3DExtrude shape
-                SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DR3D, XML_EXTRUDE, true, true);
+                SvXMLElementExport aOBJ(mrExport, XmlNamespace::DR3D, XML_EXTRUDE, true, true);
             }
             break;
         }
@@ -3551,7 +3551,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
     SdXMLImExTransform3D aTransform;
     aTransform.AddHomogenMatrix(aHomMat);
     if(aTransform.NeedsAction())
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_TRANSFORM, aTransform.GetExportString(mrExport.GetMM100UnitConverter()));
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_TRANSFORM, aTransform.GetExportString(mrExport.GetMM100UnitConverter()));
 
     // VRP, VPN, VUP
     aAny = xPropSet->getPropertyValue("D3DCameraGeometry");
@@ -3563,7 +3563,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
     {
         SvXMLUnitConverter::convertB3DVector(sStringBuffer, aVRP);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_VRP, aStr);
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_VRP, aStr);
     }
 
     ::basegfx::B3DVector aVPN(aCamGeo.vpn.DirectionX, aCamGeo.vpn.DirectionY, aCamGeo.vpn.DirectionZ);
@@ -3571,7 +3571,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
     {
         SvXMLUnitConverter::convertB3DVector(sStringBuffer, aVPN);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_VPN, aStr);
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_VPN, aStr);
     }
 
     ::basegfx::B3DVector aVUP(aCamGeo.vup.DirectionX, aCamGeo.vup.DirectionY, aCamGeo.vup.DirectionZ);
@@ -3579,7 +3579,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
     {
         SvXMLUnitConverter::convertB3DVector(sStringBuffer, aVUP);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_VUP, aStr);
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_VUP, aStr);
     }
 
     // projection "D3DScenePerspective" drawing::ProjectionMode
@@ -3590,7 +3590,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
         aStr = GetXMLToken(XML_PARALLEL);
     else
         aStr = GetXMLToken(XML_PERSPECTIVE);
-    mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_PROJECTION, aStr);
+    mrExport.AddAttribute(XmlNamespace::DR3D, XML_PROJECTION, aStr);
 
     // distance
     aAny = xPropSet->getPropertyValue("D3DSceneDistance");
@@ -3599,7 +3599,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
             nDistance);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_DISTANCE, aStr);
+    mrExport.AddAttribute(XmlNamespace::DR3D, XML_DISTANCE, aStr);
 
     // focalLength
     aAny = xPropSet->getPropertyValue("D3DSceneFocalLength");
@@ -3608,13 +3608,13 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
     mrExport.GetMM100UnitConverter().convertMeasureToXML(sStringBuffer,
             nFocalLength);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_FOCAL_LENGTH, aStr);
+    mrExport.AddAttribute(XmlNamespace::DR3D, XML_FOCAL_LENGTH, aStr);
 
     // shadowSlant
     aAny = xPropSet->getPropertyValue("D3DSceneShadowSlant");
     sal_Int16 nShadowSlant = 0;
     aAny >>= nShadowSlant;
-    mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_SHADOW_SLANT, OUString::number(static_cast<sal_Int32>(nShadowSlant)));
+    mrExport.AddAttribute(XmlNamespace::DR3D, XML_SHADOW_SLANT, OUString::number(static_cast<sal_Int32>(nShadowSlant)));
 
     // shadeMode
     aAny = xPropSet->getPropertyValue("D3DSceneShadeMode");
@@ -3635,7 +3635,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
         // ShadeMode enum not there, write default
         aStr = GetXMLToken(XML_GOURAUD);
     }
-    mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_SHADE_MODE, aStr);
+    mrExport.AddAttribute(XmlNamespace::DR3D, XML_SHADE_MODE, aStr);
 
     // ambientColor
     aAny = xPropSet->getPropertyValue("D3DSceneAmbientColor");
@@ -3643,7 +3643,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
     aAny >>= nAmbientColor;
     ::sax::Converter::convertColor(sStringBuffer, nAmbientColor);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_AMBIENT_COLOR, aStr);
+    mrExport.AddAttribute(XmlNamespace::DR3D, XML_AMBIENT_COLOR, aStr);
 
     // lightingMode
     aAny = xPropSet->getPropertyValue("D3DSceneTwoSidedLighting");
@@ -3651,7 +3651,7 @@ void XMLShapeExport::export3DSceneAttributes( const css::uno::Reference< css::be
     aAny >>= bTwoSidedLighting;
     ::sax::Converter::convertBool(sStringBuffer, bTwoSidedLighting);
     aStr = sStringBuffer.makeStringAndClear();
-    mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_LIGHTING_MODE, aStr);
+    mrExport.AddAttribute(XmlNamespace::DR3D, XML_LIGHTING_MODE, aStr);
 }
 
 /** helper for chart that exports all lamps from the propertyset */
@@ -3678,7 +3678,7 @@ void XMLShapeExport::export3DLamps( const css::uno::Reference< css::beans::XProp
         xPropSet->getPropertyValue( aPropName ) >>= nLightColor;
         ::sax::Converter::convertColor(sStringBuffer, nLightColor);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_DIFFUSE_COLOR, aStr);
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_DIFFUSE_COLOR, aStr);
 
         // lightdirection
         aPropName = aDirectionPropName + aIndexStr;
@@ -3686,21 +3686,21 @@ void XMLShapeExport::export3DLamps( const css::uno::Reference< css::beans::XProp
         aLightDirection = ::basegfx::B3DVector(aLightDir.DirectionX, aLightDir.DirectionY, aLightDir.DirectionZ);
         SvXMLUnitConverter::convertB3DVector(sStringBuffer, aLightDirection);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_DIRECTION, aStr);
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_DIRECTION, aStr);
 
         // lighton
         aPropName = aLightOnPropName + aIndexStr;
         xPropSet->getPropertyValue(aPropName) >>= bLightOnOff;
         ::sax::Converter::convertBool(sStringBuffer, bLightOnOff);
         aStr = sStringBuffer.makeStringAndClear();
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_ENABLED, aStr);
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_ENABLED, aStr);
 
         // specular
-        mrExport.AddAttribute(XML_NAMESPACE_DR3D, XML_SPECULAR,
+        mrExport.AddAttribute(XmlNamespace::DR3D, XML_SPECULAR,
             nLamp == 1 ? XML_TRUE : XML_FALSE);
 
         // write light entry
-        SvXMLElementExport aOBJ(mrExport, XML_NAMESPACE_DR3D, XML_LIGHT, true, true);
+        SvXMLElementExport aOBJ(mrExport, XmlNamespace::DR3D, XML_LIGHT, true, true);
     }
 }
 
@@ -3775,7 +3775,7 @@ static void ImpExportEquations( SvXMLExport& rExport, const uno::Sequence< OUStr
     for ( i = 0; i < rEquations.getLength(); i++ )
     {
         OUString aStr= "f" + OUString::number( i );
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME, aStr );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_NAME, aStr );
 
         aStr = rEquations[ i ];
         sal_Int32 nIndex = 0;
@@ -3789,8 +3789,8 @@ static void ImpExportEquations( SvXMLExport& rExport, const uno::Sequence< OUStr
                 nIndex++;
             }
         } while( nIndex != -1 );
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_FORMULA, aStr );
-        SvXMLElementExport aOBJ( rExport, XML_NAMESPACE_DRAW, XML_EQUATION, true, true );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_FORMULA, aStr );
+        SvXMLElementExport aOBJ( rExport, XmlNamespace::DRAW, XML_EQUATION, true, true );
     }
 }
 
@@ -3817,7 +3817,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                         ExportParameter( aStrBuffer, aPosition.First );
                         ExportParameter( aStrBuffer, aPosition.Second );
                         aStr = aStrBuffer.makeStringAndClear();
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_POSITION, aStr );
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_POSITION, aStr );
                         bPosition = true;
                     }
                 }
@@ -3826,7 +3826,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                 {
                     bool bMirroredX;
                     if ( rPropVal.Value >>= bMirroredX )
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_MIRROR_HORIZONTAL,
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_MIRROR_HORIZONTAL,
                             bMirroredX ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                 }
                 break;
@@ -3834,7 +3834,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                 {
                     bool bMirroredY;
                     if ( rPropVal.Value >>= bMirroredY )
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_MIRROR_VERTICAL,
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_MIRROR_VERTICAL,
                             bMirroredY ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                 }
                 break;
@@ -3842,7 +3842,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                 {
                     bool bSwitched;
                     if ( rPropVal.Value >>= bSwitched )
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_SWITCHED,
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_SWITCHED,
                             bSwitched ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                 }
                 break;
@@ -3854,7 +3854,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                         ExportParameter( aStrBuffer, aPolar.First );
                         ExportParameter( aStrBuffer, aPolar.Second );
                         aStr = aStrBuffer.makeStringAndClear();
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_POLAR, aStr );
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_POLAR, aStr );
                     }
                 }
                 break;
@@ -3865,7 +3865,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                     {
                         ExportParameter( aStrBuffer, aRadiusRangeMinimum );
                         aStr = aStrBuffer.makeStringAndClear();
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_RADIUS_RANGE_MINIMUM, aStr );
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_RADIUS_RANGE_MINIMUM, aStr );
                     }
                 }
                 break;
@@ -3876,7 +3876,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                     {
                         ExportParameter( aStrBuffer, aRadiusRangeMaximum );
                         aStr = aStrBuffer.makeStringAndClear();
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_RADIUS_RANGE_MAXIMUM, aStr );
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_RADIUS_RANGE_MAXIMUM, aStr );
                     }
                 }
                 break;
@@ -3887,7 +3887,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                     {
                         ExportParameter( aStrBuffer, aXRangeMinimum );
                         aStr = aStrBuffer.makeStringAndClear();
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_RANGE_X_MINIMUM, aStr );
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_RANGE_X_MINIMUM, aStr );
                     }
                 }
                 break;
@@ -3898,7 +3898,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                     {
                         ExportParameter( aStrBuffer, aXRangeMaximum );
                         aStr = aStrBuffer.makeStringAndClear();
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_RANGE_X_MAXIMUM, aStr );
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_RANGE_X_MAXIMUM, aStr );
                     }
                 }
                 break;
@@ -3909,7 +3909,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                     {
                         ExportParameter( aStrBuffer, aYRangeMinimum );
                         aStr = aStrBuffer.makeStringAndClear();
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_RANGE_Y_MINIMUM, aStr );
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_RANGE_Y_MINIMUM, aStr );
                     }
                 }
                 break;
@@ -3920,7 +3920,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
                     {
                         ExportParameter( aStrBuffer, aYRangeMaximum );
                         aStr = aStrBuffer.makeStringAndClear();
-                        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_HANDLE_RANGE_Y_MAXIMUM, aStr );
+                        rExport.AddAttribute( XmlNamespace::DRAW, XML_HANDLE_RANGE_Y_MAXIMUM, aStr );
                     }
                 }
                 break;
@@ -3929,7 +3929,7 @@ static void ImpExportHandles( SvXMLExport& rExport, const uno::Sequence< beans::
             }
         }
         if ( bPosition )
-            SvXMLElementExport aOBJ( rExport, XML_NAMESPACE_DRAW, XML_HANDLE, true, true );
+            SvXMLElementExport aOBJ( rExport, XmlNamespace::DRAW, XML_HANDLE, true, true );
         else
             rExport.ClearAttrList();
     }
@@ -4090,7 +4090,7 @@ static void ImpExportEnhancedPath( SvXMLExport& rExport,
         }
     }
     aStr = aStrBuffer.makeStringAndClear();
-    rExport.AddAttribute( bExtended ? XML_NAMESPACE_DRAW_EXT : XML_NAMESPACE_DRAW, XML_ENHANCED_PATH, aStr );
+    rExport.AddAttribute( bExtended ? XmlNamespace::DRAW_EXT : XmlNamespace::DRAW, XML_ENHANCED_PATH, aStr );
     if (!bExtended && bNeedExtended && (rExport.getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED))
         ImpExportEnhancedPath( rExport, rCoordinates, rSegments, true );
 }
@@ -4139,7 +4139,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                     {
                         bool bMirroredX;
                         if ( rGeoProp.Value >>= bMirroredX )
-                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_MIRROR_HORIZONTAL,
+                            rExport.AddAttribute( XmlNamespace::DRAW, XML_MIRROR_HORIZONTAL,
                                 bMirroredX ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                     }
                     break;
@@ -4147,7 +4147,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                     {
                         bool bMirroredY;
                         if ( rGeoProp.Value >>= bMirroredY )
-                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_MIRROR_VERTICAL,
+                            rExport.AddAttribute( XmlNamespace::DRAW, XML_MIRROR_VERTICAL,
                                 bMirroredY ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                     }
                     break;
@@ -4157,7 +4157,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                         if ( rGeoProp.Value >>= aRect )
                         {
                             SdXMLImExViewBox aViewBox( aRect.X, aRect.Y, aRect.Width, aRect.Height );
-                            rExport.AddAttribute( XML_NAMESPACE_SVG, XML_VIEWBOX, aViewBox.GetExportString() );
+                            rExport.AddAttribute( XmlNamespace::SVG, XML_VIEWBOX, aViewBox.GetExportString() );
                         }
                     }
                     break;
@@ -4170,7 +4170,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                             ::sax::Converter::convertDouble(
                                     aStrBuffer, fTextRotateAngle );
                             aStr = aStrBuffer.makeStringAndClear();
-                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_TEXT_ROTATE_ANGLE, aStr );
+                            rExport.AddAttribute( XmlNamespace::DRAW, XML_TEXT_ROTATE_ANGLE, aStr );
                         }
                     }
                     break;
@@ -4187,7 +4187,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         bool bExtrusionOn;
                                         if ( rProp.Value >>= bExtrusionOn )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION,
                                                 bExtrusionOn ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4204,7 +4204,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 util::MeasureUnit::PERCENT);
                                             aStrBuffer.append( '%' );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_BRIGHTNESS, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_BRIGHTNESS, aStr );
                                         }
                                     }
                                     break;
@@ -4219,7 +4219,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 rExport.GetMM100UnitConverter().convertDouble( aStrBuffer, fDepth );
                                                 ExportParameter( aStrBuffer, aDepthParaPair.Second );
                                                 aStr = aStrBuffer.makeStringAndClear();
-                                                rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_DEPTH, aStr );
+                                                rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_DEPTH, aStr );
                                             }
                                         }
                                     }
@@ -4237,7 +4237,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 util::MeasureUnit::PERCENT);
                                             aStrBuffer.append( '%' );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_DIFFUSION, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_DIFFUSION, aStr );
                                         }
                                     }
                                     break;
@@ -4245,14 +4245,14 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         sal_Int32 nExtrusionNumberOfLineSegments = 0;
                                         if ( rProp.Value >>= nExtrusionNumberOfLineSegments )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_NUMBER_OF_LINE_SEGMENTS, OUString::number( nExtrusionNumberOfLineSegments ) );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_NUMBER_OF_LINE_SEGMENTS, OUString::number( nExtrusionNumberOfLineSegments ) );
                                     }
                                     break;
                                     case EAS_LightFace :
                                     {
                                         bool bExtrusionLightFace;
                                         if ( rProp.Value >>= bExtrusionLightFace )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_LIGHT_FACE,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_LIGHT_FACE,
                                                 bExtrusionLightFace ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4260,7 +4260,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         bool bExtrusionFirstLightHarsh;
                                         if ( rProp.Value >>= bExtrusionFirstLightHarsh )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_FIRST_LIGHT_HARSH,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_FIRST_LIGHT_HARSH,
                                                 bExtrusionFirstLightHarsh ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4268,7 +4268,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         bool bExtrusionSecondLightHarsh;
                                         if ( rProp.Value >>= bExtrusionSecondLightHarsh )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_SECOND_LIGHT_HARSH,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_SECOND_LIGHT_HARSH,
                                                 bExtrusionSecondLightHarsh ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4285,7 +4285,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 util::MeasureUnit::PERCENT);
                                             aStrBuffer.append( '%' );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_FIRST_LIGHT_LEVEL, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_FIRST_LIGHT_LEVEL, aStr );
                                         }
                                     }
                                     break;
@@ -4302,7 +4302,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 util::MeasureUnit::PERCENT);
                                             aStrBuffer.append( '%' );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_SECOND_LIGHT_LEVEL, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_SECOND_LIGHT_LEVEL, aStr );
                                         }
                                     }
                                     break;
@@ -4315,7 +4315,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 aExtrusionFirstLightDirection.DirectionZ );
                                             SvXMLUnitConverter::convertB3DVector( aStrBuffer, aVec3D );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_FIRST_LIGHT_DIRECTION, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_FIRST_LIGHT_DIRECTION, aStr );
                                         }
                                     }
                                     break;
@@ -4328,7 +4328,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 aExtrusionSecondLightDirection.DirectionZ );
                                             SvXMLUnitConverter::convertB3DVector( aStrBuffer, aVec3D );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_SECOND_LIGHT_DIRECTION, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_SECOND_LIGHT_DIRECTION, aStr );
                                         }
                                     }
                                     break;
@@ -4336,7 +4336,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         bool bExtrusionMetal;
                                         if ( rProp.Value >>= bExtrusionMetal )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_METAL,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_METAL,
                                                 bExtrusionMetal ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4360,7 +4360,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                             // ShadeMode enum not there, write default
                                             aStr = GetXMLToken( XML_FLAT);
                                         }
-                                        rExport.AddAttribute( XML_NAMESPACE_DR3D, XML_SHADE_MODE, aStr );
+                                        rExport.AddAttribute( XmlNamespace::DR3D, XML_SHADE_MODE, aStr );
                                     }
                                     break;
                                     case EAS_RotateAngle :
@@ -4371,7 +4371,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                             ExportParameter( aStrBuffer, aRotateAngleParaPair.First );
                                             ExportParameter( aStrBuffer, aRotateAngleParaPair.Second );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_ROTATION_ANGLE, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_ROTATION_ANGLE, aStr );
                                         }
                                     }
                                     break;
@@ -4384,7 +4384,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 aExtrusionRotationCenter.DirectionZ );
                                             SvXMLUnitConverter::convertB3DVector( aStrBuffer, aVec3D );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_ROTATION_CENTER, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_ROTATION_CENTER, aStr );
                                         }
                                     }
                                     break;
@@ -4401,7 +4401,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 util::MeasureUnit::PERCENT);
                                             aStrBuffer.append( '%' );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_SHININESS, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_SHININESS, aStr );
                                         }
                                     }
                                     break;
@@ -4413,7 +4413,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                             ExportParameter( aStrBuffer, aSkewParaPair.First );
                                             ExportParameter( aStrBuffer, aSkewParaPair.Second );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_SKEW, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_SKEW, aStr );
                                         }
                                     }
                                     break;
@@ -4430,7 +4430,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 util::MeasureUnit::PERCENT);
                                             aStrBuffer.append( '%' );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_SPECULARITY, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_SPECULARITY, aStr );
                                         }
                                     }
                                     break;
@@ -4438,7 +4438,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         drawing::ProjectionMode eProjectionMode;
                                         if ( rProp.Value >>= eProjectionMode )
-                                            rExport.AddAttribute( XML_NAMESPACE_DR3D, XML_PROJECTION,
+                                            rExport.AddAttribute( XmlNamespace::DR3D, XML_PROJECTION,
                                                 eProjectionMode == drawing::ProjectionMode_PARALLEL ? GetXMLToken( XML_PARALLEL ) : GetXMLToken( XML_PERSPECTIVE ) );
                                     }
                                     break;
@@ -4449,7 +4449,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                         {
                                             rUnitConverter.convertPosition3D( aStrBuffer, aExtrusionViewPoint );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_VIEWPOINT, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_VIEWPOINT, aStr );
                                         }
                                     }
                                     break;
@@ -4461,7 +4461,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                             ExportParameter( aStrBuffer, aOriginParaPair.First );
                                             ExportParameter( aStrBuffer, aOriginParaPair.Second );
                                             aStr = aStrBuffer.makeStringAndClear();
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_ORIGIN, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_ORIGIN, aStr );
                                         }
                                     }
                                     break;
@@ -4470,7 +4470,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                         bool bExtrusionColor;
                                         if ( rProp.Value >>= bExtrusionColor )
                                         {
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_COLOR,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_COLOR,
                                                 bExtrusionColor ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                         }
                                     }
@@ -4495,7 +4495,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         bool bTextPathOn;
                                         if ( rProp.Value >>= bTextPathOn )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_TEXT_PATH,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_TEXT_PATH,
                                                 bTextPathOn ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4513,7 +4513,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                     break;
                                             }
                                             if ( !aStr.isEmpty() )
-                                                rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_TEXT_PATH_MODE, aStr );
+                                                rExport.AddAttribute( XmlNamespace::DRAW, XML_TEXT_PATH_MODE, aStr );
                                         }
                                     }
                                     break;
@@ -4523,7 +4523,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                         if ( rProp.Value >>= bScaleX )
                                         {
                                             aStr = bScaleX ? GetXMLToken( XML_SHAPE ) : GetXMLToken( XML_PATH );
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_TEXT_PATH_SCALE, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_TEXT_PATH_SCALE, aStr );
                                         }
                                     }
                                     break;
@@ -4531,7 +4531,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         bool bSameLetterHeights;
                                         if ( rProp.Value >>= bSameLetterHeights )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_TEXT_PATH_SAME_LETTER_HEIGHTS,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_TEXT_PATH_SAME_LETTER_HEIGHTS,
                                                 bSameLetterHeights ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4570,14 +4570,14 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                             aStrBuffer.append( aSubViewSizes[nIdx].Height );
                                         }
                                         aStr = aStrBuffer.makeStringAndClear();
-                                        rExport.AddAttribute( XML_NAMESPACE_DRAW_EXT, XML_SUB_VIEW_SIZE, aStr );
+                                        rExport.AddAttribute( XmlNamespace::DRAW_EXT, XML_SUB_VIEW_SIZE, aStr );
                                     }
                                     break;
                                     case EAS_ExtrusionAllowed :
                                     {
                                         bool bExtrusionAllowed;
                                         if ( rProp.Value >>= bExtrusionAllowed )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_EXTRUSION_ALLOWED,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_EXTRUSION_ALLOWED,
                                                 bExtrusionAllowed ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4585,7 +4585,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         bool bConcentricGradientFillAllowed;
                                         if ( rProp.Value >>= bConcentricGradientFillAllowed )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CONCENTRIC_GRADIENT_FILL_ALLOWED,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_CONCENTRIC_GRADIENT_FILL_ALLOWED,
                                                 bConcentricGradientFillAllowed ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4593,7 +4593,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         bool bTextPathAllowed;
                                         if ( rProp.Value >>= bTextPathAllowed )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_TEXT_PATH_ALLOWED,
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_TEXT_PATH_ALLOWED,
                                                 bTextPathAllowed ? GetXMLToken( XML_TRUE ) : GetXMLToken( XML_FALSE ) );
                                     }
                                     break;
@@ -4611,7 +4611,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 }
                                                 aStr = aStrBuffer.makeStringAndClear();
                                             }
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_GLUE_POINTS, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_GLUE_POINTS, aStr );
                                         }
                                     }
                                     break;
@@ -4627,7 +4627,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 case css::drawing::EnhancedCustomShapeGluePointType::RECT     : aStr = GetXMLToken( XML_RECTANGLE ); break;
                                             }
                                             if ( !aStr.isEmpty() )
-                                                rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_GLUE_POINT_TYPE, aStr );
+                                                rExport.AddAttribute( XmlNamespace::DRAW, XML_GLUE_POINT_TYPE, aStr );
                                         }
                                     }
                                     break;
@@ -4645,14 +4645,14 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                     {
                                         sal_Int32 nStretchPoint = 0;
                                         if ( rProp.Value >>= nStretchPoint )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_PATH_STRETCHPOINT_X, OUString::number( nStretchPoint ) );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_PATH_STRETCHPOINT_X, OUString::number( nStretchPoint ) );
                                     }
                                     break;
                                     case EAS_StretchY :
                                     {
                                         sal_Int32 nStretchPoint = 0;
                                         if ( rProp.Value >>= nStretchPoint )
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_PATH_STRETCHPOINT_Y, OUString::number( nStretchPoint ) );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_PATH_STRETCHPOINT_Y, OUString::number( nStretchPoint ) );
                                     }
                                     break;
                                     case EAS_TextFrames :
@@ -4671,7 +4671,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                                                 }
                                                 aStr = aStrBuffer.makeStringAndClear();
                                             }
-                                            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_TEXT_AREAS, aStr );
+                                            rExport.AddAttribute( XmlNamespace::DRAW, XML_TEXT_AREAS, aStr );
                                         }
                                     }
                                     break;
@@ -4701,7 +4701,7 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                         break;
                 }
             }   // for
-            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_TYPE, aCustomShapeType );
+            rExport.AddAttribute( XmlNamespace::DRAW, XML_TYPE, aCustomShapeType );
 
             // adjustments
             sal_Int32 nAdjustmentValues = aAdjustmentValues.getLength();
@@ -4735,13 +4735,13 @@ static void ImpExportEnhancedGeometry( SvXMLExport& rExport, const uno::Referenc
                     }
                 }
                 aStr = aStrBuffer.makeStringAndClear();
-                rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_MODIFIERS, aStr );
+                rExport.AddAttribute( XmlNamespace::DRAW, XML_MODIFIERS, aStr );
             }
             if ( bCoordinates )
                 ImpExportEnhancedPath( rExport, aCoordinates, aSegments );
         }
     }
-    SvXMLElementExport aOBJ( rExport, XML_NAMESPACE_DRAW, XML_ENHANCED_GEOMETRY, true, true );
+    SvXMLElementExport aOBJ( rExport, XmlNamespace::DRAW, XML_ENHANCED_GEOMETRY, true, true );
     if ( bEquations )
         ImpExportEquations( rExport, aEquations );
     if ( bHandles )
@@ -4768,17 +4768,17 @@ void XMLShapeExport::ImpExportCustomShape(
         {
             uno::Any aEngine( xPropSet->getPropertyValue( "CustomShapeEngine" ) );
             if ( ( aEngine >>= aStr ) && !aStr.isEmpty() )
-                mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_ENGINE, aStr );
+                mrExport.AddAttribute( XmlNamespace::DRAW, XML_ENGINE, aStr );
         }
         if ( xPropSetInfo->hasPropertyByName( "CustomShapeData" ) )
         {
             uno::Any aData( xPropSet->getPropertyValue( "CustomShapeData" ) );
             if ( ( aData >>= aStr ) && !aStr.isEmpty() )
-                mrExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DATA, aStr );
+                mrExport.AddAttribute( XmlNamespace::DRAW, XML_DATA, aStr );
         }
     }
     bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE ); // #86116#/#92210#
-    SvXMLElementExport aOBJ( mrExport, XML_NAMESPACE_DRAW, XML_CUSTOM_SHAPE, bCreateNewline, true );
+    SvXMLElementExport aOBJ( mrExport, XmlNamespace::DRAW, XML_CUSTOM_SHAPE, bCreateNewline, true );
     ImpExportDescription( xShape ); // #i68101#
     ImpExportEvents( xShape );
     ImpExportGluePoints( xShape );
@@ -4810,7 +4810,7 @@ void XMLShapeExport::ImpExportTableShape( const uno::Reference< drawing::XShape
         const bool bCreateNewline( (nFeatures & XMLShapeExportFlags::NO_WS) == XMLShapeExportFlags::NONE );
         const bool bExportEmbedded(mrExport.getExportFlags() & SvXMLExportFlags::EMBEDDED);
 
-        SvXMLElementExport aElement( mrExport, XML_NAMESPACE_DRAW, XML_FRAME, bCreateNewline, true );
+        SvXMLElementExport aElement( mrExport, XmlNamespace::DRAW, XML_FRAME, bCreateNewline, true );
 
         // do not export in ODF 1.1 or older
         if (mrExport.getSaneDefaultVersion() >= SvtSaveOptions::ODFSVER_012)
@@ -4823,7 +4823,7 @@ void XMLShapeExport::ImpExportTableShape( const uno::Reference< drawing::XShape
                     const OUString sTemplate( xTemplate->getName() );
                     if( !sTemplate.isEmpty() )
                     {
-                        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_TEMPLATE_NAME, sTemplate );
+                        mrExport.AddAttribute(XmlNamespace::TABLE, XML_TEMPLATE_NAME, sTemplate );
 
                         for( const XMLPropertyMapEntry* pEntry = &aXMLTableShapeAttributes[0]; pEntry->msApiName; pEntry++ )
                         {
@@ -4899,13 +4899,13 @@ void XMLShapeExport::ImpExportTableShape( const uno::Reference< drawing::XShape
                 if( !bExportEmbedded )
                 {
                     OUString sURL = "Pictures/" + sPictureName;
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sURL );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-                    mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, sURL );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+                    mrExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
                 }
 
-                SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_DRAW, XML_IMAGE, false, true );
+                SvXMLElementExport aElem( GetExport(), XmlNamespace::DRAW, XML_IMAGE, false, true );
 
                 if( bExportEmbedded )
                 {
diff --git a/xmloff/source/draw/shapeimport.cxx b/xmloff/source/draw/shapeimport.cxx
index 11c82de99e52..e23550740747 100644
--- a/xmloff/source/draw/shapeimport.cxx
+++ b/xmloff/source/draw/shapeimport.cxx
@@ -178,29 +178,29 @@ const SvXMLTokenMap& XMLShapeImportHelper::GetGroupShapeElemTokenMap()
     {
         static const SvXMLTokenMapEntry aGroupShapeElemTokenMap[] =
         {
-            { XML_NAMESPACE_DRAW,           XML_G,              XML_TOK_GROUP_GROUP         },
-            { XML_NAMESPACE_DRAW,           XML_RECT,           XML_TOK_GROUP_RECT          },
-            { XML_NAMESPACE_DRAW,           XML_LINE,           XML_TOK_GROUP_LINE          },
-            { XML_NAMESPACE_DRAW,           XML_CIRCLE,         XML_TOK_GROUP_CIRCLE        },
-            { XML_NAMESPACE_DRAW,           XML_ELLIPSE,        XML_TOK_GROUP_ELLIPSE       },
-            { XML_NAMESPACE_DRAW,           XML_POLYGON,        XML_TOK_GROUP_POLYGON       },
-            { XML_NAMESPACE_DRAW,           XML_POLYLINE,       XML_TOK_GROUP_POLYLINE      },
-            { XML_NAMESPACE_DRAW,           XML_PATH,           XML_TOK_GROUP_PATH          },
-
-            { XML_NAMESPACE_DRAW,           XML_CONTROL,        XML_TOK_GROUP_CONTROL       },
-            { XML_NAMESPACE_DRAW,           XML_CONNECTOR,      XML_TOK_GROUP_CONNECTOR     },
-            { XML_NAMESPACE_DRAW,           XML_MEASURE,        XML_TOK_GROUP_MEASURE       },
-            { XML_NAMESPACE_DRAW,           XML_PAGE_THUMBNAIL, XML_TOK_GROUP_PAGE          },
-            { XML_NAMESPACE_DRAW,           XML_CAPTION,        XML_TOK_GROUP_CAPTION       },
-
-            { XML_NAMESPACE_CHART,          XML_CHART,          XML_TOK_GROUP_CHART         },
-            { XML_NAMESPACE_DR3D,           XML_SCENE,          XML_TOK_GROUP_3DSCENE       },
-
-            { XML_NAMESPACE_DRAW,           XML_FRAME,          XML_TOK_GROUP_FRAME         },
-
-            { XML_NAMESPACE_DRAW,           XML_CUSTOM_SHAPE,   XML_TOK_GROUP_CUSTOM_SHAPE  },
-            { XML_NAMESPACE_OFFICE,         XML_ANNOTATION,     XML_TOK_GROUP_ANNOTATION    },
-            { XML_NAMESPACE_DRAW,           XML_A,              XML_TOK_GROUP_A             },
+            { XmlNamespace::DRAW,           XML_G,              XML_TOK_GROUP_GROUP         },
+            { XmlNamespace::DRAW,           XML_RECT,           XML_TOK_GROUP_RECT          },
+            { XmlNamespace::DRAW,           XML_LINE,           XML_TOK_GROUP_LINE          },
+            { XmlNamespace::DRAW,           XML_CIRCLE,         XML_TOK_GROUP_CIRCLE        },
+            { XmlNamespace::DRAW,           XML_ELLIPSE,        XML_TOK_GROUP_ELLIPSE       },
+            { XmlNamespace::DRAW,           XML_POLYGON,        XML_TOK_GROUP_POLYGON       },
+            { XmlNamespace::DRAW,           XML_POLYLINE,       XML_TOK_GROUP_POLYLINE      },
+            { XmlNamespace::DRAW,           XML_PATH,           XML_TOK_GROUP_PATH          },
+
+            { XmlNamespace::DRAW,           XML_CONTROL,        XML_TOK_GROUP_CONTROL       },
+            { XmlNamespace::DRAW,           XML_CONNECTOR,      XML_TOK_GROUP_CONNECTOR     },
+            { XmlNamespace::DRAW,           XML_MEASURE,        XML_TOK_GROUP_MEASURE       },
+            { XmlNamespace::DRAW,           XML_PAGE_THUMBNAIL, XML_TOK_GROUP_PAGE          },
+            { XmlNamespace::DRAW,           XML_CAPTION,        XML_TOK_GROUP_CAPTION       },
+
+            { XmlNamespace::CHART,          XML_CHART,          XML_TOK_GROUP_CHART         },
+            { XmlNamespace::DR3D,           XML_SCENE,          XML_TOK_GROUP_3DSCENE       },
+
+            { XmlNamespace::DRAW,           XML_FRAME,          XML_TOK_GROUP_FRAME         },
+
+            { XmlNamespace::DRAW,           XML_CUSTOM_SHAPE,   XML_TOK_GROUP_CUSTOM_SHAPE  },
+            { XmlNamespace::OFFICE,         XML_ANNOTATION,     XML_TOK_GROUP_ANNOTATION    },
+            { XmlNamespace::DRAW,           XML_A,              XML_TOK_GROUP_A             },
 
             XML_TOKEN_MAP_END
         };
@@ -217,14 +217,14 @@ const SvXMLTokenMap& XMLShapeImportHelper::GetFrameShapeElemTokenMap()
     {
         static const SvXMLTokenMapEntry aFrameShapeElemTokenMap[] =
         {
-            { XML_NAMESPACE_DRAW,           XML_TEXT_BOX,       XML_TOK_FRAME_TEXT_BOX      },
-            { XML_NAMESPACE_DRAW,           XML_IMAGE,          XML_TOK_FRAME_IMAGE         },
-            { XML_NAMESPACE_DRAW,           XML_OBJECT,         XML_TOK_FRAME_OBJECT        },
-            { XML_NAMESPACE_DRAW,           XML_OBJECT_OLE,     XML_TOK_FRAME_OBJECT_OLE    },
-            { XML_NAMESPACE_DRAW,           XML_PLUGIN,         XML_TOK_FRAME_PLUGIN        },
-            { XML_NAMESPACE_DRAW,           XML_FLOATING_FRAME, XML_TOK_FRAME_FLOATING_FRAME},
-            { XML_NAMESPACE_DRAW,           XML_APPLET,         XML_TOK_FRAME_APPLET        },
-            { XML_NAMESPACE_TABLE,          XML_TABLE,          XML_TOK_FRAME_TABLE         },
+            { XmlNamespace::DRAW,           XML_TEXT_BOX,       XML_TOK_FRAME_TEXT_BOX      },
+            { XmlNamespace::DRAW,           XML_IMAGE,          XML_TOK_FRAME_IMAGE         },
+            { XmlNamespace::DRAW,           XML_OBJECT,         XML_TOK_FRAME_OBJECT        },
+            { XmlNamespace::DRAW,           XML_OBJECT_OLE,     XML_TOK_FRAME_OBJECT_OLE    },
+            { XmlNamespace::DRAW,           XML_PLUGIN,         XML_TOK_FRAME_PLUGIN        },
+            { XmlNamespace::DRAW,           XML_FLOATING_FRAME, XML_TOK_FRAME_FLOATING_FRAME},
+            { XmlNamespace::DRAW,           XML_APPLET,         XML_TOK_FRAME_APPLET        },
+            { XmlNamespace::TABLE,          XML_TABLE,          XML_TOK_FRAME_TABLE         },
             XML_TOKEN_MAP_END
         };
 
@@ -240,11 +240,11 @@ const SvXMLTokenMap& XMLShapeImportHelper::Get3DSceneShapeElemTokenMap()
     {
         static const SvXMLTokenMapEntry a3DSceneShapeElemTokenMap[] =
         {
-            { XML_NAMESPACE_DR3D,           XML_SCENE,      XML_TOK_3DSCENE_3DSCENE     },
-            { XML_NAMESPACE_DR3D,           XML_CUBE,       XML_TOK_3DSCENE_3DCUBE      },
-            { XML_NAMESPACE_DR3D,           XML_SPHERE,     XML_TOK_3DSCENE_3DSPHERE    },
-            { XML_NAMESPACE_DR3D,           XML_ROTATE,     XML_TOK_3DSCENE_3DLATHE     },
-            { XML_NAMESPACE_DR3D,           XML_EXTRUDE,    XML_TOK_3DSCENE_3DEXTRUDE   },
+            { XmlNamespace::DR3D,           XML_SCENE,      XML_TOK_3DSCENE_3DSCENE     },
+            { XmlNamespace::DR3D,           XML_CUBE,       XML_TOK_3DSCENE_3DCUBE      },
+            { XmlNamespace::DR3D,           XML_SPHERE,     XML_TOK_3DSCENE_3DSPHERE    },
+            { XmlNamespace::DR3D,           XML_ROTATE,     XML_TOK_3DSCENE_3DLATHE     },
+            { XmlNamespace::DR3D,           XML_EXTRUDE,    XML_TOK_3DSCENE_3DEXTRUDE   },
             XML_TOKEN_MAP_END
         };
 
@@ -260,8 +260,8 @@ const SvXMLTokenMap& XMLShapeImportHelper::Get3DObjectAttrTokenMap()
     {
         static const SvXMLTokenMapEntry a3DObjectAttrTokenMap[] =
         {
-            { XML_NAMESPACE_DRAW,           XML_STYLE_NAME,         XML_TOK_3DOBJECT_DRAWSTYLE_NAME     },
-            { XML_NAMESPACE_DR3D,           XML_TRANSFORM,          XML_TOK_3DOBJECT_TRANSFORM          },
+            { XmlNamespace::DRAW,           XML_STYLE_NAME,         XML_TOK_3DOBJECT_DRAWSTYLE_NAME     },
+            { XmlNamespace::DR3D,           XML_TRANSFORM,          XML_TOK_3DOBJECT_TRANSFORM          },
             XML_TOKEN_MAP_END
         };
 
@@ -277,8 +277,8 @@ const SvXMLTokenMap& XMLShapeImportHelper::Get3DPolygonBasedAttrTokenMap()
     {
         static const SvXMLTokenMapEntry a3DPolygonBasedAttrTokenMap[] =
         {
-            { XML_NAMESPACE_SVG,            XML_VIEWBOX,            XML_TOK_3DPOLYGONBASED_VIEWBOX      },
-            { XML_NAMESPACE_SVG,            XML_D,                  XML_TOK_3DPOLYGONBASED_D            },
+            { XmlNamespace::SVG,            XML_VIEWBOX,            XML_TOK_3DPOLYGONBASED_VIEWBOX      },
+            { XmlNamespace::SVG,            XML_D,                  XML_TOK_3DPOLYGONBASED_D            },
             XML_TOKEN_MAP_END
         };
 
@@ -294,8 +294,8 @@ const SvXMLTokenMap& XMLShapeImportHelper::Get3DCubeObjectAttrTokenMap()
     {
         static const SvXMLTokenMapEntry a3DCubeObjectAttrTokenMap[] =
         {
-            { XML_NAMESPACE_DR3D,           XML_MIN_EDGE,           XML_TOK_3DCUBEOBJ_MINEDGE   },
-            { XML_NAMESPACE_DR3D,           XML_MAX_EDGE,           XML_TOK_3DCUBEOBJ_MAXEDGE   },
+            { XmlNamespace::DR3D,           XML_MIN_EDGE,           XML_TOK_3DCUBEOBJ_MINEDGE   },
+            { XmlNamespace::DR3D,           XML_MAX_EDGE,           XML_TOK_3DCUBEOBJ_MAXEDGE   },
             XML_TOKEN_MAP_END
         };
 
@@ -311,8 +311,8 @@ const SvXMLTokenMap& XMLShapeImportHelper::Get3DSphereObjectAttrTokenMap()
     {
         static const SvXMLTokenMapEntry a3DSphereObjectAttrTokenMap[] =
         {
-            { XML_NAMESPACE_DR3D,           XML_CENTER,             XML_TOK_3DSPHEREOBJ_CENTER  },
-            { XML_NAMESPACE_DR3D,           XML_SIZE,               XML_TOK_3DSPHEREOBJ_SIZE    },
+            { XmlNamespace::DR3D,           XML_CENTER,             XML_TOK_3DSPHEREOBJ_CENTER  },
+            { XmlNamespace::DR3D,           XML_SIZE,               XML_TOK_3DSPHEREOBJ_SIZE    },
             XML_TOKEN_MAP_END
         };
 
@@ -328,10 +328,10 @@ const SvXMLTokenMap& XMLShapeImportHelper::Get3DLightAttrTokenMap()
     {
         static const SvXMLTokenMapEntry a3DLightAttrTokenMap[] =
         {
-            { XML_NAMESPACE_DR3D,   XML_DIFFUSE_COLOR,      XML_TOK_3DLIGHT_DIFFUSE_COLOR       },
-            { XML_NAMESPACE_DR3D,   XML_DIRECTION,          XML_TOK_3DLIGHT_DIRECTION           },
-            { XML_NAMESPACE_DR3D,   XML_ENABLED,            XML_TOK_3DLIGHT_ENABLED             },
-            { XML_NAMESPACE_DR3D,   XML_SPECULAR,           XML_TOK_3DLIGHT_SPECULAR            },
+            { XmlNamespace::DR3D,   XML_DIFFUSE_COLOR,      XML_TOK_3DLIGHT_DIFFUSE_COLOR       },
+            { XmlNamespace::DR3D,   XML_DIRECTION,          XML_TOK_3DLIGHT_DIRECTION           },
+            { XmlNamespace::DR3D,   XML_ENABLED,            XML_TOK_3DLIGHT_ENABLED             },
+            { XmlNamespace::DR3D,   XML_SPECULAR,           XML_TOK_3DLIGHT_SPECULAR            },
             XML_TOKEN_MAP_END
         };
 
diff --git a/xmloff/source/draw/ximp3dscene.cxx b/xmloff/source/draw/ximp3dscene.cxx
index 55625f18a027..9ad37d44a049 100644
--- a/xmloff/source/draw/ximp3dscene.cxx
+++ b/xmloff/source/draw/ximp3dscene.cxx
@@ -176,17 +176,17 @@ SvXMLImportContextRef SdXML3DSceneShapeContext::CreateChildContext( sal_uInt16 n
     SvXMLImportContextRef xContext;
 
     // #i68101#
-    if( nPrefix == XML_NAMESPACE_SVG &&
+    if( nPrefix == XmlNamespace::SVG &&
         (IsXMLToken( rLocalName, XML_TITLE ) || IsXMLToken( rLocalName, XML_DESC ) ) )
     {
         xContext = new SdXMLDescriptionContext( GetImport(), nPrefix, rLocalName, xAttrList, mxShape );
     }
-    else if( nPrefix == XML_NAMESPACE_OFFICE && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
+    else if( nPrefix == XmlNamespace::OFFICE && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
     {
         xContext = new SdXMLEventsContext( GetImport(), nPrefix, rLocalName, xAttrList, mxShape );
     }
     // look for local light context first
-    else if(nPrefix == XML_NAMESPACE_DR3D && IsXMLToken( rLocalName, XML_LIGHT ) )
+    else if(nPrefix == XmlNamespace::DR3D && IsXMLToken( rLocalName, XML_LIGHT ) )
     {
         // dr3d:light inside dr3d:scene context
         xContext = create3DLightContext( nPrefix, rLocalName, xAttrList );
@@ -235,7 +235,7 @@ SvXMLImportContext * SdXML3DSceneAttributesHelper::create3DLightContext( sal_uIn
 /** this should be called for each scene attribute */
 void SdXML3DSceneAttributesHelper::processSceneAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_DR3D != nPrefix )
+    if( XmlNamespace::DR3D != nPrefix )
         return;
 
     if( IsXMLToken( rLocalName, XML_TRANSFORM ) )
diff --git a/xmloff/source/draw/ximpgrp.cxx b/xmloff/source/draw/ximpgrp.cxx
index 9cc2aff111e8..33c37e7237a9 100644
--- a/xmloff/source/draw/ximpgrp.cxx
+++ b/xmloff/source/draw/ximpgrp.cxx
@@ -49,16 +49,16 @@ SvXMLImportContextRef SdXMLGroupShapeContext::CreateChildContext( sal_uInt16 nPr
     SvXMLImportContextRef xContext;
 
     // #i68101#
-    if( nPrefix == XML_NAMESPACE_SVG &&
+    if( nPrefix == XmlNamespace::SVG &&
         (IsXMLToken( rLocalName, XML_TITLE ) || IsXMLToken( rLocalName, XML_DESC ) ) )
     {
         xContext = new SdXMLDescriptionContext( GetImport(), nPrefix, rLocalName, xAttrList, mxShape );
     }
-    else if( nPrefix == XML_NAMESPACE_OFFICE && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
+    else if( nPrefix == XmlNamespace::OFFICE && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
     {
         xContext = new SdXMLEventsContext( GetImport(), nPrefix, rLocalName, xAttrList, mxShape );
     }
-    else if( nPrefix == XML_NAMESPACE_DRAW && IsXMLToken( rLocalName, XML_GLUE_POINT ) )
+    else if( nPrefix == XmlNamespace::DRAW && IsXMLToken( rLocalName, XML_GLUE_POINT ) )
     {
         addGluePoint( xAttrList );
     }
diff --git a/xmloff/source/draw/ximplink.cxx b/xmloff/source/draw/ximplink.cxx
index db28b619e026..214b02f85f3e 100644
--- a/xmloff/source/draw/ximplink.cxx
+++ b/xmloff/source/draw/ximplink.cxx
@@ -37,7 +37,7 @@ SdXMLShapeLinkContext::SdXMLShapeLinkContext( SvXMLImport& rImport, sal_uInt16 n
         OUString sAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         sal_uInt16 nPrefix = rImport.GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
-        if( (nPrefix == XML_NAMESPACE_XLINK) && IsXMLToken( aLocalName, XML_HREF ) )
+        if( (nPrefix == XmlNamespace::XLINK) && IsXMLToken( aLocalName, XML_HREF ) )
         {
             assert(msHyperlink.pData);
             msHyperlink = xAttrList->getValueByIndex( i );
diff --git a/xmloff/source/draw/ximppage.cxx b/xmloff/source/draw/ximppage.cxx
index a089f45b03f3..0272a1687f73 100644
--- a/xmloff/source/draw/ximppage.cxx
+++ b/xmloff/source/draw/ximppage.cxx
@@ -144,7 +144,7 @@ css::uno::Reference< css::xml::sax::XFastContextHandler > DrawAnnotationContext:
 {
     if( mxAnnotation.is() )
     {
-        if (IsTokenInNamespace(nElement, XML_NAMESPACE_DC))
+        if (IsTokenInNamespace(nElement, XmlNamespace::DC))
         {
             if( (nElement & TOKEN_MASK) == XML_CREATOR )
                 return new XMLStringBufferImportContext(GetImport(), maAuthorBuffer);
@@ -167,13 +167,13 @@ SvXMLImportContextRef DrawAnnotationContext::CreateChildContext( sal_uInt16 nPre
 
     if( mxAnnotation.is() )
     {
-        if( XML_NAMESPACE_DC == nPrefix )
+        if( XmlNamespace::DC == nPrefix )
         {
             // handled in createFastChildContext
         }
-        else if (((XML_NAMESPACE_TEXT == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix)
+        else if (((XmlNamespace::TEXT == nPrefix || XmlNamespace::LO_EXT == nPrefix)
                     && IsXMLToken(rLocalName, XML_SENDER_INITIALS))
-                 || (XML_NAMESPACE_META == nPrefix
+                 || (XmlNamespace::META == nPrefix
                      && IsXMLToken(rLocalName, XML_CREATOR_INITIALS)))
         {
             // handled in createFastChildContext
@@ -289,16 +289,16 @@ SvXMLImportContextRef SdXMLGenericPageContext::CreateChildContext( sal_uInt16 nP
 {
     SvXMLImportContextRef xContext;
 
-    if( nPrefix == XML_NAMESPACE_PRESENTATION && IsXMLToken( rLocalName, XML_ANIMATIONS ) )
+    if( nPrefix == XmlNamespace::PRESENTATION && IsXMLToken( rLocalName, XML_ANIMATIONS ) )
     {
         // handled in createFastChildContext
     }
-    else if( nPrefix == XML_NAMESPACE_OFFICE && IsXMLToken( rLocalName, XML_FORMS ) )
+    else if( nPrefix == XmlNamespace::OFFICE && IsXMLToken( rLocalName, XML_FORMS ) )
     {
         if( GetImport().IsFormsSupported() )
             xContext = xmloff::OFormLayerXMLImport::createOfficeFormsContext( GetImport(), nPrefix, rLocalName );
     }
-    else if( ((nPrefix == XML_NAMESPACE_OFFICE) || (nPrefix == XML_NAMESPACE_OFFICE_EXT)) && IsXMLToken( rLocalName, XML_ANNOTATION ) )
+    else if( ((nPrefix == XmlNamespace::OFFICE) || (nPrefix == XmlNamespace::OFFICE_EXT)) && IsXMLToken( rLocalName, XML_ANNOTATION ) )
     {
         // handled in createFastChildContext
     }
diff --git a/xmloff/source/draw/ximpshap.cxx b/xmloff/source/draw/ximpshap.cxx
index 52a635a82a7a..157ae437bd23 100644
--- a/xmloff/source/draw/ximpshap.cxx
+++ b/xmloff/source/draw/ximpshap.cxx
@@ -178,28 +178,28 @@ SvXMLImportContextRef SdXMLShapeContext::CreateChildContext( sal_uInt16 p_nPrefi
     SvXMLImportContextRef xContext;
 
     // #i68101#
-    if( p_nPrefix == XML_NAMESPACE_SVG &&
+    if( p_nPrefix == XmlNamespace::SVG &&
         (IsXMLToken( rLocalName, XML_TITLE ) || IsXMLToken( rLocalName, XML_DESC ) ) )
     {
         xContext = new SdXMLDescriptionContext( GetImport(), p_nPrefix, rLocalName, xAttrList, mxShape );
     }
-    else if( p_nPrefix == XML_NAMESPACE_LO_EXT && IsXMLToken( rLocalName, XML_SIGNATURELINE ) )
+    else if( p_nPrefix == XmlNamespace::LO_EXT && IsXMLToken( rLocalName, XML_SIGNATURELINE ) )
     {
         xContext = new SignatureLineContext( GetImport(), p_nPrefix, rLocalName, xAttrList, mxShape );
     }
-    else if( p_nPrefix == XML_NAMESPACE_LO_EXT && IsXMLToken( rLocalName, XML_QRCODE ) )
+    else if( p_nPrefix == XmlNamespace::LO_EXT && IsXMLToken( rLocalName, XML_QRCODE ) )
     {
         xContext = new QRCodeContext( GetImport(), p_nPrefix, rLocalName, xAttrList, mxShape );
     }
-    else if( p_nPrefix == XML_NAMESPACE_OFFICE && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
+    else if( p_nPrefix == XmlNamespace::OFFICE && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
     {
         xContext = new SdXMLEventsContext( GetImport(), p_nPrefix, rLocalName, xAttrList, mxShape );
     }
-    else if( p_nPrefix == XML_NAMESPACE_DRAW && IsXMLToken( rLocalName, XML_GLUE_POINT ) )
+    else if( p_nPrefix == XmlNamespace::DRAW && IsXMLToken( rLocalName, XML_GLUE_POINT ) )
     {
         addGluePoint( xAttrList );
     }
-    else if( p_nPrefix == XML_NAMESPACE_DRAW && IsXMLToken( rLocalName, XML_THUMBNAIL ) )
+    else if( p_nPrefix == XmlNamespace::DRAW && IsXMLToken( rLocalName, XML_THUMBNAIL ) )
     {
         // search attributes for xlink:href
         sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
@@ -209,7 +209,7 @@ SvXMLImportContextRef SdXMLShapeContext::CreateChildContext( sal_uInt16 p_nPrefi
             OUString aLocalName;
             sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
 
-            if( nPrefix == XML_NAMESPACE_XLINK )
+            if( nPrefix == XmlNamespace::XLINK )
             {
                 if( IsXMLToken( aLocalName, XML_HREF ) )
                 {
@@ -289,7 +289,7 @@ void SdXMLShapeContext::addGluePoint( const uno::Reference< xml::sax::XAttribute
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
         const OUString sValue( xAttrList->getValueByIndex( i ) );
 
-        if( nPrefix == XML_NAMESPACE_SVG )
+        if( nPrefix == XmlNamespace::SVG )
         {
             if( IsXMLToken( aLocalName, XML_X ) )
             {
@@ -302,7 +302,7 @@ void SdXMLShapeContext::addGluePoint( const uno::Reference< xml::sax::XAttribute
                         aGluePoint.Position.Y, sValue);
             }
         }
-        else if( nPrefix == XML_NAMESPACE_DRAW )
+        else if( nPrefix == XmlNamespace::DRAW )
         {
             if( IsXMLToken( aLocalName, XML_ID ) )
             {
@@ -804,7 +804,7 @@ void SdXMLShapeContext::SetThumbnail()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( (XML_NAMESPACE_DRAW == nPrefix) || (XML_NAMESPACE_DRAW_EXT == nPrefix) )
+    if( (XmlNamespace::DRAW == nPrefix) || (XmlNamespace::DRAW_EXT == nPrefix) )
     {
         if( IsXMLToken( rLocalName, XML_ZINDEX ) )
         {
@@ -840,7 +840,7 @@ void SdXMLShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rL
             mbPrintable = IsXMLToken( rValue, XML_ALWAYS ) || IsXMLToken( rValue, XML_PRINTER );
         }
     }
-    else if( XML_NAMESPACE_PRESENTATION == nPrefix )
+    else if( XmlNamespace::PRESENTATION == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_USER_TRANSFORMED ) )
         {
@@ -862,7 +862,7 @@ void SdXMLShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rL
             mnStyleFamily = XmlStyleFamily::SD_PRESENTATION_ID;
         }
     }
-    else if( XML_NAMESPACE_SVG == nPrefix )
+    else if( XmlNamespace::SVG == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_X ) )
         {
@@ -899,7 +899,7 @@ void SdXMLShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rL
             mnTransform.SetString(rValue, GetImport().GetMM100UnitConverter());
         }
     }
-    else if (nPrefix == XML_NAMESPACE_STYLE)
+    else if (nPrefix == XmlNamespace::STYLE)
     {
         sal_Int32 nTmp;
         if (IsXMLToken(rLocalName, XML_REL_WIDTH))
@@ -913,7 +913,7 @@ void SdXMLShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rL
                 mnRelHeight = static_cast<sal_Int16>(nTmp);
         }
     }
-    else if( (XML_NAMESPACE_NONE == nPrefix) || (XML_NAMESPACE_XML == nPrefix) )
+    else if( (XmlNamespace::NONE == nPrefix) || (XmlNamespace::XML == nPrefix) )
     {
         if( IsXMLToken( rLocalName, XML_ID ) )
         {
@@ -961,7 +961,7 @@ SdXMLRectShapeContext::~SdXMLRectShapeContext()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLRectShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_DRAW == nPrefix )
+    if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_CORNER_RADIUS ) )
         {
@@ -1029,7 +1029,7 @@ SdXMLLineShapeContext::~SdXMLLineShapeContext()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLLineShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_SVG == nPrefix )
+    if( XmlNamespace::SVG == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_X1 ) )
         {
@@ -1145,7 +1145,7 @@ SdXMLEllipseShapeContext::~SdXMLEllipseShapeContext()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLEllipseShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_SVG == nPrefix )
+    if( XmlNamespace::SVG == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_RX ) )
         {
@@ -1180,7 +1180,7 @@ void SdXMLEllipseShapeContext::processAttribute( sal_uInt16 nPrefix, const OUStr
             return;
         }
     }
-    else if( XML_NAMESPACE_DRAW == nPrefix )
+    else if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_KIND ) )
         {
@@ -1258,7 +1258,7 @@ SdXMLPolygonShapeContext::SdXMLPolygonShapeContext(
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLPolygonShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_SVG == nPrefix )
+    if( XmlNamespace::SVG == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_VIEWBOX ) )
         {
@@ -1266,7 +1266,7 @@ void SdXMLPolygonShapeContext::processAttribute( sal_uInt16 nPrefix, const OUStr
             return;
         }
     }
-    else if( XML_NAMESPACE_DRAW == nPrefix )
+    else if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_POINTS ) )
         {
@@ -1371,7 +1371,7 @@ SdXMLPathShapeContext::~SdXMLPathShapeContext()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLPathShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_SVG == nPrefix )
+    if( XmlNamespace::SVG == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_VIEWBOX ) )
         {
@@ -1525,7 +1525,7 @@ SdXMLTextBoxShapeContext::~SdXMLTextBoxShapeContext()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLTextBoxShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_DRAW == nPrefix )
+    if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_CORNER_RADIUS ) )
         {
@@ -1712,7 +1712,7 @@ SdXMLControlShapeContext::~SdXMLControlShapeContext()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLControlShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_DRAW == nPrefix )
+    if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_CONTROL ) )
         {
@@ -1804,7 +1804,7 @@ void SdXMLConnectorShapeContext::processAttribute( sal_uInt16 nPrefix, const OUS
 {
     switch( nPrefix )
     {
-    case XML_NAMESPACE_DRAW:
+    case XmlNamespace::DRAW:
     {
         if( IsXMLToken( rLocalName, XML_START_SHAPE ) )
         {
@@ -1860,7 +1860,7 @@ void SdXMLConnectorShapeContext::processAttribute( sal_uInt16 nPrefix, const OUS
     }
     break;
 
-    case XML_NAMESPACE_SVG:
+    case XmlNamespace::SVG:
     {
         if( IsXMLToken( rLocalName, XML_X1 ) )
         {
@@ -2086,7 +2086,7 @@ void SdXMLMeasureShapeContext::processAttribute( sal_uInt16 nPrefix, const OUStr
 {
     switch( nPrefix )
     {
-    case XML_NAMESPACE_SVG:
+    case XmlNamespace::SVG:
     {
         if( IsXMLToken( rLocalName, XML_X1 ) )
         {
@@ -2188,7 +2188,7 @@ SdXMLPageShapeContext::~SdXMLPageShapeContext()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLPageShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_DRAW == nPrefix )
+    if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_PAGE_NUMBER ) )
         {
@@ -2331,7 +2331,7 @@ void SdXMLCaptionShapeContext::StartElement(const uno::Reference< xml::sax::XAtt
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLCaptionShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_DRAW == nPrefix )
+    if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_CAPTION_POINT_X ) )
         {
@@ -2370,7 +2370,7 @@ SdXMLGraphicObjectShapeContext::SdXMLGraphicObjectShapeContext(
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLGraphicObjectShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_XLINK == nPrefix )
+    if( XmlNamespace::XLINK == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_HREF ) )
         {
@@ -2480,7 +2480,7 @@ SvXMLImportContextRef SdXMLGraphicObjectShapeContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( (XML_NAMESPACE_OFFICE == nPrefix) &&
+    if( (XmlNamespace::OFFICE == nPrefix) &&
              xmloff::token::IsXMLToken( rLocalName, xmloff::token::XML_BINARY_DATA ) )
     {
         if( maURL.isEmpty() && !mxBase64Stream.is() )
@@ -2550,7 +2550,7 @@ void SdXMLChartShapeContext::StartElement(const uno::Reference< xml::sax::XAttri
             uno::Reference< frame::XModel > xChartModel;
             if( aAny >>= xChartModel )
             {
-                mxChartContext.set( GetImport().GetChartImport()->CreateChartContext( GetImport(), XML_NAMESPACE_SVG, GetXMLToken(XML_CHART), xChartModel, xAttrList ) );
+                mxChartContext.set( GetImport().GetChartImport()->CreateChartContext( GetImport(), XmlNamespace::SVG, GetXMLToken(XML_CHART), xChartModel, xAttrList ) );
             }
         }
     }
@@ -2749,14 +2749,14 @@ void SdXMLObjectShapeContext::processAttribute( sal_uInt16 nPrefix, const OUStri
 {
     switch( nPrefix )
     {
-    case XML_NAMESPACE_DRAW:
+    case XmlNamespace::DRAW:
         if( IsXMLToken( rLocalName, XML_CLASS_ID ) )
         {
             maCLSID = rValue;
             return;
         }
         break;
-    case XML_NAMESPACE_XLINK:
+    case XmlNamespace::XLINK:
         if( IsXMLToken( rLocalName, XML_HREF ) )
         {
             maHref = rValue;
@@ -2774,7 +2774,7 @@ SvXMLImportContextRef SdXMLObjectShapeContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if((XML_NAMESPACE_OFFICE == nPrefix) && IsXMLToken(rLocalName, XML_BINARY_DATA))
+    if((XmlNamespace::OFFICE == nPrefix) && IsXMLToken(rLocalName, XML_BINARY_DATA))
     {
         mxBase64Stream = GetImport().GetStreamForEmbeddedObjectURLFromBase64();
         if( mxBase64Stream.is() )
@@ -2782,8 +2782,8 @@ SvXMLImportContextRef SdXMLObjectShapeContext::CreateChildContext(
                                                 rLocalName, xAttrList,
                                                 mxBase64Stream );
     }
-    else if( ((XML_NAMESPACE_OFFICE == nPrefix) && IsXMLToken(rLocalName, XML_DOCUMENT)) ||
-                ((XML_NAMESPACE_MATH == nPrefix) && IsXMLToken(rLocalName, XML_MATH)) )
+    else if( ((XmlNamespace::OFFICE == nPrefix) && IsXMLToken(rLocalName, XML_DOCUMENT)) ||
+                ((XmlNamespace::MATH == nPrefix) && IsXMLToken(rLocalName, XML_MATH)) )
     {
         rtl::Reference<XMLEmbeddedObjectImportContext> xEContext(
             new XMLEmbeddedObjectImportContext(GetImport(), nPrefix,
@@ -2844,7 +2844,7 @@ void SdXMLAppletShapeContext::processAttribute( sal_uInt16 nPrefix, const OUStri
 {
     switch( nPrefix )
     {
-    case XML_NAMESPACE_DRAW:
+    case XmlNamespace::DRAW:
         if( IsXMLToken( rLocalName, XML_APPLET_NAME ) )
         {
             maAppletName = rValue;
@@ -2861,7 +2861,7 @@ void SdXMLAppletShapeContext::processAttribute( sal_uInt16 nPrefix, const OUStri
             return;
         }
         break;
-    case XML_NAMESPACE_XLINK:
+    case XmlNamespace::XLINK:
         if( IsXMLToken( rLocalName, XML_HREF ) )
         {
             maHref = GetImport().GetAbsoluteReference(rValue);
@@ -2921,7 +2921,7 @@ void SdXMLAppletShapeContext::EndElement()
 
 SvXMLImportContextRef SdXMLAppletShapeContext::CreateChildContext( sal_uInt16 p_nPrefix, const OUString& rLocalName, const css::uno::Reference< css::xml::sax::XAttributeList>& xAttrList )
 {
-    if( p_nPrefix == XML_NAMESPACE_DRAW && IsXMLToken( rLocalName, XML_PARAM ) )
+    if( p_nPrefix == XmlNamespace::DRAW && IsXMLToken( rLocalName, XML_PARAM ) )
     {
         OUString aParamName, aParamValue;
         const sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
@@ -2933,7 +2933,7 @@ SvXMLImportContextRef SdXMLAppletShapeContext::CreateChildContext( sal_uInt16 p_
             sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName(rAttrName, &aLocalName);
             const OUString aValue( xAttrList->getValueByIndex(a) );
 
-            if( nPrefix == XML_NAMESPACE_DRAW )
+            if( nPrefix == XmlNamespace::DRAW )
             {
                 if( IsXMLToken( aLocalName, XML_NAME ) )
                 {
@@ -2985,7 +2985,7 @@ void SdXMLPluginShapeContext::StartElement( const css::uno::Reference< css::xml:
         OUString    aLocalName;
         sal_uInt16  nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( xAttrList->getNameByIndex( n ), &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_DRAW && IsXMLToken( aLocalName, XML_MIME_TYPE ) )
+        if( nPrefix == XmlNamespace::DRAW && IsXMLToken( aLocalName, XML_MIME_TYPE ) )
         {
             if( xAttrList->getValueByIndex( n ) == "application/vnd.sun.star.media" )
                 mbMedia = true;
@@ -3061,14 +3061,14 @@ void SdXMLPluginShapeContext::processAttribute( sal_uInt16 nPrefix, const OUStri
 {
     switch( nPrefix )
     {
-    case XML_NAMESPACE_DRAW:
+    case XmlNamespace::DRAW:
         if( IsXMLToken( rLocalName, XML_MIME_TYPE ) )
         {
             maMimeType = rValue;
             return;
         }
         break;
-    case XML_NAMESPACE_XLINK:
+    case XmlNamespace::XLINK:
         if( IsXMLToken( rLocalName, XML_HREF ) )
         {
             maHref = lcl_GetMediaReference(GetImport(), rValue);
@@ -3187,7 +3187,7 @@ void SdXMLPluginShapeContext::EndElement()
 
 SvXMLImportContextRef SdXMLPluginShapeContext::CreateChildContext( sal_uInt16 p_nPrefix, const OUString& rLocalName, const css::uno::Reference< css::xml::sax::XAttributeList>& xAttrList )
 {
-    if( p_nPrefix == XML_NAMESPACE_DRAW && IsXMLToken( rLocalName, XML_PARAM ) )
+    if( p_nPrefix == XmlNamespace::DRAW && IsXMLToken( rLocalName, XML_PARAM ) )
     {
         OUString aParamName, aParamValue;
         const sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
@@ -3199,7 +3199,7 @@ SvXMLImportContextRef SdXMLPluginShapeContext::CreateChildContext( sal_uInt16 p_
             sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName(rAttrName, &aLocalName);
             const OUString aValue( xAttrList->getValueByIndex(a) );
 
-            if( nPrefix == XML_NAMESPACE_DRAW )
+            if( nPrefix == XmlNamespace::DRAW )
             {
                 if( IsXMLToken( aLocalName, XML_NAME ) )
                 {
@@ -3277,14 +3277,14 @@ void SdXMLFloatingFrameShapeContext::processAttribute( sal_uInt16 nPrefix, const
 {
     switch( nPrefix )
     {
-    case XML_NAMESPACE_DRAW:
+    case XmlNamespace::DRAW:
         if( IsXMLToken( rLocalName, XML_FRAME_NAME ) )
         {
             maFrameName = rValue;
             return;
         }
         break;
-    case XML_NAMESPACE_XLINK:
+    case XmlNamespace::XLINK:
         if( IsXMLToken( rLocalName, XML_HREF ) )
         {
             maHref = GetImport().GetAbsoluteReference(rValue);
@@ -3462,7 +3462,7 @@ SvXMLImportContextRef SdXMLFrameShapeContext::CreateChildContext( sal_uInt16 nPr
             addContent(*mxImplContext);
         }
     }
-    else if(getSupportsMultipleContents() && XML_NAMESPACE_DRAW == nPrefix && IsXMLToken(rLocalName, XML_IMAGE))
+    else if(getSupportsMultipleContents() && XmlNamespace::DRAW == nPrefix && IsXMLToken(rLocalName, XML_IMAGE))
     {
         // read another image
         xContext = GetImport().GetShapeImport()->CreateFrameChildContext(
@@ -3475,7 +3475,7 @@ SvXMLImportContextRef SdXMLFrameShapeContext::CreateChildContext( sal_uInt16 nPr
         }
     }
     else if( mbSupportsReplacement && !mxReplImplContext.is() &&
-             XML_NAMESPACE_DRAW == nPrefix &&
+             XmlNamespace::DRAW == nPrefix &&
              IsXMLToken( rLocalName, XML_IMAGE ) )
     {
         // read replacement image
@@ -3495,10 +3495,10 @@ SvXMLImportContextRef SdXMLFrameShapeContext::CreateChildContext( sal_uInt16 nPr
         }
     }
     else if(
-            ( nPrefix == XML_NAMESPACE_SVG &&   // #i68101#
+            ( nPrefix == XmlNamespace::SVG &&   // #i68101#
                 (IsXMLToken( rLocalName, XML_TITLE ) || IsXMLToken( rLocalName, XML_DESC ) ) ) ||
-             (nPrefix == XML_NAMESPACE_OFFICE && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) ) ||
-             (nPrefix == XML_NAMESPACE_DRAW && (IsXMLToken( rLocalName, XML_GLUE_POINT ) ||
+             (nPrefix == XmlNamespace::OFFICE && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) ) ||
+             (nPrefix == XmlNamespace::DRAW && (IsXMLToken( rLocalName, XML_GLUE_POINT ) ||
                                                 IsXMLToken( rLocalName, XML_THUMBNAIL ) ) ) )
     {
         if (getSupportsMultipleContents())
@@ -3510,7 +3510,7 @@ SvXMLImportContextRef SdXMLFrameShapeContext::CreateChildContext( sal_uInt16 nPr
         xContext = dynamic_cast<SdXMLShapeContext&>(*pImplContext).CreateChildContext( nPrefix,
                                                                         rLocalName, xAttrList );
     }
-    else if ( (XML_NAMESPACE_DRAW == nPrefix) && IsXMLToken( rLocalName, XML_IMAGE_MAP ) )
+    else if ( (XmlNamespace::DRAW == nPrefix) && IsXMLToken( rLocalName, XML_IMAGE_MAP ) )
     {
         if (getSupportsMultipleContents())
         {   // tdf#103567 ensure props are set on surviving shape
@@ -3527,7 +3527,7 @@ SvXMLImportContextRef SdXMLFrameShapeContext::CreateChildContext( sal_uInt16 nPr
             }
         }
     }
-    else if ((XML_NAMESPACE_LO_EXT == nPrefix) && IsXMLToken(rLocalName, XML_SIGNATURELINE))
+    else if ((XmlNamespace::LO_EXT == nPrefix) && IsXMLToken(rLocalName, XML_SIGNATURELINE))
     {
         SdXMLShapeContext* pSContext = dynamic_cast<SdXMLShapeContext*>(mxImplContext.get());
         if (pSContext)
@@ -3540,7 +3540,7 @@ SvXMLImportContextRef SdXMLFrameShapeContext::CreateChildContext( sal_uInt16 nPr
             }
         }
     }
-    else if ((XML_NAMESPACE_LO_EXT == nPrefix) && IsXMLToken(rLocalName, XML_QRCODE))
+    else if ((XmlNamespace::LO_EXT == nPrefix) && IsXMLToken(rLocalName, XML_QRCODE))
     {
         SdXMLShapeContext* pSContext = dynamic_cast<SdXMLShapeContext*>(mxImplContext.get());
         if (pSContext)
@@ -3586,7 +3586,7 @@ void SdXMLFrameShapeContext::EndElement()
             OUString aLocalName;
             sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName(mxAttrList->getNameByIndex(a), &aLocalName);
 
-            if( nPrefix == XML_NAMESPACE_PRESENTATION )
+            if( nPrefix == XmlNamespace::PRESENTATION )
             {
                 if( IsXMLToken( aLocalName, XML_PLACEHOLDER ) )
                 {
@@ -3622,7 +3622,7 @@ void SdXMLFrameShapeContext::EndElement()
             }
 
             mxImplContext = GetImport().GetShapeImport()->CreateFrameChildContext(
-                    GetImport(), XML_NAMESPACE_DRAW, GetXMLToken( eToken ), mxAttrList, mxShapes, xEmpty );
+                    GetImport(), XmlNamespace::DRAW, GetXMLToken( eToken ), mxAttrList, mxShapes, xEmpty );
 
             if( mxImplContext.is() )
             {
@@ -3643,12 +3643,12 @@ void SdXMLFrameShapeContext::processAttribute( sal_uInt16 nPrefix,
 
     switch ( nPrefix )
     {
-        case XML_NAMESPACE_DRAW :
-        case XML_NAMESPACE_DRAW_EXT :
+        case XmlNamespace::DRAW :
+        case XmlNamespace::DRAW_EXT :
             bId = IsXMLToken( rLocalName, XML_ID );
             break;
-        case XML_NAMESPACE_NONE :
-        case XML_NAMESPACE_XML :
+        case XmlNamespace::NONE :
+        case XmlNamespace::XML :
             bId = IsXMLToken( rLocalName, XML_ID );
             break;
     }
@@ -3674,7 +3674,7 @@ SdXMLCustomShapeContext::SdXMLCustomShapeContext(
         const OUString& rAttrName = xAttrList->getNameByIndex(i);
         OUString aLocalName;
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName(rAttrName, &aLocalName);
-        if (nPrefix == XML_NAMESPACE_DRAW && IsXMLToken(aLocalName, XML_STYLE_NAME))
+        if (nPrefix == XmlNamespace::DRAW && IsXMLToken(aLocalName, XML_STYLE_NAME))
         {
             OUString aStyleName = xAttrList->getValueByIndex(i);
             if(!aStyleName.isEmpty())
@@ -3699,7 +3699,7 @@ SdXMLCustomShapeContext::~SdXMLCustomShapeContext()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLCustomShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( XML_NAMESPACE_DRAW == nPrefix )
+    if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_ENGINE ) )
         {
@@ -3878,7 +3878,7 @@ SvXMLImportContextRef SdXMLCustomShapeContext::CreateChildContext(
     const uno::Reference<xml::sax::XAttributeList>& xAttrList )
 {
     SvXMLImportContextRef xContext;
-    if ( XML_NAMESPACE_DRAW == nPrefix )
+    if ( XmlNamespace::DRAW == nPrefix )
     {
         if ( IsXMLToken( rLocalName, XML_ENHANCED_GEOMETRY ) )
         {
@@ -4003,7 +4003,7 @@ void SdXMLTableShapeContext::EndElement()
 // this is called from the parent group for each unparsed attribute in the attribute list
 void SdXMLTableShapeContext::processAttribute( sal_uInt16 nPrefix, const OUString& rLocalName, const OUString& rValue )
 {
-    if( nPrefix == XML_NAMESPACE_TABLE )
+    if( nPrefix == XmlNamespace::TABLE )
     {
         if( IsXMLToken( rLocalName, XML_TEMPLATE_NAME ) )
         {
@@ -4031,7 +4031,7 @@ void SdXMLTableShapeContext::processAttribute( sal_uInt16 nPrefix, const OUStrin
 
 SvXMLImportContextRef SdXMLTableShapeContext::CreateChildContext( sal_uInt16 nPrefix, const OUString& rLocalName, const uno::Reference<xml::sax::XAttributeList>& xAttrList )
 {
-    if( mxTableImportContext.is() && (nPrefix == XML_NAMESPACE_TABLE) )
+    if( mxTableImportContext.is() && (nPrefix == XmlNamespace::TABLE) )
         return mxTableImportContext->CreateChildContext(nPrefix, rLocalName, xAttrList);
     else
         return SdXMLShapeContext::CreateChildContext(nPrefix, rLocalName, xAttrList);
diff --git a/xmloff/source/draw/ximpstyl.cxx b/xmloff/source/draw/ximpstyl.cxx
index 11d249726d21..4f52875eead7 100644
--- a/xmloff/source/draw/ximpstyl.cxx
+++ b/xmloff/source/draw/ximpstyl.cxx
@@ -109,7 +109,7 @@ SvXMLImportContextRef SdXMLDrawingPagePropertySetContext::CreateChildContext(
             OUString aLocalName;
             sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName(xAttrList->getNameByIndex(i), &aLocalName);
 
-            if( (nPrefix == XML_NAMESPACE_XLINK) && IsXMLToken( aLocalName, XML_HREF ) )
+            if( (nPrefix == XmlNamespace::XLINK) && IsXMLToken( aLocalName, XML_HREF ) )
             {
                 uno::Any aAny( GetImport().GetAbsoluteReference( xAttrList->getValueByIndex(i) ) );
                 XMLPropertyState aPropState( rProp.mnIndex, aAny );
@@ -210,7 +210,7 @@ SvXMLImportContextRef SdXMLDrawingPageStyleContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix &&
+    if( XmlNamespace::STYLE == nPrefix &&
         IsXMLToken( rLocalName, XML_DRAWING_PAGE_PROPERTIES ) )
     {
         rtl::Reference < SvXMLImportPropertyMapper > xImpPrMap =
@@ -423,7 +423,7 @@ SvXMLImportContextRef SdXMLPageMasterContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if(nPrefix == XML_NAMESPACE_STYLE && IsXMLToken( rLocalName, XML_PAGE_LAYOUT_PROPERTIES) )
+    if(nPrefix == XmlNamespace::STYLE && IsXMLToken( rLocalName, XML_PAGE_LAYOUT_PROPERTIES) )
     {
         DBG_ASSERT(!mxPageMasterStyle.is(), "PageMasterStyle is set, there seem to be two of them (!)");
         mxPageMasterStyle.set(new SdXMLPageMasterStyleContext(GetSdImport(), nPrefix, rLocalName, xAttrList));
@@ -456,7 +456,7 @@ SvXMLImportContextRef SdXMLPresentationPageLayoutContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if(nPrefix == XML_NAMESPACE_PRESENTATION && IsXMLToken( rLocalName, XML_PLACEHOLDER ) )
+    if(nPrefix == XmlNamespace::PRESENTATION && IsXMLToken( rLocalName, XML_PLACEHOLDER ) )
     {
         const rtl::Reference< SdXMLPresentationPlaceholderContext > xLclContext{
             new SdXMLPresentationPlaceholderContext(GetSdImport(), nPrefix, rLocalName, xAttrList)};
@@ -958,7 +958,7 @@ SvXMLStyleContext* SdXMLStylesContext::CreateStyleChildContext(
         }
     }
 
-    if(!pContext && nPrefix == XML_NAMESPACE_PRESENTATION )
+    if(!pContext && nPrefix == XmlNamespace::PRESENTATION )
     {
         if( IsXMLToken( rLocalName, XML_HEADER_DECL ) ||
             IsXMLToken( rLocalName, XML_FOOTER_DECL ) ||
@@ -968,7 +968,7 @@ SvXMLStyleContext* SdXMLStylesContext::CreateStyleChildContext(
         }
     }
 
-    if(!pContext && (nPrefix == XML_NAMESPACE_TABLE) && IsXMLToken( rLocalName, XML_TABLE_TEMPLATE ) )
+    if(!pContext && (nPrefix == XmlNamespace::TABLE) && IsXMLToken( rLocalName, XML_TABLE_TEMPLATE ) )
     {
         pContext = GetImport().GetShapeImport()->GetShapeTableImport()->CreateTableTemplateContext(nPrefix, rLocalName, xAttrList );
     }
@@ -1205,7 +1205,7 @@ static bool canSkipReset(const OUString &rName, const XMLPropStyleContext* pProp
         bool bOldStyleTextAutoGrowHeight(false);
         rPropSet->getPropertyValue("TextAutoGrowHeight") >>= bOldStyleTextAutoGrowHeight;
 
-        sal_Int32 nIndexStyle = rPrMap->GetEntryIndex(XML_NAMESPACE_DRAW, "auto-grow-height", 0);
+        sal_Int32 nIndexStyle = rPrMap->GetEntryIndex(XmlNamespace::DRAW, "auto-grow-height", 0);
         if (nIndexStyle != -1)
         {
             const ::std::vector< XMLPropertyState > &rProperties = pPropStyle->GetProperties();
@@ -1470,7 +1470,7 @@ SvXMLImportContextRef SdXMLMasterStylesContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( (nPrefix == XML_NAMESPACE_DRAW) && IsXMLToken( rLocalName, XML_LAYER_SET ) )
+    if( (nPrefix == XmlNamespace::DRAW) && IsXMLToken( rLocalName, XML_LAYER_SET ) )
     {
         xContext = new SdXMLLayerSetContext( GetImport(), nPrefix, rLocalName, xAttrList );
     }
@@ -1491,7 +1491,7 @@ SdXMLHeaderFooterDeclContext::SdXMLHeaderFooterDeclContext(SvXMLImport& rImport,
         const OUString aValue( xAttrList->getValueByIndex(i) );
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName(xAttrList->getNameByIndex(i), &aLocalName);
 
-        if( nPrefix == XML_NAMESPACE_PRESENTATION )
+        if( nPrefix == XmlNamespace::PRESENTATION )
         {
             if( IsXMLToken( aLocalName, XML_NAME ) )
             {
@@ -1502,7 +1502,7 @@ SdXMLHeaderFooterDeclContext::SdXMLHeaderFooterDeclContext(SvXMLImport& rImport,
                 mbFixed = IsXMLToken( aValue, XML_FIXED );
             }
         }
-        else if( nPrefix == XML_NAMESPACE_STYLE )
+        else if( nPrefix == XmlNamespace::STYLE )
         {
             if( IsXMLToken( aLocalName, XML_DATA_STYLE_NAME ) )
             {
diff --git a/xmloff/source/forms/controlpropertymap.cxx b/xmloff/source/forms/controlpropertymap.cxx
index c6cbef655e29..cf732c585ec2 100644
--- a/xmloff/source/forms/controlpropertymap.cxx
+++ b/xmloff/source/forms/controlpropertymap.cxx
@@ -41,40 +41,40 @@ namespace xmloff
 
     XMLPropertyMapEntry const aControlStyleProperties[] =
     {
-            MAP_CONST_P( PROPERTY_ALIGN,        XML_NAMESPACE_FO,       XML_TEXT_ALIGN,             XML_TYPE_TEXT_ALIGN, 0 ),
-            MAP_CONST( PROPERTY_BACKGROUNDCOLOR, XML_NAMESPACE_FO,      XML_BACKGROUND_COLOR,       XML_TYPE_COLOR, 0 ),
-            MAP_CONST( PROPERTY_BORDER,         XML_NAMESPACE_FO,       XML_BORDER,                 XML_TYPE_CONTROL_BORDER|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-            MAP_ASCII( "BorderColor",           XML_NAMESPACE_FO,       XML_BORDER,                 XML_TYPE_CONTROL_BORDER_COLOR|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-            MAP_ASCII( "FontCharWidth",         XML_NAMESPACE_STYLE,    XML_FONT_CHAR_WIDTH,        XML_TYPE_NUMBER16, 0 ),
-            MAP_ASCII( "FontCharset",           XML_NAMESPACE_STYLE,    XML_FONT_CHARSET,           XML_TYPE_TEXT_FONTENCODING, 0 ),
-            MAP_ASCII( "FontEmphasisMark",      XML_NAMESPACE_STYLE,    XML_TEXT_EMPHASIZE,         XML_TYPE_CONTROL_TEXT_EMPHASIZE, 0 ),
-            MAP_ASCII( "FontFamily",            XML_NAMESPACE_STYLE,    XML_FONT_FAMILY_GENERIC,    XML_TYPE_TEXT_FONTFAMILY, 0 ),
-            MAP_ASCII( "FontHeight",            XML_NAMESPACE_FO,       XML_FONT_SIZE,              XML_TYPE_CHAR_HEIGHT, 0 ),
-            MAP_ASCII( "FontKerning",           XML_NAMESPACE_STYLE,    XML_LETTER_KERNING,         XML_TYPE_BOOL, 0 ),
-            MAP_ASCII( "FontName",              XML_NAMESPACE_STYLE,    XML_FONT_NAME,              XML_TYPE_STRING, 0 ),
-            MAP_ASCII( "FontOrientation",       XML_NAMESPACE_STYLE,    XML_ROTATION_ANGLE,         XML_TYPE_ROTATION_ANGLE, 0 ),
-            MAP_ASCII( "FontPitch",             XML_NAMESPACE_STYLE,    XML_FONT_PITCH,             XML_TYPE_TEXT_FONTPITCH, 0 ),
-            MAP_ASCII( "FontRelief",            XML_NAMESPACE_STYLE,    XML_FONT_RELIEF,            XML_TYPE_TEXT_FONT_RELIEF|MID_FLAG_MULTI_PROPERTY, 0 ),
-            MAP_ASCII( "FontSlant",             XML_NAMESPACE_FO,       XML_FONT_STYLE,             XML_TYPE_TEXT_POSTURE, 0 ),
-
-            MAP_ASCII( "FontStrikeout",         XML_NAMESPACE_STYLE,    XML_TEXT_LINE_THROUGH_STYLE,    XML_TYPE_TEXT_CROSSEDOUT_STYLE|MID_FLAG_MERGE_PROPERTY, 0),
-            MAP_ASCII( "FontStrikeout",         XML_NAMESPACE_STYLE,    XML_TEXT_LINE_THROUGH_TYPE,     XML_TYPE_TEXT_CROSSEDOUT_TYPE|MID_FLAG_MERGE_PROPERTY,  0),
-            MAP_ASCII( "FontStrikeout",         XML_NAMESPACE_STYLE,    XML_TEXT_LINE_THROUGH_WIDTH,    XML_TYPE_TEXT_CROSSEDOUT_WIDTH|MID_FLAG_MERGE_PROPERTY, 0),
-            MAP_ASCII( "FontStrikeout",         XML_NAMESPACE_STYLE,    XML_TEXT_LINE_THROUGH_TEXT,     XML_TYPE_TEXT_CROSSEDOUT_TEXT|MID_FLAG_MERGE_PROPERTY,  0),
-
-            MAP_ASCII( "FontStyleName",         XML_NAMESPACE_STYLE,    XML_FONT_STYLE_NAME,        XML_TYPE_STRING, 0 ),
-            MAP_ASCII( "FontUnderline",         XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_STYLE,       XML_TYPE_TEXT_UNDERLINE_STYLE|MID_FLAG_MERGE_PROPERTY, 0 ),
-            MAP_ASCII( "FontUnderline",         XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_TYPE,        XML_TYPE_TEXT_UNDERLINE_TYPE|MID_FLAG_MERGE_PROPERTY, 0 ),
-            MAP_ASCII( "FontUnderline",         XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_WIDTH,       XML_TYPE_TEXT_UNDERLINE_WIDTH|MID_FLAG_MERGE_PROPERTY, 0 ),
-            MAP_ASCII( "FontWeight",            XML_NAMESPACE_FO,       XML_FONT_WEIGHT,            XML_TYPE_TEXT_WEIGHT, 0 ),
-            MAP_ASCII( "FontWidth",             XML_NAMESPACE_STYLE,    XML_FONT_WIDTH,             XML_TYPE_FONT_WIDTH, 0 ),
-            MAP_ASCII( "FontWordLineMode",      XML_NAMESPACE_FO,       XML_SCORE_SPACES,           XML_TYPE_NBOOL, 0 ),
-
-            MAP_CONST( PROPERTY_FORMATKEY,      XML_NAMESPACE_STYLE,    XML_DATA_STYLE_NAME,        XML_TYPE_STRING | MID_FLAG_NO_PROPERTY_EXPORT | MID_FLAG_SPECIAL_ITEM, CTF_FORMS_DATA_STYLE ),
-
-            MAP_ASCII( "SymbolColor",           XML_NAMESPACE_STYLE,    XML_COLOR,                  XML_TYPE_COLOR, 0 ),
-            MAP_ASCII( "TextColor",             XML_NAMESPACE_FO,       XML_COLOR,                  XML_TYPE_COLOR, 0 ),
-            MAP_ASCII( "TextLineColor",         XML_NAMESPACE_STYLE,    XML_TEXT_UNDERLINE_COLOR,   XML_TYPE_TEXT_UNDERLINE_COLOR|MID_FLAG_MULTI_PROPERTY, 0 ),
+            MAP_CONST_P( PROPERTY_ALIGN,        XmlNamespace::FO,       XML_TEXT_ALIGN,             XML_TYPE_TEXT_ALIGN, 0 ),
+            MAP_CONST( PROPERTY_BACKGROUNDCOLOR, XmlNamespace::FO,      XML_BACKGROUND_COLOR,       XML_TYPE_COLOR, 0 ),
+            MAP_CONST( PROPERTY_BORDER,         XmlNamespace::FO,       XML_BORDER,                 XML_TYPE_CONTROL_BORDER|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+            MAP_ASCII( "BorderColor",           XmlNamespace::FO,       XML_BORDER,                 XML_TYPE_CONTROL_BORDER_COLOR|MID_FLAG_MULTI_PROPERTY|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+            MAP_ASCII( "FontCharWidth",         XmlNamespace::STYLE,    XML_FONT_CHAR_WIDTH,        XML_TYPE_NUMBER16, 0 ),
+            MAP_ASCII( "FontCharset",           XmlNamespace::STYLE,    XML_FONT_CHARSET,           XML_TYPE_TEXT_FONTENCODING, 0 ),
+            MAP_ASCII( "FontEmphasisMark",      XmlNamespace::STYLE,    XML_TEXT_EMPHASIZE,         XML_TYPE_CONTROL_TEXT_EMPHASIZE, 0 ),
+            MAP_ASCII( "FontFamily",            XmlNamespace::STYLE,    XML_FONT_FAMILY_GENERIC,    XML_TYPE_TEXT_FONTFAMILY, 0 ),
+            MAP_ASCII( "FontHeight",            XmlNamespace::FO,       XML_FONT_SIZE,              XML_TYPE_CHAR_HEIGHT, 0 ),
+            MAP_ASCII( "FontKerning",           XmlNamespace::STYLE,    XML_LETTER_KERNING,         XML_TYPE_BOOL, 0 ),
+            MAP_ASCII( "FontName",              XmlNamespace::STYLE,    XML_FONT_NAME,              XML_TYPE_STRING, 0 ),
+            MAP_ASCII( "FontOrientation",       XmlNamespace::STYLE,    XML_ROTATION_ANGLE,         XML_TYPE_ROTATION_ANGLE, 0 ),
+            MAP_ASCII( "FontPitch",             XmlNamespace::STYLE,    XML_FONT_PITCH,             XML_TYPE_TEXT_FONTPITCH, 0 ),
+            MAP_ASCII( "FontRelief",            XmlNamespace::STYLE,    XML_FONT_RELIEF,            XML_TYPE_TEXT_FONT_RELIEF|MID_FLAG_MULTI_PROPERTY, 0 ),
+            MAP_ASCII( "FontSlant",             XmlNamespace::FO,       XML_FONT_STYLE,             XML_TYPE_TEXT_POSTURE, 0 ),
+
+            MAP_ASCII( "FontStrikeout",         XmlNamespace::STYLE,    XML_TEXT_LINE_THROUGH_STYLE,    XML_TYPE_TEXT_CROSSEDOUT_STYLE|MID_FLAG_MERGE_PROPERTY, 0),
+            MAP_ASCII( "FontStrikeout",         XmlNamespace::STYLE,    XML_TEXT_LINE_THROUGH_TYPE,     XML_TYPE_TEXT_CROSSEDOUT_TYPE|MID_FLAG_MERGE_PROPERTY,  0),
+            MAP_ASCII( "FontStrikeout",         XmlNamespace::STYLE,    XML_TEXT_LINE_THROUGH_WIDTH,    XML_TYPE_TEXT_CROSSEDOUT_WIDTH|MID_FLAG_MERGE_PROPERTY, 0),
+            MAP_ASCII( "FontStrikeout",         XmlNamespace::STYLE,    XML_TEXT_LINE_THROUGH_TEXT,     XML_TYPE_TEXT_CROSSEDOUT_TEXT|MID_FLAG_MERGE_PROPERTY,  0),
+
+            MAP_ASCII( "FontStyleName",         XmlNamespace::STYLE,    XML_FONT_STYLE_NAME,        XML_TYPE_STRING, 0 ),
+            MAP_ASCII( "FontUnderline",         XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_STYLE,       XML_TYPE_TEXT_UNDERLINE_STYLE|MID_FLAG_MERGE_PROPERTY, 0 ),
+            MAP_ASCII( "FontUnderline",         XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_TYPE,        XML_TYPE_TEXT_UNDERLINE_TYPE|MID_FLAG_MERGE_PROPERTY, 0 ),
+            MAP_ASCII( "FontUnderline",         XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_WIDTH,       XML_TYPE_TEXT_UNDERLINE_WIDTH|MID_FLAG_MERGE_PROPERTY, 0 ),
+            MAP_ASCII( "FontWeight",            XmlNamespace::FO,       XML_FONT_WEIGHT,            XML_TYPE_TEXT_WEIGHT, 0 ),
+            MAP_ASCII( "FontWidth",             XmlNamespace::STYLE,    XML_FONT_WIDTH,             XML_TYPE_FONT_WIDTH, 0 ),
+            MAP_ASCII( "FontWordLineMode",      XmlNamespace::FO,       XML_SCORE_SPACES,           XML_TYPE_NBOOL, 0 ),
+
+            MAP_CONST( PROPERTY_FORMATKEY,      XmlNamespace::STYLE,    XML_DATA_STYLE_NAME,        XML_TYPE_STRING | MID_FLAG_NO_PROPERTY_EXPORT | MID_FLAG_SPECIAL_ITEM, CTF_FORMS_DATA_STYLE ),
+
+            MAP_ASCII( "SymbolColor",           XmlNamespace::STYLE,    XML_COLOR,                  XML_TYPE_COLOR, 0 ),
+            MAP_ASCII( "TextColor",             XmlNamespace::FO,       XML_COLOR,                  XML_TYPE_COLOR, 0 ),
+            MAP_ASCII( "TextLineColor",         XmlNamespace::STYLE,    XML_TEXT_UNDERLINE_COLOR,   XML_TYPE_TEXT_UNDERLINE_COLOR|MID_FLAG_MULTI_PROPERTY, 0 ),
             MAP_END()
     };
 
diff --git a/xmloff/source/forms/elementexport.cxx b/xmloff/source/forms/elementexport.cxx
index 74bcc4570c5f..09360413971c 100644
--- a/xmloff/source/forms/elementexport.cxx
+++ b/xmloff/source/forms/elementexport.cxx
@@ -141,7 +141,7 @@ namespace xmloff
 
     void OElementExport::implStartElement(const char* _pName)
     {
-        m_pXMLElement = std::make_unique<SvXMLElementExport>(m_rContext.getGlobalContext(), XML_NAMESPACE_FORM, _pName, true, true);
+        m_pXMLElement = std::make_unique<SvXMLElementExport>(m_rContext.getGlobalContext(), XmlNamespace::FORM, _pName, true, true);
     }
 
     void OElementExport::implEndElement()
@@ -204,7 +204,7 @@ namespace xmloff
 #endif
         sToWriteServiceName =
             m_rContext.getGlobalContext().GetNamespaceMap().GetQNameByKey(
-                XML_NAMESPACE_OOO, sToWriteServiceName );
+                XmlNamespace::OOO, sToWriteServiceName );
 
         // now write this
         AddAttribute(
@@ -275,7 +275,7 @@ namespace xmloff
         {
             OSL_ENSURE(!m_sControlId.isEmpty(), "OControlExport::exportInnerAttributes: have no control id for the control!");
             m_rContext.getGlobalContext().AddAttributeIdLegacy(
-                XML_NAMESPACE_FORM, m_sControlId);
+                XmlNamespace::FORM, m_sControlId);
         #if OSL_DEBUG_LEVEL > 0
             //  reset the bit for later checking
             m_nIncludeCommon = m_nIncludeCommon & ~CCAFlags::ControlId;
@@ -406,7 +406,7 @@ namespace xmloff
                             OAttributeMetaData::getCommonControlAttributeNamespace(CCAFlags::Label),
                             OAttributeMetaData::getCommonControlAttributeName(CCAFlags::Label),
                             rListItem);
-                        SvXMLElementExport aFormElement(m_rContext.getGlobalContext(), XML_NAMESPACE_FORM, "item", true, true);
+                        SvXMLElementExport aFormElement(m_rContext.getGlobalContext(), XmlNamespace::FORM, "item", true, true);
                     }
                 }
             }
@@ -1313,7 +1313,7 @@ namespace xmloff
                     );
                 aDefaultSelection.erase(aDefaultSelectedPos);
             }
-            SvXMLElementExport aFormElement(m_rContext.getGlobalContext(), XML_NAMESPACE_FORM, "option", true, true);
+            SvXMLElementExport aFormElement(m_rContext.getGlobalContext(), XmlNamespace::FORM, "option", true, true);
         }
 
         // There may be more "selected" or "default-selected" items than there are in the lists in real,
@@ -1357,7 +1357,7 @@ namespace xmloff
                     sTrue
                     );
             }
-            SvXMLElementExport aFormElement(m_rContext.getGlobalContext(), XML_NAMESPACE_FORM, "option", true, true);
+            SvXMLElementExport aFormElement(m_rContext.getGlobalContext(), XmlNamespace::FORM, "option", true, true);
         }
     }
 
@@ -1368,7 +1368,7 @@ namespace xmloff
         if (pOuterElementName)
             m_pOuterElement = std::make_unique<SvXMLElementExport>(
                                         m_rContext.getGlobalContext(),
-                                        XML_NAMESPACE_FORM,
+                                        XmlNamespace::FORM,
                                         pOuterElementName, true,
                                         true);
 
@@ -1771,17 +1771,17 @@ namespace xmloff
     void OControlExport::exportXFormsBindAttributes()
     {
         OUString sBindName = getXFormsBindName( m_xProps );
-        AddAttribute( XML_NAMESPACE_XFORMS, XML_BIND, sBindName );
+        AddAttribute( XmlNamespace::XFORMS, XML_BIND, sBindName );
     }
     void OControlExport::exportXFormsListAttributes()
     {
         OUString sBindName = getXFormsListBindName( m_xProps );
-        AddAttribute( XML_NAMESPACE_FORM, XML_XFORMS_LIST_SOURCE, sBindName );
+        AddAttribute( XmlNamespace::FORM, XML_XFORMS_LIST_SOURCE, sBindName );
     }
     void OControlExport::exportXFormsSubmissionAttributes()
     {
         OUString sSubmission = getXFormsSubmissionName( m_xProps );
-        AddAttribute( XML_NAMESPACE_FORM, XML_XFORMS_SUBMISSION, sSubmission );
+        AddAttribute( XmlNamespace::FORM, XML_XFORMS_SUBMISSION, sSubmission );
     }
     void OControlExport::exportCellListSourceRange( )
     {
@@ -1824,7 +1824,7 @@ namespace xmloff
 
             if ( nImagePosition == ImagePosition::Centered )
             {
-                AddAttribute( XML_NAMESPACE_FORM, GetXMLToken( XML_IMAGE_POSITION ), GetXMLToken( XML_CENTER ) );
+                AddAttribute( XmlNamespace::FORM, GetXMLToken( XML_IMAGE_POSITION ), GetXMLToken( XML_CENTER ) );
             }
             else
             {
@@ -1840,8 +1840,8 @@ namespace xmloff
                 XMLTokenEnum eXmlImagePosition = eXmlImagePositions[ nImagePosition / 3 ];
                 XMLTokenEnum eXmlImageAlign    = eXmlImageAligns   [ nImagePosition % 3 ];
 
-                AddAttribute( XML_NAMESPACE_FORM, GetXMLToken( XML_IMAGE_POSITION ), GetXMLToken( eXmlImagePosition ) );
-                AddAttribute( XML_NAMESPACE_FORM, GetXMLToken( XML_IMAGE_ALIGN    ), GetXMLToken( eXmlImageAlign    ) );
+                AddAttribute( XmlNamespace::FORM, GetXMLToken( XML_IMAGE_POSITION ), GetXMLToken( eXmlImagePosition ) );
+                AddAttribute( XmlNamespace::FORM, GetXMLToken( XML_IMAGE_ALIGN    ), GetXMLToken( eXmlImageAlign    ) );
             }
 
             exportedProperty( PROPERTY_IMAGE_POSITION );
@@ -1940,7 +1940,7 @@ namespace xmloff
         sColumnServiceName = sColumnServiceName.copy(nLastSep + 1);
         sColumnServiceName =
             m_rContext.getGlobalContext().GetNamespaceMap().GetQNameByKey(
-                XML_NAMESPACE_OOO, sColumnServiceName );
+                XmlNamespace::OOO, sColumnServiceName );
         // add the attribute
         AddAttribute( OAttributeMetaData::getCommonControlAttributeNamespace(CCAFlags::ServiceName)
                     , OAttributeMetaData::getCommonControlAttributeName(CCAFlags::ServiceName)
@@ -2020,7 +2020,7 @@ namespace xmloff
                     m_rContext.getGlobalContext().GetRelativeReference(sPropValue));
             if ( m_rContext.getGlobalContext().GetAttrList().getLength() )
             {
-                SvXMLElementExport aFormElement(m_rContext.getGlobalContext(), XML_NAMESPACE_FORM, xmloff::token::XML_CONNECTION_RESOURCE, true, true);
+                SvXMLElementExport aFormElement(m_rContext.getGlobalContext(), XmlNamespace::FORM, xmloff::token::XML_CONNECTION_RESOURCE, true, true);
             }
         }
 
diff --git a/xmloff/source/forms/elementimport.cxx b/xmloff/source/forms/elementimport.cxx
index 7552d118b4a0..a2bf6f58a422 100644
--- a/xmloff/source/forms/elementimport.cxx
+++ b/xmloff/source/forms/elementimport.cxx
@@ -140,7 +140,7 @@ namespace xmloff
         ENTER_LOG_CONTEXT( "xmloff::OElementImport - importing one element" );
 
         const SvXMLNamespaceMap& rMap = m_rContext.getGlobalContext().GetNamespaceMap();
-        const OUString sImplNameAttribute = rMap.GetQNameByKey( XML_NAMESPACE_FORM, GetXMLToken( XML_CONTROL_IMPLEMENTATION ) );
+        const OUString sImplNameAttribute = rMap.GetQNameByKey( XmlNamespace::FORM, GetXMLToken( XML_CONTROL_IMPLEMENTATION ) );
         const OUString sControlImplementation = _rxAttrList->getValueByName( sImplNameAttribute );
 
         // retrieve the service name
@@ -148,7 +148,7 @@ namespace xmloff
         {
             OUString sOOoImplementationName;
             const sal_uInt16 nImplPrefix = GetImport().GetNamespaceMap().GetKeyByAttrValueQName( sControlImplementation, &sOOoImplementationName );
-            m_sServiceName = ( nImplPrefix == XML_NAMESPACE_OOO ) ? sOOoImplementationName : sControlImplementation;
+            m_sServiceName = ( nImplPrefix == XmlNamespace::OOO ) ? sOOoImplementationName : sControlImplementation;
         }
 
         if ( m_sServiceName.isEmpty() )
@@ -169,7 +169,7 @@ namespace xmloff
     SvXMLImportContextRef OElementImport::CreateChildContext(sal_uInt16 _nPrefix, const OUString& _rLocalName,
         const Reference< XAttributeList >& _rxAttrList)
     {
-        if( token::IsXMLToken(_rLocalName, token::XML_EVENT_LISTENERS) && (XML_NAMESPACE_OFFICE == _nPrefix))
+        if( token::IsXMLToken(_rLocalName, token::XML_EVENT_LISTENERS) && (XmlNamespace::OFFICE == _nPrefix))
             return new OFormEventsImportContext(m_rFormImport.getGlobalContext(), _nPrefix, _rLocalName, *this);
 
         return OPropertyImport::CreateChildContext(_nPrefix, _rLocalName, _rxAttrList);
@@ -580,7 +580,7 @@ namespace xmloff
         {
             OUString sLocalAttrName = OUString::createFromAscii(_pAttributeName);
             if ( !encounteredAttribute( sLocalAttrName ) )
-                OSL_VERIFY( handleAttribute( XML_NAMESPACE_FORM, sLocalAttrName, OUString::createFromAscii( _pAttributeDefault ) ) );
+                OSL_VERIFY( handleAttribute( XmlNamespace::FORM, sLocalAttrName, OUString::createFromAscii( _pAttributeDefault ) ) );
         }
     }
 
@@ -644,11 +644,11 @@ namespace xmloff
 
         if (IsXMLToken(_rLocalName, XML_ID))
         {   // it's the control id
-            if (XML_NAMESPACE_XML == _nNamespaceKey)
+            if (XmlNamespace::XML == _nNamespaceKey)
             {
                 m_sControlId = _rValue;
             }
-            else if (XML_NAMESPACE_FORM == _nNamespaceKey)
+            else if (XmlNamespace::FORM == _nNamespaceKey)
             {
                 if (m_sControlId.isEmpty())
                 {
@@ -664,22 +664,22 @@ namespace xmloff
             return true;
         }
 
-        if ( _nNamespaceKey == XML_NAMESPACE_XFORMS && IsXMLToken( _rLocalName, XML_BIND ) )
+        if ( _nNamespaceKey == XmlNamespace::XFORMS && IsXMLToken( _rLocalName, XML_BIND ) )
         {
             m_sBindingID = _rValue;
             return true;
         }
 
-        if ( _nNamespaceKey == XML_NAMESPACE_FORM && IsXMLToken( _rLocalName, XML_XFORMS_LIST_SOURCE )  )
+        if ( _nNamespaceKey == XmlNamespace::FORM && IsXMLToken( _rLocalName, XML_XFORMS_LIST_SOURCE )  )
         {
             m_sListBindingID = _rValue;
             return true;
         }
 
-        if  (   (   ( _nNamespaceKey == XML_NAMESPACE_FORM )
+        if  (   (   ( _nNamespaceKey == XmlNamespace::FORM )
                 &&  IsXMLToken( _rLocalName, XML_XFORMS_SUBMISSION )
                 )
-            ||  (   ( _nNamespaceKey == XML_NAMESPACE_XFORMS )
+            ||  (   ( _nNamespaceKey == XmlNamespace::XFORMS )
                 &&  IsXMLToken( _rLocalName, XML_SUBMISSION )
                 )
             )
@@ -1305,7 +1305,7 @@ namespace xmloff
     SvXMLImportContextRef OTextLikeImport::CreateChildContext( sal_uInt16 _nPrefix, const OUString& _rLocalName,
         const Reference< XAttributeList >& _rxAttrList )
     {
-        if ( ( XML_NAMESPACE_TEXT == _nPrefix ) && _rLocalName.equalsIgnoreAsciiCase("p") )
+        if ( ( XmlNamespace::TEXT == _nPrefix ) && _rLocalName.equalsIgnoreAsciiCase("p") )
         {
             OSL_ENSURE( m_eElementType == OControlElement::TEXT_AREA,
                 "OTextLikeImport::CreateChildContext: text paragraphs in a non-text-area?" );
@@ -1896,7 +1896,7 @@ namespace xmloff
         else if ( token::IsXMLToken(_rLocalName, token::XML_CONNECTION_RESOURCE) )
             return new OXMLDataSourceImport(GetImport(), _nPrefix, _rLocalName, _rxAttrList,m_xElement);
         else if( (token::IsXMLToken(_rLocalName, token::XML_EVENT_LISTENERS) &&
-                 (XML_NAMESPACE_OFFICE == _nPrefix)) ||
+                 (XmlNamespace::OFFICE == _nPrefix)) ||
                  token::IsXMLToken( _rLocalName, token::XML_PROPERTIES) )
             return OElementImport::CreateChildContext( _nPrefix, _rLocalName,
                                                        _rxAttrList );
diff --git a/xmloff/source/forms/formattributes.cxx b/xmloff/source/forms/formattributes.cxx
index 3086fcb98f6c..d1922a8de27d 100644
--- a/xmloff/source/forms/formattributes.cxx
+++ b/xmloff/source/forms/formattributes.cxx
@@ -70,12 +70,12 @@ namespace xmloff
     sal_uInt16 OAttributeMetaData::getCommonControlAttributeNamespace(CCAFlags _nId)
     {
         if (CCAFlags::TargetLocation == _nId)
-            return XML_NAMESPACE_XLINK;
+            return XmlNamespace::XLINK;
 
         if (CCAFlags::TargetFrame == _nId)
-            return XML_NAMESPACE_OFFICE;
+            return XmlNamespace::OFFICE;
 
-        return XML_NAMESPACE_FORM;
+        return XmlNamespace::FORM;
     }
 
     const char* OAttributeMetaData::getFormAttributeName(FormAttributes _eAttrib)
@@ -110,9 +110,9 @@ namespace xmloff
     sal_uInt16 OAttributeMetaData::getFormAttributeNamespace(FormAttributes _eAttrib)
     {
         if (faAction == _eAttrib)
-            return XML_NAMESPACE_XLINK;
+            return XmlNamespace::XLINK;
 
-        return XML_NAMESPACE_FORM;
+        return XmlNamespace::FORM;
     }
 
     const char* OAttributeMetaData::getDatabaseAttributeName(DAFlags _nId)
@@ -176,10 +176,10 @@ namespace xmloff
     {
         switch( _nId )
         {
-            case SCAFlags::GroupName:            return XML_NAMESPACE_FORMX;
+            case SCAFlags::GroupName:            return XmlNamespace::FORMX;
             default: break;
         }
-        return XML_NAMESPACE_FORM;
+        return XmlNamespace::FORM;
     }
 
     const char* OAttributeMetaData::getOfficeFormsAttributeName(OfficeFormsAttributes _eAttrib)
diff --git a/xmloff/source/forms/formattributes.hxx b/xmloff/source/forms/formattributes.hxx
index 0ffef7c0189b..44bdbac364dd 100644
--- a/xmloff/source/forms/formattributes.hxx
+++ b/xmloff/source/forms/formattributes.hxx
@@ -215,7 +215,7 @@ namespace xmloff
         static sal_uInt16 getDatabaseAttributeNamespace()
         {
             // nothing special here
-            return XML_NAMESPACE_FORM;
+            return XmlNamespace::FORM;
         }
 
         /** calculates the xml attribute representation of a special attribute.
@@ -237,7 +237,7 @@ namespace xmloff
         static sal_uInt16 getBindingAttributeNamespace()
         {
             // nothing special here
-            return XML_NAMESPACE_FORM;
+            return XmlNamespace::FORM;
         }
 
         /** calculates the xml namespace key to use for a special attribute.
@@ -258,7 +258,7 @@ namespace xmloff
         */
         static sal_uInt16 getOfficeFormsAttributeNamespace()
         { // nothing special here
-          return XML_NAMESPACE_FORM;
+          return XmlNamespace::FORM;
         }
     };
 
diff --git a/xmloff/source/forms/formevents.cxx b/xmloff/source/forms/formevents.cxx
index fa7c4d002b1b..4f4891cbcd0e 100644
--- a/xmloff/source/forms/formevents.cxx
+++ b/xmloff/source/forms/formevents.cxx
@@ -27,39 +27,39 @@ namespace xmloff
     //= event translation table
     const XMLEventNameTranslation aEventTranslations[] =
     {
-        { "XApproveActionListener::approveAction",      XML_NAMESPACE_FORM, "approveaction" }, // "on-approveaction"
-        { "XActionListener::actionPerformed",           XML_NAMESPACE_FORM, "performaction" }, // "on-performaction"
-        { "XChangeListener::changed",                   XML_NAMESPACE_DOM, "change" }, // "on-change"
-        { "XTextListener::textChanged",                 XML_NAMESPACE_FORM, "textchange" }, // "on-textchange"
-        { "XItemListener::itemStateChanged",            XML_NAMESPACE_FORM, "itemstatechange" }, // "on-itemstatechange"
-        { "XFocusListener::focusGained",                XML_NAMESPACE_DOM, "DOMFocusIn" }, // "on-focus"
-        { "XFocusListener::focusLost",                  XML_NAMESPACE_DOM, "DOMFocusOut" }, // "on-blur"
-        { "XKeyListener::keyPressed",                   XML_NAMESPACE_DOM, "keydown" }, // "on-keydown"
-        { "XKeyListener::keyReleased",                  XML_NAMESPACE_DOM, "keyup" }, // "on-keyup"
-        { "XMouseListener::mouseEntered",               XML_NAMESPACE_DOM, "mouseover" }, // "on-mouseover"
-        { "XMouseMotionListener::mouseDragged",         XML_NAMESPACE_FORM, "mousedrag" }, // "on-mousedrag"
-        { "XMouseMotionListener::mouseMoved",           XML_NAMESPACE_DOM, "mousemove" }, // "on-mousemove"
-        { "XMouseListener::mousePressed",               XML_NAMESPACE_DOM, "mousedown" }, // "on-mousedown"
-        { "XMouseListener::mouseReleased",              XML_NAMESPACE_DOM, "mouseup" }, // "on-mouseup"
-        { "XMouseListener::mouseExited",                XML_NAMESPACE_DOM, "mouseout" }, // "on-mouseout"
-        { "XResetListener::approveReset",               XML_NAMESPACE_FORM, "approvereset" }, // "on-approvereset"
-        { "XResetListener::resetted",                   XML_NAMESPACE_DOM, "reset" }, // "on-reset"
-        { "XSubmitListener::approveSubmit",             XML_NAMESPACE_DOM, "submit" }, // "on-submit"
-        { "XUpdateListener::approveUpdate",             XML_NAMESPACE_FORM, "approveupdate" }, // "on-approveupdate"
-        { "XUpdateListener::updated",                   XML_NAMESPACE_FORM, "update" }, // "on-update"
-        { "XLoadListener::loaded",                      XML_NAMESPACE_DOM, "load" }, // "on-load"
-        { "XLoadListener::reloading",                   XML_NAMESPACE_FORM, "startreload" }, // "on-startreload"
-        { "XLoadListener::reloaded",                    XML_NAMESPACE_FORM, "reload" }, // "on-reload"
-        { "XLoadListener::unloading",                   XML_NAMESPACE_FORM, "startunload" }, // "on-startunload"
-        { "XLoadListener::unloaded",                    XML_NAMESPACE_DOM, "unload" }, // "on-unload"
-        { "XConfirmDeleteListener::confirmDelete",      XML_NAMESPACE_FORM, "confirmdelete" }, // "on-confirmdelete"
-        { "XRowSetApproveListener::approveRowChange",   XML_NAMESPACE_FORM, "approverowchange" }, // "on-approverowchange"
-        { "XRowSetListener::rowChanged",                XML_NAMESPACE_FORM, "rowchange" }, // "on-rowchange"
-        { "XRowSetApproveListener::approveCursorMove",  XML_NAMESPACE_FORM, "approvecursormove" }, // "on-approvecursormove"
-        { "XRowSetListener::cursorMoved",               XML_NAMESPACE_FORM, "cursormove" }, // "on-cursormove"
-        { "XDatabaseParameterListener::approveParameter",XML_NAMESPACE_FORM, "supplyparameter" }, // "on-supplyparameter"
-        { "XSQLErrorListener::errorOccured",            XML_NAMESPACE_DOM, "error" }, // "on-error"
-        { "XAdjustmentListener::adjustmentValueChanged",XML_NAMESPACE_FORM, "adjust" }, // "on-adjust"
+        { "XApproveActionListener::approveAction",      XmlNamespace::FORM, "approveaction" }, // "on-approveaction"
+        { "XActionListener::actionPerformed",           XmlNamespace::FORM, "performaction" }, // "on-performaction"
+        { "XChangeListener::changed",                   XmlNamespace::DOM, "change" }, // "on-change"
+        { "XTextListener::textChanged",                 XmlNamespace::FORM, "textchange" }, // "on-textchange"
+        { "XItemListener::itemStateChanged",            XmlNamespace::FORM, "itemstatechange" }, // "on-itemstatechange"
+        { "XFocusListener::focusGained",                XmlNamespace::DOM, "DOMFocusIn" }, // "on-focus"
+        { "XFocusListener::focusLost",                  XmlNamespace::DOM, "DOMFocusOut" }, // "on-blur"
+        { "XKeyListener::keyPressed",                   XmlNamespace::DOM, "keydown" }, // "on-keydown"
+        { "XKeyListener::keyReleased",                  XmlNamespace::DOM, "keyup" }, // "on-keyup"
+        { "XMouseListener::mouseEntered",               XmlNamespace::DOM, "mouseover" }, // "on-mouseover"
+        { "XMouseMotionListener::mouseDragged",         XmlNamespace::FORM, "mousedrag" }, // "on-mousedrag"
+        { "XMouseMotionListener::mouseMoved",           XmlNamespace::DOM, "mousemove" }, // "on-mousemove"
+        { "XMouseListener::mousePressed",               XmlNamespace::DOM, "mousedown" }, // "on-mousedown"
+        { "XMouseListener::mouseReleased",              XmlNamespace::DOM, "mouseup" }, // "on-mouseup"
+        { "XMouseListener::mouseExited",                XmlNamespace::DOM, "mouseout" }, // "on-mouseout"
+        { "XResetListener::approveReset",               XmlNamespace::FORM, "approvereset" }, // "on-approvereset"
+        { "XResetListener::resetted",                   XmlNamespace::DOM, "reset" }, // "on-reset"
+        { "XSubmitListener::approveSubmit",             XmlNamespace::DOM, "submit" }, // "on-submit"
+        { "XUpdateListener::approveUpdate",             XmlNamespace::FORM, "approveupdate" }, // "on-approveupdate"
+        { "XUpdateListener::updated",                   XmlNamespace::FORM, "update" }, // "on-update"
+        { "XLoadListener::loaded",                      XmlNamespace::DOM, "load" }, // "on-load"
+        { "XLoadListener::reloading",                   XmlNamespace::FORM, "startreload" }, // "on-startreload"
+        { "XLoadListener::reloaded",                    XmlNamespace::FORM, "reload" }, // "on-reload"
+        { "XLoadListener::unloading",                   XmlNamespace::FORM, "startunload" }, // "on-startunload"
+        { "XLoadListener::unloaded",                    XmlNamespace::DOM, "unload" }, // "on-unload"
+        { "XConfirmDeleteListener::confirmDelete",      XmlNamespace::FORM, "confirmdelete" }, // "on-confirmdelete"
+        { "XRowSetApproveListener::approveRowChange",   XmlNamespace::FORM, "approverowchange" }, // "on-approverowchange"
+        { "XRowSetListener::rowChanged",                XmlNamespace::FORM, "rowchange" }, // "on-rowchange"
+        { "XRowSetApproveListener::approveCursorMove",  XmlNamespace::FORM, "approvecursormove" }, // "on-approvecursormove"
+        { "XRowSetListener::cursorMoved",               XmlNamespace::FORM, "cursormove" }, // "on-cursormove"
+        { "XDatabaseParameterListener::approveParameter",XmlNamespace::FORM, "supplyparameter" }, // "on-supplyparameter"
+        { "XSQLErrorListener::errorOccured",            XmlNamespace::DOM, "error" }, // "on-error"
+        { "XAdjustmentListener::adjustmentValueChanged",XmlNamespace::FORM, "adjust" }, // "on-adjust"
         { nullptr, 0, nullptr }
     };
 
diff --git a/xmloff/source/forms/layerimport.cxx b/xmloff/source/forms/layerimport.cxx
index 6014111e4fcb..ee4a95d75e9a 100644
--- a/xmloff/source/forms/layerimport.cxx
+++ b/xmloff/source/forms/layerimport.cxx
@@ -455,7 +455,7 @@ SvXMLImportContext* OFormLayerXMLImport_Impl::createContext(const sal_uInt16 _nP
         if ( m_xCurrentPageFormsSupp.is() )
             pContext = new OFormImport(*this, *this, _nPrefix, _rLocalName, m_xCurrentPageFormsSupp->getForms() );
     }
-    else if ( _nPrefix == XML_NAMESPACE_XFORMS
+    else if ( _nPrefix == XmlNamespace::XFORMS
               && xmloff::token::IsXMLToken( _rLocalName, xmloff::token::XML_MODEL ) )
     {
         pContext = createXFormsModelContext( m_rImporter, _nPrefix, _rLocalName );
diff --git a/xmloff/source/forms/officeforms.cxx b/xmloff/source/forms/officeforms.cxx
index c234efdac2a0..d9bbcd0f7df1 100644
--- a/xmloff/source/forms/officeforms.cxx
+++ b/xmloff/source/forms/officeforms.cxx
@@ -121,7 +121,7 @@ namespace xmloff
     {
         addModelAttributes(_rExp);
 
-        m_pImplElement.reset( new SvXMLElementExport(_rExp, XML_NAMESPACE_OFFICE, XML_FORMS, true, true) );
+        m_pImplElement.reset( new SvXMLElementExport(_rExp, XmlNamespace::OFFICE, XML_FORMS, true, true) );
     }
 
     OFormsRootExport::~OFormsRootExport( )
diff --git a/xmloff/source/forms/property_description.hxx b/xmloff/source/forms/property_description.hxx
index df86e4e32528..d43997132402 100644
--- a/xmloff/source/forms/property_description.hxx
+++ b/xmloff/source/forms/property_description.hxx
@@ -31,7 +31,7 @@ namespace xmloff
     //= PropertyDescription
     struct AttributeDescription
     {
-        sal_uInt16                      namespacePrefix;    // usually XML_NAMESPACE_FORM
+        sal_uInt16                      namespacePrefix;    // usually XmlNamespace::FORM
         ::xmloff::token::XMLTokenEnum   attributeToken;
 
         AttributeDescription()
diff --git a/xmloff/source/forms/property_meta_data.cxx b/xmloff/source/forms/property_meta_data.cxx
index 5908f1396b9a..dda4f3ccae8d 100644
--- a/xmloff/source/forms/property_meta_data.cxx
+++ b/xmloff/source/forms/property_meta_data.cxx
@@ -37,7 +37,7 @@ namespace xmloff::metadata
     using namespace ::xmloff::token;
 
 #define FORM_SINGLE_PROPERTY( id, att ) \
-    PropertyDescription( PROPERTY_##id, XML_NAMESPACE_FORM, att, &FormHandlerFactory::getFormPropertyHandler, PID_##id )
+    PropertyDescription( PROPERTY_##id, XmlNamespace::FORM, att, &FormHandlerFactory::getFormPropertyHandler, PID_##id )
 
     //= property meta data
     namespace
diff --git a/xmloff/source/forms/propertyexport.cxx b/xmloff/source/forms/propertyexport.cxx
index 383e0b09e7df..23d4be8b8110 100644
--- a/xmloff/source/forms/propertyexport.cxx
+++ b/xmloff/source/forms/propertyexport.cxx
@@ -96,9 +96,9 @@ namespace xmloff
         for (T const & i : anySeq)
         {
             OUString sValue(implConvertAny(makeAny(i)));
-            AddAttribute(XML_NAMESPACE_OFFICE, eValueAttName, sValue );
+            AddAttribute(XmlNamespace::OFFICE, eValueAttName, sValue );
             SvXMLElementExport aValueTag(
-                m_rContext.getGlobalContext(), XML_NAMESPACE_FORM,
+                m_rContext.getGlobalContext(), XmlNamespace::FORM,
                 token::XML_LIST_VALUE, true, false);
         }
     }
@@ -121,10 +121,10 @@ namespace xmloff
 
             // now that we have the first sub-tag we need the form:properties element
             if (!pPropertiesTag)
-                pPropertiesTag = std::make_unique<SvXMLElementExport>(m_rContext.getGlobalContext(), XML_NAMESPACE_FORM, token::XML_PROPERTIES, true, true);
+                pPropertiesTag = std::make_unique<SvXMLElementExport>(m_rContext.getGlobalContext(), XmlNamespace::FORM, token::XML_PROPERTIES, true, true);
 
             // add the name attribute
-            AddAttribute(XML_NAMESPACE_FORM, token::XML_PROPERTY_NAME, rProperty);
+            AddAttribute(XmlNamespace::FORM, token::XML_PROPERTY_NAME, rProperty);
 
             // get the value
             aValue = m_xProps->getPropertyValue(rProperty);
@@ -151,9 +151,9 @@ namespace xmloff
             token::XMLTokenEnum eValueType = implGetPropertyXMLType( aExportType );
 
             if ( bIsEmptyValue )
-                AddAttribute( XML_NAMESPACE_OFFICE, token::XML_VALUE_TYPE, token::XML_VOID );
+                AddAttribute( XmlNamespace::OFFICE, token::XML_VALUE_TYPE, token::XML_VOID );
             else
-                AddAttribute( XML_NAMESPACE_OFFICE, token::XML_VALUE_TYPE, eValueType );
+                AddAttribute( XmlNamespace::OFFICE, token::XML_VALUE_TYPE, eValueType );
 
             token::XMLTokenEnum eValueAttName( token::XML_VALUE );
             switch ( eValueType )
@@ -167,12 +167,12 @@ namespace xmloff
             {   // the simple case
 
                 sValue = implConvertAny(aValue);
-                AddAttribute(XML_NAMESPACE_OFFICE, eValueAttName, sValue );
+                AddAttribute(XmlNamespace::OFFICE, eValueAttName, sValue );
             }
 
             // start the property tag
             SvXMLElementExport aValueTag1(m_rContext.getGlobalContext(),
-                    XML_NAMESPACE_FORM,
+                    XmlNamespace::FORM,
                     bIsSequence ? token::XML_LIST_PROPERTY
                                 : token::XML_PROPERTY, true, true);
 
@@ -411,7 +411,7 @@ namespace xmloff
 
             // #i110911# add xlink:type="simple" if required
             if (_bAddType)
-                AddAttribute(XML_NAMESPACE_XLINK, token::XML_TYPE, token::XML_SIMPLE);
+                AddAttribute(XmlNamespace::XLINK, token::XML_TYPE, token::XML_SIMPLE);
 
             exportedProperty(_sPropertyName);
         }
diff --git a/xmloff/source/forms/propertyimport.cxx b/xmloff/source/forms/propertyimport.cxx
index b048653ca7df..c26c08122a8e 100644
--- a/xmloff/source/forms/propertyimport.cxx
+++ b/xmloff/source/forms/propertyimport.cxx
@@ -405,13 +405,13 @@ void OSinglePropertyContext::StartElement(const Reference< XAttributeList >& _rx
         sal_uInt16 nPrefix =
             rMap.GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
-        if( XML_NAMESPACE_FORM == nPrefix )
+        if( XmlNamespace::FORM == nPrefix )
         {
             if( token::IsXMLToken( aLocalName, token::XML_PROPERTY_NAME ) )
                 aPropValue.Name = _rxAttrList->getValueByIndex( i );
 
         }
-        else if( XML_NAMESPACE_OFFICE == nPrefix )
+        else if( XmlNamespace::OFFICE == nPrefix )
         {
             if( token::IsXMLToken( aLocalName, token::XML_VALUE_TYPE ) )
                 sType = _rxAttrList->getValueByIndex( i );
@@ -464,13 +464,13 @@ void OListPropertyContext::StartElement( const Reference< XAttributeList >& _rxA
     for ( sal_Int32 i = 0; i < nAttributeCount; ++i )
     {
         nNamespace = rMap.GetKeyByAttrName( _rxAttrList->getNameByIndex( i ), &sAttributeName );
-        if  (   ( XML_NAMESPACE_FORM == nNamespace )
+        if  (   ( XmlNamespace::FORM == nNamespace )
             &&  ( token::IsXMLToken( sAttributeName, token::XML_PROPERTY_NAME ) )
             )
         {
             m_sPropertyName = _rxAttrList->getValueByIndex( i );
         }
-        else if (   ( XML_NAMESPACE_OFFICE == nNamespace )
+        else if (   ( XmlNamespace::OFFICE == nNamespace )
                 &&  ( token::IsXMLToken( sAttributeName, token::XML_VALUE_TYPE ) )
                 )
         {
@@ -536,7 +536,7 @@ void OListValueContext::StartElement( const Reference< XAttributeList >& _rxAttr
     for ( sal_Int32 i = 0; i < nAttributeCount; ++i )
     {
         nNamespace = rMap.GetKeyByAttrName( _rxAttrList->getNameByIndex( i ), &sAttributeName );
-        if ( XML_NAMESPACE_OFFICE == nNamespace )
+        if ( XmlNamespace::OFFICE == nNamespace )
         {
             if  (   token::IsXMLToken( sAttributeName, token::XML_VALUE )
                ||   token::IsXMLToken( sAttributeName, token::XML_STRING_VALUE )
diff --git a/xmloff/source/meta/MetaExportComponent.cxx b/xmloff/source/meta/MetaExportComponent.cxx
index 56e6ce395060..2678e4a5880d 100644
--- a/xmloff/source/meta/MetaExportComponent.cxx
+++ b/xmloff/source/meta/MetaExportComponent.cxx
@@ -134,10 +134,10 @@ ErrCode XMLMetaExportComponent::exportDoc( enum XMLTokenEnum )
         const char*const pVersion = GetODFVersionAttributeValue();
 
         if( pVersion )
-            AddAttribute( XML_NAMESPACE_OFFICE, XML_VERSION,
+            AddAttribute( XmlNamespace::OFFICE, XML_VERSION,
                             OUString::createFromAscii(pVersion) );
 
-        SvXMLElementExport aDocElem( *this, XML_NAMESPACE_OFFICE, XML_DOCUMENT_META,
+        SvXMLElementExport aDocElem( *this, XmlNamespace::OFFICE, XML_DOCUMENT_META,
                     true, true );
 
         // NB: office:meta is now written by _ExportMeta
diff --git a/xmloff/source/meta/xmlmetae.cxx b/xmloff/source/meta/xmlmetae.cxx
index 81f58a5da3c2..202183407804 100644
--- a/xmloff/source/meta/xmlmetae.cxx
+++ b/xmloff/source/meta/xmlmetae.cxx
@@ -96,45 +96,45 @@ void SvXMLMetaExport::MExport_()
 {
     //  generator
     {
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_META, XML_GENERATOR,
+        SvXMLElementExport aElem( mrExport, XmlNamespace::META, XML_GENERATOR,
                                   true, true );
         mrExport.Characters( ::utl::DocInfoHelper::GetGeneratorString() );
     }
 
     //  document title
     SimpleStringElement  ( mxDocProps->getTitle(),
-                           XML_NAMESPACE_DC, XML_TITLE );
+                           XmlNamespace::DC, XML_TITLE );
 
     //  description
     SimpleStringElement  ( mxDocProps->getDescription(),
-                           XML_NAMESPACE_DC, XML_DESCRIPTION );
+                           XmlNamespace::DC, XML_DESCRIPTION );
 
     //  subject
     SimpleStringElement  ( mxDocProps->getSubject(),
-                           XML_NAMESPACE_DC, XML_SUBJECT );
+                           XmlNamespace::DC, XML_SUBJECT );
 
     //  created...
     SimpleStringElement  ( mxDocProps->getAuthor(),
-                           XML_NAMESPACE_META, XML_INITIAL_CREATOR );
+                           XmlNamespace::META, XML_INITIAL_CREATOR );
     SimpleDateTimeElement( mxDocProps->getCreationDate(),
-                           XML_NAMESPACE_META, XML_CREATION_DATE );
+                           XmlNamespace::META, XML_CREATION_DATE );
 
     //  modified...
     SimpleStringElement  ( mxDocProps->getModifiedBy(),
-                           XML_NAMESPACE_DC, XML_CREATOR );
+                           XmlNamespace::DC, XML_CREATOR );
     SimpleDateTimeElement( mxDocProps->getModificationDate(),
-                           XML_NAMESPACE_DC, XML_DATE );
+                           XmlNamespace::DC, XML_DATE );
 
     //  printed...
     SimpleStringElement  ( mxDocProps->getPrintedBy(),
-                           XML_NAMESPACE_META, XML_PRINTED_BY );
+                           XmlNamespace::META, XML_PRINTED_BY );
     SimpleDateTimeElement( mxDocProps->getPrintDate(),
-                           XML_NAMESPACE_META, XML_PRINT_DATE );
+                           XmlNamespace::META, XML_PRINT_DATE );
 
     //  keywords
     const uno::Sequence< OUString > keywords = mxDocProps->getKeywords();
     for (const auto& rKeyword : keywords) {
-        SvXMLElementExport aKwElem( mrExport, XML_NAMESPACE_META, XML_KEYWORD,
+        SvXMLElementExport aKwElem( mrExport, XmlNamespace::META, XML_KEYWORD,
                                     true, false );
         mrExport.Characters( rKeyword );
     }
@@ -143,7 +143,7 @@ void SvXMLMetaExport::MExport_()
     {
         OUString sValue = LanguageTag( mxDocProps->getLanguage()).getBcp47( false);
         if (!sValue.isEmpty()) {
-            SvXMLElementExport aElem( mrExport, XML_NAMESPACE_DC, XML_LANGUAGE,
+            SvXMLElementExport aElem( mrExport, XmlNamespace::DC, XML_LANGUAGE,
                                       true, false );
             mrExport.Characters( sValue );
         }
@@ -152,7 +152,7 @@ void SvXMLMetaExport::MExport_()
     //  editing cycles
     {
         SvXMLElementExport aElem( mrExport,
-                                  XML_NAMESPACE_META, XML_EDITING_CYCLES,
+                                  XmlNamespace::META, XML_EDITING_CYCLES,
                                   true, false );
         mrExport.Characters( OUString::number(
             mxDocProps->getEditingCycles() ) );
@@ -163,7 +163,7 @@ void SvXMLMetaExport::MExport_()
     {
         sal_Int32 secs = mxDocProps->getEditingDuration();
         SvXMLElementExport aElem( mrExport,
-                                  XML_NAMESPACE_META, XML_EDITING_DURATION,
+                                  XmlNamespace::META, XML_EDITING_DURATION,
                                   true, false );
         OUStringBuffer buf;
         ::sax::Converter::convertDuration(buf, util::Duration(
@@ -175,15 +175,15 @@ void SvXMLMetaExport::MExport_()
     const OUString sDefTarget = mxDocProps->getDefaultTarget();
     if ( !sDefTarget.isEmpty() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_OFFICE, XML_TARGET_FRAME_NAME,
+        mrExport.AddAttribute( XmlNamespace::OFFICE, XML_TARGET_FRAME_NAME,
                                sDefTarget );
 
         //! define strings for xlink:show values
         const XMLTokenEnum eShow = sDefTarget == "_blank" ? XML_NEW : XML_REPLACE;
-        mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, eShow );
+        mrExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, eShow );
 
         SvXMLElementExport aElem( mrExport,
-                                  XML_NAMESPACE_META,XML_HYPERLINK_BEHAVIOUR,
+                                  XmlNamespace::META,XML_HYPERLINK_BEHAVIOUR,
                                   true, false );
     }
 
@@ -192,16 +192,16 @@ void SvXMLMetaExport::MExport_()
     const sal_Int32 sReloadDelay = mxDocProps->getAutoloadSecs();
     if (sReloadDelay != 0 || !sReloadURL.isEmpty())
     {
-        mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF,
+        mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF,
                               mrExport.GetRelativeReference( sReloadURL ) );
 
         OUStringBuffer buf;
         ::sax::Converter::convertDuration(buf, util::Duration(false, 0, 0, 0,
                 sReloadDelay/3600, (sReloadDelay%3600)/60, sReloadDelay%60, 0));
-        mrExport.AddAttribute( XML_NAMESPACE_META, XML_DELAY,
+        mrExport.AddAttribute( XmlNamespace::META, XML_DELAY,
             buf.makeStringAndClear());
 
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_META, XML_AUTO_RELOAD,
+        SvXMLElementExport aElem( mrExport, XmlNamespace::META, XML_AUTO_RELOAD,
                                   true, false );
     }
 
@@ -209,22 +209,22 @@ void SvXMLMetaExport::MExport_()
     const OUString sTplPath = mxDocProps->getTemplateURL();
     if ( !sTplPath.isEmpty() )
     {
-        mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-        mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONREQUEST );
+        mrExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+        mrExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONREQUEST );
 
         //  template URL
-        mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF,
+        mrExport.AddAttribute( XmlNamespace::XLINK, XML_HREF,
                               mrExport.GetRelativeReference(sTplPath) );
 
         //  template name
-        mrExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TITLE,
+        mrExport.AddAttribute( XmlNamespace::XLINK, XML_TITLE,
                               mxDocProps->getTemplateName() );
 
         //  template date
-        mrExport.AddAttribute( XML_NAMESPACE_META, XML_DATE,
+        mrExport.AddAttribute( XmlNamespace::META, XML_DATE,
                 GetISODateTimeString( mxDocProps->getTemplateDate() ) );
 
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_META, XML_TEMPLATE,
+        SvXMLElementExport aElem( mrExport, XmlNamespace::META, XML_TEMPLATE,
                                   true, false );
     }
 
@@ -240,10 +240,10 @@ void SvXMLMetaExport::MExport_()
         {
             continue;
         }
-        mrExport.AddAttribute( XML_NAMESPACE_META, XML_NAME, rProp.Name );
-        mrExport.AddAttribute( XML_NAMESPACE_META, XML_VALUE_TYPE,
+        mrExport.AddAttribute( XmlNamespace::META, XML_NAME, rProp.Name );
+        mrExport.AddAttribute( XmlNamespace::META, XML_VALUE_TYPE,
                               sType.makeStringAndClear() );
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_META,
+        SvXMLElementExport aElem( mrExport, XmlNamespace::META,
                                   XML_USER_DEFINED, true, false );
         mrExport.Characters( sValueBuffer.makeStringAndClear() );
     }
@@ -262,28 +262,28 @@ void SvXMLMetaExport::MExport_()
             OUString aValue = OUString::number( nValue );
             if ( rDocStat.Name == "TableCount" )
                 mrExport.AddAttribute(
-                    XML_NAMESPACE_META, XML_TABLE_COUNT, aValue );
+                    XmlNamespace::META, XML_TABLE_COUNT, aValue );
             else if ( rDocStat.Name == "ObjectCount" )
                 mrExport.AddAttribute(
-                    XML_NAMESPACE_META, XML_OBJECT_COUNT, aValue );
+                    XmlNamespace::META, XML_OBJECT_COUNT, aValue );
             else if ( rDocStat.Name == "ImageCount" )
                 mrExport.AddAttribute(
-                    XML_NAMESPACE_META, XML_IMAGE_COUNT, aValue );
+                    XmlNamespace::META, XML_IMAGE_COUNT, aValue );
             else if ( rDocStat.Name == "PageCount" )
                 mrExport.AddAttribute(
-                    XML_NAMESPACE_META, XML_PAGE_COUNT, aValue );
+                    XmlNamespace::META, XML_PAGE_COUNT, aValue );
             else if ( rDocStat.Name == "ParagraphCount" )
                 mrExport.AddAttribute(
-                    XML_NAMESPACE_META, XML_PARAGRAPH_COUNT, aValue );
+                    XmlNamespace::META, XML_PARAGRAPH_COUNT, aValue );
             else if ( rDocStat.Name == "WordCount" )
                 mrExport.AddAttribute(
-                    XML_NAMESPACE_META, XML_WORD_COUNT, aValue );
+                    XmlNamespace::META, XML_WORD_COUNT, aValue );
             else if ( rDocStat.Name == "CharacterCount" )
                 mrExport.AddAttribute(
-                    XML_NAMESPACE_META, XML_CHARACTER_COUNT, aValue );
+                    XmlNamespace::META, XML_CHARACTER_COUNT, aValue );
             else if ( rDocStat.Name == "CellCount" )
                 mrExport.AddAttribute(
-                    XML_NAMESPACE_META, XML_CELL_COUNT, aValue );
+                    XmlNamespace::META, XML_CELL_COUNT, aValue );
             else
             {
                 SAL_WARN("xmloff", "Unknown statistic value!");
@@ -291,7 +291,7 @@ void SvXMLMetaExport::MExport_()
         }
     }
     SvXMLElementExport aElem( mrExport,
-        XML_NAMESPACE_META, XML_DOCUMENT_STATISTIC, true, true );
+        XmlNamespace::META, XML_DOCUMENT_STATISTIC, true, true );
 }
 
 const char s_xmlns[] = "xmlns";
@@ -336,7 +336,7 @@ void SvXMLMetaExport::Export()
         xSAXable->serialize(this, comphelper::containerToSequence(namespaces));
     } else {
         // office:meta
-        SvXMLElementExport aElem( mrExport, XML_NAMESPACE_OFFICE, XML_META,
+        SvXMLElementExport aElem( mrExport, XmlNamespace::OFFICE, XML_META,
                                   true, true );
         // fall back to using public interface of XDocumentProperties
         MExport_();
diff --git a/xmloff/source/meta/xmlversion.cxx b/xmloff/source/meta/xmlversion.cxx
index aef970778267..fde48b3866ef 100644
--- a/xmloff/source/meta/xmlversion.cxx
+++ b/xmloff/source/meta/xmlversion.cxx
@@ -51,9 +51,9 @@ XMLVersionListExport::XMLVersionListExport(
     maVersions( rVersions )
 {
     GetNamespaceMap_().AddAtIndex( xmloff::token::GetXMLToken(xmloff::token::XML_NP_DC),
-                                   xmloff::token::GetXMLToken(xmloff::token::XML_N_DC), XML_NAMESPACE_DC );
+                                   xmloff::token::GetXMLToken(xmloff::token::XML_N_DC), XmlNamespace::DC );
     GetNamespaceMap_().AddAtIndex( xmloff::token::GetXMLToken(xmloff::token::XML_NP_VERSIONS_LIST),
-                                   xmloff::token::GetXMLToken(xmloff::token::XML_N_VERSIONS_LIST), XML_NAMESPACE_FRAMEWORK );
+                                   xmloff::token::GetXMLToken(xmloff::token::XML_N_VERSIONS_LIST), XmlNamespace::FRAMEWORK );
 }
 
 ErrCode XMLVersionListExport::exportDoc( enum ::xmloff::token::XMLTokenEnum )
@@ -62,38 +62,38 @@ ErrCode XMLVersionListExport::exportDoc( enum ::xmloff::token::XMLTokenEnum )
 
     addChaffWhenEncryptedStorage();
 
-    sal_uInt16 nPos = SvXMLNamespaceMap::GetIndexByKey( XML_NAMESPACE_DC );
+    sal_uInt16 nPos = SvXMLNamespaceMap::GetIndexByKey( XmlNamespace::DC );
 
-    AddAttribute( XML_NAMESPACE_NONE, GetNamespaceMap_().GetAttrNameByIndex( nPos ),
+    AddAttribute( XmlNamespace::NONE, GetNamespaceMap_().GetAttrNameByIndex( nPos ),
                              GetNamespaceMap_().GetNameByIndex ( nPos ) );
 
-    nPos = SvXMLNamespaceMap::GetIndexByKey( XML_NAMESPACE_FRAMEWORK );
-    AddAttribute( XML_NAMESPACE_NONE, GetNamespaceMap_().GetAttrNameByIndex( nPos ),
+    nPos = SvXMLNamespaceMap::GetIndexByKey( XmlNamespace::FRAMEWORK );
+    AddAttribute( XmlNamespace::NONE, GetNamespaceMap_().GetAttrNameByIndex( nPos ),
                              GetNamespaceMap_().GetNameByIndex ( nPos ) );
 
     {
         // the following object will write all collected attributes in its dtor
-        SvXMLElementExport aRoot( *this, XML_NAMESPACE_FRAMEWORK, xmloff::token::XML_VERSION_LIST, true, true );
+        SvXMLElementExport aRoot( *this, XmlNamespace::FRAMEWORK, xmloff::token::XML_VERSION_LIST, true, true );
 
         for ( const util::RevisionTag& rInfo : maVersions )
         {
-            AddAttribute( XML_NAMESPACE_FRAMEWORK,
+            AddAttribute( XmlNamespace::FRAMEWORK,
                           xmloff::token::XML_TITLE,
                           rInfo.Identifier );
-            AddAttribute( XML_NAMESPACE_FRAMEWORK,
+            AddAttribute( XmlNamespace::FRAMEWORK,
                           xmloff::token::XML_COMMENT,
                           rInfo.Comment );
-            AddAttribute( XML_NAMESPACE_FRAMEWORK,
+            AddAttribute( XmlNamespace::FRAMEWORK,
                           xmloff::token::XML_CREATOR,
                           rInfo.Author );
 
             OUString aDateStr =
                 SvXMLMetaExport::GetISODateTimeString( rInfo.TimeStamp );
 
-            AddAttribute( XML_NAMESPACE_DC, xmloff::token::XML_DATE_TIME, aDateStr );
+            AddAttribute( XmlNamespace::DC, xmloff::token::XML_DATE_TIME, aDateStr );
 
             // the following object will write all collected attributes in its dtor
-            SvXMLElementExport aEntry( *this, XML_NAMESPACE_FRAMEWORK, xmloff::token::XML_VERSION_ENTRY, true, true );
+            SvXMLElementExport aEntry( *this, XmlNamespace::FRAMEWORK, xmloff::token::XML_VERSION_ENTRY, true, true );
         }
     }
     GetDocHandler()->endDocument();
diff --git a/xmloff/source/script/XMLEventExport.cxx b/xmloff/source/script/XMLEventExport.cxx
index 4d48107168cf..c9e28c83dfe9 100644
--- a/xmloff/source/script/XMLEventExport.cxx
+++ b/xmloff/source/script/XMLEventExport.cxx
@@ -141,7 +141,7 @@ void XMLEventExport::Export( Reference<XNameAccess> const & rAccess,
 
 void XMLEventExport::ExportExt( Reference<XNameAccess> const & rAccess )
 {
-    // set bExtNamespace flag to use XML_NAMESPACE_OFFICE_EXT namespace
+    // set bExtNamespace flag to use XmlNamespace::OFFICE_EXT namespace
     // for events element (not for child elements)
     bExtNamespace = true;
     Export(rAccess);
@@ -232,16 +232,16 @@ void XMLEventExport::StartElement(bool bWhitespace)
     {
         rExport.IgnorableWhitespace();
     }
-    sal_uInt16 nNamespace = bExtNamespace ? XML_NAMESPACE_OFFICE_EXT
-                                          : XML_NAMESPACE_OFFICE;
+    sal_uInt16 nNamespace = bExtNamespace ? XmlNamespace::OFFICE_EXT
+                                          : XmlNamespace::OFFICE;
     rExport.StartElement( nNamespace, XML_EVENT_LISTENERS,
                           bWhitespace);
 }
 
 void XMLEventExport::EndElement(bool bWhitespace)
 {
-    sal_uInt16 nNamespace = bExtNamespace ? XML_NAMESPACE_OFFICE_EXT
-                                          : XML_NAMESPACE_OFFICE;
+    sal_uInt16 nNamespace = bExtNamespace ? XmlNamespace::OFFICE_EXT
+                                          : XmlNamespace::OFFICE;
     rExport.EndElement(nNamespace, XML_EVENT_LISTENERS, bWhitespace);
     if (bWhitespace)
     {
@@ -253,66 +253,66 @@ void XMLEventExport::EndElement(bool bWhitespace)
 // implement aStandardEventTable (defined in xmlevent.hxx)
 const XMLEventNameTranslation aStandardEventTable[] =
 {
-    { "OnSelect",           XML_NAMESPACE_DOM, "select" }, // "on-select"
-    { "OnInsertStart",      XML_NAMESPACE_OFFICE, "insert-start" }, // "on-insert-start"
-    { "OnInsertDone",       XML_NAMESPACE_OFFICE, "insert-done" }, // "on-insert-done"
-    { "OnMailMerge",        XML_NAMESPACE_OFFICE, "mail-merge" }, // "on-mail-merge"
-    { "OnAlphaCharInput",   XML_NAMESPACE_OFFICE, "alpha-char-input" }, // "on-alpha-char-input"
-    { "OnNonAlphaCharInput",    XML_NAMESPACE_OFFICE, "non-alpha-char-input" }, // "on-non-alpha-char-input"
-    { "OnResize",           XML_NAMESPACE_DOM, "resize" }, // "on-resize"
-    { "OnMove",             XML_NAMESPACE_OFFICE, "move" }, // "on-move"
-    { "OnPageCountChange",  XML_NAMESPACE_OFFICE, "page-count-change" }, // "on-page-count-change"
-    { "OnMouseOver",        XML_NAMESPACE_DOM, "mouseover" }, // "on-mouse-over"
-    { "OnClick",            XML_NAMESPACE_DOM, "click" }, // "on-click"
-    { "OnMouseOut",         XML_NAMESPACE_DOM, "mouseout" }, // "on-mouse-out"
-    { "OnLoadError",        XML_NAMESPACE_OFFICE, "load-error" }, // "on-load-error"
-    { "OnLoadCancel",       XML_NAMESPACE_OFFICE, "load-cancel" }, // "on-load-cancel"
-    { "OnLoadDone",         XML_NAMESPACE_OFFICE, "load-done" }, // "on-load-done"
-    { "OnLoad",             XML_NAMESPACE_DOM, "load" }, // "on-load"
-    { "OnUnload",           XML_NAMESPACE_DOM, "unload" }, // "on-unload"
-    { "OnStartApp",         XML_NAMESPACE_OFFICE, "start-app" }, // "on-start-app"
-    { "OnCloseApp",         XML_NAMESPACE_OFFICE, "close-app" }, // "on-close-app"
-    { "OnNew",              XML_NAMESPACE_OFFICE, "new" }, // "on-new"
-    { "OnSave",             XML_NAMESPACE_OFFICE, "save" }, // "on-save"
-    { "OnSaveAs",           XML_NAMESPACE_OFFICE, "save-as" }, // "on-save-as"
-    { "OnFocus",            XML_NAMESPACE_DOM, "DOMFocusIn" }, // "on-focus"
-    { "OnUnfocus",          XML_NAMESPACE_DOM, "DOMFocusOut" }, // "on-unfocus"
-    { "OnPrint",            XML_NAMESPACE_OFFICE, "print" }, // "on-print"
-    { "OnError",            XML_NAMESPACE_DOM, "error" }, // "on-error"
-    { "OnLoadFinished",     XML_NAMESPACE_OFFICE, "load-finished" }, // "on-load-finished"
-    { "OnSaveFinished",     XML_NAMESPACE_OFFICE, "save-finished" }, // "on-save-finished"
-    { "OnModifyChanged",    XML_NAMESPACE_OFFICE, "modify-changed" }, // "on-modify-changed"
-    { "OnPrepareUnload",    XML_NAMESPACE_OFFICE, "prepare-unload" }, // "on-prepare-unload"
-    { "OnNewMail",          XML_NAMESPACE_OFFICE, "new-mail" }, // "on-new-mail"
-    { "OnToggleFullscreen", XML_NAMESPACE_OFFICE, "toggle-fullscreen" }, // "on-toggle-fullscreen"
-    { "OnSaveDone",         XML_NAMESPACE_OFFICE, "save-done" }, // "on-save-done"
-    { "OnSaveAsDone",       XML_NAMESPACE_OFFICE, "save-as-done" }, // "on-save-as-done"
-    { "OnCopyTo",           XML_NAMESPACE_OFFICE, "copy-to" },
-    { "OnCopyToDone",       XML_NAMESPACE_OFFICE, "copy-to-done" },
-    { "OnViewCreated",      XML_NAMESPACE_OFFICE, "view-created" },
-    { "OnPrepareViewClosing", XML_NAMESPACE_OFFICE, "prepare-view-closing" },
-    { "OnViewClosed",       XML_NAMESPACE_OFFICE, "view-close" },
-    { "OnVisAreaChanged",   XML_NAMESPACE_OFFICE, "visarea-changed" }, // "on-visarea-changed"
-    { "OnCreate",           XML_NAMESPACE_OFFICE, "create" },
-    { "OnSaveAsFailed",     XML_NAMESPACE_OFFICE, "save-as-failed" },
-    { "OnSaveFailed",       XML_NAMESPACE_OFFICE, "save-failed" },
-    { "OnCopyToFailed",     XML_NAMESPACE_OFFICE, "copy-to-failed" },
-    { "OnTitleChanged",     XML_NAMESPACE_OFFICE, "title-changed" },
-    { "OnModeChanged",      XML_NAMESPACE_OFFICE, "mode-changed" },
-    { "OnSaveTo",           XML_NAMESPACE_OFFICE, "save-to" },
-    { "OnSaveToDone",       XML_NAMESPACE_OFFICE, "save-to-done" },
-    { "OnSaveToFailed",     XML_NAMESPACE_OFFICE, "save-to-failed" },
-    { "OnSubComponentOpened",   XML_NAMESPACE_OFFICE, "subcomponent-opened" },
-    { "OnSubComponentClosed",   XML_NAMESPACE_OFFICE, "subcomponent-closed" },
-    { "OnStorageChanged",       XML_NAMESPACE_OFFICE, "storage-changed" },
-    { "OnMailMergeFinished",    XML_NAMESPACE_OFFICE, "mail-merge-finished" },
-    { "OnFieldMerge",           XML_NAMESPACE_OFFICE, "field-merge" },
-    { "OnFieldMergeFinished",   XML_NAMESPACE_OFFICE, "field-merge-finished" },
-    { "OnLayoutFinished",       XML_NAMESPACE_OFFICE, "layout-finished" },
-    { "OnDoubleClick",      XML_NAMESPACE_OFFICE, "dblclick" },
-    { "OnRightClick",       XML_NAMESPACE_OFFICE, "contextmenu" },
-    { "OnChange",           XML_NAMESPACE_OFFICE, "content-changed" },
-    { "OnCalculate",        XML_NAMESPACE_OFFICE, "calculated" },
+    { "OnSelect",           XmlNamespace::DOM, "select" }, // "on-select"
+    { "OnInsertStart",      XmlNamespace::OFFICE, "insert-start" }, // "on-insert-start"
+    { "OnInsertDone",       XmlNamespace::OFFICE, "insert-done" }, // "on-insert-done"
+    { "OnMailMerge",        XmlNamespace::OFFICE, "mail-merge" }, // "on-mail-merge"
+    { "OnAlphaCharInput",   XmlNamespace::OFFICE, "alpha-char-input" }, // "on-alpha-char-input"
+    { "OnNonAlphaCharInput",    XmlNamespace::OFFICE, "non-alpha-char-input" }, // "on-non-alpha-char-input"
+    { "OnResize",           XmlNamespace::DOM, "resize" }, // "on-resize"
+    { "OnMove",             XmlNamespace::OFFICE, "move" }, // "on-move"
+    { "OnPageCountChange",  XmlNamespace::OFFICE, "page-count-change" }, // "on-page-count-change"
+    { "OnMouseOver",        XmlNamespace::DOM, "mouseover" }, // "on-mouse-over"
+    { "OnClick",            XmlNamespace::DOM, "click" }, // "on-click"
+    { "OnMouseOut",         XmlNamespace::DOM, "mouseout" }, // "on-mouse-out"
+    { "OnLoadError",        XmlNamespace::OFFICE, "load-error" }, // "on-load-error"
+    { "OnLoadCancel",       XmlNamespace::OFFICE, "load-cancel" }, // "on-load-cancel"
+    { "OnLoadDone",         XmlNamespace::OFFICE, "load-done" }, // "on-load-done"
+    { "OnLoad",             XmlNamespace::DOM, "load" }, // "on-load"
+    { "OnUnload",           XmlNamespace::DOM, "unload" }, // "on-unload"
+    { "OnStartApp",         XmlNamespace::OFFICE, "start-app" }, // "on-start-app"
+    { "OnCloseApp",         XmlNamespace::OFFICE, "close-app" }, // "on-close-app"
+    { "OnNew",              XmlNamespace::OFFICE, "new" }, // "on-new"
+    { "OnSave",             XmlNamespace::OFFICE, "save" }, // "on-save"
+    { "OnSaveAs",           XmlNamespace::OFFICE, "save-as" }, // "on-save-as"
+    { "OnFocus",            XmlNamespace::DOM, "DOMFocusIn" }, // "on-focus"
+    { "OnUnfocus",          XmlNamespace::DOM, "DOMFocusOut" }, // "on-unfocus"
+    { "OnPrint",            XmlNamespace::OFFICE, "print" }, // "on-print"
+    { "OnError",            XmlNamespace::DOM, "error" }, // "on-error"
+    { "OnLoadFinished",     XmlNamespace::OFFICE, "load-finished" }, // "on-load-finished"
+    { "OnSaveFinished",     XmlNamespace::OFFICE, "save-finished" }, // "on-save-finished"
+    { "OnModifyChanged",    XmlNamespace::OFFICE, "modify-changed" }, // "on-modify-changed"
+    { "OnPrepareUnload",    XmlNamespace::OFFICE, "prepare-unload" }, // "on-prepare-unload"
+    { "OnNewMail",          XmlNamespace::OFFICE, "new-mail" }, // "on-new-mail"
+    { "OnToggleFullscreen", XmlNamespace::OFFICE, "toggle-fullscreen" }, // "on-toggle-fullscreen"
+    { "OnSaveDone",         XmlNamespace::OFFICE, "save-done" }, // "on-save-done"
+    { "OnSaveAsDone",       XmlNamespace::OFFICE, "save-as-done" }, // "on-save-as-done"
+    { "OnCopyTo",           XmlNamespace::OFFICE, "copy-to" },
+    { "OnCopyToDone",       XmlNamespace::OFFICE, "copy-to-done" },
+    { "OnViewCreated",      XmlNamespace::OFFICE, "view-created" },
+    { "OnPrepareViewClosing", XmlNamespace::OFFICE, "prepare-view-closing" },
+    { "OnViewClosed",       XmlNamespace::OFFICE, "view-close" },
+    { "OnVisAreaChanged",   XmlNamespace::OFFICE, "visarea-changed" }, // "on-visarea-changed"
+    { "OnCreate",           XmlNamespace::OFFICE, "create" },
+    { "OnSaveAsFailed",     XmlNamespace::OFFICE, "save-as-failed" },
+    { "OnSaveFailed",       XmlNamespace::OFFICE, "save-failed" },
+    { "OnCopyToFailed",     XmlNamespace::OFFICE, "copy-to-failed" },
+    { "OnTitleChanged",     XmlNamespace::OFFICE, "title-changed" },
+    { "OnModeChanged",      XmlNamespace::OFFICE, "mode-changed" },
+    { "OnSaveTo",           XmlNamespace::OFFICE, "save-to" },
+    { "OnSaveToDone",       XmlNamespace::OFFICE, "save-to-done" },
+    { "OnSaveToFailed",     XmlNamespace::OFFICE, "save-to-failed" },
+    { "OnSubComponentOpened",   XmlNamespace::OFFICE, "subcomponent-opened" },
+    { "OnSubComponentClosed",   XmlNamespace::OFFICE, "subcomponent-closed" },
+    { "OnStorageChanged",       XmlNamespace::OFFICE, "storage-changed" },
+    { "OnMailMergeFinished",    XmlNamespace::OFFICE, "mail-merge-finished" },
+    { "OnFieldMerge",           XmlNamespace::OFFICE, "field-merge" },
+    { "OnFieldMergeFinished",   XmlNamespace::OFFICE, "field-merge-finished" },
+    { "OnLayoutFinished",       XmlNamespace::OFFICE, "layout-finished" },
+    { "OnDoubleClick",      XmlNamespace::OFFICE, "dblclick" },
+    { "OnRightClick",       XmlNamespace::OFFICE, "contextmenu" },
+    { "OnChange",           XmlNamespace::OFFICE, "content-changed" },
+    { "OnCalculate",        XmlNamespace::OFFICE, "calculated" },
 
     { nullptr, 0, nullptr }
 };
diff --git a/xmloff/source/script/XMLEventImportHelper.cxx b/xmloff/source/script/XMLEventImportHelper.cxx
index 9399477e4d1b..987774c1a88c 100644
--- a/xmloff/source/script/XMLEventImportHelper.cxx
+++ b/xmloff/source/script/XMLEventImportHelper.cxx
@@ -120,7 +120,7 @@ SvXMLImportContext* XMLEventImportHelper::CreateContext(
         OUString aScriptLanguage;
         sal_uInt16 nScriptPrefix = rImport.GetNamespaceMap().
                 GetKeyByAttrValueQName(rLanguage, &aScriptLanguage);
-        if( XML_NAMESPACE_OOO != nScriptPrefix )
+        if( XmlNamespace::OOO != nScriptPrefix )
             aScriptLanguage = rLanguage ;
 
         // check for factory
diff --git a/xmloff/source/script/XMLEventsImportContext.cxx b/xmloff/source/script/XMLEventsImportContext.cxx
index 5960b5215e91..194fb6e08d92 100644
--- a/xmloff/source/script/XMLEventsImportContext.cxx
+++ b/xmloff/source/script/XMLEventsImportContext.cxx
@@ -121,7 +121,7 @@ SvXMLImportContextRef XMLEventsImportContext::CreateChildContext(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr), &sLocalName );
 
-        if (XML_NAMESPACE_SCRIPT == nPrefix)
+        if (XmlNamespace::SCRIPT == nPrefix)
         {
             if (IsXMLToken(sLocalName, XML_EVENT_NAME))
             {
diff --git a/xmloff/source/script/XMLScriptContextFactory.cxx b/xmloff/source/script/XMLScriptContextFactory.cxx
index 041dbdf6dab6..4b446caedb97 100644
--- a/xmloff/source/script/XMLScriptContextFactory.cxx
+++ b/xmloff/source/script/XMLScriptContextFactory.cxx
@@ -59,7 +59,7 @@ SvXMLImportContext * XMLScriptContextFactory::CreateContext
         sal_uInt16 nPrefix = rImport.GetNamespaceMap().
             GetKeyByAttrName(xAttrList->getNameByIndex(nAttr), &sLocalName);
 
-        if (XML_NAMESPACE_XLINK == nPrefix)
+        if (XmlNamespace::XLINK == nPrefix)
         {
             if (IsXMLToken(sLocalName, XML_HREF))
                 sURLVal = xAttrList->getValueByIndex(nAttr);
diff --git a/xmloff/source/script/XMLScriptExportHandler.cxx b/xmloff/source/script/XMLScriptExportHandler.cxx
index b704fe33239b..fd00f12e695b 100644
--- a/xmloff/source/script/XMLScriptExportHandler.cxx
+++ b/xmloff/source/script/XMLScriptExportHandler.cxx
@@ -48,10 +48,10 @@ void XMLScriptExportHandler::Export(
     bool bUseWhitespace)
 {
 
-    rExport.AddAttribute(XML_NAMESPACE_SCRIPT, XML_LANGUAGE,
+    rExport.AddAttribute(XmlNamespace::SCRIPT, XML_LANGUAGE,
                          rExport.GetNamespaceMap().GetQNameByKey(
-                             XML_NAMESPACE_OOO, GetXMLToken(XML_SCRIPT) ) );
-    rExport.AddAttribute(XML_NAMESPACE_SCRIPT, XML_EVENT_NAME, rEventQName);
+                             XmlNamespace::OOO, GetXMLToken(XML_SCRIPT) ) );
+    rExport.AddAttribute(XmlNamespace::SCRIPT, XML_EVENT_NAME, rEventQName);
 
     for(const auto& rValue : rValues)
     {
@@ -59,15 +59,15 @@ void XMLScriptExportHandler::Export(
         {
             OUString sTmp;
             rValue.Value >>= sTmp;
-            rExport.AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sTmp);
+            rExport.AddAttribute(XmlNamespace::XLINK, XML_HREF, sTmp);
 
             // #i110911# xlink:type="simple" is required
-            rExport.AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE);
+            rExport.AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE);
         }
         // else: disregard
     }
 
-    SvXMLElementExport aEventElemt(rExport, XML_NAMESPACE_SCRIPT,
+    SvXMLElementExport aEventElemt(rExport, XmlNamespace::SCRIPT,
                                    XML_EVENT_LISTENER,
                                    bUseWhitespace, false);
 }
diff --git a/xmloff/source/script/XMLStarBasicContextFactory.cxx b/xmloff/source/script/XMLStarBasicContextFactory.cxx
index 450a232eeac8..b9d03084c781 100644
--- a/xmloff/source/script/XMLStarBasicContextFactory.cxx
+++ b/xmloff/source/script/XMLStarBasicContextFactory.cxx
@@ -62,7 +62,7 @@ SvXMLImportContext* XMLStarBasicContextFactory::CreateContext(
         sal_uInt16 nPrefix = rImport.GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr), &sLocalName );
 
-        if (XML_NAMESPACE_SCRIPT == nPrefix)
+        if (XmlNamespace::SCRIPT == nPrefix)
         {
             if (IsXMLToken(sLocalName, XML_MACRO_NAME))
             {
diff --git a/xmloff/source/script/XMLStarBasicExportHandler.cxx b/xmloff/source/script/XMLStarBasicExportHandler.cxx
index cc5bbb835c96..d4531e3227ae 100644
--- a/xmloff/source/script/XMLStarBasicExportHandler.cxx
+++ b/xmloff/source/script/XMLStarBasicExportHandler.cxx
@@ -52,10 +52,10 @@ void XMLStarBasicExportHandler::Export(
     const Sequence<PropertyValue> & rValues,
     bool bUseWhitespace)
 {
-    rExport.AddAttribute(XML_NAMESPACE_SCRIPT, XML_LANGUAGE,
+    rExport.AddAttribute(XmlNamespace::SCRIPT, XML_LANGUAGE,
                          rExport.GetNamespaceMap().GetQNameByKey(
-                             XML_NAMESPACE_OOO, gsStarBasic ) );
-    rExport.AddAttribute(XML_NAMESPACE_SCRIPT, XML_EVENT_NAME, rEventQName);
+                             XmlNamespace::OOO, gsStarBasic ) );
+    rExport.AddAttribute(XmlNamespace::SCRIPT, XML_EVENT_NAME, rEventQName);
 
     OUString sLocation, sName;
     for(const auto& rValue : rValues)
@@ -79,15 +79,15 @@ void XMLStarBasicExportHandler::Export(
     if( !sLocation.isEmpty() )
     {
         OUString sTmp = sLocation + ":" + sName;
-        rExport.AddAttribute(XML_NAMESPACE_SCRIPT, XML_MACRO_NAME,
+        rExport.AddAttribute(XmlNamespace::SCRIPT, XML_MACRO_NAME,
                             sTmp);
     }
     else
     {
-        rExport.AddAttribute(XML_NAMESPACE_SCRIPT, XML_MACRO_NAME, sName );
+        rExport.AddAttribute(XmlNamespace::SCRIPT, XML_MACRO_NAME, sName );
     }
 
-    SvXMLElementExport aEventElemt(rExport, XML_NAMESPACE_SCRIPT,
+    SvXMLElementExport aEventElemt(rExport, XmlNamespace::SCRIPT,
                                    XML_EVENT_LISTENER,
                                    bUseWhitespace, false);
 }
diff --git a/xmloff/source/script/xmlbasicscript.cxx b/xmloff/source/script/xmlbasicscript.cxx
index efc655eca682..499ffabb7013 100644
--- a/xmloff/source/script/xmlbasicscript.cxx
+++ b/xmloff/source/script/xmlbasicscript.cxx
@@ -109,18 +109,18 @@ Reference<XFastContextHandler>
 BasicLibrariesElement::createFastChildContext(sal_Int32 nElement,
                                               const Reference<XFastAttributeList>& xAttributes)
 {
-    if (!IsTokenInNamespace(nElement, XML_NAMESPACE_OOO))
+    if (!IsTokenInNamespace(nElement, XmlNamespace::OOO))
     {
         throw xml::sax::SAXException("illegal namespace!", Reference<XInterface>(), Any());
     }
     else if ((nElement & TOKEN_MASK) == XML_LIBRARY_LINKED)
     {
-        OUString aName = xAttributes->getValue(NAMESPACE_TOKEN(XML_NAMESPACE_OOO) | XML_NAME);
+        OUString aName = xAttributes->getValue(NAMESPACE_TOKEN(XmlNamespace::OOO) | XML_NAME);
 
         OUString aStorageURL = xAttributes->getValue(XML_ELEMENT(XLINK, XML_HREF));
 
         bool bReadOnly = false;
-        getBoolAttr(&bReadOnly, NAMESPACE_TOKEN(XML_NAMESPACE_OOO) | XML_READONLY, xAttributes);
+        getBoolAttr(&bReadOnly, NAMESPACE_TOKEN(XmlNamespace::OOO) | XML_READONLY, xAttributes);
 
         if (m_xLibContainer.is())
         {
@@ -147,10 +147,10 @@ BasicLibrariesElement::createFastChildContext(sal_Int32 nElement,
     {
         // TODO: create password protected libraries
 
-        OUString aName = xAttributes->getValue(NAMESPACE_TOKEN(XML_NAMESPACE_OOO) | XML_NAME);
+        OUString aName = xAttributes->getValue(NAMESPACE_TOKEN(XmlNamespace::OOO) | XML_NAME);
 
         bool bReadOnly = false;
-        getBoolAttr(&bReadOnly, NAMESPACE_TOKEN(XML_NAMESPACE_OOO) | XML_READONLY, xAttributes);
+        getBoolAttr(&bReadOnly, NAMESPACE_TOKEN(XmlNamespace::OOO) | XML_READONLY, xAttributes);
 
         if (m_xLibContainer.is())
         {
@@ -211,13 +211,13 @@ BasicEmbeddedLibraryElement::BasicEmbeddedLibraryElement(
 Reference<XFastContextHandler> BasicEmbeddedLibraryElement::createFastChildContext(
     sal_Int32 nElement, const Reference<XFastAttributeList>& xAttributes)
 {
-    if (!IsTokenInNamespace(nElement, XML_NAMESPACE_OOO))
+    if (!IsTokenInNamespace(nElement, XmlNamespace::OOO))
     {
         throw xml::sax::SAXException("illegal namespace!", Reference<XInterface>(), Any());
     }
     else if ((nElement & TOKEN_MASK) == XML_MODULE)
     {
-        OUString aName = xAttributes->getValue(NAMESPACE_TOKEN(XML_NAMESPACE_OOO) | XML_NAME);
+        OUString aName = xAttributes->getValue(NAMESPACE_TOKEN(XmlNamespace::OOO) | XML_NAME);
 
         if (m_xLib.is() && !aName.isEmpty())
             return new BasicModuleElement(GetImport(), m_xLib, aName);
@@ -253,7 +253,7 @@ BasicModuleElement::createFastChildContext(sal_Int32 nElement,
 {
     // TODO: <byte-code>
 
-    if (!IsTokenInNamespace(nElement, XML_NAMESPACE_OOO))
+    if (!IsTokenInNamespace(nElement, XmlNamespace::OOO))
     {
         throw xml::sax::SAXException("illegal namespace!", Reference<XInterface>(), Any());
     }
diff --git a/xmloff/source/script/xmlscripti.cxx b/xmloff/source/script/xmlscripti.cxx
index a8bf2ab36047..e56ee6a09834 100644
--- a/xmloff/source/script/xmlscripti.cxx
+++ b/xmloff/source/script/xmlscripti.cxx
@@ -75,7 +75,7 @@ css::uno::Reference< css::xml::sax::XFastContextHandler > XMLScriptChildContext:
 {
     if ( m_xDocumentScripts.is() )
     {   // document supports embedding scripts/macros
-        OUString aBasic( GetImport().GetNamespaceMap().GetPrefixByKey( XML_NAMESPACE_OOO ) + ":Basic" );
+        OUString aBasic( GetImport().GetNamespaceMap().GetPrefixByKey( XmlNamespace::OOO ) + ":Basic" );
 
         if ( m_aLanguage == aBasic && nElement == XML_ELEMENT(OOO, XML_LIBRARIES) )
         {
diff --git a/xmloff/source/style/DashStyle.cxx b/xmloff/source/style/DashStyle.cxx
index d88e18fa0550..74252439e8f7 100644
--- a/xmloff/source/style/DashStyle.cxx
+++ b/xmloff/source/style/DashStyle.cxx
@@ -57,14 +57,14 @@ enum SvXMLTokenMapAttrs
 
 const SvXMLTokenMapEntry aDashStyleAttrTokenMap[] =
 {
-    { XML_NAMESPACE_DRAW, XML_NAME,             XML_TOK_DASH_NAME },
-    { XML_NAMESPACE_DRAW, XML_DISPLAY_NAME,     XML_TOK_DASH_DISPLAY_NAME },
-    { XML_NAMESPACE_DRAW, XML_STYLE,            XML_TOK_DASH_STYLE },
-    { XML_NAMESPACE_DRAW, XML_DOTS1,            XML_TOK_DASH_DOTS1 },
-    { XML_NAMESPACE_DRAW, XML_DOTS1_LENGTH,     XML_TOK_DASH_DOTS1LEN },
-    { XML_NAMESPACE_DRAW, XML_DOTS2,            XML_TOK_DASH_DOTS2 },
-    { XML_NAMESPACE_DRAW, XML_DOTS2_LENGTH,     XML_TOK_DASH_DOTS2LEN },
-    { XML_NAMESPACE_DRAW, XML_DISTANCE,         XML_TOK_DASH_DISTANCE },
+    { XmlNamespace::DRAW, XML_NAME,             XML_TOK_DASH_NAME },
+    { XmlNamespace::DRAW, XML_DISPLAY_NAME,     XML_TOK_DASH_DISPLAY_NAME },
+    { XmlNamespace::DRAW, XML_STYLE,            XML_TOK_DASH_STYLE },
+    { XmlNamespace::DRAW, XML_DOTS1,            XML_TOK_DASH_DOTS1 },
+    { XmlNamespace::DRAW, XML_DOTS1_LENGTH,     XML_TOK_DASH_DOTS1LEN },
+    { XmlNamespace::DRAW, XML_DOTS2,            XML_TOK_DASH_DOTS2 },
+    { XmlNamespace::DRAW, XML_DOTS2_LENGTH,     XML_TOK_DASH_DOTS2LEN },
+    { XmlNamespace::DRAW, XML_DISTANCE,         XML_TOK_DASH_DISTANCE },
     XML_TOKEN_MAP_END
 };
 
@@ -236,22 +236,22 @@ void XMLDashStyleExport::exportXML(
 
     // Name
     bool bEncoded = false;
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME,
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_NAME,
                           rExport.EncodeStyleName( rStrName,
                                                    &bEncoded ) );
     if( bEncoded )
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISPLAY_NAME,
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_DISPLAY_NAME,
                               rStrName );
 
     // Style
     SvXMLUnitConverter::convertEnum( aOut, aLineDash.Style, pXML_DashStyle_Enum );
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_STYLE, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_STYLE, aStrValue );
 
     // dots
     if( aLineDash.Dots )
     {
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DOTS1, OUString::number( aLineDash.Dots ) );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_DOTS1, OUString::number( aLineDash.Dots ) );
 
         if( aLineDash.DotLen )
         {
@@ -266,14 +266,14 @@ void XMLDashStyleExport::exportXML(
                         aLineDash.DotLen );
             }
             aStrValue = aOut.makeStringAndClear();
-            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DOTS1_LENGTH, aStrValue );
+            rExport.AddAttribute( XmlNamespace::DRAW, XML_DOTS1_LENGTH, aStrValue );
         }
     }
 
     // dashes
     if( aLineDash.Dashes )
     {
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DOTS2, OUString::number( aLineDash.Dashes ) );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_DOTS2, OUString::number( aLineDash.Dashes ) );
 
         if( aLineDash.DashLen )
         {
@@ -288,7 +288,7 @@ void XMLDashStyleExport::exportXML(
                         aLineDash.DashLen );
             }
             aStrValue = aOut.makeStringAndClear();
-            rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DOTS2_LENGTH, aStrValue );
+            rExport.AddAttribute( XmlNamespace::DRAW, XML_DOTS2_LENGTH, aStrValue );
         }
     }
 
@@ -303,11 +303,11 @@ void XMLDashStyleExport::exportXML(
                 aLineDash.Distance );
     }
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISTANCE, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_DISTANCE, aStrValue );
 
     // do Write
     SvXMLElementExport rElem( rExport,
-                              XML_NAMESPACE_DRAW, XML_STROKE_DASH,
+                              XmlNamespace::DRAW, XML_STROKE_DASH,
                               true, false );
 }
 
diff --git a/xmloff/source/style/FillStyleContext.cxx b/xmloff/source/style/FillStyleContext.cxx
index e4f93a6b2a20..4f02f5ea896a 100644
--- a/xmloff/source/style/FillStyleContext.cxx
+++ b/xmloff/source/style/FillStyleContext.cxx
@@ -135,7 +135,7 @@ XMLBitmapStyleContext::~XMLBitmapStyleContext()
 SvXMLImportContextRef XMLBitmapStyleContext::CreateChildContext( sal_uInt16 nPrefix, const OUString& rLocalName, const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList )
 {
     SvXMLImportContext *pContext = nullptr;
-    if( (XML_NAMESPACE_OFFICE == nPrefix) && xmloff::token::IsXMLToken( rLocalName, xmloff::token::XML_BINARY_DATA ) )
+    if( (XmlNamespace::OFFICE == nPrefix) && xmloff::token::IsXMLToken( rLocalName, xmloff::token::XML_BINARY_DATA ) )
     {
         OUString sURL;
         maAny >>= sURL;
diff --git a/xmloff/source/style/GradientStyle.cxx b/xmloff/source/style/GradientStyle.cxx
index 1bf437178378..8b9edec8bfba 100644
--- a/xmloff/source/style/GradientStyle.cxx
+++ b/xmloff/source/style/GradientStyle.cxx
@@ -55,7 +55,7 @@ enum SvXMLTokenMapAttrs
     XML_TOK_GRADIENT_ENDINT,
     XML_TOK_GRADIENT_ANGLE,
     XML_TOK_GRADIENT_BORDER,
-    XML_TOK_TABSTOP_END=XML_TOK_UNKNOWN
+    XML_TOK_TABSTOP_END=XmlNamespace::UNKNOWN
 };
 
 }
@@ -89,17 +89,17 @@ void XMLGradientStyleImport::importXML(
 {
     static const SvXMLTokenMapEntry aGradientAttrTokenMap[] =
     {
-        { XML_NAMESPACE_DRAW, XML_NAME, XML_TOK_GRADIENT_NAME },
-        { XML_NAMESPACE_DRAW, XML_DISPLAY_NAME, XML_TOK_GRADIENT_DISPLAY_NAME },
-        { XML_NAMESPACE_DRAW, XML_STYLE, XML_TOK_GRADIENT_STYLE },
-        { XML_NAMESPACE_DRAW, XML_CX, XML_TOK_GRADIENT_CX },
-        { XML_NAMESPACE_DRAW, XML_CY, XML_TOK_GRADIENT_CY },
-        { XML_NAMESPACE_DRAW, XML_START_COLOR, XML_TOK_GRADIENT_STARTCOLOR },
-        { XML_NAMESPACE_DRAW, XML_END_COLOR, XML_TOK_GRADIENT_ENDCOLOR },
-        { XML_NAMESPACE_DRAW, XML_START_INTENSITY, XML_TOK_GRADIENT_STARTINT },
-        { XML_NAMESPACE_DRAW, XML_END_INTENSITY, XML_TOK_GRADIENT_ENDINT },
-        { XML_NAMESPACE_DRAW, XML_GRADIENT_ANGLE, XML_TOK_GRADIENT_ANGLE },
-        { XML_NAMESPACE_DRAW, XML_BORDER, XML_TOK_GRADIENT_BORDER, },
+        { XmlNamespace::DRAW, XML_NAME, XML_TOK_GRADIENT_NAME },
+        { XmlNamespace::DRAW, XML_DISPLAY_NAME, XML_TOK_GRADIENT_DISPLAY_NAME },
+        { XmlNamespace::DRAW, XML_STYLE, XML_TOK_GRADIENT_STYLE },
+        { XmlNamespace::DRAW, XML_CX, XML_TOK_GRADIENT_CX },
+        { XmlNamespace::DRAW, XML_CY, XML_TOK_GRADIENT_CY },
+        { XmlNamespace::DRAW, XML_START_COLOR, XML_TOK_GRADIENT_STARTCOLOR },
+        { XmlNamespace::DRAW, XML_END_COLOR, XML_TOK_GRADIENT_ENDCOLOR },
+        { XmlNamespace::DRAW, XML_START_INTENSITY, XML_TOK_GRADIENT_STARTINT },
+        { XmlNamespace::DRAW, XML_END_INTENSITY, XML_TOK_GRADIENT_ENDINT },
+        { XmlNamespace::DRAW, XML_GRADIENT_ANGLE, XML_TOK_GRADIENT_ANGLE },
+        { XmlNamespace::DRAW, XML_BORDER, XML_TOK_GRADIENT_BORDER, },
         XML_TOKEN_MAP_END
     };
 
@@ -225,15 +225,15 @@ void XMLGradientStyleExport::exportXML(
 
     // Name
     bool bEncoded = false;
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME,
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_NAME,
                           rExport.EncodeStyleName( rStrName,
                                                     &bEncoded ) );
     if( bEncoded )
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISPLAY_NAME,
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_DISPLAY_NAME,
                                 rStrName );
 
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_STYLE, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_STYLE, aStrValue );
 
     // Center x/y
     if( aGradient.Style != awt::GradientStyle_LINEAR &&
@@ -241,47 +241,47 @@ void XMLGradientStyleExport::exportXML(
     {
         ::sax::Converter::convertPercent(aOut, aGradient.XOffset);
         aStrValue = aOut.makeStringAndClear();
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CX, aStrValue );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_CX, aStrValue );
         ::sax::Converter::convertPercent(aOut, aGradient.YOffset);
         aStrValue = aOut.makeStringAndClear();
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CY, aStrValue );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_CY, aStrValue );
     }
 
     // Color start
     ::sax::Converter::convertColor(aOut, aGradient.StartColor);
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_START_COLOR, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_START_COLOR, aStrValue );
 
     // Color end
     ::sax::Converter::convertColor(aOut, aGradient.EndColor);
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_END_COLOR, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_END_COLOR, aStrValue );
 
     // Intensity start
     ::sax::Converter::convertPercent(aOut, aGradient.StartIntensity);
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_START_INTENSITY, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_START_INTENSITY, aStrValue );
 
     // Intensity end
     ::sax::Converter::convertPercent(aOut, aGradient.EndIntensity);
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_END_INTENSITY, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_END_INTENSITY, aStrValue );
 
     // Angle
     if( aGradient.Style != awt::GradientStyle_RADIAL )
     {
         ::sax::Converter::convertAngle(aOut, aGradient.Angle, rExport.getSaneDefaultVersion());
         aStrValue = aOut.makeStringAndClear();
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_GRADIENT_ANGLE, aStrValue );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_GRADIENT_ANGLE, aStrValue );
     }
 
     // Border
     ::sax::Converter::convertPercent( aOut, aGradient.Border );
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_BORDER, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_BORDER, aStrValue );
 
     // Do Write
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_DRAW, XML_GRADIENT,
+    SvXMLElementExport aElem( rExport, XmlNamespace::DRAW, XML_GRADIENT,
                           true, false );
 }
 
diff --git a/xmloff/source/style/HatchStyle.cxx b/xmloff/source/style/HatchStyle.cxx
index 274105c1a666..79308018d93b 100644
--- a/xmloff/source/style/HatchStyle.cxx
+++ b/xmloff/source/style/HatchStyle.cxx
@@ -49,7 +49,7 @@ enum SvXMLTokenMapAttrs
     XML_TOK_HATCH_COLOR,
     XML_TOK_HATCH_DISTANCE,
     XML_TOK_HATCH_ROTATION,
-    XML_TOK_TABSTOP_END=XML_TOK_UNKNOWN
+    XML_TOK_TABSTOP_END=XmlNamespace::UNKNOWN
 };
 
 }
@@ -80,12 +80,12 @@ void XMLHatchStyleImport::importXML(
 {
     static const SvXMLTokenMapEntry aHatchAttrTokenMap[] =
     {
-        { XML_NAMESPACE_DRAW, XML_NAME, XML_TOK_HATCH_NAME },
-        { XML_NAMESPACE_DRAW, XML_DISPLAY_NAME, XML_TOK_HATCH_DISPLAY_NAME },
-        { XML_NAMESPACE_DRAW, XML_STYLE, XML_TOK_HATCH_STYLE },
-        { XML_NAMESPACE_DRAW, XML_COLOR, XML_TOK_HATCH_COLOR },
-        { XML_NAMESPACE_DRAW, XML_DISTANCE, XML_TOK_HATCH_DISTANCE },
-        { XML_NAMESPACE_DRAW, XML_ROTATION, XML_TOK_HATCH_ROTATION },
+        { XmlNamespace::DRAW, XML_NAME, XML_TOK_HATCH_NAME },
+        { XmlNamespace::DRAW, XML_DISPLAY_NAME, XML_TOK_HATCH_DISPLAY_NAME },
+        { XmlNamespace::DRAW, XML_STYLE, XML_TOK_HATCH_STYLE },
+        { XmlNamespace::DRAW, XML_COLOR, XML_TOK_HATCH_COLOR },
+        { XmlNamespace::DRAW, XML_DISTANCE, XML_TOK_HATCH_DISTANCE },
+        { XmlNamespace::DRAW, XML_ROTATION, XML_TOK_HATCH_ROTATION },
         XML_TOKEN_MAP_END
     };
 
@@ -183,31 +183,31 @@ void XMLHatchStyleExport::exportXML(
 
     // Name
     bool bEncoded = false;
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME,
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_NAME,
                           rExport.EncodeStyleName( rStrName,
                                                     &bEncoded ) );
     if( bEncoded )
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISPLAY_NAME,
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_DISPLAY_NAME,
                                 rStrName );
 
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_STYLE, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_STYLE, aStrValue );
 
     // Color
     ::sax::Converter::convertColor(aOut, aHatch.Color);
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_COLOR, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_COLOR, aStrValue );
 
     // Distance
     rUnitConverter.convertMeasureToXML( aOut, aHatch.Distance );
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISTANCE, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_DISTANCE, aStrValue );
 
     // Angle
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_ROTATION, OUString::number(aHatch.Angle) );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_ROTATION, OUString::number(aHatch.Angle) );
 
     // Do Write
-    SvXMLElementExport rElem( rExport, XML_NAMESPACE_DRAW, XML_HATCH,
+    SvXMLElementExport rElem( rExport, XmlNamespace::DRAW, XML_HATCH,
                               true, false );
 }
 
diff --git a/xmloff/source/style/ImageStyle.cxx b/xmloff/source/style/ImageStyle.cxx
index 640d0cc043db..0cb4894bb930 100644
--- a/xmloff/source/style/ImageStyle.cxx
+++ b/xmloff/source/style/ImageStyle.cxx
@@ -56,11 +56,11 @@ void XMLImageStyle::exportXML(OUString const & rStrName, uno::Any const & rValue
 
     // Name
     bool bEncoded = false;
-    rExport.AddAttribute(XML_NAMESPACE_DRAW, XML_NAME,
+    rExport.AddAttribute(XmlNamespace::DRAW, XML_NAME,
                          rExport.EncodeStyleName(rStrName, &bEncoded));
     if (bEncoded)
     {
-        rExport.AddAttribute(XML_NAMESPACE_DRAW, XML_DISPLAY_NAME, rStrName);
+        rExport.AddAttribute(XmlNamespace::DRAW, XML_DISPLAY_NAME, rStrName);
     }
 
     auto xBitmap = rValue.get<uno::Reference<awt::XBitmap>>();
@@ -72,14 +72,14 @@ void XMLImageStyle::exportXML(OUString const & rStrName, uno::Any const & rValue
     // uri
     if (!aStr.isEmpty())
     {
-        rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, aStr );
-        rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-        rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-        rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+        rExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, aStr );
+        rExport.AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+        rExport.AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+        rExport.AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
     }
 
     // Do Write
-    SvXMLElementExport aElem(rExport, XML_NAMESPACE_DRAW, XML_FILL_IMAGE, true, true);
+    SvXMLElementExport aElem(rExport, XmlNamespace::DRAW, XML_FILL_IMAGE, true, true);
 
     if (xBitmap.is() && xGraphic.is())
     {
@@ -93,12 +93,12 @@ bool XMLImageStyle::importXML(uno::Reference<xml::sax::XAttributeList> const & x
 {
     static const SvXMLTokenMapEntry aHatchAttrTokenMap[] =
     {
-        { XML_NAMESPACE_DRAW, XML_NAME, XML_TOK_IMAGE_NAME },
-        { XML_NAMESPACE_DRAW, XML_DISPLAY_NAME, XML_TOK_IMAGE_DISPLAY_NAME },
-        { XML_NAMESPACE_XLINK, XML_HREF, XML_TOK_IMAGE_URL },
-        { XML_NAMESPACE_XLINK, XML_TYPE, XML_TOK_IMAGE_TYPE },
-        { XML_NAMESPACE_XLINK, XML_SHOW, XML_TOK_IMAGE_SHOW },
-        { XML_NAMESPACE_XLINK, XML_ACTUATE, XML_TOK_IMAGE_ACTUATE },
+        { XmlNamespace::DRAW, XML_NAME, XML_TOK_IMAGE_NAME },
+        { XmlNamespace::DRAW, XML_DISPLAY_NAME, XML_TOK_IMAGE_DISPLAY_NAME },
+        { XmlNamespace::XLINK, XML_HREF, XML_TOK_IMAGE_URL },
+        { XmlNamespace::XLINK, XML_TYPE, XML_TOK_IMAGE_TYPE },
+        { XmlNamespace::XLINK, XML_SHOW, XML_TOK_IMAGE_SHOW },
+        { XmlNamespace::XLINK, XML_ACTUATE, XML_TOK_IMAGE_ACTUATE },
         XML_TOKEN_MAP_END
     };
 
diff --git a/xmloff/source/style/MarkerStyle.cxx b/xmloff/source/style/MarkerStyle.cxx
index 4046db8edbb9..aebd18ae5a82 100644
--- a/xmloff/source/style/MarkerStyle.cxx
+++ b/xmloff/source/style/MarkerStyle.cxx
@@ -165,11 +165,11 @@ void XMLMarkerStyleExport::exportXML(
     // Name
     bool bEncoded(false);
 
-    rExport.AddAttribute(XML_NAMESPACE_DRAW, XML_NAME, rExport.EncodeStyleName( rStrName, &bEncoded ) );
+    rExport.AddAttribute(XmlNamespace::DRAW, XML_NAME, rExport.EncodeStyleName( rStrName, &bEncoded ) );
 
     if( bEncoded )
     {
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISPLAY_NAME, rStrName );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_DISPLAY_NAME, rStrName );
     }
 
     const basegfx::B2DPolyPolygon aPolyPolygon(
@@ -185,7 +185,7 @@ void XMLMarkerStyleExport::exportXML(
         aPolyPolygonRange.getMinY(),
         aPolyPolygonRange.getWidth(),
         aPolyPolygonRange.getHeight());
-    rExport.AddAttribute( XML_NAMESPACE_SVG, XML_VIEWBOX, aViewBox.GetExportString() );
+    rExport.AddAttribute( XmlNamespace::SVG, XML_VIEWBOX, aViewBox.GetExportString() );
 
     // Pathdata
     const OUString aPolygonString(
@@ -196,10 +196,10 @@ void XMLMarkerStyleExport::exportXML(
             true));         // bHandleRelativeNextPointCompatible
 
     // write point array
-    rExport.AddAttribute(XML_NAMESPACE_SVG, XML_D, aPolygonString);
+    rExport.AddAttribute(XmlNamespace::SVG, XML_D, aPolygonString);
 
     // Do Write
-    SvXMLElementExport rElem( rExport, XML_NAMESPACE_DRAW, XML_MARKER, true, false );
+    SvXMLElementExport rElem( rExport, XmlNamespace::DRAW, XML_MARKER, true, false );
 }
 
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/xmloff/source/style/PageHeaderFooterContext.cxx b/xmloff/source/style/PageHeaderFooterContext.cxx
index fe9689ae3f5f..812bc72a8dfa 100644
--- a/xmloff/source/style/PageHeaderFooterContext.cxx
+++ b/xmloff/source/style/PageHeaderFooterContext.cxx
@@ -55,7 +55,7 @@ SvXMLImportContextRef PageHeaderFooterContext::CreateChildContext( sal_uInt16 nP
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix && IsXMLToken( rLName, XML_HEADER_FOOTER_PROPERTIES ) )
+    if( XmlNamespace::STYLE == nPrefix && IsXMLToken( rLName, XML_HEADER_FOOTER_PROPERTIES ) )
     {
         PageContextType aType = Header;
         if (!bHeader)
diff --git a/xmloff/source/style/PageMasterImportContext.cxx b/xmloff/source/style/PageMasterImportContext.cxx
index 2918d744856e..5e8eb7aa1cbc 100644
--- a/xmloff/source/style/PageMasterImportContext.cxx
+++ b/xmloff/source/style/PageMasterImportContext.cxx
@@ -49,7 +49,7 @@ void PageStyleContext::SetAttribute( sal_uInt16 nPrefixKey,
                                         const OUString& rValue )
 {
     // TODO: use a map here
-    if( XML_NAMESPACE_STYLE == nPrefixKey && IsXMLToken( rLocalName, XML_PAGE_USAGE ) )
+    if( XmlNamespace::STYLE == nPrefixKey && IsXMLToken( rLocalName, XML_PAGE_USAGE ) )
     {
         sPageUsage = rValue;
     }
@@ -80,7 +80,7 @@ SvXMLImportContextRef PageStyleContext::CreateChildContext(
         const OUString& rLocalName,
         const uno::Reference< xml::sax::XAttributeList > & xAttrList )
 {
-    if( XML_NAMESPACE_STYLE == nPrefix &&
+    if( XmlNamespace::STYLE == nPrefix &&
         ((IsXMLToken(rLocalName, XML_HEADER_STYLE )) ||
          (IsXMLToken(rLocalName, XML_FOOTER_STYLE )) ) )
     {
@@ -124,7 +124,7 @@ SvXMLImportContextRef PageStyleContext::CreateChildContext(
         }
     }
 
-    if( XML_NAMESPACE_STYLE == nPrefix &&
+    if( XmlNamespace::STYLE == nPrefix &&
         IsXMLToken(rLocalName, XML_PAGE_LAYOUT_PROPERTIES) )
     {
         rtl::Reference < SvXMLImportPropertyMapper > xImpPrMap =
diff --git a/xmloff/source/style/PageMasterStyleMap.cxx b/xmloff/source/style/PageMasterStyleMap.cxx
index 3e4b0350367a..783d62dad203 100644
--- a/xmloff/source/style/PageMasterStyleMap.cxx
+++ b/xmloff/source/style/PageMasterStyleMap.cxx
@@ -40,80 +40,80 @@ const XMLPropertyMapEntry aXMLPageMasterStyleMap[] =
     // Section for 'page-layout-properties'
 
     // page master
-    PLMAP( "PageStyleLayout",            XML_NAMESPACE_STYLE,    XML_PAGE_USAGE,                    XML_PM_TYPE_PAGESTYLELAYOUT | MID_FLAG_SPECIAL_ITEM,    CTF_PM_PAGEUSAGE ),
-    PLMAP( "Width",                    XML_NAMESPACE_FO,        XML_PAGE_WIDTH,                    XML_TYPE_MEASURE,                                        0 ),
-    PLMAP( "Height",                    XML_NAMESPACE_FO,        XML_PAGE_HEIGHT,                XML_TYPE_MEASURE,                                        0 ),
-    PLMAP( "NumberingType",            XML_NAMESPACE_STYLE,    XML_NUM_FORMAT,                    XML_PM_TYPE_NUMFORMAT | MID_FLAG_MERGE_PROPERTY,        0 ),
-    PLMAP( "NumberingType",            XML_NAMESPACE_STYLE,    XML_NUM_LETTER_SYNC,            XML_PM_TYPE_NUMLETTERSYNC,                                0 ),
-    PLMAP( "PrinterPaperTray",        XML_NAMESPACE_STYLE,    XML_PAPER_TRAY_NAME,            XML_TYPE_STRING | MID_FLAG_PROPERTY_MAY_THROW,         0 ),
-    PLMAP( "IsLandscape",                XML_NAMESPACE_STYLE,    XML_PRINT_ORIENTATION,            XML_PM_TYPE_PRINTORIENTATION,                            0 ),
-    PLMAP( "TopMargin",                XML_NAMESPACE_FO,        XML_MARGIN,                        XML_TYPE_MEASURE,                                        CTF_PM_MARGINALL ),
-    PLMAP( "TopMargin",                XML_NAMESPACE_FO,        XML_MARGIN_TOP,                    XML_TYPE_MEASURE,                                        CTF_PM_MARGINTOP ),
-    PLMAP( "BottomMargin",            XML_NAMESPACE_FO,        XML_MARGIN_BOTTOM,                XML_TYPE_MEASURE,                                        CTF_PM_MARGINBOTTOM ),
-    PLMAP( "LeftMargin",                XML_NAMESPACE_FO,        XML_MARGIN_LEFT,                XML_TYPE_MEASURE,                                        CTF_PM_MARGINLEFT ),
-    PLMAP( "RightMargin",                XML_NAMESPACE_FO,        XML_MARGIN_RIGHT,                XML_TYPE_MEASURE,                                        CTF_PM_MARGINRIGHT ),
-    PLMAP( "TopBorder",                XML_NAMESPACE_FO,        XML_BORDER,                     XML_TYPE_BORDER,                                        CTF_PM_BORDERALL ),
-    PLMAP( "TopBorder",                XML_NAMESPACE_FO,        XML_BORDER_TOP,                    XML_TYPE_BORDER,                                        CTF_PM_BORDERTOP ),
-    PLMAP( "BottomBorder",            XML_NAMESPACE_FO,        XML_BORDER_BOTTOM,                XML_TYPE_BORDER,                                        CTF_PM_BORDERBOTTOM ),
-    PLMAP( "LeftBorder",                XML_NAMESPACE_FO,        XML_BORDER_LEFT,                XML_TYPE_BORDER,                                        CTF_PM_BORDERLEFT ),
-    PLMAP( "RightBorder",                XML_NAMESPACE_FO,        XML_BORDER_RIGHT,                XML_TYPE_BORDER,                                        CTF_PM_BORDERRIGHT ),
-    PLMAP( "TopBorder",                XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH,            XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHALL ),
-    PLMAP( "TopBorder",                XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_TOP,        XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHTOP ),
-    PLMAP( "BottomBorder",            XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_BOTTOM,    XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHBOTTOM ),
-    PLMAP( "LeftBorder",                XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_LEFT,     XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHLEFT ),
-    PLMAP( "RightBorder",                XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_RIGHT,    XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHRIGHT ),
-    PLMAP( "TopBorderDistance",        XML_NAMESPACE_FO,        XML_PADDING,                    XML_TYPE_MEASURE,                                        CTF_PM_PADDINGALL ),
-    PLMAP( "TopBorderDistance",        XML_NAMESPACE_FO,        XML_PADDING_TOP,                XML_TYPE_MEASURE,                                        CTF_PM_PADDINGTOP ),
-    PLMAP( "BottomBorderDistance",    XML_NAMESPACE_FO,        XML_PADDING_BOTTOM,             XML_TYPE_MEASURE,                                        CTF_PM_PADDINGBOTTOM ),
-    PLMAP( "LeftBorderDistance",        XML_NAMESPACE_FO,        XML_PADDING_LEFT,                XML_TYPE_MEASURE,                                        CTF_PM_PADDINGLEFT ),
-    PLMAP( "RightBorderDistance",     XML_NAMESPACE_FO,        XML_PADDING_RIGHT,                XML_TYPE_MEASURE,                                        CTF_PM_PADDINGRIGHT ),
-    PLMAP( "ShadowFormat",            XML_NAMESPACE_STYLE,    XML_SHADOW,                        XML_TYPE_TEXT_SHADOW,                                    0 ),
-    PLMAP( "BackColor",                XML_NAMESPACE_FO,        XML_BACKGROUND_COLOR,            XML_TYPE_COLORTRANSPARENT | MID_FLAG_MULTI_PROPERTY,    0 ),
-    PLMAP( "BackTransparent",            XML_NAMESPACE_FO,        XML_BACKGROUND_COLOR,            XML_TYPE_ISTRANSPARENT | MID_FLAG_MERGE_ATTRIBUTE,        0 ),
-    PLMAP( "BackGraphicLocation",        XML_NAMESPACE_STYLE,    XML_POSITION,                    XML_TYPE_BUILDIN_CMP_ONLY | MID_FLAG_SPECIAL_ITEM,        CTF_PM_GRAPHICPOSITION ),
-    PLMAP( "BackGraphicFilter",        XML_NAMESPACE_STYLE,    XML_FILTER_NAME,                XML_TYPE_STRING | MID_FLAG_SPECIAL_ITEM,                CTF_PM_GRAPHICFILTER ),
-    PLMAP( "BackGraphic",            XML_NAMESPACE_STYLE,    XML_BACKGROUND_IMAGE,            XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM,                CTF_PM_GRAPHICURL ),
-    PLMAP( "PrintAnnotations",        XML_NAMESPACE_STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTANNOTATIONS | MID_FLAG_MULTI_PROPERTY,                            CTF_PM_PRINT_ANNOTATIONS ),
-    PLMAP( "PrintCharts",                XML_NAMESPACE_STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTCHARTS | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_CHARTS ),
-    PLMAP( "PrintDrawing",            XML_NAMESPACE_STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTDRAWING | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_DRAWING ),
-    PLMAP( "PrintFormulas",            XML_NAMESPACE_STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTFORMULAS | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_FORMULAS ),
-    PLMAP( "PrintGrid",                XML_NAMESPACE_STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTGRID | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,        CTF_PM_PRINT_GRID ),
-    PLMAP( "PrintHeaders",            XML_NAMESPACE_STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTHEADERS | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_HEADERS ),
-    PLMAP( "PrintObjects",            XML_NAMESPACE_STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTOBJECTS | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_OBJECTS ),
-    PLMAP( "PrintZeroValues",            XML_NAMESPACE_STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTZEROVALUES | MID_FLAG_MERGE_ATTRIBUTE,                            CTF_PM_PRINT_ZEROVALUES ),
-    PLMAP( "PrintDownFirst",            XML_NAMESPACE_STYLE,    XML_PRINT_PAGE_ORDER,            XML_PM_TYPE_PRINTPAGEORDER,                                0 ),
-    PLMAP( "FirstPageNumber",            XML_NAMESPACE_STYLE,    XML_FIRST_PAGE_NUMBER,            XML_PM_TYPE_FIRSTPAGENUMBER,                            0 ),
-    PLMAP( "PageScale",                XML_NAMESPACE_STYLE,    XML_SCALE_TO,                    XML_TYPE_PERCENT16,                                        CTF_PM_SCALETO ),
-    PLMAP( "ScaleToPages",            XML_NAMESPACE_STYLE,    XML_SCALE_TO_PAGES,             XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOPAGES ),
+    PLMAP( "PageStyleLayout",            XmlNamespace::STYLE,    XML_PAGE_USAGE,                    XML_PM_TYPE_PAGESTYLELAYOUT | MID_FLAG_SPECIAL_ITEM,    CTF_PM_PAGEUSAGE ),
+    PLMAP( "Width",                    XmlNamespace::FO,        XML_PAGE_WIDTH,                    XML_TYPE_MEASURE,                                        0 ),
+    PLMAP( "Height",                    XmlNamespace::FO,        XML_PAGE_HEIGHT,                XML_TYPE_MEASURE,                                        0 ),
+    PLMAP( "NumberingType",            XmlNamespace::STYLE,    XML_NUM_FORMAT,                    XML_PM_TYPE_NUMFORMAT | MID_FLAG_MERGE_PROPERTY,        0 ),
+    PLMAP( "NumberingType",            XmlNamespace::STYLE,    XML_NUM_LETTER_SYNC,            XML_PM_TYPE_NUMLETTERSYNC,                                0 ),
+    PLMAP( "PrinterPaperTray",        XmlNamespace::STYLE,    XML_PAPER_TRAY_NAME,            XML_TYPE_STRING | MID_FLAG_PROPERTY_MAY_THROW,         0 ),
+    PLMAP( "IsLandscape",                XmlNamespace::STYLE,    XML_PRINT_ORIENTATION,            XML_PM_TYPE_PRINTORIENTATION,                            0 ),
+    PLMAP( "TopMargin",                XmlNamespace::FO,        XML_MARGIN,                        XML_TYPE_MEASURE,                                        CTF_PM_MARGINALL ),
+    PLMAP( "TopMargin",                XmlNamespace::FO,        XML_MARGIN_TOP,                    XML_TYPE_MEASURE,                                        CTF_PM_MARGINTOP ),
+    PLMAP( "BottomMargin",            XmlNamespace::FO,        XML_MARGIN_BOTTOM,                XML_TYPE_MEASURE,                                        CTF_PM_MARGINBOTTOM ),
+    PLMAP( "LeftMargin",                XmlNamespace::FO,        XML_MARGIN_LEFT,                XML_TYPE_MEASURE,                                        CTF_PM_MARGINLEFT ),
+    PLMAP( "RightMargin",                XmlNamespace::FO,        XML_MARGIN_RIGHT,                XML_TYPE_MEASURE,                                        CTF_PM_MARGINRIGHT ),
+    PLMAP( "TopBorder",                XmlNamespace::FO,        XML_BORDER,                     XML_TYPE_BORDER,                                        CTF_PM_BORDERALL ),
+    PLMAP( "TopBorder",                XmlNamespace::FO,        XML_BORDER_TOP,                    XML_TYPE_BORDER,                                        CTF_PM_BORDERTOP ),
+    PLMAP( "BottomBorder",            XmlNamespace::FO,        XML_BORDER_BOTTOM,                XML_TYPE_BORDER,                                        CTF_PM_BORDERBOTTOM ),
+    PLMAP( "LeftBorder",                XmlNamespace::FO,        XML_BORDER_LEFT,                XML_TYPE_BORDER,                                        CTF_PM_BORDERLEFT ),
+    PLMAP( "RightBorder",                XmlNamespace::FO,        XML_BORDER_RIGHT,                XML_TYPE_BORDER,                                        CTF_PM_BORDERRIGHT ),
+    PLMAP( "TopBorder",                XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH,            XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHALL ),
+    PLMAP( "TopBorder",                XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_TOP,        XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHTOP ),
+    PLMAP( "BottomBorder",            XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_BOTTOM,    XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHBOTTOM ),
+    PLMAP( "LeftBorder",                XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_LEFT,     XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHLEFT ),
+    PLMAP( "RightBorder",                XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_RIGHT,    XML_TYPE_BORDER_WIDTH,                                    CTF_PM_BORDERWIDTHRIGHT ),
+    PLMAP( "TopBorderDistance",        XmlNamespace::FO,        XML_PADDING,                    XML_TYPE_MEASURE,                                        CTF_PM_PADDINGALL ),
+    PLMAP( "TopBorderDistance",        XmlNamespace::FO,        XML_PADDING_TOP,                XML_TYPE_MEASURE,                                        CTF_PM_PADDINGTOP ),
+    PLMAP( "BottomBorderDistance",    XmlNamespace::FO,        XML_PADDING_BOTTOM,             XML_TYPE_MEASURE,                                        CTF_PM_PADDINGBOTTOM ),
+    PLMAP( "LeftBorderDistance",        XmlNamespace::FO,        XML_PADDING_LEFT,                XML_TYPE_MEASURE,                                        CTF_PM_PADDINGLEFT ),
+    PLMAP( "RightBorderDistance",     XmlNamespace::FO,        XML_PADDING_RIGHT,                XML_TYPE_MEASURE,                                        CTF_PM_PADDINGRIGHT ),
+    PLMAP( "ShadowFormat",            XmlNamespace::STYLE,    XML_SHADOW,                        XML_TYPE_TEXT_SHADOW,                                    0 ),
+    PLMAP( "BackColor",                XmlNamespace::FO,        XML_BACKGROUND_COLOR,            XML_TYPE_COLORTRANSPARENT | MID_FLAG_MULTI_PROPERTY,    0 ),
+    PLMAP( "BackTransparent",            XmlNamespace::FO,        XML_BACKGROUND_COLOR,            XML_TYPE_ISTRANSPARENT | MID_FLAG_MERGE_ATTRIBUTE,        0 ),
+    PLMAP( "BackGraphicLocation",        XmlNamespace::STYLE,    XML_POSITION,                    XML_TYPE_BUILDIN_CMP_ONLY | MID_FLAG_SPECIAL_ITEM,        CTF_PM_GRAPHICPOSITION ),
+    PLMAP( "BackGraphicFilter",        XmlNamespace::STYLE,    XML_FILTER_NAME,                XML_TYPE_STRING | MID_FLAG_SPECIAL_ITEM,                CTF_PM_GRAPHICFILTER ),
+    PLMAP( "BackGraphic",            XmlNamespace::STYLE,    XML_BACKGROUND_IMAGE,            XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM,                CTF_PM_GRAPHICURL ),
+    PLMAP( "PrintAnnotations",        XmlNamespace::STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTANNOTATIONS | MID_FLAG_MULTI_PROPERTY,                            CTF_PM_PRINT_ANNOTATIONS ),
+    PLMAP( "PrintCharts",                XmlNamespace::STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTCHARTS | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_CHARTS ),
+    PLMAP( "PrintDrawing",            XmlNamespace::STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTDRAWING | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_DRAWING ),
+    PLMAP( "PrintFormulas",            XmlNamespace::STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTFORMULAS | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_FORMULAS ),
+    PLMAP( "PrintGrid",                XmlNamespace::STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTGRID | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,        CTF_PM_PRINT_GRID ),
+    PLMAP( "PrintHeaders",            XmlNamespace::STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTHEADERS | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_HEADERS ),
+    PLMAP( "PrintObjects",            XmlNamespace::STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTOBJECTS | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE,    CTF_PM_PRINT_OBJECTS ),
+    PLMAP( "PrintZeroValues",            XmlNamespace::STYLE,    XML_PRINT,                        XML_PM_TYPE_PRINTZEROVALUES | MID_FLAG_MERGE_ATTRIBUTE,                            CTF_PM_PRINT_ZEROVALUES ),
+    PLMAP( "PrintDownFirst",            XmlNamespace::STYLE,    XML_PRINT_PAGE_ORDER,            XML_PM_TYPE_PRINTPAGEORDER,                                0 ),
+    PLMAP( "FirstPageNumber",            XmlNamespace::STYLE,    XML_FIRST_PAGE_NUMBER,            XML_PM_TYPE_FIRSTPAGENUMBER,                            0 ),
+    PLMAP( "PageScale",                XmlNamespace::STYLE,    XML_SCALE_TO,                    XML_TYPE_PERCENT16,                                        CTF_PM_SCALETO ),
+    PLMAP( "ScaleToPages",            XmlNamespace::STYLE,    XML_SCALE_TO_PAGES,             XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOPAGES ),
     // ODF 1.3 OFFICE-3857
-    PLMAP_ODF13( "ScaleToPagesX",            XML_NAMESPACE_STYLE,    XML_SCALE_TO_X,                  XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOX ),
-    PLMAP_ODF13( "ScaleToPagesY",            XML_NAMESPACE_STYLE,    XML_SCALE_TO_Y,                 XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOY ),
-    PLMAP_ODF13( "ScaleToPagesX",            XML_NAMESPACE_LO_EXT,    XML_SCALE_TO_X,                  XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOX ),
-    PLMAP_ODF13( "ScaleToPagesY",            XML_NAMESPACE_LO_EXT,    XML_SCALE_TO_Y,                 XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOY ),
-    PLMAP( "CenterHorizontally",        XML_NAMESPACE_STYLE,    XML_TABLE_CENTERING,            XML_PM_TYPE_CENTER_HORIZONTAL | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    PLMAP( "CenterVertically",        XML_NAMESPACE_STYLE,    XML_TABLE_CENTERING,            XML_PM_TYPE_CENTER_VERTICAL | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE, 0 ),
-    PLMAP( "TextColumns",                XML_NAMESPACE_STYLE,    XML_COLUMNS,    MID_FLAG_ELEMENT_ITEM|XML_TYPE_TEXT_COLUMNS, CTF_PM_TEXTCOLUMNS ),
-    PLMAP( "RegisterModeActive",        XML_NAMESPACE_STYLE,    XML_REGISTER_TRUE,    XML_TYPE_BOOL, 0 ),
-    PLMAP( "RegisterParagraphStyle",    XML_NAMESPACE_STYLE,    XML_REGISTER_TRUTH_REF_STYLE_NAME,    XML_TYPE_STYLENAME| MID_FLAG_SPECIAL_ITEM_IMPORT, CTF_PM_REGISTER_STYLE ),
-    PLMAP( "WritingMode",                 XML_NAMESPACE_STYLE,    XML_WRITING_MODE,               XML_TYPE_TEXT_WRITING_MODE, 0 ),
+    PLMAP_ODF13( "ScaleToPagesX",            XmlNamespace::STYLE,    XML_SCALE_TO_X,                  XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOX ),
+    PLMAP_ODF13( "ScaleToPagesY",            XmlNamespace::STYLE,    XML_SCALE_TO_Y,                 XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOY ),
+    PLMAP_ODF13( "ScaleToPagesX",            XmlNamespace::LO_EXT,    XML_SCALE_TO_X,                  XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOX ),
+    PLMAP_ODF13( "ScaleToPagesY",            XmlNamespace::LO_EXT,    XML_SCALE_TO_Y,                 XML_TYPE_NUMBER16,                                        CTF_PM_SCALETOY ),
+    PLMAP( "CenterHorizontally",        XmlNamespace::STYLE,    XML_TABLE_CENTERING,            XML_PM_TYPE_CENTER_HORIZONTAL | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    PLMAP( "CenterVertically",        XmlNamespace::STYLE,    XML_TABLE_CENTERING,            XML_PM_TYPE_CENTER_VERTICAL | MID_FLAG_MULTI_PROPERTY | MID_FLAG_MERGE_ATTRIBUTE, 0 ),
+    PLMAP( "TextColumns",                XmlNamespace::STYLE,    XML_COLUMNS,    MID_FLAG_ELEMENT_ITEM|XML_TYPE_TEXT_COLUMNS, CTF_PM_TEXTCOLUMNS ),
+    PLMAP( "RegisterModeActive",        XmlNamespace::STYLE,    XML_REGISTER_TRUE,    XML_TYPE_BOOL, 0 ),
+    PLMAP( "RegisterParagraphStyle",    XmlNamespace::STYLE,    XML_REGISTER_TRUTH_REF_STYLE_NAME,    XML_TYPE_STYLENAME| MID_FLAG_SPECIAL_ITEM_IMPORT, CTF_PM_REGISTER_STYLE ),
+    PLMAP( "WritingMode",                 XmlNamespace::STYLE,    XML_WRITING_MODE,               XML_TYPE_TEXT_WRITING_MODE, 0 ),
 
     // Index 53: Grid definitions
-    PLMAP( "GridColor", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_COLOR, XML_TYPE_COLOR, 0 ),
-    PLMAP( "GridLines", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_LINES, XML_TYPE_NUMBER16, 0 ),
-    PLMAP( "GridBaseHeight", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_BASE_HEIGHT, XML_TYPE_MEASURE, 0 ),
-    PLMAP( "GridRubyHeight", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_RUBY_HEIGHT, XML_TYPE_MEASURE, 0 ),
-    PLMAP( "GridMode", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_MODE, XML_TYPE_LAYOUT_GRID_MODE, 0 ),
-    PLMAP( "RubyBelow", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_RUBY_BELOW, XML_TYPE_BOOL, 0 ),
-    PLMAP( "GridPrint", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_PRINT, XML_TYPE_BOOL, 0 ),
-    PLMAP( "GridDisplay", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_DISPLAY, XML_TYPE_BOOL, 0 ),
+    PLMAP( "GridColor", XmlNamespace::STYLE, XML_LAYOUT_GRID_COLOR, XML_TYPE_COLOR, 0 ),
+    PLMAP( "GridLines", XmlNamespace::STYLE, XML_LAYOUT_GRID_LINES, XML_TYPE_NUMBER16, 0 ),
+    PLMAP( "GridBaseHeight", XmlNamespace::STYLE, XML_LAYOUT_GRID_BASE_HEIGHT, XML_TYPE_MEASURE, 0 ),
+    PLMAP( "GridRubyHeight", XmlNamespace::STYLE, XML_LAYOUT_GRID_RUBY_HEIGHT, XML_TYPE_MEASURE, 0 ),
+    PLMAP( "GridMode", XmlNamespace::STYLE, XML_LAYOUT_GRID_MODE, XML_TYPE_LAYOUT_GRID_MODE, 0 ),
+    PLMAP( "RubyBelow", XmlNamespace::STYLE, XML_LAYOUT_GRID_RUBY_BELOW, XML_TYPE_BOOL, 0 ),
+    PLMAP( "GridPrint", XmlNamespace::STYLE, XML_LAYOUT_GRID_PRINT, XML_TYPE_BOOL, 0 ),
+    PLMAP( "GridDisplay", XmlNamespace::STYLE, XML_LAYOUT_GRID_DISPLAY, XML_TYPE_BOOL, 0 ),
 
     //text grid enhancement for better CJK support
-    PLMAP_12( "GridBaseWidth", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_BASE_WIDTH, XML_TYPE_MEASURE, CTP_PM_GRID_BASE_WIDTH ),
-    PLMAP_12( "GridSnapToChars", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_SNAP_TO, XML_TYPE_BOOL, CTP_PM_GRID_SNAP_TO ),
+    PLMAP_12( "GridBaseWidth", XmlNamespace::STYLE, XML_LAYOUT_GRID_BASE_WIDTH, XML_TYPE_MEASURE, CTP_PM_GRID_BASE_WIDTH ),
+    PLMAP_12( "GridSnapToChars", XmlNamespace::STYLE, XML_LAYOUT_GRID_SNAP_TO, XML_TYPE_BOOL, CTP_PM_GRID_SNAP_TO ),
       //export as a default attribute
-    PLMAP_12( "StandardPageMode", XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_STANDARD_MODE, XML_TYPE_BOOL|MID_FLAG_DEFAULT_ITEM_EXPORT, CTF_PM_STANDARD_MODE ),
+    PLMAP_12( "StandardPageMode", XmlNamespace::STYLE, XML_LAYOUT_GRID_STANDARD_MODE, XML_TYPE_BOOL|MID_FLAG_DEFAULT_ITEM_EXPORT, CTF_PM_STANDARD_MODE ),
 
-    PLMAP( "UserDefinedAttributes",    XML_NAMESPACE_TEXT,        XML_XMLNS,                        XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
+    PLMAP( "UserDefinedAttributes",    XmlNamespace::TEXT,        XML_XMLNS,                        XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
 
     //Index 65: fill attributes; use PLMAP macro here instead of GMAP, this list is ordered and its order is used
     // to decide in which section in ODF to export the contained stuff (the PageMasterStyle creates several XML
@@ -123,148 +123,148 @@ const XMLPropertyMapEntry aXMLPageMasterStyleMap[] =
     // CTF_FILLGRADIENTNAME) since these are used to *filter* up to which entry the attributes belong to the
     // 'page-layout-properties' section (!), see SvXMLAutoStylePoolP_Impl::exportXML, look for XmlStyleFamily::PAGE_MASTER
     // note: these are duplicated below, in g_XMLPageMasterDrawingPageStyleMap
-    PLMAP( "FillStyle",                     XML_NAMESPACE_DRAW,     XML_FILL,                   XML_SW_TYPE_FILLSTYLE,                                  0 ),
-    PLMAP( "FillColor",                     XML_NAMESPACE_DRAW,     XML_FILL_COLOR,             XML_TYPE_COLOR,                                         0 ),
-    PLMAP( "FillColor2",                    XML_NAMESPACE_DRAW,     XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR,                                         0 ),
-    PLMAP( "FillGradientName",              XML_NAMESPACE_DRAW,     XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FILLGRADIENTNAME ),
-    PLMAP( "FillGradientStepCount",         XML_NAMESPACE_DRAW,     XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16,                                      0 ),
-    PLMAP( "FillHatchName",                 XML_NAMESPACE_DRAW,     XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FILLHATCHNAME ),
-    PLMAP( "FillBackground",                XML_NAMESPACE_DRAW,     XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL,                                          0 ),
-    PLMAP( "FillBitmapName",                XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FILLBITMAPNAME ),
-    PLMAP( "FillTransparence",              XML_NAMESPACE_DRAW,     XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY,         0 ),    // exists in SW, too
-    PLMAP( "FillTransparenceGradientName",  XML_NAMESPACE_DRAW,     XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FILLTRANSNAME ),
-    PLMAP( "FillBitmapSizeX",               XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     0 ),
-    PLMAP( "FillBitmapLogicalSize",         XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       0 ),
-    PLMAP( "FillBitmapSizeY",               XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     0 ),
-    PLMAP( "FillBitmapLogicalSize",         XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       0 ),
-    PLMAP( "FillBitmapMode",                XML_NAMESPACE_STYLE,    XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY,        CTF_PM_FILLBITMAPMODE ),
-    PLMAP( "FillBitmapPositionOffsetX",     XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT,                                       0 ),
-    PLMAP( "FillBitmapPositionOffsetY",     XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT,                                       0 ),
-    PLMAP( "FillBitmapRectanglePoint",      XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT,                            0 ),
-    PLMAP( "FillBitmapOffsetX",             XML_NAMESPACE_DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY,   CTF_PM_REPEAT_OFFSET_X ),
-    PLMAP( "FillBitmapOffsetY",             XML_NAMESPACE_DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY,   CTF_PM_REPEAT_OFFSET_Y ),
+    PLMAP( "FillStyle",                     XmlNamespace::DRAW,     XML_FILL,                   XML_SW_TYPE_FILLSTYLE,                                  0 ),
+    PLMAP( "FillColor",                     XmlNamespace::DRAW,     XML_FILL_COLOR,             XML_TYPE_COLOR,                                         0 ),
+    PLMAP( "FillColor2",                    XmlNamespace::DRAW,     XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR,                                         0 ),
+    PLMAP( "FillGradientName",              XmlNamespace::DRAW,     XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FILLGRADIENTNAME ),
+    PLMAP( "FillGradientStepCount",         XmlNamespace::DRAW,     XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16,                                      0 ),
+    PLMAP( "FillHatchName",                 XmlNamespace::DRAW,     XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FILLHATCHNAME ),
+    PLMAP( "FillBackground",                XmlNamespace::DRAW,     XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL,                                          0 ),
+    PLMAP( "FillBitmapName",                XmlNamespace::DRAW,     XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FILLBITMAPNAME ),
+    PLMAP( "FillTransparence",              XmlNamespace::DRAW,     XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY,         0 ),    // exists in SW, too
+    PLMAP( "FillTransparenceGradientName",  XmlNamespace::DRAW,     XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FILLTRANSNAME ),
+    PLMAP( "FillBitmapSizeX",               XmlNamespace::DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     0 ),
+    PLMAP( "FillBitmapLogicalSize",         XmlNamespace::DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       0 ),
+    PLMAP( "FillBitmapSizeY",               XmlNamespace::DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     0 ),
+    PLMAP( "FillBitmapLogicalSize",         XmlNamespace::DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       0 ),
+    PLMAP( "FillBitmapMode",                XmlNamespace::STYLE,    XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY,        CTF_PM_FILLBITMAPMODE ),
+    PLMAP( "FillBitmapPositionOffsetX",     XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT,                                       0 ),
+    PLMAP( "FillBitmapPositionOffsetY",     XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT,                                       0 ),
+    PLMAP( "FillBitmapRectanglePoint",      XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT,                            0 ),
+    PLMAP( "FillBitmapOffsetX",             XmlNamespace::DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY,   CTF_PM_REPEAT_OFFSET_X ),
+    PLMAP( "FillBitmapOffsetY",             XmlNamespace::DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY,   CTF_PM_REPEAT_OFFSET_Y ),
 
     // Index 85: footnote
-    PLMAP( "FootnoteHeight",            XML_NAMESPACE_STYLE,    XML_FOOTNOTE_MAX_HEIGHT, XML_TYPE_MEASURE, CTF_PM_FTN_HEIGHT ),
-    PLMAP( "FootnoteLineAdjust",        XML_NAMESPACE_STYLE,    XML__EMPTY,        XML_TYPE_TEXT_HORIZONTAL_ADJUST|MID_FLAG_SPECIAL_ITEM,    CTF_PM_FTN_LINE_ADJUST ),
-    PLMAP( "FootnoteLineColor",        XML_NAMESPACE_STYLE,    XML__EMPTY,     XML_TYPE_COLOR|MID_FLAG_SPECIAL_ITEM,        CTF_PM_FTN_LINE_COLOR ),
-    PLMAP( "FootnoteLineDistance",    XML_NAMESPACE_STYLE,    XML__EMPTY,     XML_TYPE_MEASURE|MID_FLAG_SPECIAL_ITEM,CTF_PM_FTN_DISTANCE ),
-    PLMAP( "FootnoteLineRelativeWidth", XML_NAMESPACE_STYLE,    XML__EMPTY,     XML_TYPE_PERCENT8|MID_FLAG_SPECIAL_ITEM,    CTF_PM_FTN_LINE_WIDTH ),
-    PLMAP( "FootnoteLineTextDistance", XML_NAMESPACE_STYLE,    XML__EMPTY,     XML_TYPE_MEASURE|MID_FLAG_SPECIAL_ITEM,    CTF_PM_FTN_LINE_DISTANCE ),
-    PLMAP( "FootnoteLineWeight",        XML_NAMESPACE_STYLE,    XML_FOOTNOTE_SEP,    XML_TYPE_MEASURE16|MID_FLAG_ELEMENT_ITEM,    CTF_PM_FTN_LINE_WEIGHT ),
-    PLMAP( "FootnoteLineStyle",     XML_NAMESPACE_STYLE,    XML_EMPTY,  XML_TYPE_STRING|MID_FLAG_ELEMENT_ITEM,  CTF_PM_FTN_LINE_STYLE ),
+    PLMAP( "FootnoteHeight",            XmlNamespace::STYLE,    XML_FOOTNOTE_MAX_HEIGHT, XML_TYPE_MEASURE, CTF_PM_FTN_HEIGHT ),
+    PLMAP( "FootnoteLineAdjust",        XmlNamespace::STYLE,    XML__EMPTY,        XML_TYPE_TEXT_HORIZONTAL_ADJUST|MID_FLAG_SPECIAL_ITEM,    CTF_PM_FTN_LINE_ADJUST ),
+    PLMAP( "FootnoteLineColor",        XmlNamespace::STYLE,    XML__EMPTY,     XML_TYPE_COLOR|MID_FLAG_SPECIAL_ITEM,        CTF_PM_FTN_LINE_COLOR ),
+    PLMAP( "FootnoteLineDistance",    XmlNamespace::STYLE,    XML__EMPTY,     XML_TYPE_MEASURE|MID_FLAG_SPECIAL_ITEM,CTF_PM_FTN_DISTANCE ),
+    PLMAP( "FootnoteLineRelativeWidth", XmlNamespace::STYLE,    XML__EMPTY,     XML_TYPE_PERCENT8|MID_FLAG_SPECIAL_ITEM,    CTF_PM_FTN_LINE_WIDTH ),
+    PLMAP( "FootnoteLineTextDistance", XmlNamespace::STYLE,    XML__EMPTY,     XML_TYPE_MEASURE|MID_FLAG_SPECIAL_ITEM,    CTF_PM_FTN_LINE_DISTANCE ),
+    PLMAP( "FootnoteLineWeight",        XmlNamespace::STYLE,    XML_FOOTNOTE_SEP,    XML_TYPE_MEASURE16|MID_FLAG_ELEMENT_ITEM,    CTF_PM_FTN_LINE_WEIGHT ),
+    PLMAP( "FootnoteLineStyle",     XmlNamespace::STYLE,    XML_EMPTY,  XML_TYPE_STRING|MID_FLAG_ELEMENT_ITEM,  CTF_PM_FTN_LINE_STYLE ),
 
     //////////////////////////////////////////////////////////////////////////
     //Index 92: Section for 'header-style' own section, all members *have* to use CTF_PM_HEADERFLAG in the context entry (the 5th one)
-    HFMAP( "HeaderHeight",                XML_NAMESPACE_SVG,        XML_HEIGHT,                     XML_TYPE_MEASURE,        CTF_PM_HEADERHEIGHT ),
-    HFMAP( "HeaderHeight",                XML_NAMESPACE_FO,        XML_MIN_HEIGHT,                 XML_TYPE_MEASURE,        CTF_PM_HEADERMINHEIGHT ),
-    HFMAP( "HeaderIsDynamicHeight",        XML_NAMESPACE_STYLE,    XML__EMPTY,                        XML_TYPE_BOOL,            CTF_PM_HEADERDYNAMIC ),
-    HFMAP( "HeaderLeftMargin",            XML_NAMESPACE_FO,        XML_MARGIN,                        XML_TYPE_MEASURE,        CTF_PM_HEADERMARGINALL ),
-    HFMAP( "HeaderLeftMargin",            XML_NAMESPACE_FO,        XML_MARGIN_LEFT,                XML_TYPE_MEASURE,        CTF_PM_HEADERMARGINLEFT ),
-    HFMAP( "HeaderRightMargin",            XML_NAMESPACE_FO,        XML_MARGIN_RIGHT,                XML_TYPE_MEASURE,        CTF_PM_HEADERMARGINRIGHT ),
-    HFMAP( "HeaderBodyDistance",        XML_NAMESPACE_FO,        XML_MARGIN_BOTTOM,                XML_TYPE_MEASURE,        CTF_PM_HEADERMARGINBOTTOM ),
-    HFMAP( "HeaderTopBorder",                XML_NAMESPACE_FO,        XML_BORDER,                        XML_TYPE_BORDER,        CTF_PM_HEADERBORDERALL ),
-    HFMAP( "HeaderTopBorder",                XML_NAMESPACE_FO,        XML_BORDER_TOP,                 XML_TYPE_BORDER,        CTF_PM_HEADERBORDERTOP ),
-    HFMAP( "HeaderBottomBorder",            XML_NAMESPACE_FO,        XML_BORDER_BOTTOM,                XML_TYPE_BORDER,        CTF_PM_HEADERBORDERBOTTOM ),
-    HFMAP( "HeaderLeftBorder",            XML_NAMESPACE_FO,        XML_BORDER_LEFT,                XML_TYPE_BORDER,        CTF_PM_HEADERBORDERLEFT ),
-    HFMAP( "HeaderRightBorder",            XML_NAMESPACE_FO,        XML_BORDER_RIGHT,                XML_TYPE_BORDER,        CTF_PM_HEADERBORDERRIGHT ),
-    HFMAP( "HeaderTopBorder",                XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH,            XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHALL ),
-    HFMAP( "HeaderTopBorder",                XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_TOP,        XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHTOP ),
-    HFMAP( "HeaderBottomBorder",            XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_BOTTOM,    XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHBOTTOM ),
-    HFMAP( "HeaderLeftBorder",            XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_LEFT,     XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHLEFT ),
-    HFMAP( "HeaderRightBorder",            XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_RIGHT,    XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHRIGHT ),
-    HFMAP( "HeaderTopBorderDistance",     XML_NAMESPACE_FO,        XML_PADDING,                    XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGALL ),
-    HFMAP( "HeaderTopBorderDistance",     XML_NAMESPACE_FO,        XML_PADDING_TOP,                XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGTOP ),
-    HFMAP( "HeaderBottomBorderDistance",    XML_NAMESPACE_FO,        XML_PADDING_BOTTOM,             XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGBOTTOM ),
-    HFMAP( "HeaderLeftBorderDistance",    XML_NAMESPACE_FO,        XML_PADDING_LEFT,                XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGLEFT ),
-    HFMAP( "HeaderRightBorderDistance",    XML_NAMESPACE_FO,        XML_PADDING_RIGHT,                XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGRIGHT ),
-    HFMAP( "HeaderShadowFormat",            XML_NAMESPACE_STYLE,    XML_SHADOW,                     XML_TYPE_TEXT_SHADOW,    CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderBackColor",                XML_NAMESPACE_FO,        XML_BACKGROUND_COLOR,            XML_TYPE_COLORTRANSPARENT | MID_FLAG_MULTI_PROPERTY,    CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderBackTransparent",        XML_NAMESPACE_FO,        XML_BACKGROUND_COLOR,            XML_TYPE_ISTRANSPARENT | MID_FLAG_MERGE_ATTRIBUTE,        CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderBackGraphicLocation",    XML_NAMESPACE_STYLE,    XML_POSITION,                    XML_TYPE_BUILDIN_CMP_ONLY | MID_FLAG_SPECIAL_ITEM,        CTF_PM_HEADERGRAPHICPOSITION ),
-    HFMAP( "HeaderBackGraphicFilter",        XML_NAMESPACE_STYLE,    XML_FILTER_NAME,                XML_TYPE_STRING | MID_FLAG_SPECIAL_ITEM,                CTF_PM_HEADERGRAPHICFILTER ),
-    HFMAP( "HeaderBackGraphic",        XML_NAMESPACE_STYLE,    XML_BACKGROUND_IMAGE,            XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM,                CTF_PM_HEADERGRAPHICURL ),
-    HFMAP( "HeaderDynamicSpacing",        XML_NAMESPACE_STYLE,    XML_DYNAMIC_SPACING,            XML_TYPE_BOOL,          CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderHeight",                XmlNamespace::SVG,        XML_HEIGHT,                     XML_TYPE_MEASURE,        CTF_PM_HEADERHEIGHT ),
+    HFMAP( "HeaderHeight",                XmlNamespace::FO,        XML_MIN_HEIGHT,                 XML_TYPE_MEASURE,        CTF_PM_HEADERMINHEIGHT ),
+    HFMAP( "HeaderIsDynamicHeight",        XmlNamespace::STYLE,    XML__EMPTY,                        XML_TYPE_BOOL,            CTF_PM_HEADERDYNAMIC ),
+    HFMAP( "HeaderLeftMargin",            XmlNamespace::FO,        XML_MARGIN,                        XML_TYPE_MEASURE,        CTF_PM_HEADERMARGINALL ),
+    HFMAP( "HeaderLeftMargin",            XmlNamespace::FO,        XML_MARGIN_LEFT,                XML_TYPE_MEASURE,        CTF_PM_HEADERMARGINLEFT ),
+    HFMAP( "HeaderRightMargin",            XmlNamespace::FO,        XML_MARGIN_RIGHT,                XML_TYPE_MEASURE,        CTF_PM_HEADERMARGINRIGHT ),
+    HFMAP( "HeaderBodyDistance",        XmlNamespace::FO,        XML_MARGIN_BOTTOM,                XML_TYPE_MEASURE,        CTF_PM_HEADERMARGINBOTTOM ),
+    HFMAP( "HeaderTopBorder",                XmlNamespace::FO,        XML_BORDER,                        XML_TYPE_BORDER,        CTF_PM_HEADERBORDERALL ),
+    HFMAP( "HeaderTopBorder",                XmlNamespace::FO,        XML_BORDER_TOP,                 XML_TYPE_BORDER,        CTF_PM_HEADERBORDERTOP ),
+    HFMAP( "HeaderBottomBorder",            XmlNamespace::FO,        XML_BORDER_BOTTOM,                XML_TYPE_BORDER,        CTF_PM_HEADERBORDERBOTTOM ),
+    HFMAP( "HeaderLeftBorder",            XmlNamespace::FO,        XML_BORDER_LEFT,                XML_TYPE_BORDER,        CTF_PM_HEADERBORDERLEFT ),
+    HFMAP( "HeaderRightBorder",            XmlNamespace::FO,        XML_BORDER_RIGHT,                XML_TYPE_BORDER,        CTF_PM_HEADERBORDERRIGHT ),
+    HFMAP( "HeaderTopBorder",                XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH,            XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHALL ),
+    HFMAP( "HeaderTopBorder",                XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_TOP,        XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHTOP ),
+    HFMAP( "HeaderBottomBorder",            XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_BOTTOM,    XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHBOTTOM ),
+    HFMAP( "HeaderLeftBorder",            XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_LEFT,     XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHLEFT ),
+    HFMAP( "HeaderRightBorder",            XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_RIGHT,    XML_TYPE_BORDER_WIDTH,    CTF_PM_HEADERBORDERWIDTHRIGHT ),
+    HFMAP( "HeaderTopBorderDistance",     XmlNamespace::FO,        XML_PADDING,                    XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGALL ),
+    HFMAP( "HeaderTopBorderDistance",     XmlNamespace::FO,        XML_PADDING_TOP,                XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGTOP ),
+    HFMAP( "HeaderBottomBorderDistance",    XmlNamespace::FO,        XML_PADDING_BOTTOM,             XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGBOTTOM ),
+    HFMAP( "HeaderLeftBorderDistance",    XmlNamespace::FO,        XML_PADDING_LEFT,                XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGLEFT ),
+    HFMAP( "HeaderRightBorderDistance",    XmlNamespace::FO,        XML_PADDING_RIGHT,                XML_TYPE_MEASURE,        CTF_PM_HEADERPADDINGRIGHT ),
+    HFMAP( "HeaderShadowFormat",            XmlNamespace::STYLE,    XML_SHADOW,                     XML_TYPE_TEXT_SHADOW,    CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderBackColor",                XmlNamespace::FO,        XML_BACKGROUND_COLOR,            XML_TYPE_COLORTRANSPARENT | MID_FLAG_MULTI_PROPERTY,    CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderBackTransparent",        XmlNamespace::FO,        XML_BACKGROUND_COLOR,            XML_TYPE_ISTRANSPARENT | MID_FLAG_MERGE_ATTRIBUTE,        CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderBackGraphicLocation",    XmlNamespace::STYLE,    XML_POSITION,                    XML_TYPE_BUILDIN_CMP_ONLY | MID_FLAG_SPECIAL_ITEM,        CTF_PM_HEADERGRAPHICPOSITION ),
+    HFMAP( "HeaderBackGraphicFilter",        XmlNamespace::STYLE,    XML_FILTER_NAME,                XML_TYPE_STRING | MID_FLAG_SPECIAL_ITEM,                CTF_PM_HEADERGRAPHICFILTER ),
+    HFMAP( "HeaderBackGraphic",        XmlNamespace::STYLE,    XML_BACKGROUND_IMAGE,            XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM,                CTF_PM_HEADERGRAPHICURL ),
+    HFMAP( "HeaderDynamicSpacing",        XmlNamespace::STYLE,    XML_DYNAMIC_SPACING,            XML_TYPE_BOOL,          CTF_PM_HEADERFLAG ),
 
     //Index 121: Header DrawingLayer FillAttributes
     // Use HFMAP to get XML_TYPE_PROP_HEADER_FOOTER ORed to the 4th entry
     // Names have to begin with 'Header', all 5th entries need to be ORed with the CTF_PM_HEADERFLAG
-    HFMAP( "HeaderFillStyle",                     XML_NAMESPACE_DRAW,     XML_FILL,                   XML_SW_TYPE_FILLSTYLE,                                  CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillColor",                     XML_NAMESPACE_DRAW,     XML_FILL_COLOR,             XML_TYPE_COLOR,                                         CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillColor2",                    XML_NAMESPACE_DRAW,     XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR,                                         CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillGradientName",              XML_NAMESPACE_DRAW,     XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_HEADERFILLGRADIENTNAME ),
-    HFMAP( "HeaderFillGradientStepCount",         XML_NAMESPACE_DRAW,     XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16,                                      CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillHatchName",                 XML_NAMESPACE_DRAW,     XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_HEADERFILLHATCHNAME ),
-    HFMAP( "HeaderFillBackground",                XML_NAMESPACE_DRAW,     XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL,                                          CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapName",                XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_HEADERFILLBITMAPNAME ),
-    HFMAP( "HeaderFillTransparence",              XML_NAMESPACE_DRAW,     XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY,         CTF_PM_HEADERFLAG ),    // exists in SW, too
-    HFMAP( "HeaderFillTransparenceGradientName",  XML_NAMESPACE_DRAW,     XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_HEADERFILLTRANSNAME ),
-    HFMAP( "HeaderFillBitmapSizeX",               XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapLogicalSize",         XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapSizeY",               XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapLogicalSize",         XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapMode",                XML_NAMESPACE_STYLE,    XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY,        CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapPositionOffsetX",     XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT,                                       CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapPositionOffsetY",     XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT,                                       CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapRectanglePoint",      XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT,                            CTF_PM_HEADERFLAG ),
-    HFMAP( "HeaderFillBitmapOffsetX",             XML_NAMESPACE_DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY,   CTF_PM_HEADERREPEAT_OFFSET_X ),
-    HFMAP( "HeaderFillBitmapOffsetY",             XML_NAMESPACE_DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY,   CTF_PM_HEADERREPEAT_OFFSET_Y ),
+    HFMAP( "HeaderFillStyle",                     XmlNamespace::DRAW,     XML_FILL,                   XML_SW_TYPE_FILLSTYLE,                                  CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillColor",                     XmlNamespace::DRAW,     XML_FILL_COLOR,             XML_TYPE_COLOR,                                         CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillColor2",                    XmlNamespace::DRAW,     XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR,                                         CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillGradientName",              XmlNamespace::DRAW,     XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_HEADERFILLGRADIENTNAME ),
+    HFMAP( "HeaderFillGradientStepCount",         XmlNamespace::DRAW,     XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16,                                      CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillHatchName",                 XmlNamespace::DRAW,     XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_HEADERFILLHATCHNAME ),
+    HFMAP( "HeaderFillBackground",                XmlNamespace::DRAW,     XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL,                                          CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapName",                XmlNamespace::DRAW,     XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_HEADERFILLBITMAPNAME ),
+    HFMAP( "HeaderFillTransparence",              XmlNamespace::DRAW,     XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY,         CTF_PM_HEADERFLAG ),    // exists in SW, too
+    HFMAP( "HeaderFillTransparenceGradientName",  XmlNamespace::DRAW,     XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_HEADERFILLTRANSNAME ),
+    HFMAP( "HeaderFillBitmapSizeX",               XmlNamespace::DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapLogicalSize",         XmlNamespace::DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapSizeY",               XmlNamespace::DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapLogicalSize",         XmlNamespace::DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapMode",                XmlNamespace::STYLE,    XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY,        CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapPositionOffsetX",     XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT,                                       CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapPositionOffsetY",     XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT,                                       CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapRectanglePoint",      XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT,                            CTF_PM_HEADERFLAG ),
+    HFMAP( "HeaderFillBitmapOffsetX",             XmlNamespace::DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY,   CTF_PM_HEADERREPEAT_OFFSET_X ),
+    HFMAP( "HeaderFillBitmapOffsetY",             XmlNamespace::DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY,   CTF_PM_HEADERREPEAT_OFFSET_Y ),
 
     //////////////////////////////////////////////////////////////////////////
     //Index 141: Section for 'footer-style' own section, all members *have* to use CTF_PM_FOOTERFLAG in the context entry (the 5th one)
-    HFMAP( "FooterHeight",                XML_NAMESPACE_SVG,        XML_HEIGHT,                     XML_TYPE_MEASURE,        CTF_PM_FOOTERHEIGHT ),
-    HFMAP( "FooterHeight",                XML_NAMESPACE_FO,        XML_MIN_HEIGHT,                 XML_TYPE_MEASURE,        CTF_PM_FOOTERMINHEIGHT ),
-    HFMAP( "FooterIsDynamicHeight",        XML_NAMESPACE_STYLE,    XML__EMPTY,                     XML_TYPE_BOOL,            CTF_PM_FOOTERDYNAMIC ),
-    HFMAP( "FooterLeftMargin",            XML_NAMESPACE_FO,        XML_MARGIN,                        XML_TYPE_MEASURE,        CTF_PM_FOOTERMARGINALL ),
-    HFMAP( "FooterLeftMargin",            XML_NAMESPACE_FO,        XML_MARGIN_LEFT,                XML_TYPE_MEASURE,        CTF_PM_FOOTERMARGINLEFT ),
-    HFMAP( "FooterRightMargin",            XML_NAMESPACE_FO,        XML_MARGIN_RIGHT,                XML_TYPE_MEASURE,        CTF_PM_FOOTERMARGINRIGHT ),
-    HFMAP( "FooterBodyDistance",        XML_NAMESPACE_FO,        XML_MARGIN_TOP,                 XML_TYPE_MEASURE,        CTF_PM_FOOTERMARGINTOP ),
-    HFMAP( "FooterTopBorder",                XML_NAMESPACE_FO,        XML_BORDER,                     XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERALL ),
-    HFMAP( "FooterTopBorder",                XML_NAMESPACE_FO,        XML_BORDER_TOP,                 XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERTOP ),
-    HFMAP( "FooterBottomBorder",            XML_NAMESPACE_FO,        XML_BORDER_BOTTOM,                XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERBOTTOM ),
-    HFMAP( "FooterLeftBorder",            XML_NAMESPACE_FO,        XML_BORDER_LEFT,                XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERLEFT ),
-    HFMAP( "FooterRightBorder",            XML_NAMESPACE_FO,        XML_BORDER_RIGHT,                XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERRIGHT ),
-    HFMAP( "FooterTopBorder",                XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH,            XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHALL ),
-    HFMAP( "FooterTopBorder",                XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_TOP,        XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHTOP ),
-    HFMAP( "FooterBottomBorder",            XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_BOTTOM,    XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHBOTTOM ),
-    HFMAP( "FooterLeftBorder",            XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_LEFT,     XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHLEFT ),
-    HFMAP( "FooterRightBorder",            XML_NAMESPACE_STYLE,    XML_BORDER_LINE_WIDTH_RIGHT,    XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHRIGHT ),
-    HFMAP( "FooterTopBorderDistance",     XML_NAMESPACE_FO,        XML_PADDING,                    XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGALL ),
-    HFMAP( "FooterTopBorderDistance",     XML_NAMESPACE_FO,        XML_PADDING_TOP,                XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGTOP ),
-    HFMAP( "FooterBottomBorderDistance",    XML_NAMESPACE_FO,        XML_PADDING_BOTTOM,             XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGBOTTOM ),
-    HFMAP( "FooterLeftBorderDistance",    XML_NAMESPACE_FO,        XML_PADDING_LEFT,                XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGLEFT ),
-    HFMAP( "FooterRightBorderDistance",    XML_NAMESPACE_FO,        XML_PADDING_RIGHT,                XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGRIGHT ),
-    HFMAP( "FooterShadowFormat",            XML_NAMESPACE_STYLE,    XML_SHADOW,                     XML_TYPE_TEXT_SHADOW,    CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterBackColor",                XML_NAMESPACE_FO,        XML_BACKGROUND_COLOR,            XML_TYPE_COLORTRANSPARENT | MID_FLAG_MULTI_PROPERTY,    CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterBackTransparent",        XML_NAMESPACE_FO,        XML_BACKGROUND_COLOR,            XML_TYPE_ISTRANSPARENT | MID_FLAG_MERGE_ATTRIBUTE,        CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterBackGraphicLocation",    XML_NAMESPACE_STYLE,    XML_POSITION,                    XML_TYPE_BUILDIN_CMP_ONLY | MID_FLAG_SPECIAL_ITEM,        CTF_PM_FOOTERGRAPHICPOSITION ),
-    HFMAP( "FooterBackGraphicFilter",     XML_NAMESPACE_STYLE,    XML_FILTER_NAME,                XML_TYPE_STRING | MID_FLAG_SPECIAL_ITEM,                CTF_PM_FOOTERGRAPHICFILTER ),
-    HFMAP( "FooterBackGraphic",           XML_NAMESPACE_STYLE,    XML_BACKGROUND_IMAGE,            XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM,                CTF_PM_FOOTERGRAPHICURL ),
-    HFMAP( "FooterDynamicSpacing",        XML_NAMESPACE_STYLE,    XML_DYNAMIC_SPACING,           XML_TYPE_BOOL,          CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterHeight",                XmlNamespace::SVG,        XML_HEIGHT,                     XML_TYPE_MEASURE,        CTF_PM_FOOTERHEIGHT ),
+    HFMAP( "FooterHeight",                XmlNamespace::FO,        XML_MIN_HEIGHT,                 XML_TYPE_MEASURE,        CTF_PM_FOOTERMINHEIGHT ),
+    HFMAP( "FooterIsDynamicHeight",        XmlNamespace::STYLE,    XML__EMPTY,                     XML_TYPE_BOOL,            CTF_PM_FOOTERDYNAMIC ),
+    HFMAP( "FooterLeftMargin",            XmlNamespace::FO,        XML_MARGIN,                        XML_TYPE_MEASURE,        CTF_PM_FOOTERMARGINALL ),
+    HFMAP( "FooterLeftMargin",            XmlNamespace::FO,        XML_MARGIN_LEFT,                XML_TYPE_MEASURE,        CTF_PM_FOOTERMARGINLEFT ),
+    HFMAP( "FooterRightMargin",            XmlNamespace::FO,        XML_MARGIN_RIGHT,                XML_TYPE_MEASURE,        CTF_PM_FOOTERMARGINRIGHT ),
+    HFMAP( "FooterBodyDistance",        XmlNamespace::FO,        XML_MARGIN_TOP,                 XML_TYPE_MEASURE,        CTF_PM_FOOTERMARGINTOP ),
+    HFMAP( "FooterTopBorder",                XmlNamespace::FO,        XML_BORDER,                     XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERALL ),
+    HFMAP( "FooterTopBorder",                XmlNamespace::FO,        XML_BORDER_TOP,                 XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERTOP ),
+    HFMAP( "FooterBottomBorder",            XmlNamespace::FO,        XML_BORDER_BOTTOM,                XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERBOTTOM ),
+    HFMAP( "FooterLeftBorder",            XmlNamespace::FO,        XML_BORDER_LEFT,                XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERLEFT ),
+    HFMAP( "FooterRightBorder",            XmlNamespace::FO,        XML_BORDER_RIGHT,                XML_TYPE_BORDER,        CTF_PM_FOOTERBORDERRIGHT ),
+    HFMAP( "FooterTopBorder",                XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH,            XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHALL ),
+    HFMAP( "FooterTopBorder",                XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_TOP,        XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHTOP ),
+    HFMAP( "FooterBottomBorder",            XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_BOTTOM,    XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHBOTTOM ),
+    HFMAP( "FooterLeftBorder",            XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_LEFT,     XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHLEFT ),
+    HFMAP( "FooterRightBorder",            XmlNamespace::STYLE,    XML_BORDER_LINE_WIDTH_RIGHT,    XML_TYPE_BORDER_WIDTH,    CTF_PM_FOOTERBORDERWIDTHRIGHT ),
+    HFMAP( "FooterTopBorderDistance",     XmlNamespace::FO,        XML_PADDING,                    XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGALL ),
+    HFMAP( "FooterTopBorderDistance",     XmlNamespace::FO,        XML_PADDING_TOP,                XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGTOP ),
+    HFMAP( "FooterBottomBorderDistance",    XmlNamespace::FO,        XML_PADDING_BOTTOM,             XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGBOTTOM ),
+    HFMAP( "FooterLeftBorderDistance",    XmlNamespace::FO,        XML_PADDING_LEFT,                XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGLEFT ),
+    HFMAP( "FooterRightBorderDistance",    XmlNamespace::FO,        XML_PADDING_RIGHT,                XML_TYPE_MEASURE,        CTF_PM_FOOTERPADDINGRIGHT ),
+    HFMAP( "FooterShadowFormat",            XmlNamespace::STYLE,    XML_SHADOW,                     XML_TYPE_TEXT_SHADOW,    CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterBackColor",                XmlNamespace::FO,        XML_BACKGROUND_COLOR,            XML_TYPE_COLORTRANSPARENT | MID_FLAG_MULTI_PROPERTY,    CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterBackTransparent",        XmlNamespace::FO,        XML_BACKGROUND_COLOR,            XML_TYPE_ISTRANSPARENT | MID_FLAG_MERGE_ATTRIBUTE,        CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterBackGraphicLocation",    XmlNamespace::STYLE,    XML_POSITION,                    XML_TYPE_BUILDIN_CMP_ONLY | MID_FLAG_SPECIAL_ITEM,        CTF_PM_FOOTERGRAPHICPOSITION ),
+    HFMAP( "FooterBackGraphicFilter",     XmlNamespace::STYLE,    XML_FILTER_NAME,                XML_TYPE_STRING | MID_FLAG_SPECIAL_ITEM,                CTF_PM_FOOTERGRAPHICFILTER ),
+    HFMAP( "FooterBackGraphic",           XmlNamespace::STYLE,    XML_BACKGROUND_IMAGE,            XML_TYPE_STRING | MID_FLAG_ELEMENT_ITEM,                CTF_PM_FOOTERGRAPHICURL ),
+    HFMAP( "FooterDynamicSpacing",        XmlNamespace::STYLE,    XML_DYNAMIC_SPACING,           XML_TYPE_BOOL,          CTF_PM_FOOTERFLAG ),
 
     //Index 170: Footer DrawingLayer FillAttributes
     // Use HFMAP to get XML_TYPE_PROP_HEADER_FOOTER ORed to the 4th entry
     // Names have to begin with 'Footer', all 5th entries need to be ORed with the CTF_PM_FOOTERFLAG
-    HFMAP( "FooterFillStyle",                     XML_NAMESPACE_DRAW,     XML_FILL,                   XML_SW_TYPE_FILLSTYLE,                                  CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillColor",                     XML_NAMESPACE_DRAW,     XML_FILL_COLOR,             XML_TYPE_COLOR,                                         CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillColor2",                    XML_NAMESPACE_DRAW,     XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR,                                         CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillGradientName",              XML_NAMESPACE_DRAW,     XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FOOTERFILLGRADIENTNAME ),
-    HFMAP( "FooterFillGradientStepCount",         XML_NAMESPACE_DRAW,     XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16,                                      CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillHatchName",                 XML_NAMESPACE_DRAW,     XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FOOTERFILLHATCHNAME ),
-    HFMAP( "FooterFillBackground",                XML_NAMESPACE_DRAW,     XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL,                                          CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapName",                XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FOOTERFILLBITMAPNAME ),
-    HFMAP( "FooterFillTransparence",              XML_NAMESPACE_DRAW,     XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY,         CTF_PM_FOOTERFLAG ),    // exists in SW, too
-    HFMAP( "FooterFillTransparenceGradientName",  XML_NAMESPACE_DRAW,     XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FOOTERFILLTRANSNAME ),
-    HFMAP( "FooterFillBitmapSizeX",               XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapLogicalSize",         XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapSizeY",               XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapLogicalSize",         XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapMode",                XML_NAMESPACE_STYLE,    XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY,        CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapPositionOffsetX",     XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT,                                       CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapPositionOffsetY",     XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT,                                       CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapRectanglePoint",      XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT,                            CTF_PM_FOOTERFLAG ),
-    HFMAP( "FooterFillBitmapOffsetX",             XML_NAMESPACE_DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY,   CTF_PM_FOOTERREPEAT_OFFSET_X ),
-    HFMAP( "FooterFillBitmapOffsetY",             XML_NAMESPACE_DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY,   CTF_PM_FOOTERREPEAT_OFFSET_Y ),
+    HFMAP( "FooterFillStyle",                     XmlNamespace::DRAW,     XML_FILL,                   XML_SW_TYPE_FILLSTYLE,                                  CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillColor",                     XmlNamespace::DRAW,     XML_FILL_COLOR,             XML_TYPE_COLOR,                                         CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillColor2",                    XmlNamespace::DRAW,     XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR,                                         CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillGradientName",              XmlNamespace::DRAW,     XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FOOTERFILLGRADIENTNAME ),
+    HFMAP( "FooterFillGradientStepCount",         XmlNamespace::DRAW,     XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16,                                      CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillHatchName",                 XmlNamespace::DRAW,     XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FOOTERFILLHATCHNAME ),
+    HFMAP( "FooterFillBackground",                XmlNamespace::DRAW,     XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL,                                          CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapName",                XmlNamespace::DRAW,     XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FOOTERFILLBITMAPNAME ),
+    HFMAP( "FooterFillTransparence",              XmlNamespace::DRAW,     XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY,         CTF_PM_FOOTERFLAG ),    // exists in SW, too
+    HFMAP( "FooterFillTransparenceGradientName",  XmlNamespace::DRAW,     XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,         CTF_PM_FOOTERFILLTRANSNAME ),
+    HFMAP( "FooterFillBitmapSizeX",               XmlNamespace::DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapLogicalSize",         XmlNamespace::DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapSizeY",               XmlNamespace::DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,     CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapLogicalSize",         XmlNamespace::DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,       CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapMode",                XmlNamespace::STYLE,    XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY,        CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapPositionOffsetX",     XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT,                                       CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapPositionOffsetY",     XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT,                                       CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapRectanglePoint",      XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT,                            CTF_PM_FOOTERFLAG ),
+    HFMAP( "FooterFillBitmapOffsetX",             XmlNamespace::DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY,   CTF_PM_FOOTERREPEAT_OFFSET_X ),
+    HFMAP( "FooterFillBitmapOffsetY",             XmlNamespace::DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY,   CTF_PM_FOOTERREPEAT_OFFSET_Y ),
 
     { nullptr, 0, 0, XML_EMPTY, 0, 0, SvtSaveOptions::ODFSVER_010, false } // index 190
 };
@@ -273,28 +273,28 @@ XMLPropertyMapEntry const g_XMLPageMasterDrawingPageStyleMap[] =
 {
     // ODF 1.3 OFFICE-3937 style of family "drawing-page" referenced from style:master-page
     // duplication of relevant part of aXMLPageMasterStyleMap but as DP type
-    DPMAP("FillStyle",                    XML_NAMESPACE_DRAW,     XML_FILL,                   XML_SW_TYPE_FILLSTYLE,                                CTF_PM_FILL),
+    DPMAP("FillStyle",                    XmlNamespace::DRAW,     XML_FILL,                   XML_SW_TYPE_FILLSTYLE,                                CTF_PM_FILL),
     // this does not exist yet!
-    DPMAP("BackgroundFullSize",           XML_NAMESPACE_DRAW,     XML_BACKGROUND_SIZE,        XML_SW_TYPE_PRESPAGE_BACKSIZE|MID_FLAG_NO_PROPERTY,   CTF_PM_BACKGROUNDSIZE),
-    DPMAP("FillColor",                    XML_NAMESPACE_DRAW,     XML_FILL_COLOR,             XML_TYPE_COLOR,                                       0),
-    DPMAP("FillColor2",                   XML_NAMESPACE_DRAW,     XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR,                                       0),
-    DPMAP("FillGradientName",             XML_NAMESPACE_DRAW,     XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,       CTF_PM_FILLGRADIENTNAME),
-    DPMAP("FillGradientStepCount",        XML_NAMESPACE_DRAW,     XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16,                                    0),
-    DPMAP("FillHatchName",                XML_NAMESPACE_DRAW,     XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,       CTF_PM_FILLHATCHNAME),
-    DPMAP("FillBackground",               XML_NAMESPACE_DRAW,     XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL,                                        0),
-    DPMAP("FillBitmapName",               XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,       CTF_PM_FILLBITMAPNAME),
-    DPMAP("FillTransparence",             XML_NAMESPACE_DRAW,     XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY,       0),    /* exists in SW, too */
-    DPMAP("FillTransparenceGradientName", XML_NAMESPACE_DRAW,     XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,       CTF_PM_FILLTRANSNAME),
-    DPMAP("FillBitmapSizeX",              XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,   0),
-    DPMAP("FillBitmapLogicalSize",        XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,     0),
-    DPMAP("FillBitmapSizeY",              XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,   0),
-    DPMAP("FillBitmapLogicalSize",        XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,     0),
-    DPMAP("FillBitmapMode",               XML_NAMESPACE_STYLE,    XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY,      CTF_PM_FILLBITMAPMODE),
-    DPMAP("FillBitmapPositionOffsetX",    XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT,                                     0),
-    DPMAP("FillBitmapPositionOffsetY",    XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT,                                     0),
-    DPMAP("FillBitmapRectanglePoint",     XML_NAMESPACE_DRAW,     XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT,                          0),
-    DPMAP("FillBitmapOffsetX",            XML_NAMESPACE_DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_PM_REPEAT_OFFSET_X),
-    DPMAP("FillBitmapOffsetY",            XML_NAMESPACE_DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_PM_REPEAT_OFFSET_Y),
+    DPMAP("BackgroundFullSize",           XmlNamespace::DRAW,     XML_BACKGROUND_SIZE,        XML_SW_TYPE_PRESPAGE_BACKSIZE|MID_FLAG_NO_PROPERTY,   CTF_PM_BACKGROUNDSIZE),
+    DPMAP("FillColor",                    XmlNamespace::DRAW,     XML_FILL_COLOR,             XML_TYPE_COLOR,                                       0),
+    DPMAP("FillColor2",                   XmlNamespace::DRAW,     XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR,                                       0),
+    DPMAP("FillGradientName",             XmlNamespace::DRAW,     XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,       CTF_PM_FILLGRADIENTNAME),
+    DPMAP("FillGradientStepCount",        XmlNamespace::DRAW,     XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16,                                    0),
+    DPMAP("FillHatchName",                XmlNamespace::DRAW,     XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,       CTF_PM_FILLHATCHNAME),
+    DPMAP("FillBackground",               XmlNamespace::DRAW,     XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL,                                        0),
+    DPMAP("FillBitmapName",               XmlNamespace::DRAW,     XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,       CTF_PM_FILLBITMAPNAME),
+    DPMAP("FillTransparence",             XmlNamespace::DRAW,     XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY,       0),    /* exists in SW, too */
+    DPMAP("FillTransparenceGradientName", XmlNamespace::DRAW,     XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT,       CTF_PM_FILLTRANSNAME),
+    DPMAP("FillBitmapSizeX",              XmlNamespace::DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,   0),
+    DPMAP("FillBitmapLogicalSize",        XmlNamespace::DRAW,     XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,     0),
+    DPMAP("FillBitmapSizeY",              XmlNamespace::DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY,   0),
+    DPMAP("FillBitmapLogicalSize",        XmlNamespace::DRAW,     XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY,     0),
+    DPMAP("FillBitmapMode",               XmlNamespace::STYLE,    XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY,      CTF_PM_FILLBITMAPMODE),
+    DPMAP("FillBitmapPositionOffsetX",    XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT,                                     0),
+    DPMAP("FillBitmapPositionOffsetY",    XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT,                                     0),
+    DPMAP("FillBitmapRectanglePoint",     XmlNamespace::DRAW,     XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT,                          0),
+    DPMAP("FillBitmapOffsetX",            XmlNamespace::DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_PM_REPEAT_OFFSET_X),
+    DPMAP("FillBitmapOffsetY",            XmlNamespace::DRAW,     XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_PM_REPEAT_OFFSET_Y),
 
     { nullptr, 0, 0, XML_EMPTY, 0, 0, SvtSaveOptions::ODFSVER_010, false }
 };
diff --git a/xmloff/source/style/TransGradientStyle.cxx b/xmloff/source/style/TransGradientStyle.cxx
index a997a76c9bff..52ee49926af0 100644
--- a/xmloff/source/style/TransGradientStyle.cxx
+++ b/xmloff/source/style/TransGradientStyle.cxx
@@ -96,15 +96,15 @@ void XMLTransGradientStyleImport::importXML(
 
     static const SvXMLTokenMapEntry aTrGradientAttrTokenMap[] =
     {
-        { XML_NAMESPACE_DRAW, XML_NAME, XML_TOK_GRADIENT_NAME },
-        { XML_NAMESPACE_DRAW, XML_DISPLAY_NAME, XML_TOK_GRADIENT_DISPLAY_NAME },
-        { XML_NAMESPACE_DRAW, XML_STYLE, XML_TOK_GRADIENT_STYLE },
-        { XML_NAMESPACE_DRAW, XML_CX, XML_TOK_GRADIENT_CX },
-        { XML_NAMESPACE_DRAW, XML_CY, XML_TOK_GRADIENT_CY },
-        { XML_NAMESPACE_DRAW, XML_START, XML_TOK_GRADIENT_START },
-        { XML_NAMESPACE_DRAW, XML_END, XML_TOK_GRADIENT_END },
-        { XML_NAMESPACE_DRAW, XML_GRADIENT_ANGLE, XML_TOK_GRADIENT_ANGLE },
-        { XML_NAMESPACE_DRAW, XML_BORDER, XML_TOK_GRADIENT_BORDER, },
+        { XmlNamespace::DRAW, XML_NAME, XML_TOK_GRADIENT_NAME },
+        { XmlNamespace::DRAW, XML_DISPLAY_NAME, XML_TOK_GRADIENT_DISPLAY_NAME },
+        { XmlNamespace::DRAW, XML_STYLE, XML_TOK_GRADIENT_STYLE },
+        { XmlNamespace::DRAW, XML_CX, XML_TOK_GRADIENT_CX },
+        { XmlNamespace::DRAW, XML_CY, XML_TOK_GRADIENT_CY },
+        { XmlNamespace::DRAW, XML_START, XML_TOK_GRADIENT_START },
+        { XmlNamespace::DRAW, XML_END, XML_TOK_GRADIENT_END },
+        { XmlNamespace::DRAW, XML_GRADIENT_ANGLE, XML_TOK_GRADIENT_ANGLE },
+        { XmlNamespace::DRAW, XML_BORDER, XML_TOK_GRADIENT_BORDER, },
         XML_TOKEN_MAP_END
     };
 
@@ -235,15 +235,15 @@ void XMLTransGradientStyleExport::exportXML(
 
     // Name
     bool bEncoded = false;
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_NAME,
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_NAME,
                           rExport.EncodeStyleName( rStrName,
                                                     &bEncoded ) );
     if( bEncoded )
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_DISPLAY_NAME,
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_DISPLAY_NAME,
                                 rStrName );
 
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_STYLE, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_STYLE, aStrValue );
 
     // Center x/y
     if( aGradient.Style != awt::GradientStyle_LINEAR &&
@@ -251,11 +251,11 @@ void XMLTransGradientStyleExport::exportXML(
     {
         ::sax::Converter::convertPercent(aOut, aGradient.XOffset);
         aStrValue = aOut.makeStringAndClear();
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CX, aStrValue );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_CX, aStrValue );
 
         ::sax::Converter::convertPercent(aOut, aGradient.YOffset);
         aStrValue = aOut.makeStringAndClear();
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_CY, aStrValue );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_CY, aStrValue );
     }
 
     // Transparency start
@@ -263,31 +263,31 @@ void XMLTransGradientStyleExport::exportXML(
     sal_Int32 aStartValue = 100 - static_cast<sal_Int32>(((aColor.GetRed() + 1) * 100) / 255);
     ::sax::Converter::convertPercent( aOut, aStartValue );
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_START, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_START, aStrValue );
 
     // Transparency end
     aColor = Color(aGradient.EndColor);
     sal_Int32 aEndValue = 100 - static_cast<sal_Int32>(((aColor.GetRed() + 1) * 100) / 255);
     ::sax::Converter::convertPercent( aOut, aEndValue );
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_END, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_END, aStrValue );
 
     // Angle
     if( aGradient.Style != awt::GradientStyle_RADIAL )
     {
         ::sax::Converter::convertAngle(aOut, aGradient.Angle, rExport.getSaneDefaultVersion());
         aStrValue = aOut.makeStringAndClear();
-        rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_GRADIENT_ANGLE, aStrValue );
+        rExport.AddAttribute( XmlNamespace::DRAW, XML_GRADIENT_ANGLE, aStrValue );
     }
 
     // Border
     ::sax::Converter::convertPercent( aOut, aGradient.Border );
     aStrValue = aOut.makeStringAndClear();
-    rExport.AddAttribute( XML_NAMESPACE_DRAW, XML_BORDER, aStrValue );
+    rExport.AddAttribute( XmlNamespace::DRAW, XML_BORDER, aStrValue );
 
     // Do Write
     SvXMLElementExport rElem( rExport,
-                              XML_NAMESPACE_DRAW, XML_OPACITY,
+                              XmlNamespace::DRAW, XML_OPACITY,
                               true, false );
 }
 
diff --git a/xmloff/source/style/XMLBackgroundImageContext.cxx b/xmloff/source/style/XMLBackgroundImageContext.cxx
index a390a03fe03c..447f27b53bbc 100644
--- a/xmloff/source/style/XMLBackgroundImageContext.cxx
+++ b/xmloff/source/style/XMLBackgroundImageContext.cxx
@@ -61,14 +61,14 @@ enum SvXMLTokenMapAttrs
 
 const SvXMLTokenMapEntry aBGImgAttributesAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XLINK, XML_HREF,        XML_TOK_BGIMG_HREF      },
-    { XML_NAMESPACE_XLINK, XML_TYPE,        XML_TOK_BGIMG_TYPE      },
-    { XML_NAMESPACE_XLINK, XML_ACTUATE,     XML_TOK_BGIMG_ACTUATE   },
-    { XML_NAMESPACE_XLINK, XML_SHOW,        XML_TOK_BGIMG_SHOW      },
-    { XML_NAMESPACE_STYLE, XML_POSITION,    XML_TOK_BGIMG_POSITION  },
-    { XML_NAMESPACE_STYLE, XML_REPEAT,      XML_TOK_BGIMG_REPEAT    },
-    { XML_NAMESPACE_STYLE, XML_FILTER_NAME, XML_TOK_BGIMG_FILTER    },
-    { XML_NAMESPACE_DRAW,  XML_OPACITY,     XML_TOK_BGIMG_OPACITY   },
+    { XmlNamespace::XLINK, XML_HREF,        XML_TOK_BGIMG_HREF      },
+    { XmlNamespace::XLINK, XML_TYPE,        XML_TOK_BGIMG_TYPE      },
+    { XmlNamespace::XLINK, XML_ACTUATE,     XML_TOK_BGIMG_ACTUATE   },
+    { XmlNamespace::XLINK, XML_SHOW,        XML_TOK_BGIMG_SHOW      },
+    { XmlNamespace::STYLE, XML_POSITION,    XML_TOK_BGIMG_POSITION  },
+    { XmlNamespace::STYLE, XML_REPEAT,      XML_TOK_BGIMG_REPEAT    },
+    { XmlNamespace::STYLE, XML_FILTER_NAME, XML_TOK_BGIMG_FILTER    },
+    { XmlNamespace::DRAW,  XML_OPACITY,     XML_TOK_BGIMG_OPACITY   },
     XML_TOKEN_MAP_END
 };
 
@@ -352,7 +352,7 @@ SvXMLImportContextRef XMLBackgroundImageContext::CreateChildContext(
         const Reference< xml::sax::XAttributeList > & xAttrList )
 {
     SvXMLImportContext *pContext = nullptr;
-    if( (XML_NAMESPACE_OFFICE == nPrefix) &&
+    if( (XmlNamespace::OFFICE == nPrefix) &&
         xmloff::token::IsXMLToken( rLocalName,
                                         xmloff::token::XML_BINARY_DATA ) )
     {
diff --git a/xmloff/source/style/XMLBackgroundImageExport.cxx b/xmloff/source/style/XMLBackgroundImageExport.cxx
index 88fd2e620d0d..3e575934c9f5 100644
--- a/xmloff/source/style/XMLBackgroundImageExport.cxx
+++ b/xmloff/source/style/XMLBackgroundImageExport.cxx
@@ -66,9 +66,9 @@ void XMLBackgroundImageExport::exportXML( const Any& rGraphicAny,
 
         if (!sInternalURL.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sInternalURL);
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_HREF, sInternalURL);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD);
         }
 
         OUStringBuffer aOut;
@@ -119,7 +119,7 @@ void XMLBackgroundImageExport::exportXML( const Any& rGraphicAny,
             }
         }
         if( !aOut.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute( XmlNamespace::STYLE,
                                   XML_POSITION, aOut.makeStringAndClear() );
 
         if( GraphicLocation_AREA == ePos )
@@ -131,7 +131,7 @@ void XMLBackgroundImageExport::exportXML( const Any& rGraphicAny,
             aOut.append( GetXMLToken(XML_BACKGROUND_NO_REPEAT) );
         }
         if( !aOut.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_REPEAT,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_REPEAT,
                           aOut.makeStringAndClear() );
 
         if( pFilter )
@@ -139,7 +139,7 @@ void XMLBackgroundImageExport::exportXML( const Any& rGraphicAny,
             OUString sFilter;
             (*pFilter) >>= sFilter;
             if( !sFilter.isEmpty() )
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_FILTER_NAME,
+                GetExport().AddAttribute( XmlNamespace::STYLE, XML_FILTER_NAME,
                                           sFilter );
         }
 
@@ -150,7 +150,7 @@ void XMLBackgroundImageExport::exportXML( const Any& rGraphicAny,
             {
                 OUStringBuffer aTransOut;
                 ::sax::Converter::convertPercent(aTransOut, 100-nTransparency);
-                GetExport().AddAttribute( XML_NAMESPACE_DRAW, XML_OPACITY,
+                GetExport().AddAttribute( XmlNamespace::DRAW, XML_OPACITY,
                                           aTransOut.makeStringAndClear() );
             }
         }
diff --git a/xmloff/source/style/XMLFontAutoStylePool.cxx b/xmloff/source/style/XMLFontAutoStylePool.cxx
index 1d03c73709d7..6c3abe4275d4 100644
--- a/xmloff/source/style/XMLFontAutoStylePool.cxx
+++ b/xmloff/source/style/XMLFontAutoStylePool.cxx
@@ -389,7 +389,7 @@ std::unordered_set<OUString> XMLFontAutoStylePool::getUsedFontList()
 
 void XMLFontAutoStylePool::exportXML()
 {
-    SvXMLElementExport aElem(GetExport(), XML_NAMESPACE_OFFICE,
+    SvXMLElementExport aElem(GetExport(), XmlNamespace::OFFICE,
                              XML_FONT_FACE_DECLS,
                              true, true);
     Any aAny;
@@ -408,40 +408,40 @@ void XMLFontAutoStylePool::exportXML()
 
     for (const auto& pEntry : *m_pFontAutoStylePool)
     {
-        GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_NAME, pEntry->GetName());
+        GetExport().AddAttribute(XmlNamespace::STYLE, XML_NAME, pEntry->GetName());
 
         aAny <<= pEntry->GetFamilyName();
         if (aFamilyNameHdl.exportXML(sTmp, aAny, rUnitConv))
-            GetExport().AddAttribute(XML_NAMESPACE_SVG,
+            GetExport().AddAttribute(XmlNamespace::SVG,
                                      XML_FONT_FAMILY, sTmp);
 
         const OUString& rStyleName = pEntry->GetStyleName();
         if (!rStyleName.isEmpty())
-            GetExport().AddAttribute(XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute(XmlNamespace::STYLE,
                                      XML_FONT_ADORNMENTS,
                                      rStyleName);
 
         aAny <<= static_cast<sal_Int16>(pEntry->GetFamily());
         if (aFamilyHdl.exportXML(sTmp, aAny, rUnitConv))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute(XmlNamespace::STYLE,
                                      XML_FONT_FAMILY_GENERIC, sTmp);
         }
         aAny <<= static_cast<sal_Int16>(pEntry->GetPitch());
         if (aPitchHdl.exportXML(sTmp, aAny, rUnitConv))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute(XmlNamespace::STYLE,
                                      XML_FONT_PITCH, sTmp);
         }
 
         aAny <<= static_cast<sal_Int16>(pEntry->GetEncoding());
         if (aEncHdl.exportXML( sTmp, aAny, rUnitConv))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute(XmlNamespace::STYLE,
                                      XML_FONT_CHARSET, sTmp);
         }
 
-        SvXMLElementExport aElement(GetExport(), XML_NAMESPACE_STYLE,
+        SvXMLElementExport aElement(GetExport(), XmlNamespace::STYLE,
                                     XML_FONT_FACE, true, true);
 
         if (m_bTryToEmbedFonts)
@@ -489,26 +489,26 @@ void XMLFontAutoStylePool::exportXML()
             }
             if (!aEmbeddedFonts.empty())
             {
-                SvXMLElementExport fontFaceSrc(GetExport(), XML_NAMESPACE_SVG, XML_FONT_FACE_SRC, true, true);
+                SvXMLElementExport fontFaceSrc(GetExport(), XmlNamespace::SVG, XML_FONT_FACE_SRC, true, true);
                 for (EmbeddedFontInfo const & rEmbeddedFont : aEmbeddedFonts)
                 {
                     if (fontFilesMap.count(rEmbeddedFont.aURL))
                     {
                         if (!bExportFlat)
                         {
-                            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_HREF,
+                            GetExport().AddAttribute(XmlNamespace::XLINK, XML_HREF,
                                                      fontFilesMap[rEmbeddedFont.aURL]);
-                            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, "simple");
+                            GetExport().AddAttribute(XmlNamespace::XLINK, XML_TYPE, "simple");
                         }
 
                         // Help consumers of our output by telling them which
                         // font file is which one.
-                        GetExport().AddAttribute(XML_NAMESPACE_LO_EXT, XML_FONT_STYLE,
+                        GetExport().AddAttribute(XmlNamespace::LO_EXT, XML_FONT_STYLE,
                                                  FontItalicToString(rEmbeddedFont.eItalic));
-                        GetExport().AddAttribute(XML_NAMESPACE_LO_EXT, XML_FONT_WEIGHT,
+                        GetExport().AddAttribute(XmlNamespace::LO_EXT, XML_FONT_WEIGHT,
                                                  FontWeightToString(rEmbeddedFont.eWeight));
 
-                        SvXMLElementExport fontFaceUri(GetExport(), XML_NAMESPACE_SVG,
+                        SvXMLElementExport fontFaceUri(GetExport(), XmlNamespace::SVG,
                                                        XML_FONT_FACE_URI, true, true);
 
                         if (bExportFlat)
@@ -527,8 +527,8 @@ void XMLFontAutoStylePool::exportXML()
                             }
                         }
 
-                        GetExport().AddAttribute(XML_NAMESPACE_SVG, XML_STRING, "truetype");
-                        SvXMLElementExport fontFaceFormat(GetExport(), XML_NAMESPACE_SVG,
+                        GetExport().AddAttribute(XmlNamespace::SVG, XML_STRING, "truetype");
+                        SvXMLElementExport fontFaceFormat(GetExport(), XmlNamespace::SVG,
                                                           XML_FONT_FACE_FORMAT, true, true);
                     }
                 }
diff --git a/xmloff/source/style/XMLFontStylesContext.cxx b/xmloff/source/style/XMLFontStylesContext.cxx
index ad706d987c96..c0cd43eeb858 100644
--- a/xmloff/source/style/XMLFontStylesContext.cxx
+++ b/xmloff/source/style/XMLFontStylesContext.cxx
@@ -67,15 +67,15 @@ static const SvXMLTokenMapEntry* lcl_getFontStyleAttrTokenMap()
 {
     static const SvXMLTokenMapEntry aFontStyleAttrTokenMap[] =
     {
-        { XML_NAMESPACE_SVG, XML_FONT_FAMILY,
+        { XmlNamespace::SVG, XML_FONT_FAMILY,
                 XML_TOK_FONT_STYLE_ATTR_FAMILY },
-        { XML_NAMESPACE_STYLE, XML_FONT_FAMILY_GENERIC,
+        { XmlNamespace::STYLE, XML_FONT_FAMILY_GENERIC,
                 XML_TOK_FONT_STYLE_ATTR_FAMILY_GENERIC },
-        { XML_NAMESPACE_STYLE, XML_FONT_ADORNMENTS,
+        { XmlNamespace::STYLE, XML_FONT_ADORNMENTS,
                 XML_TOK_FONT_STYLE_ATTR_STYLENAME },
-        { XML_NAMESPACE_STYLE, XML_FONT_PITCH,
+        { XmlNamespace::STYLE, XML_FONT_PITCH,
                 XML_TOK_FONT_STYLE_ATTR_PITCH },
-        { XML_NAMESPACE_STYLE, XML_FONT_CHARSET,
+        { XmlNamespace::STYLE, XML_FONT_CHARSET,
                 XML_TOK_FONT_STYLE_ATTR_CHARSET },
 
         XML_TOKEN_MAP_END
@@ -181,7 +181,7 @@ SvXMLImportContextRef XMLFontStyleContextFontFace::CreateChildContext(
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList )
 {
-    if( nPrefix == XML_NAMESPACE_SVG && IsXMLToken( rLocalName, XML_FONT_FACE_SRC ))
+    if( nPrefix == XmlNamespace::SVG && IsXMLToken( rLocalName, XML_FONT_FACE_SRC ))
         return new XMLFontStyleContextFontFaceSrc( GetImport(), nPrefix, rLocalName, *this );
     return SvXMLStyleContext::CreateChildContext( nPrefix, rLocalName, xAttrList );
 }
@@ -206,7 +206,7 @@ XMLFontStyleContextFontFaceFormat::XMLFontStyleContextFontFaceFormat( SvXMLImpor
 void XMLFontStyleContextFontFaceFormat::SetAttribute( sal_uInt16 nPrefixKey, const OUString& rLocalName,
     const OUString& rValue )
 {
-    if( nPrefixKey == XML_NAMESPACE_SVG && IsXMLToken( rLocalName, XML_STRING ))
+    if( nPrefixKey == XmlNamespace::SVG && IsXMLToken( rLocalName, XML_STRING ))
         uri.SetFormat(rValue);
     else
         SvXMLStyleContext::SetAttribute( nPrefixKey, rLocalName, rValue );
@@ -226,7 +226,7 @@ SvXMLImportContextRef XMLFontStyleContextFontFaceSrc::CreateChildContext(
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList )
 {
-    if( nPrefix == XML_NAMESPACE_SVG && IsXMLToken( rLocalName, XML_FONT_FACE_URI ))
+    if( nPrefix == XmlNamespace::SVG && IsXMLToken( rLocalName, XML_FONT_FACE_URI ))
         return new XMLFontStyleContextFontFaceUri( GetImport(), nPrefix, rLocalName, xAttrList, font );
     return nullptr;
 }
@@ -246,9 +246,9 @@ SvXMLImportContextRef XMLFontStyleContextFontFaceUri::CreateChildContext(
         const OUString& rLocalName,
         const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList )
 {
-    if( nPrefix == XML_NAMESPACE_SVG && IsXMLToken( rLocalName, XML_FONT_FACE_FORMAT ))
+    if( nPrefix == XmlNamespace::SVG && IsXMLToken( rLocalName, XML_FONT_FACE_FORMAT ))
         return new XMLFontStyleContextFontFaceFormat( GetImport(), nPrefix, rLocalName, xAttrList, *this );
-    if( linkPath.isEmpty() && ( nPrefix == XML_NAMESPACE_OFFICE ) && IsXMLToken( rLocalName, XML_BINARY_DATA ) )
+    if( linkPath.isEmpty() && ( nPrefix == XmlNamespace::OFFICE ) && IsXMLToken( rLocalName, XML_BINARY_DATA ) )
     {
         mxBase64Stream.set( new comphelper::OSequenceOutputStream( maFontData ) );
         if( mxBase64Stream.is() )
@@ -260,7 +260,7 @@ SvXMLImportContextRef XMLFontStyleContextFontFaceUri::CreateChildContext(
 void XMLFontStyleContextFontFaceUri::SetAttribute( sal_uInt16 nPrefixKey, const OUString& rLocalName,
     const OUString& rValue )
 {
-    if( nPrefixKey == XML_NAMESPACE_XLINK && IsXMLToken( rLocalName, XML_HREF ))
+    if( nPrefixKey == XmlNamespace::XLINK && IsXMLToken( rLocalName, XML_HREF ))
         linkPath = rValue;
     else
         SvXMLStyleContext::SetAttribute( nPrefixKey, rLocalName, rValue );
@@ -349,7 +349,7 @@ SvXMLStyleContext *XMLFontStylesContext::CreateStyleChildContext(
         const css::uno::Reference< css::xml::sax::XAttributeList > & xAttrList )
 {
     SvXMLStyleContext *pStyle;
-    if( XML_NAMESPACE_STYLE == nPrefix &&
+    if( XmlNamespace::STYLE == nPrefix &&
         IsXMLToken( rLocalName, XML_FONT_FACE ) )
     {
         pStyle = new XMLFontStyleContextFontFace( GetImport(), nPrefix,
diff --git a/xmloff/source/style/XMLFootnoteSeparatorExport.cxx b/xmloff/source/style/XMLFootnoteSeparatorExport.cxx
index e79bc6f07a86..0c6fac4dbcb4 100644
--- a/xmloff/source/style/XMLFootnoteSeparatorExport.cxx
+++ b/xmloff/source/style/XMLFootnoteSeparatorExport.cxx
@@ -111,7 +111,7 @@ void XMLFootnoteSeparatorExport::exportXML(
     if (nLineWeight > 0)
     {
         rExport.GetMM100UnitConverter().convertMeasureToXML(sBuf, nLineWeight);
-        rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_WIDTH,
+        rExport.AddAttribute(XmlNamespace::STYLE, XML_WIDTH,
                              sBuf.makeStringAndClear());
     }
 
@@ -120,7 +120,7 @@ void XMLFootnoteSeparatorExport::exportXML(
     {
         rExport.GetMM100UnitConverter().convertMeasureToXML(sBuf,
                 nLineTextDistance);
-        rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_DISTANCE_BEFORE_SEP,
+        rExport.AddAttribute(XmlNamespace::STYLE, XML_DISTANCE_BEFORE_SEP,
                              sBuf.makeStringAndClear());
     }
 
@@ -129,7 +129,7 @@ void XMLFootnoteSeparatorExport::exportXML(
     {
         rExport.GetMM100UnitConverter().convertMeasureToXML(sBuf,
                 nLineDistance);
-        rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_DISTANCE_AFTER_SEP,
+        rExport.AddAttribute(XmlNamespace::STYLE, XML_DISTANCE_AFTER_SEP,
                              sBuf.makeStringAndClear());
     }
 
@@ -145,7 +145,7 @@ void XMLFootnoteSeparatorExport::exportXML(
     if (SvXMLUnitConverter::convertEnum(
             sBuf, nLineStyle, aXML_LineStyle_Enum ) )
     {
-        rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_LINE_STYLE,
+        rExport.AddAttribute(XmlNamespace::STYLE, XML_LINE_STYLE,
                 sBuf.makeStringAndClear());
     }
 
@@ -161,23 +161,23 @@ void XMLFootnoteSeparatorExport::exportXML(
     if (SvXMLUnitConverter::convertEnum(
         sBuf, eLineAdjust, aXML_HorizontalAdjust_Enum))
     {
-        rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_ADJUSTMENT,
+        rExport.AddAttribute(XmlNamespace::STYLE, XML_ADJUSTMENT,
                              sBuf.makeStringAndClear());
     }
 
     // relative line width
     ::sax::Converter::convertPercent(sBuf, nLineRelWidth);
-    rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_REL_WIDTH,
+    rExport.AddAttribute(XmlNamespace::STYLE, XML_REL_WIDTH,
                          sBuf.makeStringAndClear());
 
     // color
     ::sax::Converter::convertColor(sBuf, nLineColor);
-    rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_COLOR,
+    rExport.AddAttribute(XmlNamespace::STYLE, XML_COLOR,
                          sBuf.makeStringAndClear());
 
     // line-style
 
-    SvXMLElementExport aElem(rExport, XML_NAMESPACE_STYLE,
+    SvXMLElementExport aElem(rExport, XmlNamespace::STYLE,
                              XML_FOOTNOTE_SEP, true, true);
 }
 
diff --git a/xmloff/source/style/XMLFootnoteSeparatorImport.cxx b/xmloff/source/style/XMLFootnoteSeparatorImport.cxx
index f4f72883314f..1f09f573cb0d 100644
--- a/xmloff/source/style/XMLFootnoteSeparatorImport.cxx
+++ b/xmloff/source/style/XMLFootnoteSeparatorImport.cxx
@@ -95,7 +95,7 @@ void XMLFootnoteSeparatorImport::StartElement(
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
 
-        if (XML_NAMESPACE_STYLE == nPrefix)
+        if (XmlNamespace::STYLE == nPrefix)
         {
             OUString sAttrValue = xAttrList->getValueByIndex(nAttr);
             sal_Int32 nTmp;
diff --git a/xmloff/source/style/XMLPageExport.cxx b/xmloff/source/style/XMLPageExport.cxx
index 550e9f956351..fb40a5bf22de 100644
--- a/xmloff/source/style/XMLPageExport.cxx
+++ b/xmloff/source/style/XMLPageExport.cxx
@@ -132,7 +132,7 @@ bool XMLPageExport::exportStyle(
     {
         OUString sName( rStyle->getName() );
         bool bEncoded = false;
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NAME,
+        GetExport().AddAttribute( XmlNamespace::STYLE, XML_NAME,
                           GetExport().EncodeStyleName( sName, &bEncoded ) );
 
         if ( xPropSetInfo->hasPropertyByName( "Hidden" ) )
@@ -142,22 +142,22 @@ bool XMLPageExport::exportStyle(
             if ((aValue >>= bHidden) && bHidden
                 && GetExport().getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
             {
-                GetExport().AddAttribute(XML_NAMESPACE_LO_EXT, XML_HIDDEN, "true");
-                GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_HIDDEN, "true"); // FIXME for compatibility
+                GetExport().AddAttribute(XmlNamespace::LO_EXT, XML_HIDDEN, "true");
+                GetExport().AddAttribute(XmlNamespace::STYLE, XML_HIDDEN, "true"); // FIXME for compatibility
             }
         }
 
         if( bEncoded )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_DISPLAY_NAME,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_DISPLAY_NAME,
                                    sName);
 
         XMLPageExportNameEntry entry;
         if (findPageMasterNameEntry(aNameVector, sName, entry))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_PAGE_LAYOUT_NAME, GetExport().EncodeStyleName(entry.sPageMasterName));
+            GetExport().AddAttribute(XmlNamespace::STYLE, XML_PAGE_LAYOUT_NAME, GetExport().EncodeStyleName(entry.sPageMasterName));
             if (!entry.sDrawingPageStyleName.isEmpty())
             {
-                GetExport().AddAttribute(XML_NAMESPACE_DRAW, XML_STYLE_NAME, GetExport().EncodeStyleName(entry.sDrawingPageStyleName));
+                GetExport().AddAttribute(XmlNamespace::DRAW, XML_STYLE_NAME, GetExport().EncodeStyleName(entry.sDrawingPageStyleName));
             }
         }
 
@@ -169,12 +169,12 @@ bool XMLPageExport::exportStyle(
 
             if( sName != sNextName && !sNextName.isEmpty() )
             {
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NEXT_STYLE_NAME,
+                GetExport().AddAttribute( XmlNamespace::STYLE, XML_NEXT_STYLE_NAME,
                     GetExport().EncodeStyleName( sNextName ) );
             }
         }
 
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE,
                                   XML_MASTER_PAGE, true, true );
 
         exportMasterPageContent( xPropSet, false );
@@ -288,7 +288,7 @@ void XMLPageExport::exportDefaultStyle()
             >= SvtSaveOptions::ODFSVER_012);
 
     //<style:default-page-layout>
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE,
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE,
                               XML_DEFAULT_PAGE_LAYOUT,
                               true, true );
 
diff --git a/xmloff/source/style/impastpl.cxx b/xmloff/source/style/impastpl.cxx
index c347304bc79c..d78eb376a3fa 100644
--- a/xmloff/source/style/impastpl.cxx
+++ b/xmloff/source/style/impastpl.cxx
@@ -638,14 +638,14 @@ void SvXMLAutoStylePoolP_Impl::exportXML(
         if( aExpStyles[i].mpProperties )
         {
             GetExport().AddAttribute(
-                XML_NAMESPACE_STYLE, XML_NAME,
+                XmlNamespace::STYLE, XML_NAME,
                 aExpStyles[i].mpProperties->GetName() );
 
             bool bExtensionNamespace = false;
             if( rFamily.mbAsFamily )
             {
                 GetExport().AddAttribute(
-                    XML_NAMESPACE_STYLE, XML_FAMILY, aStrFamilyName );
+                    XmlNamespace::STYLE, XML_FAMILY, aStrFamilyName );
                 if(aStrFamilyName != "graphic" &&
                         aStrFamilyName != "drawing-page" &&
                         aStrFamilyName != "presentation" &&
@@ -656,7 +656,7 @@ void SvXMLAutoStylePoolP_Impl::exportXML(
             if( !aExpStyles[i].mpParent->isEmpty() )
             {
                 GetExport().AddAttribute(
-                    XML_NAMESPACE_STYLE, XML_PARENT_STYLE_NAME,
+                    XmlNamespace::STYLE, XML_PARENT_STYLE_NAME,
                     GetExport().EncodeStyleName(
                         *aExpStyles[i].mpParent ) );
             }
@@ -673,7 +673,7 @@ void SvXMLAutoStylePoolP_Impl::exportXML(
                                              GetExport().GetNamespaceMap());
 
             SvXMLElementExport aElem( GetExport(),
-                                      XML_NAMESPACE_STYLE, sName,
+                                      XmlNamespace::STYLE, sName,
                                       true, true );
 
             sal_Int32 nStart(-1);
diff --git a/xmloff/source/style/numehelp.cxx b/xmloff/source/style/numehelp.cxx
index 7ba12bca5381..c0141f2fe70e 100644
--- a/xmloff/source/style/numehelp.cxx
+++ b/xmloff/source/style/numehelp.cxx
@@ -56,12 +56,12 @@ XMLNumberFormatAttributesExportHelper::XMLNumberFormatAttributesExportHelper(
             SvXMLExport& rTempExport )
 :   xNumberFormats(xTempNumberFormatsSupplier.is() ? xTempNumberFormatsSupplier->getNumberFormats() : css::uno::Reference< css::util::XNumberFormats > ()),
     pExport(&rTempExport),
-    sAttrValue(rTempExport.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, GetXMLToken(XML_VALUE))),
-    sAttrDateValue(rTempExport.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, GetXMLToken(XML_DATE_VALUE))),
-    sAttrTimeValue(rTempExport.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, GetXMLToken(XML_TIME_VALUE))),
-    sAttrBooleanValue(rTempExport.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, GetXMLToken(XML_BOOLEAN_VALUE))),
-    sAttrStringValue(rTempExport.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, GetXMLToken(XML_STRING_VALUE))),
-    sAttrCurrency(rTempExport.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, GetXMLToken(XML_CURRENCY))),
+    sAttrValue(rTempExport.GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, GetXMLToken(XML_VALUE))),
+    sAttrDateValue(rTempExport.GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, GetXMLToken(XML_DATE_VALUE))),
+    sAttrTimeValue(rTempExport.GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, GetXMLToken(XML_TIME_VALUE))),
+    sAttrBooleanValue(rTempExport.GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, GetXMLToken(XML_BOOLEAN_VALUE))),
+    sAttrStringValue(rTempExport.GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, GetXMLToken(XML_STRING_VALUE))),
+    sAttrCurrency(rTempExport.GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, GetXMLToken(XML_CURRENCY))),
     aNumberFormats()
 {
 }
@@ -107,7 +107,7 @@ void XMLNumberFormatAttributesExportHelper::WriteAttributes(SvXMLExport& rXMLExp
     case util::NumberFormat::SCIENTIFIC:
     case util::NumberFormat::FRACTION:
         {
-            rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT);
+            rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_FLOAT);
             bWasSetTypeAttribute = true;
             [[fallthrough]];
         }
@@ -115,7 +115,7 @@ void XMLNumberFormatAttributesExportHelper::WriteAttributes(SvXMLExport& rXMLExp
         {
             if (!bWasSetTypeAttribute)
             {
-                rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_PERCENTAGE);
+                rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_PERCENTAGE);
                 bWasSetTypeAttribute = true;
             }
             [[fallthrough]];
@@ -124,9 +124,9 @@ void XMLNumberFormatAttributesExportHelper::WriteAttributes(SvXMLExport& rXMLExp
         {
             if (!bWasSetTypeAttribute)
             {
-                rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_CURRENCY);
+                rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_CURRENCY);
                 if (!rCurrency.isEmpty())
-                    rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_CURRENCY, rCurrency);
+                    rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_CURRENCY, rCurrency);
             }
 
             if (bExportValue)
@@ -134,51 +134,51 @@ void XMLNumberFormatAttributesExportHelper::WriteAttributes(SvXMLExport& rXMLExp
                 OUString sValue( ::rtl::math::doubleToUString( rValue,
                             rtl_math_StringFormat_Automatic,
                             rtl_math_DecimalPlaces_Max, '.', true));
-                rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE, sValue);
+                rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE, sValue);
             }
         }
         break;
     case util::NumberFormat::DATE:
     case util::NumberFormat::DATETIME:
         {
-            rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_DATE);
+            rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_DATE);
             if (bExportValue)
             {
                 if ( rXMLExport.SetNullDateOnUnitConverter() )
                 {
                     OUStringBuffer sBuffer;
                     rXMLExport.GetMM100UnitConverter().convertDateTime(sBuffer, rValue);
-                    rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_DATE_VALUE, sBuffer.makeStringAndClear());
+                    rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_DATE_VALUE, sBuffer.makeStringAndClear());
                 }
             }
         }
         break;
     case util::NumberFormat::TIME:
         {
-            rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_TIME);
+            rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_TIME);
             if (bExportValue)
             {
                 OUStringBuffer sBuffer;
                 ::sax::Converter::convertDuration(sBuffer, rValue);
-                rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_TIME_VALUE, sBuffer.makeStringAndClear());
+                rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_TIME_VALUE, sBuffer.makeStringAndClear());
             }
         }
         break;
     case util::NumberFormat::LOGICAL:
         {
-            rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_BOOLEAN);
+            rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_BOOLEAN);
             if (bExportValue)
             {
                 double fTempValue = rValue;
                 if (::rtl::math::approxEqual( fTempValue, 1.0 ))
                 {
-                    rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_BOOLEAN_VALUE, XML_TRUE);
+                    rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_BOOLEAN_VALUE, XML_TRUE);
                 }
                 else
                 {
                     if (rValue == 0.0)
                     {
-                        rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_BOOLEAN_VALUE, XML_FALSE);
+                        rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_BOOLEAN_VALUE, XML_FALSE);
                     }
                     else
                     {
@@ -187,7 +187,7 @@ void XMLNumberFormatAttributesExportHelper::WriteAttributes(SvXMLExport& rXMLExp
                                     rtl_math_StringFormat_Automatic,
                                     rtl_math_DecimalPlaces_Max, '.',
                                     true));
-                        rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_BOOLEAN_VALUE, sValue);
+                        rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_BOOLEAN_VALUE, sValue);
                     }
                 }
             }
@@ -195,13 +195,13 @@ void XMLNumberFormatAttributesExportHelper::WriteAttributes(SvXMLExport& rXMLExp
         break;
     case util::NumberFormat::TEXT:
         {
-            rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_FLOAT);
+            rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_FLOAT);
             if (bExportValue)
             {
                 OUString sValue( ::rtl::math::doubleToUString( rValue,
                             rtl_math_StringFormat_Automatic,
                             rtl_math_DecimalPlaces_Max, '.', true));
-                rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE, sValue);
+                rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE, sValue);
             }
         }
         break;
@@ -288,9 +288,9 @@ void XMLNumberFormatAttributesExportHelper::SetNumberFormatAttributes(SvXMLExpor
     bool bExportValue, bool bExportTypeAttribute)
 {
     if (bExportTypeAttribute)
-        rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_STRING);
+        rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_STRING);
     if (bExportValue && !rValue.isEmpty() && (rValue != rCharacters))
-        rXMLExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_STRING_VALUE, rValue);
+        rXMLExport.AddAttribute(XmlNamespace::OFFICE, XML_STRING_VALUE, rValue);
 }
 
 bool XMLNumberFormatAttributesExportHelper::GetCurrencySymbol(const sal_Int32 nNumberFormat, OUString& rCurrencySymbol)
diff --git a/xmloff/source/style/prstylei.cxx b/xmloff/source/style/prstylei.cxx
index 931be4fce799..c32a7a4ec4b9 100644
--- a/xmloff/source/style/prstylei.cxx
+++ b/xmloff/source/style/prstylei.cxx
@@ -58,7 +58,7 @@ void XMLPropStyleContext::SetAttribute( sal_uInt16 nPrefixKey,
                                         const OUString& rLocalName,
                                         const OUString& rValue )
 {
-    if( XML_NAMESPACE_STYLE == nPrefixKey && IsXMLToken( rLocalName, XML_FAMILY ) )
+    if( XmlNamespace::STYLE == nPrefixKey && IsXMLToken( rLocalName, XML_FAMILY ) )
     {
         SAL_WARN_IF( GetFamily() != SvXMLStylesContext::GetFamily( rValue ), "xmloff", "unexpected style family" );
     }
@@ -183,7 +183,7 @@ SvXMLImportContextRef XMLPropStyleContext::CreateChildContext(
     SvXMLImportContextRef xContext;
 
     sal_uInt32 nFamily = 0;
-    if( XML_NAMESPACE_STYLE == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix )
+    if( XmlNamespace::STYLE == nPrefix || XmlNamespace::LO_EXT == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_GRAPHIC_PROPERTIES ) )
             nFamily = XML_TYPE_PROP_GRAPHIC;
diff --git a/xmloff/source/style/styleexp.cxx b/xmloff/source/style/styleexp.cxx
index 2845698cea09..0b164a5e2ca7 100644
--- a/xmloff/source/style/styleexp.cxx
+++ b/xmloff/source/style/styleexp.cxx
@@ -100,15 +100,15 @@ void XMLStyleExport::exportStyleContent( const Reference< XStyle >& rStyle )
                     {
                         bool bEncoded;
 
-                        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                        GetExport().AddAttribute( XmlNamespace::STYLE,
                                             XML_CONDITION,
                                             aExternal);
-                        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                        GetExport().AddAttribute( XmlNamespace::STYLE,
                                             XML_APPLY_STYLE_NAME,
                                             GetExport().EncodeStyleName( aStyleName,
                                                                        &bEncoded ) );
                         SvXMLElementExport aElem( GetExport(),
-                                                  XML_NAMESPACE_STYLE,
+                                                  XmlNamespace::STYLE,
                                                   XML_MAP,
                                                   true,
                                                   true );
@@ -155,15 +155,15 @@ bool XMLStyleExport::exportStyle(
 
     bool bEncoded = false;
     const OUString sEncodedStyleName(GetExport().EncodeStyleName( sName, &bEncoded ));
-    GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NAME, sEncodedStyleName );
+    GetExport().AddAttribute( XmlNamespace::STYLE, XML_NAME, sEncodedStyleName );
 
     if( bEncoded )
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_DISPLAY_NAME,
+        GetExport().AddAttribute( XmlNamespace::STYLE, XML_DISPLAY_NAME,
                                    sName);
 
     // style:family="..."
     if( !rXMLFamily.isEmpty() )
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_FAMILY, rXMLFamily);
+        GetExport().AddAttribute( XmlNamespace::STYLE, XML_FAMILY, rXMLFamily);
 
     if ( xPropSetInfo->hasPropertyByName( "Hidden" ) )
     {
@@ -172,8 +172,8 @@ bool XMLStyleExport::exportStyle(
         if ((aAny >>= bHidden) && bHidden
             && GetExport().getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
         {
-            GetExport().AddAttribute(XML_NAMESPACE_LO_EXT, XML_HIDDEN, "true");
-            GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_HIDDEN, "true"); // FIXME for compatibility
+            GetExport().AddAttribute(XmlNamespace::LO_EXT, XML_HIDDEN, "true");
+            GetExport().AddAttribute(XmlNamespace::STYLE, XML_HIDDEN, "true"); // FIXME for compatibility
         }
     }
 
@@ -189,7 +189,7 @@ bool XMLStyleExport::exportStyle(
     }
 
     if( !sParent.isEmpty() )
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_PARENT_STYLE_NAME,
+        GetExport().AddAttribute( XmlNamespace::STYLE, XML_PARENT_STYLE_NAME,
                                     GetExport().EncodeStyleName( sParent ) );
 
     // style:next-style-name="..." (paragraph styles only)
@@ -200,7 +200,7 @@ bool XMLStyleExport::exportStyle(
         aAny >>= sNextName;
         if( sName != sNextName )
         {
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NEXT_STYLE_NAME,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_NEXT_STYLE_NAME,
                           GetExport().EncodeStyleName( sNextName ) );
         }
     }
@@ -210,7 +210,7 @@ bool XMLStyleExport::exportStyle(
     {
         aAny = xPropSet->getPropertyValue( gsIsAutoUpdate );
         if( *o3tl::doAccess<bool>(aAny) )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_AUTO_UPDATE,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_AUTO_UPDATE,
                                       XML_TRUE );
     }
 
@@ -225,7 +225,7 @@ bool XMLStyleExport::exportStyle(
             aAny >>= nOutlineLevel;
             if( nOutlineLevel > 0 )
             {
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_DEFAULT_OUTLINE_LEVEL,
                                           OUString::number(nOutlineLevel) );
             }
@@ -237,7 +237,7 @@ bool XMLStyleExport::exportStyle(
                 if ( ( GetExport().getExportFlags() & SvXMLExportFlags::OASIS ) &&
                     GetExport().getSaneDefaultVersion() >= SvtSaveOptions::ODFSVER_012)
                 {
-                    GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                    GetExport().AddAttribute( XmlNamespace::STYLE,
                                               XML_DEFAULT_OUTLINE_LEVEL,
                                               OUString( "" ));
                 }
@@ -264,7 +264,7 @@ bool XMLStyleExport::exportStyle(
                 */
                 if ( sListName.isEmpty() )
                 {
-                    GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                    GetExport().AddAttribute( XmlNamespace::STYLE,
                                               XML_LIST_STYLE_NAME,
                                               sListName /* empty string */);
                 }
@@ -296,7 +296,7 @@ bool XMLStyleExport::exportStyle(
 
                     if ( !sListName.isEmpty() && !bSuppressListStyle )
                     {
-                        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                        GetExport().AddAttribute( XmlNamespace::STYLE,
                                                   XML_LIST_STYLE_NAME,
                                   GetExport().EncodeStyleName( sListName ) );
                     }
@@ -335,7 +335,7 @@ bool XMLStyleExport::exportStyle(
                 }
             }
             if ( bNoInheritedListStyle )
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_LIST_STYLE_NAME,
                                           OUString( "" ));
         }
@@ -351,7 +351,7 @@ bool XMLStyleExport::exportStyle(
 
     {
         // <style:style>
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE, XML_STYLE,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE, XML_STYLE,
                                   true, true );
 
         rPropMapper->SetStyleName( sName );
@@ -390,10 +390,10 @@ void XMLStyleExport::exportDefaultStyle(
     {
         // style:family="..."
         if( !rXMLFamily.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_FAMILY,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_FAMILY,
                                       rXMLFamily );
         // <style:style>
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE,
                                   XML_DEFAULT_STYLE,
                                   true, true );
         // <style:properties>
diff --git a/xmloff/source/style/xmlaustp.cxx b/xmloff/source/style/xmlaustp.cxx
index c8b4c75a6a40..a22866e8355d 100644
--- a/xmloff/source/style/xmlaustp.cxx
+++ b/xmloff/source/style/xmlaustp.cxx
@@ -126,7 +126,7 @@ void SvXMLAutoStylePoolP::exportStyleAttributes(
                         {
                             const OUString sName(const_cast<XMLTextListAutoStylePool*>(&GetExport().GetTextParagraphExport()->GetListAutoStylePool())->Add( xNumRule ));
 
-                            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_LIST_STYLE_NAME, GetExport().EncodeStyleName( sName ) );
+                            GetExport().AddAttribute( XmlNamespace::STYLE, XML_LIST_STYLE_NAME, GetExport().EncodeStyleName( sName ) );
                         }
 
                         bFoundNumberingRulesName = true;
@@ -234,7 +234,7 @@ void SvXMLAutoStylePoolP::exportStyleContent(
     // export header style element
     {
         SvXMLElementExport aElem(
-            GetExport(), XML_NAMESPACE_STYLE, XML_HEADER_STYLE,
+            GetExport(), XmlNamespace::STYLE, XML_HEADER_STYLE,
             true, true );
 
         rPropExp.exportXML(
@@ -245,7 +245,7 @@ void SvXMLAutoStylePoolP::exportStyleContent(
     // export footer style
     {
         SvXMLElementExport aElem(
-            GetExport(), XML_NAMESPACE_STYLE, XML_FOOTER_STYLE,
+            GetExport(), XmlNamespace::STYLE, XML_FOOTER_STYLE,
             true, true );
 
         rPropExp.exportXML(
diff --git a/xmloff/source/style/xmlexppr.cxx b/xmloff/source/style/xmlexppr.cxx
index 133168967fb7..b49a3bef88e8 100644
--- a/xmloff/source/style/xmlexppr.cxx
+++ b/xmloff/source/style/xmlexppr.cxx
@@ -594,31 +594,31 @@ vector<XMLPropertyState> SvXMLExportPropertyMapper::Filter_(
                 static_assert(SvtSaveOptions::ODFSVER_LATEST_EXTENDED < SvtSaveOptions::ODFSVER_FUTURE_EXTENDED);
                 /// standard ODF namespaces for elements and attributes
                 static sal_uInt16 s_OdfNs[] = {
-                    XML_NAMESPACE_OFFICE,
-                    XML_NAMESPACE_STYLE,
-                    XML_NAMESPACE_TEXT,
-                    XML_NAMESPACE_TABLE,
-                    XML_NAMESPACE_DRAW,
-                    XML_NAMESPACE_FO,
-                    XML_NAMESPACE_XLINK,
-                    XML_NAMESPACE_DC,
-                    XML_NAMESPACE_META,
-                    XML_NAMESPACE_NUMBER,
-                    XML_NAMESPACE_PRESENTATION,
-                    XML_NAMESPACE_SVG,
-                    XML_NAMESPACE_CHART,
-                    XML_NAMESPACE_DR3D,
-                    XML_NAMESPACE_MATH,
-                    XML_NAMESPACE_FORM,
-                    XML_NAMESPACE_SCRIPT,
-                    XML_NAMESPACE_CONFIG,
-                    XML_NAMESPACE_DB,
-                    XML_NAMESPACE_XFORMS,
-                    XML_NAMESPACE_SMIL,
-                    XML_NAMESPACE_ANIMATION,
-                    XML_NAMESPACE_XML,
-                    XML_NAMESPACE_XHTML,
-                    XML_NAMESPACE_GRDDL,
+                    XmlNamespace::OFFICE,
+                    XmlNamespace::STYLE,
+                    XmlNamespace::TEXT,
+                    XmlNamespace::TABLE,
+                    XmlNamespace::DRAW,
+                    XmlNamespace::FO,
+                    XmlNamespace::XLINK,
+                    XmlNamespace::DC,
+                    XmlNamespace::META,
+                    XmlNamespace::NUMBER,
+                    XmlNamespace::PRESENTATION,
+                    XmlNamespace::SVG,
+                    XmlNamespace::CHART,
+                    XmlNamespace::DR3D,
+                    XmlNamespace::MATH,
+                    XmlNamespace::FORM,
+                    XmlNamespace::SCRIPT,
+                    XmlNamespace::CONFIG,
+                    XmlNamespace::DB,
+                    XmlNamespace::XFORMS,
+                    XmlNamespace::SMIL,
+                    XmlNamespace::ANIMATION,
+                    XmlNamespace::XML,
+                    XmlNamespace::XHTML,
+                    XmlNamespace::GRDDL,
                 };
                 static bool s_Assert(false);
                 if (!s_Assert)
@@ -632,7 +632,7 @@ vector<XMLPropertyState> SvXMLExportPropertyMapper::Filter_(
                             ns));
                 bool const isExtension(iter == std::end(s_OdfNs) || *iter != ns
                         // FIXME: very special hack to suppress style:hyperlink
-                        || (ns == XML_NAMESPACE_STYLE
+                        || (ns == XmlNamespace::STYLE
                             && mpImpl->mxPropMapper->GetEntryXMLName(i) == GetXMLToken(XML_HYPERLINK)));
                 if (isExtension
                     ? ((nCurrentVersion & SvtSaveOptions::ODFSVER_EXTENDED)
@@ -835,11 +835,11 @@ void SvXMLExportPropertyMapper::exportXML(
         sal_uInt16 nPropType = aPropTokens[i].nType;
         if( 0==i || (nPropTypeFlags & (1 << nPropType)) != 0 )
         {
-            sal_uInt16 nNamespace = XML_NAMESPACE_STYLE;
+            sal_uInt16 nNamespace = XmlNamespace::STYLE;
             if (bUseExtensionNamespaceForGraphicProperties &&
                 aPropTokens[i].eToken == xmloff::token::XML_GRAPHIC_PROPERTIES)
             {
-                nNamespace = XML_NAMESPACE_LO_EXT;
+                nNamespace = XmlNamespace::LO_EXT;
                 if ((rExport.getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED) == 0)
                 {
                     continue; // don't write for ODF <= 1.2
@@ -1007,7 +1007,7 @@ void SvXMLExportPropertyMapper::_exportXML(
                             // check if there is a prefix registered for the
                             // namespace URI
                             nKey = pNamespaceMap->GetKeyByName( sNamespace );
-                            if( XML_NAMESPACE_UNKNOWN == nKey )
+                            if( XmlNamespace::UNKNOWN == nKey )
                             {
                                 // There is no prefix for the namespace, so
                                 // we have to generate one and have to add it.
@@ -1088,7 +1088,7 @@ void SvXMLExportPropertyMapper::_exportXML(
                 if (IsXMLToken(aValue, XML_BT_LR))
                 {
                     sName = rNamespaceMap.GetQNameByKey(
-                            XML_NAMESPACE_LO_EXT,
+                            XmlNamespace::LO_EXT,
                             mpImpl->mxPropMapper->GetEntryXMLName(rProperty.mnIndex));
                 }
             }
@@ -1097,7 +1097,7 @@ void SvXMLExportPropertyMapper::_exportXML(
                 if (IsXMLToken(aValue, XML_PAGE_CONTENT_BOTTOM))
                 {
                     sName = rNamespaceMap.GetQNameByKey(
-                            XML_NAMESPACE_LO_EXT,
+                            XmlNamespace::LO_EXT,
                             mpImpl->mxPropMapper->GetEntryXMLName(rProperty.mnIndex));
                 }
             }
diff --git a/xmloff/source/style/xmlimppr.cxx b/xmloff/source/style/xmlimppr.cxx
index b7a4c96b2525..15e006934775 100644
--- a/xmloff/source/style/xmlimppr.cxx
+++ b/xmloff/source/style/xmlimppr.cxx
@@ -128,7 +128,7 @@ void SvXMLImportPropertyMapper::importXML(
         sal_uInt16 nPrefix = rNamespaceMap.GetKeyByAttrName( rAttrName, &aPrefix,
                                                     &aLocalName, &aNamespace );
 
-        if( XML_NAMESPACE_XMLNS == nPrefix )
+        if( XmlNamespace::XMLNS == nPrefix )
             continue;
 
         const OUString& rValue = xAttrList->getValueByIndex( i );
@@ -247,11 +247,11 @@ void SvXMLImportPropertyMapper::importXML(
 
             if( !bFound )
             {
-                SAL_INFO_IF((XML_NAMESPACE_NONE != nPrefix) &&
+                SAL_INFO_IF((XmlNamespace::NONE != nPrefix) &&
                             !(XML_NAMESPACE_UNKNOWN_FLAG & nPrefix) &&
                             !bAlienImport, "xmloff.style",
                             "unknown attribute: \"" << rAttrName << "\"");
-                if( (XML_NAMESPACE_UNKNOWN_FLAG & nPrefix) || (XML_NAMESPACE_NONE == nPrefix) || bAlienImport )
+                if( (XML_NAMESPACE_UNKNOWN_FLAG & nPrefix) || (XmlNamespace::NONE == nPrefix) || bAlienImport )
                 {
                     if( !xAttrContainer.is() )
                     {
@@ -265,20 +265,20 @@ void SvXMLImportPropertyMapper::importXML(
                             switch( nPropType )
                             {
                                 case XML_TYPE_PROP_CHART:
-                                    nIndex = maPropMapper->FindEntryIndex( "ChartUserDefinedAttributes", XML_NAMESPACE_TEXT, GetXMLToken(XML_XMLNS) );
+                                    nIndex = maPropMapper->FindEntryIndex( "ChartUserDefinedAttributes", XmlNamespace::TEXT, GetXMLToken(XML_XMLNS) );
                                     break;
                                 case XML_TYPE_PROP_PARAGRAPH:
-                                    nIndex = maPropMapper->FindEntryIndex( "ParaUserDefinedAttributes", XML_NAMESPACE_TEXT, GetXMLToken(XML_XMLNS) );
+                                    nIndex = maPropMapper->FindEntryIndex( "ParaUserDefinedAttributes", XmlNamespace::TEXT, GetXMLToken(XML_XMLNS) );
                                     break;
                                 case  XML_TYPE_PROP_TEXT:
-                                    nIndex = maPropMapper->FindEntryIndex( "TextUserDefinedAttributes", XML_NAMESPACE_TEXT, GetXMLToken(XML_XMLNS) );
+                                    nIndex = maPropMapper->FindEntryIndex( "TextUserDefinedAttributes", XmlNamespace::TEXT, GetXMLToken(XML_XMLNS) );
                                     break;
                                 default:
                                     break;
                             }
                             // other property type or property not found
                             if( -1 == nIndex )
-                                nIndex = maPropMapper->FindEntryIndex( "UserDefinedAttributes", XML_NAMESPACE_TEXT, GetXMLToken(XML_XMLNS) );
+                                nIndex = maPropMapper->FindEntryIndex( "UserDefinedAttributes", XmlNamespace::TEXT, GetXMLToken(XML_XMLNS) );
                         }
 
                         // #106963#; use userdefined attribute only if it is in the specified property range
@@ -298,7 +298,7 @@ void SvXMLImportPropertyMapper::importXML(
                         aData.Value = rValue;
 
                         OUStringBuffer sName;
-                        if( XML_NAMESPACE_NONE != nPrefix )
+                        if( XmlNamespace::NONE != nPrefix )
                         {
                             sName.append( aPrefix );
                             sName.append( ':' );
diff --git a/xmloff/source/style/xmlnume.cxx b/xmloff/source/style/xmlnume.cxx
index 3c9e25fb643b..b684f656b226 100644
--- a/xmloff/source/style/xmlnume.cxx
+++ b/xmloff/source/style/xmlnume.cxx
@@ -243,24 +243,24 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
     // text:level
     OUStringBuffer sTmp;
     sTmp.append( nLevel + 1 );
-    GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_LEVEL, sTmp.makeStringAndClear() );
+    GetExport().AddAttribute( XmlNamespace::TEXT, XML_LEVEL, sTmp.makeStringAndClear() );
     // #i110694#: no style-name on list-level-style-image
     // #i116149#: neither prefix/suffix
     if (NumberingType::BITMAP != eType)
     {
         if (!sTextStyleName.isEmpty())
         {
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                     GetExport().EncodeStyleName( sTextStyleName ) );
         }
         if (!sPrefix.isEmpty())
         {
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NUM_PREFIX,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_NUM_PREFIX,
                     sPrefix );
         }
         if (!sSuffix.isEmpty())
         {
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NUM_SUFFIX,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_NUM_SUFFIX,
                     sSuffix );
         }
     }
@@ -279,13 +279,13 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
             }
             // text:bullet-char="..."
             sTmp.append( cBullet );
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_BULLET_CHAR,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_BULLET_CHAR,
                           sTmp.makeStringAndClear() );
         }
         else
         {
             // If 'cBullet' is zero, XML_BULLET_CHAR must exist with blank.
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_BULLET_CHAR, "");
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_BULLET_CHAR, "");
         }
     }
     else if( NumberingType::BITMAP == eType )
@@ -300,10 +300,10 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
             OUString sInternalURL = GetExport().AddEmbeddedXGraphic(xGraphic, sUsedMimeType);
             if (!sInternalURL.isEmpty())
             {
-                GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sInternalURL);
-                GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-                GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED );
-                GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD );
+                GetExport().AddAttribute( XmlNamespace::XLINK, XML_HREF, sInternalURL);
+                GetExport().AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+                GetExport().AddAttribute( XmlNamespace::XLINK, XML_SHOW, XML_EMBED );
+                GetExport().AddAttribute( XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD );
             }
         }
         else
@@ -320,30 +320,30 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
             eElem = XML_LIST_LEVEL_STYLE_NUMBER;
 
         GetExport().GetMM100UnitConverter().convertNumFormat( sTmp, eType );
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NUM_FORMAT,
+        GetExport().AddAttribute( XmlNamespace::STYLE, XML_NUM_FORMAT,
                                        sTmp.makeStringAndClear() );
         SvXMLUnitConverter::convertNumLetterSync( sTmp, eType );
         if( !sTmp.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute( XmlNamespace::STYLE,
                                       XML_NUM_LETTER_SYNC,
                                            sTmp.makeStringAndClear() );
 
         if( nStartValue != 1 )
         {
             sTmp.append( static_cast<sal_Int32>(nStartValue) );
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_START_VALUE,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_START_VALUE,
                           sTmp.makeStringAndClear() );
         }
         if( nDisplayLevels > 1 && NumberingType::NUMBER_NONE != eType )
         {
             sTmp.append( static_cast<sal_Int32>(nDisplayLevels) );
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_DISPLAY_LEVELS,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_DISPLAY_LEVELS,
                           sTmp.makeStringAndClear() );
         }
     }
 
     {
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT, eElem,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT, eElem,
                                   true, true );
 
         if ( ePosAndSpaceMode == PositionAndSpaceMode::LABEL_WIDTH_AND_POSITION )
@@ -354,18 +354,18 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
             {
                 OUString sAttr = GetExport().GetMM100UnitConverter().convertMeasureToXML(
                         nSpaceBefore );
-                GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_SPACE_BEFORE, sAttr );
+                GetExport().AddAttribute( XmlNamespace::TEXT, XML_SPACE_BEFORE, sAttr );
             }
             if( nMinLabelWidth != 0 )
             {
                 OUString s = GetExport().GetMM100UnitConverter().convertMeasureToXML( nMinLabelWidth );
-                GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_MIN_LABEL_WIDTH, s);
+                GetExport().AddAttribute( XmlNamespace::TEXT, XML_MIN_LABEL_WIDTH, s);
             }
             if( nMinLabelDist > 0 )
             {
                 OUString sAttr = GetExport().GetMM100UnitConverter().convertMeasureToXML(
                         nMinLabelDist );
-                GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_MIN_LABEL_DISTANCE, sAttr);
+                GetExport().AddAttribute( XmlNamespace::TEXT, XML_MIN_LABEL_DISTANCE, sAttr);
             }
         }
         /* Check, if properties for position-and-space-mode LABEL_ALIGNMENT
@@ -374,7 +374,7 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
         else if ( ePosAndSpaceMode == PositionAndSpaceMode::LABEL_ALIGNMENT &&
                   mbExportPositionAndSpaceModeLabelAlignment )
         {
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute( XmlNamespace::TEXT,
                                       XML_LIST_LEVEL_POSITION_AND_SPACE_MODE,
                                       XML_LABEL_ALIGNMENT );
         }
@@ -387,7 +387,7 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
             case HoriOrientation::CENTER:   eValue = XML_CENTER;    break;
             }
             if( eValue != XML_TOKEN_INVALID )
-                GetExport().AddAttribute( XML_NAMESPACE_FO, XML_TEXT_ALIGN, eValue );
+                GetExport().AddAttribute( XmlNamespace::FO, XML_TEXT_ALIGN, eValue );
         }
 
         if( NumberingType::BITMAP == eType )
@@ -414,7 +414,7 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
                 break;
             }
             if( eValue != XML_TOKEN_INVALID )
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_VERTICAL_POS, eValue );
+                GetExport().AddAttribute( XmlNamespace::STYLE, XML_VERTICAL_POS, eValue );
 
             eValue = XML_TOKEN_INVALID;
             switch( eImageVertOrient )
@@ -436,25 +436,25 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
                 break;
             }
             if( eValue != XML_TOKEN_INVALID )
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_VERTICAL_REL, eValue );
+                GetExport().AddAttribute( XmlNamespace::STYLE, XML_VERTICAL_REL, eValue );
 
             if( nImageWidth > 0 )
             {
                 OUString sAttr = GetExport().GetMM100UnitConverter().convertMeasureToXML(
                         nImageWidth );
-                GetExport().AddAttribute( XML_NAMESPACE_FO, XML_WIDTH, sAttr );
+                GetExport().AddAttribute( XmlNamespace::FO, XML_WIDTH, sAttr );
             }
 
             if( nImageHeight > 0 )
             {
                 OUString sAttr = GetExport().GetMM100UnitConverter().convertMeasureToXML(
                         nImageHeight );
-                GetExport().AddAttribute( XML_NAMESPACE_FO, XML_HEIGHT, sAttr );
+                GetExport().AddAttribute( XmlNamespace::FO, XML_HEIGHT, sAttr );
             }
         }
 
         {
-            SvXMLElementExport aElement( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aElement( GetExport(), XmlNamespace::STYLE,
                                       XML_LIST_LEVEL_PROPERTIES, true, true );
 
             /* Check, if properties for position-and-space-mode LABEL_ALIGNMENT
@@ -472,13 +472,13 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
                 {
                     eValue = XML_NOTHING;
                 }
-                GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                GetExport().AddAttribute( XmlNamespace::TEXT,
                                           XML_LABEL_FOLLOWED_BY, eValue );
 
                 if (eLabelFollowedBy == LabelFollow::NEWLINE)
                 {
                     eValue = XML_NEWLINE;
-                    GetExport().AddAttribute( XML_NAMESPACE_LO_EXT,
+                    GetExport().AddAttribute( XmlNamespace::LO_EXT,
                                           XML_LABEL_FOLLOWED_BY, eValue );
                 }
 
@@ -487,7 +487,7 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
                 {
                     OUString sAttr = GetExport().GetMM100UnitConverter().convertMeasureToXML(
                             nListtabStopPosition );
-                    GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                    GetExport().AddAttribute( XmlNamespace::TEXT,
                                               XML_LIST_TAB_STOP_POSITION,
                                               sAttr );
                 }
@@ -496,7 +496,7 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
                 {
                     OUString sAttr = GetExport().GetMM100UnitConverter().convertMeasureToXML(
                             nFirstLineIndent );
-                    GetExport().AddAttribute( XML_NAMESPACE_FO,
+                    GetExport().AddAttribute( XmlNamespace::FO,
                                               XML_TEXT_INDENT,
                                               sAttr );
                 }
@@ -505,12 +505,12 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
                 {
                     OUString sAttr = GetExport().GetMM100UnitConverter().convertMeasureToXML(
                             nIndentAt );
-                    GetExport().AddAttribute( XML_NAMESPACE_FO,
+                    GetExport().AddAttribute( XmlNamespace::FO,
                                               XML_MARGIN_LEFT,
                                               sAttr );
                 }
 
-                SvXMLElementExport aLabelAlignmentElement( GetExport(), XML_NAMESPACE_STYLE,
+                SvXMLElementExport aLabelAlignmentElement( GetExport(), XmlNamespace::STYLE,
                                              XML_LIST_LEVEL_LABEL_ALIGNMENT,
                                              true, true );
             }
@@ -528,7 +528,7 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
 
                 if( !sStyleName.isEmpty() )
                 {
-                        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                        GetExport().AddAttribute( XmlNamespace::STYLE,
                                                   XML_FONT_NAME,
                                                   sStyleName );
                 }
@@ -540,28 +540,28 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
                         GetExport().GetMM100UnitConverter();
                     XMLFontFamilyNamePropHdl aFamilyNameHdl;
                     if( aFamilyNameHdl.exportXML( sTemp, Any(sBulletFontName), rUnitConv ) )
-                        GetExport().AddAttribute( XML_NAMESPACE_FO,
+                        GetExport().AddAttribute( XmlNamespace::FO,
                                                   XML_FONT_FAMILY, sTemp );
 
                     if( !sBulletFontStyleName.isEmpty() )
-                        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                        GetExport().AddAttribute( XmlNamespace::STYLE,
                                                   XML_FONT_STYLE_NAME,
                                                   sBulletFontStyleName );
 
                     XMLFontFamilyPropHdl aFamilyHdl;
                     if( aFamilyHdl.exportXML( sTemp, Any(static_cast<sal_Int16>(eBulletFontFamily)), rUnitConv  ) )
-                        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                        GetExport().AddAttribute( XmlNamespace::STYLE,
                                                   XML_FONT_FAMILY_GENERIC,
                                                   sTemp );
 
                     XMLFontPitchPropHdl aPitchHdl;
                     if( aPitchHdl.exportXML( sTemp, Any(static_cast<sal_Int16>(eBulletFontPitch)), rUnitConv  ) )
-                        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                        GetExport().AddAttribute( XmlNamespace::STYLE,
                                                   XML_FONT_PITCH, sTemp );
 
                     XMLFontEncodingPropHdl aEncHdl;
                     if( aEncHdl.exportXML( sTemp, Any(static_cast<sal_Int16>(eBulletFontEncoding)), rUnitConv  ) )
-                        GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                        GetExport().AddAttribute( XmlNamespace::STYLE,
                                                   XML_FONT_CHARSET, sTemp );
                 }
             }
@@ -573,13 +573,13 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
             {
                 if (0xffffffff == static_cast<sal_uInt32>(nColor))
                 {
-                    GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_USE_WINDOW_FONT_COLOR, XML_TRUE );
+                    GetExport().AddAttribute( XmlNamespace::STYLE, XML_USE_WINDOW_FONT_COLOR, XML_TRUE );
                 }
                 else
                 {
                     OUStringBuffer sBuffer;
                     ::sax::Converter::convertColor( sBuffer, nColor );
-                    GetExport().AddAttribute( XML_NAMESPACE_FO, XML_COLOR,
+                    GetExport().AddAttribute( XmlNamespace::FO, XML_COLOR,
                                   sBuffer.makeStringAndClear() );
                 }
             }
@@ -587,13 +587,13 @@ void SvxXMLNumRuleExport::exportLevelStyle( sal_Int32 nLevel,
             if( nBullRelSize )
             {
                 ::sax::Converter::convertPercent( sTmp, nBullRelSize );
-                GetExport().AddAttribute( XML_NAMESPACE_FO, XML_FONT_SIZE,
+                GetExport().AddAttribute( XmlNamespace::FO, XML_FONT_SIZE,
                               sTmp.makeStringAndClear() );
             }
         }
         if( GetExport().GetAttrList().getLength() > 0 )
         {
-            SvXMLElementExport aElement( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aElement( GetExport(), XmlNamespace::STYLE,
                                       XML_TEXT_PROPERTIES, true, true );
         }
         if (xGraphic.is() && NumberingType::BITMAP == eType)
@@ -648,10 +648,10 @@ void SvxXMLNumRuleExport::exportNumberingRule(
     if( !rName.isEmpty() )
     {
         bool bEncoded = false;
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NAME,
+        GetExport().AddAttribute( XmlNamespace::STYLE, XML_NAME,
                           GetExport().EncodeStyleName( rName, &bEncoded ) );
         if( bEncoded )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_DISPLAY_NAME,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_DISPLAY_NAME,
                                  rName);
     }
 
@@ -659,8 +659,8 @@ void SvxXMLNumRuleExport::exportNumberingRule(
     if (bIsHidden
         && GetExport().getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
     {
-        GetExport().AddAttribute(XML_NAMESPACE_LO_EXT, XML_HIDDEN, "true");
-        GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_HIDDEN, "true"); // FIXME for compatibility
+        GetExport().AddAttribute(XmlNamespace::LO_EXT, XML_HIDDEN, "true");
+        GetExport().AddAttribute(XmlNamespace::STYLE, XML_HIDDEN, "true"); // FIXME for compatibility
     }
 
     // text:consecutive-numbering="..."
@@ -672,11 +672,11 @@ void SvxXMLNumRuleExport::exportNumberingRule(
         bContNumbering = *o3tl::doAccess<bool>(aAny);
     }
     if( bContNumbering )
-        GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+        GetExport().AddAttribute( XmlNamespace::TEXT,
                                   XML_CONSECUTIVE_NUMBERING, XML_TRUE );
 
     {
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT, XML_LIST_STYLE ,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT, XML_LIST_STYLE ,
                                   true, true );
         exportLevelStyles( rNumRule );
     }
@@ -759,16 +759,16 @@ void SvxXMLNumRuleExport::exportOutline()
             if ( !sOutlineStyleName.isEmpty() )
              {
                 bool bEncoded = false;
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_NAME,
+                GetExport().AddAttribute( XmlNamespace::STYLE, XML_NAME,
                                 GetExport().EncodeStyleName( sOutlineStyleName,
                                                              &bEncoded ) );
                 if( bEncoded )
-                    GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                    GetExport().AddAttribute( XmlNamespace::STYLE,
                                               XML_DISPLAY_NAME,
                                               sOutlineStyleName );
             }
         }
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                                   XML_OUTLINE_STYLE, true, true );
         exportLevelStyles( xNumRule, true );
     }
diff --git a/xmloff/source/style/xmlnumfe.cxx b/xmloff/source/style/xmlnumfe.cxx
index 6b0de888d0b5..98ddc830dd5e 100644
--- a/xmloff/source/style/xmlnumfe.cxx
+++ b/xmloff/source/style/xmlnumfe.cxx
@@ -289,7 +289,7 @@ void SvXMLNumFmtExport::AddCalendarAttr_Impl( const OUString& rCalendar )
 {
     if ( !rCalendar.isEmpty() )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_CALENDAR, rCalendar );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_CALENDAR, rCalendar );
     }
 }
 
@@ -297,7 +297,7 @@ void SvXMLNumFmtExport::AddStyleAttr_Impl( bool bLong )
 {
     if ( bLong )            // short is default
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_STYLE, XML_LONG );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_STYLE, XML_LONG );
     }
 }
 
@@ -305,7 +305,7 @@ void SvXMLNumFmtExport::AddLanguageAttr_Impl( LanguageType nLang )
 {
     if ( nLang != LANGUAGE_SYSTEM )
     {
-        rExport.AddLanguageTagAttributes( XML_NAMESPACE_NUMBER, XML_NAMESPACE_NUMBER,
+        rExport.AddLanguageTagAttributes( XmlNamespace::NUMBER, XmlNamespace::NUMBER,
                 LanguageTag( nLang), false);
     }
 }
@@ -324,7 +324,7 @@ void SvXMLNumFmtExport::FinishTextElement_Impl(bool bUseExtensionNS)
 {
     if ( !sTextContent.isEmpty() )
     {
-        sal_uInt16 nNS = bUseExtensionNS ? XML_NAMESPACE_LO_EXT : XML_NAMESPACE_NUMBER;
+        sal_uInt16 nNS = bUseExtensionNS ? XmlNamespace::LO_EXT : XmlNamespace::NUMBER;
         SvXMLElementExport aElem( rExport, nNS, XML_TEXT,
                                   true, false );
         rExport.Characters( sTextContent.makeStringAndClear() );
@@ -337,10 +337,10 @@ void SvXMLNumFmtExport::WriteColorElement_Impl( const Color& rColor )
 
     OUStringBuffer aColStr( 7 );
     ::sax::Converter::convertColor( aColStr, rColor );
-    rExport.AddAttribute( XML_NAMESPACE_FO, XML_COLOR,
+    rExport.AddAttribute( XmlNamespace::FO, XML_COLOR,
                           aColStr.makeStringAndClear() );
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_STYLE, XML_TEXT_PROPERTIES,
+    SvXMLElementExport aElem( rExport, XmlNamespace::STYLE, XML_TEXT_PROPERTIES,
                               true, false );
 }
 
@@ -361,7 +361,7 @@ void SvXMLNumFmtExport::WriteCurrencyElement_Impl( const OUString& rString,
     }
 
     SvXMLElementExport aElem( rExport,
-                              XML_NAMESPACE_NUMBER, XML_CURRENCY_SYMBOL,
+                              XmlNamespace::NUMBER, XML_CURRENCY_SYMBOL,
                               true, false );
     rExport.Characters( rString );
 }
@@ -370,7 +370,7 @@ void SvXMLNumFmtExport::WriteBooleanElement_Impl()
 {
     FinishTextElement_Impl();
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_BOOLEAN,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_BOOLEAN,
                               true, false );
 }
 
@@ -378,7 +378,7 @@ void SvXMLNumFmtExport::WriteTextContentElement_Impl()
 {
     FinishTextElement_Impl();
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_TEXT_CONTENT,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_TEXT_CONTENT,
                               true, false );
 }
 
@@ -391,7 +391,7 @@ void SvXMLNumFmtExport::WriteDayElement_Impl( const OUString& rCalendar, bool bL
     AddCalendarAttr_Impl( rCalendar ); // adds to pAttrList
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_DAY,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_DAY,
                               true, false );
 }
 
@@ -403,10 +403,10 @@ void SvXMLNumFmtExport::WriteMonthElement_Impl( const OUString& rCalendar, bool
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
     if ( bText )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TEXTUAL, XML_TRUE );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_TEXTUAL, XML_TRUE );
     }
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_MONTH,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_MONTH,
                               true, false );
 }
 
@@ -417,7 +417,7 @@ void SvXMLNumFmtExport::WriteYearElement_Impl( const OUString& rCalendar, bool b
     AddCalendarAttr_Impl( rCalendar ); // adds to pAttrList
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_YEAR,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_YEAR,
                               true, false );
 }
 
@@ -428,7 +428,7 @@ void SvXMLNumFmtExport::WriteEraElement_Impl( const OUString& rCalendar, bool bL
     AddCalendarAttr_Impl( rCalendar ); // adds to pAttrList
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_ERA,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_ERA,
                               true, false );
 }
 
@@ -439,7 +439,7 @@ void SvXMLNumFmtExport::WriteDayOfWeekElement_Impl( const OUString& rCalendar, b
     AddCalendarAttr_Impl( rCalendar ); // adds to pAttrList
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_DAY_OF_WEEK,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_DAY_OF_WEEK,
                               true, false );
 }
 
@@ -449,7 +449,7 @@ void SvXMLNumFmtExport::WriteWeekElement_Impl( const OUString& rCalendar )
 
     AddCalendarAttr_Impl( rCalendar ); // adds to pAttrList
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_WEEK_OF_YEAR,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_WEEK_OF_YEAR,
                               true, false );
 }
 
@@ -460,7 +460,7 @@ void SvXMLNumFmtExport::WriteQuarterElement_Impl( const OUString& rCalendar, boo
     AddCalendarAttr_Impl( rCalendar ); // adds to pAttrList
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_QUARTER,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_QUARTER,
                               true, false );
 }
 
@@ -472,7 +472,7 @@ void SvXMLNumFmtExport::WriteHoursElement_Impl( bool bLong )
 
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_HOURS,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_HOURS,
                               true, false );
 }
 
@@ -482,7 +482,7 @@ void SvXMLNumFmtExport::WriteMinutesElement_Impl( bool bLong )
 
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_MINUTES,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_MINUTES,
                               true, false );
 }
 
@@ -495,7 +495,7 @@ void SvXMLNumFmtExport::WriteRepeatedElement_Impl( sal_Unicode nChar )
         FinishTextElement_Impl(eVersion < SvtSaveOptions::ODFSVER_013);
         // OFFICE-3765 For 1.2+ use loext namespace, for 1.3 use number namespace.
         SvXMLElementExport aElem( rExport,
-                                  ((eVersion < SvtSaveOptions::ODFSVER_013) ? XML_NAMESPACE_LO_EXT : XML_NAMESPACE_NUMBER),
+                                  ((eVersion < SvtSaveOptions::ODFSVER_013) ? XmlNamespace::LO_EXT : XmlNamespace::NUMBER),
                                   XML_FILL_CHARACTER, true, false );
         rExport.Characters( OUString( nChar ) );
     }
@@ -508,11 +508,11 @@ void SvXMLNumFmtExport::WriteSecondsElement_Impl( bool bLong, sal_uInt16 nDecima
     AddStyleAttr_Impl( bLong );     // adds to pAttrList
     if ( nDecimals > 0 )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_DECIMAL_PLACES,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_DECIMAL_PLACES,
                               OUString::number(  nDecimals ) );
     }
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_SECONDS,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_SECONDS,
                               true, false );
 }
 
@@ -520,7 +520,7 @@ void SvXMLNumFmtExport::WriteAMPMElement_Impl()
 {
     FinishTextElement_Impl();
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_AM_PM,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_AM_PM,
                               true, false );
 }
 
@@ -537,7 +537,7 @@ void SvXMLNumFmtExport::WriteNumberElement_Impl(
     //  decimals
     if ( nDecimals >= 0 )   // negative = automatic
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_DECIMAL_PLACES,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_DECIMAL_PLACES,
                               OUString::number( nDecimals ) );
     }
 
@@ -549,7 +549,7 @@ void SvXMLNumFmtExport::WriteNumberElement_Impl(
         {
             // OFFICE-3860 For 1.2+ use loext namespace, for 1.3 use number namespace.
             rExport.AddAttribute(
-                ((eVersion < SvtSaveOptions::ODFSVER_013) ? XML_NAMESPACE_LO_EXT : XML_NAMESPACE_NUMBER),
+                ((eVersion < SvtSaveOptions::ODFSVER_013) ? XmlNamespace::LO_EXT : XmlNamespace::NUMBER),
                                  XML_MIN_DECIMAL_PLACES,
                                  OUString::number( nMinDecimals ) );
         }
@@ -558,7 +558,7 @@ void SvXMLNumFmtExport::WriteNumberElement_Impl(
     //  integer digits
     if ( nInteger >= 0 )    // negative = automatic
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_MIN_INTEGER_DIGITS,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_MIN_INTEGER_DIGITS,
                               OUString::number( nInteger ) );
     }
 
@@ -566,14 +566,14 @@ void SvXMLNumFmtExport::WriteNumberElement_Impl(
     if ( !rDashStr.isEmpty() ||  nMinDecimals < nDecimals )
     {
         // full variable decimals means an empty replacement string
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_DECIMAL_REPLACEMENT,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_DECIMAL_REPLACEMENT,
                               rDashStr );
     }
 
     //  (automatic) grouping separator
     if ( bGrouping )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_GROUPING, XML_TRUE );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_GROUPING, XML_TRUE );
     }
 
     //  display-factor if there are trailing thousands separators
@@ -584,10 +584,10 @@ void SvXMLNumFmtExport::WriteNumberElement_Impl(
 
         OUStringBuffer aFactStr;
         ::sax::Converter::convertDouble( aFactStr, fFactor );
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_DISPLAY_FACTOR, aFactStr.makeStringAndClear() );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_DISPLAY_FACTOR, aFactStr.makeStringAndClear() );
     }
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_NUMBER,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_NUMBER,
                               true, true );
 
     //  number:embedded-text as child elements
@@ -598,9 +598,9 @@ void SvXMLNumFmtExport::WriteNumberElement_Impl(
         const SvXMLEmbeddedTextEntry *const pObj = &rEmbeddedEntries[nEntry];
 
         //  position attribute
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_POSITION,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_POSITION,
                                 OUString::number( pObj->nFormatPos ) );
-        SvXMLElementExport aChildElem( rExport, XML_NAMESPACE_NUMBER, XML_EMBEDDED_TEXT,
+        SvXMLElementExport aChildElem( rExport, XmlNamespace::NUMBER, XML_EMBEDDED_TEXT,
                                           true, false );
 
         //  text as element content
@@ -626,7 +626,7 @@ void SvXMLNumFmtExport::WriteScientificElement_Impl(
     //  decimals
     if ( nDecimals >= 0 )   // negative = automatic
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_DECIMAL_PLACES,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_DECIMAL_PLACES,
                               OUString::number( nDecimals ) );
     }
 
@@ -638,7 +638,7 @@ void SvXMLNumFmtExport::WriteScientificElement_Impl(
         {
             // OFFICE-3860 For 1.2+ use loext namespace, for 1.3 use number namespace.
             rExport.AddAttribute(
-                ((eVersion < SvtSaveOptions::ODFSVER_013) ? XML_NAMESPACE_LO_EXT : XML_NAMESPACE_NUMBER),
+                ((eVersion < SvtSaveOptions::ODFSVER_013) ? XmlNamespace::LO_EXT : XmlNamespace::NUMBER),
                                  XML_MIN_DECIMAL_PLACES,
                                  OUString::number( nMinDecimals ) );
         }
@@ -647,20 +647,20 @@ void SvXMLNumFmtExport::WriteScientificElement_Impl(
     //  integer digits
     if ( nInteger >= 0 )    // negative = automatic
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_MIN_INTEGER_DIGITS,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_MIN_INTEGER_DIGITS,
                               OUString::number( nInteger ) );
     }
 
     //  (automatic) grouping separator
     if ( bGrouping )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_GROUPING, XML_TRUE );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_GROUPING, XML_TRUE );
     }
 
     //  exponent digits
     if ( nExp >= 0 )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_MIN_EXPONENT_DIGITS,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_MIN_EXPONENT_DIGITS,
                               OUString::number( nExp ) );
     }
 
@@ -672,7 +672,7 @@ void SvXMLNumFmtExport::WriteScientificElement_Impl(
         {
             // OFFICE-1828 For 1.2+ use loext namespace, for 1.3 use number namespace.
             rExport.AddAttribute(
-                    ((eVersion < SvtSaveOptions::ODFSVER_013) ? XML_NAMESPACE_LO_EXT : XML_NAMESPACE_NUMBER),
+                    ((eVersion < SvtSaveOptions::ODFSVER_013) ? XmlNamespace::LO_EXT : XmlNamespace::NUMBER),
                     XML_EXPONENT_INTERVAL, OUString::number( nExpInterval ) );
         }
     }
@@ -683,13 +683,13 @@ void SvXMLNumFmtExport::WriteScientificElement_Impl(
     {
         // OFFICE-3860 For 1.2+ use loext namespace, for 1.3 use number namespace.
         rExport.AddAttribute(
-            ((eVersion < SvtSaveOptions::ODFSVER_013) ? XML_NAMESPACE_LO_EXT : XML_NAMESPACE_NUMBER),
+            ((eVersion < SvtSaveOptions::ODFSVER_013) ? XmlNamespace::LO_EXT : XmlNamespace::NUMBER),
                              XML_FORCED_EXPONENT_SIGN,
                              bExpSign? XML_TRUE : XML_FALSE );
     }
 
     SvXMLElementExport aElem( rExport,
-                              XML_NAMESPACE_NUMBER, XML_SCIENTIFIC_NUMBER,
+                              XmlNamespace::NUMBER, XML_SCIENTIFIC_NUMBER,
                               true, false );
 }
 
@@ -729,14 +729,14 @@ void SvXMLNumFmtExport::WriteFractionElement_Impl(
     //  integer digits
     if ( nInteger >= 0 )        // negative = default (no integer part)
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_MIN_INTEGER_DIGITS,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_MIN_INTEGER_DIGITS,
                               OUString::number( nInteger ) );
     }
 
     //  (automatic) grouping separator
     if ( bGrouping )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_GROUPING, XML_TRUE );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_GROUPING, XML_TRUE );
     }
 
     // integer/fraction delimiter
@@ -744,29 +744,29 @@ void SvXMLNumFmtExport::WriteFractionElement_Impl(
     if ( !aIntegerFractionDelimiterString.isEmpty() && aIntegerFractionDelimiterString != " "
         && ((eVersion & SvtSaveOptions::ODFSVER_EXTENDED) != 0) )
     {   // Export only for 1.2/1.3 with extensions.
-        rExport.AddAttribute( XML_NAMESPACE_LO_EXT, XML_INTEGER_FRACTION_DELIMITER,
+        rExport.AddAttribute( XmlNamespace::LO_EXT, XML_INTEGER_FRACTION_DELIMITER,
                               aIntegerFractionDelimiterString );
     }
 
     //  numerator digits
     if ( nMinNumeratorDigits == 0 ) // at least one digit to keep compatibility with previous versions
         nMinNumeratorDigits++;
-    rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_MIN_NUMERATOR_DIGITS,
+    rExport.AddAttribute( XmlNamespace::NUMBER, XML_MIN_NUMERATOR_DIGITS,
                           OUString::number( nMinNumeratorDigits ) );
     // Export only for 1.2/1.3 with extensions.
     if ((eVersion & SvtSaveOptions::ODFSVER_EXTENDED) != 0)
     {
         // For extended ODF use loext namespace
-        rExport.AddAttribute( XML_NAMESPACE_LO_EXT, XML_MAX_NUMERATOR_DIGITS,
+        rExport.AddAttribute( XmlNamespace::LO_EXT, XML_MAX_NUMERATOR_DIGITS,
                               OUString::number( nMaxNumeratorDigits ) );
     }
     if ( nZerosNumeratorDigits && ((eVersion & SvtSaveOptions::ODFSVER_EXTENDED) != 0) )
-        rExport.AddAttribute( XML_NAMESPACE_LO_EXT, XML_ZEROS_NUMERATOR_DIGITS,
+        rExport.AddAttribute( XmlNamespace::LO_EXT, XML_ZEROS_NUMERATOR_DIGITS,
                               OUString::number( nZerosNumeratorDigits ) );
 
     if ( nDenominator )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_DENOMINATOR_VALUE,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_DENOMINATOR_VALUE,
                               OUString::number( nDenominator) );
     }
     //  it's not necessary to export nDenominatorDigits
@@ -775,22 +775,22 @@ void SvXMLNumFmtExport::WriteFractionElement_Impl(
     {
         if ( nMinDenominatorDigits == 0 ) // at least one digit to keep compatibility with previous versions
             nMinDenominatorDigits++;
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_MIN_DENOMINATOR_DIGITS,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_MIN_DENOMINATOR_DIGITS,
                               OUString::number( nMinDenominatorDigits ) );
         if (eVersion > SvtSaveOptions::ODFSVER_012)
         {
             // OFFICE-3695 For 1.2+ use loext namespace, for 1.3 use number namespace.
             rExport.AddAttribute(
-                ((eVersion < SvtSaveOptions::ODFSVER_013) ? XML_NAMESPACE_LO_EXT : XML_NAMESPACE_NUMBER),
+                ((eVersion < SvtSaveOptions::ODFSVER_013) ? XmlNamespace::LO_EXT : XmlNamespace::NUMBER),
                                  XML_MAX_DENOMINATOR_VALUE,
                                  OUString::number( pow ( 10.0, nMaxDenominatorDigits ) - 1 ) ); // 9, 99 or 999
         }
         if ( nZerosDenominatorDigits && ((eVersion & SvtSaveOptions::ODFSVER_EXTENDED) != 0) )
-            rExport.AddAttribute( XML_NAMESPACE_LO_EXT, XML_ZEROS_DENOMINATOR_DIGITS,
+            rExport.AddAttribute( XmlNamespace::LO_EXT, XML_ZEROS_DENOMINATOR_DIGITS,
                                   OUString::number( nZerosDenominatorDigits ) );
     }
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, XML_FRACTION,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, XML_FRACTION,
                               true, false );
 }
 
@@ -823,14 +823,14 @@ void SvXMLNumFmtExport::WriteMapElement_Impl( sal_Int32 nOp, double fLimit,
             rtl_math_StringFormat_Automatic, rtl_math_DecimalPlaces_Max,
             '.', true );
 
-    rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_CONDITION,
+    rExport.AddAttribute( XmlNamespace::STYLE, XML_CONDITION,
                           aCondStr.makeStringAndClear() );
 
-    rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_APPLY_STYLE_NAME,
+    rExport.AddAttribute( XmlNamespace::STYLE, XML_APPLY_STYLE_NAME,
                           rExport.EncodeStyleName( lcl_CreateStyleName( nKey, nPart, false,
                                                sPrefix ) ) );
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_STYLE, XML_MAP,
+    SvXMLElementExport aElem( rExport, XmlNamespace::STYLE, XML_MAP,
                               true, false );
 }
 
@@ -1096,12 +1096,12 @@ void SvXMLNumFmtExport::ExportPart_Impl( const SvNumberformat& rFormat, sal_uInt
     //  common attributes for format
 
     //  format name (generated from key) - style namespace
-    rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_NAME,
+    rExport.AddAttribute( XmlNamespace::STYLE, XML_NAME,
                         lcl_CreateStyleName( nKey, nPart, bDefPart, sPrefix ) );
 
     //  "volatile" attribute for styles used only in maps
     if ( !bDefPart )
-        rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_VOLATILE, XML_TRUE );
+        rExport.AddAttribute( XmlNamespace::STYLE, XML_VOLATILE, XML_TRUE );
 
     //  language / country
     LanguageType nLang = rFormat.GetLanguage();
@@ -1112,7 +1112,7 @@ void SvXMLNumFmtExport::ExportPart_Impl( const SvNumberformat& rFormat, sal_uInt
     sAttrValue = rFormat.GetComment();
     if ( !sAttrValue.isEmpty() && bUserDef && bDefPart )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TITLE, sAttrValue );
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_TITLE, sAttrValue );
     }
 
     //  automatic ordering for currency and date formats
@@ -1149,7 +1149,7 @@ void SvXMLNumFmtExport::ExportPart_Impl( const SvNumberformat& rFormat, sal_uInt
         //  #85109# format type must be checked to avoid dtd errors if
         //  locale data contains other format types at the built-in positions
 
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_AUTOMATIC_ORDER,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_AUTOMATIC_ORDER,
                               XML_TRUE );
     }
 
@@ -1159,7 +1159,7 @@ void SvXMLNumFmtExport::ExportPart_Impl( const SvNumberformat& rFormat, sal_uInt
         //  #85109# format type must be checked to avoid dtd errors if
         //  locale data contains other format types at the built-in positions
 
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_FORMAT_SOURCE,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_FORMAT_SOURCE,
                               XML_LANGUAGE );
     }
 
@@ -1168,7 +1168,7 @@ void SvXMLNumFmtExport::ExportPart_Impl( const SvNumberformat& rFormat, sal_uInt
     //  default for truncate-on-overflow is true
     if ( nFmtType == SvNumFormatType::TIME && bThousand )
     {
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TRUNCATE_ON_OVERFLOW,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_TRUNCATE_ON_OVERFLOW,
                               XML_FALSE );
     }
 
@@ -1184,13 +1184,13 @@ void SvXMLNumFmtExport::ExportPart_Impl( const SvNumberformat& rFormat, sal_uInt
         LanguageTag aLanguageTag( aAttr.Locale);
         OUString aLanguage, aScript, aCountry;
         aLanguageTag.getIsoLanguageScriptCountry( aLanguage, aScript, aCountry);
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_FORMAT,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_TRANSLITERATION_FORMAT,
                               aAttr.Format );
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_LANGUAGE,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_TRANSLITERATION_LANGUAGE,
                               aLanguage );
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_COUNTRY,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_TRANSLITERATION_COUNTRY,
                               aCountry );
-        rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_STYLE,
+        rExport.AddAttribute( XmlNamespace::NUMBER, XML_TRANSLITERATION_STYLE,
                               aAttr.Style );
     }
 
@@ -1213,17 +1213,17 @@ void SvXMLNumFmtExport::ExportPart_Impl( const SvNumberformat& rFormat, sal_uInt
             aLanguageTag.getIsoLanguageScriptCountry( aLanguage, aScript, aCountry);
             // For 1.2/1.3+ use loext namespace.
             rExport.AddAttribute( /*((eVersion < SvtSaveOptions::ODFSVER_)
-                        ? */ XML_NAMESPACE_LO_EXT /*: XML_NAMESPACE_NUMBER)*/,
+                        ? */ XmlNamespace::LO_EXT /*: XmlNamespace::NUMBER)*/,
                     XML_TRANSLITERATION_SPELLOUT, aAttr.Spellout );
-            rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_LANGUAGE,
+            rExport.AddAttribute( XmlNamespace::NUMBER, XML_TRANSLITERATION_LANGUAGE,
                                   aLanguage );
-            rExport.AddAttribute( XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_COUNTRY,
+            rExport.AddAttribute( XmlNamespace::NUMBER, XML_TRANSLITERATION_COUNTRY,
                                   aCountry );
         }
     }
 
     // The element
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_NUMBER, eType,
+    SvXMLElementExport aElem( rExport, XmlNamespace::NUMBER, eType,
                               true, true );
 
     //  color (properties element)
@@ -1719,7 +1719,7 @@ void SvXMLNumFmtExport::ExportPart_Impl( const SvNumberformat& rFormat, sal_uInt
     if ( !bAnyContent )
     {
         //  for an empty format, write an empty text element
-        SvXMLElementExport aTElem( rExport, XML_NAMESPACE_NUMBER, XML_TEXT,
+        SvXMLElementExport aTElem( rExport, XmlNamespace::NUMBER, XML_TEXT,
                                    true, false );
     }
 
diff --git a/xmloff/source/style/xmlnumfi.cxx b/xmloff/source/style/xmlnumfi.cxx
index 5914d9d04ca2..2f5b18b152f0 100644
--- a/xmloff/source/style/xmlnumfi.cxx
+++ b/xmloff/source/style/xmlnumfi.cxx
@@ -434,13 +434,13 @@ const SvXMLTokenMap& SvXMLNumImpData::GetStylesElemTokenMap()
         static const SvXMLTokenMapEntry aStylesElemMap[] =
         {
             //  style elements
-            { XML_NAMESPACE_NUMBER, XML_NUMBER_STYLE,      XML_TOK_STYLES_NUMBER_STYLE      },
-            { XML_NAMESPACE_NUMBER, XML_CURRENCY_STYLE,    XML_TOK_STYLES_CURRENCY_STYLE    },
-            { XML_NAMESPACE_NUMBER, XML_PERCENTAGE_STYLE,  XML_TOK_STYLES_PERCENTAGE_STYLE  },
-            { XML_NAMESPACE_NUMBER, XML_DATE_STYLE,        XML_TOK_STYLES_DATE_STYLE        },
-            { XML_NAMESPACE_NUMBER, XML_TIME_STYLE,        XML_TOK_STYLES_TIME_STYLE        },
-            { XML_NAMESPACE_NUMBER, XML_BOOLEAN_STYLE,     XML_TOK_STYLES_BOOLEAN_STYLE     },
-            { XML_NAMESPACE_NUMBER, XML_TEXT_STYLE,        XML_TOK_STYLES_TEXT_STYLE        },
+            { XmlNamespace::NUMBER, XML_NUMBER_STYLE,      XML_TOK_STYLES_NUMBER_STYLE      },
+            { XmlNamespace::NUMBER, XML_CURRENCY_STYLE,    XML_TOK_STYLES_CURRENCY_STYLE    },
+            { XmlNamespace::NUMBER, XML_PERCENTAGE_STYLE,  XML_TOK_STYLES_PERCENTAGE_STYLE  },
+            { XmlNamespace::NUMBER, XML_DATE_STYLE,        XML_TOK_STYLES_DATE_STYLE        },
+            { XmlNamespace::NUMBER, XML_TIME_STYLE,        XML_TOK_STYLES_TIME_STYLE        },
+            { XmlNamespace::NUMBER, XML_BOOLEAN_STYLE,     XML_TOK_STYLES_BOOLEAN_STYLE     },
+            { XmlNamespace::NUMBER, XML_TEXT_STYLE,        XML_TOK_STYLES_TEXT_STYLE        },
             XML_TOKEN_MAP_END
         };
 
@@ -456,29 +456,29 @@ const SvXMLTokenMap& SvXMLNumImpData::GetStyleElemTokenMap()
         static const SvXMLTokenMapEntry aStyleElemMap[] =
         {
             //  elements in a style
-            { XML_NAMESPACE_LO_EXT, XML_TEXT,               XML_TOK_STYLE_TEXT              },
-            { XML_NAMESPACE_NUMBER, XML_TEXT,               XML_TOK_STYLE_TEXT              },
-            { XML_NAMESPACE_LO_EXT, XML_FILL_CHARACTER,     XML_TOK_STYLE_FILL_CHARACTER    },
-            { XML_NAMESPACE_NUMBER, XML_FILL_CHARACTER,     XML_TOK_STYLE_FILL_CHARACTER    },
-            { XML_NAMESPACE_NUMBER, XML_NUMBER,             XML_TOK_STYLE_NUMBER            },
-            { XML_NAMESPACE_NUMBER, XML_SCIENTIFIC_NUMBER,  XML_TOK_STYLE_SCIENTIFIC_NUMBER },
-            { XML_NAMESPACE_NUMBER, XML_FRACTION,           XML_TOK_STYLE_FRACTION          },
-            { XML_NAMESPACE_NUMBER, XML_CURRENCY_SYMBOL,    XML_TOK_STYLE_CURRENCY_SYMBOL   },
-            { XML_NAMESPACE_NUMBER, XML_DAY,                XML_TOK_STYLE_DAY               },
-            { XML_NAMESPACE_NUMBER, XML_MONTH,              XML_TOK_STYLE_MONTH             },
-            { XML_NAMESPACE_NUMBER, XML_YEAR,               XML_TOK_STYLE_YEAR              },
-            { XML_NAMESPACE_NUMBER, XML_ERA,                XML_TOK_STYLE_ERA               },
-            { XML_NAMESPACE_NUMBER, XML_DAY_OF_WEEK,        XML_TOK_STYLE_DAY_OF_WEEK       },
-            { XML_NAMESPACE_NUMBER, XML_WEEK_OF_YEAR,       XML_TOK_STYLE_WEEK_OF_YEAR      },
-            { XML_NAMESPACE_NUMBER, XML_QUARTER,            XML_TOK_STYLE_QUARTER           },
-            { XML_NAMESPACE_NUMBER, XML_HOURS,              XML_TOK_STYLE_HOURS             },
-            { XML_NAMESPACE_NUMBER, XML_AM_PM,              XML_TOK_STYLE_AM_PM             },
-            { XML_NAMESPACE_NUMBER, XML_MINUTES,            XML_TOK_STYLE_MINUTES           },
-            { XML_NAMESPACE_NUMBER, XML_SECONDS,            XML_TOK_STYLE_SECONDS           },
-            { XML_NAMESPACE_NUMBER, XML_BOOLEAN,            XML_TOK_STYLE_BOOLEAN           },
-            { XML_NAMESPACE_NUMBER, XML_TEXT_CONTENT,       XML_TOK_STYLE_TEXT_CONTENT      },
-            { XML_NAMESPACE_STYLE,  XML_TEXT_PROPERTIES,    XML_TOK_STYLE_PROPERTIES        },
-            { XML_NAMESPACE_STYLE,  XML_MAP,                XML_TOK_STYLE_MAP               },
+            { XmlNamespace::LO_EXT, XML_TEXT,               XML_TOK_STYLE_TEXT              },
+            { XmlNamespace::NUMBER, XML_TEXT,               XML_TOK_STYLE_TEXT              },
+            { XmlNamespace::LO_EXT, XML_FILL_CHARACTER,     XML_TOK_STYLE_FILL_CHARACTER    },
+            { XmlNamespace::NUMBER, XML_FILL_CHARACTER,     XML_TOK_STYLE_FILL_CHARACTER    },
+            { XmlNamespace::NUMBER, XML_NUMBER,             XML_TOK_STYLE_NUMBER            },
+            { XmlNamespace::NUMBER, XML_SCIENTIFIC_NUMBER,  XML_TOK_STYLE_SCIENTIFIC_NUMBER },
+            { XmlNamespace::NUMBER, XML_FRACTION,           XML_TOK_STYLE_FRACTION          },
+            { XmlNamespace::NUMBER, XML_CURRENCY_SYMBOL,    XML_TOK_STYLE_CURRENCY_SYMBOL   },
+            { XmlNamespace::NUMBER, XML_DAY,                XML_TOK_STYLE_DAY               },
+            { XmlNamespace::NUMBER, XML_MONTH,              XML_TOK_STYLE_MONTH             },
+            { XmlNamespace::NUMBER, XML_YEAR,               XML_TOK_STYLE_YEAR              },
+            { XmlNamespace::NUMBER, XML_ERA,                XML_TOK_STYLE_ERA               },
+            { XmlNamespace::NUMBER, XML_DAY_OF_WEEK,        XML_TOK_STYLE_DAY_OF_WEEK       },
+            { XmlNamespace::NUMBER, XML_WEEK_OF_YEAR,       XML_TOK_STYLE_WEEK_OF_YEAR      },
+            { XmlNamespace::NUMBER, XML_QUARTER,            XML_TOK_STYLE_QUARTER           },
+            { XmlNamespace::NUMBER, XML_HOURS,              XML_TOK_STYLE_HOURS             },
+            { XmlNamespace::NUMBER, XML_AM_PM,              XML_TOK_STYLE_AM_PM             },
+            { XmlNamespace::NUMBER, XML_MINUTES,            XML_TOK_STYLE_MINUTES           },
+            { XmlNamespace::NUMBER, XML_SECONDS,            XML_TOK_STYLE_SECONDS           },
+            { XmlNamespace::NUMBER, XML_BOOLEAN,            XML_TOK_STYLE_BOOLEAN           },
+            { XmlNamespace::NUMBER, XML_TEXT_CONTENT,       XML_TOK_STYLE_TEXT_CONTENT      },
+            { XmlNamespace::STYLE,  XML_TEXT_PROPERTIES,    XML_TOK_STYLE_PROPERTIES        },
+            { XmlNamespace::STYLE,  XML_MAP,                XML_TOK_STYLE_MAP               },
             XML_TOKEN_MAP_END
         };
 
@@ -494,24 +494,24 @@ const SvXMLTokenMap& SvXMLNumImpData::GetStyleAttrTokenMap()
         static const SvXMLTokenMapEntry aStyleAttrMap[] =
         {
             //  attributes for a style
-            { XML_NAMESPACE_STYLE,  XML_NAME,                  XML_TOK_STYLE_ATTR_NAME                  },
-            { XML_NAMESPACE_NUMBER, XML_RFC_LANGUAGE_TAG,      XML_TOK_STYLE_ATTR_RFC_LANGUAGE_TAG,     },
-            { XML_NAMESPACE_NUMBER, XML_LANGUAGE,              XML_TOK_STYLE_ATTR_LANGUAGE              },
-            { XML_NAMESPACE_NUMBER, XML_SCRIPT,                XML_TOK_STYLE_ATTR_SCRIPT                },
-            { XML_NAMESPACE_NUMBER, XML_COUNTRY,               XML_TOK_STYLE_ATTR_COUNTRY               },
-            { XML_NAMESPACE_NUMBER, XML_TITLE,                 XML_TOK_STYLE_ATTR_TITLE                 },
-            { XML_NAMESPACE_NUMBER, XML_AUTOMATIC_ORDER,       XML_TOK_STYLE_ATTR_AUTOMATIC_ORDER       },
-            { XML_NAMESPACE_NUMBER, XML_FORMAT_SOURCE,         XML_TOK_STYLE_ATTR_FORMAT_SOURCE         },
-            { XML_NAMESPACE_NUMBER, XML_TRUNCATE_ON_OVERFLOW,  XML_TOK_STYLE_ATTR_TRUNCATE_ON_OVERFLOW  },
-            { XML_NAMESPACE_STYLE,  XML_VOLATILE,              XML_TOK_STYLE_ATTR_VOLATILE              },
-            { XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_FORMAT,     XML_TOK_STYLE_ATTR_TRANSL_FORMAT    },
-            // not defined in ODF { XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_RFC_LANGUAGE_TAG, XML_TOK_STYLE_ATTR_TRANSL_RFC_LANGUAGE_TAG   },
-            { XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_LANGUAGE,   XML_TOK_STYLE_ATTR_TRANSL_LANGUAGE  },
-            // not defined in ODF { XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_SCRIPT,     XML_TOK_STYLE_ATTR_TRANSL_SCRIPT    },
-            { XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_COUNTRY,    XML_TOK_STYLE_ATTR_TRANSL_COUNTRY   },
-            { XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_STYLE,      XML_TOK_STYLE_ATTR_TRANSL_STYLE     },
-            { XML_NAMESPACE_LO_EXT, XML_TRANSLITERATION_SPELLOUT,    XML_TOK_STYLE_ATTR_TRANSL_SPELLOUT   },
-            { XML_NAMESPACE_NUMBER, XML_TRANSLITERATION_SPELLOUT,    XML_TOK_STYLE_ATTR_TRANSL_SPELLOUT   },
+            { XmlNamespace::STYLE,  XML_NAME,                  XML_TOK_STYLE_ATTR_NAME                  },
+            { XmlNamespace::NUMBER, XML_RFC_LANGUAGE_TAG,      XML_TOK_STYLE_ATTR_RFC_LANGUAGE_TAG,     },
+            { XmlNamespace::NUMBER, XML_LANGUAGE,              XML_TOK_STYLE_ATTR_LANGUAGE              },
+            { XmlNamespace::NUMBER, XML_SCRIPT,                XML_TOK_STYLE_ATTR_SCRIPT                },
+            { XmlNamespace::NUMBER, XML_COUNTRY,               XML_TOK_STYLE_ATTR_COUNTRY               },
+            { XmlNamespace::NUMBER, XML_TITLE,                 XML_TOK_STYLE_ATTR_TITLE                 },
+            { XmlNamespace::NUMBER, XML_AUTOMATIC_ORDER,       XML_TOK_STYLE_ATTR_AUTOMATIC_ORDER       },
+            { XmlNamespace::NUMBER, XML_FORMAT_SOURCE,         XML_TOK_STYLE_ATTR_FORMAT_SOURCE         },
+            { XmlNamespace::NUMBER, XML_TRUNCATE_ON_OVERFLOW,  XML_TOK_STYLE_ATTR_TRUNCATE_ON_OVERFLOW  },
+            { XmlNamespace::STYLE,  XML_VOLATILE,              XML_TOK_STYLE_ATTR_VOLATILE              },
+            { XmlNamespace::NUMBER, XML_TRANSLITERATION_FORMAT,     XML_TOK_STYLE_ATTR_TRANSL_FORMAT    },
+            // not defined in ODF { XmlNamespace::NUMBER, XML_TRANSLITERATION_RFC_LANGUAGE_TAG, XML_TOK_STYLE_ATTR_TRANSL_RFC_LANGUAGE_TAG   },
+            { XmlNamespace::NUMBER, XML_TRANSLITERATION_LANGUAGE,   XML_TOK_STYLE_ATTR_TRANSL_LANGUAGE  },
+            // not defined in ODF { XmlNamespace::NUMBER, XML_TRANSLITERATION_SCRIPT,     XML_TOK_STYLE_ATTR_TRANSL_SCRIPT    },
+            { XmlNamespace::NUMBER, XML_TRANSLITERATION_COUNTRY,    XML_TOK_STYLE_ATTR_TRANSL_COUNTRY   },
+            { XmlNamespace::NUMBER, XML_TRANSLITERATION_STYLE,      XML_TOK_STYLE_ATTR_TRANSL_STYLE     },
+            { XmlNamespace::LO_EXT, XML_TRANSLITERATION_SPELLOUT,    XML_TOK_STYLE_ATTR_TRANSL_SPELLOUT   },
+            { XmlNamespace::NUMBER, XML_TRANSLITERATION_SPELLOUT,    XML_TOK_STYLE_ATTR_TRANSL_SPELLOUT   },
             XML_TOKEN_MAP_END
         };
 
@@ -527,37 +527,37 @@ const SvXMLTokenMap& SvXMLNumImpData::GetStyleElemAttrTokenMap()
         static const SvXMLTokenMapEntry aStyleElemAttrMap[] =
         {
             //  attributes for an element within a style
-            { XML_NAMESPACE_NUMBER, XML_DECIMAL_PLACES,          XML_TOK_ELEM_ATTR_DECIMAL_PLACES       },
-            { XML_NAMESPACE_LO_EXT, XML_MIN_DECIMAL_PLACES,      XML_TOK_ELEM_ATTR_MIN_DECIMAL_PLACES   },
-            { XML_NAMESPACE_NUMBER, XML_MIN_DECIMAL_PLACES,      XML_TOK_ELEM_ATTR_MIN_DECIMAL_PLACES   },
-            { XML_NAMESPACE_NUMBER, XML_MIN_INTEGER_DIGITS,      XML_TOK_ELEM_ATTR_MIN_INTEGER_DIGITS   },
-            { XML_NAMESPACE_NUMBER, XML_GROUPING,                XML_TOK_ELEM_ATTR_GROUPING             },
-            { XML_NAMESPACE_NUMBER, XML_DISPLAY_FACTOR,          XML_TOK_ELEM_ATTR_DISPLAY_FACTOR       },
-            { XML_NAMESPACE_NUMBER, XML_DECIMAL_REPLACEMENT,     XML_TOK_ELEM_ATTR_DECIMAL_REPLACEMENT  },
-            { XML_NAMESPACE_NUMBER, XML_DENOMINATOR_VALUE,       XML_TOK_ELEM_ATTR_DENOMINATOR_VALUE  },
-            { XML_NAMESPACE_NUMBER, XML_MIN_EXPONENT_DIGITS,     XML_TOK_ELEM_ATTR_MIN_EXPONENT_DIGITS  },
-            { XML_NAMESPACE_LO_EXT, XML_EXPONENT_INTERVAL,       XML_TOK_ELEM_ATTR_EXPONENT_INTERVAL    },
-            { XML_NAMESPACE_NUMBER, XML_EXPONENT_INTERVAL,       XML_TOK_ELEM_ATTR_EXPONENT_INTERVAL    },
-            { XML_NAMESPACE_LO_EXT, XML_FORCED_EXPONENT_SIGN,    XML_TOK_ELEM_ATTR_FORCED_EXPONENT_SIGN },
-            { XML_NAMESPACE_NUMBER, XML_FORCED_EXPONENT_SIGN,    XML_TOK_ELEM_ATTR_FORCED_EXPONENT_SIGN },
-            { XML_NAMESPACE_NUMBER, XML_MIN_NUMERATOR_DIGITS,    XML_TOK_ELEM_ATTR_MIN_NUMERATOR_DIGITS },
-            { XML_NAMESPACE_NUMBER, XML_MIN_DENOMINATOR_DIGITS,  XML_TOK_ELEM_ATTR_MIN_DENOMINATOR_DIGITS },
-            { XML_NAMESPACE_LO_EXT, XML_MAX_NUMERATOR_DIGITS,    XML_TOK_ELEM_ATTR_MAX_NUMERATOR_DIGITS },
-            { XML_NAMESPACE_LO_EXT, XML_MAX_DENOMINATOR_VALUE,   XML_TOK_ELEM_ATTR_MAX_DENOMINATOR_VALUE },
-            { XML_NAMESPACE_NUMBER, XML_MAX_DENOMINATOR_VALUE,   XML_TOK_ELEM_ATTR_MAX_DENOMINATOR_VALUE },
-            { XML_NAMESPACE_LO_EXT, XML_ZEROS_NUMERATOR_DIGITS,  XML_TOK_ELEM_ATTR_ZEROS_NUMERATOR_DIGITS },
-            { XML_NAMESPACE_NUMBER, XML_ZEROS_NUMERATOR_DIGITS,  XML_TOK_ELEM_ATTR_ZEROS_NUMERATOR_DIGITS },
-            { XML_NAMESPACE_LO_EXT, XML_ZEROS_DENOMINATOR_DIGITS,XML_TOK_ELEM_ATTR_ZEROS_DENOMINATOR_DIGITS },
-            { XML_NAMESPACE_NUMBER, XML_ZEROS_DENOMINATOR_DIGITS,XML_TOK_ELEM_ATTR_ZEROS_DENOMINATOR_DIGITS },
-            { XML_NAMESPACE_LO_EXT, XML_INTEGER_FRACTION_DELIMITER, XML_TOK_ELEM_ATTR_INTEGER_FRACTION_DELIMITER },
-            { XML_NAMESPACE_NUMBER, XML_INTEGER_FRACTION_DELIMITER, XML_TOK_ELEM_ATTR_INTEGER_FRACTION_DELIMITER },
-            { XML_NAMESPACE_NUMBER, XML_RFC_LANGUAGE_TAG,        XML_TOK_ELEM_ATTR_RFC_LANGUAGE_TAG     },
-            { XML_NAMESPACE_NUMBER, XML_LANGUAGE,                XML_TOK_ELEM_ATTR_LANGUAGE             },
-            { XML_NAMESPACE_NUMBER, XML_SCRIPT,                  XML_TOK_ELEM_ATTR_SCRIPT               },
-            { XML_NAMESPACE_NUMBER, XML_COUNTRY,                 XML_TOK_ELEM_ATTR_COUNTRY              },
-            { XML_NAMESPACE_NUMBER, XML_STYLE,                   XML_TOK_ELEM_ATTR_STYLE                },
-            { XML_NAMESPACE_NUMBER, XML_TEXTUAL,                 XML_TOK_ELEM_ATTR_TEXTUAL              },
-            { XML_NAMESPACE_NUMBER, XML_CALENDAR,                XML_TOK_ELEM_ATTR_CALENDAR             },
+            { XmlNamespace::NUMBER, XML_DECIMAL_PLACES,          XML_TOK_ELEM_ATTR_DECIMAL_PLACES       },
+            { XmlNamespace::LO_EXT, XML_MIN_DECIMAL_PLACES,      XML_TOK_ELEM_ATTR_MIN_DECIMAL_PLACES   },
+            { XmlNamespace::NUMBER, XML_MIN_DECIMAL_PLACES,      XML_TOK_ELEM_ATTR_MIN_DECIMAL_PLACES   },
+            { XmlNamespace::NUMBER, XML_MIN_INTEGER_DIGITS,      XML_TOK_ELEM_ATTR_MIN_INTEGER_DIGITS   },
+            { XmlNamespace::NUMBER, XML_GROUPING,                XML_TOK_ELEM_ATTR_GROUPING             },
+            { XmlNamespace::NUMBER, XML_DISPLAY_FACTOR,          XML_TOK_ELEM_ATTR_DISPLAY_FACTOR       },
+            { XmlNamespace::NUMBER, XML_DECIMAL_REPLACEMENT,     XML_TOK_ELEM_ATTR_DECIMAL_REPLACEMENT  },
+            { XmlNamespace::NUMBER, XML_DENOMINATOR_VALUE,       XML_TOK_ELEM_ATTR_DENOMINATOR_VALUE  },
+            { XmlNamespace::NUMBER, XML_MIN_EXPONENT_DIGITS,     XML_TOK_ELEM_ATTR_MIN_EXPONENT_DIGITS  },
+            { XmlNamespace::LO_EXT, XML_EXPONENT_INTERVAL,       XML_TOK_ELEM_ATTR_EXPONENT_INTERVAL    },
+            { XmlNamespace::NUMBER, XML_EXPONENT_INTERVAL,       XML_TOK_ELEM_ATTR_EXPONENT_INTERVAL    },
+            { XmlNamespace::LO_EXT, XML_FORCED_EXPONENT_SIGN,    XML_TOK_ELEM_ATTR_FORCED_EXPONENT_SIGN },
+            { XmlNamespace::NUMBER, XML_FORCED_EXPONENT_SIGN,    XML_TOK_ELEM_ATTR_FORCED_EXPONENT_SIGN },
+            { XmlNamespace::NUMBER, XML_MIN_NUMERATOR_DIGITS,    XML_TOK_ELEM_ATTR_MIN_NUMERATOR_DIGITS },
+            { XmlNamespace::NUMBER, XML_MIN_DENOMINATOR_DIGITS,  XML_TOK_ELEM_ATTR_MIN_DENOMINATOR_DIGITS },
+            { XmlNamespace::LO_EXT, XML_MAX_NUMERATOR_DIGITS,    XML_TOK_ELEM_ATTR_MAX_NUMERATOR_DIGITS },
+            { XmlNamespace::LO_EXT, XML_MAX_DENOMINATOR_VALUE,   XML_TOK_ELEM_ATTR_MAX_DENOMINATOR_VALUE },
+            { XmlNamespace::NUMBER, XML_MAX_DENOMINATOR_VALUE,   XML_TOK_ELEM_ATTR_MAX_DENOMINATOR_VALUE },
+            { XmlNamespace::LO_EXT, XML_ZEROS_NUMERATOR_DIGITS,  XML_TOK_ELEM_ATTR_ZEROS_NUMERATOR_DIGITS },
+            { XmlNamespace::NUMBER, XML_ZEROS_NUMERATOR_DIGITS,  XML_TOK_ELEM_ATTR_ZEROS_NUMERATOR_DIGITS },
+            { XmlNamespace::LO_EXT, XML_ZEROS_DENOMINATOR_DIGITS,XML_TOK_ELEM_ATTR_ZEROS_DENOMINATOR_DIGITS },
+            { XmlNamespace::NUMBER, XML_ZEROS_DENOMINATOR_DIGITS,XML_TOK_ELEM_ATTR_ZEROS_DENOMINATOR_DIGITS },
+            { XmlNamespace::LO_EXT, XML_INTEGER_FRACTION_DELIMITER, XML_TOK_ELEM_ATTR_INTEGER_FRACTION_DELIMITER },
+            { XmlNamespace::NUMBER, XML_INTEGER_FRACTION_DELIMITER, XML_TOK_ELEM_ATTR_INTEGER_FRACTION_DELIMITER },
+            { XmlNamespace::NUMBER, XML_RFC_LANGUAGE_TAG,        XML_TOK_ELEM_ATTR_RFC_LANGUAGE_TAG     },
+            { XmlNamespace::NUMBER, XML_LANGUAGE,                XML_TOK_ELEM_ATTR_LANGUAGE             },
+            { XmlNamespace::NUMBER, XML_SCRIPT,                  XML_TOK_ELEM_ATTR_SCRIPT               },
+            { XmlNamespace::NUMBER, XML_COUNTRY,                 XML_TOK_ELEM_ATTR_COUNTRY              },
+            { XmlNamespace::NUMBER, XML_STYLE,                   XML_TOK_ELEM_ATTR_STYLE                },
+            { XmlNamespace::NUMBER, XML_TEXTUAL,                 XML_TOK_ELEM_ATTR_TEXTUAL              },
+            { XmlNamespace::NUMBER, XML_CALENDAR,                XML_TOK_ELEM_ATTR_CALENDAR             },
             XML_TOKEN_MAP_END
         };
 
@@ -595,7 +595,7 @@ SvXMLNumFmtMapContext::SvXMLNumFmtMapContext( SvXMLImport& rImport,
         OUString sValue = xAttrList->getValueByIndex( i );
         OUString aLocalName;
         sal_uInt16 nPrefix = rImport.GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
-        if ( nPrefix == XML_NAMESPACE_STYLE )
+        if ( nPrefix == XmlNamespace::STYLE )
         {
             if ( IsXMLToken( aLocalName, XML_CONDITION) )
                 sCondition = sValue;
@@ -642,7 +642,7 @@ SvXMLNumFmtPropContext::SvXMLNumFmtPropContext( SvXMLImport& rImport,
         OUString sValue = xAttrList->getValueByIndex( i );
         OUString aLocalName;
         sal_uInt16 nPrefix = rImport.GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
-        if ( nPrefix == XML_NAMESPACE_FO && IsXMLToken( aLocalName, XML_COLOR ) )
+        if ( nPrefix == XmlNamespace::FO && IsXMLToken( aLocalName, XML_COLOR ) )
         {
             bColSet = ::sax::Converter::convertColor( m_nColor, sValue );
         }
@@ -680,7 +680,7 @@ SvXMLNumFmtEmbeddedTextContext::SvXMLNumFmtEmbeddedTextContext( SvXMLImport& rIm
         OUString sValue = xAttrList->getValueByIndex( i );
         OUString aLocalName;
         sal_uInt16 nPrefix = rImport.GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
-        if ( nPrefix == XML_NAMESPACE_NUMBER && IsXMLToken( aLocalName, XML_POSITION ) )
+        if ( nPrefix == XmlNamespace::NUMBER && IsXMLToken( aLocalName, XML_POSITION ) )
         {
             if (::sax::Converter::convertNumber( nAttrVal, sValue, 0 ))
                 nTextPosition = nAttrVal;
@@ -1053,7 +1053,7 @@ SvXMLImportContextRef SvXMLNumFmtElementContext::CreateChildContext(
     //  only number:number supports number:embedded-text child element
 
     if ( nType == XML_TOK_STYLE_NUMBER &&
-         nPrfx == XML_NAMESPACE_NUMBER && IsXMLToken( rLName, XML_EMBEDDED_TEXT ) )
+         nPrfx == XmlNamespace::NUMBER && IsXMLToken( rLName, XML_EMBEDDED_TEXT ) )
     {
         return new SvXMLNumFmtEmbeddedTextContext( GetImport(), nPrfx, rLName, *this, xAttrList );
     }
@@ -1498,7 +1498,7 @@ SvXMLNumFormatContext::SvXMLNumFormatContext( SvXMLImport& rImport,
     eDateSecs( XML_DEA_NONE ),
     bDateNoDefault( false )
 {
-    SetAttribute(XML_NAMESPACE_STYLE, GetXMLToken(XML_NAME), rLName);
+    SetAttribute(XmlNamespace::STYLE, GetXMLToken(XML_NAME), rLName);
 }
 
 SvXMLNumFormatContext::~SvXMLNumFormatContext()
diff --git a/xmloff/source/style/xmlnumi.cxx b/xmloff/source/style/xmlnumi.cxx
index d532ec2a6c0f..551e22d7981c 100644
--- a/xmloff/source/style/xmlnumi.cxx
+++ b/xmloff/source/style/xmlnumi.cxx
@@ -126,20 +126,20 @@ static const SvXMLTokenMapEntry* lcl_getLevelAttrTokenMap()
 {
     static const SvXMLTokenMapEntry aLevelAttrTokenMap[] =
     {
-        { XML_NAMESPACE_TEXT, XML_LEVEL, XML_TOK_TEXT_LEVEL_ATTR_LEVEL },
-        { XML_NAMESPACE_TEXT, XML_STYLE_NAME, XML_TOK_TEXT_LEVEL_ATTR_STYLE_NAME },
-        { XML_NAMESPACE_TEXT, XML_BULLET_CHAR, XML_TOK_TEXT_LEVEL_ATTR_BULLET_CHAR },
-        { XML_NAMESPACE_XLINK, XML_HREF, XML_TOK_TEXT_LEVEL_ATTR_HREF },
-        { XML_NAMESPACE_XLINK, XML_TYPE, XML_TOK_TEXT_LEVEL_ATTR_TYPE },
-        { XML_NAMESPACE_XLINK, XML_SHOW, XML_TOK_TEXT_LEVEL_ATTR_SHOW },
-        { XML_NAMESPACE_XLINK, XML_ACTUATE, XML_TOK_TEXT_LEVEL_ATTR_ACTUATE },
-
-        { XML_NAMESPACE_STYLE, XML_NUM_FORMAT, XML_TOK_TEXT_LEVEL_ATTR_NUM_FORMAT },
-        { XML_NAMESPACE_STYLE, XML_NUM_PREFIX, XML_TOK_TEXT_LEVEL_ATTR_NUM_PREFIX },
-        { XML_NAMESPACE_STYLE, XML_NUM_SUFFIX, XML_TOK_TEXT_LEVEL_ATTR_NUM_SUFFIX },
-        { XML_NAMESPACE_STYLE, XML_NUM_LETTER_SYNC, XML_TOK_TEXT_LEVEL_ATTR_NUM_LETTER_SYNC },
-        { XML_NAMESPACE_TEXT, XML_START_VALUE, XML_TOK_TEXT_LEVEL_ATTR_START_VALUE },
-        { XML_NAMESPACE_TEXT, XML_DISPLAY_LEVELS, XML_TOK_TEXT_LEVEL_ATTR_DISPLAY_LEVELS },
+        { XmlNamespace::TEXT, XML_LEVEL, XML_TOK_TEXT_LEVEL_ATTR_LEVEL },
+        { XmlNamespace::TEXT, XML_STYLE_NAME, XML_TOK_TEXT_LEVEL_ATTR_STYLE_NAME },
+        { XmlNamespace::TEXT, XML_BULLET_CHAR, XML_TOK_TEXT_LEVEL_ATTR_BULLET_CHAR },
+        { XmlNamespace::XLINK, XML_HREF, XML_TOK_TEXT_LEVEL_ATTR_HREF },
+        { XmlNamespace::XLINK, XML_TYPE, XML_TOK_TEXT_LEVEL_ATTR_TYPE },
+        { XmlNamespace::XLINK, XML_SHOW, XML_TOK_TEXT_LEVEL_ATTR_SHOW },
+        { XmlNamespace::XLINK, XML_ACTUATE, XML_TOK_TEXT_LEVEL_ATTR_ACTUATE },
+
+        { XmlNamespace::STYLE, XML_NUM_FORMAT, XML_TOK_TEXT_LEVEL_ATTR_NUM_FORMAT },
+        { XmlNamespace::STYLE, XML_NUM_PREFIX, XML_TOK_TEXT_LEVEL_ATTR_NUM_PREFIX },
+        { XmlNamespace::STYLE, XML_NUM_SUFFIX, XML_TOK_TEXT_LEVEL_ATTR_NUM_SUFFIX },
+        { XmlNamespace::STYLE, XML_NUM_LETTER_SYNC, XML_TOK_TEXT_LEVEL_ATTR_NUM_LETTER_SYNC },
+        { XmlNamespace::TEXT, XML_START_VALUE, XML_TOK_TEXT_LEVEL_ATTR_START_VALUE },
+        { XmlNamespace::TEXT, XML_DISPLAY_LEVELS, XML_TOK_TEXT_LEVEL_ATTR_DISPLAY_LEVELS },
 
         XML_TOKEN_MAP_END
     };
@@ -370,7 +370,7 @@ SvXMLImportContextRef SvxXMLListLevelStyleContext_Impl::CreateChildContext(
         const Reference< xml::sax::XAttributeList > & xAttrList )
 {
     SvXMLImportContext *pContext = nullptr;
-    if( XML_NAMESPACE_STYLE == nPrefix &&
+    if( XmlNamespace::STYLE == nPrefix &&
         ( IsXMLToken( rLocalName, XML_LIST_LEVEL_PROPERTIES ) ||
              IsXMLToken( rLocalName, XML_TEXT_PROPERTIES ) ) )
     {
@@ -380,7 +380,7 @@ SvXMLImportContextRef SvxXMLListLevelStyleContext_Impl::CreateChildContext(
                                                                xAttrList,
                                                              *this );
     }
-    else if( (XML_NAMESPACE_OFFICE == nPrefix) && xmloff::token::IsXMLToken( rLocalName,
+    else if( (XmlNamespace::OFFICE == nPrefix) && xmloff::token::IsXMLToken( rLocalName,
                                         xmloff::token::XML_BINARY_DATA ) )
     {
         if( bImage && sImageURL.isEmpty() && !xBase64Stream.is() )
@@ -614,41 +614,41 @@ static const SvXMLTokenMapEntry* lcl_getStyleAttributesAttrTokenMap()
 {
     static const SvXMLTokenMapEntry aStyleAttributesAttrTokenMap[] =
     {
-        { XML_NAMESPACE_TEXT, XML_SPACE_BEFORE,
+        { XmlNamespace::TEXT, XML_SPACE_BEFORE,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_SPACE_BEFORE },
-        { XML_NAMESPACE_TEXT, XML_MIN_LABEL_WIDTH,
+        { XmlNamespace::TEXT, XML_MIN_LABEL_WIDTH,
                   XML_TOK_STYLE_ATTRIBUTES_ATTR_MIN_LABEL_WIDTH },
-        { XML_NAMESPACE_TEXT, XML_MIN_LABEL_DISTANCE,
+        { XmlNamespace::TEXT, XML_MIN_LABEL_DISTANCE,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_MIN_LABEL_DIST },
-        { XML_NAMESPACE_FO, XML_TEXT_ALIGN,
+        { XmlNamespace::FO, XML_TEXT_ALIGN,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_TEXT_ALIGN },
-        { XML_NAMESPACE_STYLE, XML_FONT_NAME,
+        { XmlNamespace::STYLE, XML_FONT_NAME,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_FONT_NAME },
-        { XML_NAMESPACE_FO, XML_FONT_FAMILY,
+        { XmlNamespace::FO, XML_FONT_FAMILY,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_FONT_FAMILY },
-        { XML_NAMESPACE_STYLE, XML_FONT_FAMILY_GENERIC,
+        { XmlNamespace::STYLE, XML_FONT_FAMILY_GENERIC,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_FONT_FAMILY_GENERIC },
-        { XML_NAMESPACE_STYLE, XML_FONT_STYLE_NAME,
+        { XmlNamespace::STYLE, XML_FONT_STYLE_NAME,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_FONT_STYLENAME },
-        { XML_NAMESPACE_STYLE, XML_FONT_PITCH,
+        { XmlNamespace::STYLE, XML_FONT_PITCH,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_FONT_PITCH },
-        { XML_NAMESPACE_STYLE, XML_FONT_CHARSET,
+        { XmlNamespace::STYLE, XML_FONT_CHARSET,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_FONT_CHARSET },
-        { XML_NAMESPACE_STYLE, XML_VERTICAL_POS,
+        { XmlNamespace::STYLE, XML_VERTICAL_POS,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_VERTICAL_POS },
-        { XML_NAMESPACE_STYLE, XML_VERTICAL_REL,
+        { XmlNamespace::STYLE, XML_VERTICAL_REL,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_VERTICAL_REL },
-        { XML_NAMESPACE_FO, XML_WIDTH,
+        { XmlNamespace::FO, XML_WIDTH,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_WIDTH },
-        { XML_NAMESPACE_FO, XML_HEIGHT,
+        { XmlNamespace::FO, XML_HEIGHT,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_HEIGHT },
-        { XML_NAMESPACE_FO, XML_COLOR,
+        { XmlNamespace::FO, XML_COLOR,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_COLOR },
-        { XML_NAMESPACE_STYLE, XML_USE_WINDOW_FONT_COLOR,
+        { XmlNamespace::STYLE, XML_USE_WINDOW_FONT_COLOR,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_WINDOW_FONT_COLOR },
-        { XML_NAMESPACE_FO, XML_FONT_SIZE,
+        { XmlNamespace::FO, XML_FONT_SIZE,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_FONT_SIZE },
-        { XML_NAMESPACE_TEXT, XML_LIST_LEVEL_POSITION_AND_SPACE_MODE,
+        { XmlNamespace::TEXT, XML_LIST_LEVEL_POSITION_AND_SPACE_MODE,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_POSITION_AND_SPACE_MODE },
         XML_TOKEN_MAP_END
     };
@@ -900,7 +900,7 @@ SvXMLImportContextRef SvxXMLListLevelStyleAttrContext_Impl::CreateChildContext(
         const Reference< xml::sax::XAttributeList > & xAttrList )
 {
     SvXMLImportContext *pContext = nullptr;
-    if ( XML_NAMESPACE_STYLE == nPrefix &&
+    if ( XmlNamespace::STYLE == nPrefix &&
          IsXMLToken( rLocalName, XML_LIST_LEVEL_LABEL_ALIGNMENT ) )
     {
         pContext = new SvxXMLListLevelStyleLabelAlignmentAttrContext_Impl( GetImport(),
@@ -929,15 +929,15 @@ static const SvXMLTokenMapEntry* lcl_getStyleAlignmentAttributesAttrTokenMap()
 {
     static const SvXMLTokenMapEntry aStyleAlignmentAttributesAttrTokenMap[] =
     {
-        { XML_NAMESPACE_TEXT, XML_LABEL_FOLLOWED_BY,
+        { XmlNamespace::TEXT, XML_LABEL_FOLLOWED_BY,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_LABEL_FOLLOWED_BY },
-        { XML_NAMESPACE_LO_EXT, XML_LABEL_FOLLOWED_BY,
+        { XmlNamespace::LO_EXT, XML_LABEL_FOLLOWED_BY,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_LABEL_FOLLOWED_BY },
-        { XML_NAMESPACE_TEXT, XML_LIST_TAB_STOP_POSITION,
+        { XmlNamespace::TEXT, XML_LIST_TAB_STOP_POSITION,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_LISTTAB_STOP_POSITION },
-        { XML_NAMESPACE_FO, XML_TEXT_INDENT,
+        { XmlNamespace::FO, XML_TEXT_INDENT,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_FIRST_LINE_INDENT },
-        { XML_NAMESPACE_FO, XML_MARGIN_LEFT,
+        { XmlNamespace::FO, XML_MARGIN_LEFT,
                 XML_TOK_STYLE_ATTRIBUTES_ATTR_INDENT_AT },
 
         XML_TOKEN_MAP_END
@@ -1002,7 +1002,7 @@ void SvxXMLListStyleContext::SetAttribute( sal_uInt16 nPrefixKey,
                                            const OUString& rLocalName,
                                            const OUString& rValue )
 {
-    if( XML_NAMESPACE_TEXT == nPrefixKey &&
+    if( XmlNamespace::TEXT == nPrefixKey &&
         IsXMLToken( rLocalName, XML_CONSECUTIVE_NUMBERING ) )
     {
         bConsecutive = IsXMLToken( rValue, XML_TRUE );
@@ -1047,7 +1047,7 @@ SvXMLImportContextRef SvxXMLListStyleContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_TEXT == nPrefix &&
+    if( XmlNamespace::TEXT == nPrefix &&
         ( bOutline
               ? IsXMLToken( rLocalName, XML_OUTLINE_LEVEL_STYLE )
               : ( IsXMLToken( rLocalName, XML_LIST_LEVEL_STYLE_NUMBER ) ||
diff --git a/xmloff/source/style/xmlstyle.cxx b/xmloff/source/style/xmlstyle.cxx
index 20f72ee256a4..de62ec3a4a65 100644
--- a/xmloff/source/style/xmlstyle.cxx
+++ b/xmloff/source/style/xmlstyle.cxx
@@ -61,21 +61,21 @@ using namespace ::xmloff::token;
 
 const SvXMLTokenMapEntry aStyleStylesElemTokenMap[] =
 {
-    { XML_NAMESPACE_STYLE,  XML_STYLE,          XML_TOK_STYLE_STYLE                },
-    { XML_NAMESPACE_STYLE,  XML_PAGE_LAYOUT,    XML_TOK_STYLE_PAGE_MASTER          },
-    { XML_NAMESPACE_TEXT,   XML_LIST_STYLE,     XML_TOK_TEXT_LIST_STYLE            },
-    { XML_NAMESPACE_TEXT,   XML_OUTLINE_STYLE,  XML_TOK_TEXT_OUTLINE               },
-    { XML_NAMESPACE_STYLE,  XML_DEFAULT_STYLE,  XML_TOK_STYLE_DEFAULT_STYLE        },
-    { XML_NAMESPACE_DRAW,   XML_GRADIENT,       XML_TOK_STYLES_GRADIENTSTYLES      },
-    { XML_NAMESPACE_DRAW,   XML_HATCH,          XML_TOK_STYLES_HATCHSTYLES         },
-    { XML_NAMESPACE_DRAW,   XML_FILL_IMAGE,     XML_TOK_STYLES_BITMAPSTYLES        },
-    { XML_NAMESPACE_DRAW,   XML_OPACITY,        XML_TOK_STYLES_TRANSGRADIENTSTYLES },
-    { XML_NAMESPACE_DRAW,   XML_MARKER,         XML_TOK_STYLES_MARKERSTYLES        },
-    { XML_NAMESPACE_DRAW,   XML_STROKE_DASH,    XML_TOK_STYLES_DASHSTYLES        },
-    { XML_NAMESPACE_TEXT,   XML_NOTES_CONFIGURATION,    XML_TOK_TEXT_NOTE_CONFIG },
-    { XML_NAMESPACE_TEXT,   XML_BIBLIOGRAPHY_CONFIGURATION, XML_TOK_TEXT_BIBLIOGRAPHY_CONFIG },
-    { XML_NAMESPACE_TEXT,   XML_LINENUMBERING_CONFIGURATION,XML_TOK_TEXT_LINENUMBERING_CONFIG },
-    { XML_NAMESPACE_STYLE,  XML_DEFAULT_PAGE_LAYOUT,    XML_TOK_STYLE_DEFAULT_PAGE_LAYOUT        },
+    { XmlNamespace::STYLE,  XML_STYLE,          XML_TOK_STYLE_STYLE                },
+    { XmlNamespace::STYLE,  XML_PAGE_LAYOUT,    XML_TOK_STYLE_PAGE_MASTER          },
+    { XmlNamespace::TEXT,   XML_LIST_STYLE,     XML_TOK_TEXT_LIST_STYLE            },
+    { XmlNamespace::TEXT,   XML_OUTLINE_STYLE,  XML_TOK_TEXT_OUTLINE               },
+    { XmlNamespace::STYLE,  XML_DEFAULT_STYLE,  XML_TOK_STYLE_DEFAULT_STYLE        },
+    { XmlNamespace::DRAW,   XML_GRADIENT,       XML_TOK_STYLES_GRADIENTSTYLES      },
+    { XmlNamespace::DRAW,   XML_HATCH,          XML_TOK_STYLES_HATCHSTYLES         },
+    { XmlNamespace::DRAW,   XML_FILL_IMAGE,     XML_TOK_STYLES_BITMAPSTYLES        },
+    { XmlNamespace::DRAW,   XML_OPACITY,        XML_TOK_STYLES_TRANSGRADIENTSTYLES },
+    { XmlNamespace::DRAW,   XML_MARKER,         XML_TOK_STYLES_MARKERSTYLES        },
+    { XmlNamespace::DRAW,   XML_STROKE_DASH,    XML_TOK_STYLES_DASHSTYLES        },
+    { XmlNamespace::TEXT,   XML_NOTES_CONFIGURATION,    XML_TOK_TEXT_NOTE_CONFIG },
+    { XmlNamespace::TEXT,   XML_BIBLIOGRAPHY_CONFIGURATION, XML_TOK_TEXT_BIBLIOGRAPHY_CONFIG },
+    { XmlNamespace::TEXT,   XML_LINENUMBERING_CONFIGURATION,XML_TOK_TEXT_LINENUMBERING_CONFIG },
+    { XmlNamespace::STYLE,  XML_DEFAULT_PAGE_LAYOUT,    XML_TOK_STYLE_DEFAULT_PAGE_LAYOUT        },
     XML_TOKEN_MAP_END
 };
 
@@ -96,7 +96,7 @@ void SvXMLStyleContext::SetAttribute( sal_uInt16 nPrefixKey,
                                       const OUString& rValue )
 {
     // TODO: use a map here
-    if( XML_NAMESPACE_STYLE == nPrefixKey )
+    if( XmlNamespace::STYLE == nPrefixKey )
     {
         if( IsXMLToken( rLocalName, XML_FAMILY ) )
         {
@@ -126,7 +126,7 @@ void SvXMLStyleContext::SetAttribute( sal_uInt16 nPrefixKey,
             mbHidden = rValue.toBoolean();
         }
     }
-    else if (XML_NAMESPACE_LO_EXT == nPrefixKey)
+    else if (XmlNamespace::LO_EXT == nPrefixKey)
     {
         if (IsXMLToken(rLocalName, XML_HIDDEN))
         {
@@ -393,7 +393,7 @@ SvXMLStyleContext *SvXMLStylesContext::CreateStyleChildContext( sal_uInt16 p_nPr
                     sal_uInt16 nPrefix =
                         GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                     &aLocalName );
-                    if( XML_NAMESPACE_STYLE == nPrefix &&
+                    if( XmlNamespace::STYLE == nPrefix &&
                         IsXMLToken( aLocalName, XML_FAMILY ) )
                     {
                         const OUString& rValue = xAttrList->getValueByIndex( i );
diff --git a/xmloff/source/style/xmltabe.cxx b/xmloff/source/style/xmltabe.cxx
index ac58af3f32e1..a9287e448ac4 100644
--- a/xmloff/source/style/xmltabe.cxx
+++ b/xmloff/source/style/xmltabe.cxx
@@ -52,7 +52,7 @@ void SvxXMLTabStopExport::exportTabStop( const css::style::TabStop* pTabStop )
 
     // position attribute
     rUnitConv.convertMeasureToXML( sBuffer, pTabStop->Position );
-    rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_POSITION,
+    rExport.AddAttribute( XmlNamespace::STYLE, XML_POSITION,
                            sBuffer.makeStringAndClear() );
 
     // type attribute
@@ -60,7 +60,7 @@ void SvxXMLTabStopExport::exportTabStop( const css::style::TabStop* pTabStop )
     {
         SvXMLUnitConverter::convertEnum( sBuffer, pTabStop->Alignment,
                                    pXML_tabstop_style );
-        rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_TYPE,
+        rExport.AddAttribute( XmlNamespace::STYLE, XML_TYPE,
                                sBuffer.makeStringAndClear() );
     }
 
@@ -69,23 +69,23 @@ void SvxXMLTabStopExport::exportTabStop( const css::style::TabStop* pTabStop )
         pTabStop->DecimalChar != 0 )
     {
         sBuffer.append( pTabStop->DecimalChar );
-        rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_CHAR,
+        rExport.AddAttribute( XmlNamespace::STYLE, XML_CHAR,
                                sBuffer.makeStringAndClear() );
     }
 
     // leader-char
     if( ' ' != pTabStop->FillChar && 0 != pTabStop->FillChar )
     {
-        rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_LEADER_STYLE,
+        rExport.AddAttribute( XmlNamespace::STYLE, XML_LEADER_STYLE,
                       GetXMLToken('.' == pTabStop->FillChar ? XML_DOTTED
                                                                : XML_SOLID) );
 
         sBuffer.append( pTabStop->FillChar );
-        rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_LEADER_TEXT,
+        rExport.AddAttribute( XmlNamespace::STYLE, XML_LEADER_TEXT,
                                sBuffer.makeStringAndClear() );
     }
 
-    SvXMLElementExport rElem( rExport, XML_NAMESPACE_STYLE, XML_TAB_STOP,
+    SvXMLElementExport rElem( rExport, XmlNamespace::STYLE, XML_TAB_STOP,
                               true, true );
 }
 
@@ -109,7 +109,7 @@ void SvxXMLTabStopExport::Export( const uno::Any& rAny )
     }
     else
     {
-        SvXMLElementExport rElem( rExport, XML_NAMESPACE_STYLE, XML_TAB_STOPS,
+        SvXMLElementExport rElem( rExport, XmlNamespace::STYLE, XML_TAB_STOPS,
                                   true, true );
 
         for( const auto& rTab : std::as_const(aSeq) )
diff --git a/xmloff/source/style/xmltabi.cxx b/xmloff/source/style/xmltabi.cxx
index 856cf08fd1a3..3fe70badab82 100644
--- a/xmloff/source/style/xmltabi.cxx
+++ b/xmloff/source/style/xmltabi.cxx
@@ -46,11 +46,11 @@ enum SvXMLTokenMapAttrs
 
 const SvXMLTokenMapEntry aTabsAttributesAttrTokenMap[] =
 {
-    { XML_NAMESPACE_STYLE, XML_POSITION,     XML_TOK_TABSTOP_POSITION },
-    { XML_NAMESPACE_STYLE, XML_TYPE,         XML_TOK_TABSTOP_TYPE },
-    { XML_NAMESPACE_STYLE, XML_CHAR,         XML_TOK_TABSTOP_CHAR },
-    { XML_NAMESPACE_STYLE, XML_LEADER_TEXT,  XML_TOK_TABSTOP_LEADER_TEXT },
-    { XML_NAMESPACE_STYLE, XML_LEADER_STYLE,  XML_TOK_TABSTOP_LEADER_STYLE },
+    { XmlNamespace::STYLE, XML_POSITION,     XML_TOK_TABSTOP_POSITION },
+    { XmlNamespace::STYLE, XML_TYPE,         XML_TOK_TABSTOP_TYPE },
+    { XmlNamespace::STYLE, XML_CHAR,         XML_TOK_TABSTOP_CHAR },
+    { XmlNamespace::STYLE, XML_LEADER_TEXT,  XML_TOK_TABSTOP_LEADER_TEXT },
+    { XmlNamespace::STYLE, XML_LEADER_STYLE,  XML_TOK_TABSTOP_LEADER_STYLE },
     XML_TOKEN_MAP_END
 };
 
@@ -166,7 +166,7 @@ SvXMLImportContextRef SvxXMLTabStopImportContext::CreateChildContext(
 {
     SvXMLImportContext *pContext = nullptr;
 
-    if( XML_NAMESPACE_STYLE == nPrefix && IsXMLToken( rLocalName, XML_TAB_STOP ) )
+    if( XmlNamespace::STYLE == nPrefix && IsXMLToken( rLocalName, XML_TAB_STOP ) )
     {
         // create new tabstop import context
         const rtl::Reference<SvxXMLTabStopContext_Impl> xTabStopContext{
diff --git a/xmloff/source/table/XMLTableExport.cxx b/xmloff/source/table/XMLTableExport.cxx
index 582e77524505..35b5a693cd22 100644
--- a/xmloff/source/table/XMLTableExport.cxx
+++ b/xmloff/source/table/XMLTableExport.cxx
@@ -67,8 +67,8 @@ const XMLPropertyMapEntry* getColumnPropertiesMap()
 {
     static const XMLPropertyMapEntry aXMLColumnProperties[] =
     {
-        CMAP( "Width",          XML_NAMESPACE_STYLE,    XML_COLUMN_WIDTH,               XML_TYPE_MEASURE,   0 ),
-        CMAP( "OptimalWidth",   XML_NAMESPACE_STYLE,    XML_USE_OPTIMAL_COLUMN_WIDTH,   XML_TYPE_BOOL, 0 ),
+        CMAP( "Width",          XmlNamespace::STYLE,    XML_COLUMN_WIDTH,               XML_TYPE_MEASURE,   0 ),
+        CMAP( "OptimalWidth",   XmlNamespace::STYLE,    XML_USE_OPTIMAL_COLUMN_WIDTH,   XML_TYPE_BOOL, 0 ),
         MAP_END
     };
 
@@ -79,9 +79,9 @@ const XMLPropertyMapEntry* getRowPropertiesMap()
 {
     static const XMLPropertyMapEntry aXMLRowProperties[] =
     {
-        RMAP( "Height",         XML_NAMESPACE_STYLE, XML_ROW_HEIGHT,                    XML_TYPE_MEASURE,   0 ),
-        RMAP( "MinHeight",      XML_NAMESPACE_STYLE, XML_MIN_ROW_HEIGHT,                XML_TYPE_MEASURE,   0 ),
-        RMAP( "OptimalHeight",  XML_NAMESPACE_STYLE, XML_USE_OPTIMAL_ROW_HEIGHT,        XML_TYPE_BOOL, 0 ),
+        RMAP( "Height",         XmlNamespace::STYLE, XML_ROW_HEIGHT,                    XML_TYPE_MEASURE,   0 ),
+        RMAP( "MinHeight",      XmlNamespace::STYLE, XML_MIN_ROW_HEIGHT,                XML_TYPE_MEASURE,   0 ),
+        RMAP( "OptimalHeight",  XmlNamespace::STYLE, XML_USE_OPTIMAL_ROW_HEIGHT,        XML_TYPE_BOOL, 0 ),
         MAP_END
     };
 
@@ -92,7 +92,7 @@ const XMLPropertyMapEntry* getCellPropertiesMap()
 {
     static const XMLPropertyMapEntry aXMLCellProperties[] =
     {
-        CELLMAP( "RotateAngle",     XML_NAMESPACE_STYLE, XML_ROTATION_ANGLE,         XML_SD_TYPE_CELL_ROTATION_ANGLE,   0),
+        CELLMAP( "RotateAngle",     XmlNamespace::STYLE, XML_ROTATION_ANGLE,         XML_SD_TYPE_CELL_ROTATION_ANGLE,   0),
         MAP_END
     };
 
@@ -341,7 +341,7 @@ static bool has_states( const std::vector< XMLPropertyState >& xPropStates )
         const sal_Int32 rowCount = xIndexAccess->getCount();
         const sal_Int32 columnCount = xIndexAccessCols->getCount();
 
-        SvXMLElementExport tableElement( mrExport, XML_NAMESPACE_TABLE, XML_TABLE, true, true );
+        SvXMLElementExport tableElement( mrExport, XmlNamespace::TABLE, XML_TABLE, true, true );
 
         // export table columns
         ExportTableColumns( xIndexAccessCols, xTableInfo );
@@ -360,15 +360,15 @@ static bool has_states( const std::vector< XMLPropertyState >& xPropStates )
                 Reference< XInterface > xKey( xCellRange, UNO_QUERY );
                 const OUString sStyleName( xTableInfo->maRowStyleMap[xKey] );
                 if( !sStyleName.isEmpty() )
-                    mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_STYLE_NAME, sStyleName );
+                    mrExport.AddAttribute(XmlNamespace::TABLE, XML_STYLE_NAME, sStyleName );
 
                 sDefaultCellStyle = xTableInfo->maDefaultRowCellStyles[rowIndex];
                 if( !sDefaultCellStyle.isEmpty() )
-                    mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_DEFAULT_CELL_STYLE_NAME, sDefaultCellStyle );
+                    mrExport.AddAttribute(XmlNamespace::TABLE, XML_DEFAULT_CELL_STYLE_NAME, sDefaultCellStyle );
             }
 
             // write row element
-            SvXMLElementExport tableRowElement( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_ROW, true, true );
+            SvXMLElementExport tableRowElement( mrExport, XmlNamespace::TABLE, XML_TABLE_ROW, true, true );
 
             for ( sal_Int32 columnIndex = 0; columnIndex < columnCount; columnIndex++ )
             {
@@ -405,13 +405,13 @@ static bool has_states( const std::vector< XMLPropertyState >& xPropStates )
                 Reference< XInterface > xKey( xColumnProperties, UNO_QUERY );
                 const OUString sStyleName( rTableInfo->maColumnStyleMap[xKey] );
                 if( !sStyleName.isEmpty() )
-                    mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_STYLE_NAME, sStyleName );
+                    mrExport.AddAttribute(XmlNamespace::TABLE, XML_STYLE_NAME, sStyleName );
             }
 
             // TODO: all columns first have to be checked if someone
             // have identical properties. If yes, attr table:number-columns-repeated
             // has to be written.
-            SvXMLElementExport tableColumnElement( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_COLUMN, true, true );
+            SvXMLElementExport tableColumnElement( mrExport, XmlNamespace::TABLE, XML_TABLE_COLUMN, true, true );
          }
      }
  }
@@ -432,7 +432,7 @@ static bool has_states( const std::vector< XMLPropertyState >& xPropStates )
             Reference< XInterface > xKey( xCell, UNO_QUERY );
             const OUString sStyleName( rTableInfo->maCellStyleMap[xKey] );
             if( !sStyleName.isEmpty() && (sStyleName != rDefaultCellStyle) )
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_STYLE_NAME, sStyleName );
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_STYLE_NAME, sStyleName );
         }
 
         Reference< XMergeableCell > xMerge( xCell, UNO_QUERY );
@@ -454,14 +454,14 @@ static bool has_states( const std::vector< XMLPropertyState >& xPropStates )
 
     // table:number-columns-spanned
     if( nColSpan > 1 )
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_COLUMNS_SPANNED, OUString::number( nColSpan ) );
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_NUMBER_COLUMNS_SPANNED, OUString::number( nColSpan ) );
 
     // table:number-rows-spanned
     if( nRowSpan > 1 )
-        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NUMBER_ROWS_SPANNED, OUString::number( nRowSpan ) );
+        mrExport.AddAttribute(XmlNamespace::TABLE, XML_NUMBER_ROWS_SPANNED, OUString::number( nRowSpan ) );
 
      // <table:table-cell> or <table:covered-table-cell>
-    SvXMLElementExport tableCellElement( mrExport, XML_NAMESPACE_TABLE, bIsMerged ? XML_COVERED_TABLE_CELL : XML_TABLE_CELL, true, true );
+    SvXMLElementExport tableCellElement( mrExport, XmlNamespace::TABLE, bIsMerged ? XML_COVERED_TABLE_CELL : XML_TABLE_CELL, true, true );
 
     // export cells text content
     ImpExportText( xCell );
@@ -592,7 +592,7 @@ void XMLTableExport::exportTableTemplates()
             const TableStyleElement* pElements;
             if (mbWriter)
             {
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, xTableStyle->getName());
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, xTableStyle->getName());
                 Reference<XPropertySet> xTableStylePropSet(xTableStyle, UNO_QUERY_THROW);
                 pElements = getWriterSpecificTableStyleAttributes();
                 while(pElements->meElement != XML_TOKEN_END)
@@ -601,7 +601,7 @@ void XMLTableExport::exportTableTemplates()
                     {
                         OUString sVal;
                         xTableStylePropSet->getPropertyValue(pElements->msStyleName) >>= sVal;
-                        mrExport.AddAttribute(XML_NAMESPACE_TABLE, pElements->meElement, sVal);
+                        mrExport.AddAttribute(XmlNamespace::TABLE, pElements->meElement, sVal);
                     }
                     catch(const Exception&)
                     {
@@ -618,12 +618,12 @@ void XMLTableExport::exportTableTemplates()
                     // tdf#106780 historically this wrong attribute was used
                     // for the name; write it if extended because LO < 5.3 can
                     // read only text:style-name, not the correct table:name
-                    mrExport.AddAttribute(XML_NAMESPACE_TEXT, XML_STYLE_NAME, GetExport().EncodeStyleName( xTableStyle->getName() ) );
+                    mrExport.AddAttribute(XmlNamespace::TEXT, XML_STYLE_NAME, GetExport().EncodeStyleName( xTableStyle->getName() ) );
                 }
-                mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_NAME, GetExport().EncodeStyleName(xTableStyle->getName()));
+                mrExport.AddAttribute(XmlNamespace::TABLE, XML_NAME, GetExport().EncodeStyleName(xTableStyle->getName()));
             }
 
-            SvXMLElementExport tableTemplate( mrExport, XML_NAMESPACE_TABLE, XML_TABLE_TEMPLATE, true, true );
+            SvXMLElementExport tableTemplate( mrExport, XmlNamespace::TABLE, XML_TABLE_TEMPLATE, true, true );
 
             Reference< XNameAccess > xStyleNames( xTableStyle, UNO_QUERY_THROW );
             pElements = getTableStyleMap();
@@ -634,8 +634,8 @@ void XMLTableExport::exportTableTemplates()
                     Reference< XStyle > xStyle( xStyleNames->getByName( pElements->msStyleName ), UNO_QUERY );
                     if( xStyle.is() )
                     {
-                        mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_STYLE_NAME, GetExport().EncodeStyleName( xStyle->getName() ) );
-                        SvXMLElementExport element( mrExport, XML_NAMESPACE_TABLE, pElements->meElement, true, true );
+                        mrExport.AddAttribute(XmlNamespace::TABLE, XML_STYLE_NAME, GetExport().EncodeStyleName( xStyle->getName() ) );
+                        SvXMLElementExport element( mrExport, XmlNamespace::TABLE, pElements->meElement, true, true );
                     }
                 }
                 catch(const Exception&)
@@ -656,8 +656,8 @@ void XMLTableExport::exportTableTemplates()
                         Reference<XStyle> xStyle(xStyleNames->getByName(pElements->msStyleName), UNO_QUERY);
                         if(xStyle.is())
                         {
-                            mrExport.AddAttribute(XML_NAMESPACE_TABLE, XML_STYLE_NAME, GetExport().EncodeStyleName(xStyle->getName()));
-                            SvXMLElementExport element(mrExport, XML_NAMESPACE_LO_EXT, pElements->meElement, true, true);
+                            mrExport.AddAttribute(XmlNamespace::TABLE, XML_STYLE_NAME, GetExport().EncodeStyleName(xStyle->getName()));
+                            SvXMLElementExport element(mrExport, XmlNamespace::LO_EXT, pElements->meElement, true, true);
                         }
                     }
                     catch(const Exception&)
@@ -699,7 +699,7 @@ void XMLCellStyleExport::exportStyleAttributes(const Reference<XStyle>& rStyle)
         {
             sal_Int32 nNumberFormat = 0;
             if (xPropSet->getPropertyValue(sNumberFormat) >>= nNumberFormat)
-                GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_DATA_STYLE_NAME,
+                GetExport().AddAttribute(XmlNamespace::STYLE, XML_DATA_STYLE_NAME,
                                          GetExport().getDataStyleName(nNumberFormat));
         }
     }
diff --git a/xmloff/source/table/XMLTableImport.cxx b/xmloff/source/table/XMLTableImport.cxx
index 22871a2a24b3..f5d86f97e7e3 100644
--- a/xmloff/source/table/XMLTableImport.cxx
+++ b/xmloff/source/table/XMLTableImport.cxx
@@ -386,7 +386,7 @@ SvXMLImportContextRef XMLTableImportContext::ImportColumn( sal_uInt16 /*nPrefix*
             OUString aLocalName;
 
             sal_uInt16 nPrefix2 = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
-            if( XML_NAMESPACE_TABLE == nPrefix2 )
+            if( XmlNamespace::TABLE == nPrefix2 )
             {
                 if( IsXMLToken( aLocalName, XML_NUMBER_COLUMNS_REPEATED ) )
                 {
@@ -401,7 +401,7 @@ SvXMLImportContextRef XMLTableImportContext::ImportColumn( sal_uInt16 /*nPrefix*
                     xInfo->msDefaultCellStyleName = sValue;
                 }
             }
-            else if ( (XML_NAMESPACE_XML == nPrefix2) &&
+            else if ( (XmlNamespace::XML == nPrefix2) &&
                  IsXMLToken(aLocalName, XML_ID)   )
             {
 //FIXME: TODO
@@ -494,7 +494,7 @@ SvXMLImportContext * XMLTableImportContext::ImportRow( sal_uInt16 nPrefix, const
             OUString aLocalName;
 
             sal_uInt16 nPrefix2 = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
-            if( nPrefix2 == XML_NAMESPACE_TABLE )
+            if( nPrefix2 == XmlNamespace::TABLE )
             {
                 if( IsXMLToken( aLocalName, XML_STYLE_NAME ) )
                 {
@@ -505,7 +505,7 @@ SvXMLImportContext * XMLTableImportContext::ImportRow( sal_uInt16 nPrefix, const
                     msDefaultCellStyleName = sValue;
                 }
             }
-            else if ( (XML_NAMESPACE_XML == nPrefix2) &&
+            else if ( (XmlNamespace::XML == nPrefix2) &&
                  IsXMLToken(aLocalName, XML_ID)   )
             {
                 (void) sValue;
@@ -569,7 +569,7 @@ SvXMLImportContextRef XMLTableImportContext::ImportCell( sal_uInt16 nPrefix, con
 
 SvXMLImportContextRef XMLTableImportContext::CreateChildContext( sal_uInt16 nPrefix, const OUString& rLocalName, const Reference< XAttributeList >& xAttrList )
 {
-    if( nPrefix == XML_NAMESPACE_TABLE )
+    if( nPrefix == XmlNamespace::TABLE )
     {
         if( IsXMLToken( rLocalName, XML_TABLE_COLUMN ) )
             return ImportColumn( nPrefix, rLocalName, xAttrList );
@@ -640,7 +640,7 @@ XMLCellImportContext::XMLCellImportContext( SvXMLImport& rImport, const Referenc
         OUString aLocalName;
 
         sal_uInt16 nPrefix2 = GetImport().GetNamespaceMap().GetKeyByAttrName( sAttrName, &aLocalName );
-        if( XML_NAMESPACE_TABLE == nPrefix2 )
+        if( XmlNamespace::TABLE == nPrefix2 )
         {
             if( IsXMLToken( aLocalName, XML_NUMBER_COLUMNS_REPEATED ) )
             {
@@ -659,7 +659,7 @@ XMLCellImportContext::XMLCellImportContext( SvXMLImport& rImport, const Referenc
                 sStyleName = sValue;
             }
         }
-        else if ( (XML_NAMESPACE_XML == nPrefix2) &&
+        else if ( (XmlNamespace::XML == nPrefix2) &&
              IsXMLToken(aLocalName, XML_ID)   )
         {
 //FIXME: TODO
@@ -754,9 +754,9 @@ void XMLTableTemplateContext::SetAttribute( sal_uInt16 nPrefixKey,
                                const OUString& rLocalName,
                                const OUString& rValue )
 {
-    if( (nPrefixKey == XML_NAMESPACE_TEXT && IsXMLToken( rLocalName, XML_STYLE_NAME ))
+    if( (nPrefixKey == XmlNamespace::TEXT && IsXMLToken( rLocalName, XML_STYLE_NAME ))
         // Writer specific: according to oasis odf 1.2 prefix should be "table" and element name should be "name"
-        || (nPrefixKey == XML_NAMESPACE_TABLE && IsXMLToken( rLocalName, XML_NAME )))
+        || (nPrefixKey == XmlNamespace::TABLE && IsXMLToken( rLocalName, XML_NAME )))
     {
         msTemplateStyleName = rValue;
     }
@@ -778,7 +778,7 @@ void XMLTableTemplateContext::CreateAndInsert(bool bOverwrite)
 
 SvXMLImportContextRef XMLTableTemplateContext::CreateChildContext( sal_uInt16 nPrefix, const OUString& rLocalName, const Reference< XAttributeList >& xAttrList )
 {
-    if( nPrefix == XML_NAMESPACE_TABLE )
+    if( nPrefix == XmlNamespace::TABLE )
     {
         const TableStyleElement* pElements = getTableStyleMap();
         while( (pElements->meElement != XML_TOKEN_END) && !IsXMLToken( rLocalName, pElements->meElement ) )
@@ -791,7 +791,7 @@ SvXMLImportContextRef XMLTableTemplateContext::CreateChildContext( sal_uInt16 nP
             {
                 OUString sAttrName;
                 sal_uInt16 nAttrPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( xAttrList->getNameByIndex( i ), &sAttrName );
-                if( (nAttrPrefix == XML_NAMESPACE_TEXT || nAttrPrefix == XML_NAMESPACE_TABLE) &&
+                if( (nAttrPrefix == XmlNamespace::TEXT || nAttrPrefix == XmlNamespace::TABLE) &&
                     IsXMLToken( sAttrName, XML_STYLE_NAME ) )
                 {
                     maTableTemplate[pElements->msStyleName] = xAttrList->getValueByIndex( i );
@@ -799,7 +799,7 @@ SvXMLImportContextRef XMLTableTemplateContext::CreateChildContext( sal_uInt16 nP
                 }
             }
         }
-    } else if (nPrefix == XML_NAMESPACE_LO_EXT) // Writer specific cell styles
+    } else if (nPrefix == XmlNamespace::LO_EXT) // Writer specific cell styles
     {
         const TableStyleElement* pElements = getWriterSpecificTableStyleMap();
         while ((pElements->meElement != XML_TOKEN_END) && !IsXMLToken(rLocalName, pElements->meElement ))
@@ -812,7 +812,7 @@ SvXMLImportContextRef XMLTableTemplateContext::CreateChildContext( sal_uInt16 nP
             {
                 OUString sAttrName;
                 sal_uInt16 nAttrPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName(xAttrList->getNameByIndex( i ), &sAttrName);
-                if( (nAttrPrefix == XML_NAMESPACE_TEXT || nAttrPrefix == XML_NAMESPACE_TABLE) &&
+                if( (nAttrPrefix == XmlNamespace::TEXT || nAttrPrefix == XmlNamespace::TABLE) &&
                     IsXMLToken( sAttrName, XML_STYLE_NAME ) )
                 {
                     maTableTemplate[pElements->msStyleName] = xAttrList->getValueByIndex(i);
diff --git a/xmloff/source/text/XMLAutoMarkFileContext.cxx b/xmloff/source/text/XMLAutoMarkFileContext.cxx
index 870e4dddc7ad..a5ad46620432 100644
--- a/xmloff/source/text/XMLAutoMarkFileContext.cxx
+++ b/xmloff/source/text/XMLAutoMarkFileContext.cxx
@@ -65,7 +65,7 @@ void XMLAutoMarkFileContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(i), &sLocalName );
 
-        if ( ( XML_NAMESPACE_XLINK == nPrefix ) &&
+        if ( ( XmlNamespace::XLINK == nPrefix ) &&
              IsXMLToken(sLocalName, XML_HREF) )
         {
             Any aAny;
diff --git a/xmloff/source/text/XMLAutoTextContainerEventImport.cxx b/xmloff/source/text/XMLAutoTextContainerEventImport.cxx
index 657a7bdbe158..4402c6a75348 100644
--- a/xmloff/source/text/XMLAutoTextContainerEventImport.cxx
+++ b/xmloff/source/text/XMLAutoTextContainerEventImport.cxx
@@ -53,7 +53,7 @@ SvXMLImportContextRef XMLAutoTextContainerEventImport::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & )
 {
-    if ( (XML_NAMESPACE_OFFICE == nPrefix) &&
+    if ( (XmlNamespace::OFFICE == nPrefix) &&
          IsXMLToken( rLocalName, XML_EVENT_LISTENERS)   )
     {
         return new XMLEventsImportContext(GetImport(), nPrefix, rLocalName,
diff --git a/xmloff/source/text/XMLAutoTextEventExport.cxx b/xmloff/source/text/XMLAutoTextEventExport.cxx
index 9146131eca9e..83932752e384 100644
--- a/xmloff/source/text/XMLAutoTextEventExport.cxx
+++ b/xmloff/source/text/XMLAutoTextEventExport.cxx
@@ -134,7 +134,7 @@ ErrCode XMLAutoTextEventExport::exportDoc( enum XMLTokenEnum )
         {
             // container element
             SvXMLElementExport aContainerElement(
-                *this, XML_NAMESPACE_OOO, XML_AUTO_TEXT_EVENTS,
+                *this, XmlNamespace::OOO, XML_AUTO_TEXT_EVENTS,
                 true, true);
 
             exportEvents();
@@ -157,23 +157,23 @@ void XMLAutoTextEventExport::addNamespaces()
 {
     // namespaces for office:, text: and script:
     GetAttrList().AddAttribute(
-        GetNamespaceMap().GetAttrNameByIndex( XML_NAMESPACE_OFFICE ),
-        GetNamespaceMap().GetNameByIndex( XML_NAMESPACE_OFFICE ) );
+        GetNamespaceMap().GetAttrNameByIndex( XmlNamespace::OFFICE ),
+        GetNamespaceMap().GetNameByIndex( XmlNamespace::OFFICE ) );
     GetAttrList().AddAttribute(
-        GetNamespaceMap().GetAttrNameByIndex( XML_NAMESPACE_TEXT ),
-        GetNamespaceMap().GetNameByIndex( XML_NAMESPACE_TEXT ) );
+        GetNamespaceMap().GetAttrNameByIndex( XmlNamespace::TEXT ),
+        GetNamespaceMap().GetNameByIndex( XmlNamespace::TEXT ) );
     GetAttrList().AddAttribute(
-        GetNamespaceMap().GetAttrNameByIndex( XML_NAMESPACE_SCRIPT ),
-        GetNamespaceMap().GetNameByIndex( XML_NAMESPACE_SCRIPT ) );
+        GetNamespaceMap().GetAttrNameByIndex( XmlNamespace::SCRIPT ),
+        GetNamespaceMap().GetNameByIndex( XmlNamespace::SCRIPT ) );
     GetAttrList().AddAttribute(
-        GetNamespaceMap().GetAttrNameByIndex( XML_NAMESPACE_DOM ),
-        GetNamespaceMap().GetNameByIndex( XML_NAMESPACE_DOM ) );
+        GetNamespaceMap().GetAttrNameByIndex( XmlNamespace::DOM ),
+        GetNamespaceMap().GetNameByIndex( XmlNamespace::DOM ) );
     GetAttrList().AddAttribute(
-        GetNamespaceMap().GetAttrNameByIndex( XML_NAMESPACE_OOO ),
-        GetNamespaceMap().GetNameByIndex( XML_NAMESPACE_OOO ) );
+        GetNamespaceMap().GetAttrNameByIndex( XmlNamespace::OOO ),
+        GetNamespaceMap().GetNameByIndex( XmlNamespace::OOO ) );
     GetAttrList().AddAttribute(
-        GetNamespaceMap().GetAttrNameByIndex( XML_NAMESPACE_XLINK ),
-        GetNamespaceMap().GetNameByIndex( XML_NAMESPACE_XLINK ) );
+        GetNamespaceMap().GetAttrNameByIndex( XmlNamespace::XLINK ),
+        GetNamespaceMap().GetNameByIndex( XmlNamespace::XLINK ) );
 }
 
 void XMLAutoTextEventExport::exportEvents()
diff --git a/xmloff/source/text/XMLCalculationSettingsContext.cxx b/xmloff/source/text/XMLCalculationSettingsContext.cxx
index e7f0be4edd54..3cf55fe82bee 100644
--- a/xmloff/source/text/XMLCalculationSettingsContext.cxx
+++ b/xmloff/source/text/XMLCalculationSettingsContext.cxx
@@ -52,7 +52,7 @@ XMLCalculationSettingsContext::XMLCalculationSettingsContext( SvXMLImport& rImpo
                                             sAttrName, &aLocalName );
         OUString sValue = xAttrList->getValueByIndex( i );
 
-        if (nPrefix == XML_NAMESPACE_TABLE)
+        if (nPrefix == XmlNamespace::TABLE)
         {
             if ( IsXMLToken( aLocalName, XML_NULL_YEAR ) )
             {
diff --git a/xmloff/source/text/XMLChangeElementImportContext.cxx b/xmloff/source/text/XMLChangeElementImportContext.cxx
index feb508c575fa..8b365fb47f0d 100644
--- a/xmloff/source/text/XMLChangeElementImportContext.cxx
+++ b/xmloff/source/text/XMLChangeElementImportContext.cxx
@@ -51,7 +51,7 @@ SvXMLImportContextRef XMLChangeElementImportContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if ( (XML_NAMESPACE_OFFICE == nPrefix) &&
+    if ( (XmlNamespace::OFFICE == nPrefix) &&
          IsXMLToken( rLocalName, XML_CHANGE_INFO) )
     {
         xContext = new XMLChangeInfoContext(GetImport(), nPrefix, rLocalName,
diff --git a/xmloff/source/text/XMLChangeImportContext.cxx b/xmloff/source/text/XMLChangeImportContext.cxx
index aabfe8b3cf56..eb172ef81cb9 100644
--- a/xmloff/source/text/XMLChangeImportContext.cxx
+++ b/xmloff/source/text/XMLChangeImportContext.cxx
@@ -55,7 +55,7 @@ void XMLChangeImportContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+        if ( (XmlNamespace::TEXT == nPrefix) &&
              IsXMLToken( sLocalName, XML_CHANGE_ID ) )
         {
             // Id found! Now call RedlineImportHelper
diff --git a/xmloff/source/text/XMLChangeInfoContext.cxx b/xmloff/source/text/XMLChangeInfoContext.cxx
index 326ce43b032a..d7b70d1ce0ec 100644
--- a/xmloff/source/text/XMLChangeInfoContext.cxx
+++ b/xmloff/source/text/XMLChangeInfoContext.cxx
@@ -60,7 +60,7 @@ SvXMLImportContextRef XMLChangeInfoContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_DC == nPrefix )
+    if( XmlNamespace::DC == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_CREATOR ) )
             xContext = new XMLStringBufferImportContext(GetImport(), nPrefix,
@@ -69,8 +69,8 @@ SvXMLImportContextRef XMLChangeInfoContext::CreateChildContext(
             xContext = new XMLStringBufferImportContext(GetImport(), nPrefix,
                                             rLocalName, sDateTimeBuffer);
     }
-    else if ( ( XML_NAMESPACE_TEXT == nPrefix ||
-                XML_NAMESPACE_LO_EXT == nPrefix ) &&
+    else if ( ( XmlNamespace::TEXT == nPrefix ||
+                XmlNamespace::LO_EXT == nPrefix ) &&
          IsXMLToken( rLocalName, XML_P )       )
     {
         xContext = new XMLStringBufferImportContext(GetImport(), nPrefix,
diff --git a/xmloff/source/text/XMLChangedRegionImportContext.cxx b/xmloff/source/text/XMLChangedRegionImportContext.cxx
index 2d2050976b69..2a3a22a545ff 100644
--- a/xmloff/source/text/XMLChangedRegionImportContext.cxx
+++ b/xmloff/source/text/XMLChangedRegionImportContext.cxx
@@ -66,7 +66,7 @@ void XMLChangedRegionImportContext::StartElement(
                               &sLocalName );
 
         const OUString sValue = xAttrList->getValueByIndex(nAttr);
-        if (XML_NAMESPACE_XML == nPrefix)
+        if (XmlNamespace::XML == nPrefix)
         {
             if (IsXMLToken(sLocalName, XML_ID))
             {
@@ -74,7 +74,7 @@ void XMLChangedRegionImportContext::StartElement(
                 bHaveXmlId = true;
             }
         }
-        else if (XML_NAMESPACE_TEXT == nPrefix)
+        else if (XmlNamespace::TEXT == nPrefix)
         {
             if (IsXMLToken(sLocalName, XML_ID))
             {
@@ -99,7 +99,7 @@ SvXMLImportContextRef XMLChangedRegionImportContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if (XML_NAMESPACE_TEXT == nPrefix)
+    if (XmlNamespace::TEXT == nPrefix)
     {
         // from the ODF 1.2 standard :
         // The <text:changed-region> element has the following child elements:
diff --git a/xmloff/source/text/XMLFootnoteConfigurationImportContext.cxx b/xmloff/source/text/XMLFootnoteConfigurationImportContext.cxx
index 7245750f9edd..243167cb23de 100644
--- a/xmloff/source/text/XMLFootnoteConfigurationImportContext.cxx
+++ b/xmloff/source/text/XMLFootnoteConfigurationImportContext.cxx
@@ -144,7 +144,7 @@ XMLFootnoteConfigurationImportContext::XMLFootnoteConfigurationImportContext(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if( XML_NAMESPACE_TEXT == nPrefix && IsXMLToken( sLocalName,
+        if( XmlNamespace::TEXT == nPrefix && IsXMLToken( sLocalName,
                                                         XML_NOTE_CLASS ) )
         {
             const OUString& rValue = xAttrList->getValueByIndex( nAttr );
@@ -183,22 +183,22 @@ enum XMLFtnConfigToken
 
 const SvXMLTokenMapEntry aTextFieldAttrTokenMap[] =
 {
-    { XML_NAMESPACE_TEXT, XML_CITATION_STYLE_NAME,      XML_TOK_FTNCONFIG_CITATION_STYLENAME },
-    { XML_NAMESPACE_TEXT, XML_CITATION_BODY_STYLE_NAME, XML_TOK_FTNCONFIG_ANCHOR_STYLENAME },
-    { XML_NAMESPACE_TEXT, XML_DEFAULT_STYLE_NAME,       XML_TOK_FTNCONFIG_DEFAULT_STYLENAME },
-    { XML_NAMESPACE_TEXT, XML_MASTER_PAGE_NAME,         XML_TOK_FTNCONFIG_PAGE_STYLENAME },
-    { XML_NAMESPACE_TEXT, XML_START_VALUE, XML_TOK_FTNCONFIG_OFFSET },
-    { XML_NAMESPACE_STYLE, XML_NUM_PREFIX, XML_TOK_FTNCONFIG_NUM_PREFIX },
-    { XML_NAMESPACE_STYLE, XML_NUM_SUFFIX, XML_TOK_FTNCONFIG_NUM_SUFFIX },
-    { XML_NAMESPACE_STYLE, XML_NUM_FORMAT, XML_TOK_FTNCONFIG_NUM_FORMAT },
-    { XML_NAMESPACE_STYLE, XML_NUM_LETTER_SYNC, XML_TOK_FTNCONFIG_NUM_SYNC },
-    { XML_NAMESPACE_TEXT, XML_START_NUMBERING_AT, XML_TOK_FTNCONFIG_START_AT},
-    { XML_NAMESPACE_TEXT, XML_FOOTNOTES_POSITION, XML_TOK_FTNCONFIG_POSITION},
+    { XmlNamespace::TEXT, XML_CITATION_STYLE_NAME,      XML_TOK_FTNCONFIG_CITATION_STYLENAME },
+    { XmlNamespace::TEXT, XML_CITATION_BODY_STYLE_NAME, XML_TOK_FTNCONFIG_ANCHOR_STYLENAME },
+    { XmlNamespace::TEXT, XML_DEFAULT_STYLE_NAME,       XML_TOK_FTNCONFIG_DEFAULT_STYLENAME },
+    { XmlNamespace::TEXT, XML_MASTER_PAGE_NAME,         XML_TOK_FTNCONFIG_PAGE_STYLENAME },
+    { XmlNamespace::TEXT, XML_START_VALUE, XML_TOK_FTNCONFIG_OFFSET },
+    { XmlNamespace::STYLE, XML_NUM_PREFIX, XML_TOK_FTNCONFIG_NUM_PREFIX },
+    { XmlNamespace::STYLE, XML_NUM_SUFFIX, XML_TOK_FTNCONFIG_NUM_SUFFIX },
+    { XmlNamespace::STYLE, XML_NUM_FORMAT, XML_TOK_FTNCONFIG_NUM_FORMAT },
+    { XmlNamespace::STYLE, XML_NUM_LETTER_SYNC, XML_TOK_FTNCONFIG_NUM_SYNC },
+    { XmlNamespace::TEXT, XML_START_NUMBERING_AT, XML_TOK_FTNCONFIG_START_AT},
+    { XmlNamespace::TEXT, XML_FOOTNOTES_POSITION, XML_TOK_FTNCONFIG_POSITION},
 
     // for backwards compatibility with SRC630 & earlier
-    { XML_NAMESPACE_TEXT, XML_NUM_PREFIX, XML_TOK_FTNCONFIG_NUM_PREFIX },
-    { XML_NAMESPACE_TEXT, XML_NUM_SUFFIX, XML_TOK_FTNCONFIG_NUM_SUFFIX },
-    { XML_NAMESPACE_TEXT, XML_OFFSET, XML_TOK_FTNCONFIG_OFFSET },
+    { XmlNamespace::TEXT, XML_NUM_PREFIX, XML_TOK_FTNCONFIG_NUM_PREFIX },
+    { XmlNamespace::TEXT, XML_NUM_SUFFIX, XML_TOK_FTNCONFIG_NUM_SUFFIX },
+    { XmlNamespace::TEXT, XML_OFFSET, XML_TOK_FTNCONFIG_OFFSET },
     XML_TOKEN_MAP_END
 };
 
@@ -283,7 +283,7 @@ SvXMLImportContextRef XMLFootnoteConfigurationImportContext::CreateChildContext(
 
     if (!bIsEndnote)
     {
-        if (XML_NAMESPACE_TEXT == nPrefix)
+        if (XmlNamespace::TEXT == nPrefix)
         {
             if ( IsXMLToken( rLocalName,
                              XML_FOOTNOTE_CONTINUATION_NOTICE_FORWARD ) )
diff --git a/xmloff/source/text/XMLFootnoteImportContext.cxx b/xmloff/source/text/XMLFootnoteImportContext.cxx
index 8cc12041ca6c..e6126b308f8b 100644
--- a/xmloff/source/text/XMLFootnoteImportContext.cxx
+++ b/xmloff/source/text/XMLFootnoteImportContext.cxx
@@ -54,9 +54,9 @@ enum XMLFootnoteChildToken {
 
 const SvXMLTokenMapEntry aFootnoteChildTokenMap[] =
 {
-    { XML_NAMESPACE_TEXT, XML_NOTE_CITATION,
+    { XmlNamespace::TEXT, XML_NOTE_CITATION,
       XML_TOK_FTN_NOTE_CITATION },
-    { XML_NAMESPACE_TEXT, XML_NOTE_BODY, XML_TOK_FTN_NOTE_BODY },
+    { XmlNamespace::TEXT, XML_NOTE_BODY, XML_TOK_FTN_NOTE_BODY },
     XML_TOKEN_MAP_END
 };
 
@@ -90,7 +90,7 @@ void XMLFootnoteImportContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr1),
                               &sLocalName );
-        if( XML_NAMESPACE_TEXT == nPrefix && IsXMLToken( sLocalName,
+        if( XmlNamespace::TEXT == nPrefix && IsXMLToken( sLocalName,
                                                         XML_NOTE_CLASS ) )
         {
             const OUString& rValue = xAttrList->getValueByIndex( nAttr1 );
@@ -117,7 +117,7 @@ void XMLFootnoteImportContext::StartElement(
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr2),
                               &sLocalName );
 
-        if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+        if ( (XmlNamespace::TEXT == nPrefix) &&
              IsXMLToken( sLocalName, XML_ID )   )
         {
             // get ID ...
@@ -194,7 +194,7 @@ SvXMLImportContextRef XMLFootnoteImportContext::CreateChildContext(
                     GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                                       &sLocalName );
 
-                if ( (nPrefix == XML_NAMESPACE_TEXT) &&
+                if ( (nPrefix == XmlNamespace::TEXT) &&
                      IsXMLToken( sLocalName, XML_LABEL ) )
                 {
                     xFootnote->setLabel(xAttrList->getValueByIndex(nAttr));
diff --git a/xmloff/source/text/XMLIndexAlphabeticalSourceContext.cxx b/xmloff/source/text/XMLIndexAlphabeticalSourceContext.cxx
index be28561eaf63..4698536cb181 100644
--- a/xmloff/source/text/XMLIndexAlphabeticalSourceContext.cxx
+++ b/xmloff/source/text/XMLIndexAlphabeticalSourceContext.cxx
@@ -202,7 +202,7 @@ SvXMLImportContextRef XMLIndexAlphabeticalSourceContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & xAttrList )
 {
-    if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+    if ( (XmlNamespace::TEXT == nPrefix) &&
          IsXMLToken( rLocalName, XML_ALPHABETICAL_INDEX_ENTRY_TEMPLATE ) )
     {
         return new XMLIndexTemplateContext(GetImport(), rIndexPropertySet,
diff --git a/xmloff/source/text/XMLIndexBibliographyConfigurationContext.cxx b/xmloff/source/text/XMLIndexBibliographyConfigurationContext.cxx
index 24d1912b8939..1837ada7efeb 100644
--- a/xmloff/source/text/XMLIndexBibliographyConfigurationContext.cxx
+++ b/xmloff/source/text/XMLIndexBibliographyConfigurationContext.cxx
@@ -78,7 +78,7 @@ void XMLIndexBibliographyConfigurationContext::SetAttribute(
     const OUString& sLocalName,
     const OUString& sValue)
 {
-    if( XML_NAMESPACE_TEXT == nPrefix )
+    if( XmlNamespace::TEXT == nPrefix )
     {
         if( IsXMLToken(sLocalName, XML_PREFIX) )
         {
@@ -109,7 +109,7 @@ void XMLIndexBibliographyConfigurationContext::SetAttribute(
             sAlgorithm = sValue;
         }
     }
-    else if( XML_NAMESPACE_FO == nPrefix )
+    else if( XmlNamespace::FO == nPrefix )
     {
         if( IsXMLToken(sLocalName, XML_LANGUAGE) )
         {
@@ -124,7 +124,7 @@ void XMLIndexBibliographyConfigurationContext::SetAttribute(
             maLanguageTagODF.maCountry = sValue;
         }
     }
-    else if( XML_NAMESPACE_STYLE == nPrefix )
+    else if( XmlNamespace::STYLE == nPrefix )
     {
         if( IsXMLToken(sLocalName, XML_RFC_LANGUAGE_TAG) )
         {
@@ -139,7 +139,7 @@ SvXMLImportContextRef XMLIndexBibliographyConfigurationContext::CreateChildConte
     const Reference<XAttributeList> & xAttrList )
 {
     // process children here and use default context!
-    if ( ( nPrefix == XML_NAMESPACE_TEXT ) &&
+    if ( ( nPrefix == XmlNamespace::TEXT ) &&
          IsXMLToken( rLocalName, XML_SORT_KEY ) )
     {
         OUString sKey;
@@ -153,7 +153,7 @@ SvXMLImportContextRef XMLIndexBibliographyConfigurationContext::CreateChildConte
                 GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                                   &sLocalName );
 
-            if (nPrfx == XML_NAMESPACE_TEXT)
+            if (nPrfx == XmlNamespace::TEXT)
             {
                 if ( IsXMLToken( sLocalName, XML_KEY ) )
                 {
diff --git a/xmloff/source/text/XMLIndexBibliographyEntryContext.cxx b/xmloff/source/text/XMLIndexBibliographyEntryContext.cxx
index bb52fc0ad317..4aa8310c84ad 100644
--- a/xmloff/source/text/XMLIndexBibliographyEntryContext.cxx
+++ b/xmloff/source/text/XMLIndexBibliographyEntryContext.cxx
@@ -105,7 +105,7 @@ void XMLIndexBibliographyEntryContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if (XML_NAMESPACE_TEXT == nPrefix)
+        if (XmlNamespace::TEXT == nPrefix)
         {
             if ( IsXMLToken( sLocalName, XML_STYLE_NAME ) )
             {
diff --git a/xmloff/source/text/XMLIndexBibliographySourceContext.cxx b/xmloff/source/text/XMLIndexBibliographySourceContext.cxx
index 7a2fac4ae74c..be4e12a64459 100644
--- a/xmloff/source/text/XMLIndexBibliographySourceContext.cxx
+++ b/xmloff/source/text/XMLIndexBibliographySourceContext.cxx
@@ -68,7 +68,7 @@ SvXMLImportContextRef XMLIndexBibliographySourceContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & xAttrList )
 {
-    if ( ( XML_NAMESPACE_TEXT == nPrefix ) &&
+    if ( ( XmlNamespace::TEXT == nPrefix ) &&
          ( IsXMLToken( rLocalName, XML_BIBLIOGRAPHY_ENTRY_TEMPLATE ) ) )
     {
         return new XMLIndexTemplateContext(GetImport(), rIndexPropertySet,
diff --git a/xmloff/source/text/XMLIndexChapterInfoEntryContext.cxx b/xmloff/source/text/XMLIndexChapterInfoEntryContext.cxx
index ed84b1a346ec..f5a3fd0cee95 100644
--- a/xmloff/source/text/XMLIndexChapterInfoEntryContext.cxx
+++ b/xmloff/source/text/XMLIndexChapterInfoEntryContext.cxx
@@ -87,7 +87,7 @@ void XMLIndexChapterInfoEntryContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if (XML_NAMESPACE_TEXT == nPrefix)
+        if (XmlNamespace::TEXT == nPrefix)
         {
             if ( IsXMLToken( sLocalName, XML_STYLE_NAME ) )
             {
diff --git a/xmloff/source/text/XMLIndexIllustrationSourceContext.cxx b/xmloff/source/text/XMLIndexIllustrationSourceContext.cxx
index ca522f8bc451..fd3a004ddfd8 100644
--- a/xmloff/source/text/XMLIndexIllustrationSourceContext.cxx
+++ b/xmloff/source/text/XMLIndexIllustrationSourceContext.cxx
@@ -53,7 +53,7 @@ SvXMLImportContextRef XMLIndexIllustrationSourceContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & xAttrList )
 {
-    if ( ( XML_NAMESPACE_TEXT == nPrefix ) &&
+    if ( ( XmlNamespace::TEXT == nPrefix ) &&
          ( IsXMLToken( rLocalName, XML_ILLUSTRATION_INDEX_ENTRY_TEMPLATE ) ) )
     {
         return new XMLIndexTemplateContext(GetImport(), rIndexPropertySet,
diff --git a/xmloff/source/text/XMLIndexMarkExport.cxx b/xmloff/source/text/XMLIndexMarkExport.cxx
index c52235cf6baa..238f87072510 100644
--- a/xmloff/source/text/XMLIndexMarkExport.cxx
+++ b/xmloff/source/text/XMLIndexMarkExport.cxx
@@ -89,7 +89,7 @@ void XMLIndexMarkExport::ExportIndexMark(
         aAny >>= sTmp;
         DBG_ASSERT(!sTmp.isEmpty(),
                    "collapsed index mark without alternative text");
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_STRING_VALUE, sTmp);
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_STRING_VALUE, sTmp);
     }
     else
     {
@@ -100,7 +100,7 @@ void XMLIndexMarkExport::ExportIndexMark(
         // generate ID
         OUStringBuffer sBuf;
         GetID(sBuf, xIndexMarkPropSet);
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_ID,
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_ID,
                              sBuf.makeStringAndClear());
     }
 
@@ -146,7 +146,7 @@ void XMLIndexMarkExport::ExportIndexMark(
     if ((pElements != nullptr) && (nElementNo != -1))
     {
         SvXMLElementExport aElem(rExport,
-                                 XML_NAMESPACE_TEXT,
+                                 XmlNamespace::TEXT,
                                  pElements[nElementNo],
                                  false, false);
     }
@@ -160,7 +160,7 @@ void XMLIndexMarkExport::ExportTOCMarkAttributes(
     sal_Int16 nLevel = 0;
     Any aAny = rPropSet->getPropertyValue(gsLevel);
     aAny >>= nLevel;
-    rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_OUTLINE_LEVEL,
+    rExport.AddAttribute(XmlNamespace::TEXT, XML_OUTLINE_LEVEL,
                              OUString::number(nLevel + 1));
 }
 
@@ -175,7 +175,7 @@ static void lcl_ExportPropertyString( SvXMLExport& rExport,
     OUString sValue;
     if( (rAny >>= sValue) && !sValue.isEmpty() )
     {
-        rExport.AddAttribute( XML_NAMESPACE_TEXT, eToken, sValue );
+        rExport.AddAttribute( XmlNamespace::TEXT, eToken, sValue );
     }
 }
 
@@ -190,7 +190,7 @@ static void lcl_ExportPropertyBool( SvXMLExport& rExport,
     bool bValue;
     if( (rAny >>= bValue) && bValue )
     {
-        rExport.AddAttribute( XML_NAMESPACE_TEXT, eToken, XML_TRUE );
+        rExport.AddAttribute( XmlNamespace::TEXT, eToken, XML_TRUE );
     }
 }
 
diff --git a/xmloff/source/text/XMLIndexObjectSourceContext.cxx b/xmloff/source/text/XMLIndexObjectSourceContext.cxx
index 5d1046951765..74d1175cee65 100644
--- a/xmloff/source/text/XMLIndexObjectSourceContext.cxx
+++ b/xmloff/source/text/XMLIndexObjectSourceContext.cxx
@@ -126,7 +126,7 @@ SvXMLImportContextRef XMLIndexObjectSourceContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & xAttrList )
 {
-    if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+    if ( (XmlNamespace::TEXT == nPrefix) &&
          (IsXMLToken(rLocalName, XML_OBJECT_INDEX_ENTRY_TEMPLATE)) )
     {
         return new XMLIndexTemplateContext(GetImport(), rIndexPropertySet,
diff --git a/xmloff/source/text/XMLIndexSimpleEntryContext.cxx b/xmloff/source/text/XMLIndexSimpleEntryContext.cxx
index 8811f4830917..a1c116444474 100644
--- a/xmloff/source/text/XMLIndexSimpleEntryContext.cxx
+++ b/xmloff/source/text/XMLIndexSimpleEntryContext.cxx
@@ -67,7 +67,7 @@ void XMLIndexSimpleEntryContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+        if ( (XmlNamespace::TEXT == nPrefix) &&
              IsXMLToken(sLocalName, XML_STYLE_NAME) )
         {
             m_sCharStyleName = xAttrList->getValueByIndex(nAttr);
diff --git a/xmloff/source/text/XMLIndexSourceBaseContext.cxx b/xmloff/source/text/XMLIndexSourceBaseContext.cxx
index c29f59b50544..dee9f02123f0 100644
--- a/xmloff/source/text/XMLIndexSourceBaseContext.cxx
+++ b/xmloff/source/text/XMLIndexSourceBaseContext.cxx
@@ -39,98 +39,98 @@ using ::com::sun::star::xml::sax::XAttributeList;
 
 const SvXMLTokenMapEntry aIndexSourceTokenMap[] =
 {
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_OUTLINE_LEVEL,
           XML_TOK_INDEXSOURCE_OUTLINE_LEVEL},
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_INDEX_MARKS,
           XML_TOK_INDEXSOURCE_USE_INDEX_MARKS },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_INDEX_SCOPE,
           XML_TOK_INDEXSOURCE_INDEX_SCOPE },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_RELATIVE_TAB_STOP_POSITION,
           XML_TOK_INDEXSOURCE_RELATIVE_TABS } ,
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_OTHER_OBJECTS,
           XML_TOK_INDEXSOURCE_USE_OTHER_OBJECTS },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_SPREADSHEET_OBJECTS,
           XML_TOK_INDEXSOURCE_USE_SHEET },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_CHART_OBJECTS,
           XML_TOK_INDEXSOURCE_USE_CHART },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_DRAW_OBJECTS,
           XML_TOK_INDEXSOURCE_USE_DRAW },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_IMAGE_OBJECTS,
           XML_TOK_INDEXSOURCE_USE_IMAGE },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_MATH_OBJECTS,
           XML_TOK_INDEXSOURCE_USE_MATH },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_MAIN_ENTRY_STYLE_NAME,
           XML_TOK_INDEXSOURCE_MAIN_ENTRY_STYLE },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_IGNORE_CASE,
           XML_TOK_INDEXSOURCE_IGNORE_CASE },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_ALPHABETICAL_SEPARATORS,
           XML_TOK_INDEXSOURCE_SEPARATORS },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_COMBINE_ENTRIES,
           XML_TOK_INDEXSOURCE_COMBINE_ENTRIES },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_COMBINE_ENTRIES_WITH_DASH,
           XML_TOK_INDEXSOURCE_COMBINE_WITH_DASH },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_KEYS_AS_ENTRIES,
           XML_TOK_INDEXSOURCE_KEYS_AS_ENTRIES },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_COMBINE_ENTRIES_WITH_PP,
           XML_TOK_INDEXSOURCE_COMBINE_WITH_PP },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_CAPITALIZE_ENTRIES,
           XML_TOK_INDEXSOURCE_CAPITALIZE },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_OBJECTS,
           XML_TOK_INDEXSOURCE_USE_OBJECTS },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_GRAPHICS,
           XML_TOK_INDEXSOURCE_USE_GRAPHICS },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_TABLES,
           XML_TOK_INDEXSOURCE_USE_TABLES },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_FLOATING_FRAMES,
           XML_TOK_INDEXSOURCE_USE_FRAMES },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_COPY_OUTLINE_LEVELS,
           XML_TOK_INDEXSOURCE_COPY_OUTLINE_LEVELS },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_CAPTION,
           XML_TOK_INDEXSOURCE_USE_CAPTION },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_CAPTION_SEQUENCE_NAME,
           XML_TOK_INDEXSOURCE_SEQUENCE_NAME },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_CAPTION_SEQUENCE_FORMAT,
           XML_TOK_INDEXSOURCE_SEQUENCE_FORMAT },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_COMMA_SEPARATED,
           XML_TOK_INDEXSOURCE_COMMA_SEPARATED },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::TEXT,
           XML_USE_INDEX_SOURCE_STYLES,
           XML_TOK_INDEXSOURCE_USE_INDEX_SOURCE_STYLES },
-    { XML_NAMESPACE_TEXT, XML_SORT_ALGORITHM,
+    { XmlNamespace::TEXT, XML_SORT_ALGORITHM,
           XML_TOK_INDEXSOURCE_SORT_ALGORITHM },
-    { XML_NAMESPACE_STYLE, XML_RFC_LANGUAGE_TAG, XML_TOK_INDEXSOURCE_RFC_LANGUAGE_TAG },
-    { XML_NAMESPACE_FO, XML_LANGUAGE, XML_TOK_INDEXSOURCE_LANGUAGE },
-    { XML_NAMESPACE_FO, XML_SCRIPT, XML_TOK_INDEXSOURCE_SCRIPT },
-    { XML_NAMESPACE_FO, XML_COUNTRY, XML_TOK_INDEXSOURCE_COUNTRY },
-    { XML_NAMESPACE_TEXT, XML_INDEX_NAME, XML_TOK_INDEXSOURCE_USER_INDEX_NAME },
-    { XML_NAMESPACE_TEXT,
+    { XmlNamespace::STYLE, XML_RFC_LANGUAGE_TAG, XML_TOK_INDEXSOURCE_RFC_LANGUAGE_TAG },
+    { XmlNamespace::FO, XML_LANGUAGE, XML_TOK_INDEXSOURCE_LANGUAGE },
+    { XmlNamespace::FO, XML_SCRIPT, XML_TOK_INDEXSOURCE_SCRIPT },
+    { XmlNamespace::FO, XML_COUNTRY, XML_TOK_INDEXSOURCE_COUNTRY },
+    { XmlNamespace::TEXT, XML_INDEX_NAME, XML_TOK_INDEXSOURCE_USER_INDEX_NAME },
+    { XmlNamespace::TEXT,
           XML_USE_OUTLINE_LEVEL,
           XML_TOK_INDEXSOURCE_USE_OUTLINE_LEVEL},
 
@@ -219,7 +219,7 @@ SvXMLImportContextRef XMLIndexSourceBaseContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if (XML_NAMESPACE_TEXT == nPrefix)
+    if (XmlNamespace::TEXT == nPrefix)
     {
         if ( IsXMLToken( rLocalName, XML_INDEX_TITLE_TEMPLATE ) )
         {
diff --git a/xmloff/source/text/XMLIndexTOCContext.cxx b/xmloff/source/text/XMLIndexTOCContext.cxx
index 2077ac562c7f..aa3ab088068b 100644
--- a/xmloff/source/text/XMLIndexTOCContext.cxx
+++ b/xmloff/source/text/XMLIndexTOCContext.cxx
@@ -99,7 +99,7 @@ XMLIndexTOCContext::XMLIndexTOCContext(SvXMLImport& rImport,
     , eIndexType(TEXT_INDEX_UNKNOWN)
     , bValid(false)
 {
-    if (XML_NAMESPACE_TEXT == nPrfx)
+    if (XmlNamespace::TEXT == nPrfx)
     {
         if (SvXMLUnitConverter::convertEnum(eIndexType, rLocalName, aIndexTypeMap))
         {
@@ -137,7 +137,7 @@ void XMLIndexTOCContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if ( XML_NAMESPACE_TEXT == nPrefix)
+        if ( XmlNamespace::TEXT == nPrefix)
         {
             if ( IsXMLToken( sLocalName, XML_STYLE_NAME ) )
             {
@@ -158,7 +158,7 @@ void XMLIndexTOCContext::StartElement(
                 sIndexName = xAttrList->getValueByIndex(nAttr);
             }
         }
-        else if ( XML_NAMESPACE_XML == nPrefix)
+        else if ( XmlNamespace::XML == nPrefix)
         {
             if ( IsXMLToken( sLocalName, XML_ID ) )
             {
@@ -282,7 +282,7 @@ SvXMLImportContextRef XMLIndexTOCContext::CreateChildContext(
 
     if (bValid)
     {
-        if (XML_NAMESPACE_TEXT == nPrefix)
+        if (XmlNamespace::TEXT == nPrefix)
         {
             if ( IsXMLToken( rLocalName, XML_INDEX_BODY ) )
             {
diff --git a/xmloff/source/text/XMLIndexTOCSourceContext.cxx b/xmloff/source/text/XMLIndexTOCSourceContext.cxx
index 6d4a2164b775..d659294ff5f0 100644
--- a/xmloff/source/text/XMLIndexTOCSourceContext.cxx
+++ b/xmloff/source/text/XMLIndexTOCSourceContext.cxx
@@ -137,7 +137,7 @@ SvXMLImportContextRef XMLIndexTOCSourceContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & xAttrList )
 {
-    if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+    if ( (XmlNamespace::TEXT == nPrefix) &&
          IsXMLToken(rLocalName, XML_TABLE_OF_CONTENT_ENTRY_TEMPLATE) )
     {
         return new XMLIndexTemplateContext(GetImport(), rIndexPropertySet,
diff --git a/xmloff/source/text/XMLIndexTOCStylesContext.cxx b/xmloff/source/text/XMLIndexTOCStylesContext.cxx
index ed0b77f41cd5..2e70531afe56 100644
--- a/xmloff/source/text/XMLIndexTOCStylesContext.cxx
+++ b/xmloff/source/text/XMLIndexTOCStylesContext.cxx
@@ -66,7 +66,7 @@ void XMLIndexTOCStylesContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+        if ( (XmlNamespace::TEXT == nPrefix) &&
              (IsXMLToken(sLocalName, XML_OUTLINE_LEVEL)) )
         {
             sal_Int32 nTmp;
@@ -113,7 +113,7 @@ SvXMLImportContextRef XMLIndexTOCStylesContext::CreateChildContext(
     const Reference<XAttributeList> & xAttrList )
 {
     // check for index-source-style
-    if ( (XML_NAMESPACE_TEXT == p_nPrefix) &&
+    if ( (XmlNamespace::TEXT == p_nPrefix) &&
          IsXMLToken( rLocalName, XML_INDEX_SOURCE_STYLE ) )
     {
         // find text:style-name attribute and record in aStyleNames
@@ -124,7 +124,7 @@ SvXMLImportContextRef XMLIndexTOCStylesContext::CreateChildContext(
             sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
                 GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                                   &sLocalName );
-            if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+            if ( (XmlNamespace::TEXT == nPrefix) &&
                  IsXMLToken( sLocalName, XML_STYLE_NAME ) )
             {
                 aStyleNames.push_back(xAttrList->getValueByIndex(nAttr));
diff --git a/xmloff/source/text/XMLIndexTabStopEntryContext.cxx b/xmloff/source/text/XMLIndexTabStopEntryContext.cxx
index 16a9de071ee8..a4a85f5da0d2 100644
--- a/xmloff/source/text/XMLIndexTabStopEntryContext.cxx
+++ b/xmloff/source/text/XMLIndexTabStopEntryContext.cxx
@@ -71,7 +71,7 @@ void XMLIndexTabStopEntryContext::StartElement(
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
         OUString sAttr = xAttrList->getValueByIndex(nAttr);
-        if (XML_NAMESPACE_STYLE == nPrefix)
+        if (XmlNamespace::STYLE == nPrefix)
         {
             if ( IsXMLToken( sLocalName, XML_TYPE ) )
             {
diff --git a/xmloff/source/text/XMLIndexTableSourceContext.cxx b/xmloff/source/text/XMLIndexTableSourceContext.cxx
index 71792d98e5d8..f61e3cbf6450 100644
--- a/xmloff/source/text/XMLIndexTableSourceContext.cxx
+++ b/xmloff/source/text/XMLIndexTableSourceContext.cxx
@@ -133,7 +133,7 @@ SvXMLImportContextRef XMLIndexTableSourceContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & xAttrList )
 {
-    if ( ( XML_NAMESPACE_TEXT == nPrefix ) &&
+    if ( ( XmlNamespace::TEXT == nPrefix ) &&
          ( IsXMLToken( rLocalName, XML_TABLE_INDEX_ENTRY_TEMPLATE ) ) )
     {
         return new XMLIndexTemplateContext(GetImport(), rIndexPropertySet,
diff --git a/xmloff/source/text/XMLIndexTemplateContext.cxx b/xmloff/source/text/XMLIndexTemplateContext.cxx
index f0aac4bb3563..28882ab383bf 100644
--- a/xmloff/source/text/XMLIndexTemplateContext.cxx
+++ b/xmloff/source/text/XMLIndexTemplateContext.cxx
@@ -108,7 +108,7 @@ void XMLIndexTemplateContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if (XML_NAMESPACE_TEXT == nPrefix)
+        if (XmlNamespace::TEXT == nPrefix)
         {
             if ( IsXMLToken( sLocalName, XML_STYLE_NAME ) )
             {
@@ -221,7 +221,7 @@ SvXMLImportContextRef XMLIndexTemplateContext::CreateChildContext(
 {
     SvXMLImportContext* pContext = nullptr;
 
-    if (XML_NAMESPACE_TEXT == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix)
+    if (XmlNamespace::TEXT == nPrefix || XmlNamespace::LO_EXT == nPrefix)
     {
         TemplateTokenType nToken;
         if (SvXMLUnitConverter::convertEnum(nToken, rLocalName,
diff --git a/xmloff/source/text/XMLIndexTitleTemplateContext.cxx b/xmloff/source/text/XMLIndexTitleTemplateContext.cxx
index d6d994b869a0..873090945c6b 100644
--- a/xmloff/source/text/XMLIndexTitleTemplateContext.cxx
+++ b/xmloff/source/text/XMLIndexTitleTemplateContext.cxx
@@ -63,7 +63,7 @@ void XMLIndexTitleTemplateContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
-        if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+        if ( (XmlNamespace::TEXT == nPrefix) &&
              (IsXMLToken(sLocalName, XML_STYLE_NAME)) )
         {
             sStyleName = xAttrList->getValueByIndex(nAttr);
diff --git a/xmloff/source/text/XMLIndexUserSourceContext.cxx b/xmloff/source/text/XMLIndexUserSourceContext.cxx
index 2a76b5a459a9..a11e13005c16 100644
--- a/xmloff/source/text/XMLIndexUserSourceContext.cxx
+++ b/xmloff/source/text/XMLIndexUserSourceContext.cxx
@@ -147,7 +147,7 @@ SvXMLImportContextRef XMLIndexUserSourceContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & xAttrList )
 {
-    if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+    if ( (XmlNamespace::TEXT == nPrefix) &&
          (IsXMLToken(rLocalName, XML_USER_INDEX_ENTRY_TEMPLATE)) )
     {
         return new XMLIndexTemplateContext(GetImport(), rIndexPropertySet,
diff --git a/xmloff/source/text/XMLLineNumberingExport.cxx b/xmloff/source/text/XMLLineNumberingExport.cxx
index c531f657ebe3..9c649f46ced4 100644
--- a/xmloff/source/text/XMLLineNumberingExport.cxx
+++ b/xmloff/source/text/XMLLineNumberingExport.cxx
@@ -73,7 +73,7 @@ void XMLLineNumberingExport::Export()
     aAny >>= sTmp;
     if (!sTmp.isEmpty())
     {
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_STYLE_NAME,
                              rExport.EncodeStyleName( sTmp ));
     }
 
@@ -81,7 +81,7 @@ void XMLLineNumberingExport::Export()
     aAny = xLineNumbering->getPropertyValue("IsOn");
     if (! *o3tl::doAccess<bool>(aAny))
     {
-        rExport.AddAttribute(XML_NAMESPACE_TEXT,
+        rExport.AddAttribute(XmlNamespace::TEXT,
                              XML_NUMBER_LINES, XML_FALSE);
     }
 
@@ -89,7 +89,7 @@ void XMLLineNumberingExport::Export()
     aAny = xLineNumbering->getPropertyValue("CountEmptyLines");
     if (! *o3tl::doAccess<bool>(aAny))
     {
-        rExport.AddAttribute(XML_NAMESPACE_TEXT,
+        rExport.AddAttribute(XmlNamespace::TEXT,
                              XML_COUNT_EMPTY_LINES, XML_FALSE);
     }
 
@@ -97,7 +97,7 @@ void XMLLineNumberingExport::Export()
     aAny = xLineNumbering->getPropertyValue("CountLinesInFrames");
     if (*o3tl::doAccess<bool>(aAny))
     {
-        rExport.AddAttribute(XML_NAMESPACE_TEXT,
+        rExport.AddAttribute(XmlNamespace::TEXT,
                              XML_COUNT_IN_TEXT_BOXES, XML_TRUE);
     }
 
@@ -105,7 +105,7 @@ void XMLLineNumberingExport::Export()
     aAny = xLineNumbering->getPropertyValue("RestartAtEachPage");
     if (*o3tl::doAccess<bool>(aAny))
     {
-        rExport.AddAttribute(XML_NAMESPACE_TEXT,
+        rExport.AddAttribute(XmlNamespace::TEXT,
                              XML_RESTART_ON_PAGE, XML_TRUE);
     }
 
@@ -118,7 +118,7 @@ void XMLLineNumberingExport::Export()
         OUStringBuffer sBuf;
         rExport.GetMM100UnitConverter().convertMeasureToXML(
                 sBuf, nLength);
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_OFFSET,
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_OFFSET,
                              sBuf.makeStringAndClear());
     }
 
@@ -128,12 +128,12 @@ void XMLLineNumberingExport::Export()
     sal_Int16 nFormat = 0;
     aAny >>= nFormat;
     rExport.GetMM100UnitConverter().convertNumFormat( sNumPosBuf, nFormat );
-    rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_NUM_FORMAT,
+    rExport.AddAttribute(XmlNamespace::STYLE, XML_NUM_FORMAT,
                          sNumPosBuf.makeStringAndClear());
     SvXMLUnitConverter::convertNumLetterSync( sNumPosBuf, nFormat );
     if( !sNumPosBuf.isEmpty() )
     {
-        rExport.AddAttribute(XML_NAMESPACE_STYLE,
+        rExport.AddAttribute(XmlNamespace::STYLE,
                              XML_NUM_LETTER_SYNC,
                              sNumPosBuf.makeStringAndClear() );
     }
@@ -145,7 +145,7 @@ void XMLLineNumberingExport::Export()
     if (SvXMLUnitConverter::convertEnum(sNumPosBuf, nPosition,
                                         aLineNumberPositionMap))
     {
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_NUMBER_POSITION,
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_NUMBER_POSITION,
                              sNumPosBuf.makeStringAndClear());
     }
 
@@ -153,10 +153,10 @@ void XMLLineNumberingExport::Export()
     aAny = xLineNumbering->getPropertyValue("Interval");
     sal_Int16 nLineInterval = 0;
     aAny >>= nLineInterval;
-    rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_INCREMENT,
+    rExport.AddAttribute(XmlNamespace::TEXT, XML_INCREMENT,
                          OUString::number(nLineInterval));
 
-    SvXMLElementExport aConfigElem(rExport, XML_NAMESPACE_TEXT,
+    SvXMLElementExport aConfigElem(rExport, XmlNamespace::TEXT,
                                    XML_LINENUMBERING_CONFIGURATION,
                                    true, true);
 
@@ -171,10 +171,10 @@ void XMLLineNumberingExport::Export()
     aAny = xLineNumbering->getPropertyValue("SeparatorInterval");
     sal_Int16 nLineDistance = 0;
     aAny >>= nLineDistance;
-    rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_INCREMENT,
+    rExport.AddAttribute(XmlNamespace::TEXT, XML_INCREMENT,
                          OUString::number(nLineDistance));
 
-    SvXMLElementExport aSeparatorElem(rExport, XML_NAMESPACE_TEXT,
+    SvXMLElementExport aSeparatorElem(rExport, XmlNamespace::TEXT,
                                       XML_LINENUMBERING_SEPARATOR,
                                       true, false);
     rExport.Characters(sSeparator);
diff --git a/xmloff/source/text/XMLLineNumberingImportContext.cxx b/xmloff/source/text/XMLLineNumberingImportContext.cxx
index 7370d60dc628..0702e394562a 100644
--- a/xmloff/source/text/XMLLineNumberingImportContext.cxx
+++ b/xmloff/source/text/XMLLineNumberingImportContext.cxx
@@ -84,26 +84,26 @@ void XMLLineNumberingImportContext::SetAttribute( sal_uInt16 nPrefixKey,
 {
     static const SvXMLTokenMapEntry aLineNumberingTokenMap[] =
     {
-        { XML_NAMESPACE_TEXT, XML_STYLE_NAME, XML_TOK_LINENUMBERING_STYLE_NAME },
-        { XML_NAMESPACE_TEXT, XML_NUMBER_LINES,
+        { XmlNamespace::TEXT, XML_STYLE_NAME, XML_TOK_LINENUMBERING_STYLE_NAME },
+        { XmlNamespace::TEXT, XML_NUMBER_LINES,
               XML_TOK_LINENUMBERING_NUMBER_LINES },
-        { XML_NAMESPACE_TEXT, XML_COUNT_EMPTY_LINES,
+        { XmlNamespace::TEXT, XML_COUNT_EMPTY_LINES,
               XML_TOK_LINENUMBERING_COUNT_EMPTY_LINES },
-        { XML_NAMESPACE_TEXT, XML_COUNT_IN_TEXT_BOXES,
+        { XmlNamespace::TEXT, XML_COUNT_IN_TEXT_BOXES,
               XML_TOK_LINENUMBERING_COUNT_IN_TEXT_BOXES },
-        { XML_NAMESPACE_TEXT, XML_RESTART_ON_PAGE,
+        { XmlNamespace::TEXT, XML_RESTART_ON_PAGE,
               XML_TOK_LINENUMBERING_RESTART_NUMBERING },
-        { XML_NAMESPACE_TEXT, XML_OFFSET, XML_TOK_LINENUMBERING_OFFSET },
-        { XML_NAMESPACE_STYLE, XML_NUM_FORMAT, XML_TOK_LINENUMBERING_NUM_FORMAT },
-        { XML_NAMESPACE_STYLE, XML_NUM_LETTER_SYNC,
+        { XmlNamespace::TEXT, XML_OFFSET, XML_TOK_LINENUMBERING_OFFSET },
+        { XmlNamespace::STYLE, XML_NUM_FORMAT, XML_TOK_LINENUMBERING_NUM_FORMAT },
+        { XmlNamespace::STYLE, XML_NUM_LETTER_SYNC,
               XML_TOK_LINENUMBERING_NUM_LETTER_SYNC },
-        { XML_NAMESPACE_TEXT, XML_NUMBER_POSITION,
+        { XmlNamespace::TEXT, XML_NUMBER_POSITION,
               XML_TOK_LINENUMBERING_NUMBER_POSITION },
-        { XML_NAMESPACE_TEXT, XML_INCREMENT, XML_TOK_LINENUMBERING_INCREMENT },
-    //  { XML_NAMESPACE_TEXT, XML_LINENUMBERING_CONFIGURATION,
+        { XmlNamespace::TEXT, XML_INCREMENT, XML_TOK_LINENUMBERING_INCREMENT },
+    //  { XmlNamespace::TEXT, XML_LINENUMBERING_CONFIGURATION,
     //        XML_TOK_LINENUMBERING_LINENUMBERING_CONFIGURATION },
-    //  { XML_NAMESPACE_TEXT, XML_INCREMENT, XML_TOK_LINENUMBERING_INCREMENT },
-    //  { XML_NAMESPACE_TEXT, XML_LINENUMBERING_SEPARATOR,
+    //  { XmlNamespace::TEXT, XML_INCREMENT, XML_TOK_LINENUMBERING_INCREMENT },
+    //  { XmlNamespace::TEXT, XML_LINENUMBERING_SEPARATOR,
     //        XML_TOK_LINENUMBERING_LINENUMBERING_SEPARATOR },
 
         XML_TOKEN_MAP_END
@@ -249,7 +249,7 @@ SvXMLImportContextRef XMLLineNumberingImportContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & /*xAttrList*/ )
 {
-    if ( (nPrefix == XML_NAMESPACE_TEXT) &&
+    if ( (nPrefix == XmlNamespace::TEXT) &&
          IsXMLToken(rLocalName, XML_LINENUMBERING_SEPARATOR) )
     {
         return new XMLLineNumberingSeparatorImportContext(GetImport(),
diff --git a/xmloff/source/text/XMLLineNumberingSeparatorImportContext.cxx b/xmloff/source/text/XMLLineNumberingSeparatorImportContext.cxx
index 2061ce2172cf..8b35e8d5329e 100644
--- a/xmloff/source/text/XMLLineNumberingSeparatorImportContext.cxx
+++ b/xmloff/source/text/XMLLineNumberingSeparatorImportContext.cxx
@@ -59,7 +59,7 @@ void XMLLineNumberingSeparatorImportContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(i), &sLocalName );
 
-        if ( (nPrefix == XML_NAMESPACE_TEXT) &&
+        if ( (nPrefix == XmlNamespace::TEXT) &&
              IsXMLToken(sLocalName, XML_INCREMENT) )
         {
             sal_Int32 nTmp;
diff --git a/xmloff/source/text/XMLRedlineExport.cxx b/xmloff/source/text/XMLRedlineExport.cxx
index f03bc1a98149..55a7389c7798 100644
--- a/xmloff/source/text/XMLRedlineExport.cxx
+++ b/xmloff/source/text/XMLRedlineExport.cxx
@@ -133,7 +133,7 @@ void XMLRedlineExport::ExportChangesList(
         return;
 
     // changes container element
-    SvXMLElementExport aChanges(rExport, XML_NAMESPACE_TEXT,
+    SvXMLElementExport aChanges(rExport, XmlNamespace::TEXT,
                                 XML_TRACKED_CHANGES,
                                 true, true);
 
@@ -200,12 +200,12 @@ void XMLRedlineExport::ExportChangesListElements()
     if ( !bEnabled != !aEnumAccess->hasElements() )
     {
         rExport.AddAttribute(
-            XML_NAMESPACE_TEXT, XML_TRACK_CHANGES,
+            XmlNamespace::TEXT, XML_TRACK_CHANGES,
             bEnabled ? XML_TRUE : XML_FALSE );
     }
 
     // changes container element
-    SvXMLElementExport aChanges(rExport, XML_NAMESPACE_TEXT,
+    SvXMLElementExport aChanges(rExport, XmlNamespace::TEXT,
                                 XML_TRACKED_CHANGES,
                                 true, true);
 
@@ -320,11 +320,11 @@ void XMLRedlineExport::ExportChangeInline(
     if (XML_TOKEN_INVALID != eElement)
     {
         // we always need the ID
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_CHANGE_ID,
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_CHANGE_ID,
                              GetRedlineID(rPropSet));
 
         // export the element (no whitespace because we're in the text body)
-        SvXMLElementExport aChangeElem(rExport, XML_NAMESPACE_TEXT,
+        SvXMLElementExport aChangeElem(rExport, XmlNamespace::TEXT,
                                        eElement, false, false);
     }
 }
@@ -334,16 +334,16 @@ void XMLRedlineExport::ExportChangedRegion(
     const Reference<XPropertySet> & rPropSet)
 {
     // Redline-ID
-    rExport.AddAttributeIdLegacy(XML_NAMESPACE_TEXT, GetRedlineID(rPropSet));
+    rExport.AddAttributeIdLegacy(XmlNamespace::TEXT, GetRedlineID(rPropSet));
 
     // merge-last-paragraph
     Any aAny = rPropSet->getPropertyValue("MergeLastPara");
     if( ! *o3tl::doAccess<bool>(aAny) )
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_MERGE_LAST_PARAGRAPH,
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_MERGE_LAST_PARAGRAPH,
                              XML_FALSE);
 
     // export change region element
-    SvXMLElementExport aChangedRegion(rExport, XML_NAMESPACE_TEXT,
+    SvXMLElementExport aChangedRegion(rExport, XmlNamespace::TEXT,
                                       XML_CHANGED_REGION, true, true);
 
 
@@ -352,7 +352,7 @@ void XMLRedlineExport::ExportChangedRegion(
         aAny = rPropSet->getPropertyValue("RedlineType");
         OUString sType;
         aAny >>= sType;
-        SvXMLElementExport aChange(rExport, XML_NAMESPACE_TEXT,
+        SvXMLElementExport aChange(rExport, XmlNamespace::TEXT,
                                    ConvertTypeName(sType), true, true);
 
         ExportChangeInfo(rPropSet);
@@ -385,7 +385,7 @@ void XMLRedlineExport::ExportChangedRegion(
         // delete an insertion. This assumption is asserted in
         // ExportChangeInfo(Sequence<PropertyValue>&).
         SvXMLElementExport aSecondChangeElem(
-            rExport, XML_NAMESPACE_TEXT, XML_INSERTION,
+            rExport, XmlNamespace::TEXT, XML_INSERTION,
             true, true);
 
         ExportChangeInfo(aSuccessorData);
@@ -434,7 +434,7 @@ void XMLRedlineExport::ExportChangeInfo(
     const Reference<XPropertySet> & rPropSet)
 {
 
-    SvXMLElementExport aChangeInfo(rExport, XML_NAMESPACE_OFFICE,
+    SvXMLElementExport aChangeInfo(rExport, XmlNamespace::OFFICE,
                                    XML_CHANGE_INFO, true, true);
 
     Any aAny = rPropSet->getPropertyValue("RedlineAuthor");
@@ -442,7 +442,7 @@ void XMLRedlineExport::ExportChangeInfo(
     aAny >>= sTmp;
     if (!sTmp.isEmpty())
     {
-        SvXMLElementExport aCreatorElem( rExport, XML_NAMESPACE_DC,
+        SvXMLElementExport aCreatorElem( rExport, XmlNamespace::DC,
                                           XML_CREATOR, true,
                                           false );
         rExport.Characters(sTmp);
@@ -454,7 +454,7 @@ void XMLRedlineExport::ExportChangeInfo(
     {
         OUStringBuffer sBuf;
         ::sax::Converter::convertDateTime(sBuf, aDateTime, nullptr);
-        SvXMLElementExport aDateElem( rExport, XML_NAMESPACE_DC,
+        SvXMLElementExport aDateElem( rExport, XmlNamespace::DC,
                                           XML_DATE, true,
                                           false );
         rExport.Characters(sBuf.makeStringAndClear());
@@ -479,7 +479,7 @@ void XMLRedlineExport::ExportChangeInfo(
             rVal.Value >>= sTmp;
             if (!sTmp.isEmpty())
             {
-                rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_CHG_AUTHOR, sTmp);
+                rExport.AddAttribute(XmlNamespace::OFFICE, XML_CHG_AUTHOR, sTmp);
             }
         }
         else if( rVal.Name == "RedlineComment" )
@@ -492,7 +492,7 @@ void XMLRedlineExport::ExportChangeInfo(
             rVal.Value >>= aDateTime;
             OUStringBuffer sBuf;
             ::sax::Converter::convertDateTime(sBuf, aDateTime, nullptr);
-            rExport.AddAttribute(XML_NAMESPACE_OFFICE, XML_CHG_DATE_TIME,
+            rExport.AddAttribute(XmlNamespace::OFFICE, XML_CHG_DATE_TIME,
                                  sBuf.makeStringAndClear());
         }
         else if( rVal.Name == "RedlineType" )
@@ -507,7 +507,7 @@ void XMLRedlineExport::ExportChangeInfo(
     }
 
     // finally write element
-    SvXMLElementExport aChangeInfo(rExport, XML_NAMESPACE_OFFICE,
+    SvXMLElementExport aChangeInfo(rExport, XmlNamespace::OFFICE,
                                    XML_CHANGE_INFO, true, true);
 
     WriteComment( sComment );
@@ -563,13 +563,13 @@ void XMLRedlineExport::ExportStartOrEndRedline(
     SAL_WARN_IF( sId.isEmpty(), "xmloff", "Redlines must have IDs" );
 
     // TODO: use GetRedlineID or eliminate that function
-    rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_CHANGE_ID,
+    rExport.AddAttribute(XmlNamespace::TEXT, XML_CHANGE_ID,
                          "ct" + sId);
 
     // export the element
     // (whitespace because we're not inside paragraphs)
     SvXMLElementExport aChangeElem(
-        rExport, XML_NAMESPACE_TEXT,
+        rExport, XmlNamespace::TEXT,
         bIsCollapsed ? XML_CHANGE :
             ( bIsStart ? XML_CHANGE_START : XML_CHANGE_END ),
         true, true);
@@ -617,7 +617,7 @@ void XMLRedlineExport::WriteComment(const OUString& rComment)
     while (aEnumerator.getNextToken(aSubString))
     {
         SvXMLElementExport aParagraph(
-            rExport, XML_NAMESPACE_TEXT, XML_P, true, false);
+            rExport, XmlNamespace::TEXT, XML_P, true, false);
         rExport.Characters(aSubString);
     }
 }
diff --git a/xmloff/source/text/XMLSectionExport.cxx b/xmloff/source/text/XMLSectionExport.cxx
index 04fc58e4cfa4..bfe48c9e9279 100644
--- a/xmloff/source/text/XMLSectionExport.cxx
+++ b/xmloff/source/text/XMLSectionExport.cxx
@@ -90,7 +90,7 @@ void XMLSectionExport::ExportSectionStart(
     else
     {
         // always export section style
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_STYLE_NAME,
                                      GetParaExport().Find(
                                      XmlStyleFamily::TEXT_SECTION,
                                      xPropertySet, "" ) );
@@ -194,7 +194,7 @@ void XMLSectionExport::ExportSectionEnd(
         if (xIndex.is())
         {
             // index end: close index body element
-            GetExport().EndElement( XML_NAMESPACE_TEXT, XML_INDEX_BODY,
+            GetExport().EndElement( XmlNamespace::TEXT, XML_INDEX_BODY,
                                     true );
             GetExport().IgnorableWhitespace();
 
@@ -250,7 +250,7 @@ void XMLSectionExport::ExportSectionEnd(
         GetExport().CheckAttrList();
 
         // element surrounded by whitespace
-        GetExport().EndElement( XML_NAMESPACE_TEXT, eElement, true);
+        GetExport().EndElement( XmlNamespace::TEXT, eElement, true);
         GetExport().IgnorableWhitespace();
     }
     else
@@ -308,10 +308,10 @@ void XMLSectionExport::ExportIndexHeaderStart(
 {
     // export name, dammit!
     Reference<XNamed> xName(rSection, UNO_QUERY);
-    GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xName->getName());
+    GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME, xName->getName());
 
     // format already handled -> export only start element
-    GetExport().StartElement( XML_NAMESPACE_TEXT, XML_INDEX_TITLE, true );
+    GetExport().StartElement( XmlNamespace::TEXT, XML_INDEX_TITLE, true );
     GetExport().IgnorableWhitespace();
 }
 
@@ -346,7 +346,7 @@ void XMLSectionExport::ExportRegularSectionStart(
     // style name already handled in ExportSectionStart(...)
 
     Reference<XNamed> xName(rSection, UNO_QUERY);
-    GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xName->getName());
+    GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME, xName->getName());
 
     // get XPropertySet for other values
     Reference<XPropertySet> xPropSet(rSection, UNO_QUERY);
@@ -359,16 +359,16 @@ void XMLSectionExport::ExportRegularSectionStart(
     if (!sCond.isEmpty())
     {
         OUString sQValue =
-            GetExport().GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OOOW,
+            GetExport().GetNamespaceMap().GetQNameByKey( XmlNamespace::OOOW,
                                                          sCond, false );
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_CONDITION, sQValue);
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_CONDITION, sQValue);
         eDisplay = XML_CONDITION;
 
         // #97450# store hidden-status (of conditional sections only)
         aAny = xPropSet->getPropertyValue("IsCurrentlyVisible");
         if (! *o3tl::doAccess<bool>(aAny))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_IS_HIDDEN,
+            GetExport().AddAttribute(XmlNamespace::TEXT, XML_IS_HIDDEN,
                                      XML_TRUE);
         }
     }
@@ -379,14 +379,14 @@ void XMLSectionExport::ExportRegularSectionStart(
     aAny = xPropSet->getPropertyValue("IsVisible");
     if (! *o3tl::doAccess<bool>(aAny))
     {
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_DISPLAY, eDisplay);
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_DISPLAY, eDisplay);
     }
 
     // protect + protection key
     aAny = xPropSet->getPropertyValue("IsProtected");
     if (*o3tl::doAccess<bool>(aAny))
     {
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_PROTECTED, XML_TRUE);
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_PROTECTED, XML_TRUE);
     }
     Sequence<sal_Int8> aPassword;
     xPropSet->getPropertyValue("ProtectionKey") >>= aPassword;
@@ -395,12 +395,12 @@ void XMLSectionExport::ExportRegularSectionStart(
         OUStringBuffer aBuffer;
         ::comphelper::Base64::encode(aBuffer, aPassword);
         // in ODF 1.0/1.1 the algorithm was left unspecified so we can write anything
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_PROTECTION_KEY,
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_PROTECTION_KEY,
                                  aBuffer.makeStringAndClear());
         if (aPassword.getLength() == 32 && GetExport().getSaneDefaultVersion() >= SvtSaveOptions::ODFSVER_012)
         {
             // attribute exists in ODF 1.2 or later; default is SHA1 so no need to write that
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
+            GetExport().AddAttribute(XmlNamespace::TEXT, XML_PROTECTION_KEY_DIGEST_ALGORITHM,
                     // write the URL from ODF 1.2, not the W3C one
                     "http://www.w3.org/2000/09/xmldsig#sha256");
         }
@@ -408,7 +408,7 @@ void XMLSectionExport::ExportRegularSectionStart(
 
     // export element
     GetExport().IgnorableWhitespace();
-    GetExport().StartElement( XML_NAMESPACE_TEXT, XML_SECTION, true );
+    GetExport().StartElement( XmlNamespace::TEXT, XML_SECTION, true );
 
     // data source
     // unfortunately, we have to test all relevant strings for non-zero length
@@ -426,24 +426,24 @@ void XMLSectionExport::ExportRegularSectionStart(
     {
         if (!aFileLink.FileURL.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_HREF,
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_HREF,
                                      GetExport().GetRelativeReference( aFileLink.FileURL) );
         }
 
         if (!aFileLink.FilterName.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_FILTER_NAME,
+            GetExport().AddAttribute(XmlNamespace::TEXT, XML_FILTER_NAME,
                                      aFileLink.FilterName);
         }
 
         if (!sRegionName.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_SECTION_NAME,
+            GetExport().AddAttribute(XmlNamespace::TEXT, XML_SECTION_NAME,
                                      sRegionName);
         }
 
         SvXMLElementExport aElem(GetExport(),
-                                 XML_NAMESPACE_TEXT, XML_SECTION_SOURCE,
+                                 XmlNamespace::TEXT, XML_SECTION_SOURCE,
                                  true, true);
     }
     else
@@ -468,22 +468,22 @@ void XMLSectionExport::ExportRegularSectionStart(
                  !sTopic.isEmpty() ||
                  !sItem.isEmpty())
             {
-                GetExport().AddAttribute(XML_NAMESPACE_OFFICE,
+                GetExport().AddAttribute(XmlNamespace::OFFICE,
                                          XML_DDE_APPLICATION, sApplication);
-                GetExport().AddAttribute(XML_NAMESPACE_OFFICE, XML_DDE_TOPIC,
+                GetExport().AddAttribute(XmlNamespace::OFFICE, XML_DDE_TOPIC,
                                          sTopic);
-                GetExport().AddAttribute(XML_NAMESPACE_OFFICE, XML_DDE_ITEM,
+                GetExport().AddAttribute(XmlNamespace::OFFICE, XML_DDE_ITEM,
                                          sItem);
 
                 aAny = xPropSet->getPropertyValue("IsAutomaticUpdate");
                 if (*o3tl::doAccess<bool>(aAny))
                 {
-                    GetExport().AddAttribute(XML_NAMESPACE_OFFICE,
+                    GetExport().AddAttribute(XmlNamespace::OFFICE,
                                              XML_AUTOMATIC_UPDATE, XML_TRUE);
                 }
 
                 SvXMLElementExport aElem(GetExport(),
-                                         XML_NAMESPACE_OFFICE,
+                                         XmlNamespace::OFFICE,
                                          XML_DDE_SOURCE, true, true);
             }
             // else: no DDE data source
@@ -506,7 +506,7 @@ void XMLSectionExport::ExportTableOfContentStart(
         sal_Int16 nLevel = sal_Int16();
         if( rPropertySet->getPropertyValue("Level") >>= nLevel )
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                      XML_OUTLINE_LEVEL,
                                      OUString::number(nLevel));
         }
@@ -603,7 +603,7 @@ void XMLSectionExport::ExportAlphabeticalIndexStart(
         aAny >>= sStyleName;
         if (!sStyleName.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                      XML_MAIN_ENTRY_STYLE_NAME,
                                      GetExport().EncodeStyleName( sStyleName ));
         }
@@ -632,7 +632,7 @@ void XMLSectionExport::ExportAlphabeticalIndexStart(
         aAny >>= sAlgorithm;
         if (!sAlgorithm.isEmpty())
         {
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_SORT_ALGORITHM,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_SORT_ALGORITHM,
                                       sAlgorithm );
         }
 
@@ -640,7 +640,7 @@ void XMLSectionExport::ExportAlphabeticalIndexStart(
         aAny = rPropertySet->getPropertyValue("Locale");
         Locale aLocale;
         aAny >>= aLocale;
-        GetExport().AddLanguageTagAttributes( XML_NAMESPACE_FO, XML_NAMESPACE_STYLE, aLocale, true);
+        GetExport().AddLanguageTagAttributes( XmlNamespace::FO, XmlNamespace::STYLE, aLocale, true);
 
         ExportBaseIndexSource(TEXT_SECTION_TYPE_ALPHABETICAL, rPropertySet);
     }
@@ -675,7 +675,7 @@ void XMLSectionExport::ExportUserIndexStart(
         Any aAny = rPropertySet->getPropertyValue( "UserIndexName" );
         OUString sIndexName;
         aAny >>= sIndexName;
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_INDEX_NAME,
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_INDEX_NAME,
                                  sIndexName);
 
         ExportBaseIndexSource(TEXT_SECTION_TYPE_USER, rPropertySet);
@@ -709,7 +709,7 @@ void XMLSectionExport::ExportBaseIndexStart(
     Any aAny = rPropertySet->getPropertyValue("IsProtected");
     if (*o3tl::doAccess<bool>(aAny))
     {
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_PROTECTED, XML_TRUE);
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_PROTECTED, XML_TRUE);
     }
 
     // index name
@@ -717,12 +717,12 @@ void XMLSectionExport::ExportBaseIndexStart(
     rPropertySet->getPropertyValue("Name") >>= sIndexName;
     if ( !sIndexName.isEmpty() )
     {
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, sIndexName);
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME, sIndexName);
     }
 
     // index  Element start
     GetExport().IgnorableWhitespace();
-    GetExport().StartElement( XML_NAMESPACE_TEXT, eElement, false );
+    GetExport().StartElement( XmlNamespace::TEXT, eElement, false );
 }
 
 const XMLTokenEnum aTypeSourceElementNameMap[] =
@@ -753,7 +753,7 @@ void XMLSectionExport::ExportBaseIndexSource(
         aAny = rPropertySet->getPropertyValue("CreateFromChapter");
         if (*o3tl::doAccess<bool>(aAny))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                      XML_INDEX_SCOPE, XML_CHAPTER);
         }
 
@@ -761,7 +761,7 @@ void XMLSectionExport::ExportBaseIndexSource(
         aAny = rPropertySet->getPropertyValue("IsRelativeTabstops");
         if (! *o3tl::doAccess<bool>(aAny))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                      XML_RELATIVE_TAB_STOP_POSITION,
                                      XML_FALSE);
         }
@@ -769,7 +769,7 @@ void XMLSectionExport::ExportBaseIndexSource(
 
     // the index source element (all indices)
     SvXMLElementExport aElem(GetExport(),
-                             XML_NAMESPACE_TEXT,
+                             XmlNamespace::TEXT,
                              GetXMLToken(
                                  aTypeSourceElementNameMap[
                                     eType - TEXT_SECTION_TYPE_TOC]),
@@ -781,13 +781,13 @@ void XMLSectionExport::ExportBaseIndexSource(
         aAny = rPropertySet->getPropertyValue("ParaStyleHeading");
         OUString sStyleName;
         aAny >>= sStyleName;
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+        GetExport().AddAttribute(XmlNamespace::TEXT,
                                  XML_STYLE_NAME,
                                  GetExport().EncodeStyleName( sStyleName ));
 
         // title template
         SvXMLElementExport aHeaderTemplate(GetExport(),
-                                           XML_NAMESPACE_TEXT,
+                                           XmlNamespace::TEXT,
                                            XML_INDEX_TITLE_TEMPLATE,
                                            true, false);
 
@@ -848,7 +848,7 @@ void XMLSectionExport::ExportBaseIndexBody(
 
     // start surrounded by whitespace
     GetExport().IgnorableWhitespace();
-    GetExport().StartElement( XML_NAMESPACE_TEXT, XML_INDEX_BODY, true );
+    GetExport().StartElement( XmlNamespace::TEXT, XML_INDEX_BODY, true );
 }
 
 void XMLSectionExport::ExportTableAndIllustrationIndexSourceAttributes(
@@ -858,7 +858,7 @@ void XMLSectionExport::ExportTableAndIllustrationIndexSourceAttributes(
     Any aAny = rPropertySet->getPropertyValue("CreateFromLabels");
     if (! *o3tl::doAccess<bool>(aAny))
     {
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+        GetExport().AddAttribute(XmlNamespace::TEXT,
                                  XML_USE_CAPTION, XML_FALSE);
     }
 
@@ -866,7 +866,7 @@ void XMLSectionExport::ExportTableAndIllustrationIndexSourceAttributes(
     aAny = rPropertySet->getPropertyValue("LabelCategory");
     OUString sSequenceName;
     aAny >>= sSequenceName;
-    GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+    GetExport().AddAttribute(XmlNamespace::TEXT,
                              XML_CAPTION_SEQUENCE_NAME,
                              sSequenceName);
 
@@ -874,7 +874,7 @@ void XMLSectionExport::ExportTableAndIllustrationIndexSourceAttributes(
     aAny = rPropertySet->getPropertyValue("LabelDisplayType");
     sal_Int16 nType = 0;
     aAny >>= nType;
-    GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+    GetExport().AddAttribute(XmlNamespace::TEXT,
                              XML_CAPTION_SEQUENCE_FORMAT,
                              XMLTextFieldExport::MapReferenceType(nType));
 }
@@ -1000,7 +1000,7 @@ bool XMLSectionExport::ExportIndexTemplate(
         // output level name
         if ((XML_TOKEN_INVALID != eLevelName) && (XML_TOKEN_INVALID != eLevelAttrName))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                           GetXMLToken(eLevelAttrName),
                                           GetXMLToken(eLevelName));
         }
@@ -1015,7 +1015,7 @@ bool XMLSectionExport::ExportIndexTemplate(
                 OUString::createFromAscii(pPropName));
             OUString sParaStyleName;
             aAny >>= sParaStyleName;
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                      XML_STYLE_NAME,
                                      GetExport().EncodeStyleName( sParaStyleName ));
         }
@@ -1024,7 +1024,7 @@ bool XMLSectionExport::ExportIndexTemplate(
         const XMLTokenEnum eElementName(
             aTypeElementNameMap[eType - TEXT_SECTION_TYPE_TOC]);
         SvXMLElementExport aLevelTemplate(GetExport(),
-                                          XML_NAMESPACE_TEXT,
+                                          XmlNamespace::TEXT,
                                           GetXMLToken(eElementName),
                                           true, true);
 
@@ -1258,7 +1258,7 @@ void XMLSectionExport::ExportIndexTemplateElement(
 
     // convert type to token (and check validity) ...
     XMLTokenEnum eElement(XML_TOKEN_INVALID);
-    sal_uInt16 nNamespace(XML_NAMESPACE_TEXT);
+    sal_uInt16 nNamespace(XmlNamespace::TEXT);
     switch(nTokenType)
     {
         case TOK_TTYPE_ENTRY_TEXT:
@@ -1318,8 +1318,8 @@ void XMLSectionExport::ExportIndexTemplateElement(
                         || eType == TEXT_SECTION_TYPE_USER);
                     // ODF 1.3 OFFICE-3941
                     nNamespace = (SvtSaveOptions::ODFSVER_013 <= aODFVersion)
-                        ? XML_NAMESPACE_TEXT
-                        : XML_NAMESPACE_LO_EXT;
+                        ? XmlNamespace::TEXT
+                        : XmlNamespace::LO_EXT;
                 }
                 else
                 {
@@ -1402,7 +1402,7 @@ void XMLSectionExport::ExportIndexTemplateElement(
             case TOK_TTYPE_BIBLIOGRAPHY:
             case TOK_TTYPE_CHAPTER_INFO:
             case TOK_TTYPE_TAB_STOP:
-                GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+                GetExport().AddAttribute(XmlNamespace::TEXT,
                                          XML_STYLE_NAME,
                              GetExport().EncodeStyleName( sCharStyle) );
                 break;
@@ -1416,7 +1416,7 @@ void XMLSectionExport::ExportIndexTemplateElement(
     if (TOK_TTYPE_TAB_STOP == nTokenType)
     {
         // tab type
-        GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_TYPE,
+        GetExport().AddAttribute(XmlNamespace::STYLE, XML_TYPE,
                                  bRightAligned ? XML_RIGHT : XML_LEFT);
 
         if (bTabPositionOK && (! bRightAligned))
@@ -1425,7 +1425,7 @@ void XMLSectionExport::ExportIndexTemplateElement(
             OUStringBuffer sBuf;
             GetExport().GetMM100UnitConverter().convertMeasureToXML(sBuf,
                                                              nTabPosition);
-            GetExport().AddAttribute(XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute(XmlNamespace::STYLE,
                                      XML_POSITION,
                                      sBuf.makeStringAndClear());
         }
@@ -1433,14 +1433,14 @@ void XMLSectionExport::ExportIndexTemplateElement(
         // fill char ("leader char")
         if (bFillCharOK && !sFillChar.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute(XmlNamespace::STYLE,
                                      XML_LEADER_CHAR, sFillChar);
         }
 
         // #i21237#
         if (bWithTabStopOK && ! bWithTabStop)
         {
-               GetExport().AddAttribute(XML_NAMESPACE_STYLE,
+               GetExport().AddAttribute(XmlNamespace::STYLE,
                                      XML_WITH_TAB,
                                      XML_FALSE);
         }
@@ -1454,7 +1454,7 @@ void XMLSectionExport::ExportIndexTemplateElement(
         if (SvXMLUnitConverter::convertEnum( sBuf, nBibliographyData,
                                              aBibliographyDataFieldMap ) )
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                      XML_BIBLIOGRAPHY_DATA_FIELD,
                                      sBuf.makeStringAndClear());
         }
@@ -1465,11 +1465,11 @@ void XMLSectionExport::ExportIndexTemplateElement(
     {
         OSL_ENSURE(bChapterFormatOK, "need chapter info");
         GetExport().AddAttribute(
-            XML_NAMESPACE_TEXT, XML_DISPLAY,
+            XmlNamespace::TEXT, XML_DISPLAY,
             XMLTextFieldExport::MapChapterDisplayFormat(nChapterFormat));
 //---> i53420
         if (bLevelOK)
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_OUTLINE_LEVEL,
+            GetExport().AddAttribute(XmlNamespace::TEXT, XML_OUTLINE_LEVEL,
                                  OUString::number(nLevel));
     }
 
@@ -1478,11 +1478,11 @@ void XMLSectionExport::ExportIndexTemplateElement(
     {
         if (bChapterFormatOK)
             GetExport().AddAttribute(
-                XML_NAMESPACE_TEXT, XML_DISPLAY,
+                XmlNamespace::TEXT, XML_DISPLAY,
                 XMLTextFieldExport::MapChapterDisplayFormat(nChapterFormat));
 
         if (bLevelOK)
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_OUTLINE_LEVEL,
+            GetExport().AddAttribute(XmlNamespace::TEXT, XML_OUTLINE_LEVEL,
                                  OUString::number(nLevel));
     }
     // export template
@@ -1514,13 +1514,13 @@ void XMLSectionExport::ExportLevelParagraphStyles(
         {
             // level attribute; we count 1..10; API 0..9
             sal_Int32 nLevelPlusOne = nLevel + 1;
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                      XML_OUTLINE_LEVEL,
                                      OUString::number(nLevelPlusOne));
 
             // source styles element
             SvXMLElementExport aParaStyles(GetExport(),
-                                           XML_NAMESPACE_TEXT,
+                                           XmlNamespace::TEXT,
                                            XML_INDEX_SOURCE_STYLES,
                                            true, true);
 
@@ -1528,13 +1528,13 @@ void XMLSectionExport::ExportLevelParagraphStyles(
             for(const auto& rStyleName : std::as_const(aStyleNames))
             {
                 // stylename attribute
-                GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+                GetExport().AddAttribute(XmlNamespace::TEXT,
                                          XML_STYLE_NAME,
                              GetExport().EncodeStyleName(rStyleName) );
 
                 // element
                 SvXMLElementExport aParaStyle(GetExport(),
-                                              XML_NAMESPACE_TEXT,
+                                              XmlNamespace::TEXT,
                                               XML_INDEX_SOURCE_STYLE,
                                               true, false);
             }
@@ -1559,7 +1559,7 @@ void XMLSectionExport::ExportBoolean(
     if ( (bTmp != bInvert) != bDefault )
     {
         // export non-default value (since default is omitted)
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+        GetExport().AddAttribute(XmlNamespace::TEXT,
                                  eAttributeName,
                                  bDefault ? XML_FALSE : XML_TRUE);
     }
@@ -1592,23 +1592,23 @@ void XMLSectionExport::ExportBibliographyConfiguration(SvXMLExport& rExport)
 
     aAny = xPropSet->getPropertyValue("BracketBefore");
     aAny >>= sTmp;
-    rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_PREFIX, sTmp);
+    rExport.AddAttribute(XmlNamespace::TEXT, XML_PREFIX, sTmp);
 
     aAny = xPropSet->getPropertyValue("BracketAfter");
     aAny >>= sTmp;
-    rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_SUFFIX, sTmp);
+    rExport.AddAttribute(XmlNamespace::TEXT, XML_SUFFIX, sTmp);
 
     aAny = xPropSet->getPropertyValue("IsNumberEntries");
     if (*o3tl::doAccess<bool>(aAny))
     {
-        rExport.AddAttribute(XML_NAMESPACE_TEXT,
+        rExport.AddAttribute(XmlNamespace::TEXT,
                              XML_NUMBERED_ENTRIES, XML_TRUE);
     }
 
     aAny = xPropSet->getPropertyValue("IsSortByPosition");
     if (! *o3tl::doAccess<bool>(aAny))
     {
-        rExport.AddAttribute(XML_NAMESPACE_TEXT,
+        rExport.AddAttribute(XmlNamespace::TEXT,
                              XML_SORT_BY_POSITION, XML_FALSE);
     }
 
@@ -1618,7 +1618,7 @@ void XMLSectionExport::ExportBibliographyConfiguration(SvXMLExport& rExport)
     aAny >>= sAlgorithm;
     if( !sAlgorithm.isEmpty() )
     {
-        rExport.AddAttribute( XML_NAMESPACE_TEXT,
+        rExport.AddAttribute( XmlNamespace::TEXT,
                               XML_SORT_ALGORITHM, sAlgorithm );
     }
 
@@ -1626,10 +1626,10 @@ void XMLSectionExport::ExportBibliographyConfiguration(SvXMLExport& rExport)
     aAny = xPropSet->getPropertyValue("Locale");
     Locale aLocale;
     aAny >>= aLocale;
-    rExport.AddLanguageTagAttributes( XML_NAMESPACE_FO, XML_NAMESPACE_STYLE, aLocale, true);
+    rExport.AddLanguageTagAttributes( XmlNamespace::FO, XmlNamespace::STYLE, aLocale, true);
 
     // configuration element
-    SvXMLElementExport aElement(rExport, XML_NAMESPACE_TEXT,
+    SvXMLElementExport aElement(rExport, XmlNamespace::TEXT,
                                 XML_BIBLIOGRAPHY_CONFIGURATION,
                                 true, true);
 
@@ -1649,21 +1649,21 @@ void XMLSectionExport::ExportBibliographyConfiguration(SvXMLExport& rExport)
                 if (SvXMLUnitConverter::convertEnum( sBuf, nKey,
                                          aBibliographyDataFieldMap ) )
                 {
-                    rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_KEY,
+                    rExport.AddAttribute(XmlNamespace::TEXT, XML_KEY,
                                          sBuf.makeStringAndClear());
                 }
             }
             else if (rValue.Name == "IsSortAscending")
             {
                 bool bTmp = *o3tl::doAccess<bool>(rValue.Value);
-                rExport.AddAttribute(XML_NAMESPACE_TEXT,
+                rExport.AddAttribute(XmlNamespace::TEXT,
                                      XML_SORT_ASCENDING,
                                      bTmp ? XML_TRUE : XML_FALSE);
             }
         }
 
         SvXMLElementExport aKeyElem(rExport,
-                                    XML_NAMESPACE_TEXT, XML_SORT_KEY,
+                                    XmlNamespace::TEXT, XML_SORT_KEY,
                                     true, true);
     }
 }
@@ -1805,12 +1805,12 @@ void XMLSectionExport::ExportMasterDocHeadingDummies()
 
         if( !sStyle.isEmpty() )
         {
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                                       GetExport().EncodeStyleName( sStyle ) );
 
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_LEVEL,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_LEVEL,
                                         OUString::number( nLevel + 1 ) );
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT, XML_H,
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT, XML_H,
                                         true, false );
         }
     }
diff --git a/xmloff/source/text/XMLSectionFootnoteConfigExport.cxx b/xmloff/source/text/XMLSectionFootnoteConfigExport.cxx
index 1f78bc5be790..c09b07a4f067 100644
--- a/xmloff/source/text/XMLSectionFootnoteConfigExport.cxx
+++ b/xmloff/source/text/XMLSectionFootnoteConfigExport.cxx
@@ -127,7 +127,7 @@ void XMLSectionFootnoteConfigExport::exportXML(
     if (!bEnd)
         return;
 
-    rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_NOTE_CLASS,
+    rExport.AddAttribute(XmlNamespace::TEXT, XML_NOTE_CLASS,
                              GetXMLToken( bEndnote ? XML_ENDNOTE
                                                      : XML_FOOTNOTE ) );
     // start numbering
@@ -135,7 +135,7 @@ void XMLSectionFootnoteConfigExport::exportXML(
     if (bNumRestart)
     {
         // restart number is stored as 0.., but interpreted as 1..
-        rExport.AddAttribute(XML_NAMESPACE_TEXT, XML_START_VALUE,
+        rExport.AddAttribute(XmlNamespace::TEXT, XML_START_VALUE,
                              OUString::number(nNumRestartAt+1));
     }
 
@@ -144,19 +144,19 @@ void XMLSectionFootnoteConfigExport::exportXML(
         // prefix and suffix
         if (!sNumPrefix.isEmpty())
         {
-                rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_NUM_PREFIX,
+                rExport.AddAttribute(XmlNamespace::STYLE, XML_NUM_PREFIX,
                                      sNumPrefix);
         }
         if (!sNumSuffix.isEmpty())
         {
-            rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_NUM_SUFFIX,
+            rExport.AddAttribute(XmlNamespace::STYLE, XML_NUM_SUFFIX,
                                  sNumSuffix);
         }
 
         // number type: num format
         rExport.GetMM100UnitConverter().convertNumFormat( sBuf,
                                                           nNumberingType );
-        rExport.AddAttribute(XML_NAMESPACE_STYLE, XML_NUM_FORMAT,
+        rExport.AddAttribute(XmlNamespace::STYLE, XML_NUM_FORMAT,
                              sBuf.makeStringAndClear());
 
         // and letter sync, if applicable
@@ -164,14 +164,14 @@ void XMLSectionFootnoteConfigExport::exportXML(
             sBuf, nNumberingType );
         if (!sBuf.isEmpty())
         {
-            rExport.AddAttribute(XML_NAMESPACE_STYLE,
+            rExport.AddAttribute(XmlNamespace::STYLE,
                                  XML_NUM_LETTER_SYNC,
                                  sBuf.makeStringAndClear());
         }
     }
 
     // and finally, the element
-    SvXMLElementExport rElem(rExport, XML_NAMESPACE_TEXT,
+    SvXMLElementExport rElem(rExport, XmlNamespace::TEXT,
                              XML_NOTES_CONFIGURATION,
                              true, true);
 }
diff --git a/xmloff/source/text/XMLSectionFootnoteConfigImport.cxx b/xmloff/source/text/XMLSectionFootnoteConfigImport.cxx
index 7c9872a5e5ac..d1f7c350f047 100644
--- a/xmloff/source/text/XMLSectionFootnoteConfigImport.cxx
+++ b/xmloff/source/text/XMLSectionFootnoteConfigImport.cxx
@@ -83,7 +83,7 @@ void XMLSectionFootnoteConfigImport::StartElement(
                               &sLocalName );
         OUString sAttrValue = xAttrList->getValueByIndex(nAttr);
 
-        if (XML_NAMESPACE_TEXT == nPrefix)
+        if (XmlNamespace::TEXT == nPrefix)
         {
             if (IsXMLToken(sLocalName, XML_START_VALUE))
             {
@@ -100,7 +100,7 @@ void XMLSectionFootnoteConfigImport::StartElement(
                     bEndnote = true;
             }
         }
-        else if (XML_NAMESPACE_STYLE == nPrefix)
+        else if (XmlNamespace::STYLE == nPrefix)
         {
             if (IsXMLToken(sLocalName, XML_NUM_PREFIX))
             {
diff --git a/xmloff/source/text/XMLSectionImportContext.cxx b/xmloff/source/text/XMLSectionImportContext.cxx
index ee7d94426b16..55c62cb0cd1a 100644
--- a/xmloff/source/text/XMLSectionImportContext.cxx
+++ b/xmloff/source/text/XMLSectionImportContext.cxx
@@ -66,16 +66,16 @@ enum XMLSectionToken
 
 const SvXMLTokenMapEntry aSectionTokenMap[] =
 {
-    { XML_NAMESPACE_XML , XML_ID, XML_TOK_SECTION_XMLID },
-    { XML_NAMESPACE_TEXT, XML_STYLE_NAME, XML_TOK_SECTION_STYLE_NAME },
-    { XML_NAMESPACE_TEXT, XML_NAME, XML_TOK_SECTION_NAME },
-    { XML_NAMESPACE_TEXT, XML_CONDITION, XML_TOK_SECTION_CONDITION },
-    { XML_NAMESPACE_TEXT, XML_DISPLAY, XML_TOK_SECTION_DISPLAY },
-    { XML_NAMESPACE_TEXT, XML_PROTECTED, XML_TOK_SECTION_PROTECT },
-    { XML_NAMESPACE_TEXT, XML_PROTECTION_KEY, XML_TOK_SECTION_PROTECTION_KEY},
-    { XML_NAMESPACE_TEXT, XML_IS_HIDDEN, XML_TOK_SECTION_IS_HIDDEN },
+    { XmlNamespace::XML , XML_ID, XML_TOK_SECTION_XMLID },
+    { XmlNamespace::TEXT, XML_STYLE_NAME, XML_TOK_SECTION_STYLE_NAME },
+    { XmlNamespace::TEXT, XML_NAME, XML_TOK_SECTION_NAME },
+    { XmlNamespace::TEXT, XML_CONDITION, XML_TOK_SECTION_CONDITION },
+    { XmlNamespace::TEXT, XML_DISPLAY, XML_TOK_SECTION_DISPLAY },
+    { XmlNamespace::TEXT, XML_PROTECTED, XML_TOK_SECTION_PROTECT },
+    { XmlNamespace::TEXT, XML_PROTECTION_KEY, XML_TOK_SECTION_PROTECTION_KEY},
+    { XmlNamespace::TEXT, XML_IS_HIDDEN, XML_TOK_SECTION_IS_HIDDEN },
     // compatibility with SRC629 (or earlier) versions
-    { XML_NAMESPACE_TEXT, XML_PROTECT, XML_TOK_SECTION_PROTECT },
+    { XmlNamespace::TEXT, XML_PROTECT, XML_TOK_SECTION_PROTECT },
     XML_TOKEN_MAP_END
 };
 
@@ -256,7 +256,7 @@ void XMLSectionImportContext::ProcessAttributes(
                     OUString sTmp;
                     sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
                                     GetKeyByAttrValueQName(sAttr, &sTmp);
-                    if( XML_NAMESPACE_OOOW == nPrefix )
+                    if( XmlNamespace::OOOW == nPrefix )
                     {
                         sCond = sTmp;
                         bCondOK = true;
@@ -337,14 +337,14 @@ SvXMLImportContextRef XMLSectionImportContext::CreateChildContext(
     SvXMLImportContext* pContext = nullptr;
 
     // section-source (-dde) elements
-    if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+    if ( (XmlNamespace::TEXT == nPrefix) &&
          IsXMLToken(rLocalName, XML_SECTION_SOURCE) )
     {
         pContext = new XMLSectionSourceImportContext(GetImport(),
                                                      nPrefix, rLocalName,
                                                      xSectionPropertySet);
     }
-    else if ( (XML_NAMESPACE_OFFICE == nPrefix) &&
+    else if ( (XmlNamespace::OFFICE == nPrefix) &&
               IsXMLToken(rLocalName, XML_DDE_SOURCE) )
     {
         pContext = new XMLSectionSourceDDEImportContext(GetImport(),
diff --git a/xmloff/source/text/XMLSectionSourceImportContext.cxx b/xmloff/source/text/XMLSectionSourceImportContext.cxx
index 5073fe24b269..d4c987fc3e5a 100644
--- a/xmloff/source/text/XMLSectionSourceImportContext.cxx
+++ b/xmloff/source/text/XMLSectionSourceImportContext.cxx
@@ -64,9 +64,9 @@ enum XMLSectionSourceToken
 
 const SvXMLTokenMapEntry aSectionSourceTokenMap[] =
 {
-    { XML_NAMESPACE_XLINK, XML_HREF, XML_TOK_SECTION_XLINK_HREF },
-    { XML_NAMESPACE_TEXT, XML_FILTER_NAME, XML_TOK_SECTION_TEXT_FILTER_NAME },
-    { XML_NAMESPACE_TEXT, XML_SECTION_NAME,
+    { XmlNamespace::XLINK, XML_HREF, XML_TOK_SECTION_XLINK_HREF },
+    { XmlNamespace::TEXT, XML_FILTER_NAME, XML_TOK_SECTION_TEXT_FILTER_NAME },
+    { XmlNamespace::TEXT, XML_SECTION_NAME,
                                         XML_TOK_SECTION_TEXT_SECTION_NAME },
     XML_TOKEN_MAP_END
 };
diff --git a/xmloff/source/text/XMLStringBufferImportContext.cxx b/xmloff/source/text/XMLStringBufferImportContext.cxx
index 591504e2406b..ccb82f483cc2 100644
--- a/xmloff/source/text/XMLStringBufferImportContext.cxx
+++ b/xmloff/source/text/XMLStringBufferImportContext.cxx
@@ -93,8 +93,8 @@ void XMLStringBufferImportContext::startFastElement( sal_Int32 /*nElement*/,
 void XMLStringBufferImportContext::EndElement()
 {
     // add return for paragraph elements
-    if ( (XML_NAMESPACE_TEXT == GetPrefix() ||
-                XML_NAMESPACE_LO_EXT == GetPrefix()) &&
+    if ( (XmlNamespace::TEXT == GetPrefix() ||
+                XmlNamespace::LO_EXT == GetPrefix()) &&
          (IsXMLToken(GetLocalName(), XML_P))    )
     {
         rTextBuffer.append(u'\x000a');
diff --git a/xmloff/source/text/XMLTextCharStyleNamesElementExport.cxx b/xmloff/source/text/XMLTextCharStyleNamesElementExport.cxx
index 070e402fb34a..02c255ddb845 100644
--- a/xmloff/source/text/XMLTextCharStyleNamesElementExport.cxx
+++ b/xmloff/source/text/XMLTextCharStyleNamesElementExport.cxx
@@ -53,10 +53,10 @@ XMLTextCharStyleNamesElementExport::XMLTextCharStyleNamesElementExport(
     if( nCount > 1 )
     {
         aName = rExport.GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_TEXT, GetXMLToken(XML_SPAN) );
+                        XmlNamespace::TEXT, GetXMLToken(XML_SPAN) );
         for( sal_Int32 i = 1; i < nCount; ++i )
         {
-            rExport.AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+            rExport.AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                                   rExport.EncodeStyleName( aNames[i - 1] ) );
             rExport.StartElement( aName, false );
         }
diff --git a/xmloff/source/text/XMLTextColumnsContext.cxx b/xmloff/source/text/XMLTextColumnsContext.cxx
index a0855956983d..7f4fa01d6737 100644
--- a/xmloff/source/text/XMLTextColumnsContext.cxx
+++ b/xmloff/source/text/XMLTextColumnsContext.cxx
@@ -65,19 +65,19 @@ enum SvXMLSepTokenMapAttrs
 
 const SvXMLTokenMapEntry aColAttrTokenMap[] =
 {
-    { XML_NAMESPACE_STYLE,  XML_REL_WIDTH,      XML_TOK_COLUMN_WIDTH },
-    { XML_NAMESPACE_FO,     XML_START_INDENT,   XML_TOK_COLUMN_MARGIN_LEFT },
-    { XML_NAMESPACE_FO,     XML_END_INDENT,     XML_TOK_COLUMN_MARGIN_RIGHT },
+    { XmlNamespace::STYLE,  XML_REL_WIDTH,      XML_TOK_COLUMN_WIDTH },
+    { XmlNamespace::FO,     XML_START_INDENT,   XML_TOK_COLUMN_MARGIN_LEFT },
+    { XmlNamespace::FO,     XML_END_INDENT,     XML_TOK_COLUMN_MARGIN_RIGHT },
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aColSepAttrTokenMap[] =
 {
-    { XML_NAMESPACE_STYLE,  XML_WIDTH,          XML_TOK_COLUMN_SEP_WIDTH },
-    { XML_NAMESPACE_STYLE,  XML_COLOR,          XML_TOK_COLUMN_SEP_COLOR },
-    { XML_NAMESPACE_STYLE,  XML_HEIGHT,         XML_TOK_COLUMN_SEP_HEIGHT },
-    { XML_NAMESPACE_STYLE,  XML_VERTICAL_ALIGN, XML_TOK_COLUMN_SEP_ALIGN },
-    { XML_NAMESPACE_STYLE,  XML_STYLE,          XML_TOK_COLUMN_SEP_STYLE },
+    { XmlNamespace::STYLE,  XML_WIDTH,          XML_TOK_COLUMN_SEP_WIDTH },
+    { XmlNamespace::STYLE,  XML_COLOR,          XML_TOK_COLUMN_SEP_COLOR },
+    { XmlNamespace::STYLE,  XML_HEIGHT,         XML_TOK_COLUMN_SEP_HEIGHT },
+    { XmlNamespace::STYLE,  XML_VERTICAL_ALIGN, XML_TOK_COLUMN_SEP_ALIGN },
+    { XmlNamespace::STYLE,  XML_STYLE,          XML_TOK_COLUMN_SEP_STYLE },
     XML_TOKEN_MAP_END
 };
 
@@ -276,7 +276,7 @@ XMLTextColumnsContext::XMLTextColumnsContext(
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
         const OUString& rValue = xAttrList->getValueByIndex( i );
-        if( XML_NAMESPACE_FO == nPrefix )
+        if( XmlNamespace::FO == nPrefix )
         {
             if( IsXMLToken( aLocalName, XML_COLUMN_COUNT ) &&
                 ::sax::Converter::convertNumber( nVal, rValue, 0, SHRT_MAX ))
@@ -299,7 +299,7 @@ SvXMLImportContextRef XMLTextColumnsContext::CreateChildContext(
 {
     SvXMLImportContext *pContext = nullptr;
 
-    if( XML_NAMESPACE_STYLE == nPrefix &&
+    if( XmlNamespace::STYLE == nPrefix &&
         IsXMLToken( rLocalName, XML_COLUMN ) )
     {
         const rtl::Reference<XMLTextColumnContext_Impl> xColumn{
@@ -314,7 +314,7 @@ SvXMLImportContextRef XMLTextColumnsContext::CreateChildContext(
 
         pContext = xColumn.get();
     }
-    else if( XML_NAMESPACE_STYLE == nPrefix &&
+    else if( XmlNamespace::STYLE == nPrefix &&
              IsXMLToken( rLocalName, XML_COLUMN_SEP ) )
     {
         mxColumnSep.set(
diff --git a/xmloff/source/text/XMLTextColumnsExport.cxx b/xmloff/source/text/XMLTextColumnsExport.cxx
index 07fc9cb5b99c..6a4a75a44d77 100644
--- a/xmloff/source/text/XMLTextColumnsExport.cxx
+++ b/xmloff/source/text/XMLTextColumnsExport.cxx
@@ -66,7 +66,7 @@ void XMLTextColumnsExport::exportXML( const Any& rAny )
     sal_Int32 nCount = aColumns.getLength();
 
     OUStringBuffer sValue;
-    GetExport().AddAttribute( XML_NAMESPACE_FO, XML_COLUMN_COUNT,
+    GetExport().AddAttribute( XmlNamespace::FO, XML_COLUMN_COUNT,
                               OUString::number(nCount ? nCount : 1) );
 
     // handle 'automatic' columns
@@ -82,13 +82,13 @@ void XMLTextColumnsExport::exportXML( const Any& rAny )
             OUStringBuffer aBuffer;
             GetExport().GetMM100UnitConverter().convertMeasureToXML(
                 aBuffer, nDistance );
-            GetExport().AddAttribute( XML_NAMESPACE_FO,
+            GetExport().AddAttribute( XmlNamespace::FO,
                                       XML_COLUMN_GAP,
                                       aBuffer.makeStringAndClear() );
         }
     }
 
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE, XML_COLUMNS,
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE, XML_COLUMNS,
                               true, true );
 
     if( xPropSet.is() )
@@ -102,7 +102,7 @@ void XMLTextColumnsExport::exportXML( const Any& rAny )
             aAny >>= nWidth;
             GetExport().GetMM100UnitConverter().convertMeasureToXML( sValue,
                                                                 nWidth );
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_WIDTH,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_WIDTH,
                                       sValue.makeStringAndClear() );
 
             // style:color
@@ -110,7 +110,7 @@ void XMLTextColumnsExport::exportXML( const Any& rAny )
             sal_Int32 nColor = 0;
             aAny >>= nColor;
             ::sax::Converter::convertColor( sValue, nColor );
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_COLOR,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_COLOR,
                                       sValue.makeStringAndClear() );
 
             // style:height
@@ -118,7 +118,7 @@ void XMLTextColumnsExport::exportXML( const Any& rAny )
             sal_Int8 nHeight = 0;
             aAny >>= nHeight;
             ::sax::Converter::convertPercent( sValue, nHeight );
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_HEIGHT,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_HEIGHT,
                                       sValue.makeStringAndClear() );
 
             // style::style
@@ -137,7 +137,7 @@ void XMLTextColumnsExport::exportXML( const Any& rAny )
                          break;
             }
             if ( eStr != XML_TOKEN_INVALID )
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_STYLE, eStr );
+                GetExport().AddAttribute( XmlNamespace::STYLE, XML_STYLE, eStr );
 
             // style:vertical-align
             aAny = xPropSet->getPropertyValue( gsSeparatorLineVerticalAlignment );
@@ -155,11 +155,11 @@ void XMLTextColumnsExport::exportXML( const Any& rAny )
             }
 
             if( eStr != XML_TOKEN_INVALID)
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_VERTICAL_ALIGN, eStr );
 
             // style:column-sep
-            SvXMLElementExport aElement( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aElement( GetExport(), XmlNamespace::STYLE,
                                       XML_COLUMN_SEP,
                                       true, true );
         }
@@ -168,23 +168,23 @@ void XMLTextColumnsExport::exportXML( const Any& rAny )
     for (const auto& rColumn : aColumns)
     {
         // style:rel-width
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_REL_WIDTH,
+        GetExport().AddAttribute( XmlNamespace::STYLE, XML_REL_WIDTH,
                                   OUString::number(rColumn.Width) + "*" );
 
         // fo:margin-left
         GetExport().GetMM100UnitConverter().convertMeasureToXML( sValue,
                                                        rColumn.LeftMargin );
-        GetExport().AddAttribute( XML_NAMESPACE_FO, XML_START_INDENT,
+        GetExport().AddAttribute( XmlNamespace::FO, XML_START_INDENT,
                                        sValue.makeStringAndClear() );
 
         // fo:margin-right
         GetExport().GetMM100UnitConverter().convertMeasureToXML( sValue,
                                                        rColumn.RightMargin );
-        GetExport().AddAttribute( XML_NAMESPACE_FO, XML_END_INDENT,
+        GetExport().AddAttribute( XmlNamespace::FO, XML_END_INDENT,
                                     sValue.makeStringAndClear() );
 
         // style:column
-        SvXMLElementExport aElement( GetExport(), XML_NAMESPACE_STYLE, XML_COLUMN,
+        SvXMLElementExport aElement( GetExport(), XmlNamespace::STYLE, XML_COLUMN,
                                   true, true );
     }
 }
diff --git a/xmloff/source/text/XMLTextFrameContext.cxx b/xmloff/source/text/XMLTextFrameContext.cxx
index ea3deca2b963..1a4c978d0b20 100644
--- a/xmloff/source/text/XMLTextFrameContext.cxx
+++ b/xmloff/source/text/XMLTextFrameContext.cxx
@@ -181,7 +181,7 @@ XMLTextFrameParam_Impl::XMLTextFrameParam_Impl(
 
         OUString aLocalName;
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName );
-        if ( XML_NAMESPACE_DRAW == nPrefix )
+        if ( XmlNamespace::DRAW == nPrefix )
         {
             if( IsXMLToken(aLocalName, XML_VALUE) )
             {
@@ -1180,7 +1180,7 @@ SvXMLImportContextRef XMLTextFrameContext_Impl::CreateChildContext(
 {
     SvXMLImportContext *pContext = nullptr;
 
-    if( XML_NAMESPACE_DRAW == nPrefix )
+    if( XmlNamespace::DRAW == nPrefix )
     {
         if ( (nType == XML_TEXT_FRAME_APPLET || nType == XML_TEXT_FRAME_PLUGIN) &&
               IsXMLToken( rLocalName, XML_PARAM ) )
@@ -1190,7 +1190,7 @@ SvXMLImportContextRef XMLTextFrameContext_Impl::CreateChildContext(
                                                xAttrList, aParamMap );
         }
     }
-    else if( XML_NAMESPACE_OFFICE == nPrefix )
+    else if( XmlNamespace::OFFICE == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_BINARY_DATA ) )
         {
@@ -1217,9 +1217,9 @@ SvXMLImportContextRef XMLTextFrameContext_Impl::CreateChildContext(
     // Correction of condition which also avoids warnings. (#i100480#)
     if( !pContext &&
         ( XML_TEXT_FRAME_OBJECT == nType &&
-          ( ( XML_NAMESPACE_OFFICE == nPrefix &&
+          ( ( XmlNamespace::OFFICE == nPrefix &&
               IsXMLToken( rLocalName, XML_DOCUMENT ) ) ||
-            ( XML_NAMESPACE_MATH == nPrefix &&
+            ( XmlNamespace::MATH == nPrefix &&
               IsXMLToken( rLocalName, XML_MATH ) ) ) ) )
     {
         if( !xPropSet.is() && !bCreateFailed )
@@ -1377,7 +1377,7 @@ XMLTextFrameContext::XMLTextFrameContext(
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName );
         // New distinguish attribute between Writer objects and Draw objects is:
         // Draw objects have an automatic style without a parent style (#i51726#)
-        if ( XML_NAMESPACE_DRAW == nPrefix &&
+        if ( XmlNamespace::DRAW == nPrefix &&
              IsXMLToken( aLocalName, XML_STYLE_NAME ) )
         {
             OUString aStyleName = xAttrList->getValueByIndex( i );
@@ -1392,7 +1392,7 @@ XMLTextFrameContext::XMLTextFrameContext(
                 }
             }
         }
-        else if ( XML_NAMESPACE_TEXT == nPrefix &&
+        else if ( XmlNamespace::TEXT == nPrefix &&
                   IsXMLToken( aLocalName, XML_ANCHOR_TYPE ) )
         {
             TextContentAnchorType eNew;
@@ -1457,7 +1457,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
     if( !m_xImplContext.is() )
     {
         // no child exists
-        if( XML_NAMESPACE_DRAW == p_nPrefix )
+        if( XmlNamespace::DRAW == p_nPrefix )
         {
             sal_uInt16 nFrameType = USHRT_MAX;
             if( IsXMLToken( rLocalName, XML_TEXT_BOX ) )
@@ -1496,7 +1496,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
                         OUString    aLocalName;
                         sal_uInt16  nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( xAttrList->getNameByIndex( n ), &aLocalName );
 
-                        if( nPrefix == XML_NAMESPACE_DRAW && IsXMLToken( aLocalName, XML_MIME_TYPE ) )
+                        if( nPrefix == XmlNamespace::DRAW && IsXMLToken( aLocalName, XML_MIME_TYPE ) )
                         {
                             if( xAttrList->getValueByIndex( n ) == "application/vnd.sun.star.media" )
                                 bMedia = true;
@@ -1541,7 +1541,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
             }
         }
     }
-    else if(getSupportsMultipleContents() && XML_NAMESPACE_DRAW == p_nPrefix && IsXMLToken(rLocalName, XML_IMAGE))
+    else if(getSupportsMultipleContents() && XmlNamespace::DRAW == p_nPrefix && IsXMLToken(rLocalName, XML_IMAGE))
     {
         // read another image
         xContext = new XMLTextFrameContext_Impl(
@@ -1552,7 +1552,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
         addContent(*m_xImplContext);
     }
     else if( m_bSupportsReplacement && !m_xReplImplContext.is() &&
-             XML_NAMESPACE_DRAW == p_nPrefix &&
+             XmlNamespace::DRAW == p_nPrefix &&
              IsXMLToken( rLocalName, XML_IMAGE ) )
     {
         // read replacement image
@@ -1567,7 +1567,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
     else if( nullptr != dynamic_cast< const XMLTextFrameContext_Impl*>( m_xImplContext.get() ))
     {
         // the child is a writer frame
-        if( XML_NAMESPACE_SVG == p_nPrefix )
+        if( XmlNamespace::SVG == p_nPrefix )
         {
             // Implement Title/Description Elements UI (#i73249#)
             const bool bOld = SvXMLImport::OOo_2x >= GetImport().getGeneratorVersion();
@@ -1607,7 +1607,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
                 }
             }
         }
-        else if( XML_NAMESPACE_DRAW == p_nPrefix )
+        else if( XmlNamespace::DRAW == p_nPrefix )
         {
             Reference < XPropertySet > xPropSet;
             if( IsXMLToken( rLocalName, XML_CONTOUR_POLYGON ) )
@@ -1640,7 +1640,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
                     xContext = new XMLImageMapContext( GetImport(), p_nPrefix, rLocalName, xPropSet );
             }
         }
-        else if( (XML_NAMESPACE_OFFICE == p_nPrefix) && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
+        else if( (XmlNamespace::OFFICE == p_nPrefix) && IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
         {
             if (getSupportsMultipleContents())
             {   // tdf#103567 ensure props are set on surviving shape
@@ -1661,7 +1661,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
             }
         }
     }
-    else if( p_nPrefix == XML_NAMESPACE_SVG &&  // #i68101#
+    else if( p_nPrefix == XmlNamespace::SVG &&  // #i68101#
                 (IsXMLToken( rLocalName, XML_TITLE ) || IsXMLToken( rLocalName, XML_DESC ) ) )
     {
         if (getSupportsMultipleContents())
@@ -1671,7 +1671,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
         }
         xContext = m_xImplContext->CreateChildContext( p_nPrefix, rLocalName, xAttrList );
     }
-    else if (p_nPrefix == XML_NAMESPACE_LO_EXT && (IsXMLToken(rLocalName, XML_SIGNATURELINE)))
+    else if (p_nPrefix == XmlNamespace::LO_EXT && (IsXMLToken(rLocalName, XML_SIGNATURELINE)))
     {
         if (getSupportsMultipleContents())
         {   // tdf#103567 ensure props are set on surviving shape
@@ -1680,7 +1680,7 @@ SvXMLImportContextRef XMLTextFrameContext::CreateChildContext(
         }
         xContext = m_xImplContext->CreateChildContext(p_nPrefix, rLocalName, xAttrList);
     }
-    else if (p_nPrefix == XML_NAMESPACE_LO_EXT && (IsXMLToken(rLocalName, XML_QRCODE)))
+    else if (p_nPrefix == XmlNamespace::LO_EXT && (IsXMLToken(rLocalName, XML_QRCODE)))
     {
         if (getSupportsMultipleContents())
         {   // tdf#103567 ensure props are set on surviving shape
diff --git a/xmloff/source/text/XMLTextFrameHyperlinkContext.cxx b/xmloff/source/text/XMLTextFrameHyperlinkContext.cxx
index e92d4656f47a..723f048d16d1 100644
--- a/xmloff/source/text/XMLTextFrameHyperlinkContext.cxx
+++ b/xmloff/source/text/XMLTextFrameHyperlinkContext.cxx
@@ -109,7 +109,7 @@ SvXMLImportContextRef XMLTextFrameHyperlinkContext::CreateChildContext(
     SvXMLImportContext *pContext = nullptr;
     XMLTextFrameContext *pTextFrameContext = nullptr;
 
-    if( XML_NAMESPACE_DRAW == nPrefix )
+    if( XmlNamespace::DRAW == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_FRAME ) )
             pTextFrameContext = new XMLTextFrameContext( GetImport(), nPrefix,
diff --git a/xmloff/source/text/XMLTextListItemContext.cxx b/xmloff/source/text/XMLTextListItemContext.cxx
index e2c059d69b1c..d6134bae564a 100644
--- a/xmloff/source/text/XMLTextListItemContext.cxx
+++ b/xmloff/source/text/XMLTextListItemContext.cxx
@@ -61,14 +61,14 @@ XMLTextListItemContext::XMLTextListItemContext(
         sal_uInt16 nPrefix =
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
-        if( !bIsHeader && XML_NAMESPACE_TEXT == nPrefix &&
+        if( !bIsHeader && XmlNamespace::TEXT == nPrefix &&
             IsXMLToken( aLocalName, XML_START_VALUE ) )
         {
             sal_Int32 nTmp = rValue.toInt32();
             if( nTmp >= 0 && nTmp <= SHRT_MAX )
                 nStartValue = static_cast<sal_Int16>(nTmp);
         }
-        else if ( nPrefix == XML_NAMESPACE_TEXT &&
+        else if ( nPrefix == XmlNamespace::TEXT &&
                   IsXMLToken( aLocalName, XML_STYLE_OVERRIDE ) )
         {
             const OUString& sListStyleOverrideName = rValue;
@@ -105,7 +105,7 @@ XMLTextListItemContext::XMLTextListItemContext(
                 }
             }
         }
-        else if ( (XML_NAMESPACE_XML == nPrefix) &&
+        else if ( (XmlNamespace::XML == nPrefix) &&
              IsXMLToken(aLocalName, XML_ID)   )
         {
 //FIXME: there is no UNO API for list items
diff --git a/xmloff/source/text/XMLTextMarkImportContext.cxx b/xmloff/source/text/XMLTextMarkImportContext.cxx
index 9ffb3e5c30fd..d8aef22db8d7 100644
--- a/xmloff/source/text/XMLTextMarkImportContext.cxx
+++ b/xmloff/source/text/XMLTextMarkImportContext.cxx
@@ -79,12 +79,12 @@ void XMLFieldParamImportContext::StartElement(const css::uno::Reference< css::xm
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
 
-        if ( (XML_NAMESPACE_FIELD == nPrefix) &&
+        if ( (XmlNamespace::FIELD == nPrefix) &&
              IsXMLToken(sLocalName, XML_NAME)   )
         {
             sName = xAttrList->getValueByIndex(nAttr);
         }
-        if ( (XML_NAMESPACE_FIELD == nPrefix) &&
+        if ( (XmlNamespace::FIELD == nPrefix) &&
              IsXMLToken(sLocalName, XML_VALUE)   )
         {
             sValue = xAttrList->getValueByIndex(nAttr);
@@ -522,18 +522,18 @@ bool XMLTextMarkImportContext::FindName(
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
 
-        if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+        if ( (XmlNamespace::TEXT == nPrefix) &&
              IsXMLToken(sLocalName, XML_NAME)   )
         {
             m_sBookmarkName = xAttrList->getValueByIndex(nAttr);
             bNameOK = true;
         }
-        else if ( (XML_NAMESPACE_XML == nPrefix) &&
+        else if ( (XmlNamespace::XML == nPrefix) &&
              IsXMLToken(sLocalName, XML_ID)   )
         {
             m_sXmlId = xAttrList->getValueByIndex(nAttr);
         }
-        else if ( XML_NAMESPACE_XHTML == nPrefix )
+        else if ( XmlNamespace::XHTML == nPrefix )
         {
             // RDFa
             if ( IsXMLToken( sLocalName, XML_ABOUT) )
@@ -554,7 +554,7 @@ bool XMLTextMarkImportContext::FindName(
                 m_sDatatype = xAttrList->getValueByIndex(nAttr);
             }
         }
-        else if ( (XML_NAMESPACE_FIELD == nPrefix) &&
+        else if ( (XmlNamespace::FIELD == nPrefix) &&
              IsXMLToken(sLocalName, XML_TYPE)   )
         {
             m_sFieldName = xAttrList->getValueByIndex(nAttr);
diff --git a/xmloff/source/text/XMLTextMasterPageContext.cxx b/xmloff/source/text/XMLTextMasterPageContext.cxx
index 90f4167e199e..359fdf84055d 100644
--- a/xmloff/source/text/XMLTextMasterPageContext.cxx
+++ b/xmloff/source/text/XMLTextMasterPageContext.cxx
@@ -87,7 +87,7 @@ XMLTextMasterPageContext::XMLTextMasterPageContext( SvXMLImport& rImport,
         const OUString& rAttrName = xAttrList->getNameByIndex( i );
         OUString aLocalName;
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName );
-        if( XML_NAMESPACE_STYLE == nPrefix )
+        if( XmlNamespace::STYLE == nPrefix )
         {
             if( IsXMLToken( aLocalName, XML_NAME ) )
             {
@@ -106,7 +106,7 @@ XMLTextMasterPageContext::XMLTextMasterPageContext( SvXMLImport& rImport,
                 sPageMasterName = xAttrList->getValueByIndex( i );
             }
         }
-        else if (XML_NAMESPACE_DRAW == nPrefix
+        else if (XmlNamespace::DRAW == nPrefix
                  && IsXMLToken(aLocalName, XML_STYLE_NAME))
         {
             m_sDrawingPageStyle = xAttrList->getValueByIndex(i);
diff --git a/xmloff/source/text/XMLTextMasterPageExport.cxx b/xmloff/source/text/XMLTextMasterPageExport.cxx
index 70c7dccadf94..3469453b8304 100644
--- a/xmloff/source/text/XMLTextMasterPageExport.cxx
+++ b/xmloff/source/text/XMLTextMasterPageExport.cxx
@@ -147,9 +147,9 @@ void XMLTextMasterPageExport::exportMasterPageContent(
         if( xHeaderText.is() )
         {
             if( !bHeader )
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_DISPLAY, XML_FALSE );
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE,
                                         XML_HEADER, true, true );
             exportHeaderFooterContent( xHeaderText, false );
         }
@@ -157,9 +157,9 @@ void XMLTextMasterPageExport::exportMasterPageContent(
         if( xHeaderTextLeft.is() && xHeaderTextLeft != xHeaderText )
         {
             if (bHeaderLeftShared)
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_DISPLAY, XML_FALSE );
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE,
                                         XML_HEADER_LEFT, true, true );
             exportHeaderFooterContent( xHeaderTextLeft, false );
         }
@@ -168,13 +168,13 @@ void XMLTextMasterPageExport::exportMasterPageContent(
             && SvtSaveOptions::ODFSVER_012 < nVersion)
         {
             if (bHeaderFirstShared)
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_DISPLAY, XML_FALSE );
             // ODF 1.3 OFFICE-3789
             SvXMLElementExport aElem( GetExport(),
                                         SvtSaveOptions::ODFSVER_013 <= nVersion
-                                            ? XML_NAMESPACE_STYLE
-                                            : XML_NAMESPACE_LO_EXT,
+                                            ? XmlNamespace::STYLE
+                                            : XmlNamespace::LO_EXT,
                                         XML_HEADER_FIRST, true, true );
             exportHeaderFooterContent( xHeaderTextFirst, false );
         }
@@ -200,9 +200,9 @@ void XMLTextMasterPageExport::exportMasterPageContent(
         if( xFooterText.is() )
         {
             if( !bFooter )
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_DISPLAY, XML_FALSE );
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE,
                                         XML_FOOTER, true, true );
             exportHeaderFooterContent( xFooterText, false );
         }
@@ -210,9 +210,9 @@ void XMLTextMasterPageExport::exportMasterPageContent(
         if( xFooterTextLeft.is() && xFooterTextLeft != xFooterText )
         {
             if (bFooterLeftShared)
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_DISPLAY, XML_FALSE );
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_STYLE,
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::STYLE,
                                         XML_FOOTER_LEFT, true, true );
             exportHeaderFooterContent( xFooterTextLeft, false );
         }
@@ -221,13 +221,13 @@ void XMLTextMasterPageExport::exportMasterPageContent(
             && SvtSaveOptions::ODFSVER_012 < nVersion)
         {
             if (bFooterFirstShared)
-                GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_DISPLAY, XML_FALSE );
             // ODF 1.3 OFFICE-3789
             SvXMLElementExport aElem( GetExport(),
                                         SvtSaveOptions::ODFSVER_013 <= nVersion
-                                            ? XML_NAMESPACE_STYLE
-                                            : XML_NAMESPACE_LO_EXT,
+                                            ? XmlNamespace::STYLE
+                                            : XmlNamespace::LO_EXT,
                                         XML_FOOTER_FIRST, true, true );
             exportHeaderFooterContent( xFooterTextFirst, false );
         }
diff --git a/xmloff/source/text/XMLTextMasterStylesContext.cxx b/xmloff/source/text/XMLTextMasterStylesContext.cxx
index ff3895467294..21fb2b306442 100644
--- a/xmloff/source/text/XMLTextMasterStylesContext.cxx
+++ b/xmloff/source/text/XMLTextMasterStylesContext.cxx
@@ -53,7 +53,7 @@ SvXMLStyleContext *XMLTextMasterStylesContext::CreateStyleChildContext(
 {
     SvXMLStyleContext *pContext = nullptr;
 
-    if( XML_NAMESPACE_STYLE == nPrefix &&
+    if( XmlNamespace::STYLE == nPrefix &&
         IsXMLToken( rLocalName, XML_MASTER_PAGE ) &&
          InsertStyleFamily( XmlStyleFamily::MASTER_PAGE ) )
         pContext = new XMLTextMasterPageContext(
diff --git a/xmloff/source/text/XMLTextShapeStyleContext.cxx b/xmloff/source/text/XMLTextShapeStyleContext.cxx
index 746dc2f443da..ceef1d71b946 100644
--- a/xmloff/source/text/XMLTextShapeStyleContext.cxx
+++ b/xmloff/source/text/XMLTextShapeStyleContext.cxx
@@ -127,7 +127,7 @@ void XMLTextShapeStyleContext::SetAttribute( sal_uInt16 nPrefixKey,
                                         const OUString& rLocalName,
                                         const OUString& rValue )
 {
-    if( XML_NAMESPACE_STYLE == nPrefixKey &&
+    if( XmlNamespace::STYLE == nPrefixKey &&
         IsXMLToken( rLocalName, XML_AUTO_UPDATE ) )
     {
           if( IsXMLToken( rValue, XML_TRUE ) )
@@ -163,7 +163,7 @@ SvXMLImportContextRef XMLTextShapeStyleContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix )
+    if( XmlNamespace::STYLE == nPrefix || XmlNamespace::LO_EXT == nPrefix )
     {
         sal_uInt32 nFamily = 0;
         if( IsXMLToken( rLocalName, XML_TEXT_PROPERTIES ) )
@@ -184,7 +184,7 @@ SvXMLImportContextRef XMLTextShapeStyleContext::CreateChildContext(
             }
         }
     }
-    else if ( (XML_NAMESPACE_OFFICE == nPrefix) &&
+    else if ( (XmlNamespace::OFFICE == nPrefix) &&
               IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
     {
         // create and remember events import context
diff --git a/xmloff/source/text/XMLTrackedChangesImportContext.cxx b/xmloff/source/text/XMLTrackedChangesImportContext.cxx
index 2e9b670de2e2..2c3e5e171b80 100644
--- a/xmloff/source/text/XMLTrackedChangesImportContext.cxx
+++ b/xmloff/source/text/XMLTrackedChangesImportContext.cxx
@@ -57,7 +57,7 @@ void XMLTrackedChangesImportContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(i), &sLocalName );
 
-        if ( XML_NAMESPACE_TEXT == nPrefix )
+        if ( XmlNamespace::TEXT == nPrefix )
         {
             if ( IsXMLToken( sLocalName, XML_TRACK_CHANGES ) )
             {
@@ -83,7 +83,7 @@ SvXMLImportContextRef XMLTrackedChangesImportContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+    if ( (XmlNamespace::TEXT == nPrefix) &&
          IsXMLToken( rLocalName, XML_CHANGED_REGION ) )
     {
         xContext = new XMLChangedRegionImportContext(GetImport(),
diff --git a/xmloff/source/text/txtdrope.cxx b/xmloff/source/text/txtdrope.cxx
index dc819f81e2f5..4d171fb5915a 100644
--- a/xmloff/source/text/txtdrope.cxx
+++ b/xmloff/source/text/txtdrope.cxx
@@ -54,7 +54,7 @@ void XMLTextDropCapExport::exportXML( const Any& rAny,
         SvXMLUnitConverter& rUnitConv = rExport.GetMM100UnitConverter();
 
         // style:lines
-        rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_LINES,
+        rExport.AddAttribute( XmlNamespace::STYLE, XML_LINES,
                               OUString::number( aFormat.Lines ) );
 
         // style:length
@@ -67,23 +67,23 @@ void XMLTextDropCapExport::exportXML( const Any& rAny,
             sValue = OUString::number(aFormat.Count);
         }
         if( !sValue.isEmpty() )
-            rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_LENGTH, sValue );
+            rExport.AddAttribute( XmlNamespace::STYLE, XML_LENGTH, sValue );
 
         // style:distance
         if( aFormat.Distance > 0 )
         {
             rUnitConv.convertMeasureToXML( sBuffer, aFormat.Distance );
-            rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_DISTANCE,
+            rExport.AddAttribute( XmlNamespace::STYLE, XML_DISTANCE,
                                   sBuffer.makeStringAndClear() );
         }
 
         // style:style-name
         if( !rStyleName.isEmpty() )
-            rExport.AddAttribute( XML_NAMESPACE_STYLE, XML_STYLE_NAME,
+            rExport.AddAttribute( XmlNamespace::STYLE, XML_STYLE_NAME,
                                   rExport.EncodeStyleName( rStyleName ) );
     }
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_STYLE, XML_DROP_CAP,
+    SvXMLElementExport aElem( rExport, XmlNamespace::STYLE, XML_DROP_CAP,
                               false, false );
 }
 
diff --git a/xmloff/source/text/txtdropi.cxx b/xmloff/source/text/txtdropi.cxx
index 61fea910ca64..fa1216691932 100644
--- a/xmloff/source/text/txtdropi.cxx
+++ b/xmloff/source/text/txtdropi.cxx
@@ -51,10 +51,10 @@ enum SvXMLTokenMapDropAttrs
 
 const SvXMLTokenMapEntry aDropAttrTokenMap[] =
 {
-    { XML_NAMESPACE_STYLE, XML_LINES,       XML_TOK_DROP_LINES  },
-    { XML_NAMESPACE_STYLE, XML_LENGTH,      XML_TOK_DROP_LENGTH },
-    { XML_NAMESPACE_STYLE, XML_DISTANCE,    XML_TOK_DROP_DISTANCE   },
-    { XML_NAMESPACE_STYLE, XML_STYLE_NAME,  XML_TOK_DROP_STYLE  },
+    { XmlNamespace::STYLE, XML_LINES,       XML_TOK_DROP_LINES  },
+    { XmlNamespace::STYLE, XML_LENGTH,      XML_TOK_DROP_LENGTH },
+    { XmlNamespace::STYLE, XML_DISTANCE,    XML_TOK_DROP_DISTANCE   },
+    { XmlNamespace::STYLE, XML_STYLE_NAME,  XML_TOK_DROP_STYLE  },
     XML_TOKEN_MAP_END
 };
 
diff --git a/xmloff/source/text/txtflde.cxx b/xmloff/source/text/txtflde.cxx
index 480f23baf0c1..c7152608a047 100644
--- a/xmloff/source/text/txtflde.cxx
+++ b/xmloff/source/text/txtflde.cxx
@@ -1010,7 +1010,7 @@ void XMLTextFieldExport::ExportField(
                 xRangePropSetInfo );
     }
     SvXMLElementExport aHyperlink( GetExport(), bHasHyperlink,
-                                   XML_NAMESPACE_TEXT, XML_A,
+                                   XmlNamespace::TEXT, XML_A,
                                    false, false );
 
     if( bHasHyperlink )
@@ -1039,11 +1039,11 @@ void XMLTextFieldExport::ExportField(
         if( bHasStyle )
         {
             // export <text:span> element
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                             GetExport().EncodeStyleName( sStyle ) );
         }
         SvXMLElementExport aSpan( GetExport(), bHasStyle,
-                                  XML_NAMESPACE_TEXT, XML_SPAN,
+                                  XmlNamespace::TEXT, XML_SPAN,
                                   false, false);
 
         // finally, export the field itself
@@ -1073,7 +1073,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         // author field: fixed, field (sub-)type
         if (xPropSetInfo->hasPropertyByName(gsPropertyIsFixed))
         {
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_FIXED,
+            GetExport().AddAttribute(XmlNamespace::TEXT, XML_FIXED,
                                  (GetBoolProperty(gsPropertyIsFixed, rPropSet) ? XML_TRUE : XML_FALSE) );
         }
         ExportElement(MapAuthorFieldName(rPropSet), sPresentation);
@@ -1103,7 +1103,7 @@ void XMLTextFieldExport::ExportFieldHelper(
                       GetStringProperty(gsPropertyVariableName, rPropSet));
         ProcessDisplay(GetBoolProperty(gsPropertyIsVisible, rPropSet),
                        false);
-        ProcessString(XML_FORMULA, XML_NAMESPACE_OOOW,
+        ProcessString(XML_FORMULA, XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyContent, rPropSet),
                       sPresentation);
         ProcessValueAndType(IsStringField(nToken, rPropSet),
@@ -1146,7 +1146,7 @@ void XMLTextFieldExport::ExportFieldHelper(
                       GetStringProperty(gsPropertyHint , rPropSet));
         ProcessDisplay(GetBoolProperty(gsPropertyIsVisible, rPropSet),
                        false);
-        ProcessString(XML_FORMULA, XML_NAMESPACE_OOOW,
+        ProcessString(XML_FORMULA, XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyContent, rPropSet),
                       sPresentation);
         ProcessValueAndType(IsStringField(nToken, rPropSet),
@@ -1205,7 +1205,7 @@ void XMLTextFieldExport::ExportFieldHelper(
                           GetInt16Property(gsPropertySequenceValue, rPropSet),
                           sName));
         ProcessString(XML_NAME, sName);
-        ProcessString(XML_FORMULA,  XML_NAMESPACE_OOOW,
+        ProcessString(XML_FORMULA,  XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyContent, rPropSet),
                       sPresentation);
         ProcessNumberingType(GetInt16Property(gsPropertyNumberingType,
@@ -1218,7 +1218,7 @@ void XMLTextFieldExport::ExportFieldHelper(
     {
         // formula field: formula, format&value
         bool bCmd = GetBoolProperty(gsPropertyIsShowFormula, rPropSet);
-        ProcessString(XML_FORMULA,  XML_NAMESPACE_OOOW,
+        ProcessString(XML_FORMULA,  XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyContent, rPropSet),
                       sPresentation);
         ProcessDisplay(true, bCmd);
@@ -1390,7 +1390,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         ProcessString(XML_TABLE_NAME,
                       GetStringProperty(gsPropertyDataTableName, rPropSet));
         ProcessCommandType(GetIntProperty(gsPropertyDataCommandType, rPropSet));
-        ProcessString(XML_CONDITION, XML_NAMESPACE_OOOW,
+        ProcessString(XML_CONDITION, XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyCondition, rPropSet));
         DBG_ASSERT(sPresentation.isEmpty(),
                    "Unexpected presentation for database next field");
@@ -1402,7 +1402,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         ProcessString(XML_TABLE_NAME,
                       GetStringProperty(gsPropertyDataTableName, rPropSet));
         ProcessCommandType(GetIntProperty(gsPropertyDataCommandType, rPropSet));
-        ProcessString(XML_CONDITION, XML_NAMESPACE_OOOW,
+        ProcessString(XML_CONDITION, XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyCondition, rPropSet));
         ProcessInteger(XML_ROW_NUMBER,
                        GetIntProperty(gsPropertySetNumber, rPropSet));
@@ -1514,7 +1514,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         break;
 
     case FIELD_ID_CONDITIONAL_TEXT:
-        ProcessString(XML_CONDITION, XML_NAMESPACE_OOOW,
+        ProcessString(XML_CONDITION, XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyCondition, rPropSet));
         ProcessString(XML_STRING_VALUE_IF_TRUE,
                       GetStringProperty(gsPropertyTrueContent, rPropSet));
@@ -1527,7 +1527,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         break;
 
     case FIELD_ID_HIDDEN_TEXT:
-        ProcessString(XML_CONDITION, XML_NAMESPACE_OOOW,
+        ProcessString(XML_CONDITION, XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyCondition, rPropSet));
         ProcessString(XML_STRING_VALUE,
                       GetStringProperty(gsPropertyContent, rPropSet));
@@ -1538,7 +1538,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         break;
 
     case FIELD_ID_HIDDEN_PARAGRAPH:
-        ProcessString(XML_CONDITION, XML_NAMESPACE_OOOW,
+        ProcessString(XML_CONDITION, XmlNamespace::OOOW,
                       GetStringProperty(gsPropertyCondition, rPropSet));
         ProcessBoolean(XML_IS_HIDDEN,
                        GetBoolProperty(gsPropertyIsHidden, rPropSet),
@@ -1618,7 +1618,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         {
             // export text:reference-language attribute, if not empty
             ProcessString(XML_REFERENCE_LANGUAGE,
-                    GetStringProperty(gsPropertyReferenceFieldLanguage, rPropSet), true, XML_NAMESPACE_LO_EXT);
+                    GetStringProperty(gsPropertyReferenceFieldLanguage, rPropSet), true, XmlNamespace::LO_EXT);
         }
         ExportElement(
             MapReferenceSource(
@@ -1640,7 +1640,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         {
             // export text:reference-language attribute, if not empty
             ProcessString(XML_REFERENCE_LANGUAGE,
-                      GetStringProperty(gsPropertyReferenceFieldLanguage, rPropSet), true, XML_NAMESPACE_LO_EXT);
+                      GetStringProperty(gsPropertyReferenceFieldLanguage, rPropSet), true, XmlNamespace::LO_EXT);
         }
         ExportElement(
             MapReferenceSource(GetInt16Property(
@@ -1651,7 +1651,7 @@ void XMLTextFieldExport::ExportFieldHelper(
     case FIELD_ID_REF_FOOTNOTE:
     case FIELD_ID_REF_ENDNOTE:
         // reference to end-/footnote: format, generate name, (and element)
-        GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_NOTE_CLASS,
+        GetExport().AddAttribute( XmlNamespace::TEXT, XML_NOTE_CLASS,
             FIELD_ID_REF_ENDNOTE==nToken ? XML_ENDNOTE : XML_FOOTNOTE );
         ProcessString(XML_REFERENCE_FORMAT,
                       MapReferenceType(GetInt16Property(
@@ -1665,7 +1665,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         {
             // export text:reference-language attribute, if not empty
             ProcessString(XML_REFERENCE_LANGUAGE,
-                      GetStringProperty(gsPropertyReferenceFieldLanguage, rPropSet), true, XML_NAMESPACE_LO_EXT);
+                      GetStringProperty(gsPropertyReferenceFieldLanguage, rPropSet), true, XmlNamespace::LO_EXT);
         }
         ExportElement(
             MapReferenceSource(GetInt16Property(
@@ -1691,7 +1691,7 @@ void XMLTextFieldExport::ExportFieldHelper(
     {
         if (GetExport().getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
         {
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_LO_EXT, XML_PAGE_NAME, false, false );
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::LO_EXT, XML_PAGE_NAME, false, false );
             GetExport().Characters( sPresentation );
         }
         break;
@@ -1702,12 +1702,12 @@ void XMLTextFieldExport::ExportFieldHelper(
         // this field is a special case because it gets mapped onto a
         // hyperlink, rather than one of the regular text field.
         ProcessString(XML_HREF, GetExport().GetRelativeReference(GetStringProperty(gsPropertyURL, rPropSet)),
-                      false, XML_NAMESPACE_XLINK);
+                      false, XmlNamespace::XLINK);
         ProcessString(XML_TARGET_FRAME_NAME,
                       GetStringProperty(gsPropertyTargetFrame,rPropSet),
-                      true, XML_NAMESPACE_OFFICE);
-        GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-        SvXMLElementExport aUrlField(rExport, XML_NAMESPACE_TEXT, XML_A,
+                      true, XmlNamespace::OFFICE);
+        GetExport().AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+        SvXMLElementExport aUrlField(rExport, XmlNamespace::TEXT, XML_A,
                                      false, false);
         GetExport().Characters(sPresentation);
         break;
@@ -1723,14 +1723,14 @@ void XMLTextFieldExport::ExportFieldHelper(
     case FIELD_ID_SCRIPT:
         ProcessString(XML_LANGUAGE,
                       GetStringProperty(gsPropertyScriptType, rPropSet),
-                      true, XML_NAMESPACE_SCRIPT);
+                      true, XmlNamespace::SCRIPT);
         DBG_ASSERT(sPresentation.isEmpty(),
                    "Unexpected presentation for script field");
         if (GetBoolProperty(gsPropertyURLContent, rPropSet))
         {
             ProcessString(XML_HREF,
                           GetExport().GetRelativeReference(GetStringProperty(gsPropertyContent, rPropSet)),
-                          false, XML_NAMESPACE_XLINK);
+                          false, XmlNamespace::XLINK);
             ExportElement(XML_SCRIPT);
         }
         else
@@ -1751,7 +1751,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         rPropSet->getPropertyValue(gsPropertyName) >>= aName;
         if (!aName.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_OFFICE, XML_NAME, aName);
+            GetExport().AddAttribute(XmlNamespace::OFFICE, XML_NAME, aName);
             SvtSaveOptions::ODFSaneDefaultVersion eVersion = rExport.getSaneDefaultVersion();
             if (eVersion & SvtSaveOptions::ODFSVER_EXTENDED)
             {
@@ -1761,18 +1761,18 @@ void XMLTextFieldExport::ExportFieldHelper(
                 ::sax::Converter::convertBool(aResolvedTextBuffer, b);
                 aResolvedText = aResolvedTextBuffer.makeStringAndClear();
 
-                GetExport().AddAttribute(XML_NAMESPACE_LO_EXT, XML_RESOLVED,
+                GetExport().AddAttribute(XmlNamespace::LO_EXT, XML_RESOLVED,
                         aResolvedText);
             }
         }
-        SvXMLElementExport aElem(GetExport(), XML_NAMESPACE_OFFICE,
+        SvXMLElementExport aElem(GetExport(), XmlNamespace::OFFICE,
                                  XML_ANNOTATION, false, true);
 
         // author
         OUString aAuthor( GetStringProperty(gsPropertyAuthor, rPropSet) );
         if( !aAuthor.isEmpty() )
         {
-            SvXMLElementExport aCreatorElem( GetExport(), XML_NAMESPACE_DC,
+            SvXMLElementExport aCreatorElem( GetExport(), XmlNamespace::DC,
                                               XML_CREATOR, true,
                                               false );
             GetExport().Characters(aAuthor);
@@ -1783,7 +1783,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         {
             OUStringBuffer aBuffer;
             ::sax::Converter::convertDateTime(aBuffer, aDate, nullptr, true);
-            SvXMLElementExport aDateElem( GetExport(), XML_NAMESPACE_DC,
+            SvXMLElementExport aDateElem( GetExport(), XmlNamespace::DC,
                                               XML_DATE, true,
                                               false );
             GetExport().Characters(aBuffer.makeStringAndClear());
@@ -1798,8 +1798,8 @@ void XMLTextFieldExport::ExportFieldHelper(
                 // ODF 1.3 OFFICE-3776 export meta:creator-initials for ODF 1.3
                 SvXMLElementExport aCreatorElem( GetExport(),
                         (SvtSaveOptions::ODFSVER_013 <= GetExport().getSaneDefaultVersion())
-                            ? XML_NAMESPACE_META
-                            : XML_NAMESPACE_LO_EXT,
+                            ? XmlNamespace::META
+                            : XmlNamespace::LO_EXT,
 
                         (SvtSaveOptions::ODFSVER_013 <= GetExport().getSaneDefaultVersion())
                             ? XML_CREATOR_INITIALS
@@ -1848,7 +1848,7 @@ void XMLTextFieldExport::ExportFieldHelper(
     }
 
     case FIELD_ID_TABLE_FORMULA:
-        ProcessString( XML_FORMULA,  XML_NAMESPACE_OOOW,
+        ProcessString( XML_FORMULA,  XmlNamespace::OOOW,
                        GetStringProperty(gsPropertyContent, rPropSet) );
         ProcessDisplay( true,
                         GetBoolProperty(gsPropertyIsShowFormula, rPropSet) );
@@ -1873,7 +1873,7 @@ void XMLTextFieldExport::ExportFieldHelper(
         ProcessString(XML_HINT,
                       GetStringProperty(gsPropertyTooltip, rPropSet), true);
         SvXMLElementExport aElem( GetExport(),
-                                  XML_NAMESPACE_TEXT, XML_DROP_DOWN,
+                                  XmlNamespace::TEXT, XML_DROP_DOWN,
                                   false, false );
         ProcessStringSequence
             (GetStringSequenceProperty( gsPropertyItems, rPropSet ),
@@ -1885,19 +1885,19 @@ void XMLTextFieldExport::ExportFieldHelper(
 
     case FIELD_ID_DRAW_HEADER:
     {
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_PRESENTATION, XML_HEADER, false, false );
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::PRESENTATION, XML_HEADER, false, false );
     }
     break;
 
     case FIELD_ID_DRAW_FOOTER:
     {
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_PRESENTATION, XML_FOOTER, false, false );
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::PRESENTATION, XML_FOOTER, false, false );
     }
     break;
 
     case FIELD_ID_DRAW_DATE_TIME:
     {
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_PRESENTATION, XML_DATE_TIME, false, false );
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::PRESENTATION, XML_DATE_TIME, false, false );
     }
     break;
 
@@ -2021,7 +2021,7 @@ void XMLTextFieldExport::ExportFieldDeclarations(
     if ( !aVarName.empty() )
     {
         SvXMLElementExport aElem( GetExport(),
-                                  XML_NAMESPACE_TEXT,
+                                  XmlNamespace::TEXT,
                                   XML_VARIABLE_DECLS,
                                   true, true );
 
@@ -2076,7 +2076,7 @@ void XMLTextFieldExport::ExportFieldDeclarations(
     if ( !aSeqName.empty() )
     {
         SvXMLElementExport aElem( GetExport(),
-                                  XML_NAMESPACE_TEXT,
+                                  XmlNamespace::TEXT,
                                   XML_SEQUENCE_DECLS,
                                   true, true );
 
@@ -2114,7 +2114,7 @@ void XMLTextFieldExport::ExportFieldDeclarations(
     if ( !aUserName.empty() )
     {
         SvXMLElementExport aElem( GetExport(),
-                                  XML_NAMESPACE_TEXT,
+                                  XmlNamespace::TEXT,
                                   XML_USER_FIELD_DECLS,
                                   true, true );
 
@@ -2146,10 +2146,10 @@ void XMLTextFieldExport::ExportFieldDeclarations(
             {
                 // string: write regardless of default
                 ProcessString(XML_VALUE_TYPE, XML_STRING,
-                              XML_NAMESPACE_OFFICE);
+                              XmlNamespace::OFFICE);
                 ProcessString(XML_STRING_VALUE,
                               GetStringProperty(gsPropertyContent, xPropSet),
-                              false, XML_NAMESPACE_OFFICE );
+                              false, XmlNamespace::OFFICE );
             }
             ProcessString(XML_NAME, sVarName);
             ExportElement(XML_USER_FIELD_DECL, true);
@@ -2162,7 +2162,7 @@ void XMLTextFieldExport::ExportFieldDeclarations(
         return;
 
     SvXMLElementExport aElem( GetExport(),
-                              XML_NAMESPACE_TEXT,
+                              XmlNamespace::TEXT,
                               XML_DDE_CONNECTION_DECLS,
                               true, true );
 
@@ -2180,27 +2180,27 @@ void XMLTextFieldExport::ExportFieldDeclarations(
 
             ProcessString(XML_NAME,
                           GetStringProperty(gsPropertyName, xPropSet),
-                          false, XML_NAMESPACE_OFFICE);
+                          false, XmlNamespace::OFFICE);
 
             // export elements; can't use ProcessString because
             // elements are in office namespace
             ProcessString(XML_DDE_APPLICATION,
                           GetStringProperty(gsPropertyDDECommandType,
                                             xPropSet),
-                          false, XML_NAMESPACE_OFFICE);
+                          false, XmlNamespace::OFFICE);
             ProcessString(XML_DDE_TOPIC,
                           GetStringProperty(gsPropertyDDECommandFile,
                                             xPropSet),
-                          false, XML_NAMESPACE_OFFICE);
+                          false, XmlNamespace::OFFICE);
             ProcessString(XML_DDE_ITEM,
                           GetStringProperty(gsPropertyDDECommandElement,
                                             xPropSet),
-                          false, XML_NAMESPACE_OFFICE);
+                          false, XmlNamespace::OFFICE);
             bool bIsAutomaticUpdate = GetBoolProperty(
                 gsPropertyIsAutomaticUpdate, xPropSet);
             if (bIsAutomaticUpdate)
             {
-                GetExport().AddAttribute(XML_NAMESPACE_OFFICE,
+                GetExport().AddAttribute(XmlNamespace::OFFICE,
                                          XML_AUTOMATIC_UPDATE,
                                          XML_TRUE);
             }
@@ -2233,7 +2233,7 @@ void XMLTextFieldExport::ExportElement(enum XMLTokenEnum eElementName,
     if (XML_TOKEN_INVALID != eElementName)
     {
         // Element
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                                   eElementName, bAddSpace, bAddSpace );
     } // else: ignore
 }
@@ -2245,7 +2245,7 @@ void XMLTextFieldExport::ExportElement(enum XMLTokenEnum eElementName,
     if (eElementName != XML_TOKEN_INVALID)
     {
         // Element
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                 eElementName, false, false );
         // export content
         GetExport().Characters(sContent);
@@ -2271,7 +2271,7 @@ void XMLTextFieldExport::ExportMacro(
                   rContent);
 
     // the element
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                               XML_EXECUTE_MACRO, false, false );
 
     // the <office:events>-macro:
@@ -2345,7 +2345,7 @@ void XMLTextFieldExport::ExportMetaField(
     }
 
     SvXMLElementExport aElem( GetExport(), doExport,
-        XML_NAMESPACE_TEXT, XML_META_FIELD, false, false );
+        XmlNamespace::TEXT, XML_META_FIELD, false, false );
 
     // recurse to export content
     GetExport().GetTextParagraphExport()->
@@ -2407,7 +2407,7 @@ void XMLTextFieldExport::ProcessValueAndType(
                     GetExport().getDataStyleName(nFormatKey, bTimeStyle);
                 if( !sDataStyleName.isEmpty() )
                 {
-                    GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+                    GetExport().AddAttribute( XmlNamespace::STYLE,
                                               XML_DATA_STYLE_NAME,
                                                 sDataStyleName );
                 } // else: ignore (no valid number format)
@@ -2435,7 +2435,7 @@ void XMLTextFieldExport::ProcessDisplay(bool bIsVisible,
     // omit attribute if default
     if (eValue != XML_VALUE)
     {
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_DISPLAY, eValue);
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_DISPLAY, eValue);
     }
 }
 
@@ -2451,7 +2451,7 @@ void XMLTextFieldExport::ProcessBoolean(enum XMLTokenEnum eName,
     // write attribute (if different than default)
     // negate to force 0/1 values (and make sal_Bool comparable)
     if ((!bBool) != (!bDefault)) {
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, eName,
+        GetExport().AddAttribute(XmlNamespace::TEXT, eName,
                                  (bBool ? XML_TRUE : XML_FALSE) );
     }
 }
@@ -2544,7 +2544,7 @@ void XMLTextFieldExport::ProcessParagraphSequence(
     while (aEnumerator.getNextToken(aSubString))
     {
         SvXMLElementExport aParagraph(
-            GetExport(), XML_NAMESPACE_TEXT, XML_P, true, false);
+            GetExport(), XmlNamespace::TEXT, XML_P, true, false);
         GetExport().Characters(aSubString);
     }
 }
@@ -2557,7 +2557,7 @@ void XMLTextFieldExport::ProcessInteger(enum XMLTokenEnum eName,
     if ( XML_TOKEN_INVALID == eName )
         return;
 
-    GetExport().AddAttribute(XML_NAMESPACE_TEXT, eName,
+    GetExport().AddAttribute(XmlNamespace::TEXT, eName,
                              OUString::number(nNum));
 }
 
@@ -2581,14 +2581,14 @@ void XMLTextFieldExport::ProcessNumberingType(sal_Int16 nNumberingType)
     // number type: num format
     GetExport().GetMM100UnitConverter().convertNumFormat( sTmp,
                                                           nNumberingType );
-    GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_NUM_FORMAT,
+    GetExport().AddAttribute(XmlNamespace::STYLE, XML_NUM_FORMAT,
                                   sTmp.makeStringAndClear() );
     // and letter sync, if applicable
     SvXMLUnitConverter::convertNumLetterSync( sTmp, nNumberingType );
 
     if (!sTmp.isEmpty())
     {
-        GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_NUM_LETTER_SYNC,
+        GetExport().AddAttribute(XmlNamespace::STYLE, XML_NUM_LETTER_SYNC,
                                  sTmp.makeStringAndClear() );
     }
     // else: like page descriptor => ignore
@@ -2719,7 +2719,7 @@ void XMLTextFieldExport::ProcessBibliographyData(
             if (SvXMLUnitConverter::convertEnum(sBuf, nTypeId,
                                                 aBibliographyDataTypeMap))
             {
-                rExport.AddAttribute(XML_NAMESPACE_TEXT,
+                rExport.AddAttribute(XmlNamespace::TEXT,
                                      XML_BIBLIOGRAPHY_TYPE,
                                      sBuf.makeStringAndClear());
             }
@@ -2732,7 +2732,7 @@ void XMLTextFieldExport::ProcessBibliographyData(
 
             if (!sStr.isEmpty())
             {
-                rExport.AddAttribute(XML_NAMESPACE_TEXT,
+                rExport.AddAttribute(XmlNamespace::TEXT,
                                      MapBibliographyFieldName(rProp.Name),
                                      sStr);
             }
@@ -2753,7 +2753,7 @@ void XMLTextFieldExport::ProcessCommandType(
     }
 
     if( eToken != XML_TOKEN_INVALID )
-        rExport.AddAttribute( XML_NAMESPACE_TEXT, XML_TABLE_TYPE, eToken );
+        rExport.AddAttribute( XmlNamespace::TEXT, XML_TABLE_TYPE, eToken );
 }
 
 
@@ -2777,10 +2777,10 @@ void XMLTextFieldExport::ProcessStringSequence(
     for( sal_Int32 i = 0; i < nLength; i++ )
     {
         if( i == nSelected )
-            rExport.AddAttribute( XML_NAMESPACE_TEXT,
+            rExport.AddAttribute( XmlNamespace::TEXT,
                                   XML_CURRENT_SELECTED, XML_TRUE );
-        rExport.AddAttribute( XML_NAMESPACE_TEXT, XML_VALUE, pSequence[i] );
-        SvXMLElementExport aElement( rExport, XML_NAMESPACE_TEXT, XML_LABEL,
+        rExport.AddAttribute( XmlNamespace::TEXT, XML_VALUE, pSequence[i] );
+        SvXMLElementExport aElement( rExport, XmlNamespace::TEXT, XML_LABEL,
                                      false, false );
     }
 }
@@ -2813,18 +2813,18 @@ void XMLTextFieldExport::ExportDataBaseElement(
 
     // add database name property (if present)
     if( !sDataBaseName.isEmpty() )
-        rExport.AddAttribute( XML_NAMESPACE_TEXT, XML_DATABASE_NAME,
+        rExport.AddAttribute( XmlNamespace::TEXT, XML_DATABASE_NAME,
                               sDataBaseName );
     SvXMLElementExport aDataBaseElement( GetExport(),
-                                         XML_NAMESPACE_TEXT, eElementName,
+                                         XmlNamespace::TEXT, eElementName,
                                          false, false );
 
     // write URL as children
     if( !sDataBaseURL.isEmpty() )
     {
-        rExport.AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, sDataBaseURL );
+        rExport.AddAttribute( XmlNamespace::XLINK, XML_HREF, sDataBaseURL );
         SvXMLElementExport aDataSourceElement(
-            GetExport(), XML_NAMESPACE_FORM, XML_CONNECTION_RESOURCE,
+            GetExport(), XmlNamespace::FORM, XML_CONNECTION_RESOURCE,
             false, false );
     }
 
diff --git a/xmloff/source/text/txtfldi.cxx b/xmloff/source/text/txtfldi.cxx
index 5d893626a5ed..4b7b3f4f8ad9 100644
--- a/xmloff/source/text/txtfldi.cxx
+++ b/xmloff/source/text/txtfldi.cxx
@@ -1210,7 +1210,7 @@ SvXMLImportContextRef XMLDatabaseFieldImportContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList>& xAttrList )
 {
-    if( ( p_nPrefix == XML_NAMESPACE_FORM ) &&
+    if( ( p_nPrefix == XmlNamespace::FORM ) &&
         IsXMLToken( rLocalName, XML_CONNECTION_RESOURCE ) )
     {
         // process attribute list directly
@@ -1221,7 +1221,7 @@ SvXMLImportContextRef XMLDatabaseFieldImportContext::CreateChildContext(
             sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
                 GetKeyByAttrName( xAttrList->getNameByIndex(n), &sLocalName );
 
-            if( ( nPrefix == XML_NAMESPACE_XLINK ) &&
+            if( ( nPrefix == XmlNamespace::XLINK ) &&
                 IsXMLToken( sLocalName, XML_HREF ) )
             {
                 sDatabaseURL = xAttrList->getValueByIndex(n);
@@ -1321,7 +1321,7 @@ void XMLDatabaseNextImportContext::ProcessAttribute(
         OUString sTmp;
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrValueQName(
                                     sAttrValue, &sTmp );
-        if( XML_NAMESPACE_OOOW == nPrefix )
+        if( XmlNamespace::OOOW == nPrefix )
         {
             sCondition = sTmp;
             bConditionOK = true;
@@ -1846,7 +1846,7 @@ void XMLHiddenParagraphImportContext::ProcessAttribute(
         OUString sTmp;
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().GetKeyByAttrValueQName(
                                     sAttrValue, &sTmp );
-        if( XML_NAMESPACE_OOOW == nPrefix )
+        if( XmlNamespace::OOOW == nPrefix )
         {
             sCondition = sTmp;
             bValid = true;
@@ -1903,7 +1903,7 @@ void XMLConditionalTextImportContext::ProcessAttribute(
                 OUString sTmp;
                 sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
                         GetKeyByAttrValueQName(sAttrValue, &sTmp);
-                if( XML_NAMESPACE_OOOW == nPrefix )
+                if( XmlNamespace::OOOW == nPrefix )
                 {
                     sCondition = sTmp;
                     bConditionOK = true;
@@ -1973,7 +1973,7 @@ void XMLHiddenTextImportContext::ProcessAttribute(
                 OUString sTmp;
                 sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
                             GetKeyByAttrValueQName(sAttrValue, &sTmp);
-                if( XML_NAMESPACE_OOOW == nPrefix )
+                if( XmlNamespace::OOOW == nPrefix )
                 {
                     sCondition = sTmp;
                     bConditionOK = true;
@@ -2432,7 +2432,7 @@ SvXMLImportContextRef XMLMacroFieldImportContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if ( (nPrefix == XML_NAMESPACE_OFFICE) &&
+    if ( (nPrefix == XmlNamespace::OFFICE) &&
          IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
     {
         // create events context and remember it!
@@ -2678,11 +2678,11 @@ enum DdeFieldDeclAttrs
 
 const SvXMLTokenMapEntry aDdeDeclAttrTokenMap[] =
 {
-    { XML_NAMESPACE_OFFICE, XML_NAME, XML_TOK_DDEFIELD_NAME },
-    { XML_NAMESPACE_OFFICE, XML_DDE_APPLICATION, XML_TOK_DDEFIELD_APPLICATION },
-    { XML_NAMESPACE_OFFICE, XML_DDE_TOPIC, XML_TOK_DDEFIELD_TOPIC },
-    { XML_NAMESPACE_OFFICE, XML_DDE_ITEM, XML_TOK_DDEFIELD_ITEM },
-    { XML_NAMESPACE_OFFICE, XML_AUTOMATIC_UPDATE, XML_TOK_DDEFIELD_UPDATE },
+    { XmlNamespace::OFFICE, XML_NAME, XML_TOK_DDEFIELD_NAME },
+    { XmlNamespace::OFFICE, XML_DDE_APPLICATION, XML_TOK_DDEFIELD_APPLICATION },
+    { XmlNamespace::OFFICE, XML_DDE_TOPIC, XML_TOK_DDEFIELD_TOPIC },
+    { XmlNamespace::OFFICE, XML_DDE_ITEM, XML_TOK_DDEFIELD_ITEM },
+    { XmlNamespace::OFFICE, XML_AUTOMATIC_UPDATE, XML_TOK_DDEFIELD_UPDATE },
     XML_TOKEN_MAP_END
 };
 
@@ -2698,7 +2698,7 @@ SvXMLImportContextRef XMLDdeFieldDeclsImportContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList> & /*xAttrList*/ )
 {
-    if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+    if ( (XmlNamespace::TEXT == nPrefix) &&
          (IsXMLToken(rLocalName, XML_DDE_CONNECTION_DECL)) )
     {
         static const SvXMLTokenMap aTokenMap(aDdeDeclAttrTokenMap);
@@ -2718,7 +2718,7 @@ XMLDdeFieldDeclImportContext::XMLDdeFieldDeclImportContext(
 :   SvXMLImportContext(rImport, nPrfx, sLocalName)
 ,   rTokenMap(rMap)
 {
-    DBG_ASSERT(XML_NAMESPACE_TEXT == nPrfx, "wrong prefix");
+    DBG_ASSERT(XmlNamespace::TEXT == nPrfx, "wrong prefix");
     DBG_ASSERT(IsXMLToken(sLocalName, XML_DDE_CONNECTION_DECL), "wrong name");
 }
 
@@ -3059,7 +3059,7 @@ void XMLBibliographyFieldImportContext::StartElement(
         sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
             GetKeyByAttrName( xAttrList->getNameByIndex(i), &sLocalName );
 
-        if (nPrefix == XML_NAMESPACE_TEXT)
+        if (nPrefix == XmlNamespace::TEXT)
         {
             PropertyValue aValue;
             aValue.Name = OUString::createFromAscii(
@@ -3296,7 +3296,7 @@ SvXMLImportContextRef XMLAnnotationImportContext::CreateChildContext(
     const Reference<XAttributeList >& xAttrList )
 {
     SvXMLImportContext *pContext = nullptr;
-    if( XML_NAMESPACE_DC == nPrefix )
+    if( XmlNamespace::DC == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_CREATOR ) )
             pContext = new XMLStringBufferImportContext(GetImport(), nPrefix,
@@ -3305,9 +3305,9 @@ SvXMLImportContextRef XMLAnnotationImportContext::CreateChildContext(
             pContext = new XMLStringBufferImportContext(GetImport(), nPrefix,
                                             rLocalName, aDateBuffer);
     }
-    else if (((XML_NAMESPACE_TEXT == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix)
+    else if (((XmlNamespace::TEXT == nPrefix || XmlNamespace::LO_EXT == nPrefix)
                  && IsXMLToken(rLocalName, XML_SENDER_INITIALS))
-             || (XML_NAMESPACE_META == nPrefix
+             || (XmlNamespace::META == nPrefix
                  && IsXMLToken(rLocalName, XML_CREATOR_INITIALS)))
     {
         pContext = new XMLStringBufferImportContext(GetImport(), nPrefix,
@@ -3616,7 +3616,7 @@ static bool lcl_ProcessLabel( const SvXMLImport& rImport,
             GetKeyByAttrName( xAttrList->getNameByIndex(n), &sLocalName );
         OUString sValue = xAttrList->getValueByIndex(n);
 
-        if( nPrefix == XML_NAMESPACE_TEXT )
+        if( nPrefix == XmlNamespace::TEXT )
         {
             if( IsXMLToken( sLocalName, XML_VALUE ) )
             {
@@ -3639,7 +3639,7 @@ SvXMLImportContextRef XMLDropDownFieldImportContext::CreateChildContext(
     const OUString& rLocalName,
     const Reference<XAttributeList>& xAttrList )
 {
-    if( nPrefix == XML_NAMESPACE_TEXT  &&
+    if( nPrefix == XmlNamespace::TEXT  &&
         IsXMLToken( rLocalName, XML_LABEL ) )
     {
         OUString sLabel;
diff --git a/xmloff/source/text/txtftne.cxx b/xmloff/source/text/txtftne.cxx
index 7c26040d344a..274946958762 100644
--- a/xmloff/source/text/txtftne.cxx
+++ b/xmloff/source/text/txtftne.cxx
@@ -106,7 +106,7 @@ void XMLTextParagraphExport::exportTextFootnote(
                 addHyperlinkAttributes( rPropSet, xPropState, xPropSetInfo );
         }
         SvXMLElementExport aHyperlink( GetExport(), bHasHyperlink,
-                                       XML_NAMESPACE_TEXT, XML_A,
+                                       XmlNamespace::TEXT, XML_A,
                                        false, false );
 
         if( bHasHyperlink )
@@ -130,9 +130,9 @@ void XMLTextParagraphExport::exportTextFootnote(
                 rPropSet, gsCharStyleNames );
             if( !sStyle.isEmpty() )
             {
-                GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+                GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                                           GetExport().EncodeStyleName( sStyle ) );
-                SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+                SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                                           XML_SPAN, false, false );
                 exportTextFootnoteHelper(xFootnote, xText, rText,
                                          bAutoStyles, bIsEndnote, bIsProgress );
@@ -166,31 +166,31 @@ void XMLTextParagraphExport::exportTextFootnoteHelper(
         Any aAny = xPropSet->getPropertyValue(gsReferenceId);
         sal_Int32 nNumber = 0;
         aAny >>= nNumber;
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_ID,
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_ID,
                                  "ftn" + OUString::number(nNumber));
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NOTE_CLASS,
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_NOTE_CLASS,
                                  GetXMLToken( bIsEndnote ? XML_ENDNOTE
                                                           : XML_FOOTNOTE ) );
 
-        SvXMLElementExport aNote(GetExport(), XML_NAMESPACE_TEXT,
+        SvXMLElementExport aNote(GetExport(), XmlNamespace::TEXT,
                                  XML_NOTE, false, false);
         {
             // handle label vs. automatic numbering
             OUString sLabel = rFootnote->getLabel();
             if (!sLabel.isEmpty())
             {
-                GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_LABEL,
+                GetExport().AddAttribute(XmlNamespace::TEXT, XML_LABEL,
                                          sLabel);
             }
             // else: automatic numbering -> no attribute
 
-            SvXMLElementExport aCite(GetExport(), XML_NAMESPACE_TEXT,
+            SvXMLElementExport aCite(GetExport(), XmlNamespace::TEXT,
                                      XML_NOTE_CITATION, false, false);
             GetExport().Characters(rTextString);
         }
 
         {
-            SvXMLElementExport aBody(GetExport(), XML_NAMESPACE_TEXT,
+            SvXMLElementExport aBody(GetExport(), XmlNamespace::TEXT,
                                      XML_NOTE_BODY, false, false);
             exportText(rText, bAutoStyles, bIsProgress, true );
         }
@@ -241,40 +241,40 @@ void XMLTextParagraphExport::exportTextFootnoteConfigurationHelper(
     const Reference<XPropertySet> & rFootnoteConfig,
     bool bIsEndnote)
 {
-    GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NOTE_CLASS,
+    GetExport().AddAttribute(XmlNamespace::TEXT, XML_NOTE_CLASS,
                              GetXMLToken( bIsEndnote ? XML_ENDNOTE
                                                      : XML_FOOTNOTE ) );
     // default/paragraph style
     lcl_exportString( GetExport(), rFootnoteConfig,
                       gsParaStyleName,
-                      XML_NAMESPACE_TEXT, XML_DEFAULT_STYLE_NAME,
+                      XmlNamespace::TEXT, XML_DEFAULT_STYLE_NAME,
                       true);
 
     // citation style
     lcl_exportString( GetExport(), rFootnoteConfig,
                       gsCharStyleName,
-                      XML_NAMESPACE_TEXT, XML_CITATION_STYLE_NAME,
+                      XmlNamespace::TEXT, XML_CITATION_STYLE_NAME,
                       true);
 
     // citation body style
     lcl_exportString( GetExport(), rFootnoteConfig,
                       gsAnchorCharStyleName,
-                      XML_NAMESPACE_TEXT, XML_CITATION_BODY_STYLE_NAME,
+                      XmlNamespace::TEXT, XML_CITATION_BODY_STYLE_NAME,
                       true);
 
     // page style
     lcl_exportString( GetExport(), rFootnoteConfig,
                       gsPageStyleName,
-                      XML_NAMESPACE_TEXT, XML_MASTER_PAGE_NAME,
+                      XmlNamespace::TEXT, XML_MASTER_PAGE_NAME,
                       true );
 
     // prefix
     lcl_exportString( GetExport(), rFootnoteConfig, gsPrefix,
-                      XML_NAMESPACE_STYLE, XML_NUM_PREFIX, false);
+                      XmlNamespace::STYLE, XML_NUM_PREFIX, false);
 
     // suffix
     lcl_exportString( GetExport(), rFootnoteConfig, gsSuffix,
-                      XML_NAMESPACE_STYLE, XML_NUM_SUFFIX, false);
+                      XmlNamespace::STYLE, XML_NUM_SUFFIX, false);
 
 
     Any aAny;
@@ -285,12 +285,12 @@ void XMLTextParagraphExport::exportTextFootnoteConfigurationHelper(
     sal_Int16 nNumbering = 0;
     aAny >>= nNumbering;
     GetExport().GetMM100UnitConverter().convertNumFormat( sBuffer, nNumbering);
-    GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_NUM_FORMAT,
+    GetExport().AddAttribute(XmlNamespace::STYLE, XML_NUM_FORMAT,
                              sBuffer.makeStringAndClear() );
     SvXMLUnitConverter::convertNumLetterSync( sBuffer, nNumbering);
     if (!sBuffer.isEmpty() )
     {
-        GetExport().AddAttribute(XML_NAMESPACE_STYLE, XML_NUM_LETTER_SYNC,
+        GetExport().AddAttribute(XmlNamespace::STYLE, XML_NUM_LETTER_SYNC,
                                  sBuffer.makeStringAndClear());
     }
 
@@ -298,7 +298,7 @@ void XMLTextParagraphExport::exportTextFootnoteConfigurationHelper(
     aAny = rFootnoteConfig->getPropertyValue(gsStartAt);
     sal_Int16 nOffset = 0;
     aAny >>= nOffset;
-    GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_START_VALUE,
+    GetExport().AddAttribute(XmlNamespace::TEXT, XML_START_VALUE,
                              OUString::number(nOffset));
 
     // some properties are for footnotes only
@@ -307,7 +307,7 @@ void XMLTextParagraphExport::exportTextFootnoteConfigurationHelper(
         // footnotes position
         aAny = rFootnoteConfig->getPropertyValue(
             gsPositionEndOfDoc);
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_FOOTNOTES_POSITION,
+        GetExport().AddAttribute(XmlNamespace::TEXT, XML_FOOTNOTES_POSITION,
                                  ( (*o3tl::doAccess<bool>(aAny)) ?
                                         XML_DOCUMENT : XML_PAGE ) );
 
@@ -328,13 +328,13 @@ void XMLTextParagraphExport::exportTextFootnoteConfigurationHelper(
                 eElement = XML_DOCUMENT;
                 break;
         }
-        GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+        GetExport().AddAttribute(XmlNamespace::TEXT,
                                  XML_START_NUMBERING_AT, eElement);
     }
 
     // element
     SvXMLElementExport aFootnoteConfigElement(
-        GetExport(), XML_NAMESPACE_TEXT,
+        GetExport(), XmlNamespace::TEXT,
         XML_NOTES_CONFIGURATION,
         true, true);
 
@@ -350,7 +350,7 @@ void XMLTextParagraphExport::exportTextFootnoteConfigurationHelper(
 
     if (!sTmp.isEmpty())
     {
-        SvXMLElementExport aElem(GetExport(), XML_NAMESPACE_TEXT,
+        SvXMLElementExport aElem(GetExport(), XmlNamespace::TEXT,
                                  XML_FOOTNOTE_CONTINUATION_NOTICE_FORWARD,
                                  true, false);
         GetExport().Characters(sTmp);
@@ -362,7 +362,7 @@ void XMLTextParagraphExport::exportTextFootnoteConfigurationHelper(
 
     if (!sTmp.isEmpty())
     {
-        SvXMLElementExport aElem(GetExport(), XML_NAMESPACE_TEXT,
+        SvXMLElementExport aElem(GetExport(), XmlNamespace::TEXT,
                                  XML_FOOTNOTE_CONTINUATION_NOTICE_BACKWARD,
                                  true, false);
         GetExport().Characters(sTmp);
diff --git a/xmloff/source/text/txtimp.cxx b/xmloff/source/text/txtimp.cxx
index bf1be258be99..c50f9c04bb71 100644
--- a/xmloff/source/text/txtimp.cxx
+++ b/xmloff/source/text/txtimp.cxx
@@ -88,216 +88,216 @@ using namespace ::com::sun::star::ucb;
 
 const SvXMLTokenMapEntry aTextElemTokenMap[] =
 {
-    { XML_NAMESPACE_TEXT, XML_P,                XML_TOK_TEXT_P              },
-    { XML_NAMESPACE_LO_EXT, XML_P,                XML_TOK_TEXT_P              },
-    { XML_NAMESPACE_TEXT, XML_H,                XML_TOK_TEXT_H              },
-    { XML_NAMESPACE_TEXT, XML_LIST,             XML_TOK_TEXT_LIST           },
-    { XML_NAMESPACE_DRAW, XML_FRAME,            XML_TOK_TEXT_FRAME_PAGE     },
-    { XML_NAMESPACE_DRAW, XML_A,                XML_TOK_DRAW_A_PAGE },
-    { XML_NAMESPACE_TABLE,XML_TABLE,            XML_TOK_TABLE_TABLE         },
-    { XML_NAMESPACE_LO_EXT,XML_TABLE,           XML_TOK_TABLE_TABLE         },
-    { XML_NAMESPACE_TEXT, XML_VARIABLE_DECLS,   XML_TOK_TEXT_VARFIELD_DECLS },
-    { XML_NAMESPACE_TEXT, XML_USER_FIELD_DECLS, XML_TOK_TEXT_USERFIELD_DECLS },
-    { XML_NAMESPACE_TEXT, XML_SEQUENCE_DECLS,   XML_TOK_TEXT_SEQUENCE_DECLS },
-    { XML_NAMESPACE_TEXT, XML_DDE_CONNECTION_DECLS, XML_TOK_TEXT_DDE_DECLS },
-    { XML_NAMESPACE_TEXT, XML_SECTION,          XML_TOK_TEXT_SECTION },
-    { XML_NAMESPACE_TEXT, XML_TABLE_OF_CONTENT, XML_TOK_TEXT_TOC },
-    { XML_NAMESPACE_TEXT, XML_OBJECT_INDEX,     XML_TOK_TEXT_OBJECT_INDEX },
-    { XML_NAMESPACE_TEXT, XML_TABLE_INDEX,      XML_TOK_TEXT_TABLE_INDEX },
-    { XML_NAMESPACE_TEXT, XML_ILLUSTRATION_INDEX, XML_TOK_TEXT_ILLUSTRATION_INDEX },
-    { XML_NAMESPACE_TEXT, XML_USER_INDEX,       XML_TOK_TEXT_USER_INDEX },
-    { XML_NAMESPACE_TEXT, XML_ALPHABETICAL_INDEX, XML_TOK_TEXT_ALPHABETICAL_INDEX },
-    { XML_NAMESPACE_TEXT, XML_BIBLIOGRAPHY,     XML_TOK_TEXT_BIBLIOGRAPHY_INDEX },
-    { XML_NAMESPACE_TEXT, XML_INDEX_TITLE,      XML_TOK_TEXT_INDEX_TITLE },
-    { XML_NAMESPACE_TEXT, XML_TRACKED_CHANGES,  XML_TOK_TEXT_TRACKED_CHANGES },
-    { XML_NAMESPACE_TEXT, XML_CHANGE_START,     XML_TOK_TEXT_CHANGE_START },
-    { XML_NAMESPACE_TEXT, XML_CHANGE_END,       XML_TOK_TEXT_CHANGE_END },
-    { XML_NAMESPACE_TEXT, XML_CHANGE,           XML_TOK_TEXT_CHANGE },
-    { XML_NAMESPACE_OFFICE, XML_FORMS,          XML_TOK_TEXT_FORMS },
-    { XML_NAMESPACE_TABLE, XML_CALCULATION_SETTINGS,    XML_TOK_TEXT_CALCULATION_SETTINGS },
-    { XML_NAMESPACE_TEXT, XML_ALPHABETICAL_INDEX_AUTO_MARK_FILE, XML_TOK_TEXT_AUTOMARK },
+    { XmlNamespace::TEXT, XML_P,                XML_TOK_TEXT_P              },
+    { XmlNamespace::LO_EXT, XML_P,                XML_TOK_TEXT_P              },
+    { XmlNamespace::TEXT, XML_H,                XML_TOK_TEXT_H              },
+    { XmlNamespace::TEXT, XML_LIST,             XML_TOK_TEXT_LIST           },
+    { XmlNamespace::DRAW, XML_FRAME,            XML_TOK_TEXT_FRAME_PAGE     },
+    { XmlNamespace::DRAW, XML_A,                XML_TOK_DRAW_A_PAGE },
+    { XmlNamespace::TABLE,XML_TABLE,            XML_TOK_TABLE_TABLE         },
+    { XmlNamespace::LO_EXT,XML_TABLE,           XML_TOK_TABLE_TABLE         },
+    { XmlNamespace::TEXT, XML_VARIABLE_DECLS,   XML_TOK_TEXT_VARFIELD_DECLS },
+    { XmlNamespace::TEXT, XML_USER_FIELD_DECLS, XML_TOK_TEXT_USERFIELD_DECLS },
+    { XmlNamespace::TEXT, XML_SEQUENCE_DECLS,   XML_TOK_TEXT_SEQUENCE_DECLS },
+    { XmlNamespace::TEXT, XML_DDE_CONNECTION_DECLS, XML_TOK_TEXT_DDE_DECLS },
+    { XmlNamespace::TEXT, XML_SECTION,          XML_TOK_TEXT_SECTION },
+    { XmlNamespace::TEXT, XML_TABLE_OF_CONTENT, XML_TOK_TEXT_TOC },
+    { XmlNamespace::TEXT, XML_OBJECT_INDEX,     XML_TOK_TEXT_OBJECT_INDEX },
+    { XmlNamespace::TEXT, XML_TABLE_INDEX,      XML_TOK_TEXT_TABLE_INDEX },
+    { XmlNamespace::TEXT, XML_ILLUSTRATION_INDEX, XML_TOK_TEXT_ILLUSTRATION_INDEX },
+    { XmlNamespace::TEXT, XML_USER_INDEX,       XML_TOK_TEXT_USER_INDEX },
+    { XmlNamespace::TEXT, XML_ALPHABETICAL_INDEX, XML_TOK_TEXT_ALPHABETICAL_INDEX },
+    { XmlNamespace::TEXT, XML_BIBLIOGRAPHY,     XML_TOK_TEXT_BIBLIOGRAPHY_INDEX },
+    { XmlNamespace::TEXT, XML_INDEX_TITLE,      XML_TOK_TEXT_INDEX_TITLE },
+    { XmlNamespace::TEXT, XML_TRACKED_CHANGES,  XML_TOK_TEXT_TRACKED_CHANGES },
+    { XmlNamespace::TEXT, XML_CHANGE_START,     XML_TOK_TEXT_CHANGE_START },
+    { XmlNamespace::TEXT, XML_CHANGE_END,       XML_TOK_TEXT_CHANGE_END },
+    { XmlNamespace::TEXT, XML_CHANGE,           XML_TOK_TEXT_CHANGE },
+    { XmlNamespace::OFFICE, XML_FORMS,          XML_TOK_TEXT_FORMS },
+    { XmlNamespace::TABLE, XML_CALCULATION_SETTINGS,    XML_TOK_TEXT_CALCULATION_SETTINGS },
+    { XmlNamespace::TEXT, XML_ALPHABETICAL_INDEX_AUTO_MARK_FILE, XML_TOK_TEXT_AUTOMARK },
     // #i52127#
-    { XML_NAMESPACE_TEXT, XML_NUMBERED_PARAGRAPH, XML_TOK_TEXT_NUMBERED_PARAGRAPH   },
+    { XmlNamespace::TEXT, XML_NUMBERED_PARAGRAPH, XML_TOK_TEXT_NUMBERED_PARAGRAPH   },
 
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextPElemTokenMap[] =
 {
-    { XML_NAMESPACE_TEXT, XML_SPAN, XML_TOK_TEXT_SPAN },
-    { XML_NAMESPACE_TEXT, XML_TAB, XML_TOK_TEXT_TAB_STOP },
-    { XML_NAMESPACE_TEXT, XML_LINE_BREAK, XML_TOK_TEXT_LINE_BREAK },
-    { XML_NAMESPACE_TEXT, XML_SOFT_PAGE_BREAK, XML_TOK_TEXT_SOFT_PAGE_BREAK },
-    { XML_NAMESPACE_TEXT, XML_S, XML_TOK_TEXT_S },
-    { XML_NAMESPACE_TEXT, XML_A, XML_TOK_TEXT_HYPERLINK },
-    { XML_NAMESPACE_TEXT, XML_RUBY, XML_TOK_TEXT_RUBY },
-
-    { XML_NAMESPACE_TEXT, XML_NOTE, XML_TOK_TEXT_NOTE },
-    { XML_NAMESPACE_TEXT, XML_BOOKMARK, XML_TOK_TEXT_BOOKMARK },
-    { XML_NAMESPACE_TEXT, XML_BOOKMARK_START, XML_TOK_TEXT_BOOKMARK_START },
-    { XML_NAMESPACE_TEXT, XML_BOOKMARK_END, XML_TOK_TEXT_BOOKMARK_END },
-    { XML_NAMESPACE_TEXT, XML_REFERENCE_MARK, XML_TOK_TEXT_REFERENCE },
-    { XML_NAMESPACE_TEXT, XML_REFERENCE_MARK_START,
+    { XmlNamespace::TEXT, XML_SPAN, XML_TOK_TEXT_SPAN },
+    { XmlNamespace::TEXT, XML_TAB, XML_TOK_TEXT_TAB_STOP },
+    { XmlNamespace::TEXT, XML_LINE_BREAK, XML_TOK_TEXT_LINE_BREAK },
+    { XmlNamespace::TEXT, XML_SOFT_PAGE_BREAK, XML_TOK_TEXT_SOFT_PAGE_BREAK },
+    { XmlNamespace::TEXT, XML_S, XML_TOK_TEXT_S },
+    { XmlNamespace::TEXT, XML_A, XML_TOK_TEXT_HYPERLINK },
+    { XmlNamespace::TEXT, XML_RUBY, XML_TOK_TEXT_RUBY },
+
+    { XmlNamespace::TEXT, XML_NOTE, XML_TOK_TEXT_NOTE },
+    { XmlNamespace::TEXT, XML_BOOKMARK, XML_TOK_TEXT_BOOKMARK },
+    { XmlNamespace::TEXT, XML_BOOKMARK_START, XML_TOK_TEXT_BOOKMARK_START },
+    { XmlNamespace::TEXT, XML_BOOKMARK_END, XML_TOK_TEXT_BOOKMARK_END },
+    { XmlNamespace::TEXT, XML_REFERENCE_MARK, XML_TOK_TEXT_REFERENCE },
+    { XmlNamespace::TEXT, XML_REFERENCE_MARK_START,
       XML_TOK_TEXT_REFERENCE_START },
-    { XML_NAMESPACE_TEXT, XML_REFERENCE_MARK_END,
+    { XmlNamespace::TEXT, XML_REFERENCE_MARK_END,
       XML_TOK_TEXT_REFERENCE_END },
 
-    { XML_NAMESPACE_DRAW, XML_FRAME, XML_TOK_TEXT_FRAME },
-    { XML_NAMESPACE_DRAW, XML_A,                XML_TOK_DRAW_A },
+    { XmlNamespace::DRAW, XML_FRAME, XML_TOK_TEXT_FRAME },
+    { XmlNamespace::DRAW, XML_A,                XML_TOK_DRAW_A },
 
     // index marks
-    { XML_NAMESPACE_TEXT, XML_TOC_MARK, XML_TOK_TEXT_TOC_MARK },
-    { XML_NAMESPACE_TEXT, XML_TOC_MARK_START, XML_TOK_TEXT_TOC_MARK_START },
-    { XML_NAMESPACE_TEXT, XML_TOC_MARK_END, XML_TOK_TEXT_TOC_MARK_END },
-    { XML_NAMESPACE_TEXT, XML_USER_INDEX_MARK, XML_TOK_TEXT_USER_INDEX_MARK },
-    { XML_NAMESPACE_TEXT, XML_USER_INDEX_MARK_START,
+    { XmlNamespace::TEXT, XML_TOC_MARK, XML_TOK_TEXT_TOC_MARK },
+    { XmlNamespace::TEXT, XML_TOC_MARK_START, XML_TOK_TEXT_TOC_MARK_START },
+    { XmlNamespace::TEXT, XML_TOC_MARK_END, XML_TOK_TEXT_TOC_MARK_END },
+    { XmlNamespace::TEXT, XML_USER_INDEX_MARK, XML_TOK_TEXT_USER_INDEX_MARK },
+    { XmlNamespace::TEXT, XML_USER_INDEX_MARK_START,
       XML_TOK_TEXT_USER_INDEX_MARK_START },
-    { XML_NAMESPACE_TEXT, XML_USER_INDEX_MARK_END,
+    { XmlNamespace::TEXT, XML_USER_INDEX_MARK_END,
       XML_TOK_TEXT_USER_INDEX_MARK_END },
-    { XML_NAMESPACE_TEXT, XML_ALPHABETICAL_INDEX_MARK,
+    { XmlNamespace::TEXT, XML_ALPHABETICAL_INDEX_MARK,
       XML_TOK_TEXT_ALPHA_INDEX_MARK },
-    { XML_NAMESPACE_TEXT, XML_ALPHABETICAL_INDEX_MARK_START,
+    { XmlNamespace::TEXT, XML_ALPHABETICAL_INDEX_MARK_START,
       XML_TOK_TEXT_ALPHA_INDEX_MARK_START },
-    { XML_NAMESPACE_TEXT, XML_ALPHABETICAL_INDEX_MARK_END,
+    { XmlNamespace::TEXT, XML_ALPHABETICAL_INDEX_MARK_END,
       XML_TOK_TEXT_ALPHA_INDEX_MARK_END },
 
     // sender fields
-    { XML_NAMESPACE_TEXT, XML_SENDER_FIRSTNAME,XML_TOK_TEXT_SENDER_FIRSTNAME},
-    { XML_NAMESPACE_TEXT, XML_SENDER_LASTNAME, XML_TOK_TEXT_SENDER_LASTNAME },
+    { XmlNamespace::TEXT, XML_SENDER_FIRSTNAME,XML_TOK_TEXT_SENDER_FIRSTNAME},
+    { XmlNamespace::TEXT, XML_SENDER_LASTNAME, XML_TOK_TEXT_SENDER_LASTNAME },
     // note: loext was written by accident in some LO versions, don't remove!
-    { XML_NAMESPACE_LO_EXT, XML_SENDER_INITIALS, XML_TOK_TEXT_SENDER_INITIALS },
-    { XML_NAMESPACE_TEXT,   XML_SENDER_INITIALS, XML_TOK_TEXT_SENDER_INITIALS },
-    { XML_NAMESPACE_TEXT, XML_SENDER_TITLE, XML_TOK_TEXT_SENDER_TITLE },
-    { XML_NAMESPACE_TEXT, XML_SENDER_POSITION, XML_TOK_TEXT_SENDER_POSITION },
-    { XML_NAMESPACE_TEXT, XML_SENDER_EMAIL, XML_TOK_TEXT_SENDER_EMAIL },
-    { XML_NAMESPACE_TEXT, XML_SENDER_PHONE_PRIVATE,
+    { XmlNamespace::LO_EXT, XML_SENDER_INITIALS, XML_TOK_TEXT_SENDER_INITIALS },
+    { XmlNamespace::TEXT,   XML_SENDER_INITIALS, XML_TOK_TEXT_SENDER_INITIALS },
+    { XmlNamespace::TEXT, XML_SENDER_TITLE, XML_TOK_TEXT_SENDER_TITLE },
+    { XmlNamespace::TEXT, XML_SENDER_POSITION, XML_TOK_TEXT_SENDER_POSITION },
+    { XmlNamespace::TEXT, XML_SENDER_EMAIL, XML_TOK_TEXT_SENDER_EMAIL },
+    { XmlNamespace::TEXT, XML_SENDER_PHONE_PRIVATE,
       XML_TOK_TEXT_SENDER_PHONE_PRIVATE },
-    { XML_NAMESPACE_TEXT, XML_SENDER_FAX, XML_TOK_TEXT_SENDER_FAX },
-    { XML_NAMESPACE_TEXT, XML_SENDER_COMPANY, XML_TOK_TEXT_SENDER_COMPANY },
-    { XML_NAMESPACE_TEXT, XML_SENDER_PHONE_WORK,
+    { XmlNamespace::TEXT, XML_SENDER_FAX, XML_TOK_TEXT_SENDER_FAX },
+    { XmlNamespace::TEXT, XML_SENDER_COMPANY, XML_TOK_TEXT_SENDER_COMPANY },
+    { XmlNamespace::TEXT, XML_SENDER_PHONE_WORK,
       XML_TOK_TEXT_SENDER_PHONE_WORK },
-    { XML_NAMESPACE_TEXT, XML_SENDER_STREET, XML_TOK_TEXT_SENDER_STREET },
-    { XML_NAMESPACE_TEXT, XML_SENDER_CITY, XML_TOK_TEXT_SENDER_CITY },
-    { XML_NAMESPACE_TEXT, XML_SENDER_POSTAL_CODE,
+    { XmlNamespace::TEXT, XML_SENDER_STREET, XML_TOK_TEXT_SENDER_STREET },
+    { XmlNamespace::TEXT, XML_SENDER_CITY, XML_TOK_TEXT_SENDER_CITY },
+    { XmlNamespace::TEXT, XML_SENDER_POSTAL_CODE,
       XML_TOK_TEXT_SENDER_POSTAL_CODE },
-    { XML_NAMESPACE_TEXT, XML_SENDER_COUNTRY, XML_TOK_TEXT_SENDER_COUNTRY },
-    { XML_NAMESPACE_TEXT, XML_SENDER_STATE_OR_PROVINCE,
+    { XmlNamespace::TEXT, XML_SENDER_COUNTRY, XML_TOK_TEXT_SENDER_COUNTRY },
+    { XmlNamespace::TEXT, XML_SENDER_STATE_OR_PROVINCE,
       XML_TOK_TEXT_SENDER_STATE_OR_PROVINCE },
 
     // misc. document fields
-    { XML_NAMESPACE_TEXT, XML_AUTHOR_NAME, XML_TOK_TEXT_AUTHOR_NAME },
-    { XML_NAMESPACE_TEXT, XML_AUTHOR_INITIALS, XML_TOK_TEXT_AUTHOR_INITIALS },
-    { XML_NAMESPACE_TEXT, XML_DATE, XML_TOK_TEXT_DATE },
-    { XML_NAMESPACE_TEXT, XML_TIME, XML_TOK_TEXT_TIME },
-    { XML_NAMESPACE_TEXT, XML_PAGE_NUMBER, XML_TOK_TEXT_PAGE_NUMBER },
-    { XML_NAMESPACE_TEXT, XML_PAGE_CONTINUATION_STRING,
+    { XmlNamespace::TEXT, XML_AUTHOR_NAME, XML_TOK_TEXT_AUTHOR_NAME },
+    { XmlNamespace::TEXT, XML_AUTHOR_INITIALS, XML_TOK_TEXT_AUTHOR_INITIALS },
+    { XmlNamespace::TEXT, XML_DATE, XML_TOK_TEXT_DATE },
+    { XmlNamespace::TEXT, XML_TIME, XML_TOK_TEXT_TIME },
+    { XmlNamespace::TEXT, XML_PAGE_NUMBER, XML_TOK_TEXT_PAGE_NUMBER },
+    { XmlNamespace::TEXT, XML_PAGE_CONTINUATION_STRING,
       XML_TOK_TEXT_PAGE_CONTINUATION_STRING },
 
     // variable fields
-    { XML_NAMESPACE_TEXT, XML_VARIABLE_SET, XML_TOK_TEXT_VARIABLE_SET },
-    { XML_NAMESPACE_TEXT, XML_VARIABLE_GET, XML_TOK_TEXT_VARIABLE_GET },
-    { XML_NAMESPACE_TEXT, XML_VARIABLE_INPUT, XML_TOK_TEXT_VARIABLE_INPUT },
-    { XML_NAMESPACE_TEXT, XML_USER_FIELD_GET, XML_TOK_TEXT_USER_FIELD_GET },
-    { XML_NAMESPACE_TEXT, XML_USER_FIELD_INPUT,XML_TOK_TEXT_USER_FIELD_INPUT},
-    { XML_NAMESPACE_TEXT, XML_SEQUENCE, XML_TOK_TEXT_SEQUENCE },
-    { XML_NAMESPACE_TEXT, XML_EXPRESSION, XML_TOK_TEXT_EXPRESSION },
-    { XML_NAMESPACE_TEXT, XML_TEXT_INPUT, XML_TOK_TEXT_TEXT_INPUT },
+    { XmlNamespace::TEXT, XML_VARIABLE_SET, XML_TOK_TEXT_VARIABLE_SET },
+    { XmlNamespace::TEXT, XML_VARIABLE_GET, XML_TOK_TEXT_VARIABLE_GET },
+    { XmlNamespace::TEXT, XML_VARIABLE_INPUT, XML_TOK_TEXT_VARIABLE_INPUT },
+    { XmlNamespace::TEXT, XML_USER_FIELD_GET, XML_TOK_TEXT_USER_FIELD_GET },
+    { XmlNamespace::TEXT, XML_USER_FIELD_INPUT,XML_TOK_TEXT_USER_FIELD_INPUT},
+    { XmlNamespace::TEXT, XML_SEQUENCE, XML_TOK_TEXT_SEQUENCE },
+    { XmlNamespace::TEXT, XML_EXPRESSION, XML_TOK_TEXT_EXPRESSION },
+    { XmlNamespace::TEXT, XML_TEXT_INPUT, XML_TOK_TEXT_TEXT_INPUT },
 
     // database fields
-    { XML_NAMESPACE_TEXT, XML_DATABASE_DISPLAY,
+    { XmlNamespace::TEXT, XML_DATABASE_DISPLAY,
       XML_TOK_TEXT_DATABASE_DISPLAY },
-    { XML_NAMESPACE_TEXT, XML_DATABASE_NEXT,
+    { XmlNamespace::TEXT, XML_DATABASE_NEXT,
       XML_TOK_TEXT_DATABASE_NEXT },
-    { XML_NAMESPACE_TEXT, XML_DATABASE_ROW_SELECT,
+    { XmlNamespace::TEXT, XML_DATABASE_ROW_SELECT,
       XML_TOK_TEXT_DATABASE_SELECT },
-    { XML_NAMESPACE_TEXT, XML_DATABASE_ROW_NUMBER,
+    { XmlNamespace::TEXT, XML_DATABASE_ROW_NUMBER,
       XML_TOK_TEXT_DATABASE_ROW_NUMBER },
-    { XML_NAMESPACE_TEXT, XML_DATABASE_NAME, XML_TOK_TEXT_DATABASE_NAME },
+    { XmlNamespace::TEXT, XML_DATABASE_NAME, XML_TOK_TEXT_DATABASE_NAME },
 
     // docinfo fields
-    { XML_NAMESPACE_TEXT, XML_INITIAL_CREATOR,
+    { XmlNamespace::TEXT, XML_INITIAL_CREATOR,
       XML_TOK_TEXT_DOCUMENT_CREATION_AUTHOR },
-    { XML_NAMESPACE_TEXT, XML_DESCRIPTION, XML_TOK_TEXT_DOCUMENT_DESCRIPTION},
-    { XML_NAMESPACE_TEXT, XML_PRINTED_BY, XML_TOK_TEXT_DOCUMENT_PRINT_AUTHOR},
-    { XML_NAMESPACE_TEXT, XML_TITLE, XML_TOK_TEXT_DOCUMENT_TITLE },
-    { XML_NAMESPACE_TEXT, XML_SUBJECT, XML_TOK_TEXT_DOCUMENT_SUBJECT },
-    { XML_NAMESPACE_TEXT, XML_KEYWORDS, XML_TOK_TEXT_DOCUMENT_KEYWORDS },
-    { XML_NAMESPACE_TEXT, XML_CREATOR, XML_TOK_TEXT_DOCUMENT_SAVE_AUTHOR },
-    { XML_NAMESPACE_TEXT, XML_EDITING_CYCLES,
+    { XmlNamespace::TEXT, XML_DESCRIPTION, XML_TOK_TEXT_DOCUMENT_DESCRIPTION},
+    { XmlNamespace::TEXT, XML_PRINTED_BY, XML_TOK_TEXT_DOCUMENT_PRINT_AUTHOR},
+    { XmlNamespace::TEXT, XML_TITLE, XML_TOK_TEXT_DOCUMENT_TITLE },
+    { XmlNamespace::TEXT, XML_SUBJECT, XML_TOK_TEXT_DOCUMENT_SUBJECT },
+    { XmlNamespace::TEXT, XML_KEYWORDS, XML_TOK_TEXT_DOCUMENT_KEYWORDS },
+    { XmlNamespace::TEXT, XML_CREATOR, XML_TOK_TEXT_DOCUMENT_SAVE_AUTHOR },
+    { XmlNamespace::TEXT, XML_EDITING_CYCLES,
       XML_TOK_TEXT_DOCUMENT_REVISION },
-    { XML_NAMESPACE_TEXT, XML_CREATION_DATE,
+    { XmlNamespace::TEXT, XML_CREATION_DATE,
       XML_TOK_TEXT_DOCUMENT_CREATION_DATE },
-    { XML_NAMESPACE_TEXT, XML_CREATION_TIME,
+    { XmlNamespace::TEXT, XML_CREATION_TIME,
       XML_TOK_TEXT_DOCUMENT_CREATION_TIME },
-    { XML_NAMESPACE_TEXT, XML_PRINT_DATE, XML_TOK_TEXT_DOCUMENT_PRINT_DATE },
-    { XML_NAMESPACE_TEXT, XML_PRINT_TIME, XML_TOK_TEXT_DOCUMENT_PRINT_TIME },
-    { XML_NAMESPACE_TEXT, XML_MODIFICATION_DATE,
+    { XmlNamespace::TEXT, XML_PRINT_DATE, XML_TOK_TEXT_DOCUMENT_PRINT_DATE },
+    { XmlNamespace::TEXT, XML_PRINT_TIME, XML_TOK_TEXT_DOCUMENT_PRINT_TIME },
+    { XmlNamespace::TEXT, XML_MODIFICATION_DATE,
       XML_TOK_TEXT_DOCUMENT_SAVE_DATE },
-    { XML_NAMESPACE_TEXT, XML_MODIFICATION_TIME,
+    { XmlNamespace::TEXT, XML_MODIFICATION_TIME,
       XML_TOK_TEXT_DOCUMENT_SAVE_TIME },
-    { XML_NAMESPACE_TEXT, XML_EDITING_DURATION,
+    { XmlNamespace::TEXT, XML_EDITING_DURATION,
       XML_TOK_TEXT_DOCUMENT_EDIT_DURATION },
-    { XML_NAMESPACE_TEXT, XML_USER_DEFINED,
+    { XmlNamespace::TEXT, XML_USER_DEFINED,
       XML_TOK_TEXT_DOCUMENT_USER_DEFINED },
 
     // misc fields
-    { XML_NAMESPACE_TEXT, XML_PLACEHOLDER, XML_TOK_TEXT_PLACEHOLDER },
-    { XML_NAMESPACE_TEXT, XML_HIDDEN_TEXT, XML_TOK_TEXT_HIDDEN_TEXT },
-    { XML_NAMESPACE_TEXT, XML_HIDDEN_PARAGRAPH,
+    { XmlNamespace::TEXT, XML_PLACEHOLDER, XML_TOK_TEXT_PLACEHOLDER },
+    { XmlNamespace::TEXT, XML_HIDDEN_TEXT, XML_TOK_TEXT_HIDDEN_TEXT },
+    { XmlNamespace::TEXT, XML_HIDDEN_PARAGRAPH,
       XML_TOK_TEXT_HIDDEN_PARAGRAPH },
-    { XML_NAMESPACE_TEXT, XML_CONDITIONAL_TEXT,
+    { XmlNamespace::TEXT, XML_CONDITIONAL_TEXT,
       XML_TOK_TEXT_CONDITIONAL_TEXT },
-    { XML_NAMESPACE_TEXT, XML_FILE_NAME, XML_TOK_TEXT_FILENAME },
-    { XML_NAMESPACE_TEXT, XML_CHAPTER,  XML_TOK_TEXT_CHAPTER },
-    { XML_NAMESPACE_TEXT, XML_TEMPLATE_NAME, XML_TOK_TEXT_TEMPLATENAME },
-    { XML_NAMESPACE_TEXT, XML_PARAGRAPH_COUNT, XML_TOK_TEXT_PARAGRAPH_COUNT },
-    { XML_NAMESPACE_TEXT, XML_WORD_COUNT, XML_TOK_TEXT_WORD_COUNT },
-    { XML_NAMESPACE_TEXT, XML_TABLE_COUNT, XML_TOK_TEXT_TABLE_COUNT },
-    { XML_NAMESPACE_TEXT, XML_CHARACTER_COUNT, XML_TOK_TEXT_CHARACTER_COUNT },
-    { XML_NAMESPACE_TEXT, XML_IMAGE_COUNT, XML_TOK_TEXT_IMAGE_COUNT },
-    { XML_NAMESPACE_TEXT, XML_OBJECT_COUNT, XML_TOK_TEXT_OBJECT_COUNT },
-    { XML_NAMESPACE_TEXT, XML_PAGE_COUNT, XML_TOK_TEXT_PAGE_COUNT },
-    { XML_NAMESPACE_TEXT, XML_PAGE_VARIABLE_GET, XML_TOK_TEXT_GET_PAGE_VAR },
-    { XML_NAMESPACE_TEXT, XML_PAGE_VARIABLE_SET, XML_TOK_TEXT_SET_PAGE_VAR },
-    { XML_NAMESPACE_TEXT, XML_EXECUTE_MACRO, XML_TOK_TEXT_MACRO },
-    { XML_NAMESPACE_TEXT, XML_DDE_CONNECTION, XML_TOK_TEXT_DDE },
-    { XML_NAMESPACE_TEXT, XML_REFERENCE_REF, XML_TOK_TEXT_REFERENCE_REF },
-    { XML_NAMESPACE_TEXT, XML_BOOKMARK_REF, XML_TOK_TEXT_BOOKMARK_REF },
-    { XML_NAMESPACE_TEXT, XML_SEQUENCE_REF, XML_TOK_TEXT_SEQUENCE_REF },
-    { XML_NAMESPACE_TEXT, XML_NOTE_REF, XML_TOK_TEXT_NOTE_REF },
-    { XML_NAMESPACE_TEXT, XML_BIBLIOGRAPHY_MARK,
+    { XmlNamespace::TEXT, XML_FILE_NAME, XML_TOK_TEXT_FILENAME },
+    { XmlNamespace::TEXT, XML_CHAPTER,  XML_TOK_TEXT_CHAPTER },
+    { XmlNamespace::TEXT, XML_TEMPLATE_NAME, XML_TOK_TEXT_TEMPLATENAME },
+    { XmlNamespace::TEXT, XML_PARAGRAPH_COUNT, XML_TOK_TEXT_PARAGRAPH_COUNT },
+    { XmlNamespace::TEXT, XML_WORD_COUNT, XML_TOK_TEXT_WORD_COUNT },
+    { XmlNamespace::TEXT, XML_TABLE_COUNT, XML_TOK_TEXT_TABLE_COUNT },
+    { XmlNamespace::TEXT, XML_CHARACTER_COUNT, XML_TOK_TEXT_CHARACTER_COUNT },
+    { XmlNamespace::TEXT, XML_IMAGE_COUNT, XML_TOK_TEXT_IMAGE_COUNT },
+    { XmlNamespace::TEXT, XML_OBJECT_COUNT, XML_TOK_TEXT_OBJECT_COUNT },
+    { XmlNamespace::TEXT, XML_PAGE_COUNT, XML_TOK_TEXT_PAGE_COUNT },
+    { XmlNamespace::TEXT, XML_PAGE_VARIABLE_GET, XML_TOK_TEXT_GET_PAGE_VAR },
+    { XmlNamespace::TEXT, XML_PAGE_VARIABLE_SET, XML_TOK_TEXT_SET_PAGE_VAR },
+    { XmlNamespace::TEXT, XML_EXECUTE_MACRO, XML_TOK_TEXT_MACRO },
+    { XmlNamespace::TEXT, XML_DDE_CONNECTION, XML_TOK_TEXT_DDE },
+    { XmlNamespace::TEXT, XML_REFERENCE_REF, XML_TOK_TEXT_REFERENCE_REF },
+    { XmlNamespace::TEXT, XML_BOOKMARK_REF, XML_TOK_TEXT_BOOKMARK_REF },
+    { XmlNamespace::TEXT, XML_SEQUENCE_REF, XML_TOK_TEXT_SEQUENCE_REF },
+    { XmlNamespace::TEXT, XML_NOTE_REF, XML_TOK_TEXT_NOTE_REF },
+    { XmlNamespace::TEXT, XML_BIBLIOGRAPHY_MARK,
       XML_TOK_TEXT_BIBLIOGRAPHY_MARK },
-    { XML_NAMESPACE_OFFICE, XML_ANNOTATION, XML_TOK_TEXT_ANNOTATION },
-    { XML_NAMESPACE_OFFICE, XML_ANNOTATION_END, XML_TOK_TEXT_ANNOTATION_END },
-    { XML_NAMESPACE_TEXT, XML_SCRIPT, XML_TOK_TEXT_SCRIPT },
-    { XML_NAMESPACE_TEXT, XML_TABLE_FORMULA, XML_TOK_TEXT_TABLE_FORMULA },
-    { XML_NAMESPACE_TEXT, XML_DROP_DOWN, XML_TOK_TEXT_DROP_DOWN },
+    { XmlNamespace::OFFICE, XML_ANNOTATION, XML_TOK_TEXT_ANNOTATION },
+    { XmlNamespace::OFFICE, XML_ANNOTATION_END, XML_TOK_TEXT_ANNOTATION_END },
+    { XmlNamespace::TEXT, XML_SCRIPT, XML_TOK_TEXT_SCRIPT },
+    { XmlNamespace::TEXT, XML_TABLE_FORMULA, XML_TOK_TEXT_TABLE_FORMULA },
+    { XmlNamespace::TEXT, XML_DROP_DOWN, XML_TOK_TEXT_DROP_DOWN },
 
     // Calc fields
-    { XML_NAMESPACE_TEXT, XML_SHEET_NAME, XML_TOK_TEXT_SHEET_NAME },
+    { XmlNamespace::TEXT, XML_SHEET_NAME, XML_TOK_TEXT_SHEET_NAME },
 
     // draw fields
-    { XML_NAMESPACE_TEXT, XML_MEASURE,  XML_TOK_TEXT_MEASURE },
-    { XML_NAMESPACE_LO_EXT, XML_PAGE_NAME, XML_TOK_TEXT_PAGE_NAME },
-    { XML_NAMESPACE_TEXT, XML_PAGE_NAME, XML_TOK_TEXT_PAGE_NAME },
+    { XmlNamespace::TEXT, XML_MEASURE,  XML_TOK_TEXT_MEASURE },
+    { XmlNamespace::LO_EXT, XML_PAGE_NAME, XML_TOK_TEXT_PAGE_NAME },
+    { XmlNamespace::TEXT, XML_PAGE_NAME, XML_TOK_TEXT_PAGE_NAME },
 
     // RDF metadata
-    { XML_NAMESPACE_TEXT, XML_META,         XML_TOK_TEXT_META },
-    { XML_NAMESPACE_TEXT, XML_META_FIELD,   XML_TOK_TEXT_META_FIELD },
+    { XmlNamespace::TEXT, XML_META,         XML_TOK_TEXT_META },
+    { XmlNamespace::TEXT, XML_META_FIELD,   XML_TOK_TEXT_META_FIELD },
 
     // redlining (aka change tracking)
-    { XML_NAMESPACE_TEXT, XML_CHANGE_START, XML_TOK_TEXTP_CHANGE_START },
-    { XML_NAMESPACE_TEXT, XML_CHANGE_END  , XML_TOK_TEXTP_CHANGE_END },
-    { XML_NAMESPACE_TEXT, XML_CHANGE, XML_TOK_TEXTP_CHANGE },
+    { XmlNamespace::TEXT, XML_CHANGE_START, XML_TOK_TEXTP_CHANGE_START },
+    { XmlNamespace::TEXT, XML_CHANGE_END  , XML_TOK_TEXTP_CHANGE_END },
+    { XmlNamespace::TEXT, XML_CHANGE, XML_TOK_TEXTP_CHANGE },
 
-    { XML_NAMESPACE_PRESENTATION, XML_HEADER, XML_TOK_DRAW_HEADER },
-    { XML_NAMESPACE_PRESENTATION, XML_FOOTER, XML_TOK_DRAW_FOOTER },
-    { XML_NAMESPACE_PRESENTATION, XML_DATE_TIME, XML_TOK_DRAW_DATE_TIME },
-    { XML_NAMESPACE_TEXT, XML_PAGE_CONTINUATION, XML_TOK_TEXT_PAGE_CONTINUATION },
+    { XmlNamespace::PRESENTATION, XML_HEADER, XML_TOK_DRAW_HEADER },
+    { XmlNamespace::PRESENTATION, XML_FOOTER, XML_TOK_DRAW_FOOTER },
+    { XmlNamespace::PRESENTATION, XML_DATE_TIME, XML_TOK_DRAW_DATE_TIME },
+    { XmlNamespace::TEXT, XML_PAGE_CONTINUATION, XML_TOK_TEXT_PAGE_CONTINUATION },
 
-    { XML_NAMESPACE_FIELD, XML_FIELDMARK, XML_TOK_TEXT_FIELDMARK },
-    { XML_NAMESPACE_FIELD, XML_FIELDMARK_START, XML_TOK_TEXT_FIELDMARK_START },
-    { XML_NAMESPACE_FIELD, XML_FIELDMARK_END, XML_TOK_TEXT_FIELDMARK_END },
+    { XmlNamespace::FIELD, XML_FIELDMARK, XML_TOK_TEXT_FIELDMARK },
+    { XmlNamespace::FIELD, XML_FIELDMARK_START, XML_TOK_TEXT_FIELDMARK_START },
+    { XmlNamespace::FIELD, XML_FIELDMARK_END, XML_TOK_TEXT_FIELDMARK_END },
 
 
     XML_TOKEN_MAP_END
@@ -305,198 +305,198 @@ const SvXMLTokenMapEntry aTextPElemTokenMap[] =
 
 const SvXMLTokenMapEntry aTextPAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XML  , XML_ID,          XML_TOK_TEXT_P_XMLID },
-    { XML_NAMESPACE_XHTML, XML_ABOUT,       XML_TOK_TEXT_P_ABOUT },
-    { XML_NAMESPACE_XHTML, XML_PROPERTY,    XML_TOK_TEXT_P_PROPERTY },
-    { XML_NAMESPACE_XHTML, XML_CONTENT,     XML_TOK_TEXT_P_CONTENT },
-    { XML_NAMESPACE_XHTML, XML_DATATYPE,    XML_TOK_TEXT_P_DATATYPE },
-    { XML_NAMESPACE_TEXT, XML_ID,           XML_TOK_TEXT_P_TEXTID },
-    { XML_NAMESPACE_TEXT, XML_STYLE_NAME,   XML_TOK_TEXT_P_STYLE_NAME },
-    { XML_NAMESPACE_TEXT, XML_COND_STYLE_NAME,
+    { XmlNamespace::XML  , XML_ID,          XML_TOK_TEXT_P_XMLID },
+    { XmlNamespace::XHTML, XML_ABOUT,       XML_TOK_TEXT_P_ABOUT },
+    { XmlNamespace::XHTML, XML_PROPERTY,    XML_TOK_TEXT_P_PROPERTY },
+    { XmlNamespace::XHTML, XML_CONTENT,     XML_TOK_TEXT_P_CONTENT },
+    { XmlNamespace::XHTML, XML_DATATYPE,    XML_TOK_TEXT_P_DATATYPE },
+    { XmlNamespace::TEXT, XML_ID,           XML_TOK_TEXT_P_TEXTID },
+    { XmlNamespace::TEXT, XML_STYLE_NAME,   XML_TOK_TEXT_P_STYLE_NAME },
+    { XmlNamespace::TEXT, XML_COND_STYLE_NAME,
                                             XML_TOK_TEXT_P_COND_STYLE_NAME },
-    { XML_NAMESPACE_LO_EXT, XML_OUTLINE_CONTENT_VISIBLE, XML_TOK_TEXT_P_OUTLINE_CONTENT_VISIBLE },
-    { XML_NAMESPACE_TEXT, XML_OUTLINE_LEVEL,XML_TOK_TEXT_P_LEVEL },
-    { XML_NAMESPACE_TEXT, XML_IS_LIST_HEADER,XML_TOK_TEXT_P_IS_LIST_HEADER },
-    { XML_NAMESPACE_TEXT, XML_RESTART_NUMBERING,XML_TOK_TEXT_P_RESTART_NUMBERING },
-    { XML_NAMESPACE_TEXT, XML_START_VALUE,XML_TOK_TEXT_P_START_VALUE },
+    { XmlNamespace::LO_EXT, XML_OUTLINE_CONTENT_VISIBLE, XML_TOK_TEXT_P_OUTLINE_CONTENT_VISIBLE },
+    { XmlNamespace::TEXT, XML_OUTLINE_LEVEL,XML_TOK_TEXT_P_LEVEL },
+    { XmlNamespace::TEXT, XML_IS_LIST_HEADER,XML_TOK_TEXT_P_IS_LIST_HEADER },
+    { XmlNamespace::TEXT, XML_RESTART_NUMBERING,XML_TOK_TEXT_P_RESTART_NUMBERING },
+    { XmlNamespace::TEXT, XML_START_VALUE,XML_TOK_TEXT_P_START_VALUE },
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextNumberedParagraphAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XML , XML_ID,    XML_TOK_TEXT_NUMBERED_PARAGRAPH_XMLID },
-    { XML_NAMESPACE_TEXT, XML_LIST_ID,
+    { XmlNamespace::XML , XML_ID,    XML_TOK_TEXT_NUMBERED_PARAGRAPH_XMLID },
+    { XmlNamespace::TEXT, XML_LIST_ID,
         XML_TOK_TEXT_NUMBERED_PARAGRAPH_LIST_ID },
-    { XML_NAMESPACE_TEXT, XML_LEVEL, XML_TOK_TEXT_NUMBERED_PARAGRAPH_LEVEL },
-    { XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+    { XmlNamespace::TEXT, XML_LEVEL, XML_TOK_TEXT_NUMBERED_PARAGRAPH_LEVEL },
+    { XmlNamespace::TEXT, XML_STYLE_NAME,
         XML_TOK_TEXT_NUMBERED_PARAGRAPH_STYLE_NAME },
-    { XML_NAMESPACE_TEXT, XML_CONTINUE_NUMBERING,
+    { XmlNamespace::TEXT, XML_CONTINUE_NUMBERING,
         XML_TOK_TEXT_NUMBERED_PARAGRAPH_CONTINUE_NUMBERING },
-    { XML_NAMESPACE_TEXT, XML_START_VALUE,
+    { XmlNamespace::TEXT, XML_START_VALUE,
         XML_TOK_TEXT_NUMBERED_PARAGRAPH_START_VALUE },
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextListBlockAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XML , XML_ID,           XML_TOK_TEXT_LIST_BLOCK_XMLID },
-    { XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+    { XmlNamespace::XML , XML_ID,           XML_TOK_TEXT_LIST_BLOCK_XMLID },
+    { XmlNamespace::TEXT, XML_STYLE_NAME,
             XML_TOK_TEXT_LIST_BLOCK_STYLE_NAME },
-    { XML_NAMESPACE_TEXT, XML_CONTINUE_NUMBERING,
+    { XmlNamespace::TEXT, XML_CONTINUE_NUMBERING,
             XML_TOK_TEXT_LIST_BLOCK_CONTINUE_NUMBERING },
-    { XML_NAMESPACE_TEXT, XML_CONTINUE_LIST,
+    { XmlNamespace::TEXT, XML_CONTINUE_LIST,
             XML_TOK_TEXT_LIST_BLOCK_CONTINUE_LIST },
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextListBlockElemTokenMap[] =
 {
-    { XML_NAMESPACE_TEXT, XML_LIST_HEADER, XML_TOK_TEXT_LIST_HEADER },
-    { XML_NAMESPACE_TEXT, XML_LIST_ITEM,    XML_TOK_TEXT_LIST_ITEM   },
+    { XmlNamespace::TEXT, XML_LIST_HEADER, XML_TOK_TEXT_LIST_HEADER },
+    { XmlNamespace::TEXT, XML_LIST_ITEM,    XML_TOK_TEXT_LIST_ITEM   },
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextFrameAttrTokenMap[] =
 {
-    { XML_NAMESPACE_DRAW, XML_STYLE_NAME, XML_TOK_TEXT_FRAME_STYLE_NAME },
-    { XML_NAMESPACE_DRAW, XML_NAME, XML_TOK_TEXT_FRAME_NAME },
-    { XML_NAMESPACE_TEXT, XML_ANCHOR_TYPE, XML_TOK_TEXT_FRAME_ANCHOR_TYPE },
-    { XML_NAMESPACE_TEXT, XML_ANCHOR_PAGE_NUMBER, XML_TOK_TEXT_FRAME_ANCHOR_PAGE_NUMBER },
-    { XML_NAMESPACE_SVG, XML_X, XML_TOK_TEXT_FRAME_X },
-    { XML_NAMESPACE_SVG, XML_Y, XML_TOK_TEXT_FRAME_Y },
-    { XML_NAMESPACE_SVG, XML_WIDTH, XML_TOK_TEXT_FRAME_WIDTH },
-    { XML_NAMESPACE_FO, XML_MIN_WIDTH, XML_TOK_TEXT_FRAME_MIN_WIDTH },
-    { XML_NAMESPACE_STYLE, XML_REL_WIDTH, XML_TOK_TEXT_FRAME_REL_WIDTH },
-    { XML_NAMESPACE_SVG, XML_HEIGHT, XML_TOK_TEXT_FRAME_HEIGHT },
-    { XML_NAMESPACE_FO, XML_MIN_HEIGHT, XML_TOK_TEXT_FRAME_MIN_HEIGHT },
-    { XML_NAMESPACE_STYLE, XML_REL_HEIGHT, XML_TOK_TEXT_FRAME_REL_HEIGHT },
-    { XML_NAMESPACE_DRAW, XML_CHAIN_NEXT_NAME, XML_TOK_TEXT_FRAME_NEXT_CHAIN_NAME },
-    { XML_NAMESPACE_XLINK, XML_HREF, XML_TOK_TEXT_FRAME_HREF },
-    { XML_NAMESPACE_DRAW, XML_NAME, XML_TOK_TEXT_FRAME_FILTER_NAME },
-    { XML_NAMESPACE_DRAW, XML_ZINDEX, XML_TOK_TEXT_FRAME_Z_INDEX },
-    { XML_NAMESPACE_DRAW, XML_TRANSFORM, XML_TOK_TEXT_FRAME_TRANSFORM },
-    { XML_NAMESPACE_DRAW, XML_CLASS_ID, XML_TOK_TEXT_FRAME_CLASS_ID },
-    { XML_NAMESPACE_DRAW,   XML_CODE,           XML_TOK_TEXT_FRAME_CODE },
-    { XML_NAMESPACE_DRAW,   XML_OBJECT,         XML_TOK_TEXT_FRAME_OBJECT },
-    { XML_NAMESPACE_DRAW,   XML_ARCHIVE,        XML_TOK_TEXT_FRAME_ARCHIVE },
-    { XML_NAMESPACE_DRAW,   XML_MAY_SCRIPT,     XML_TOK_TEXT_FRAME_MAY_SCRIPT },
-    { XML_NAMESPACE_DRAW,   XML_MIME_TYPE,  XML_TOK_TEXT_FRAME_MIME_TYPE },
-    { XML_NAMESPACE_DRAW, XML_APPLET_NAME, XML_TOK_TEXT_FRAME_APPLET_NAME },
-    { XML_NAMESPACE_DRAW, XML_FRAME_NAME, XML_TOK_TEXT_FRAME_FRAME_NAME },
-    { XML_NAMESPACE_DRAW, XML_NOTIFY_ON_UPDATE_OF_RANGES, XML_TOK_TEXT_FRAME_NOTIFY_ON_UPDATE },
-    { XML_NAMESPACE_DRAW, XML_NOTIFY_ON_UPDATE_OF_TABLE, XML_TOK_TEXT_FRAME_NOTIFY_ON_UPDATE },
+    { XmlNamespace::DRAW, XML_STYLE_NAME, XML_TOK_TEXT_FRAME_STYLE_NAME },
+    { XmlNamespace::DRAW, XML_NAME, XML_TOK_TEXT_FRAME_NAME },
+    { XmlNamespace::TEXT, XML_ANCHOR_TYPE, XML_TOK_TEXT_FRAME_ANCHOR_TYPE },
+    { XmlNamespace::TEXT, XML_ANCHOR_PAGE_NUMBER, XML_TOK_TEXT_FRAME_ANCHOR_PAGE_NUMBER },
+    { XmlNamespace::SVG, XML_X, XML_TOK_TEXT_FRAME_X },
+    { XmlNamespace::SVG, XML_Y, XML_TOK_TEXT_FRAME_Y },
+    { XmlNamespace::SVG, XML_WIDTH, XML_TOK_TEXT_FRAME_WIDTH },
+    { XmlNamespace::FO, XML_MIN_WIDTH, XML_TOK_TEXT_FRAME_MIN_WIDTH },
+    { XmlNamespace::STYLE, XML_REL_WIDTH, XML_TOK_TEXT_FRAME_REL_WIDTH },
+    { XmlNamespace::SVG, XML_HEIGHT, XML_TOK_TEXT_FRAME_HEIGHT },
+    { XmlNamespace::FO, XML_MIN_HEIGHT, XML_TOK_TEXT_FRAME_MIN_HEIGHT },
+    { XmlNamespace::STYLE, XML_REL_HEIGHT, XML_TOK_TEXT_FRAME_REL_HEIGHT },
+    { XmlNamespace::DRAW, XML_CHAIN_NEXT_NAME, XML_TOK_TEXT_FRAME_NEXT_CHAIN_NAME },
+    { XmlNamespace::XLINK, XML_HREF, XML_TOK_TEXT_FRAME_HREF },
+    { XmlNamespace::DRAW, XML_NAME, XML_TOK_TEXT_FRAME_FILTER_NAME },
+    { XmlNamespace::DRAW, XML_ZINDEX, XML_TOK_TEXT_FRAME_Z_INDEX },
+    { XmlNamespace::DRAW, XML_TRANSFORM, XML_TOK_TEXT_FRAME_TRANSFORM },
+    { XmlNamespace::DRAW, XML_CLASS_ID, XML_TOK_TEXT_FRAME_CLASS_ID },
+    { XmlNamespace::DRAW,   XML_CODE,           XML_TOK_TEXT_FRAME_CODE },
+    { XmlNamespace::DRAW,   XML_OBJECT,         XML_TOK_TEXT_FRAME_OBJECT },
+    { XmlNamespace::DRAW,   XML_ARCHIVE,        XML_TOK_TEXT_FRAME_ARCHIVE },
+    { XmlNamespace::DRAW,   XML_MAY_SCRIPT,     XML_TOK_TEXT_FRAME_MAY_SCRIPT },
+    { XmlNamespace::DRAW,   XML_MIME_TYPE,  XML_TOK_TEXT_FRAME_MIME_TYPE },
+    { XmlNamespace::DRAW, XML_APPLET_NAME, XML_TOK_TEXT_FRAME_APPLET_NAME },
+    { XmlNamespace::DRAW, XML_FRAME_NAME, XML_TOK_TEXT_FRAME_FRAME_NAME },
+    { XmlNamespace::DRAW, XML_NOTIFY_ON_UPDATE_OF_RANGES, XML_TOK_TEXT_FRAME_NOTIFY_ON_UPDATE },
+    { XmlNamespace::DRAW, XML_NOTIFY_ON_UPDATE_OF_TABLE, XML_TOK_TEXT_FRAME_NOTIFY_ON_UPDATE },
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextContourAttrTokenMap[] =
 {
-    { XML_NAMESPACE_SVG, XML_WIDTH,     XML_TOK_TEXT_CONTOUR_WIDTH      },
-    { XML_NAMESPACE_SVG, XML_HEIGHT,    XML_TOK_TEXT_CONTOUR_HEIGHT     },
-    { XML_NAMESPACE_SVG, XML_VIEWBOX,   XML_TOK_TEXT_CONTOUR_VIEWBOX    },
-    { XML_NAMESPACE_SVG, XML_D,         XML_TOK_TEXT_CONTOUR_D          },
-    { XML_NAMESPACE_DRAW,XML_POINTS,    XML_TOK_TEXT_CONTOUR_POINTS     },
-    { XML_NAMESPACE_DRAW,XML_RECREATE_ON_EDIT,  XML_TOK_TEXT_CONTOUR_AUTO   },
+    { XmlNamespace::SVG, XML_WIDTH,     XML_TOK_TEXT_CONTOUR_WIDTH      },
+    { XmlNamespace::SVG, XML_HEIGHT,    XML_TOK_TEXT_CONTOUR_HEIGHT     },
+    { XmlNamespace::SVG, XML_VIEWBOX,   XML_TOK_TEXT_CONTOUR_VIEWBOX    },
+    { XmlNamespace::SVG, XML_D,         XML_TOK_TEXT_CONTOUR_D          },
+    { XmlNamespace::DRAW,XML_POINTS,    XML_TOK_TEXT_CONTOUR_POINTS     },
+    { XmlNamespace::DRAW,XML_RECREATE_ON_EDIT,  XML_TOK_TEXT_CONTOUR_AUTO   },
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextHyperlinkAttrTokenMap[] =
 {
-    { XML_NAMESPACE_XLINK, XML_HREF, XML_TOK_TEXT_HYPERLINK_HREF },
-    { XML_NAMESPACE_OFFICE, XML_NAME, XML_TOK_TEXT_HYPERLINK_NAME },
-    { XML_NAMESPACE_XLINK, XML_SHOW, XML_TOK_TEXT_HYPERLINK_SHOW },
-    { XML_NAMESPACE_OFFICE, XML_TARGET_FRAME_NAME, XML_TOK_TEXT_HYPERLINK_TARGET_FRAME },
-    { XML_NAMESPACE_TEXT, XML_STYLE_NAME, XML_TOK_TEXT_HYPERLINK_STYLE_NAME },
-    { XML_NAMESPACE_TEXT, XML_VISITED_STYLE_NAME, XML_TOK_TEXT_HYPERLINK_VIS_STYLE_NAME },
-    { XML_NAMESPACE_OFFICE, XML_SERVER_MAP, XML_TOK_TEXT_HYPERLINK_SERVER_MAP },
+    { XmlNamespace::XLINK, XML_HREF, XML_TOK_TEXT_HYPERLINK_HREF },
+    { XmlNamespace::OFFICE, XML_NAME, XML_TOK_TEXT_HYPERLINK_NAME },
+    { XmlNamespace::XLINK, XML_SHOW, XML_TOK_TEXT_HYPERLINK_SHOW },
+    { XmlNamespace::OFFICE, XML_TARGET_FRAME_NAME, XML_TOK_TEXT_HYPERLINK_TARGET_FRAME },
+    { XmlNamespace::TEXT, XML_STYLE_NAME, XML_TOK_TEXT_HYPERLINK_STYLE_NAME },
+    { XmlNamespace::TEXT, XML_VISITED_STYLE_NAME, XML_TOK_TEXT_HYPERLINK_VIS_STYLE_NAME },
+    { XmlNamespace::OFFICE, XML_SERVER_MAP, XML_TOK_TEXT_HYPERLINK_SERVER_MAP },
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextMasterPageElemTokenMap[] =
 {
-    { XML_NAMESPACE_STYLE, XML_HEADER, XML_TOK_TEXT_MP_HEADER },
-    { XML_NAMESPACE_STYLE, XML_FOOTER, XML_TOK_TEXT_MP_FOOTER },
-    { XML_NAMESPACE_STYLE, XML_HEADER_LEFT, XML_TOK_TEXT_MP_HEADER_LEFT },
-    { XML_NAMESPACE_STYLE, XML_FOOTER_LEFT, XML_TOK_TEXT_MP_FOOTER_LEFT },
-    { XML_NAMESPACE_LO_EXT, XML_HEADER_FIRST, XML_TOK_TEXT_MP_HEADER_FIRST },
-    { XML_NAMESPACE_LO_EXT, XML_FOOTER_FIRST, XML_TOK_TEXT_MP_FOOTER_FIRST },
-    { XML_NAMESPACE_STYLE, XML_HEADER_FIRST, XML_TOK_TEXT_MP_HEADER_FIRST },
-    { XML_NAMESPACE_STYLE, XML_FOOTER_FIRST, XML_TOK_TEXT_MP_FOOTER_FIRST },
+    { XmlNamespace::STYLE, XML_HEADER, XML_TOK_TEXT_MP_HEADER },
+    { XmlNamespace::STYLE, XML_FOOTER, XML_TOK_TEXT_MP_FOOTER },
+    { XmlNamespace::STYLE, XML_HEADER_LEFT, XML_TOK_TEXT_MP_HEADER_LEFT },
+    { XmlNamespace::STYLE, XML_FOOTER_LEFT, XML_TOK_TEXT_MP_FOOTER_LEFT },
+    { XmlNamespace::LO_EXT, XML_HEADER_FIRST, XML_TOK_TEXT_MP_HEADER_FIRST },
+    { XmlNamespace::LO_EXT, XML_FOOTER_FIRST, XML_TOK_TEXT_MP_FOOTER_FIRST },
+    { XmlNamespace::STYLE, XML_HEADER_FIRST, XML_TOK_TEXT_MP_HEADER_FIRST },
+    { XmlNamespace::STYLE, XML_FOOTER_FIRST, XML_TOK_TEXT_MP_FOOTER_FIRST },
 
     XML_TOKEN_MAP_END
 };
 
 const SvXMLTokenMapEntry aTextFieldAttrTokenMap[] =
 {
-    { XML_NAMESPACE_TEXT, XML_FIXED, XML_TOK_TEXTFIELD_FIXED },
-    { XML_NAMESPACE_TEXT, XML_DESCRIPTION,  XML_TOK_TEXTFIELD_DESCRIPTION },
-    { XML_NAMESPACE_TEXT, XML_HELP, XML_TOK_TEXTFIELD_HELP },
-    { XML_NAMESPACE_TEXT, XML_HINT, XML_TOK_TEXTFIELD_HINT },
-    { XML_NAMESPACE_TEXT, XML_PLACEHOLDER_TYPE,
+    { XmlNamespace::TEXT, XML_FIXED, XML_TOK_TEXTFIELD_FIXED },
+    { XmlNamespace::TEXT, XML_DESCRIPTION,  XML_TOK_TEXTFIELD_DESCRIPTION },
+    { XmlNamespace::TEXT, XML_HELP, XML_TOK_TEXTFIELD_HELP },
+    { XmlNamespace::TEXT, XML_HINT, XML_TOK_TEXTFIELD_HINT },
+    { XmlNamespace::TEXT, XML_PLACEHOLDER_TYPE,
                 XML_TOK_TEXTFIELD_PLACEHOLDER_TYPE },
-    { XML_NAMESPACE_TEXT, XML_NAME, XML_TOK_TEXTFIELD_NAME },
-    { XML_NAMESPACE_TEXT, XML_FORMULA, XML_TOK_TEXTFIELD_FORMULA },
-    { XML_NAMESPACE_STYLE, XML_NUM_FORMAT, XML_TOK_TEXTFIELD_NUM_FORMAT },
-    { XML_NAMESPACE_STYLE, XML_NUM_LETTER_SYNC,
+    { XmlNamespace::TEXT, XML_NAME, XML_TOK_TEXTFIELD_NAME },
+    { XmlNamespace::TEXT, XML_FORMULA, XML_TOK_TEXTFIELD_FORMULA },
+    { XmlNamespace::STYLE, XML_NUM_FORMAT, XML_TOK_TEXTFIELD_NUM_FORMAT },
+    { XmlNamespace::STYLE, XML_NUM_LETTER_SYNC,
                 XML_TOK_TEXTFIELD_NUM_LETTER_SYNC },
-    { XML_NAMESPACE_TEXT, XML_DISPLAY_FORMULA,
+    { XmlNamespace::TEXT, XML_DISPLAY_FORMULA,
                 XML_TOK_TEXTFIELD_DISPLAY_FORMULA },
-    { XML_NAMESPACE_TEXT, XML_VALUE_TYPE, XML_TOK_TEXTFIELD_VALUE_TYPE }, // #i32362#: src680m48++ saves text:value-type
-    { XML_NAMESPACE_OFFICE, XML_VALUE_TYPE, XML_TOK_TEXTFIELD_VALUE_TYPE },
-    { XML_NAMESPACE_TEXT, XML_VALUE, XML_TOK_TEXTFIELD_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_VALUE, XML_TOK_TEXTFIELD_VALUE },
-    { XML_NAMESPACE_TEXT, XML_STRING_VALUE, XML_TOK_TEXTFIELD_STRING_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_STRING_VALUE, XML_TOK_TEXTFIELD_STRING_VALUE },
-    { XML_NAMESPACE_TEXT, XML_DATE_VALUE, XML_TOK_TEXTFIELD_DATE_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_DATE_VALUE, XML_TOK_TEXTFIELD_DATE_VALUE },
-    { XML_NAMESPACE_TEXT, XML_TIME_VALUE, XML_TOK_TEXTFIELD_TIME_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_TIME_VALUE, XML_TOK_TEXTFIELD_TIME_VALUE },
-    { XML_NAMESPACE_OFFICE, XML_BOOLEAN_VALUE, XML_TOK_TEXTFIELD_BOOL_VALUE},
-    { XML_NAMESPACE_OFFICE, XML_CURRENCY, XML_TOK_TEXTFIELD_CURRENCY},
-    { XML_NAMESPACE_STYLE, XML_DATA_STYLE_NAME,
+    { XmlNamespace::TEXT, XML_VALUE_TYPE, XML_TOK_TEXTFIELD_VALUE_TYPE }, // #i32362#: src680m48++ saves text:value-type
+    { XmlNamespace::OFFICE, XML_VALUE_TYPE, XML_TOK_TEXTFIELD_VALUE_TYPE },
+    { XmlNamespace::TEXT, XML_VALUE, XML_TOK_TEXTFIELD_VALUE },
+    { XmlNamespace::OFFICE, XML_VALUE, XML_TOK_TEXTFIELD_VALUE },
+    { XmlNamespace::TEXT, XML_STRING_VALUE, XML_TOK_TEXTFIELD_STRING_VALUE },
+    { XmlNamespace::OFFICE, XML_STRING_VALUE, XML_TOK_TEXTFIELD_STRING_VALUE },
+    { XmlNamespace::TEXT, XML_DATE_VALUE, XML_TOK_TEXTFIELD_DATE_VALUE },
+    { XmlNamespace::OFFICE, XML_DATE_VALUE, XML_TOK_TEXTFIELD_DATE_VALUE },
+    { XmlNamespace::TEXT, XML_TIME_VALUE, XML_TOK_TEXTFIELD_TIME_VALUE },
+    { XmlNamespace::OFFICE, XML_TIME_VALUE, XML_TOK_TEXTFIELD_TIME_VALUE },
+    { XmlNamespace::OFFICE, XML_BOOLEAN_VALUE, XML_TOK_TEXTFIELD_BOOL_VALUE},
+    { XmlNamespace::OFFICE, XML_CURRENCY, XML_TOK_TEXTFIELD_CURRENCY},
+    { XmlNamespace::STYLE, XML_DATA_STYLE_NAME,
                 XML_TOK_TEXTFIELD_DATA_STYLE_NAME },
-    { XML_NAMESPACE_TEXT, XML_DISPLAY_OUTLINE_LEVEL,
+    { XmlNamespace::TEXT, XML_DISPLAY_OUTLINE_LEVEL,
                 XML_TOK_TEXTFIELD_NUMBERING_LEVEL },
-    { XML_NAMESPACE_TEXT, XML_SEPARATION_CHARACTER,
+    { XmlNamespace::TEXT, XML_SEPARATION_CHARACTER,
                 XML_TOK_TEXTFIELD_NUMBERING_SEPARATOR },
-    { XML_NAMESPACE_TEXT, XML_DISPLAY, XML_TOK_TEXTFIELD_DISPLAY },
-    { XML_NAMESPACE_TEXT, XML_TIME_ADJUST, XML_TOK_TEXTFIELD_TIME_ADJUST },
-    { XML_NAMESPACE_TEXT, XML_DATE_ADJUST, XML_TOK_TEXTFIELD_DATE_ADJUST },
-    { XML_NAMESPACE_TEXT, XML_PAGE_ADJUST, XML_TOK_TEXTFIELD_PAGE_ADJUST },
-    { XML_NAMESPACE_TEXT, XML_SELECT_PAGE, XML_TOK_TEXTFIELD_SELECT_PAGE },
-    { XML_NAMESPACE_TEXT, XML_DATABASE_NAME, XML_TOK_TEXTFIELD_DATABASE_NAME},
-    { XML_NAMESPACE_TEXT, XML_TABLE_NAME, XML_TOK_TEXTFIELD_TABLE_NAME },
-    { XML_NAMESPACE_TEXT, XML_COLUMN_NAME, XML_TOK_TEXTFIELD_COLUMN_NAME },
-    { XML_NAMESPACE_TEXT, XML_ROW_NUMBER, XML_TOK_TEXTFIELD_ROW_NUMBER },
-    { XML_NAMESPACE_TEXT, XML_CONDITION, XML_TOK_TEXTFIELD_CONDITION },
-    { XML_NAMESPACE_TEXT, XML_STRING_VALUE_IF_TRUE,
+    { XmlNamespace::TEXT, XML_DISPLAY, XML_TOK_TEXTFIELD_DISPLAY },
+    { XmlNamespace::TEXT, XML_TIME_ADJUST, XML_TOK_TEXTFIELD_TIME_ADJUST },
+    { XmlNamespace::TEXT, XML_DATE_ADJUST, XML_TOK_TEXTFIELD_DATE_ADJUST },
+    { XmlNamespace::TEXT, XML_PAGE_ADJUST, XML_TOK_TEXTFIELD_PAGE_ADJUST },
+    { XmlNamespace::TEXT, XML_SELECT_PAGE, XML_TOK_TEXTFIELD_SELECT_PAGE },
+    { XmlNamespace::TEXT, XML_DATABASE_NAME, XML_TOK_TEXTFIELD_DATABASE_NAME},
+    { XmlNamespace::TEXT, XML_TABLE_NAME, XML_TOK_TEXTFIELD_TABLE_NAME },
+    { XmlNamespace::TEXT, XML_COLUMN_NAME, XML_TOK_TEXTFIELD_COLUMN_NAME },
+    { XmlNamespace::TEXT, XML_ROW_NUMBER, XML_TOK_TEXTFIELD_ROW_NUMBER },
+    { XmlNamespace::TEXT, XML_CONDITION, XML_TOK_TEXTFIELD_CONDITION },
+    { XmlNamespace::TEXT, XML_STRING_VALUE_IF_TRUE,
                 XML_TOK_TEXTFIELD_STRING_VALUE_IF_TRUE },
-    { XML_NAMESPACE_TEXT, XML_STRING_VALUE_IF_FALSE,
+    { XmlNamespace::TEXT, XML_STRING_VALUE_IF_FALSE,
                 XML_TOK_TEXTFIELD_STRING_VALUE_IF_FALSE },
-    { XML_NAMESPACE_TEXT, XML_EDITING_CYCLES, XML_TOK_TEXTFIELD_REVISION },
-    { XML_NAMESPACE_TEXT, XML_OUTLINE_LEVEL, XML_TOK_TEXTFIELD_OUTLINE_LEVEL},
-    { XML_NAMESPACE_TEXT, XML_ACTIVE, XML_TOK_TEXTFIELD_ACTIVE },
-    { XML_NAMESPACE_TEXT, XML_NOTE_CLASS, XML_TOK_TEXTFIELD_NOTE_CLASS },
-    { XML_NAMESPACE_TEXT, XML_REFERENCE_FORMAT,
+    { XmlNamespace::TEXT, XML_EDITING_CYCLES, XML_TOK_TEXTFIELD_REVISION },
+    { XmlNamespace::TEXT, XML_OUTLINE_LEVEL, XML_TOK_TEXTFIELD_OUTLINE_LEVEL},
+    { XmlNamespace::TEXT, XML_ACTIVE, XML_TOK_TEXTFIELD_ACTIVE },
+    { XmlNamespace::TEXT, XML_NOTE_CLASS, XML_TOK_TEXTFIELD_NOTE_CLASS },
+    { XmlNamespace::TEXT, XML_REFERENCE_FORMAT,
                 XML_TOK_TEXTFIELD_REFERENCE_FORMAT },
-    { XML_NAMESPACE_TEXT, XML_REF_NAME, XML_TOK_TEXTFIELD_REF_NAME },
-    { XML_NAMESPACE_TEXT, XML_CONNECTION_NAME,
+    { XmlNamespace::TEXT, XML_REF_NAME, XML_TOK_TEXTFIELD_REF_NAME },
+    { XmlNamespace::TEXT, XML_CONNECTION_NAME,
       XML_TOK_TEXTFIELD_CONNECTION_NAME },
-    { XML_NAMESPACE_XLINK, XML_HREF, XML_TOK_TEXTFIELD_HREF },
-    { XML_NAMESPACE_OFFICE, XML_TARGET_FRAME_NAME,
+    { XmlNamespace::XLINK, XML_HREF, XML_TOK_TEXTFIELD_HREF },
+    { XmlNamespace::OFFICE, XML_TARGET_FRAME_NAME,
       XML_TOK_TEXTFIELD_TARGET_FRAME },
-    { XML_NAMESPACE_TEXT, XML_ANNOTATION, XML_TOK_TEXTFIELD_ANNOTATION },
-    { XML_NAMESPACE_SCRIPT, XML_LANGUAGE, XML_TOK_TEXTFIELD_LANGUAGE },
-    { XML_NAMESPACE_TEXT, XML_KIND, XML_TOK_TEXTFIELD_MEASURE_KIND },
-    { XML_NAMESPACE_TEXT, XML_IS_HIDDEN, XML_TOK_TEXTFIELD_IS_HIDDEN },
-    { XML_NAMESPACE_TEXT, XML_CURRENT_VALUE,
+    { XmlNamespace::TEXT, XML_ANNOTATION, XML_TOK_TEXTFIELD_ANNOTATION },
+    { XmlNamespace::SCRIPT, XML_LANGUAGE, XML_TOK_TEXTFIELD_LANGUAGE },
+    { XmlNamespace::TEXT, XML_KIND, XML_TOK_TEXTFIELD_MEASURE_KIND },
+    { XmlNamespace::TEXT, XML_IS_HIDDEN, XML_TOK_TEXTFIELD_IS_HIDDEN },
+    { XmlNamespace::TEXT, XML_CURRENT_VALUE,
                 XML_TOK_TEXTFIELD_CURRENT_VALUE },
-    { XML_NAMESPACE_TEXT, XML_TABLE_TYPE, XML_TOK_TEXTFIELD_TABLE_TYPE },
-    { XML_NAMESPACE_OFFICE, XML_NAME, XML_TOK_TEXT_NAME },
-    { XML_NAMESPACE_LO_EXT, XML_REFERENCE_LANGUAGE,
+    { XmlNamespace::TEXT, XML_TABLE_TYPE, XML_TOK_TEXTFIELD_TABLE_TYPE },
+    { XmlNamespace::OFFICE, XML_NAME, XML_TOK_TEXT_NAME },
+    { XmlNamespace::LO_EXT, XML_REFERENCE_LANGUAGE,
                 XML_TOK_TEXTFIELD_REFERENCE_LANGUAGE },
-    { XML_NAMESPACE_TEXT, XML_REFERENCE_LANGUAGE,
+    { XmlNamespace::TEXT, XML_REFERENCE_LANGUAGE,
                 XML_TOK_TEXTFIELD_REFERENCE_LANGUAGE },
-    { XML_NAMESPACE_LO_EXT, XML_RESOLVED, XML_TOK_TEXT_RESOLVED },
+    { XmlNamespace::LO_EXT, XML_RESOLVED, XML_TOK_TEXT_RESOLVED },
 
     XML_TOKEN_MAP_END
 };
diff --git a/xmloff/source/text/txtparae.cxx b/xmloff/source/text/txtparae.cxx
index 342aac84a7ee..d6fb2431664e 100644
--- a/xmloff/source/text/txtparae.cxx
+++ b/xmloff/source/text/txtparae.cxx
@@ -523,10 +523,10 @@ void FieldParamExporter::Export()
 
 void FieldParamExporter::ExportParameter(const OUString& sKey, const OUString& sValue)
 {
-    m_pExport->AddAttribute(XML_NAMESPACE_FIELD, XML_NAME, sKey);
-    m_pExport->AddAttribute(XML_NAMESPACE_FIELD, XML_VALUE, sValue);
-    m_pExport->StartElement(XML_NAMESPACE_FIELD, XML_PARAM, false);
-    m_pExport->EndElement(XML_NAMESPACE_FIELD, XML_PARAM, false);
+    m_pExport->AddAttribute(XmlNamespace::FIELD, XML_NAME, sKey);
+    m_pExport->AddAttribute(XmlNamespace::FIELD, XML_VALUE, sValue);
+    m_pExport->StartElement(XmlNamespace::FIELD, XML_PARAM, false);
+    m_pExport->EndElement(XmlNamespace::FIELD, XML_PARAM, false);
 }
 
 void XMLTextParagraphExport::Add( XmlStyleFamily nFamily,
@@ -972,7 +972,7 @@ void XMLTextParagraphExport::exportListChange(
                             /* Property text:id at element <text:list> has to be
                                replaced by property xml:id (#i92221#)
                             */
-                            GetExport().AddAttribute( XML_NAMESPACE_XML,
+                            GetExport().AddAttribute( XmlNamespace::XML,
                                                       XML_ID,
                                                       sListId );
                         }
@@ -991,7 +991,7 @@ void XMLTextParagraphExport::exportListChange(
                             /* Property text:id at element <text:list> has to be
                                replaced by property xml:id (#i92221#)
                             */
-                            GetExport().AddAttribute( XML_NAMESPACE_XML,
+                            GetExport().AddAttribute( XmlNamespace::XML,
                                                       XML_ID,
                                                       sNewListId );
                         }
@@ -1009,7 +1009,7 @@ void XMLTextParagraphExport::exportListChange(
                                 mpTextListsHelper->GetLastProcessedListId() &&
                              !rNextInfo.IsRestart() )
                         {
-                            GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                            GetExport().AddAttribute( XmlNamespace::TEXT,
                                                       XML_CONTINUE_NUMBERING,
                                                       XML_TRUE );
                         }
@@ -1019,7 +1019,7 @@ void XMLTextParagraphExport::exportListChange(
                                 eODFDefaultVersion >= SvtSaveOptions::ODFSVER_012 &&
                                  !sListId.isEmpty() )
                             {
-                                GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                                GetExport().AddAttribute( XmlNamespace::TEXT,
                                                           XML_CONTINUE_LIST,
                                                           sContinueListId );
                             }
@@ -1039,7 +1039,7 @@ void XMLTextParagraphExport::exportListChange(
                                                                 sContinueListId );
                     }
 
-                    GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+                    GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                             GetExport().EncodeStyleName( sListStyleName ) );
                     bExportListStyle = false;
 
@@ -1048,7 +1048,7 @@ void XMLTextParagraphExport::exportListChange(
                 else if ( bExportListStyle &&
                           !mpTextListsHelper->EqualsToTopListStyleOnStack( sListStyleName ) )
                 {
-                    GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+                    GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                             GetExport().EncodeStyleName( sListStyleName ) );
                     bExportListStyle = false;
 
@@ -1066,7 +1066,7 @@ void XMLTextParagraphExport::exportListChange(
 
                 if ( bContinueingPreviousSubList )
                 {
-                    GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                    GetExport().AddAttribute( XmlNamespace::TEXT,
                                               XML_CONTINUE_NUMBERING, XML_TRUE );
                     bContinueingPreviousSubList = false;
                 }
@@ -1074,7 +1074,7 @@ void XMLTextParagraphExport::exportListChange(
                 enum XMLTokenEnum eLName = XML_LIST;
 
                 OUString aElem(GetExport().GetNamespaceMap().GetQNameByKey(
-                                            XML_NAMESPACE_TEXT,
+                                            XmlNamespace::TEXT,
                                             GetXMLToken(eLName) ) );
                 GetExport().IgnorableWhitespace();
                 GetExport().StartElement(aElem, false);
@@ -1096,12 +1096,12 @@ void XMLTextParagraphExport::exportListChange(
                     {
                         OUStringBuffer aBuffer;
                         aBuffer.append( static_cast<sal_Int32>(rNextInfo.GetStartValue()) );
-                        GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_START_VALUE,
+                        GetExport().AddAttribute( XmlNamespace::TEXT, XML_START_VALUE,
                                       aBuffer.makeStringAndClear() );
                     }
                     else if (bRestartNumberingAtContinuedList)
                     {
-                        GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                        GetExport().AddAttribute( XmlNamespace::TEXT,
                                                   XML_START_VALUE,
                                                   OUString::number(nRestartValueForContinuedList) );
                         bRestartNumberingAtContinuedList = false;
@@ -1112,7 +1112,7 @@ void XMLTextParagraphExport::exportListChange(
                          ? XML_LIST_ITEM
                          : XML_LIST_HEADER;
                 aElem = GetExport().GetNamespaceMap().GetQNameByKey(
-                                            XML_NAMESPACE_TEXT,
+                                            XmlNamespace::TEXT,
                                             GetXMLToken(eLName) );
                 GetExport().IgnorableWhitespace();
                 GetExport().StartElement(aElem, false);
@@ -1125,7 +1125,7 @@ void XMLTextParagraphExport::exportListChange(
                 {
                     const OUString aTextNumberElem =
                             GetExport().GetNamespaceMap().GetQNameByKey(
-                                      XML_NAMESPACE_TEXT,
+                                      XmlNamespace::TEXT,
                                       GetXMLToken(XML_NUMBER) );
                     GetExport().IgnorableWhitespace();
                     GetExport().StartElement( aTextNumberElem, false );
@@ -1171,7 +1171,7 @@ void XMLTextParagraphExport::exportListChange(
     {
         OUStringBuffer aBuffer;
         aBuffer.append( static_cast<sal_Int32>(rNextInfo.GetStartValue()) );
-        GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_START_VALUE,
+        GetExport().AddAttribute( XmlNamespace::TEXT, XML_START_VALUE,
                                   aBuffer.makeStringAndClear() );
     }
     // Handle restart without start value on list level 1 (#i103745#)
@@ -1180,7 +1180,7 @@ void XMLTextParagraphExport::exportListChange(
     {
         OUStringBuffer aBuffer;
         aBuffer.append( static_cast<sal_Int32>(rNextInfo.GetListLevelStartValue()) );
-        GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_START_VALUE,
+        GetExport().AddAttribute( XmlNamespace::TEXT, XML_START_VALUE,
                                   aBuffer.makeStringAndClear() );
     }
     if ( ( GetExport().getExportFlags() & SvXMLExportFlags::OASIS ) &&
@@ -1189,13 +1189,13 @@ void XMLTextParagraphExport::exportListChange(
         const OUString& sListStyleName( rNextInfo.GetNumRulesName() );
         if ( !mpTextListsHelper->EqualsToTopListStyleOnStack( sListStyleName ) )
         {
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute( XmlNamespace::TEXT,
                                       XML_STYLE_OVERRIDE,
                                       GetExport().EncodeStyleName( sListStyleName ) );
         }
     }
     OUString aElem( GetExport().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_TEXT,
+                            XmlNamespace::TEXT,
                             GetXMLToken(XML_LIST_ITEM) ) );
     GetExport().IgnorableWhitespace();
     GetExport().StartElement(aElem, false );
@@ -1207,7 +1207,7 @@ void XMLTextParagraphExport::exportListChange(
     {
         const OUString aTextNumberElem =
                 GetExport().GetNamespaceMap().GetQNameByKey(
-                          XML_NAMESPACE_TEXT,
+                          XmlNamespace::TEXT,
                           GetXMLToken(XML_NUMBER) );
         GetExport().IgnorableWhitespace();
         GetExport().StartElement( aTextNumberElem, false );
@@ -1315,7 +1315,7 @@ XMLTextParagraphExport::XMLTextParagraphExport(
 
     // construct Any value, then find index
     sal_Int32 nIndex = xTextPropMapper->getPropertySetMapper()->FindEntryIndex(
-                                "", XML_NAMESPACE_STYLE,
+                                "", XmlNamespace::STYLE,
                                 GetXMLToken(XML_TEXT_COMBINE));
     pFieldExport.reset( new XMLTextFieldExport( rExp, std::make_unique<XMLPropertyState>( nIndex, uno::makeAny(true) ) ) );
     PushNewTextListsHelper();
@@ -1926,7 +1926,7 @@ void XMLTextParagraphExport::exportParagraph(
                         uno::UNO_QUERY);
                     OSL_ENSURE(!xMeta.is(), "paragraph that implements "
                         "XMetadatable used in interfaceToIdentifierMapper?");
-                    GetExport().AddAttributeIdLegacy(XML_NAMESPACE_TEXT,
+                    GetExport().AddAttributeIdLegacy(XmlNamespace::TEXT,
                         rIdentifier);
                 }
             }
@@ -1935,7 +1935,7 @@ void XMLTextParagraphExport::exportParagraph(
             if ( sAutoStyle.isEmpty() )
                 sAutoStyle = sStyle;
             if( !sAutoStyle.isEmpty() )
-                GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+                GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                               GetExport().EncodeStyleName( sAutoStyle ) );
 
             if( rPropSetHelper.hasProperty( PARA_CONDITIONAL_STYLE_NAME ) )
@@ -1952,7 +1952,7 @@ void XMLTextParagraphExport::exportParagraph(
                     sCondStyle = Find( XmlStyleFamily::TEXT_PARAGRAPH, xPropSet,
                                           sCondStyle );
                     if( !sCondStyle.isEmpty() )
-                        GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                        GetExport().AddAttribute( XmlNamespace::TEXT,
                                                   XML_COND_STYLE_NAME,
                               GetExport().EncodeStyleName( sCondStyle ) );
                 }
@@ -1969,7 +1969,7 @@ void XMLTextParagraphExport::exportParagraph(
 
                 if( 0 < nOutlineLevel )
                 {
-                    GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                    GetExport().AddAttribute( XmlNamespace::TEXT,
                                               XML_OUTLINE_LEVEL,
                                   OUString::number( sal_Int32( nOutlineLevel) ) );
 
@@ -1994,7 +1994,7 @@ void XMLTextParagraphExport::exportParagraph(
                         }
                         if (!bIsOutlineContentVisible)
                         {
-                            GetExport().AddAttribute( XML_NAMESPACE_LO_EXT,
+                            GetExport().AddAttribute( XmlNamespace::LO_EXT,
                                               XML_OUTLINE_CONTENT_VISIBLE,
                                               XML_FALSE);
                         }
@@ -2039,7 +2039,7 @@ void XMLTextParagraphExport::exportParagraph(
                         }
 
                         if( ! bIsNumber && bAssignedtoOutlineStyle )
-                            GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+                            GetExport().AddAttribute( XmlNamespace::TEXT,
                                                       XML_IS_LIST_HEADER,
                                                       XML_TRUE );
                     }
@@ -2061,7 +2061,7 @@ void XMLTextParagraphExport::exportParagraph(
 
                         if (bIsRestartNumbering)
                         {
-                            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+                            GetExport().AddAttribute(XmlNamespace::TEXT,
                                                      XML_RESTART_NUMBERING,
                                                      XML_TRUE);
 
@@ -2074,7 +2074,7 @@ void XMLTextParagraphExport::exportParagraph(
                                     >>= nStartValue;
 
                                 GetExport().
-                                    AddAttribute(XML_NAMESPACE_TEXT,
+                                    AddAttribute(XmlNamespace::TEXT,
                                                  XML_START_VALUE,
                                                  OUString::number(nStartValue));
                             }
@@ -2136,7 +2136,7 @@ void XMLTextParagraphExport::exportParagraph(
     {
         enum XMLTokenEnum eElem =
             0 < nOutlineLevel ? XML_H : XML_P;
-        SvXMLElementExport aElem( GetExport(), eExtensionNS == TextPNS::EXTENSION ? XML_NAMESPACE_LO_EXT : XML_NAMESPACE_TEXT, eElem,
+        SvXMLElementExport aElem( GetExport(), eExtensionNS == TextPNS::EXTENSION ? XmlNamespace::LO_EXT : XmlNamespace::TEXT, eElem,
                                   true, false );
         if( bHasContentEnum )
         {
@@ -2191,9 +2191,9 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
                     const OUString& rName = xBookmark->getName();
                     if (!rName.isEmpty())
                     {
-                        GetExport().AddAttribute(XML_NAMESPACE_OFFICE, XML_NAME, rName);
+                        GetExport().AddAttribute(XmlNamespace::OFFICE, XML_NAME, rName);
                     }
-                    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_OFFICE, XML_ANNOTATION_END, false, false );
+                    SvXMLElementExport aElem( GetExport(), XmlNamespace::OFFICE, XML_ANNOTATION_END, false, false );
                 }
             }
             else if( sType == gsFrame )
@@ -2262,20 +2262,20 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
                         Reference<XNamed> xBookmark(xPropSet->getPropertyValue(gsBookmark), UNO_QUERY);
                         if (xBookmark.is())
                         {
-                            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xBookmark->getName());
+                            GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME, xBookmark->getName());
                         }
 
                         if (xFormField.is())
                         {
-                            GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, xFormField->getFieldType());
+                            GetExport().AddAttribute(XmlNamespace::FIELD, XML_TYPE, xFormField->getFieldType());
                         }
 
-                        GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_START, false);
+                        GetExport().StartElement(XmlNamespace::FIELD, XML_FIELDMARK_START, false);
                         if (xFormField.is())
                         {
                             FieldParamExporter(&GetExport(), xFormField->getParameters()).Export();
                         }
-                        GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK_START, false);
+                        GetExport().EndElement(XmlNamespace::FIELD, XML_FIELDMARK_START, false);
                     }
                     /* The OpenDocument standard does not include support for TextMarks for now, so use bookmarks instead. */
                     else
@@ -2295,10 +2295,10 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
                                 sName = sFieldMarkName + OUString::number(
                                         m_xImpl->AddFieldMarkStart(xFormField));
                             }
-                            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME,
+                            GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME,
                                     sName);
                             SvXMLElementExport aElem( GetExport(), !bAutoStyles,
-                                XML_NAMESPACE_TEXT, XML_BOOKMARK_START,
+                                XmlNamespace::TEXT, XML_BOOKMARK_START,
                                 false, false );
                             const OUString sFieldType = xFormField->getFieldType();
                             if (sFieldType ==  ODF_FORMTEXT)
@@ -2326,7 +2326,7 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
                     if (GetExport().getSaneDefaultVersion() & SvtSaveOptions::ODFSVER_EXTENDED)
                     {
                         SvXMLElementExport aElem( GetExport(), !bAutoStyles,
-                            XML_NAMESPACE_FIELD, XML_FIELDMARK_END,
+                            XmlNamespace::FIELD, XML_FIELDMARK_END,
                             false, false );
                     }
                     else
@@ -2346,10 +2346,10 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
                                 sName = sFieldMarkName + OUString::number(
                                     m_xImpl->GetFieldMarkIndex(xFormField));
                             }
-                            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME,
+                            GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME,
                                     sName);
                             SvXMLElementExport aElem( GetExport(), !bAutoStyles,
-                                XML_NAMESPACE_TEXT, XML_BOOKMARK_END,
+                                XmlNamespace::TEXT, XML_BOOKMARK_END,
                                 false, false );
                         }
                     }
@@ -2364,28 +2364,28 @@ void XMLTextParagraphExport::exportTextRangeEnumeration(
                         Reference<XNamed> xBookmark(xPropSet->getPropertyValue(gsBookmark), UNO_QUERY);
                         if (xBookmark.is())
                         {
-                            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xBookmark->getName());
+                            GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME, xBookmark->getName());
                         }
                         Reference< css::text::XFormField > xFormField(xPropSet->getPropertyValue(gsBookmark), UNO_QUERY);
                         if (xFormField.is())
                         {
-                            GetExport().AddAttribute(XML_NAMESPACE_FIELD, XML_TYPE, xFormField->getFieldType());
+                            GetExport().AddAttribute(XmlNamespace::FIELD, XML_TYPE, xFormField->getFieldType());
                         }
-                        GetExport().StartElement(XML_NAMESPACE_FIELD, XML_FIELDMARK, false);
+                        GetExport().StartElement(XmlNamespace::FIELD, XML_FIELDMARK, false);
                         if (xFormField.is())
                         {
                             FieldParamExporter(&GetExport(), xFormField->getParameters()).Export();
                         }
-                        GetExport().EndElement(XML_NAMESPACE_FIELD, XML_FIELDMARK, false);
+                        GetExport().EndElement(XmlNamespace::FIELD, XML_FIELDMARK, false);
                     }
                     else
                     {
                         Reference<XNamed> xBookmark(xPropSet->getPropertyValue(gsBookmark), UNO_QUERY);
                         if (xBookmark.is())
                         {
-                            GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME, xBookmark->getName());
+                            GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME, xBookmark->getName());
                             SvXMLElementExport aElem( GetExport(), !bAutoStyles,
-                                XML_NAMESPACE_TEXT, XML_BOOKMARK,
+                                XmlNamespace::TEXT, XML_BOOKMARK,
                                 false, false );
                         }
                     }
@@ -2465,7 +2465,7 @@ void XMLTextParagraphExport::exportTextField(
 
 void XMLTextParagraphExport::exportSoftPageBreak()
 {
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                               XML_SOFT_PAGE_BREAK, false,
                               false );
 }
@@ -2489,7 +2489,7 @@ void XMLTextParagraphExport::exportTextMark(
 
     // name element
     Reference<XNamed> xName(rPropSet->getPropertyValue(rProperty), UNO_QUERY);
-    GetExport().AddAttribute(XML_NAMESPACE_TEXT, XML_NAME,
+    GetExport().AddAttribute(XmlNamespace::TEXT, XML_NAME,
                              xName->getName());
 
     // start, end, or point-reference?
@@ -2523,13 +2523,13 @@ void XMLTextParagraphExport::exportTextMark(
             bkmkProps->getPropertyValue(sHidden) >>= bHidden;
             if (bHidden)
             {
-                GetExport().AddAttribute(XML_NAMESPACE_LO_EXT, "hidden", "true");
+                GetExport().AddAttribute(XmlNamespace::LO_EXT, "hidden", "true");
                 OUString sCondition("BookmarkCondition");
                 if (bkmkPropInfo->hasPropertyByName(sCondition))
                 {
                     OUString sBookmarkCondition;
                     bkmkProps->getPropertyValue(sCondition) >>= sBookmarkCondition;
-                    GetExport().AddAttribute(XML_NAMESPACE_LO_EXT, "condition", sBookmarkCondition);
+                    GetExport().AddAttribute(XmlNamespace::LO_EXT, "condition", sBookmarkCondition);
                 }
             }
         }
@@ -2539,7 +2539,7 @@ void XMLTextParagraphExport::exportTextMark(
     assert(pElements != nullptr);
     assert(0 <= nElement && nElement <= 2);
     SvXMLElementExport aElem(GetExport(),
-                             XML_NAMESPACE_TEXT, pElements[nElement],
+                             XmlNamespace::TEXT, pElements[nElement],
                              false, false);
     // else: no styles. (see above)
 }
@@ -2578,7 +2578,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
         {
             OUString sName( xNamed->getName() );
             if( !sName.isEmpty() )
-                GetExport().AddAttribute( XML_NAMESPACE_DRAW, XML_NAME,
+                GetExport().AddAttribute( XmlNamespace::DRAW, XML_NAME,
                                           xNamed->getName() );
         }
     }
@@ -2593,7 +2593,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
         OUString sTmp;
         aAnchorTypeHdl.exportXML( sTmp, uno::makeAny(eAnchor),
                                   GetExport().GetMM100UnitConverter() );
-        GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_ANCHOR_TYPE, sTmp );
+        GetExport().AddAttribute( XmlNamespace::TEXT, XML_ANCHOR_TYPE, sTmp );
     }
 
     // text:anchor-page-number
@@ -2603,7 +2603,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
         rPropSet->getPropertyValue( gsAnchorPageNo ) >>= nPage;
         SAL_WARN_IF(nPage <= 0, "xmloff",
                 "ERROR: writing invalid anchor-page-number 0");
-        GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_ANCHOR_PAGE_NUMBER,
+        GetExport().AddAttribute( XmlNamespace::TEXT, XML_ANCHOR_PAGE_NUMBER,
                                   OUString::number( nPage ) );
     }
     else
@@ -2625,7 +2625,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
             rPropSet->getPropertyValue( gsHoriOrientPosition ) >>= nPos;
             GetExport().GetMM100UnitConverter().convertMeasureToXML(
                     sValue, nPos );
-            GetExport().AddAttribute( XML_NAMESPACE_SVG, XML_X,
+            GetExport().AddAttribute( XmlNamespace::SVG, XML_X,
                                       sValue.makeStringAndClear() );
             if(nullptr != pCenter)
             {
@@ -2648,7 +2648,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
             rPropSet->getPropertyValue( gsVertOrientPosition ) >>= nPos;
             GetExport().GetMM100UnitConverter().convertMeasureToXML(
                     sValue, nPos );
-            GetExport().AddAttribute( XML_NAMESPACE_SVG, XML_Y,
+            GetExport().AddAttribute( XmlNamespace::SVG, XML_Y,
                                       sValue.makeStringAndClear() );
             if(nullptr != pCenter)
             {
@@ -2687,7 +2687,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
         }
         else
         {
-            GetExport().AddAttribute( XML_NAMESPACE_SVG, XML_WIDTH,
+            GetExport().AddAttribute( XmlNamespace::SVG, XML_WIDTH,
                                       sValue.makeStringAndClear() );
             if(nullptr != pCenter)
             {
@@ -2701,7 +2701,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
     {
         bSyncWidth = *o3tl::doAccess<bool>(rPropSet->getPropertyValue( gsIsSyncWidthToHeight ));
         if( bSyncWidth )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_REL_WIDTH,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_REL_WIDTH,
                                       XML_SCALE );
     }
     if( !bSyncWidth && xPropSetInfo->hasPropertyByName( gsRelativeWidth ) )
@@ -2713,7 +2713,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
         if( nRelWidth > 0 )
         {
             ::sax::Converter::convertPercent( sValue, nRelWidth );
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_REL_WIDTH,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_REL_WIDTH,
                                       sValue.makeStringAndClear() );
         }
     }
@@ -2750,7 +2750,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
         }
         else
         {
-            GetExport().AddAttribute( XML_NAMESPACE_SVG, XML_HEIGHT,
+            GetExport().AddAttribute( XmlNamespace::SVG, XML_HEIGHT,
                                       sValue.makeStringAndClear() );
             if(nullptr != pCenter)
             {
@@ -2761,7 +2761,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
     }
     if( bSyncHeight )
     {
-        GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_REL_HEIGHT,
+        GetExport().AddAttribute( XmlNamespace::STYLE, XML_REL_HEIGHT,
                 SizeType::MIN == nSizeType ? XML_SCALE_MIN : XML_SCALE );
 
     }
@@ -2777,7 +2777,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
             }
         }
         else
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_REL_HEIGHT,
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_REL_HEIGHT,
                                       sValue.makeStringAndClear() );
     }
 
@@ -2788,7 +2788,7 @@ XMLShapeExportFlags XMLTextParagraphExport::addTextFrameAttributes(
         rPropSet->getPropertyValue( sZOrder ) >>= nZIndex;
         if( -1 != nZIndex )
         {
-            GetExport().AddAttribute( XML_NAMESPACE_DRAW, XML_ZINDEX,
+            GetExport().AddAttribute( XmlNamespace::DRAW, XML_ZINDEX,
                                       OUString::number( nZIndex ) );
         }
     }
@@ -2871,17 +2871,17 @@ void XMLTextParagraphExport::exportAnyTextFrame(
                 gsCharStyleNames );
 
             if( !sStyle.isEmpty() )
-                GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+                GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME,
                                   GetExport().EncodeStyleName( sStyle ) );
             {
                 SvXMLElementExport aElem( GetExport(), !sStyle.isEmpty(),
-                    XML_NAMESPACE_TEXT, XML_SPAN, false, false );
+                    XmlNamespace::TEXT, XML_SPAN, false, false );
                 {
                     SvXMLElementExport aElement( GetExport(),
                         FrameType::Shape != eType &&
                         addHyperlinkAttributes( xPropSet,
                                                 xPropState,xPropSetInfo ),
-                        XML_NAMESPACE_DRAW, XML_A, false, false );
+                        XmlNamespace::DRAW, XML_A, false, false );
                     switch( eType )
                     {
                     case FrameType::Text:
@@ -2929,20 +2929,20 @@ void XMLTextParagraphExport::_exportTextFrame(
     if ( sAutoStyle.isEmpty() )
         sAutoStyle = sStyle;
     if( !sAutoStyle.isEmpty() )
-        GetExport().AddAttribute( XML_NAMESPACE_DRAW, XML_STYLE_NAME,
+        GetExport().AddAttribute( XmlNamespace::DRAW, XML_STYLE_NAME,
                               GetExport().EncodeStyleName( sAutoStyle ) );
     addTextFrameAttributes(rPropSet, false, nullptr, &aMinHeightValue, &sMinWidthValue);
 
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_DRAW,
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::DRAW,
                               XML_FRAME, false, true );
 
     if( !aMinHeightValue.isEmpty() )
-        GetExport().AddAttribute( XML_NAMESPACE_FO, XML_MIN_HEIGHT,
+        GetExport().AddAttribute( XmlNamespace::FO, XML_MIN_HEIGHT,
                                   aMinHeightValue );
 
     if (!sMinWidthValue.isEmpty())
     {
-        GetExport().AddAttribute( XML_NAMESPACE_FO, XML_MIN_WIDTH,
+        GetExport().AddAttribute( XmlNamespace::FO, XML_MIN_WIDTH,
                                   sMinWidthValue );
     }
 
@@ -2951,13 +2951,13 @@ void XMLTextParagraphExport::_exportTextFrame(
     {
         OUString sNext;
         if( (rPropSet->getPropertyValue( gsChainNextName ) >>= sNext) && !sNext.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_DRAW,
+            GetExport().AddAttribute( XmlNamespace::DRAW,
                                       XML_CHAIN_NEXT_NAME,
                                       sNext );
     }
 
     {
-        SvXMLElementExport aElement( GetExport(), XML_NAMESPACE_DRAW,
+        SvXMLElementExport aElement( GetExport(), XmlNamespace::DRAW,
                                   XML_TEXT_BOX, true, true );
 
         // frames bound to frame
@@ -3018,7 +3018,7 @@ void XMLTextParagraphExport::exportContour(
         GetExport().GetMM100UnitConverter().convertMeasureToXML(aStringBuffer, basegfx::fround(aPolyPolygonRange.getWidth()));
     }
 
-    GetExport().AddAttribute(XML_NAMESPACE_SVG, XML_WIDTH, aStringBuffer.makeStringAndClear());
+    GetExport().AddAttribute(XmlNamespace::SVG, XML_WIDTH, aStringBuffer.makeStringAndClear());
 
     // svg: height
     if(bPixel)
@@ -3030,11 +3030,11 @@ void XMLTextParagraphExport::exportContour(
         GetExport().GetMM100UnitConverter().convertMeasureToXML(aStringBuffer, basegfx::fround(aPolyPolygonRange.getHeight()));
     }
 
-    GetExport().AddAttribute(XML_NAMESPACE_SVG, XML_HEIGHT, aStringBuffer.makeStringAndClear());
+    GetExport().AddAttribute(XmlNamespace::SVG, XML_HEIGHT, aStringBuffer.makeStringAndClear());
 
     // svg:viewbox
     SdXMLImExViewBox aViewBox(0.0, 0.0, aPolyPolygonRange.getWidth(), aPolyPolygonRange.getHeight());
-    GetExport().AddAttribute(XML_NAMESPACE_SVG, XML_VIEWBOX, aViewBox.GetExportString());
+    GetExport().AddAttribute(XmlNamespace::SVG, XML_VIEWBOX, aViewBox.GetExportString());
     enum XMLTokenEnum eElem = XML_TOKEN_INVALID;
 
     if(1 == nPolygonCount )
@@ -3045,7 +3045,7 @@ void XMLTextParagraphExport::exportContour(
                 aPolyPolygon.getB2DPolygon(0)));
 
         // write point array
-        GetExport().AddAttribute(XML_NAMESPACE_DRAW, XML_POINTS, aPointString);
+        GetExport().AddAttribute(XmlNamespace::DRAW, XML_POINTS, aPointString);
         eElem = XML_CONTOUR_POLYGON;
     }
     else
@@ -3059,7 +3059,7 @@ void XMLTextParagraphExport::exportContour(
                 true));         // bHandleRelativeNextPointCompatible
 
         // write point array
-        GetExport().AddAttribute( XML_NAMESPACE_SVG, XML_D, aPolygonString);
+        GetExport().AddAttribute( XmlNamespace::SVG, XML_D, aPolygonString);
         eElem = XML_CONTOUR_PATH;
     }
 
@@ -3067,12 +3067,12 @@ void XMLTextParagraphExport::exportContour(
     {
         bool bTmp = *o3tl::doAccess<bool>(rPropSet->getPropertyValue(
                                             gsIsAutomaticContour ));
-        GetExport().AddAttribute( XML_NAMESPACE_DRAW,
+        GetExport().AddAttribute( XmlNamespace::DRAW,
                       XML_RECREATE_ON_EDIT, bTmp ? XML_TRUE : XML_FALSE );
     }
 
     // write object now
-    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_DRAW, eElem,
+    SvXMLElementExport aElem( GetExport(), XmlNamespace::DRAW, eElem,
                               true, true );
 }
 
@@ -3090,7 +3090,7 @@ void XMLTextParagraphExport::_exportTextGraphic(
     if ( sAutoStyle.isEmpty() )
         sAutoStyle = sStyle;
     if( !sAutoStyle.isEmpty() )
-        GetExport().AddAttribute( XML_NAMESPACE_DRAW, XML_STYLE_NAME,
+        GetExport().AddAttribute( XmlNamespace::DRAW, XML_STYLE_NAME,
                                   GetExport().EncodeStyleName( sAutoStyle ) );
 
     // check if we need to use svg:transform
@@ -3136,13 +3136,13 @@ void XMLTextParagraphExport::_exportTextGraphic(
         // be available at GetExport() - and maybe was once). May have to be addressed as soon
         // as translate transformations are used here.
         GetExport().AddAttribute(
-            XML_NAMESPACE_DRAW,
+            XmlNamespace::DRAW,
             XML_TRANSFORM,
             aSdXMLImExTransform2D.GetExportString(GetExport().GetMM100UnitConverter()));
     }
 
     // original content
-    SvXMLElementExport aElem(GetExport(), XML_NAMESPACE_DRAW, XML_FRAME, false, true);
+    SvXMLElementExport aElem(GetExport(), XmlNamespace::DRAW, XML_FRAME, false, true);
 
     {
         // xlink:href
@@ -3160,17 +3160,17 @@ void XMLTextParagraphExport::_exportTextGraphic(
         // If there still is no url, then graphic is empty
         if (!sInternalURL.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sInternalURL);
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE);
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED);
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_HREF, sInternalURL);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_SHOW, XML_EMBED);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD);
         }
 
         // draw:filter-name
         OUString sGrfFilter;
         rPropSet->getPropertyValue( gsGraphicFilter ) >>= sGrfFilter;
         if( !sGrfFilter.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_DRAW, XML_FILTER_NAME,
+            GetExport().AddAttribute( XmlNamespace::DRAW, XML_FILTER_NAME,
                                       sGrfFilter );
 
         if (GetExport().getSaneDefaultVersion() > SvtSaveOptions::ODFSVER_012)
@@ -3183,8 +3183,8 @@ void XMLTextParagraphExport::_exportTextGraphic(
             {   // ODF 1.3 OFFICE-3943
                 GetExport().AddAttribute(
                     SvtSaveOptions::ODFSVER_013 <= GetExport().getSaneDefaultVersion()
-                        ? XML_NAMESPACE_DRAW
-                        : XML_NAMESPACE_LO_EXT,
+                        ? XmlNamespace::DRAW
+                        : XmlNamespace::LO_EXT,
                     "mime-type", sOutMimeType);
             }
         }
@@ -3193,7 +3193,7 @@ void XMLTextParagraphExport::_exportTextGraphic(
         // optional office:binary-data
         if (xGraphic.is())
         {
-            SvXMLElementExport aElement(GetExport(), XML_NAMESPACE_DRAW, XML_IMAGE, false, true );
+            SvXMLElementExport aElement(GetExport(), XmlNamespace::DRAW, XML_IMAGE, false, true );
             GetExport().AddEmbeddedXGraphicAsBase64(xGraphic);
         }
     }
@@ -3219,10 +3219,10 @@ void XMLTextParagraphExport::_exportTextGraphic(
         // If there is no url, then graphic is empty
         if (!sInternalURL.isEmpty())
         {
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_HREF, sInternalURL);
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE);
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_SHOW, XML_EMBED);
-            GetExport().AddAttribute(XML_NAMESPACE_XLINK, XML_ACTUATE, XML_ONLOAD);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_HREF, sInternalURL);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_SHOW, XML_EMBED);
+            GetExport().AddAttribute(XmlNamespace::XLINK, XML_ACTUATE, XML_ONLOAD);
         }
 
         if (GetExport().getSaneDefaultVersion() > SvtSaveOptions::ODFSVER_012)
@@ -3235,8 +3235,8 @@ void XMLTextParagraphExport::_exportTextGraphic(
             {   // ODF 1.3 OFFICE-3943
                 GetExport().AddAttribute(
                     SvtSaveOptions::ODFSVER_013 <= GetExport().getSaneDefaultVersion()
-                        ? XML_NAMESPACE_DRAW
-                        : XML_NAMESPACE_LO_EXT,
+                        ? XmlNamespace::DRAW
+                        : XmlNamespace::LO_EXT,
                     "mime-type", sOutMimeType);
             }
         }
@@ -3245,7 +3245,7 @@ void XMLTextParagraphExport::_exportTextGraphic(
         // optional office:binary-data
         if (xReplacementGraphic.is())
         {
-            SvXMLElementExport aElement(GetExport(), XML_NAMESPACE_DRAW, XML_IMAGE, true, true);
+            SvXMLElementExport aElement(GetExport(), XmlNamespace::DRAW, XML_IMAGE, true, true);
             GetExport().AddEmbeddedXGraphicAsBase64(xReplacementGraphic);
         }
     }
@@ -3299,7 +3299,7 @@ void XMLTextParagraphExport::exportTitleAndDescription(
         rPropSet->getPropertyValue( gsTitle ) >>= sObjTitle;
         if( !sObjTitle.isEmpty() )
         {
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_SVG,
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::SVG,
                                       XML_TITLE, true, false );
             GetExport().Characters( sObjTitle );
         }
@@ -3312,7 +3312,7 @@ void XMLTextParagraphExport::exportTitleAndDescription(
         rPropSet->getPropertyValue( gsDescription ) >>= sObjDesc;
         if( !sObjDesc.isEmpty() )
         {
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_SVG,
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::SVG,
                                       XML_DESC, true, false );
             GetExport().Characters( sObjDesc );
         }
@@ -3392,30 +3392,30 @@ bool XMLTextParagraphExport::addHyperlinkAttributes(
 
     if ( bExport )
     {
-        GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_TYPE, XML_SIMPLE );
-        GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, GetExport().GetRelativeReference( sHRef ) );
+        GetExport().AddAttribute( XmlNamespace::XLINK, XML_TYPE, XML_SIMPLE );
+        GetExport().AddAttribute( XmlNamespace::XLINK, XML_HREF, GetExport().GetRelativeReference( sHRef ) );
 
         if( !sName.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_OFFICE, XML_NAME, sName );
+            GetExport().AddAttribute( XmlNamespace::OFFICE, XML_NAME, sName );
 
         if( !sTargetFrame.isEmpty() )
         {
-            GetExport().AddAttribute( XML_NAMESPACE_OFFICE,
+            GetExport().AddAttribute( XmlNamespace::OFFICE,
                                       XML_TARGET_FRAME_NAME, sTargetFrame );
             enum XMLTokenEnum eTok = sTargetFrame == "_blank" ? XML_NEW : XML_REPLACE;
-            GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_SHOW, eTok );
+            GetExport().AddAttribute( XmlNamespace::XLINK, XML_SHOW, eTok );
         }
 
         if( bServerMap  )
-            GetExport().AddAttribute( XML_NAMESPACE_OFFICE,
+            GetExport().AddAttribute( XmlNamespace::OFFICE,
                                       XML_SERVER_MAP, XML_TRUE );
 
         if( !sUStyleName.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute( XmlNamespace::TEXT,
               XML_STYLE_NAME, GetExport().EncodeStyleName( sUStyleName ) );
 
         if( !sVStyleName.isEmpty() )
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute( XmlNamespace::TEXT,
               XML_VISITED_STYLE_NAME, GetExport().EncodeStyleName( sVStyleName ) );
     }
 
@@ -3441,13 +3441,13 @@ void XMLTextParagraphExport::exportTextRangeSpan(
 
     if ( !sStyle.isEmpty() )
     {
-        GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_STYLE_NAME, GetExport().EncodeStyleName( sStyle ) );
+        GetExport().AddAttribute( XmlNamespace::TEXT, XML_STYLE_NAME, GetExport().EncodeStyleName( sStyle ) );
     }
     {
-        SvXMLElementExport aElement( GetExport(), !sStyle.isEmpty(), XML_NAMESPACE_TEXT, XML_SPAN, false, false );
+        SvXMLElementExport aElement( GetExport(), !sStyle.isEmpty(), XmlNamespace::TEXT, XML_SPAN, false, false );
         const OUString aText( rTextRange->getString() );
         SvXMLElementExport aElem2( GetExport(), TEXT == openFieldMark,
-            XML_NAMESPACE_TEXT, XML_TEXT_INPUT,
+            XmlNamespace::TEXT, XML_TEXT_INPUT,
             false, false );
         exportCharacterData(aText, rPrevCharIsSpace);
         openFieldMark = NONE;
@@ -3484,7 +3484,7 @@ void XMLTextParagraphExport::exportTextRange(
 
         if ( bHyperlink && bHyperlinkAttrsAdded )
         {
-            SvXMLElementExport aElem( GetExport(), true, XML_NAMESPACE_TEXT, XML_A, false, false );
+            SvXMLElementExport aElem( GetExport(), true, XmlNamespace::TEXT, XML_A, false, false );
 
             // export events (if supported)
             OUString sHyperLinkEvents(
@@ -3568,11 +3568,11 @@ void XMLTextParagraphExport::exportCharacterData(const OUString& rText,
 
             if( nSpaceChars > 1 )
             {
-                GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_C,
+                GetExport().AddAttribute( XmlNamespace::TEXT, XML_C,
                               OUString::number(nSpaceChars) );
             }
 
-            SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+            SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                                       XML_S, false, false );
 
             nSpaceChars = 0;
@@ -3586,14 +3586,14 @@ void XMLTextParagraphExport::exportCharacterData(const OUString& rText,
             {
             case 0x0009:    // Tab
                 {
-                    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+                    SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                                               XML_TAB, false,
                                               false );
                 }
                 break;
             case 0x000A:    // LF
                 {
-                    SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT,
+                    SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT,
                                               XML_LINE_BREAK, false,
                                               false );
                 }
@@ -3629,11 +3629,11 @@ void XMLTextParagraphExport::exportCharacterData(const OUString& rText,
     {
         if( nSpaceChars > 1 )
         {
-            GetExport().AddAttribute( XML_NAMESPACE_TEXT, XML_C,
+            GetExport().AddAttribute( XmlNamespace::TEXT, XML_C,
                           OUString::number(nSpaceChars) );
         }
 
-        SvXMLElementExport aElem( GetExport(), XML_NAMESPACE_TEXT, XML_S,
+        SvXMLElementExport aElem( GetExport(), XmlNamespace::TEXT, XML_S,
                                   false, false );
     }
 }
@@ -3658,10 +3658,10 @@ void XMLTextParagraphExport::exportTextDeclarations()
     xPropertySet->getPropertyValue(sIndexAutoMarkFileURL) >>= sUrl;
     if (!sUrl.isEmpty())
     {
-        GetExport().AddAttribute( XML_NAMESPACE_XLINK, XML_HREF,
+        GetExport().AddAttribute( XmlNamespace::XLINK, XML_HREF,
                                   GetExport().GetRelativeReference(sUrl) );
         SvXMLElementExport aAutoMarkElement(
-            GetExport(), XML_NAMESPACE_TEXT,
+            GetExport(), XmlNamespace::TEXT,
             XML_ALPHABETICAL_INDEX_AUTO_MARK_FILE,
             true, true );
     }
@@ -3760,13 +3760,13 @@ void XMLTextParagraphExport::exportRuby(
             GetExport().CheckAttrList();
             OUString sStyleName(Find(XmlStyleFamily::TEXT_RUBY, rPropSet, ""));
             SAL_WARN_IF(sStyleName.isEmpty(), "xmloff", "Can't find ruby style!");
-            GetExport().AddAttribute(XML_NAMESPACE_TEXT,
+            GetExport().AddAttribute(XmlNamespace::TEXT,
                                      XML_STYLE_NAME, sStyleName);
 
             // export <text:ruby> and <text:ruby-base> start elements
-            GetExport().StartElement( XML_NAMESPACE_TEXT, XML_RUBY, false);
+            GetExport().StartElement( XmlNamespace::TEXT, XML_RUBY, false);
             GetExport().ClearAttrList();
-            GetExport().StartElement( XML_NAMESPACE_TEXT, XML_RUBY_BASE,
+            GetExport().StartElement( XmlNamespace::TEXT, XML_RUBY_BASE,
                                       false );
             bOpenRuby = true;
         }
@@ -3780,25 +3780,25 @@ void XMLTextParagraphExport::exportRuby(
                 return;
 
             // close <text:ruby-base>
-            GetExport().EndElement(XML_NAMESPACE_TEXT, XML_RUBY_BASE,
+            GetExport().EndElement(XmlNamespace::TEXT, XML_RUBY_BASE,
                                    false);
 
             // write the ruby text (with char style)
             {
                 if (!sOpenRubyCharStyle.isEmpty())
                     GetExport().AddAttribute(
-                        XML_NAMESPACE_TEXT, XML_STYLE_NAME,
+                        XmlNamespace::TEXT, XML_STYLE_NAME,
                         GetExport().EncodeStyleName( sOpenRubyCharStyle) );
 
                 SvXMLElementExport aRubyElement(
-                    GetExport(), XML_NAMESPACE_TEXT, XML_RUBY_TEXT,
+                    GetExport(), XmlNamespace::TEXT, XML_RUBY_TEXT,
                     false, false);
 
                 GetExport().Characters(sOpenRubyText);
             }
 
             // and finally, close the ruby
-            GetExport().EndElement(XML_NAMESPACE_TEXT, XML_RUBY, false);
+            GetExport().EndElement(XmlNamespace::TEXT, XML_RUBY, false);
             bOpenRuby = false;
         }
     }
@@ -3834,7 +3834,7 @@ void XMLTextParagraphExport::exportMeta(
     }
 
     SvXMLElementExport aElem( GetExport(), doExport,
-        XML_NAMESPACE_TEXT, XML_META, false, false );
+        XmlNamespace::TEXT, XML_META, false, false );
 
     // recurse to export content
     exportTextRangeEnumeration(xTextEnum, i_bAutoStyles, i_isProgress, rPrevCharIsSpace);
diff --git a/xmloff/source/text/txtparai.cxx b/xmloff/source/text/txtparai.cxx
index 54a86e01157b..cdf312c630a8 100644
--- a/xmloff/source/text/txtparai.cxx
+++ b/xmloff/source/text/txtparai.cxx
@@ -128,7 +128,7 @@ XMLCharContext::XMLCharContext(
 
         OUString aLocalName;
         sal_uInt16 nPrefix =rMap.GetKeyByAttrName( rAttrName,&aLocalName );
-        if( XML_NAMESPACE_TEXT == nPrefix &&
+        if( XmlNamespace::TEXT == nPrefix &&
             IsXMLToken( aLocalName, XML_C ) )
         {
             sal_Int32 nTmp = xAttrList->getValueByIndex(i).toInt32();
@@ -312,7 +312,7 @@ bool XMLStartReferenceContext_Impl::FindName(
             GetKeyByAttrName( xAttrList->getNameByIndex(nAttr),
                               &sLocalName );
 
-        if ( (XML_NAMESPACE_TEXT == nPrefix) &&
+        if ( (XmlNamespace::TEXT == nPrefix) &&
              IsXMLToken(sLocalName, XML_NAME)   )
         {
             rName = xAttrList->getValueByIndex(nAttr);
@@ -520,7 +520,7 @@ SvXMLImportContextRef XMLImpHyperlinkContext_Impl::CreateChildContext(
         sal_uInt16 nPrefix, const OUString& rLocalName,
         const Reference< xml::sax::XAttributeList > & xAttrList )
 {
-    if ( (nPrefix == XML_NAMESPACE_OFFICE) &&
+    if ( (nPrefix == XmlNamespace::OFFICE) &&
          IsXMLToken(rLocalName, XML_EVENT_LISTENERS) )
     {
         XMLEventsImportContext* pCtxt = new XMLEventsImportContext(
@@ -677,7 +677,7 @@ XMLImpRubyTextContext_Impl::XMLImpRubyTextContext_Impl(
         sal_uInt16 nPrefix =
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
-        if( XML_NAMESPACE_TEXT == nPrefix &&
+        if( XmlNamespace::TEXT == nPrefix &&
             IsXMLToken( aLocalName, XML_STYLE_NAME ) )
         {
             m_rRubyContext.SetTextStyleName( rValue );
@@ -714,7 +714,7 @@ XMLImpRubyContext_Impl::XMLImpRubyContext_Impl(
         sal_uInt16 nPrefix =
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
-        if( XML_NAMESPACE_TEXT == nPrefix &&
+        if( XmlNamespace::TEXT == nPrefix &&
             IsXMLToken( aLocalName, XML_STYLE_NAME ) )
         {
             m_sStyleName = rValue;
@@ -745,7 +745,7 @@ SvXMLImportContextRef XMLImpRubyContext_Impl::CreateChildContext(
         const Reference< xml::sax::XAttributeList > & xAttrList )
 {
     SvXMLImportContextRef xContext;
-    if( XML_NAMESPACE_TEXT == nPrefix )
+    if( XmlNamespace::TEXT == nPrefix )
     {
         if( IsXMLToken( rLocalName, XML_RUBY_BASE ) )
             xContext = new XMLImpRubyBaseContext_Impl( GetImport(), nPrefix,
@@ -875,7 +875,7 @@ void XMLMetaImportContextBase::Characters( const OUString& i_rChars )
 void XMLMetaImportContextBase::ProcessAttribute(sal_uInt16 const i_nPrefix,
     OUString const & i_rLocalName, OUString const & i_rValue)
 {
-    if ( (XML_NAMESPACE_XML == i_nPrefix) && IsXMLToken(i_rLocalName, XML_ID) )
+    if ( (XmlNamespace::XML == i_nPrefix) && IsXMLToken(i_rLocalName, XML_ID) )
     {
         m_XmlId = i_rValue;
     }
@@ -925,7 +925,7 @@ XMLMetaImportContext::XMLMetaImportContext(
 void XMLMetaImportContext::ProcessAttribute(sal_uInt16 const i_nPrefix,
     OUString const & i_rLocalName, OUString const & i_rValue)
 {
-    if ( XML_NAMESPACE_XHTML == i_nPrefix )
+    if ( XmlNamespace::XHTML == i_nPrefix )
     {
         // RDFa
         if ( IsXMLToken( i_rLocalName, XML_ABOUT) )
@@ -1019,7 +1019,7 @@ XMLMetaFieldImportContext::XMLMetaFieldImportContext(
 void XMLMetaFieldImportContext::ProcessAttribute(sal_uInt16 const i_nPrefix,
     OUString const & i_rLocalName, OUString const & i_rValue)
 {
-    if ( XML_NAMESPACE_STYLE == i_nPrefix &&
+    if ( XmlNamespace::STYLE == i_nPrefix &&
          IsXMLToken( i_rLocalName, XML_DATA_STYLE_NAME ) )
     {
         m_DataStyleName = i_rValue;
@@ -1246,7 +1246,7 @@ void XMLIndexMarkImportContext_Impl::ProcessAttribute(
         case XML_TOK_TEXT_TOC_MARK:
         case XML_TOK_TEXT_USER_INDEX_MARK:
         case XML_TOK_TEXT_ALPHA_INDEX_MARK:
-            if ( (XML_NAMESPACE_TEXT == nNamespace) &&
+            if ( (XmlNamespace::TEXT == nNamespace) &&
                  IsXMLToken( sLocalName, XML_STRING_VALUE ) )
             {
                 rPropSet->setPropertyValue("AlternativeText", uno::makeAny(sValue));
@@ -1260,7 +1260,7 @@ void XMLIndexMarkImportContext_Impl::ProcessAttribute(
         case XML_TOK_TEXT_TOC_MARK_END:
         case XML_TOK_TEXT_USER_INDEX_MARK_END:
         case XML_TOK_TEXT_ALPHA_INDEX_MARK_END:
-            if ( (XML_NAMESPACE_TEXT == nNamespace) &&
+            if ( (XmlNamespace::TEXT == nNamespace) &&
                  IsXMLToken( sLocalName, XML_ID ) )
             {
                 sID = sValue;
@@ -1372,7 +1372,7 @@ void XMLTOCMarkImportContext_Impl::ProcessAttribute(
 {
     SAL_WARN_IF(!rPropSet.is(), "xmloff.text", "need PropertySet");
 
-    if ((XML_NAMESPACE_TEXT == nNamespace) &&
+    if ((XmlNamespace::TEXT == nNamespace) &&
         IsXMLToken( sLocalName, XML_OUTLINE_LEVEL ) )
     {
         // ouline level: set Level property
@@ -1430,7 +1430,7 @@ void XMLUserIndexMarkImportContext_Impl::ProcessAttribute(
     sal_uInt16 nNamespace, const OUString& sLocalName, const OUString& sValue,
     Reference<beans::XPropertySet>& rPropSet)
 {
-    if ( XML_NAMESPACE_TEXT == nNamespace )
+    if ( XmlNamespace::TEXT == nNamespace )
     {
         if ( IsXMLToken( sLocalName, XML_INDEX_NAME ) )
         {
@@ -1499,7 +1499,7 @@ void XMLAlphaIndexMarkImportContext_Impl::ProcessAttribute(
     sal_uInt16 nNamespace, const OUString& sLocalName, const OUString& sValue,
     Reference<beans::XPropertySet>& rPropSet)
 {
-    if (XML_NAMESPACE_TEXT == nNamespace)
+    if (XmlNamespace::TEXT == nNamespace)
     {
         if ( IsXMLToken( sLocalName, XML_KEY1 ) )
         {
@@ -1571,7 +1571,7 @@ XMLImpSpanContext_Impl::XMLImpSpanContext_Impl(
         sal_uInt16 nPrefix =
             GetImport().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                             &aLocalName );
-        if( XML_NAMESPACE_TEXT == nPrefix &&
+        if( XmlNamespace::TEXT == nPrefix &&
             IsXMLToken( aLocalName, XML_STYLE_NAME ) )
             aStyleName = xAttrList->getValueByIndex( i );
     }
@@ -1810,7 +1810,7 @@ SvXMLImportContextRef XMLImpSpanContext_Impl::CreateChildContext(
         // #108784# import draw elements (except control shapes in headers)
         if( pContext == nullptr &&
             !( rImport.GetTextImport()->IsInHeaderFooter() &&
-               nPrefix == XML_NAMESPACE_DRAW &&
+               nPrefix == XmlNamespace::DRAW &&
                IsXMLToken( rLocalName, XML_CONTROL ) ) )
         {
             Reference < XShapes > xShapes;
@@ -2370,8 +2370,8 @@ SvXMLImportContextRef XMLNumberedParaContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if ( XML_NAMESPACE_TEXT == i_nPrefix ||
-            XML_NAMESPACE_LO_EXT == i_nPrefix )
+    if ( XmlNamespace::TEXT == i_nPrefix ||
+            XmlNamespace::LO_EXT == i_nPrefix )
     {
         bool bIsHeader( IsXMLToken( i_rLocalName, XML_H ) );
         if ( bIsHeader || IsXMLToken( i_rLocalName, XML_P ) )
diff --git a/xmloff/source/text/txtprmap.cxx b/xmloff/source/text/txtprmap.cxx
index 61f59505a9d7..c99fe29a4e74 100644
--- a/xmloff/source/text/txtprmap.cxx
+++ b/xmloff/source/text/txtprmap.cxx
@@ -32,13 +32,13 @@ using namespace ::com::sun::star::uno;
 using namespace ::xmloff::token;
 
 #define M_E_( a, p, l, t, c ) \
-    { a, sizeof(a)-1, XML_NAMESPACE_##p, XML_##l, t, c, SvtSaveOptions::ODFSVER_010, false }
+    { a, sizeof(a)-1, XmlNamespace::##p, XML_##l, t, c, SvtSaveOptions::ODFSVER_010, false }
 
 #define M_EV_( a, p, l, t, c, v ) \
-    { a, sizeof(a)-1, XML_NAMESPACE_##p, XML_##l, t, c, v, false }
+    { a, sizeof(a)-1, XmlNamespace::##p, XML_##l, t, c, v, false }
 
 #define M_ED_( a, p, l, t, c ) \
-    { a, sizeof(a)-1, XML_NAMESPACE_##p, XML_##l, (t) | MID_FLAG_DEFAULT_ITEM_EXPORT, c, SvtSaveOptions::ODFSVER_010, false }
+    { a, sizeof(a)-1, XmlNamespace::##p, XML_##l, (t) | MID_FLAG_DEFAULT_ITEM_EXPORT, c, SvtSaveOptions::ODFSVER_010, false }
 
 // text properties
 #define MT_E( a, p, l, t, c ) \
@@ -95,26 +95,26 @@ XMLPropertyMapEntry const aXMLParaPropMap[] =
     // fill attributes for paragraph backgrounds
     // #i125045# moved to the front to be able to exclude these in lcl_txtprmap_getMap
     // for TextPropMap::SHAPE_PARA to not have these double for Shapes (which already have these)
-    GMAP( "FillStyle",                      XML_NAMESPACE_DRAW, XML_FILL,                   XML_SW_TYPE_FILLSTYLE, 0 ),
-    GMAP( "FillColor",                      XML_NAMESPACE_DRAW, XML_FILL_COLOR,             XML_TYPE_COLOR, 0 ),
-    GMAP( "FillColor2",                     XML_NAMESPACE_DRAW, XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR, 0 ),
-    GMAP( "FillGradientName",               XML_NAMESPACE_DRAW, XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLGRADIENTNAME ),
-    GMAP( "FillGradientStepCount",          XML_NAMESPACE_DRAW, XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16, 0 ),
-    GMAP( "FillHatchName",                  XML_NAMESPACE_DRAW, XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLHATCHNAME ),
-    GMAP( "FillBackground",                 XML_NAMESPACE_DRAW, XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL, 0 ),
-    GMAP( "FillBitmapName",                 XML_NAMESPACE_DRAW, XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLBITMAPNAME ),
-    GMAP( "FillTransparence",               XML_NAMESPACE_DRAW, XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY, 0 ),    // exists in SW, too
-    GMAP( "FillTransparenceGradientName",   XML_NAMESPACE_DRAW, XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLTRANSNAME ),
-    GMAP( "FillBitmapSizeX",                XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapLogicalSize",          XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapSizeY",                XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapLogicalSize",          XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapMode",                 XML_NAMESPACE_STYLE,XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapPositionOffsetX",      XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT, 0 ),
-    GMAP( "FillBitmapPositionOffsetY",      XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT, 0 ),
-    GMAP( "FillBitmapRectanglePoint",       XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT, 0 ),
-    GMAP( "FillBitmapOffsetX",              XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_X ),
-    GMAP( "FillBitmapOffsetY",              XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_Y ),
+    GMAP( "FillStyle",                      XmlNamespace::DRAW, XML_FILL,                   XML_SW_TYPE_FILLSTYLE, 0 ),
+    GMAP( "FillColor",                      XmlNamespace::DRAW, XML_FILL_COLOR,             XML_TYPE_COLOR, 0 ),
+    GMAP( "FillColor2",                     XmlNamespace::DRAW, XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR, 0 ),
+    GMAP( "FillGradientName",               XmlNamespace::DRAW, XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLGRADIENTNAME ),
+    GMAP( "FillGradientStepCount",          XmlNamespace::DRAW, XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16, 0 ),
+    GMAP( "FillHatchName",                  XmlNamespace::DRAW, XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLHATCHNAME ),
+    GMAP( "FillBackground",                 XmlNamespace::DRAW, XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL, 0 ),
+    GMAP( "FillBitmapName",                 XmlNamespace::DRAW, XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLBITMAPNAME ),
+    GMAP( "FillTransparence",               XmlNamespace::DRAW, XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY, 0 ),    // exists in SW, too
+    GMAP( "FillTransparenceGradientName",   XmlNamespace::DRAW, XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLTRANSNAME ),
+    GMAP( "FillBitmapSizeX",                XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapLogicalSize",          XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapSizeY",                XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapLogicalSize",          XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapMode",                 XmlNamespace::STYLE,XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapPositionOffsetX",      XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT, 0 ),
+    GMAP( "FillBitmapPositionOffsetY",      XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT, 0 ),
+    GMAP( "FillBitmapRectanglePoint",       XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT, 0 ),
+    GMAP( "FillBitmapOffsetX",              XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_X ),
+    GMAP( "FillBitmapOffsetY",              XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_Y ),
 
     // RES_LR_SPACE
     // !!! DO NOT REORDER THE MARGINS !!!
@@ -129,16 +129,16 @@ XMLPropertyMapEntry const aXMLParaPropMap[] =
     MP_E( "ParaTopMarginRelative",  FO, MARGIN_TOP,         XML_TYPE_PERCENT16, CTF_PARATOPMARGIN_REL ),
     MP_E( "ParaBottomMargin",       FO, MARGIN_BOTTOM,      XML_TYPE_MEASURE|MID_FLAG_MULTI_PROPERTY, CTF_PARABOTTOMMARGIN ),
     MP_E( "ParaBottomMarginRelative",FO,    MARGIN_BOTTOM,      XML_TYPE_PERCENT16, CTF_PARABOTTOMMARGIN_REL ),
-    MAP_ODF13( "ParaContextMargin", XML_NAMESPACE_STYLE, XML_CONTEXTUAL_SPACING, XML_TYPE_BOOL|XML_TYPE_PROP_PARAGRAPH, 0 ),    // ODF 1.3 OFFICE-3767 and was written by LO<=4.2
-    MAP_ODF13( "ParaContextMargin", XML_NAMESPACE_LO_EXT, XML_CONTEXTUAL_SPACING, XML_TYPE_BOOL|XML_TYPE_PROP_PARAGRAPH, 0 ),     // extension namespace
+    MAP_ODF13( "ParaContextMargin", XmlNamespace::STYLE, XML_CONTEXTUAL_SPACING, XML_TYPE_BOOL|XML_TYPE_PROP_PARAGRAPH, 0 ),    // ODF 1.3 OFFICE-3767 and was written by LO<=4.2
+    MAP_ODF13( "ParaContextMargin", XmlNamespace::LO_EXT, XML_CONTEXTUAL_SPACING, XML_TYPE_BOOL|XML_TYPE_PROP_PARAGRAPH, 0 ),     // extension namespace
     // RES_CHRATR_CASEMAP
     MT_E( "CharCaseMap",        FO,     FONT_VARIANT,       XML_TYPE_TEXT_CASEMAP_VAR,  0 ),
     MT_E( "CharCaseMap",        FO,     TEXT_TRANSFORM,     XML_TYPE_TEXT_CASEMAP,  0 ),
     // RES_CHRATR_COLOR
     MT_ED( "CharColor",     FO,     COLOR,              XML_TYPE_COLORAUTO|MID_FLAG_MERGE_PROPERTY, 0 ),
     MT_ED( "CharColor",     STYLE,  USE_WINDOW_FONT_COLOR,  XML_TYPE_ISAUTOCOLOR|MID_FLAG_MERGE_PROPERTY,   0 ),
-    MAP_EXT_I("CharTransparence", XML_NAMESPACE_DRAW, XML_OPACITY, XML_TYPE_NEG_PERCENT16 | XML_TYPE_PROP_TEXT, 0),
-    MAP_EXT("CharTransparence", XML_NAMESPACE_LO_EXT, XML_OPACITY, XML_TYPE_NEG_PERCENT16 | XML_TYPE_PROP_TEXT, 0),
+    MAP_EXT_I("CharTransparence", XmlNamespace::DRAW, XML_OPACITY, XML_TYPE_NEG_PERCENT16 | XML_TYPE_PROP_TEXT, 0),
+    MAP_EXT("CharTransparence", XmlNamespace::LO_EXT, XML_OPACITY, XML_TYPE_NEG_PERCENT16 | XML_TYPE_PROP_TEXT, 0),
     // RES_CHRATR_CONTOUR
     MT_E( "CharContoured",  STYLE,  TEXT_OUTLINE,       XML_TYPE_BOOL,  0 ),
     // RES_CHRATR_CROSSEDOUT
@@ -181,9 +181,9 @@ XMLPropertyMapEntry const aXMLParaPropMap[] =
     // RES_CHRATR_WEIGHT
     MT_E( "CharWeight",     FO,     FONT_WEIGHT,        XML_TYPE_TEXT_WEIGHT, 0 ),
     // RES_CHRATR_RSID
-    { "Rsid", sizeof("Rsid")-1, XML_NAMESPACE_OFFICE_EXT, XML_RSID, XML_TYPE_HEX|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
+    { "Rsid", sizeof("Rsid")-1, XmlNamespace::OFFICE_EXT, XML_RSID, XML_TYPE_HEX|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
     // RES_PARATR_RSID
-    { "ParRsid", sizeof("ParRsid")-1, XML_NAMESPACE_OFFICE_EXT, XML_PARRSID, XML_TYPE_HEX|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
+    { "ParRsid", sizeof("ParRsid")-1, XmlNamespace::OFFICE_EXT, XML_PARRSID, XML_TYPE_HEX|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
     // RES_CHRATR_WORDLINEMODE
     MT_E( "CharWordMode",   STYLE,  TEXT_UNDERLINE_MODE,        XML_TYPE_TEXT_LINE_MODE|MID_FLAG_MERGE_PROPERTY, 0 ),
     MT_E( "CharWordMode",   STYLE,  TEXT_OVERLINE_MODE,     XML_TYPE_TEXT_LINE_MODE|MID_FLAG_MERGE_PROPERTY, 0 ),
@@ -261,41 +261,41 @@ XMLPropertyMapEntry const aXMLParaPropMap[] =
     MT_E( "CharOverlineColor",  STYLE,  TEXT_OVERLINE_COLOR,        XML_TYPE_TEXT_OVERLINE_COLOR|MID_FLAG_MULTI_PROPERTY, 0 ),
     MT_E( "CharOverlineHasColor",   STYLE,  TEXT_OVERLINE_COLOR,        XML_TYPE_TEXT_OVERLINE_HASCOLOR|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
     // RES_CHRATR_BOX
-    MAP_EXT( "CharLeftBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERWIDTH ),
-    MAP_EXT( "CharLeftBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERWIDTH ),
-    MAP_EXT( "CharRightBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERWIDTH ),
-    MAP_EXT( "CharTopBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERWIDTH ),
-    MAP_EXT( "CharBottomBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERWIDTH ),
-    MAP_EXT_I( "CharLeftBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERWIDTH ),
-    MAP_EXT_I( "CharLeftBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERWIDTH ),
-    MAP_EXT_I( "CharRightBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERWIDTH ),
-    MAP_EXT_I( "CharTopBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERWIDTH ),
-    MAP_EXT_I( "CharBottomBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERWIDTH ),
-
-    MAP_EXT( "CharLeftBorderDistance", XML_NAMESPACE_LO_EXT, XML_PADDING, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERDISTANCE ),
-    MAP_EXT( "CharLeftBorderDistance", XML_NAMESPACE_LO_EXT, XML_PADDING_LEFT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERDISTANCE ),
-    MAP_EXT( "CharRightBorderDistance", XML_NAMESPACE_LO_EXT, XML_PADDING_RIGHT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERDISTANCE ),
-    MAP_EXT( "CharTopBorderDistance",  XML_NAMESPACE_LO_EXT, XML_PADDING_TOP, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERDISTANCE ),
-    MAP_EXT( "CharBottomBorderDistance",XML_NAMESPACE_LO_EXT, XML_PADDING_BOTTOM, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERDISTANCE ),
-    MAP_EXT_I( "CharLeftBorderDistance", XML_NAMESPACE_FO, XML_PADDING, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERDISTANCE ),
-    MAP_EXT_I( "CharLeftBorderDistance", XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERDISTANCE ),
-    MAP_EXT_I( "CharRightBorderDistance", XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERDISTANCE ),
-    MAP_EXT_I( "CharTopBorderDistance",  XML_NAMESPACE_FO, XML_PADDING_TOP, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERDISTANCE ),
-    MAP_EXT_I( "CharBottomBorderDistance",XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERDISTANCE ),
-
-    MAP_EXT( "CharLeftBorder", XML_NAMESPACE_LO_EXT, XML_BORDER, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDER ),
-    MAP_EXT( "CharLeftBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LEFT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDER ),
-    MAP_EXT( "CharRightBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_RIGHT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDER ),
-    MAP_EXT( "CharTopBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_TOP, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDER ),
-    MAP_EXT( "CharBottomBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_BOTTOM, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDER ),
-    MAP_EXT_I( "CharLeftBorder", XML_NAMESPACE_FO, XML_BORDER, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDER ),
-    MAP_EXT_I( "CharLeftBorder", XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDER ),
-    MAP_EXT_I( "CharRightBorder", XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDER ),
-    MAP_EXT_I( "CharTopBorder", XML_NAMESPACE_FO, XML_BORDER_TOP, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDER ),
-    MAP_EXT_I( "CharBottomBorder", XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDER ),
+    MAP_EXT( "CharLeftBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERWIDTH ),
+    MAP_EXT( "CharLeftBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERWIDTH ),
+    MAP_EXT( "CharRightBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERWIDTH ),
+    MAP_EXT( "CharTopBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERWIDTH ),
+    MAP_EXT( "CharBottomBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERWIDTH ),
+    MAP_EXT_I( "CharLeftBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERWIDTH ),
+    MAP_EXT_I( "CharLeftBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERWIDTH ),
+    MAP_EXT_I( "CharRightBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERWIDTH ),
+    MAP_EXT_I( "CharTopBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERWIDTH ),
+    MAP_EXT_I( "CharBottomBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERWIDTH ),
+
+    MAP_EXT( "CharLeftBorderDistance", XmlNamespace::LO_EXT, XML_PADDING, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERDISTANCE ),
+    MAP_EXT( "CharLeftBorderDistance", XmlNamespace::LO_EXT, XML_PADDING_LEFT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERDISTANCE ),
+    MAP_EXT( "CharRightBorderDistance", XmlNamespace::LO_EXT, XML_PADDING_RIGHT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERDISTANCE ),
+    MAP_EXT( "CharTopBorderDistance",  XmlNamespace::LO_EXT, XML_PADDING_TOP, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERDISTANCE ),
+    MAP_EXT( "CharBottomBorderDistance",XmlNamespace::LO_EXT, XML_PADDING_BOTTOM, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERDISTANCE ),
+    MAP_EXT_I( "CharLeftBorderDistance", XmlNamespace::FO, XML_PADDING, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERDISTANCE ),
+    MAP_EXT_I( "CharLeftBorderDistance", XmlNamespace::FO, XML_PADDING_LEFT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERDISTANCE ),
+    MAP_EXT_I( "CharRightBorderDistance", XmlNamespace::FO, XML_PADDING_RIGHT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERDISTANCE ),
+    MAP_EXT_I( "CharTopBorderDistance",  XmlNamespace::FO, XML_PADDING_TOP, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERDISTANCE ),
+    MAP_EXT_I( "CharBottomBorderDistance",XmlNamespace::FO, XML_PADDING_BOTTOM, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERDISTANCE ),
+
+    MAP_EXT( "CharLeftBorder", XmlNamespace::LO_EXT, XML_BORDER, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDER ),
+    MAP_EXT( "CharLeftBorder", XmlNamespace::LO_EXT, XML_BORDER_LEFT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDER ),
+    MAP_EXT( "CharRightBorder", XmlNamespace::LO_EXT, XML_BORDER_RIGHT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDER ),
+    MAP_EXT( "CharTopBorder", XmlNamespace::LO_EXT, XML_BORDER_TOP, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDER ),
+    MAP_EXT( "CharBottomBorder", XmlNamespace::LO_EXT, XML_BORDER_BOTTOM, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDER ),
+    MAP_EXT_I( "CharLeftBorder", XmlNamespace::FO, XML_BORDER, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDER ),
+    MAP_EXT_I( "CharLeftBorder", XmlNamespace::FO, XML_BORDER_LEFT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDER ),
+    MAP_EXT_I( "CharRightBorder", XmlNamespace::FO, XML_BORDER_RIGHT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDER ),
+    MAP_EXT_I( "CharTopBorder", XmlNamespace::FO, XML_BORDER_TOP, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDER ),
+    MAP_EXT_I( "CharBottomBorder", XmlNamespace::FO, XML_BORDER_BOTTOM, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDER ),
     // RES_CHRATR_SHADOW
-    MAP_EXT( "CharShadowFormat", XML_NAMESPACE_LO_EXT, XML_SHADOW, XML_TYPE_TEXT_SHADOW|XML_TYPE_PROP_TEXT, 0 ),
-    MAP_EXT_I( "CharShadowFormat", XML_NAMESPACE_STYLE, XML_SHADOW, XML_TYPE_TEXT_SHADOW|XML_TYPE_PROP_TEXT, 0 ),
+    MAP_EXT( "CharShadowFormat", XmlNamespace::LO_EXT, XML_SHADOW, XML_TYPE_TEXT_SHADOW|XML_TYPE_PROP_TEXT, 0 ),
+    MAP_EXT_I( "CharShadowFormat", XmlNamespace::STYLE, XML_SHADOW, XML_TYPE_TEXT_SHADOW|XML_TYPE_PROP_TEXT, 0 ),
     // RES_CHRATR_HIGHLIGHT
     MT_E( "CharHighlight",  FO, BACKGROUND_COLOR, XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY| MID_FLAG_NO_PROPERTY_IMPORT, CTF_CHAR_HIGHLIGHT ),
     // RES_TXTATR_INETFMT
@@ -340,7 +340,7 @@ XMLPropertyMapEntry const aXMLParaPropMap[] =
     MT_E( "ParaHyphenationMaxLeadingChars", FO, HYPHENATION_REMAIN_CHAR_COUNT, XML_TYPE_NUMBER16_NO_ZERO, 0 ),
     MT_E( "ParaHyphenationMaxTrailingChars",FO, HYPHENATION_PUSH_CHAR_COUNT, XML_TYPE_NUMBER16_NO_ZERO, 0 ),
     MP_E( "ParaHyphenationMaxHyphens",  FO, HYPHENATION_LADDER_COUNT, XML_TYPE_NUMBER16_NONE, 0 ),
-    MAP_EXT( "ParaHyphenationNoCaps",  XML_NAMESPACE_LO_EXT, XML_HYPHENATION_NO_CAPS, XML_TYPE_BOOL|XML_TYPE_PROP_TEXT, 0 ),
+    MAP_EXT( "ParaHyphenationNoCaps",  XmlNamespace::LO_EXT, XML_HYPHENATION_NO_CAPS, XML_TYPE_BOOL|XML_TYPE_PROP_TEXT, 0 ),
     // RES_PARATR_DROP
     MP_E( "DropCapWholeWord",   STYLE,  LENGTH,     MID_FLAG_SPECIAL_ITEM|XML_TYPE_BOOL, CTF_DROPCAPWHOLEWORD ),
     MP_E( "DropCapCharStyleName",   STYLE,  STYLE_NAME, MID_FLAG_SPECIAL_ITEM|XML_TYPE_STRING, CTF_DROPCAPCHARSTYLE ),
@@ -480,8 +480,8 @@ XMLPropertyMapEntry const aXMLTextPropMap[] =
     // RES_CHRATR_COLOR
     MT_ED( "CharColor",     FO,     COLOR,              XML_TYPE_COLORAUTO|MID_FLAG_MERGE_PROPERTY, 0 ),
     MT_ED( "CharColor",     STYLE,  USE_WINDOW_FONT_COLOR,  XML_TYPE_ISAUTOCOLOR|MID_FLAG_MERGE_PROPERTY,   0 ),
-    MAP_EXT_I("CharTransparence", XML_NAMESPACE_DRAW, XML_OPACITY, XML_TYPE_NEG_PERCENT16 | XML_TYPE_PROP_TEXT, 0),
-    MAP_EXT("CharTransparence", XML_NAMESPACE_LO_EXT, XML_OPACITY, XML_TYPE_NEG_PERCENT16 | XML_TYPE_PROP_TEXT, 0),
+    MAP_EXT_I("CharTransparence", XmlNamespace::DRAW, XML_OPACITY, XML_TYPE_NEG_PERCENT16 | XML_TYPE_PROP_TEXT, 0),
+    MAP_EXT("CharTransparence", XmlNamespace::LO_EXT, XML_OPACITY, XML_TYPE_NEG_PERCENT16 | XML_TYPE_PROP_TEXT, 0),
     // RES_CHRATR_CONTOUR
     MT_E( "CharContoured",  STYLE,  TEXT_OUTLINE,       XML_TYPE_BOOL,  0 ),
     // RES_CHRATR_CROSSEDOUT
@@ -525,9 +525,9 @@ XMLPropertyMapEntry const aXMLTextPropMap[] =
     // RES_CHRATR_WEIGHT
     MT_E( "CharWeight",     FO,     FONT_WEIGHT,        XML_TYPE_TEXT_WEIGHT, 0 ),
     // RES_CHRATR_RSID
-    { "Rsid", sizeof("Rsid")-1, XML_NAMESPACE_OFFICE_EXT, XML_RSID, XML_TYPE_HEX|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
+    { "Rsid", sizeof("Rsid")-1, XmlNamespace::OFFICE_EXT, XML_RSID, XML_TYPE_HEX|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
     // RES_PARATR_RSID
-    { "ParRsid", sizeof("ParRsid")-1, XML_NAMESPACE_OFFICE_EXT, XML_PARRSID, XML_TYPE_HEX|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
+    { "ParRsid", sizeof("ParRsid")-1, XmlNamespace::OFFICE_EXT, XML_PARRSID, XML_TYPE_HEX|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
     // RES_CHRATR_WORDLINEMODE
     MT_E( "CharWordMode",   STYLE,  TEXT_UNDERLINE_MODE,        XML_TYPE_TEXT_LINE_MODE|MID_FLAG_MERGE_PROPERTY, 0 ),
     MT_E( "CharWordMode",   STYLE,  TEXT_OVERLINE_MODE,     XML_TYPE_TEXT_LINE_MODE|MID_FLAG_MERGE_PROPERTY, 0 ),
@@ -542,7 +542,7 @@ XMLPropertyMapEntry const aXMLTextPropMap[] =
     // RES_CHRATR_BACKGROUND
     MT_E( "CharBackColor",  FO, BACKGROUND_COLOR, XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY, CTF_CHAR_BACKGROUND ),
     MT_E( "CharBackTransparent",    FO, BACKGROUND_COLOR, XML_TYPE_ISTRANSPARENT|MID_FLAG_MERGE_ATTRIBUTE, CTF_CHAR_BACKGROUND_TRANSPARENCY),
-    { "CharShadingValue", sizeof("CharShadingValue")-1, XML_NAMESPACE_LO_EXT, XML_CHAR_SHADING_VALUE, XML_TYPE_NUMBER|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
+    { "CharShadingValue", sizeof("CharShadingValue")-1, XmlNamespace::LO_EXT, XML_CHAR_SHADING_VALUE, XML_TYPE_NUMBER|XML_TYPE_PROP_TEXT, 0, SvtSaveOptions::ODFSVER_FUTURE_EXTENDED, false },
     MT_E( "CharBackColor",  FO, TEXT_BACKGROUND_COLOR, XML_TYPE_COLOR|MID_FLAG_SPECIAL_ITEM_EXPORT, CTF_OLDTEXTBACKGROUND ),
     // RES_CHRATR_CJK_FONT
     MT_ED( "CharFontNameAsian", STYLE,  FONT_NAME_ASIAN,            XML_TYPE_STRING|MID_FLAG_SPECIAL_ITEM_IMPORT, CTF_FONTNAME_CJK ),
@@ -608,41 +608,41 @@ XMLPropertyMapEntry const aXMLTextPropMap[] =
     MT_E( "CharOverlineColor",  STYLE,  TEXT_OVERLINE_COLOR,        XML_TYPE_TEXT_OVERLINE_COLOR|MID_FLAG_MULTI_PROPERTY, 0 ),
     MT_E( "CharOverlineHasColor",   STYLE,  TEXT_OVERLINE_COLOR,        XML_TYPE_TEXT_OVERLINE_HASCOLOR|MID_FLAG_MERGE_ATTRIBUTE, 0 ),
     // RES_CHRATR_BOX
-    MAP_EXT( "CharLeftBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERWIDTH ),
-    MAP_EXT( "CharLeftBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERWIDTH ),
-    MAP_EXT( "CharRightBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERWIDTH ),
-    MAP_EXT( "CharTopBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERWIDTH ),
-    MAP_EXT( "CharBottomBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERWIDTH ),
-    MAP_EXT_I( "CharLeftBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERWIDTH ),
-    MAP_EXT_I( "CharLeftBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERWIDTH ),
-    MAP_EXT_I( "CharRightBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERWIDTH ),
-    MAP_EXT_I( "CharTopBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERWIDTH ),
-    MAP_EXT_I( "CharBottomBorder", XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERWIDTH ),
-
-    MAP_EXT( "CharLeftBorderDistance", XML_NAMESPACE_LO_EXT, XML_PADDING, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERDISTANCE ),
-    MAP_EXT( "CharLeftBorderDistance", XML_NAMESPACE_LO_EXT, XML_PADDING_LEFT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERDISTANCE ),
-    MAP_EXT( "CharRightBorderDistance", XML_NAMESPACE_LO_EXT, XML_PADDING_RIGHT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERDISTANCE ),
-    MAP_EXT( "CharTopBorderDistance", XML_NAMESPACE_LO_EXT, XML_PADDING_TOP, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERDISTANCE ),
-    MAP_EXT( "CharBottomBorderDistance",XML_NAMESPACE_LO_EXT, XML_PADDING_BOTTOM, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERDISTANCE ),
-    MAP_EXT_I( "CharLeftBorderDistance", XML_NAMESPACE_FO, XML_PADDING, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERDISTANCE ),
-    MAP_EXT_I( "CharLeftBorderDistance", XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERDISTANCE ),
-    MAP_EXT_I( "CharRightBorderDistance", XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERDISTANCE ),
-    MAP_EXT_I( "CharTopBorderDistance", XML_NAMESPACE_FO, XML_PADDING_TOP, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERDISTANCE ),
-    MAP_EXT_I( "CharBottomBorderDistance",XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERDISTANCE ),
-
-    MAP_EXT( "CharLeftBorder", XML_NAMESPACE_LO_EXT, XML_BORDER, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDER ),
-    MAP_EXT( "CharLeftBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_LEFT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDER ),
-    MAP_EXT( "CharRightBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_RIGHT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDER ),
-    MAP_EXT( "CharTopBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_TOP, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDER ),
-    MAP_EXT( "CharBottomBorder", XML_NAMESPACE_LO_EXT, XML_BORDER_BOTTOM, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDER ),
-    MAP_EXT_I( "CharLeftBorder", XML_NAMESPACE_FO, XML_BORDER, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDER ),
-    MAP_EXT_I( "CharLeftBorder", XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDER ),
-    MAP_EXT_I( "CharRightBorder", XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDER ),
-    MAP_EXT_I( "CharTopBorder", XML_NAMESPACE_FO, XML_BORDER_TOP, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDER ),
-    MAP_EXT_I( "CharBottomBorder", XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDER ),
+    MAP_EXT( "CharLeftBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERWIDTH ),
+    MAP_EXT( "CharLeftBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERWIDTH ),
+    MAP_EXT( "CharRightBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERWIDTH ),
+    MAP_EXT( "CharTopBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERWIDTH ),
+    MAP_EXT( "CharBottomBorder", XmlNamespace::LO_EXT, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERWIDTH ),
+    MAP_EXT_I( "CharLeftBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERWIDTH ),
+    MAP_EXT_I( "CharLeftBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERWIDTH ),
+    MAP_EXT_I( "CharRightBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERWIDTH ),
+    MAP_EXT_I( "CharTopBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERWIDTH ),
+    MAP_EXT_I( "CharBottomBorder", XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_TYPE_BORDER_WIDTH|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERWIDTH ),
+
+    MAP_EXT( "CharLeftBorderDistance", XmlNamespace::LO_EXT, XML_PADDING, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERDISTANCE ),
+    MAP_EXT( "CharLeftBorderDistance", XmlNamespace::LO_EXT, XML_PADDING_LEFT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERDISTANCE ),
+    MAP_EXT( "CharRightBorderDistance", XmlNamespace::LO_EXT, XML_PADDING_RIGHT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERDISTANCE ),
+    MAP_EXT( "CharTopBorderDistance", XmlNamespace::LO_EXT, XML_PADDING_TOP, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERDISTANCE ),
+    MAP_EXT( "CharBottomBorderDistance",XmlNamespace::LO_EXT, XML_PADDING_BOTTOM, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERDISTANCE ),
+    MAP_EXT_I( "CharLeftBorderDistance", XmlNamespace::FO, XML_PADDING, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDERDISTANCE ),
+    MAP_EXT_I( "CharLeftBorderDistance", XmlNamespace::FO, XML_PADDING_LEFT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDERDISTANCE ),
+    MAP_EXT_I( "CharRightBorderDistance", XmlNamespace::FO, XML_PADDING_RIGHT, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDERDISTANCE ),
+    MAP_EXT_I( "CharTopBorderDistance", XmlNamespace::FO, XML_PADDING_TOP, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDERDISTANCE ),
+    MAP_EXT_I( "CharBottomBorderDistance",XmlNamespace::FO, XML_PADDING_BOTTOM, XML_TYPE_MEASURE|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDERDISTANCE ),
+
+    MAP_EXT( "CharLeftBorder", XmlNamespace::LO_EXT, XML_BORDER, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDER ),
+    MAP_EXT( "CharLeftBorder", XmlNamespace::LO_EXT, XML_BORDER_LEFT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDER ),
+    MAP_EXT( "CharRightBorder", XmlNamespace::LO_EXT, XML_BORDER_RIGHT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDER ),
+    MAP_EXT( "CharTopBorder", XmlNamespace::LO_EXT, XML_BORDER_TOP, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDER ),
+    MAP_EXT( "CharBottomBorder", XmlNamespace::LO_EXT, XML_BORDER_BOTTOM, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDER ),
+    MAP_EXT_I( "CharLeftBorder", XmlNamespace::FO, XML_BORDER, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARALLBORDER ),
+    MAP_EXT_I( "CharLeftBorder", XmlNamespace::FO, XML_BORDER_LEFT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARLEFTBORDER ),
+    MAP_EXT_I( "CharRightBorder", XmlNamespace::FO, XML_BORDER_RIGHT, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARRIGHTBORDER ),
+    MAP_EXT_I( "CharTopBorder", XmlNamespace::FO, XML_BORDER_TOP, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARTOPBORDER ),
+    MAP_EXT_I( "CharBottomBorder", XmlNamespace::FO, XML_BORDER_BOTTOM, XML_TYPE_BORDER|XML_TYPE_PROP_TEXT, CTF_CHARBOTTOMBORDER ),
     // RES_CHRATR_SHADOW
-    MAP_EXT( "CharShadowFormat", XML_NAMESPACE_LO_EXT, XML_SHADOW, XML_TYPE_TEXT_SHADOW|XML_TYPE_PROP_TEXT, 0 ),
-    MAP_EXT_I( "CharShadowFormat", XML_NAMESPACE_STYLE, XML_SHADOW, XML_TYPE_TEXT_SHADOW|XML_TYPE_PROP_TEXT, 0 ),
+    MAP_EXT( "CharShadowFormat", XmlNamespace::LO_EXT, XML_SHADOW, XML_TYPE_TEXT_SHADOW|XML_TYPE_PROP_TEXT, 0 ),
+    MAP_EXT_I( "CharShadowFormat", XmlNamespace::STYLE, XML_SHADOW, XML_TYPE_TEXT_SHADOW|XML_TYPE_PROP_TEXT, 0 ),
     // RES_CHRATR_HIGHLIGHT
     MT_E( "CharHighlight",  FO, BACKGROUND_COLOR, XML_TYPE_COLORTRANSPARENT|MID_FLAG_MULTI_PROPERTY|MID_FLAG_NO_PROPERTY_IMPORT, CTF_CHAR_HIGHLIGHT ),
     // RES_TXTATR_INETFMT
@@ -742,9 +742,9 @@ XMLPropertyMapEntry const aXMLFramePropMap[] =
     MG_ED( "VertOrientRelation",        STYLE,  VERTICAL_REL,         XML_TYPE_TEXT_VERTICAL_REL, CTF_VERTICALREL ),
     MG_ED( "VertOrientRelation",        STYLE,  VERTICAL_REL,         XML_TYPE_TEXT_VERTICAL_REL_PAGE|MID_FLAG_SPECIAL_ITEM_IMPORT, CTF_VERTICALREL_PAGE ),
     MG_ED( "VertOrientRelation",        STYLE,  VERTICAL_REL,         XML_TYPE_TEXT_VERTICAL_REL_FRAME|MID_FLAG_SPECIAL_ITEM_IMPORT, CTF_VERTICALREL_FRAME ),
-    MAP_EXT_I( "VertOrientRelation",    XML_NAMESPACE_LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL|XML_TYPE_PROP_GRAPHIC|MID_FLAG_DEFAULT_ITEM_EXPORT, CTF_VERTICALREL ),
-    MAP_EXT_I( "VertOrientRelation",    XML_NAMESPACE_LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL_PAGE|MID_FLAG_SPECIAL_ITEM_IMPORT|XML_TYPE_PROP_GRAPHIC|MID_FLAG_DEFAULT_ITEM_EXPORT, CTF_VERTICALREL_PAGE ),
-    MAP_EXT_I( "VertOrientRelation",    XML_NAMESPACE_LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL_FRAME|MID_FLAG_SPECIAL_ITEM_IMPORT|XML_TYPE_PROP_GRAPHIC|MID_FLAG_DEFAULT_ITEM_EXPORT, CTF_VERTICALREL_FRAME ),
+    MAP_EXT_I( "VertOrientRelation",    XmlNamespace::LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL|XML_TYPE_PROP_GRAPHIC|MID_FLAG_DEFAULT_ITEM_EXPORT, CTF_VERTICALREL ),
+    MAP_EXT_I( "VertOrientRelation",    XmlNamespace::LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL_PAGE|MID_FLAG_SPECIAL_ITEM_IMPORT|XML_TYPE_PROP_GRAPHIC|MID_FLAG_DEFAULT_ITEM_EXPORT, CTF_VERTICALREL_PAGE ),
+    MAP_EXT_I( "VertOrientRelation",    XmlNamespace::LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL_FRAME|MID_FLAG_SPECIAL_ITEM_IMPORT|XML_TYPE_PROP_GRAPHIC|MID_FLAG_DEFAULT_ITEM_EXPORT, CTF_VERTICALREL_FRAME ),
     // RES_HORI_ORIENT
     MG_ED( "HoriOrient",                STYLE,  HORIZONTAL_POS,       XML_TYPE_TEXT_HORIZONTAL_POS|MID_FLAG_MULTI_PROPERTY, CTF_HORIZONTALPOS ),
     MG_ED( "PageToggle",        STYLE,  HORIZONTAL_POS,       XML_TYPE_TEXT_HORIZONTAL_MIRROR, CTF_HORIZONTALMIRROR ),
@@ -765,26 +765,26 @@ XMLPropertyMapEntry const aXMLFramePropMap[] =
     MG_E( "BackGraphic", STYLE,  BACKGROUND_IMAGE,   MID_FLAG_ELEMENT_ITEM|XML_TYPE_GRAPHIC, CTF_BACKGROUND_URL ),
 
     // fill attributes
-    GMAP( "FillStyle",                      XML_NAMESPACE_DRAW, XML_FILL,                   XML_SW_TYPE_FILLSTYLE, 0 ),
-    GMAP( "FillColor",                      XML_NAMESPACE_DRAW, XML_FILL_COLOR,             XML_TYPE_COLOR, 0 ),
-    GMAP( "FillColor2",                     XML_NAMESPACE_DRAW, XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR, 0 ),
-    GMAP( "FillGradientName",               XML_NAMESPACE_DRAW, XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLGRADIENTNAME ),
-    GMAP( "FillGradientStepCount",          XML_NAMESPACE_DRAW, XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16, 0 ),
-    GMAP( "FillHatchName",                  XML_NAMESPACE_DRAW, XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLHATCHNAME ),
-    GMAP( "FillBackground",                 XML_NAMESPACE_DRAW, XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL, 0 ),
-    GMAP( "FillBitmapName",                 XML_NAMESPACE_DRAW, XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLBITMAPNAME ),
-    GMAP( "FillTransparence",               XML_NAMESPACE_DRAW, XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY, 0 ),    // exists in SW, too
-    GMAP( "FillTransparenceGradientName",   XML_NAMESPACE_DRAW, XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLTRANSNAME ),
-    GMAP( "FillBitmapSizeX",                XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapLogicalSize",          XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapSizeY",                XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapLogicalSize",          XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapMode",                 XML_NAMESPACE_STYLE,XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY, 0 ),
-    GMAP( "FillBitmapPositionOffsetX",      XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT, 0 ),
-    GMAP( "FillBitmapPositionOffsetY",      XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT, 0 ),
-    GMAP( "FillBitmapRectanglePoint",       XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT, 0 ),
-    GMAP( "FillBitmapOffsetX",              XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_X ),
-    GMAP( "FillBitmapOffsetY",              XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_Y ),
+    GMAP( "FillStyle",                      XmlNamespace::DRAW, XML_FILL,                   XML_SW_TYPE_FILLSTYLE, 0 ),
+    GMAP( "FillColor",                      XmlNamespace::DRAW, XML_FILL_COLOR,             XML_TYPE_COLOR, 0 ),
+    GMAP( "FillColor2",                     XmlNamespace::DRAW, XML_SECONDARY_FILL_COLOR,   XML_TYPE_COLOR, 0 ),
+    GMAP( "FillGradientName",               XmlNamespace::DRAW, XML_FILL_GRADIENT_NAME,     XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLGRADIENTNAME ),
+    GMAP( "FillGradientStepCount",          XmlNamespace::DRAW, XML_GRADIENT_STEP_COUNT,    XML_TYPE_NUMBER16, 0 ),
+    GMAP( "FillHatchName",                  XmlNamespace::DRAW, XML_FILL_HATCH_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLHATCHNAME ),
+    GMAP( "FillBackground",                 XmlNamespace::DRAW, XML_FILL_HATCH_SOLID,       XML_TYPE_BOOL, 0 ),
+    GMAP( "FillBitmapName",                 XmlNamespace::DRAW, XML_FILL_IMAGE_NAME,        XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLBITMAPNAME ),
+    GMAP( "FillTransparence",               XmlNamespace::DRAW, XML_OPACITY,                XML_TYPE_NEG_PERCENT16|MID_FLAG_MULTI_PROPERTY, 0 ),    // exists in SW, too
+    GMAP( "FillTransparenceGradientName",   XmlNamespace::DRAW, XML_OPACITY_NAME,           XML_TYPE_STYLENAME|MID_FLAG_NO_PROPERTY_IMPORT, CTF_FILLTRANSNAME ),
+    GMAP( "FillBitmapSizeX",                XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapLogicalSize",          XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH,       XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapSizeY",                XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_FILLBITMAPSIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapLogicalSize",          XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT,      XML_SW_TYPE_LOGICAL_SIZE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapMode",                 XmlNamespace::STYLE,XML_REPEAT,                 XML_SW_TYPE_BITMAP_MODE|MID_FLAG_MULTI_PROPERTY, 0 ),
+    GMAP( "FillBitmapPositionOffsetX",      XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_TYPE_PERCENT, 0 ),
+    GMAP( "FillBitmapPositionOffsetY",      XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_TYPE_PERCENT, 0 ),
+    GMAP( "FillBitmapRectanglePoint",       XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT,   XML_SW_TYPE_BITMAP_REFPOINT, 0 ),
+    GMAP( "FillBitmapOffsetX",              XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETX|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_X ),
+    GMAP( "FillBitmapOffsetY",              XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET,     XML_SW_TYPE_BITMAPREPOFFSETY|MID_FLAG_MULTI_PROPERTY, CTF_REPEAT_OFFSET_Y ),
 
     // RES_BOX
     MG_ED( "LeftBorder",            STYLE,  BORDER_LINE_WIDTH,        XML_TYPE_BORDER_WIDTH, CTF_ALLBORDERWIDTH ),
@@ -860,13 +860,13 @@ XMLPropertyMapEntry const aXMLFramePropMap[] =
     // RES_GRFATR_DRAWMODE
     MG_E( "GraphicColorMode", DRAW, COLOR_MODE,         XML_TYPE_COLOR_MODE, 0 ),
     MG_E( "WritingMode",      STYLE, WRITING_MODE,       XML_TYPE_TEXT_WRITING_MODE_WITH_DEFAULT, 0 ),
-    MAP_EXT_I("WritingMode", XML_NAMESPACE_LO_EXT, XML_WRITING_MODE, XML_TYPE_TEXT_WRITING_MODE_WITH_DEFAULT|XML_TYPE_PROP_GRAPHIC, 0),
+    MAP_EXT_I("WritingMode", XmlNamespace::LO_EXT, XML_WRITING_MODE, XML_TYPE_TEXT_WRITING_MODE_WITH_DEFAULT|XML_TYPE_PROP_GRAPHIC, 0),
     // RES_FOLLOW_TEXT_FLOW - DVO #i18732#
     MG_E( "IsFollowingTextFlow", DRAW, FLOW_WITH_TEXT,      XML_TYPE_BOOL|MID_FLAG_SPECIAL_ITEM_EXPORT, CTF_OLD_FLOW_WITH_TEXT ),
     MG_E( "IsFollowingTextFlow", STYLE, FLOW_WITH_TEXT,     XML_TYPE_BOOL, 0 ),
     // #i28701# - RES_WRAP_INFLUENCE_ON_OBJPOS
     MG_E( "WrapInfluenceOnPosition", DRAW, WRAP_INFLUENCE_ON_POSITION, XML_TYPE_WRAP_INFLUENCE_ON_POSITION, 0 ),
-    MAP_EXT("AllowOverlap", XML_NAMESPACE_LO_EXT, XML_ALLOW_OVERLAP, XML_TYPE_BOOL|XML_TYPE_PROP_GRAPHIC, 0),
+    MAP_EXT("AllowOverlap", XmlNamespace::LO_EXT, XML_ALLOW_OVERLAP, XML_TYPE_BOOL|XML_TYPE_PROP_GRAPHIC, 0),
 
     // special entries for floating frames
     MG_E( "",           DRAW,   FRAME_DISPLAY_SCROLLBAR,    XML_TYPE_BOOL|MID_FLAG_NO_PROPERTY|MID_FLAG_MULTI_PROPERTY, CTF_FRAME_DISPLAY_SCROLLBAR ),
@@ -879,8 +879,8 @@ XMLPropertyMapEntry const aXMLFramePropMap[] =
     MG_E( "",           DRAW,   VISIBLE_AREA_HEIGHT,    XML_TYPE_MEASURE|MID_FLAG_NO_PROPERTY|MID_FLAG_MULTI_PROPERTY,  CTF_OLE_VIS_AREA_HEIGHT ),
     MG_E( "",           DRAW,   DRAW_ASPECT,            XML_TYPE_TEXT_DRAW_ASPECT|MID_FLAG_NO_PROPERTY|MID_FLAG_MULTI_PROPERTY, CTF_OLE_DRAW_ASPECT ),
     MG_E( "UserDefinedAttributes", TEXT, XMLNS, XML_TYPE_ATTRIBUTE_CONTAINER | MID_FLAG_SPECIAL_ITEM, 0 ),
-    MAP_EXT("RelativeWidthRelation", XML_NAMESPACE_LO_EXT, XML_REL_WIDTH_REL, XML_TYPE_TEXT_HORIZONTAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_RELWIDTHREL),
-    MAP_EXT("RelativeHeightRelation", XML_NAMESPACE_LO_EXT, XML_REL_HEIGHT_REL, XML_TYPE_TEXT_VERTICAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_RELHEIGHTREL),
+    MAP_EXT("RelativeWidthRelation", XmlNamespace::LO_EXT, XML_REL_WIDTH_REL, XML_TYPE_TEXT_HORIZONTAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_RELWIDTHREL),
+    MAP_EXT("RelativeHeightRelation", XmlNamespace::LO_EXT, XML_REL_HEIGHT_REL, XML_TYPE_TEXT_VERTICAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_RELHEIGHTREL),
     MG_E("TextVerticalAdjust", DRAW, TEXTAREA_VERTICAL_ALIGN, XML_TYPE_VERTICAL_ALIGN, 0),
 
     M_END()
@@ -910,9 +910,9 @@ XMLPropertyMapEntry const aXMLShapePropMap[] =
     MG_E( "VertOrientRelation", STYLE,  VERTICAL_REL,   XML_TYPE_TEXT_VERTICAL_REL, CTF_SHAPE_VERTICALREL ),
     MG_E( "VertOrientRelation", STYLE,  VERTICAL_REL,   XML_TYPE_TEXT_VERTICAL_REL_PAGE|MID_FLAG_SPECIAL_ITEM_IMPORT, CTF_SHAPE_VERTICALREL_PAGE ),
     MG_E( "VertOrientRelation", STYLE,  VERTICAL_REL,   XML_TYPE_TEXT_VERTICAL_REL_FRAME|MID_FLAG_SPECIAL_ITEM_IMPORT, CTF_SHAPE_VERTICALREL_FRAME ),
-    MAP_EXT_I( "VertOrientRelation",    XML_NAMESPACE_LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_VERTICALREL ),
-    MAP_EXT_I( "VertOrientRelation",    XML_NAMESPACE_LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL_PAGE|MID_FLAG_SPECIAL_ITEM_IMPORT|XML_TYPE_PROP_GRAPHIC, CTF_VERTICALREL_PAGE ),
-    MAP_EXT_I( "VertOrientRelation",    XML_NAMESPACE_LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL_FRAME|MID_FLAG_SPECIAL_ITEM_IMPORT|XML_TYPE_PROP_GRAPHIC, CTF_VERTICALREL_FRAME ),
+    MAP_EXT_I( "VertOrientRelation",    XmlNamespace::LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_VERTICALREL ),
+    MAP_EXT_I( "VertOrientRelation",    XmlNamespace::LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL_PAGE|MID_FLAG_SPECIAL_ITEM_IMPORT|XML_TYPE_PROP_GRAPHIC, CTF_VERTICALREL_PAGE ),
+    MAP_EXT_I( "VertOrientRelation",    XmlNamespace::LO_EXT, XML_VERTICAL_REL, XML_TYPE_TEXT_VERTICAL_REL_FRAME|MID_FLAG_SPECIAL_ITEM_IMPORT|XML_TYPE_PROP_GRAPHIC, CTF_VERTICALREL_FRAME ),
     // RES_HORI_ORIENT
     MG_E( "HoriOrient",         STYLE,  HORIZONTAL_POS, XML_TYPE_TEXT_HORIZONTAL_POS|MID_FLAG_MULTI_PROPERTY, CTF_SHAPE_HORIZONTALPOS ),
     MG_E( "PageToggle",         STYLE,  HORIZONTAL_POS, XML_TYPE_TEXT_HORIZONTAL_MIRROR, CTF_SHAPE_HORIZONTALMIRROR ),
@@ -921,7 +921,7 @@ XMLPropertyMapEntry const aXMLShapePropMap[] =
     MG_E( "HoriOrientRelation", STYLE,  HORIZONTAL_REL, XML_TYPE_TEXT_HORIZONTAL_REL_FRAME|MID_FLAG_SPECIAL_ITEM_IMPORT, CTF_SHAPE_HORIZONTALREL_FRAME ),
     // RES_WRAP_INFLUENCE_ON_OBJPOS (#i28701#)
     MG_ED( "WrapInfluenceOnPosition", DRAW, WRAP_INFLUENCE_ON_POSITION, XML_TYPE_WRAP_INFLUENCE_ON_POSITION, 0 ),
-    MAP_EXT("AllowOverlap", XML_NAMESPACE_LO_EXT, XML_ALLOW_OVERLAP, XML_TYPE_BOOL|XML_TYPE_PROP_GRAPHIC, 0),
+    MAP_EXT("AllowOverlap", XmlNamespace::LO_EXT, XML_ALLOW_OVERLAP, XML_TYPE_BOOL|XML_TYPE_PROP_GRAPHIC, 0),
     // UserDefinedAttributes is already contained in the map this one is
     // chained to.
 
@@ -929,8 +929,8 @@ XMLPropertyMapEntry const aXMLShapePropMap[] =
     MG_ED( "IsFollowingTextFlow", STYLE, FLOW_WITH_TEXT,      XML_TYPE_BOOL, 0 ),
 
     // RES_FRM_SIZE
-    MAP_EXT("RelativeWidthRelation", XML_NAMESPACE_LO_EXT, XML_REL_WIDTH_REL, XML_TYPE_TEXT_HORIZONTAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_RELWIDTHREL),
-    MAP_EXT("RelativeHeightRelation", XML_NAMESPACE_LO_EXT, XML_REL_HEIGHT_REL, XML_TYPE_TEXT_VERTICAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_RELHEIGHTREL),
+    MAP_EXT("RelativeWidthRelation", XmlNamespace::LO_EXT, XML_REL_WIDTH_REL, XML_TYPE_TEXT_HORIZONTAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_RELWIDTHREL),
+    MAP_EXT("RelativeHeightRelation", XmlNamespace::LO_EXT, XML_REL_HEIGHT_REL, XML_TYPE_TEXT_VERTICAL_REL|XML_TYPE_PROP_GRAPHIC, CTF_RELHEIGHTREL),
 
     M_END()
 };
diff --git a/xmloff/source/text/txtstyle.cxx b/xmloff/source/text/txtstyle.cxx
index 6a2d8e4450ad..c9bd43fafe21 100644
--- a/xmloff/source/text/txtstyle.cxx
+++ b/xmloff/source/text/txtstyle.cxx
@@ -83,7 +83,7 @@ void XMLTextParagraphExport::exportStyleAttributes(
             }
         }
         if( eValue != XML_TOKEN_INVALID )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE, XML_CLASS, eValue);
+            GetExport().AddAttribute( XmlNamespace::STYLE, XML_CLASS, eValue);
     }
     if( xPropSetInfo->hasPropertyByName( gsPageDescName ) )
     {
@@ -93,7 +93,7 @@ void XMLTextParagraphExport::exportStyleAttributes(
         {
             xPropSet->getPropertyValue( gsPageDescName ) >>= sName;
             // fix for #i5551#  if( sName.getLength() > 0 )
-            GetExport().AddAttribute( XML_NAMESPACE_STYLE,
+            GetExport().AddAttribute( XmlNamespace::STYLE,
                                           XML_MASTER_PAGE_NAME,
                                           GetExport().EncodeStyleName( sName ) );
         }
diff --git a/xmloff/source/text/txtstyli.cxx b/xmloff/source/text/txtstyli.cxx
index b80c23131f6d..3747ba053d09 100644
--- a/xmloff/source/text/txtstyli.cxx
+++ b/xmloff/source/text/txtstyli.cxx
@@ -78,7 +78,7 @@ void XMLTextStyleContext::SetAttribute( sal_uInt16 nPrefixKey,
                                         const OUString& rLocalName,
                                         const OUString& rValue )
 {
-    if( XML_NAMESPACE_STYLE == nPrefixKey )
+    if( XmlNamespace::STYLE == nPrefixKey )
     {
         // TODO: use a map here
         if( IsXMLToken( rLocalName, XML_AUTO_UPDATE ) )
@@ -151,7 +151,7 @@ SvXMLImportContextRef XMLTextStyleContext::CreateChildContext(
 {
     SvXMLImportContextRef xContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix )
+    if( XmlNamespace::STYLE == nPrefix )
     {
         sal_uInt32 nFamily = 0;
         if( IsXMLToken( rLocalName, XML_TEXT_PROPERTIES ) )
@@ -177,7 +177,7 @@ SvXMLImportContextRef XMLTextStyleContext::CreateChildContext(
                                                         m_sDropCapTextStyleName);
         }
     }
-    else if ( (XML_NAMESPACE_OFFICE == nPrefix) &&
+    else if ( (XmlNamespace::OFFICE == nPrefix) &&
               IsXMLToken( rLocalName, XML_EVENT_LISTENERS ) )
     {
         // create and remember events import context
diff --git a/xmloff/source/text/txtvfldi.cxx b/xmloff/source/text/txtvfldi.cxx
index 833663c88ce1..0f24d5af943a 100644
--- a/xmloff/source/text/txtvfldi.cxx
+++ b/xmloff/source/text/txtvfldi.cxx
@@ -133,7 +133,7 @@ void XMLVarFieldImportContext::ProcessAttribute(
                 OUString sTmp;
                 sal_uInt16 nPrefix = GetImport().GetNamespaceMap().
                         GetKeyByAttrValueQName(sAttrValue, &sTmp);
-                if( XML_NAMESPACE_OOOW == nPrefix )
+                if( XmlNamespace::OOOW == nPrefix )
                 {
                     sFormula = sTmp;
                     bFormulaOK = true;
@@ -664,7 +664,7 @@ SvXMLImportContextRef XMLVariableDeclsImportContext::CreateChildContext(
     enum XMLTokenEnum eElementName;
     SvXMLImportContextRef xImportContext;
 
-    if( XML_NAMESPACE_TEXT == nPrefix )
+    if( XmlNamespace::TEXT == nPrefix )
     {
         switch (eVarDeclsContextType)
         {
@@ -713,7 +713,7 @@ XMLVariableDeclImportContext::XMLVariableDeclImportContext(
     sal_Int8 nNumLevel(-1);
     OUString sName;
 
-    if ( (XML_NAMESPACE_TEXT != nPrfx) ||
+    if ( (XmlNamespace::TEXT != nPrfx) ||
          !( ( IsXMLToken( rLocalName, XML_SEQUENCE_DECL )) ||
             ( IsXMLToken( rLocalName, XML_VARIABLE_DECL)) ||
             ( IsXMLToken( rLocalName, XML_USER_FIELD_DECL)) ) )
@@ -1202,7 +1202,7 @@ void XMLValueImportHelper::ProcessAttribute(
                 OUString sTmp;
                 sal_uInt16 nPrefix = rImport.GetNamespaceMap().
                         GetKeyByAttrValueQName(sAttrValue, &sTmp);
-                if( XML_NAMESPACE_OOOW == nPrefix )
+                if( XmlNamespace::OOOW == nPrefix )
                 {
                     sFormula = sTmp;
                     bFormulaOK = true;
diff --git a/xmloff/source/transform/ChartOASISTContext.cxx b/xmloff/source/transform/ChartOASISTContext.cxx
index ad6e003e0f17..c8a8e7638b3d 100644
--- a/xmloff/source/transform/ChartOASISTContext.cxx
+++ b/xmloff/source/transform/ChartOASISTContext.cxx
@@ -97,11 +97,11 @@ void XMLChartOASISTransformerContext::StartElement(
                         GetTransformer().GetNamespaceMap().GetKeyByAttrName(
                             rAttrValue,
                             &aChartClass );
-                    if( XML_NAMESPACE_CHART == nValuePrefix )
+                    if( XmlNamespace::CHART == nValuePrefix )
                     {
                         pMutableAttrList->SetValueByIndex( i, aChartClass );
                     }
-                    else if ( XML_NAMESPACE_OOO == nValuePrefix )
+                    else if ( XmlNamespace::OOO == nValuePrefix )
                     {
                         pMutableAttrList->SetValueByIndex( i,
                                                 GetXMLToken(XML_ADD_IN ) );
@@ -119,7 +119,7 @@ void XMLChartOASISTransformerContext::StartElement(
     if( !aAddInName.isEmpty() )
     {
         OUString aAttrQName( GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_CHART,
+                                XmlNamespace::CHART,
                                 GetXMLToken( XML_ADD_IN_NAME ) ) );
         assert(pMutableAttrList && "coverity[var_deref_model] - pMutableAttrList should be assigned in a superset of the enclosing if condition entry logic");
         pMutableAttrList->AddAttribute( aAttrQName, aAddInName );
diff --git a/xmloff/source/transform/ChartOOoTContext.cxx b/xmloff/source/transform/ChartOOoTContext.cxx
index 5759bfd556ed..5f3fb83aad3d 100644
--- a/xmloff/source/transform/ChartOOoTContext.cxx
+++ b/xmloff/source/transform/ChartOOoTContext.cxx
@@ -123,7 +123,7 @@ void XMLChartOOoTransformerContext::StartElement(
 
     if( nClassName != -1 && !aAddInName.isEmpty() )
     {
-        GetTransformer().AddNamespacePrefix( aAddInName, XML_NAMESPACE_OOO );
+        GetTransformer().AddNamespacePrefix( aAddInName, XmlNamespace::OOO );
         pMutableAttrList->SetValueByIndex( nClassName, aAddInName );
     }
 
diff --git a/xmloff/source/transform/ChartPlotAreaOASISTContext.cxx b/xmloff/source/transform/ChartPlotAreaOASISTContext.cxx
index a4fcb6129eba..62a1bb6ec245 100644
--- a/xmloff/source/transform/ChartPlotAreaOASISTContext.cxx
+++ b/xmloff/source/transform/ChartPlotAreaOASISTContext.cxx
@@ -74,7 +74,7 @@ rtl::Reference<XMLTransformerContext> XMLAxisOASISContext::CreateChildContext(
 {
     rtl::Reference<XMLTransformerContext> pContext;
 
-    if( XML_NAMESPACE_CHART == nPrefix &&
+    if( XmlNamespace::CHART == nPrefix &&
         IsXMLToken( rLocalName, XML_CATEGORIES ) )
     {
         // store categories element at parent
@@ -104,7 +104,7 @@ void XMLAxisOASISContext::StartElement(
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_CHART &&
+        if( nPrefix == XmlNamespace::CHART &&
             IsXMLToken( aLocalName, XML_DIMENSION ) )
         {
             if( !pMutableAttrList )
@@ -139,7 +139,7 @@ void XMLAxisOASISContext::StartElement(
             {
                 OUString aNewAttrQName(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_CHART, GetXMLToken( XML_CLASS )));
+                        XmlNamespace::CHART, GetXMLToken( XML_CLASS )));
                 pMutableAttrList->RenameAttributeByIndex( i, aNewAttrQName );
 
                 pMutableAttrList->SetValueByIndex( i, GetXMLToken( eToken ));
@@ -160,7 +160,7 @@ void XMLAxisOASISContext::EndElement()
         XMLMutableAttributeList * pMutableAttrList =
             new XMLMutableAttributeList( GetAttrList());
         OUString aAttrQName( GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                 XML_NAMESPACE_CHART, GetXMLToken( XML_CLASS )));
+                                 XmlNamespace::CHART, GetXMLToken( XML_CLASS )));
         sal_Int16 nIndex = pMutableAttrList->GetIndexByName( aAttrQName );
         if( nIndex != -1 )
         {
@@ -199,7 +199,7 @@ rtl::Reference<XMLTransformerContext> XMLChartPlotAreaOASISTContext::CreateChild
 {
     rtl::Reference<XMLTransformerContext> pContext;
 
-    if( XML_NAMESPACE_CHART == nPrefix &&
+    if( XmlNamespace::CHART == nPrefix &&
         IsXMLToken( rLocalName, XML_AXIS ) )
     {
         pContext.set(new XMLAxisOASISContext( GetTransformer(), rQName, m_rCategoriesContext ));
diff --git a/xmloff/source/transform/ChartPlotAreaOOoTContext.cxx b/xmloff/source/transform/ChartPlotAreaOOoTContext.cxx
index 76a732799daf..e85554e82afe 100644
--- a/xmloff/source/transform/ChartPlotAreaOOoTContext.cxx
+++ b/xmloff/source/transform/ChartPlotAreaOOoTContext.cxx
@@ -66,7 +66,7 @@ void XMLAxisOOoContext::StartElement(
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName );
 
-        if( nPrefix == XML_NAMESPACE_CHART &&
+        if( nPrefix == XmlNamespace::CHART &&
             IsXMLToken( aLocalName, XML_CLASS ) )
         {
             if( !pMutableAttrList )
@@ -101,7 +101,7 @@ void XMLAxisOOoContext::StartElement(
             {
                 OUString aNewAttrQName(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_CHART, GetXMLToken( XML_DIMENSION )));
+                        XmlNamespace::CHART, GetXMLToken( XML_DIMENSION )));
                 pMutableAttrList->RenameAttributeByIndex( i, aNewAttrQName );
                 pMutableAttrList->SetValueByIndex( i, GetXMLToken( eToken ));
             }
@@ -125,14 +125,14 @@ rtl::Reference<XMLTransformerContext> XMLChartPlotAreaOOoTContext::CreateChildCo
 {
     rtl::Reference<XMLTransformerContext> pContext;
 
-    if( XML_NAMESPACE_CHART == nPrefix &&
+    if( XmlNamespace::CHART == nPrefix &&
         IsXMLToken( rLocalName, XML_AXIS ) )
     {
         rtl::Reference<XMLAxisOOoContext> pAxisContext( new XMLAxisOOoContext( GetTransformer(), rQName ));
         AddContent( pAxisContext );
         pContext.set(pAxisContext.get());
     }
-    else if( XML_NAMESPACE_CHART == nPrefix &&
+    else if( XmlNamespace::CHART == nPrefix &&
              IsXMLToken( rLocalName, XML_CATEGORIES ) )
     {
         pContext.set(new XMLPersAttrListTContext( GetTransformer(), rQName ));
@@ -157,7 +157,7 @@ rtl::Reference<XMLTransformerContext> XMLChartPlotAreaOOoTContext::CreateChildCo
                     sal_uInt16 nNewPrefix =
                         GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                              &aLocalName );
-                    if( nNewPrefix == XML_NAMESPACE_CHART &&
+                    if( nNewPrefix == XmlNamespace::CHART &&
                         pAxisContext->IsCategoryAxis() &&
                         IsXMLToken( aLocalName, XML_DIMENSION ) )
                     {
diff --git a/xmloff/source/transform/ControlOASISTContext.cxx b/xmloff/source/transform/ControlOASISTContext.cxx
index a34f10de7ca0..065ff56a4982 100644
--- a/xmloff/source/transform/ControlOASISTContext.cxx
+++ b/xmloff/source/transform/ControlOASISTContext.cxx
@@ -36,7 +36,7 @@ XMLControlOASISTransformerContext::XMLControlOASISTransformerContext(
         const OUString& rQName,
         bool bCreateControl ) :
     XMLTransformerContext( rImp, rQName ),
-    m_aElemQName( rImp.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_FORM,
+    m_aElemQName( rImp.GetNamespaceMap().GetQNameByKey( XmlNamespace::FORM,
                             ::xmloff::token::GetXMLToken( XML_CONTROL ) ) ),
     m_bCreateControl( bCreateControl )
 {
diff --git a/xmloff/source/transform/DocumentTContext.cxx b/xmloff/source/transform/DocumentTContext.cxx
index 3edbc250eeda..85a42d1a14f9 100644
--- a/xmloff/source/transform/DocumentTContext.cxx
+++ b/xmloff/source/transform/DocumentTContext.cxx
@@ -49,7 +49,7 @@ void XMLDocumentTransformerContext::StartElement( const Reference< XAttributeLis
     OUString aClass;
     OUString aClassQName(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_OFFICE, GetXMLToken(XML_CLASS ) ) );
+                                XmlNamespace::OFFICE, GetXMLToken(XML_CLASS ) ) );
 
     XMLMutableAttributeList *pMutableAttrList = nullptr;
     sal_Int16 nAttrCount = xAttrList.is() ? xAttrList->getLength() : 0;
@@ -60,7 +60,7 @@ void XMLDocumentTransformerContext::StartElement( const Reference< XAttributeLis
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                  &aLocalName );
-        if( XML_NAMESPACE_OFFICE == nPrefix &&
+        if( XmlNamespace::OFFICE == nPrefix &&
             IsXMLToken( aLocalName, XML_MIMETYPE ) )
         {
             const OUString& rValue = xAttrList->getValueByIndex( i );
diff --git a/xmloff/source/transform/EventMap.cxx b/xmloff/source/transform/EventMap.cxx
index c6966ae255a1..fdf0a92a0815 100644
--- a/xmloff/source/transform/EventMap.cxx
+++ b/xmloff/source/transform/EventMap.cxx
@@ -23,80 +23,80 @@
 
 XMLTransformerEventMapEntry const aTransformerEventMap[] =
 {
-    { XML_NAMESPACE_DOM,    "select",   "on-select" },
-    { XML_NAMESPACE_OFFICE, "insert-start", "on-insert-start" },
-    { XML_NAMESPACE_OFFICE, "insert-done",  "on-insert-done" },
-    { XML_NAMESPACE_OFFICE, "mail-merge",   "on-mail-merge" },
-    { XML_NAMESPACE_OFFICE, "alpha-char-input", "on-alpha-char-input" },
-    { XML_NAMESPACE_OFFICE, "non-alpha-char-input", "on-non-alpha-char-input" },
-    { XML_NAMESPACE_DOM,    "resize",   "on-resize" },
-    { XML_NAMESPACE_OFFICE, "move", "on-move" },
-    { XML_NAMESPACE_OFFICE, "page-count-change", "on-page-count-change" },
-    { XML_NAMESPACE_DOM,    "mouseover",    "on-mouse-over" },
-    { XML_NAMESPACE_DOM,    "click",    "on-click" },
-    { XML_NAMESPACE_DOM,    "mouseout", "on-mouse-out" },
-    { XML_NAMESPACE_OFFICE, "load-error",   "on-load-error" },
-    { XML_NAMESPACE_OFFICE, "load-cancel",  "on-load-cancel" },
-    { XML_NAMESPACE_OFFICE, "load-done",    "on-load-done" },
-    { XML_NAMESPACE_DOM,    "load", "on-load" },
-    { XML_NAMESPACE_DOM,    "unload",   "on-unload" },
-    { XML_NAMESPACE_OFFICE, "start-app",    "on-start-app" },
-    { XML_NAMESPACE_OFFICE, "close-app",    "on-close-app" },
-    { XML_NAMESPACE_OFFICE, "new",  "on-new" },
-    { XML_NAMESPACE_OFFICE, "save", "on-save" },
-    { XML_NAMESPACE_OFFICE, "save-as",  "on-save-as" },
-    { XML_NAMESPACE_DOM,    "DOMFocusIn",   "on-focus" },
-    { XML_NAMESPACE_DOM,    "DOMFocusOut",  "on-unfocus" },
-    { XML_NAMESPACE_OFFICE, "print",    "on-print" },
-    { XML_NAMESPACE_DOM,    "error",    "on-error" },
-    { XML_NAMESPACE_OFFICE, "load-finished",    "on-load-finished" },
-    { XML_NAMESPACE_OFFICE, "save-finished",    "on-save-finished" },
-    { XML_NAMESPACE_OFFICE, "modify-changed",   "on-modify-changed" },
-    { XML_NAMESPACE_OFFICE, "prepare-unload",   "on-prepare-unload" },
-    { XML_NAMESPACE_OFFICE, "new-mail", "on-new-mail" },
-    { XML_NAMESPACE_OFFICE, "toggle-fullscreen",    "on-toggle-fullscreen" },
-    { XML_NAMESPACE_OFFICE, "save-done",    "on-save-done" },
-    { XML_NAMESPACE_OFFICE, "save-as-done", "on-save-as-done" },
-    { XML_NAMESPACE_OFFICE, "create",    "on-create" },
-    { XML_NAMESPACE_OFFICE, "save-as-failed",    "on-save-as-failed" },
-    { XML_NAMESPACE_OFFICE, "save-failed",    "on-save-failed" },
-    { XML_NAMESPACE_OFFICE, "copy-to-failed",    "on-copy-to-failed" },
-    { XML_NAMESPACE_OFFICE, "title-changed",    "on-title-changed" },
+    { XmlNamespace::DOM,    "select",   "on-select" },
+    { XmlNamespace::OFFICE, "insert-start", "on-insert-start" },
+    { XmlNamespace::OFFICE, "insert-done",  "on-insert-done" },
+    { XmlNamespace::OFFICE, "mail-merge",   "on-mail-merge" },
+    { XmlNamespace::OFFICE, "alpha-char-input", "on-alpha-char-input" },
+    { XmlNamespace::OFFICE, "non-alpha-char-input", "on-non-alpha-char-input" },
+    { XmlNamespace::DOM,    "resize",   "on-resize" },
+    { XmlNamespace::OFFICE, "move", "on-move" },
+    { XmlNamespace::OFFICE, "page-count-change", "on-page-count-change" },
+    { XmlNamespace::DOM,    "mouseover",    "on-mouse-over" },
+    { XmlNamespace::DOM,    "click",    "on-click" },
+    { XmlNamespace::DOM,    "mouseout", "on-mouse-out" },
+    { XmlNamespace::OFFICE, "load-error",   "on-load-error" },
+    { XmlNamespace::OFFICE, "load-cancel",  "on-load-cancel" },
+    { XmlNamespace::OFFICE, "load-done",    "on-load-done" },
+    { XmlNamespace::DOM,    "load", "on-load" },
+    { XmlNamespace::DOM,    "unload",   "on-unload" },
+    { XmlNamespace::OFFICE, "start-app",    "on-start-app" },
+    { XmlNamespace::OFFICE, "close-app",    "on-close-app" },
+    { XmlNamespace::OFFICE, "new",  "on-new" },
+    { XmlNamespace::OFFICE, "save", "on-save" },
+    { XmlNamespace::OFFICE, "save-as",  "on-save-as" },
+    { XmlNamespace::DOM,    "DOMFocusIn",   "on-focus" },
+    { XmlNamespace::DOM,    "DOMFocusOut",  "on-unfocus" },
+    { XmlNamespace::OFFICE, "print",    "on-print" },
+    { XmlNamespace::DOM,    "error",    "on-error" },
+    { XmlNamespace::OFFICE, "load-finished",    "on-load-finished" },
+    { XmlNamespace::OFFICE, "save-finished",    "on-save-finished" },
+    { XmlNamespace::OFFICE, "modify-changed",   "on-modify-changed" },
+    { XmlNamespace::OFFICE, "prepare-unload",   "on-prepare-unload" },
+    { XmlNamespace::OFFICE, "new-mail", "on-new-mail" },
+    { XmlNamespace::OFFICE, "toggle-fullscreen",    "on-toggle-fullscreen" },
+    { XmlNamespace::OFFICE, "save-done",    "on-save-done" },
+    { XmlNamespace::OFFICE, "save-as-done", "on-save-as-done" },
+    { XmlNamespace::OFFICE, "create",    "on-create" },
+    { XmlNamespace::OFFICE, "save-as-failed",    "on-save-as-failed" },
+    { XmlNamespace::OFFICE, "save-failed",    "on-save-failed" },
+    { XmlNamespace::OFFICE, "copy-to-failed",    "on-copy-to-failed" },
+    { XmlNamespace::OFFICE, "title-changed",    "on-title-changed" },
 
-    { XML_NAMESPACE_FORM,   "approveaction",    "on-approveaction" },
-    { XML_NAMESPACE_FORM,   "performaction",    "on-performaction" },
-    { XML_NAMESPACE_DOM,    "change",   "on-change" },
-    { XML_NAMESPACE_FORM,   "textchange",   "on-textchange" },
-    { XML_NAMESPACE_FORM,   "itemstatechange",  "on-itemstatechange" },
-    { XML_NAMESPACE_DOM,    "keydown",  "on-keydown" },
-    { XML_NAMESPACE_DOM,    "keyup",    "on-keyup" },
-    { XML_NAMESPACE_FORM,   "mousedrag",    "on-mousedrag" },
-    { XML_NAMESPACE_DOM,    "mousemove",    "on-mousemove" },
-    { XML_NAMESPACE_DOM,    "mousedown",    "on-mousedown" },
-    { XML_NAMESPACE_DOM,    "mouseup",  "on-mouseup" },
-    { XML_NAMESPACE_FORM,   "approvereset", "on-approvereset" },
-    { XML_NAMESPACE_DOM,    "reset",    "on-reset" },
-    { XML_NAMESPACE_DOM,    "submit",   "on-submit" },
-    { XML_NAMESPACE_FORM,   "approveupdate",    "on-approveupdate" },
-    { XML_NAMESPACE_FORM,   "update",   "on-update" },
-    { XML_NAMESPACE_FORM,   "startreload",  "on-startreload" },
-    { XML_NAMESPACE_FORM,   "reload",   "on-reload" },
-    { XML_NAMESPACE_FORM,   "startunload",  "on-startunload" },
-    { XML_NAMESPACE_FORM,   "confirmdelete",    "on-confirmdelete" },
-    { XML_NAMESPACE_FORM,   "approverowchange", "on-approverowchange" },
-    { XML_NAMESPACE_FORM,   "rowchange",    "on-rowchange" },
-    { XML_NAMESPACE_FORM,   "approvecursormove",    "on-approvecursormove" },
-    { XML_NAMESPACE_FORM,   "cursormove",   "on-cursormove" },
-    { XML_NAMESPACE_FORM,   "supplyparameter",  "on-supplyparameter" },
-    { XML_NAMESPACE_FORM,   "adjust",   "on-adjust" },
+    { XmlNamespace::FORM,   "approveaction",    "on-approveaction" },
+    { XmlNamespace::FORM,   "performaction",    "on-performaction" },
+    { XmlNamespace::DOM,    "change",   "on-change" },
+    { XmlNamespace::FORM,   "textchange",   "on-textchange" },
+    { XmlNamespace::FORM,   "itemstatechange",  "on-itemstatechange" },
+    { XmlNamespace::DOM,    "keydown",  "on-keydown" },
+    { XmlNamespace::DOM,    "keyup",    "on-keyup" },
+    { XmlNamespace::FORM,   "mousedrag",    "on-mousedrag" },
+    { XmlNamespace::DOM,    "mousemove",    "on-mousemove" },
+    { XmlNamespace::DOM,    "mousedown",    "on-mousedown" },
+    { XmlNamespace::DOM,    "mouseup",  "on-mouseup" },
+    { XmlNamespace::FORM,   "approvereset", "on-approvereset" },
+    { XmlNamespace::DOM,    "reset",    "on-reset" },
+    { XmlNamespace::DOM,    "submit",   "on-submit" },
+    { XmlNamespace::FORM,   "approveupdate",    "on-approveupdate" },
+    { XmlNamespace::FORM,   "update",   "on-update" },
+    { XmlNamespace::FORM,   "startreload",  "on-startreload" },
+    { XmlNamespace::FORM,   "reload",   "on-reload" },
+    { XmlNamespace::FORM,   "startunload",  "on-startunload" },
+    { XmlNamespace::FORM,   "confirmdelete",    "on-confirmdelete" },
+    { XmlNamespace::FORM,   "approverowchange", "on-approverowchange" },
+    { XmlNamespace::FORM,   "rowchange",    "on-rowchange" },
+    { XmlNamespace::FORM,   "approvecursormove",    "on-approvecursormove" },
+    { XmlNamespace::FORM,   "cursormove",   "on-cursormove" },
+    { XmlNamespace::FORM,   "supplyparameter",  "on-supplyparameter" },
+    { XmlNamespace::FORM,   "adjust",   "on-adjust" },
     { 0, nullptr, nullptr }
 };
 
 XMLTransformerEventMapEntry const aFormTransformerEventMap[] =
 {
-    { XML_NAMESPACE_DOM,    "mouseover",    "on-mouseover" },
-    { XML_NAMESPACE_DOM,    "mouseout", "on-mouseout" },
-    { XML_NAMESPACE_DOM,    "DOMFocusOut",  "on-blur" },
+    { XmlNamespace::DOM,    "mouseover",    "on-mouseover" },
+    { XmlNamespace::DOM,    "mouseout", "on-mouseout" },
+    { XmlNamespace::DOM,    "DOMFocusOut",  "on-blur" },
     { 0, nullptr, nullptr }
 };
 
diff --git a/xmloff/source/transform/EventOASISTContext.cxx b/xmloff/source/transform/EventOASISTContext.cxx
index e2e196b6a1de..ffc4ab256625 100644
--- a/xmloff/source/transform/EventOASISTContext.cxx
+++ b/xmloff/source/transform/EventOASISTContext.cxx
@@ -209,14 +209,14 @@ void XMLEventOASISTransformerContext::StartElement(
 
                         OUString aAttrQName(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_SCRIPT,
+                                XmlNamespace::SCRIPT,
                             ::xmloff::token::GetXMLToken( XML_MACRO_NAME ) ) );
 
                         pMutableAttrList->AddAttribute( aAttrQName, aName );
 
                         sal_Int16 idx = pMutableAttrList->GetIndexByName(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_SCRIPT,
+                                XmlNamespace::SCRIPT,
                             GetXMLToken( XML_LANGUAGE ) ) );
 
                         pMutableAttrList->SetValueByIndex( idx,
@@ -224,7 +224,7 @@ void XMLEventOASISTransformerContext::StartElement(
 
                         OUString aLocQName(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_SCRIPT,
+                                XmlNamespace::SCRIPT,
                                 GetXMLToken( XML_LOCATION ) ) );
 
                         pMutableAttrList->AddAttribute( aLocQName, aLocation );
@@ -240,7 +240,7 @@ void XMLEventOASISTransformerContext::StartElement(
                         GetTransformer().GetAncestorContext( 1 );
                     bool bForm = pObjContext &&
 
-                        pObjContext->HasNamespace(XML_NAMESPACE_FORM );
+                        pObjContext->HasNamespace(XmlNamespace::FORM );
                     pMutableAttrList->SetValueByIndex( i,
                                    GetTransformer().GetEventName( rAttrValue,
                                                                     bForm ) );
@@ -268,7 +268,7 @@ void XMLEventOASISTransformerContext::StartElement(
 
                     sal_Int16 idx = pMutableAttrList->GetIndexByName(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_SCRIPT,
+                    XmlNamespace::SCRIPT,
                     GetXMLToken( XML_LANGUAGE ) ) );
 
                     pMutableAttrList->SetValueByIndex( idx,
@@ -276,7 +276,7 @@ void XMLEventOASISTransformerContext::StartElement(
 
                     OUString aLocQName(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_SCRIPT,
+                    XmlNamespace::SCRIPT,
                     GetXMLToken( XML_LOCATION ) ) );
 
                     pMutableAttrList->AddAttribute( aLocQName, aLocation );
@@ -308,12 +308,12 @@ void XMLEventOASISTransformerContext::StartElement(
                     if( !aLocation.isEmpty() )
                     {
                         OUString aAttrQName( GetTransformer().GetNamespaceMap().
-                        GetQNameByKey( XML_NAMESPACE_SCRIPT,
+                        GetQNameByKey( XmlNamespace::SCRIPT,
                         ::xmloff::token::GetXMLToken( XML_LOCATION ) ) );
                         pMutableAttrList->AddAttribute( aAttrQName, aLocation );
                         // draw bug
                         aAttrQName = GetTransformer().GetNamespaceMap().
-                        GetQNameByKey( XML_NAMESPACE_SCRIPT,
+                        GetQNameByKey( XmlNamespace::SCRIPT,
                         ::xmloff::token::GetXMLToken( XML_LIBRARY ) );
                         pMutableAttrList->AddAttribute( aAttrQName, aLocation );
                     }
diff --git a/xmloff/source/transform/EventOOoTContext.cxx b/xmloff/source/transform/EventOOoTContext.cxx
index 71566a3466e0..3a0146a271d5 100644
--- a/xmloff/source/transform/EventOOoTContext.cxx
+++ b/xmloff/source/transform/EventOOoTContext.cxx
@@ -115,7 +115,7 @@ sal_uInt16 XMLEventOOoTransformerContext::GetEventName(
     if( aIter == rMap.end() )
     {
         rNewName = rName;
-        return XML_NAMESPACE_UNKNOWN;
+        return XmlNamespace::UNKNOWN;
     }
     else
     {
diff --git a/xmloff/source/transform/FormPropOASISTContext.cxx b/xmloff/source/transform/FormPropOASISTContext.cxx
index 390745064d4d..d9e7ef7ffa2e 100644
--- a/xmloff/source/transform/FormPropOASISTContext.cxx
+++ b/xmloff/source/transform/FormPropOASISTContext.cxx
@@ -85,7 +85,7 @@ XMLFormPropOASISTransformerContext::XMLFormPropOASISTransformerContext(
         XMLTransformerBase& rImp,
         const OUString& rQName,
         XMLTokenEnum eLocalName ) :
-    XMLRenameElemTransformerContext( rImp, rQName, XML_NAMESPACE_FORM,
+    XMLRenameElemTransformerContext( rImp, rQName, XmlNamespace::FORM,
                                        XML_PROPERTY ),
     m_bIsList( XML_LIST_PROPERTY == eLocalName),
     m_bIsListValue( XML_LIST_VALUE == eLocalName)
@@ -167,7 +167,7 @@ void XMLFormPropOASISTransformerContext::StartElement(
     {
         OUString aNewAttrQName(
                 GetTransformer().GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_FORM,
+                    XmlNamespace::FORM,
                     GetXMLToken( XML_PROPERTY_IS_LIST ) ) );
         pMutableAttrList->AddAttribute( aNewAttrQName,
                                         GetXMLToken( XML_TRUE ) );
@@ -188,14 +188,14 @@ void XMLFormPropOASISTransformerContext::StartElement(
     {
         OUString aNewAttrQName(
             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                XML_NAMESPACE_FORM, GetXMLToken( XML_PROPERTY_IS_VOID ) ) );
+                XmlNamespace::FORM, GetXMLToken( XML_PROPERTY_IS_VOID ) ) );
         pMutableAttrList->AddAttribute( aNewAttrQName,
                                     GetXMLToken( XML_TRUE ) );
     }
 
     OUString aValueElemQName(
         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                XML_NAMESPACE_FORM, GetXMLToken( XML_PROPERTY_VALUE ) ) );
+                XmlNamespace::FORM, GetXMLToken( XML_PROPERTY_VALUE ) ) );
     GetTransformer().GetDocHandler()->startElement( aValueElemQName,
                                                     xAttrList );
     GetTransformer().GetDocHandler()->characters( aValue );
diff --git a/xmloff/source/transform/FormPropOOoTContext.cxx b/xmloff/source/transform/FormPropOOoTContext.cxx
index c017a1c6b4f0..828d1d02d2c7 100644
--- a/xmloff/source/transform/FormPropOOoTContext.cxx
+++ b/xmloff/source/transform/FormPropOOoTContext.cxx
@@ -73,7 +73,7 @@ void XMLFormPropValueTContext_Impl::StartElement(
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                  &aLocalName );
-        if( XML_NAMESPACE_FORM == nPrefix &&
+        if( XmlNamespace::FORM == nPrefix &&
             IsXMLToken( aLocalName, XML_PROPERTY_IS_VOID ) &&
              IsXMLToken( rAttrList->getValueByIndex( i ), XML_TRUE ) )
             m_bIsVoid = true;
@@ -118,7 +118,7 @@ rtl::Reference<XMLTransformerContext> XMLFormPropOOoTransformerContext::CreateCh
 {
     rtl::Reference<XMLTransformerContext> pContext;
 
-    if( XML_NAMESPACE_FORM == nPrefix &&
+    if( XmlNamespace::FORM == nPrefix &&
         IsXMLToken( rLocalName, XML_PROPERTY_VALUE ) )
     {
         if( m_bIsList )
@@ -190,7 +190,7 @@ void XMLFormPropOOoTransformerContext::StartElement(
                 {
                     m_aElemQName =
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_FORM, GetXMLToken( XML_LIST_PROPERTY ) );
+                        XmlNamespace::FORM, GetXMLToken( XML_LIST_PROPERTY ) );
                     m_bIsList = true;
                 }
                 pMutableAttrList->RemoveAttributeByIndex( i );
@@ -230,7 +230,7 @@ void XMLFormPropOOoTransformerContext::EndElement()
         {
             OUString aAttrQName(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_OFFICE, GetXMLToken(m_eValueToken) ) );
+                    XmlNamespace::OFFICE, GetXMLToken(m_eValueToken) ) );
             static_cast< XMLMutableAttributeList * >( m_xAttrList.get() )
                 ->AddAttribute( aAttrQName, m_xValueContext->GetTextContent() );
         }
diff --git a/xmloff/source/transform/FrameOASISTContext.cxx b/xmloff/source/transform/FrameOASISTContext.cxx
index 5f4d2d253eaf..e9ef2c024fb4 100644
--- a/xmloff/source/transform/FrameOASISTContext.cxx
+++ b/xmloff/source/transform/FrameOASISTContext.cxx
@@ -48,7 +48,7 @@ bool XMLFrameOASISTransformerContext::IsLinkedEmbeddedObject(
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( aAttrName,
                                                                  &aLocalName );
-        if( XML_NAMESPACE_XLINK == nPrefix &&
+        if( XmlNamespace::XLINK == nPrefix &&
             IsXMLToken( aLocalName, XML_HREF ) )
         {
             OUString sHRef( rAttrList->getValueByIndex( i ) );
@@ -92,7 +92,7 @@ void XMLFrameOASISTransformerContext::StartElement(
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName, &aLocalName );
 
-        if( (nPrefix == XML_NAMESPACE_PRESENTATION) && IsXMLToken( aLocalName, XML_CLASS ) )
+        if( (nPrefix == XmlNamespace::PRESENTATION) && IsXMLToken( aLocalName, XML_CLASS ) )
         {
             const OUString& rAttrValue = rAttrList->getValueByIndex( i );
             if( IsXMLToken( rAttrValue, XML_HEADER ) || IsXMLToken( rAttrValue, XML_FOOTER ) ||
diff --git a/xmloff/source/transform/FrameOOoTContext.cxx b/xmloff/source/transform/FrameOOoTContext.cxx
index 76e847691115..62a4290227e9 100644
--- a/xmloff/source/transform/FrameOOoTContext.cxx
+++ b/xmloff/source/transform/FrameOOoTContext.cxx
@@ -36,7 +36,7 @@ XMLFrameOOoTransformerContext::XMLFrameOOoTransformerContext(
         XMLTransformerBase& rImp,
         const OUString& rQName ) :
     XMLPersElemContentTContext( rImp, rQName ),
-    m_aElemQName( rImp.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_DRAW,
+    m_aElemQName( rImp.GetNamespaceMap().GetQNameByKey( XmlNamespace::DRAW,
                             ::xmloff::token::GetXMLToken( XML_FRAME ) ) )
 {
 }
diff --git a/xmloff/source/transform/MergeElemTContext.cxx b/xmloff/source/transform/MergeElemTContext.cxx
index 3d0a7543a6a4..c5c21072639a 100644
--- a/xmloff/source/transform/MergeElemTContext.cxx
+++ b/xmloff/source/transform/MergeElemTContext.cxx
@@ -138,7 +138,7 @@ void XMLMergeElemTransformerContext::StartElement(
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                 &aLocalName );
         bool bRemove = true;
-        if( XML_NAMESPACE_OFFICE == nPrefix)
+        if( XmlNamespace::OFFICE == nPrefix)
         {
             if (IsXMLToken( aLocalName, XML_DISPLAY ) )
                 bRemove = false;
diff --git a/xmloff/source/transform/MetaTContext.cxx b/xmloff/source/transform/MetaTContext.cxx
index 86368bbff262..5693acbf193e 100644
--- a/xmloff/source/transform/MetaTContext.cxx
+++ b/xmloff/source/transform/MetaTContext.cxx
@@ -96,7 +96,7 @@ void XMLMetaTransformerContext::EndElement()
             {
                 aKeywordsQName =
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_META, GetXMLToken(XML_KEYWORDS ) );
+                            XmlNamespace::META, GetXMLToken(XML_KEYWORDS ) );
 
                 Reference< XAttributeList > xAttrList =
                     new XMLMutableAttributeList;
diff --git a/xmloff/source/transform/NotesTContext.cxx b/xmloff/source/transform/NotesTContext.cxx
index 4ef6d293b633..bee7d7d75637 100644
--- a/xmloff/source/transform/NotesTContext.cxx
+++ b/xmloff/source/transform/NotesTContext.cxx
@@ -131,7 +131,7 @@ void XMLNotesTransformerContext::StartElement(
     }
 
     SetExportQName( GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_TEXT,
+                            XmlNamespace::TEXT,
                             ::xmloff::token::GetXMLToken( eToken ) ) );
     if( m_bPersistent )
         XMLPersElemContentTContext::StartElement( xAttrList );
@@ -161,7 +161,7 @@ rtl::Reference<XMLTransformerContext> XMLNotesTransformerContext::CreateChildCon
     rtl::Reference<XMLTransformerContext> pContext;
     if( XML_NOTE == m_eTypeToken )
     {
-        if( XML_NAMESPACE_TEXT == nPrefix )
+        if( XmlNamespace::TEXT == nPrefix )
         {
             XMLTokenEnum eToken ( XML_TOKEN_INVALID );
             if( IsXMLToken( rLocalName, XML_NOTE_CITATION ) )
@@ -181,7 +181,7 @@ rtl::Reference<XMLTransformerContext> XMLNotesTransformerContext::CreateChildCon
                 {
                     pContext.set(new XMLPersTextContentTContext(
                                     GetTransformer(), rQName,
-                                    XML_NAMESPACE_TEXT,
+                                    XmlNamespace::TEXT,
                                     eToken ));
                     AddContent( pContext );
 
@@ -190,7 +190,7 @@ rtl::Reference<XMLTransformerContext> XMLNotesTransformerContext::CreateChildCon
                 {
                     pContext.set(new XMLRenameElemTransformerContext(
                                     GetTransformer(), rQName,
-                                    XML_NAMESPACE_TEXT,
+                                    XmlNamespace::TEXT,
                                     eToken ));
                 }
             }
diff --git a/xmloff/source/transform/OOo2Oasis.cxx b/xmloff/source/transform/OOo2Oasis.cxx
index 58c100ec5856..70670a718b8a 100644
--- a/xmloff/source/transform/OOo2Oasis.cxx
+++ b/xmloff/source/transform/OOo2Oasis.cxx
@@ -72,7 +72,7 @@ enum XMLUserDefinedTransformerAction
 }
 
 #define ENTRY3( n, l, a, p1, p2, p3 ) \
-    { XML_NAMESPACE_##n, XML_##l, a, p1, p2, p3 }
+    { XmlNamespace::##n, XML_##l, a, p1, p2, p3 }
 #define ENTRY3QQN( n, l, a, n1, l1, n2, l2, p3 ) \
     ENTRY3( n, l, a, XMLTransformerActionInit::QNameParam( n1, l1 ), \
             XMLTransformerActionInit::QNameParam( n2, l2 ), p3 )
@@ -105,49 +105,49 @@ XMLTransformerActionInit const aActionTable[] =
     ENTRY0( OFFICE, DOCUMENT_STYLES, XML_ETACTION_DOCUMENT ),
     ENTRY0( OFFICE, DOCUMENT_SETTINGS, XML_ETACTION_DOCUMENT ),
     ENTRY1Q( OFFICE, AUTO_TEXT_EVENTS, XML_ETACTION_DOCUMENT_RENAME,
-                          XML_NAMESPACE_OOO, XML_AUTO_TEXT_EVENTS),
+                          XmlNamespace::OOO, XML_AUTO_TEXT_EVENTS),
 
     // remove <meta:keywords>
     ENTRY0( META, KEYWORDS, XML_ETACTION_COPY_CONTENT ),
 
     // rename <office:script> to <office:scripts>
     ENTRY1Q( OFFICE, SCRIPT, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_OFFICE, XML_SCRIPTS ),
+                        XmlNamespace::OFFICE, XML_SCRIPTS ),
 
     // rename <office:script-data> to <office:script> and process attributes
     ENTRY2QN( OFFICE, SCRIPT_DATA, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_OFFICE, XML_SCRIPT,
+                        XmlNamespace::OFFICE, XML_SCRIPT,
                         OOO_SCRIPT_ACTIONS ),
 
     // rename <script:libraries> to <ooo:libraries>
     ENTRY1Q( SCRIPT, LIBRARIES, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_OOO, XML_LIBRARIES ),
+                        XmlNamespace::OOO, XML_LIBRARIES ),
 
     // rename <script:library-linked> to <ooo:library-linked> and process attributes
     ENTRY2QN( SCRIPT, LIBRARY_LINKED, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_OOO, XML_LIBRARY_LINKED,
+                        XmlNamespace::OOO, XML_LIBRARY_LINKED,
                         OOO_SCRIPT_ACTIONS ),
 
     // rename <script:library-embedded> to <ooo:library-embedded> and process attributes
     ENTRY2QN( SCRIPT, LIBRARY_EMBEDDED, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_OOO, XML_LIBRARY_EMBEDDED,
+                        XmlNamespace::OOO, XML_LIBRARY_EMBEDDED,
                         OOO_SCRIPT_ACTIONS ),
 
     // rename <script:module> to <ooo:module> and process attributes
     ENTRY2QN( SCRIPT, MODULE, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_OOO, XML_MODULE,
+                        XmlNamespace::OOO, XML_MODULE,
                         OOO_SCRIPT_ACTIONS ),
 
     // rename <script:source-code> to <ooo:source-code>
     ENTRY1Q( SCRIPT, SOURCE_CODE, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_OOO, XML_SOURCE_CODE ),
+                        XmlNamespace::OOO, XML_SOURCE_CODE ),
 
     // rename <office:font-decls> to <office:font-face-decl>,
     // rename <style:font-decl> to <style:font-face>, process attrs
     ENTRY1Q( OFFICE, FONT_DECLS, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_OFFICE, XML_FONT_FACE_DECLS ),
+                        XmlNamespace::OFFICE, XML_FONT_FACE_DECLS ),
     ENTRY2QN( STYLE, FONT_DECL, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_STYLE, XML_FONT_FACE,
+                        XmlNamespace::STYLE, XML_FONT_FACE,
                            OOO_FONT_DECL_ACTIONS ),
 
     // add genre element
@@ -155,7 +155,7 @@ XMLTransformerActionInit const aActionTable[] =
 
     // rename <style:page-master> to <style:page-layout>
     ENTRY2QN( STYLE, PAGE_MASTER, XML_ETACTION_STYLE_RENAME,
-                        XML_NAMESPACE_STYLE, XML_PAGE_LAYOUT,
+                        XmlNamespace::STYLE, XML_PAGE_LAYOUT,
                            XML_FAMILY_TYPE_PAGE_LAYOUT  ),
     ENTRY1( STYLE, MASTER_PAGE, XML_ETACTION_PROC_ATTRS,
                         OOO_MASTER_PAGE_ACTIONS ),
@@ -184,7 +184,7 @@ XMLTransformerActionInit const aActionTable[] =
     ENTRY1( DRAW, FILL_IMAGE, XML_ETACTION_STYLE,
                  XML_FAMILY_TYPE_FILL_IMAGE ),
     ENTRY2QN( DRAW, TRANSPARENCY, XML_ETACTION_STYLE_RENAME,
-                XML_NAMESPACE_DRAW, XML_OPACITY,
+                XmlNamespace::DRAW, XML_OPACITY,
                  XML_FAMILY_TYPE_GRADIENT ),
     ENTRY1( DRAW, MARKER, XML_ETACTION_STYLE,
                  XML_FAMILY_TYPE_MARKER ),
@@ -200,56 +200,56 @@ XMLTransformerActionInit const aActionTable[] =
 
     // rename <text:ordered-list> and <text:unordered-list> to <text:list>
     ENTRY2QN( TEXT, UNORDERED_LIST, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_TEXT, XML_LIST,
+                        XmlNamespace::TEXT, XML_LIST,
                           OOO_STYLE_REF_ACTIONS ),
     ENTRY2QN( TEXT, ORDERED_LIST, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_TEXT, XML_LIST,
+                        XmlNamespace::TEXT, XML_LIST,
                           OOO_STYLE_REF_ACTIONS ),
 
     // rename <text:footnote*> to <text:note*>
     ENTRY3QQN( TEXT, FOOTNOTE, XML_ETACTION_RENAME_ELEM_ADD_ATTR,
-                        XML_NAMESPACE_TEXT, XML_NOTE,
-                           XML_NAMESPACE_TEXT, XML_NOTE_CLASS, XML_FOOTNOTE ),
+                        XmlNamespace::TEXT, XML_NOTE,
+                           XmlNamespace::TEXT, XML_NOTE_CLASS, XML_FOOTNOTE ),
     ENTRY1Q( TEXT, FOOTNOTE_BODY, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TEXT, XML_NOTE_BODY ),
+                        XmlNamespace::TEXT, XML_NOTE_BODY ),
     ENTRY1Q( TEXT, FOOTNOTE_CITATION, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TEXT, XML_NOTE_CITATION ),
+                        XmlNamespace::TEXT, XML_NOTE_CITATION ),
     ENTRY3QQN( TEXT, FOOTNOTES_CONFIGURATION,
                         XML_ETACTION_RENAME_ELEM_ADD_PROC_ATTR,
-                        XML_NAMESPACE_TEXT, XML_NOTES_CONFIGURATION,
-                           XML_NAMESPACE_TEXT, XML_NOTE_CLASS,
+                        XmlNamespace::TEXT, XML_NOTES_CONFIGURATION,
+                           XmlNamespace::TEXT, XML_NOTE_CLASS,
                         XML_FOOTNOTE | (OOO_STYLE_REF_ACTIONS << 16) ),
 
     // rename <text:endnote*> to <text:endnote*>
     ENTRY3QQN( TEXT, ENDNOTE, XML_ETACTION_RENAME_ELEM_ADD_ATTR,
-                        XML_NAMESPACE_TEXT, XML_NOTE,
-                           XML_NAMESPACE_TEXT, XML_NOTE_CLASS, XML_ENDNOTE ),
+                        XmlNamespace::TEXT, XML_NOTE,
+                           XmlNamespace::TEXT, XML_NOTE_CLASS, XML_ENDNOTE ),
     ENTRY1Q( TEXT, ENDNOTE_BODY, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TEXT, XML_NOTE_BODY ),
+                        XmlNamespace::TEXT, XML_NOTE_BODY ),
     ENTRY1Q( TEXT, ENDNOTE_CITATION, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TEXT, XML_NOTE_CITATION ),
+                        XmlNamespace::TEXT, XML_NOTE_CITATION ),
     ENTRY3QQN( TEXT, ENDNOTES_CONFIGURATION,
                         XML_ETACTION_RENAME_ELEM_ADD_PROC_ATTR,
-                        XML_NAMESPACE_TEXT, XML_NOTES_CONFIGURATION,
-                           XML_NAMESPACE_TEXT, XML_NOTE_CLASS,
+                        XmlNamespace::TEXT, XML_NOTES_CONFIGURATION,
+                           XmlNamespace::TEXT, XML_NOTE_CLASS,
                         XML_ENDNOTE | (OOO_STYLE_REF_ACTIONS << 16) ),
 
     // rename <text:footnote> and <text:endnote> to <text:note>
     ENTRY3QQN( TEXT, ENDNOTE_REF, XML_ETACTION_RENAME_ELEM_ADD_ATTR,
-                        XML_NAMESPACE_TEXT, XML_NOTE_REF,
-                           XML_NAMESPACE_TEXT, XML_NOTE_CLASS, XML_ENDNOTE ),
+                        XmlNamespace::TEXT, XML_NOTE_REF,
+                           XmlNamespace::TEXT, XML_NOTE_CLASS, XML_ENDNOTE ),
     ENTRY3QQN( TEXT, FOOTNOTE_REF, XML_ETACTION_RENAME_ELEM_ADD_ATTR,
-                        XML_NAMESPACE_TEXT, XML_NOTE_REF,
-                           XML_NAMESPACE_TEXT, XML_NOTE_CLASS, XML_FOOTNOTE ),
+                        XmlNamespace::TEXT, XML_NOTE_REF,
+                           XmlNamespace::TEXT, XML_NOTE_CLASS, XML_FOOTNOTE ),
 
     // rename <text:tab-stop> to <text:tab>
     ENTRY1Q( TEXT, TAB_STOP, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TEXT, XML_TAB ),
+                        XmlNamespace::TEXT, XML_TAB ),
 
     // replace <table:sub-table> with <table:table table:is-sub-table>
     ENTRY3QQN( TABLE, SUB_TABLE, XML_ETACTION_RENAME_ELEM_ADD_ATTR,
-                        XML_NAMESPACE_TABLE, XML_TABLE,
-                           XML_NAMESPACE_TABLE, XML_IS_SUB_TABLE, XML_TRUE ),
+                        XmlNamespace::TABLE, XML_TABLE,
+                           XmlNamespace::TABLE, XML_IS_SUB_TABLE, XML_TRUE ),
 
     // process *:style-name attributes
     ENTRY1( TEXT, SECTION, XML_ETACTION_PROC_ATTRS,
@@ -328,7 +328,7 @@ XMLTransformerActionInit const aActionTable[] =
         OOO_STYLE_REF_ACTIONS ), /* generated entry */
     ENTRY2QN( TEXT, INDEX_ENTRY_CHAPTER_NUMBER,
             XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-            XML_NAMESPACE_TEXT, XML_INDEX_ENTRY_CHAPTER,
+            XmlNamespace::TEXT, XML_INDEX_ENTRY_CHAPTER,
             OOO_STYLE_REF_ACTIONS ), /* generated entry */
     ENTRY1( TEXT, INDEX_ENTRY_TEXT, XML_ETACTION_PROC_ATTRS,
         OOO_STYLE_REF_ACTIONS ), /* generated entry */
@@ -371,7 +371,7 @@ XMLTransformerActionInit const aActionTable[] =
 
     // process events
     ENTRY1Q( OFFICE, EVENTS, XML_ETACTION_RENAME_ELEM,
-                      XML_NAMESPACE_OFFICE, XML_EVENT_LISTENERS ),
+                      XmlNamespace::OFFICE, XML_EVENT_LISTENERS ),
     ENTRY0( SCRIPT, EVENT, XML_ETACTION_EVENT ),
     ENTRY0( PRESENTATION, EVENT, XML_ETACTION_EVENT ),
 
@@ -423,9 +423,9 @@ XMLTransformerActionInit const aActionTable[] =
     ENTRY0( CHART, PLOT_AREA, XML_ETACTION_CHART_PLOT_AREA ),
 
     ENTRY1Q( TEXT, TRACKED_CHANGES, XML_ETACTION_TRACKED_CHANGES,
-                        XML_NAMESPACE_TEXT, XML_PROTECTION_KEY ),
+                        XmlNamespace::TEXT, XML_PROTECTION_KEY ),
     ENTRY1Q( TABLE, TRACKED_CHANGES, XML_ETACTION_TRACKED_CHANGES,
-                        XML_NAMESPACE_TABLE, XML_PROTECTION_KEY ),
+                        XmlNamespace::TABLE, XML_PROTECTION_KEY ),
 
     ENTRY1( TEXT, INDEX_ENTRY_TAB_STOP, XML_ETACTION_PROC_ATTRS,
                   OOO_INDEX_ENTRY_TAB_STOP_ACTIONS ),
@@ -499,11 +499,11 @@ XMLTransformerActionInit const aActionTable[] =
     ENTRY1( FORM, FORM, XML_ETACTION_PROC_ATTRS,
         OOO_FORM_CONTROL_ACTIONS ),
     ENTRY2QN( STYLE, SYMBOL_IMAGE, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-              XML_NAMESPACE_CHART, XML_SYMBOL_IMAGE,
+              XmlNamespace::CHART, XML_SYMBOL_IMAGE,
               OOO_BACKGROUND_IMAGE_ACTIONS ),
 
     ENTRY2QN( CONFIG, CONFIG_ITEM_SET, XML_ETACTION_PROC_ATTRS_COND,
-        XML_NAMESPACE_OFFICE, XML_SETTINGS,
+        XmlNamespace::OFFICE, XML_SETTINGS,
         OOO_CONFIG_ITEM_SET_ACTIONS ),
 
     // add namespace prefix
@@ -515,7 +515,7 @@ XMLTransformerActionInit const aActionTable[] =
         OOO_FORMULA_ACTIONS ), /* generated entry */
     //  text:condition
     ENTRY2QN( TEXT, DATABASE_SELECT, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                XML_NAMESPACE_TEXT, XML_DATABASE_ROW_SELECT,
+                XmlNamespace::TEXT, XML_DATABASE_ROW_SELECT,
         OOO_FORMULA_ACTIONS ),
     //  text:condition
     ENTRY1( TEXT, CONDITIONAL_TEXT, XML_ETACTION_PROC_ATTRS,
@@ -532,9 +532,9 @@ XMLTransformerActionInit const aActionTable[] =
 
     // rename <table:dependences> to <table:dependencies>
     ENTRY1Q( TABLE, DEPENDENCES, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TABLE, XML_DEPENDENCIES ),
+                        XmlNamespace::TABLE, XML_DEPENDENCIES ),
     ENTRY1Q( TABLE, DEPENDENCE, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TABLE, XML_DEPENDENCY ),
+                        XmlNamespace::TABLE, XML_DEPENDENCY ),
 
     // process table::error-macro
     ENTRY1( TABLE, ERROR_MACRO, XML_ETACTION_PROC_ATTRS,
@@ -599,7 +599,7 @@ XMLTransformerActionInit const aStyleActionTable[] =
 XMLTransformerActionInit const aFrameElemActionTable[] =
 {
     ENTRY1Q( OFFICE, EVENTS, XML_ETACTION_RENAME_ELEM,
-                      XML_NAMESPACE_OFFICE, XML_EVENT_LISTENERS ),
+                      XmlNamespace::OFFICE, XML_EVENT_LISTENERS ),
     ENTRY0( DRAW, GLUE_POINT, XML_ETACTION_COPY ),
     ENTRY0( DRAW, IMAGE_MAP, XML_ETACTION_COPY ),
     ENTRY0( SVG, DESC, XML_ETACTION_COPY_TEXT ),
@@ -642,7 +642,7 @@ XMLTransformerActionInit const aEventActionTable[] =
 {
     ENTRY0( XLINK, HREF, XML_ATACTION_HREF ),
     ENTRY1( SCRIPT, LANGUAGE, XML_ATACTION_ADD_NAMESPACE_PREFIX,
-                    XML_NAMESPACE_OOO ),
+                    XmlNamespace::OOO ),
     ENTRY0( SCRIPT, EVENT_NAME, XML_ATACTION_EVENT_NAME ),
     ENTRY0( SCRIPT, MACRO_NAME, XML_ATACTION_MACRO_NAME ),
     ENTRY0( SCRIPT, LOCATION, XML_ATACTION_MACRO_LOCATION ),
@@ -656,7 +656,7 @@ XMLTransformerActionInit const aMasterPageActionTable[] =
     ENTRY0( STYLE, NAME, XML_ATACTION_ENCODE_STYLE_NAME ),
     ENTRY0( STYLE, NEXT_STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF ),
     ENTRY1Q( STYLE, PAGE_MASTER_NAME, XML_ATACTION_RENAME_ENCODE_STYLE_NAME_REF,
-                        XML_NAMESPACE_STYLE, XML_PAGE_LAYOUT_NAME ),
+                        XmlNamespace::STYLE, XML_PAGE_LAYOUT_NAME ),
     ENTRY0( DRAW, STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -664,9 +664,9 @@ XMLTransformerActionInit const aMasterPageActionTable[] =
 XMLTransformerActionInit const aFontDeclActionTable[] =
 {
     ENTRY1Q( FO, FONT_FAMILY, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_SVG, XML_FONT_FAMILY ),
+                        XmlNamespace::SVG, XML_FONT_FAMILY ),
     ENTRY1Q( STYLE, FONT_STYLE_NAME, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_STYLE, XML_FONT_ADORNMENTS ),
+                        XmlNamespace::STYLE, XML_FONT_ADORNMENTS ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -677,7 +677,7 @@ XMLTransformerActionInit const aParaActionTable[] =
     ENTRY0( TEXT, COND_STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF ),
 //  ENTRY0( TEXT, CLASS_NAMES, XML_ATACTION_REMOVE ),
     ENTRY1Q( TEXT, LEVEL, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TEXT, XML_OUTLINE_LEVEL ),
+                        XmlNamespace::TEXT, XML_OUTLINE_LEVEL ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -703,9 +703,9 @@ XMLTransformerActionInit const aStyleRefActionTable[] =
             XML_ATACTION_ENCODE_STYLE_NAME_REF ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OOO, sal_uInt32(false) ),
     ENTRY1( TEXT, CONDITION, XML_ATACTION_ADD_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_OOOW ),
+                     XmlNamespace::OOOW ),
     ENTRY1( TEXT, FORMULA, XML_ATACTION_ADD_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_OOOW ),
+                     XmlNamespace::OOOW ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -743,7 +743,7 @@ XMLTransformerActionInit const aShapeActionTable[] =
     ENTRY0( DR3D, DISTANCE, XML_ATACTION_INCH2IN ),
     ENTRY0( DR3D, FOCAL_LENGTH, XML_ATACTION_INCH2IN ),
     ENTRY1Q( FORM, ID, XML_ATACTION_RENAME,
-                    XML_NAMESPACE_DRAW, XML_CONTROL ),
+                    XmlNamespace::DRAW, XML_CONTROL ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OOO, sal_uInt32(true) ),
 
     // BM: needed by chart:legend.  The legend needs also the draw actions.  As
@@ -775,7 +775,7 @@ XMLTransformerActionInit const aConnectorActionTable[] =
     ENTRY0( DRAW, END_Y, XML_ATACTION_INCH2IN ),
     ENTRY0( PRESENTATION, STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF ),
     ENTRY1Q( FORM, ID, XML_ATACTION_RENAME,
-                    XML_NAMESPACE_DRAW, XML_CONTROL ),
+                    XmlNamespace::DRAW, XML_CONTROL ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OOO, sal_uInt32(true) ),
     ENTRY0( DRAW, ID, XML_ATACTION_SHAPEID ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
@@ -794,7 +794,7 @@ XMLTransformerActionInit const aTabStopActionTable[] =
 {
     ENTRY0( STYLE, POSITION, XML_ATACTION_INCH2IN ),
     ENTRY1Q( STYLE, LEADER_CHAR, XML_ATACTION_RENAME,
-                    XML_NAMESPACE_STYLE, XML_LEADER_TEXT ),
+                    XmlNamespace::STYLE, XML_LEADER_TEXT ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -804,7 +804,7 @@ XMLTransformerActionInit const aLineNumberingActionTable[] =
     ENTRY0( TEXT, OFFSET, XML_ATACTION_INCH2IN ),
     ENTRY0( TEXT, STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF ),
     ENTRY1Q( TEXT, COUNT_IN_FLOATING_FRAMES, XML_ATACTION_RENAME,
-                    XML_NAMESPACE_TEXT, XML_COUNT_IN_TEXT_BOXES ),
+                    XmlNamespace::TEXT, XML_COUNT_IN_TEXT_BOXES ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -830,9 +830,9 @@ XMLTransformerActionInit const aColumnsActionTable[] =
 //  ENTRY0( STYLE, SPACE_BEFORE, XML_ATACTION_INCH2IN ),
 //  ENTRY0( STYLE, SPACE_AFTER, XML_ATACTION_INCH2IN ),
     ENTRY1Q( FO, MARGIN_LEFT, XML_ATACTION_RENAME_INCH2IN,
-           XML_NAMESPACE_FO, XML_START_INDENT ),
+           XmlNamespace::FO, XML_START_INDENT ),
     ENTRY1Q( FO, MARGIN_RIGHT, XML_ATACTION_RENAME_INCH2IN,
-           XML_NAMESPACE_FO, XML_END_INDENT ),
+           XmlNamespace::FO, XML_END_INDENT ),
     ENTRY0( STYLE, WIDTH, XML_ATACTION_INCH2IN ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -841,22 +841,22 @@ XMLTransformerActionInit const aColumnsActionTable[] =
 XMLTransformerActionInit const aTextValueTypeActionTable[] =
 {
     ENTRY1Q( TEXT, VALUE_TYPE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_VALUE_TYPE ),
+           XmlNamespace::OFFICE, XML_VALUE_TYPE ),
     ENTRY1Q( TEXT, VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_VALUE ),
+           XmlNamespace::OFFICE, XML_VALUE ),
     ENTRY1Q( TEXT, CURRENCY, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_CURRENCY ),
+           XmlNamespace::OFFICE, XML_CURRENCY ),
     ENTRY1Q( TEXT, DATE_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_DATE_VALUE ),
+           XmlNamespace::OFFICE, XML_DATE_VALUE ),
     ENTRY1Q( TEXT, TIME_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_TIME_VALUE ),
+           XmlNamespace::OFFICE, XML_TIME_VALUE ),
     ENTRY1Q( TEXT, BOOLEAN_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_BOOLEAN_VALUE ),
+           XmlNamespace::OFFICE, XML_BOOLEAN_VALUE ),
     ENTRY1Q( TEXT, STRING_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_STRING_VALUE ),
+           XmlNamespace::OFFICE, XML_STRING_VALUE ),
     ENTRY0( STYLE, DATA_STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF ),
     ENTRY1( TEXT, FORMULA, XML_ATACTION_ADD_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_OOOW ),
+                     XmlNamespace::OOOW ),
     ENTRY0( TEXT, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -864,24 +864,24 @@ XMLTransformerActionInit const aTextValueTypeActionTable[] =
 XMLTransformerActionInit const aTableValueTypeActionTable[] =
 {
     ENTRY1Q( TABLE, VALUE_TYPE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_VALUE_TYPE ),
+           XmlNamespace::OFFICE, XML_VALUE_TYPE ),
     ENTRY1Q( TABLE, VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_VALUE ),
+           XmlNamespace::OFFICE, XML_VALUE ),
     ENTRY1Q( TABLE, CURRENCY, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_CURRENCY ),
+           XmlNamespace::OFFICE, XML_CURRENCY ),
     ENTRY1Q( TABLE, DATE_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_DATE_VALUE ),
+           XmlNamespace::OFFICE, XML_DATE_VALUE ),
     ENTRY1Q( TABLE, TIME_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_TIME_VALUE ),
+           XmlNamespace::OFFICE, XML_TIME_VALUE ),
     ENTRY1Q( TABLE, BOOLEAN_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_BOOLEAN_VALUE ),
+           XmlNamespace::OFFICE, XML_BOOLEAN_VALUE ),
     ENTRY1Q( TABLE, STRING_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_OFFICE, XML_STRING_VALUE ),
+           XmlNamespace::OFFICE, XML_STRING_VALUE ),
     ENTRY0( TABLE, STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF ),
     ENTRY1( TABLE, FORMULA, XML_ATACTION_ADD_APP_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_OOOW ),
+                     XmlNamespace::OOOW ),
     ENTRY1Q( TABLE, VALIDATION_NAME, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TABLE, XML_CONTENT_VALIDATION_NAME ),
+           XmlNamespace::TABLE, XML_CONTENT_VALIDATION_NAME ),
     ENTRY0( TABLE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -889,11 +889,11 @@ XMLTransformerActionInit const aTableValueTypeActionTable[] =
 XMLTransformerActionInit const aAnnotationActionTable[] =
 {
     ENTRY1Q( OFFICE, AUTHOR, XML_ATACTION_MOVE_TO_ELEM,
-                XML_NAMESPACE_DC, XML_CREATOR ),
+                XmlNamespace::DC, XML_CREATOR ),
     ENTRY1Q( OFFICE, CREATE_DATE, XML_ATACTION_MOVE_TO_ELEM,
-                XML_NAMESPACE_DC, XML_DATE ),
+                XmlNamespace::DC, XML_DATE ),
     ENTRY1Q( OFFICE, CREATE_DATE_STRING, XML_ATACTION_MOVE_TO_ELEM,
-                XML_NAMESPACE_META, XML_DATE_STRING ),
+                XmlNamespace::META, XML_DATE_STRING ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -901,9 +901,9 @@ XMLTransformerActionInit const aAnnotationActionTable[] =
 XMLTransformerActionInit const aChangeInfoActionTable[] =
 {
     ENTRY1Q( OFFICE, CHG_AUTHOR, XML_ATACTION_MOVE_TO_ELEM,
-                XML_NAMESPACE_DC, XML_CREATOR ),
+                XmlNamespace::DC, XML_CREATOR ),
     ENTRY1Q( OFFICE, CHG_DATE_TIME, XML_ATACTION_MOVE_TO_ELEM,
-                XML_NAMESPACE_DC, XML_DATE ),
+                XmlNamespace::DC, XML_DATE ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -911,7 +911,7 @@ XMLTransformerActionInit const aChangeInfoActionTable[] =
 XMLTransformerActionInit const aBackgroundImageActionTable[] =
 {
     ENTRY1Q( DRAW, TRANSPARENCY, XML_ATACTION_RENAME_NEG_PERCENT,
-                     XML_NAMESPACE_DRAW, XML_OPACITY ),
+                     XmlNamespace::DRAW, XML_OPACITY ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OOO, sal_uInt32(true) ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -922,7 +922,7 @@ XMLTransformerActionInit const aBackgroundImageActionTable[] =
 */
 XMLTransformerActionInit const aWriterBackgroundImageActionTable[] =
 {
-    ENTRY1Q( DRAW, TRANSPARENCY, XML_ATACTION_WRITER_BACK_GRAPHIC_TRANSPARENCY, XML_NAMESPACE_DRAW, XML_OPACITY ),
+    ENTRY1Q( DRAW, TRANSPARENCY, XML_ATACTION_WRITER_BACK_GRAPHIC_TRANSPARENCY, XmlNamespace::DRAW, XML_OPACITY ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OOO, sal_uInt32(true) ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -931,7 +931,7 @@ XMLTransformerActionInit const aWriterBackgroundImageActionTable[] =
 XMLTransformerActionInit const aDDEConnectionDeclActionTable[] =
 {
     ENTRY1Q( TEXT, NAME, XML_ATACTION_RENAME,
-                     XML_NAMESPACE_OFFICE, XML_NAME ),
+                     XmlNamespace::OFFICE, XML_NAME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -940,8 +940,8 @@ XMLTransformerActionInit const aFormControlActionTable[] =
 {
     ENTRY2QN( FORM, SERVICE_NAME,
                     XML_ATACTION_RENAME_ADD_NAMESPACE_PREFIX,
-                       XML_NAMESPACE_FORM, XML_CONTROL_IMPLEMENTATION,
-                    XML_NAMESPACE_OOO ),
+                       XmlNamespace::FORM, XML_CONTROL_IMPLEMENTATION,
+                    XmlNamespace::OOO ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OOO, sal_uInt32(false) ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -950,11 +950,11 @@ XMLTransformerActionInit const aFormControlActionTable[] =
 XMLTransformerActionInit const aFormColumnActionTable[] =
 {
     ENTRY1Q( FORM, COLUMN_STYLE_NAME, XML_ATACTION_RENAME_ENCODE_STYLE_NAME_REF,
-                        XML_NAMESPACE_FORM, XML_TEXT_STYLE_NAME ),
+                        XmlNamespace::FORM, XML_TEXT_STYLE_NAME ),
     ENTRY2QN( FORM, SERVICE_NAME,
                     XML_ATACTION_RENAME_ADD_NAMESPACE_PREFIX,
-                       XML_NAMESPACE_FORM, XML_CONTROL_IMPLEMENTATION,
-                    XML_NAMESPACE_OOO ),
+                       XmlNamespace::FORM, XML_CONTROL_IMPLEMENTATION,
+                    XmlNamespace::OOO ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -962,7 +962,7 @@ XMLTransformerActionInit const aFormColumnActionTable[] =
 XMLTransformerActionInit const aFormPropActionTable[] =
 {
     ENTRY1Q( FORM, PROPERTY_TYPE, XML_ATACTION_RENAME,
-                          XML_NAMESPACE_OFFICE, XML_VALUE_TYPE ),
+                          XmlNamespace::OFFICE, XML_VALUE_TYPE ),
     ENTRY0( FORM, PROPERTY_IS_LIST, XML_ATACTION_REMOVE ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -978,7 +978,7 @@ XMLTransformerActionInit const aXLinkActionTable[] =
 XMLTransformerActionInit const aConfigItemSetActionTable[] =
 {
     ENTRY1( CONFIG, NAME, XML_ATACTION_ADD_NAMESPACE_PREFIX,
-                    XML_NAMESPACE_OOO ),
+                    XmlNamespace::OOO ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -986,13 +986,13 @@ XMLTransformerActionInit const aConfigItemSetActionTable[] =
 XMLTransformerActionInit const aFormulaActionTable[] =
 {
     ENTRY1( TEXT, CONDITION, XML_ATACTION_ADD_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_OOOW ),
+                     XmlNamespace::OOOW ),
     ENTRY1( TEXT, FORMULA, XML_ATACTION_ADD_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_OOOW ),
+                     XmlNamespace::OOOW ),
     ENTRY1( TABLE, CONDITION, XML_ATACTION_ADD_APP_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_OOOW ),
+                     XmlNamespace::OOOW ),
     ENTRY1( TABLE, FORMULA, XML_ATACTION_ADD_APP_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_OOOW ),
+                     XmlNamespace::OOOW ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1007,7 +1007,7 @@ XMLTransformerActionInit const aErrorMacroActionTable[] =
 XMLTransformerActionInit const aDDEConvModeActionTable[] =
 {
     ENTRY1Q( TABLE, LET_TEXT, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TABLE, XML_KEEP_TEXT ),
+                        XmlNamespace::TABLE, XML_KEEP_TEXT ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1015,7 +1015,7 @@ XMLTransformerActionInit const aDDEConvModeActionTable[] =
 XMLTransformerActionInit const aDataPilotMemberActionTable[] =
 {
     ENTRY1Q( TABLE, DISPLAY_DETAILS, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TABLE, XML_SHOW_DETAILS ),
+                        XmlNamespace::TABLE, XML_SHOW_DETAILS ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1023,7 +1023,7 @@ XMLTransformerActionInit const aDataPilotMemberActionTable[] =
 XMLTransformerActionInit const aDataPilotLevelActionTable[] =
 {
     ENTRY1Q( TABLE, DISPLAY_EMPTY, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TABLE, XML_SHOW_EMPTY ),
+                        XmlNamespace::TABLE, XML_SHOW_EMPTY ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1031,7 +1031,7 @@ XMLTransformerActionInit const aDataPilotLevelActionTable[] =
 XMLTransformerActionInit const aSourceServiceActionTable[] =
 {
     ENTRY1Q( TABLE, USERNAME, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TABLE, XML_USER_NAME ),
+                        XmlNamespace::TABLE, XML_USER_NAME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1047,7 +1047,7 @@ XMLTransformerActionInit const aAnimationsActionTable[] =
 XMLTransformerActionInit const aDrawAreaPolygonActionTable[] =
 {
     ENTRY1Q( SVG, POINTS, XML_ATACTION_RENAME,
-             XML_NAMESPACE_DRAW, XML_POINTS ),
+             XmlNamespace::DRAW, XML_POINTS ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1055,7 +1055,7 @@ XMLTransformerActionInit const aDrawAreaPolygonActionTable[] =
 XMLTransformerActionInit const aChartActionTable[] =
 {
     ENTRY1( CHART, CLASS, XML_ATACTION_ADD_NAMESPACE_PREFIX,
-                     XML_NAMESPACE_CHART ),
+                     XmlNamespace::CHART ),
     ENTRY0( CHART, ADD_IN_NAME, XML_ATACTION_REMOVE ),
     ENTRY0( SVG, WIDTH, XML_ATACTION_INCH2IN ),
     ENTRY0( SVG, HEIGHT, XML_ATACTION_INCH2IN ),
@@ -1067,16 +1067,16 @@ XMLTransformerActionInit const aChartActionTable[] =
 XMLTransformerActionInit const aAlphabeticalIndexMarkActionTable[] =
 {
     ENTRY1Q( TEXT, MAIN_ETRY, XML_ATACTION_RENAME,
-             XML_NAMESPACE_TEXT, XML_MAIN_ENTRY ),
+             XmlNamespace::TEXT, XML_MAIN_ENTRY ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
 // OOO_SCRIPT_ACTIONS
 XMLTransformerActionInit const aScriptActionTable[] =
 {
-    ENTRY1( SCRIPT, LANGUAGE, XML_ATACTION_ADD_NAMESPACE_PREFIX, XML_NAMESPACE_OOO ),
-    ENTRY1Q( SCRIPT, NAME, XML_ATACTION_RENAME, XML_NAMESPACE_OOO, XML_NAME ),
-    ENTRY1Q( SCRIPT, READONLY, XML_ATACTION_RENAME, XML_NAMESPACE_OOO, XML_READONLY ),
+    ENTRY1( SCRIPT, LANGUAGE, XML_ATACTION_ADD_NAMESPACE_PREFIX, XmlNamespace::OOO ),
+    ENTRY1Q( SCRIPT, NAME, XML_ATACTION_RENAME, XmlNamespace::OOO, XML_NAME ),
+    ENTRY1Q( SCRIPT, READONLY, XML_ATACTION_RENAME, XmlNamespace::OOO, XML_READONLY ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1146,7 +1146,7 @@ void XMLDocumentTransformerContext_Impl::StartElement(
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                  &aLocalName );
-        if( XML_NAMESPACE_OFFICE == nPrefix &&
+        if( XmlNamespace::OFFICE == nPrefix &&
             IsXMLToken( aLocalName, XML_CLASS ) )
         {
             const OUString& rValue = xAttrList->getValueByIndex( i );
@@ -1156,11 +1156,11 @@ void XMLDocumentTransformerContext_Impl::StartElement(
             xAttrList = pMutableAttrList;
             OUString sMime = "application/vnd.oasis.opendocument." + rValue;
             pMutableAttrList->SetValueByIndex( i, sMime );
-            OUString aNewAttrQName( GetTransformer().GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_OFFICE, ::xmloff::token::GetXMLToken( XML_MIMETYPE ) ) );
+            OUString aNewAttrQName( GetTransformer().GetNamespaceMap().GetQNameByKey( XmlNamespace::OFFICE, ::xmloff::token::GetXMLToken( XML_MIMETYPE ) ) );
             pMutableAttrList->RenameAttributeByIndex(i, aNewAttrQName );
             break;
         }
-        else if( XML_NAMESPACE_XMLNS == nPrefix )
+        else if( XmlNamespace::XMLNS == nPrefix )
         {
             const OUString& rAttrValue = xAttrList->getValueByIndex( i );
             if( IsXMLToken( rAttrValue, XML_N_OOO ) )
@@ -1187,39 +1187,39 @@ void XMLDocumentTransformerContext_Impl::StartElement(
         if( !bOOo )
             pMutableAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetAttrNameByKey(
-                        XML_NAMESPACE_OOO ),
+                        XmlNamespace::OOO ),
                     GetTransformer().GetNamespaceMap().GetNameByKey(
-                        XML_NAMESPACE_OOO ) );
+                        XmlNamespace::OOO ) );
         if( !bOOoW )
             pMutableAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetAttrNameByKey(
-                        XML_NAMESPACE_OOOW ),
+                        XmlNamespace::OOOW ),
                     GetTransformer().GetNamespaceMap().GetNameByKey(
-                        XML_NAMESPACE_OOOW ) );
+                        XmlNamespace::OOOW ) );
         if( !bOOoC )
             pMutableAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetAttrNameByKey(
-                        XML_NAMESPACE_OOOC ),
+                        XmlNamespace::OOOC ),
                     GetTransformer().GetNamespaceMap().GetNameByKey(
-                        XML_NAMESPACE_OOOC ) );
+                        XmlNamespace::OOOC ) );
         if( !bDOM )
             pMutableAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetAttrNameByKey(
-                        XML_NAMESPACE_DOM ),
+                        XmlNamespace::DOM ),
                     GetTransformer().GetNamespaceMap().GetNameByKey(
-                        XML_NAMESPACE_DOM ) );
+                        XmlNamespace::DOM ) );
         if( !bDC )
             pMutableAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetAttrNameByKey(
-                        XML_NAMESPACE_DC ),
+                        XmlNamespace::DC ),
                     GetTransformer().GetNamespaceMap().GetNameByKey(
-                        XML_NAMESPACE_DC ) );
+                        XmlNamespace::DC ) );
         if( !bSVG )
             pMutableAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetAttrNameByKey(
-                        XML_NAMESPACE_SVG ),
+                        XmlNamespace::SVG ),
                     GetTransformer().GetNamespaceMap().GetNameByKey(
-                        XML_NAMESPACE_SVG ) );
+                        XmlNamespace::SVG ) );
     }
 
     GetTransformer().GetDocHandler()->startElement( m_aElemQName, xAttrList );
@@ -1272,14 +1272,14 @@ void XMLBodyTransformerContext_Impl::StartElement(
     {
         OUString aGlobalQName(
                 GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_TEXT, GetXMLToken(XML_GLOBAL ) ) );
+                            XmlNamespace::TEXT, GetXMLToken(XML_GLOBAL ) ) );
         pMutableAttrList->AddAttribute( aGlobalQName, GetXMLToken(XML_TRUE) );
 
         aClass = GetXMLToken( XML_TEXT );
     }
 
     m_aClassQName = GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_OFFICE, aClass );
+                        XmlNamespace::OFFICE, aClass );
     GetTransformer().GetDocHandler()->startElement( m_aClassQName,
                                                     xAttrList );
 }
@@ -1357,7 +1357,7 @@ void XMLTabStopOOoTContext_Impl::StartElement(
                 {
                     OUString aNewAttrQName(
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_STYLE,
+                            XmlNamespace::STYLE,
                             ::xmloff::token::GetXMLToken(XML_LEADER_STYLE) ) );
                     pMutableAttrList->AddAttribute( aNewAttrQName,
                                                  GetXMLToken( XML_SOLID ) );
@@ -1493,7 +1493,7 @@ void XMLTableOOoTransformerContext_Impl::StartElement(
             sal_uInt16 nPrefix =
                 GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                     &aLocalName );
-            if( XML_NAMESPACE_TABLE == nPrefix &&
+            if( XmlNamespace::TABLE == nPrefix &&
                 IsXMLToken( aLocalName, XML_PRINT_RANGES ) )
             {
                 bPrintRanges = true;
@@ -1503,7 +1503,7 @@ void XMLTableOOoTransformerContext_Impl::StartElement(
         {
             xAttrList = pMutableAttrList;
             pMutableAttrList->AddAttribute(GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_TABLE,
+                                XmlNamespace::TABLE,
                                 GetXMLToken( XML_PRINT ) ), GetXMLToken ( XML_FALSE ));
         }
     }
@@ -1757,7 +1757,7 @@ OUString OOo2OasisTransformer::GetEventName( const OUString& rName, bool )
     OUString aNewName;
     sal_uInt16 nPrefix = XMLEventOOoTransformerContext::GetEventName( rName,
                                                     aNewName, *m_pEventMap );
-    if( XML_NAMESPACE_UNKNOWN != nPrefix )
+    if( XmlNamespace::UNKNOWN != nPrefix )
         aNewName = GetNamespaceMap().GetQNameByKey( nPrefix, aNewName );
     else
         aNewName = rName;
@@ -1773,50 +1773,50 @@ OOo2OasisTransformer::OOo2OasisTransformer( OUString const & rImplName,
     m_aSubServiceName(rSubServiceName),
     m_pEventMap( nullptr )
 {
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE_OOO), XML_NAMESPACE_OFFICE );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XML_NAMESPACE_OFFICE );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE_OOO), XmlNamespace::OFFICE );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XmlNamespace::OFFICE );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META_OOO), XML_NAMESPACE_META );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META), XML_NAMESPACE_META );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META_OOO), XmlNamespace::META );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META), XmlNamespace::META );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE_OOO), XML_NAMESPACE_STYLE );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XML_NAMESPACE_STYLE );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE_OOO), XmlNamespace::STYLE );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XmlNamespace::STYLE );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER_OOO), XML_NAMESPACE_NUMBER );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER), XML_NAMESPACE_NUMBER );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER_OOO), XmlNamespace::NUMBER );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER), XmlNamespace::NUMBER );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG_OOO), XML_NAMESPACE_CONFIG );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XML_NAMESPACE_CONFIG );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG_OOO), XmlNamespace::CONFIG );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XmlNamespace::CONFIG );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT_OOO), XML_NAMESPACE_TEXT );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT), XML_NAMESPACE_TEXT );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT_OOO), XmlNamespace::TEXT );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT), XmlNamespace::TEXT );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE_OOO), XML_NAMESPACE_TABLE );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE), XML_NAMESPACE_TABLE );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE_OOO), XmlNamespace::TABLE );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE), XmlNamespace::TABLE );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW_OOO), XML_NAMESPACE_DRAW );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XML_NAMESPACE_DRAW );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW_OOO), XmlNamespace::DRAW );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XmlNamespace::DRAW );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_DR3D), GetXMLToken(XML_N_DR3D_OOO), XML_NAMESPACE_DR3D );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DR3D), GetXMLToken(XML_N_DR3D), XML_NAMESPACE_DR3D );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_DR3D), GetXMLToken(XML_N_DR3D_OOO), XmlNamespace::DR3D );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DR3D), GetXMLToken(XML_N_DR3D), XmlNamespace::DR3D );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_PRESENTATION), GetXMLToken(XML_N_PRESENTATION_OOO), XML_NAMESPACE_PRESENTATION );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_PRESENTATION), GetXMLToken(XML_N_PRESENTATION), XML_NAMESPACE_PRESENTATION );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_PRESENTATION), GetXMLToken(XML_N_PRESENTATION_OOO), XmlNamespace::PRESENTATION );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_PRESENTATION), GetXMLToken(XML_N_PRESENTATION), XmlNamespace::PRESENTATION );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART_OOO), XML_NAMESPACE_CHART );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART), XML_NAMESPACE_CHART );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART_OOO), XmlNamespace::CHART );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART), XmlNamespace::CHART );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM_OOO), XML_NAMESPACE_FORM );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM), XML_NAMESPACE_FORM );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM_OOO), XmlNamespace::FORM );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM), XmlNamespace::FORM );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT_OOO), XML_NAMESPACE_SCRIPT );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT), XML_NAMESPACE_SCRIPT );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT_OOO), XmlNamespace::SCRIPT );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT), XmlNamespace::SCRIPT );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO), XML_NAMESPACE_FO );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XML_NAMESPACE_FO );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO), XmlNamespace::FO );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XmlNamespace::FO );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG),  XML_NAMESPACE_SVG );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG_COMPAT), XML_NAMESPACE_SVG );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG),  XmlNamespace::SVG );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG_COMPAT), XmlNamespace::SVG );
 
     for(auto & rp : m_aActions)
         rp.reset();
diff --git a/xmloff/source/transform/Oasis2OOo.cxx b/xmloff/source/transform/Oasis2OOo.cxx
index f52427d6a024..49c3ea766b25 100644
--- a/xmloff/source/transform/Oasis2OOo.cxx
+++ b/xmloff/source/transform/Oasis2OOo.cxx
@@ -80,7 +80,7 @@ enum XMLUserDefinedTransformerAction
 }
 
 #define ENTRY3( n, l, a, p1, p2, p3 ) \
-    { XML_NAMESPACE_##n, XML_##l, a, p1, p2, p3 }
+    { XmlNamespace::##n, XML_##l, a, p1, p2, p3 }
 #define ENTRY3QNQ( n, l, a, n1, l1, p2, n3, l3 ) \
     ENTRY3( n, l, a, XMLTransformerActionInit::QNameParam( n1, l1 ), \
             p2, XMLTransformerActionInit::QNameParam( n3, l3 ) )
@@ -111,51 +111,51 @@ XMLTransformerActionInit const aActionTable[] =
     ENTRY0( OFFICE, DOCUMENT, XML_ETACTION_DOCUMENT ),
     ENTRY0( OFFICE, DOCUMENT_CONTENT, XML_ETACTION_DOCUMENT ),
     ENTRY1Q( OOO, AUTO_TEXT_EVENTS, XML_ETACTION_RENAME_ELEM,
-                          XML_NAMESPACE_OFFICE, XML_AUTO_TEXT_EVENTS),
+                          XmlNamespace::OFFICE, XML_AUTO_TEXT_EVENTS),
 
     // add <meta:keywords>
     ENTRY0( OFFICE, META, XML_ETACTION_META ),
 
     // rename <office:scripts> to <office:script>
     ENTRY1Q( OFFICE, SCRIPTS, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_OFFICE, XML_SCRIPT ),
+                        XmlNamespace::OFFICE, XML_SCRIPT ),
 
     // rename <office:script> to <office:script-data> and process attributes
     ENTRY2QN( OFFICE, SCRIPT, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_OFFICE, XML_SCRIPT_DATA,
+                        XmlNamespace::OFFICE, XML_SCRIPT_DATA,
                         OASIS_SCRIPT_ACTIONS ),
 
     // rename <ooo:libraries> to <script:libraries>
     ENTRY1Q( OOO, LIBRARIES, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_SCRIPT, XML_LIBRARIES ),
+                        XmlNamespace::SCRIPT, XML_LIBRARIES ),
 
     // rename <ooo:library-linked> to <script:library-linked> and process attributes
     ENTRY2QN( OOO, LIBRARY_LINKED, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_SCRIPT, XML_LIBRARY_LINKED,
+                        XmlNamespace::SCRIPT, XML_LIBRARY_LINKED,
                         OASIS_SCRIPT_ACTIONS ),
 
     // rename <ooo:library-embedded> to <script:library-embedded> and process attributes
     ENTRY2QN( OOO, LIBRARY_EMBEDDED, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_SCRIPT, XML_LIBRARY_EMBEDDED,
+                        XmlNamespace::SCRIPT, XML_LIBRARY_EMBEDDED,
                         OASIS_SCRIPT_ACTIONS ),
 
     // rename <ooo:module> to <script:module> and process attributes
     ENTRY2QN( OOO, MODULE, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_SCRIPT, XML_MODULE,
+                        XmlNamespace::SCRIPT, XML_MODULE,
                         OASIS_SCRIPT_ACTIONS ),
 
     // rename <ooo:source-code> to <script:source-code>
     ENTRY1Q( OOO, SOURCE_CODE, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_SCRIPT, XML_SOURCE_CODE ),
+                        XmlNamespace::SCRIPT, XML_SOURCE_CODE ),
 
     ENTRY0( OFFICE, BODY, XML_ETACTION_BODY ),
 
     // rename <office:font-face-decls> to <office:font-decl>,
     // rename <style:font-face> to <style:font-decl>, process attrs
     ENTRY1Q( OFFICE, FONT_FACE_DECLS, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_OFFICE, XML_FONT_DECLS ),
+                        XmlNamespace::OFFICE, XML_FONT_DECLS ),
     ENTRY2QN( STYLE, FONT_FACE, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-                        XML_NAMESPACE_STYLE, XML_FONT_DECL,
+                        XmlNamespace::STYLE, XML_FONT_DECL,
                            OASIS_FONT_FACE_ACTIONS ),
 
     // remove genre element
@@ -168,7 +168,7 @@ XMLTransformerActionInit const aActionTable[] =
 
     // rename <style:page-layout> to <style:page-master>
     // ENTRY1Q( STYLE, PAGE_LAYOUT, RENAME_ELEM,
-    //                      XML_NAMESPACE_STYLE, XML_PAGE_MASTER ),
+    //                      XmlNamespace::STYLE, XML_PAGE_MASTER ),
     ENTRY1( STYLE, MASTER_PAGE, XML_ETACTION_PROC_ATTRS,
                         OASIS_MASTER_PAGE_ACTIONS ),
 
@@ -179,7 +179,7 @@ XMLTransformerActionInit const aActionTable[] =
     ENTRY1( STYLE, DEFAULT_STYLE, XML_ETACTION_STYLE,
                  XML_FAMILY_TYPE_END ),
     ENTRY2QN( STYLE, PAGE_LAYOUT, XML_ETACTION_STYLE_RENAME,
-                        XML_NAMESPACE_STYLE, XML_PAGE_MASTER,
+                        XmlNamespace::STYLE, XML_PAGE_MASTER,
                           XML_FAMILY_TYPE_PAGE_LAYOUT ),
     ENTRY1( NUMBER, NUMBER_STYLE, XML_ETACTION_STYLE,
                  XML_FAMILY_TYPE_DATA ),
@@ -216,7 +216,7 @@ XMLTransformerActionInit const aActionTable[] =
     ENTRY1( DRAW, FILL_IMAGE, XML_ETACTION_STYLE,
                  XML_FAMILY_TYPE_FILL_IMAGE ),
     ENTRY2QN( DRAW, OPACITY, XML_ETACTION_STYLE_RENAME,
-                XML_NAMESPACE_DRAW, XML_TRANSPARENCY,
+                XmlNamespace::DRAW, XML_TRANSPARENCY,
                  XML_FAMILY_TYPE_GRADIENT ),
     ENTRY1( DRAW, MARKER, XML_ETACTION_STYLE,
                  XML_FAMILY_TYPE_MARKER ),
@@ -234,7 +234,7 @@ XMLTransformerActionInit const aActionTable[] =
     // rename <text:list> to <text:ordered-list> or <text:unordered-list>
     // TODO: All list currently are renamed to <text:ordered-list>
     ENTRY2QN( TEXT, LIST, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-            XML_NAMESPACE_TEXT, XML_ORDERED_LIST,
+            XmlNamespace::TEXT, XML_ORDERED_LIST,
             OASIS_LIST_STYLE_REF_ACTIONS ),
 
     // rename <text:note*> to <text:footnote*> or <text:endnote*>
@@ -247,7 +247,7 @@ XMLTransformerActionInit const aActionTable[] =
 
     // rename <text:tab> to <text:tab-stop>
     ENTRY1Q( TEXT, TAB, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TEXT, XML_TAB_STOP ),
+                        XmlNamespace::TEXT, XML_TAB_STOP ),
 
     // replace <table:table table:is-sub-table> with <table:sub-table>
     ENTRY0( TABLE, TABLE, XML_ETACTION_TABLE ),
@@ -257,7 +257,7 @@ XMLTransformerActionInit const aActionTable[] =
 
     // process events
     ENTRY1Q( OFFICE, EVENT_LISTENERS, XML_ETACTION_RENAME_ELEM,
-                      XML_NAMESPACE_OFFICE, XML_EVENTS ),
+                      XmlNamespace::OFFICE, XML_EVENTS ),
     ENTRY0( SCRIPT, EVENT_LISTENER, XML_ETACTION_EVENT ),
     ENTRY0( SCRIPT, EVENT, XML_ETACTION_EVENT ),
     ENTRY0( PRESENTATION, EVENT_LISTENER, XML_ETACTION_EVENT ),
@@ -315,9 +315,9 @@ XMLTransformerActionInit const aActionTable[] =
 
     ENTRY0( CONFIG, CONFIG_ITEM, XML_ETACTION_CONFIG_ITEM ),
     ENTRY1Q( TEXT, TRACKED_CHANGES, XML_ETACTION_TRACKED_CHANGES,
-                        XML_NAMESPACE_TEXT, XML_PROTECTION_KEY ),
+                        XmlNamespace::TEXT, XML_PROTECTION_KEY ),
     ENTRY1Q( TABLE, TRACKED_CHANGES, XML_ETACTION_TRACKED_CHANGES,
-                        XML_NAMESPACE_TABLE, XML_PROTECTION_KEY ),
+                        XmlNamespace::TABLE, XML_PROTECTION_KEY ),
 
     ENTRY1( TEXT, INDEX_ENTRY_TAB_STOP, XML_ETACTION_PROC_ATTRS,
                   OASIS_INDEX_ENTRY_TAB_STOP_ACTIONS ),
@@ -358,9 +358,9 @@ XMLTransformerActionInit const aActionTable[] =
                 OASIS_PARA_STYLE_REF_ACTIONS ), /* generated entry */
     ENTRY3QNQ( TEXT, INDEX_ENTRY_CHAPTER,
             XML_ETACTION_RENAME_ELEM_PROC_ATTRS_COND,
-            XML_NAMESPACE_TEXT, XML_INDEX_ENTRY_CHAPTER_NUMBER,
+            XmlNamespace::TEXT, XML_INDEX_ENTRY_CHAPTER_NUMBER,
             OASIS_TEXT_STYLE_REF_ACTIONS ,
-               XML_NAMESPACE_TEXT, XML_TABLE_OF_CONTENT_ENTRY_TEMPLATE),
+               XmlNamespace::TEXT, XML_TABLE_OF_CONTENT_ENTRY_TEMPLATE),
     ENTRY1( TEXT, INDEX_ENTRY_TEXT, XML_ETACTION_PROC_ATTRS,
                 OASIS_TEXT_STYLE_REF_ACTIONS ), /* generated entry */
     ENTRY1( TEXT, INDEX_ENTRY_PAGE_NUMBER, XML_ETACTION_PROC_ATTRS,
@@ -465,7 +465,7 @@ XMLTransformerActionInit const aActionTable[] =
 //  ENTRY1( SVG, DEFINITION_SRC, XML_ETACTION_PROC_ATTRS,
 //      OASIS_XLINK_ACTIONS ), /* generated entry */
     ENTRY2QN( CHART, SYMBOL_IMAGE, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-              XML_NAMESPACE_STYLE, XML_SYMBOL_IMAGE,
+              XmlNamespace::STYLE, XML_SYMBOL_IMAGE,
               OASIS_BACKGROUND_IMAGE_ACTIONS ),
 //      OASIS_XLINK_ACTIONS ), /* generated entry */
 //  events don't have real URIs
@@ -490,7 +490,7 @@ XMLTransformerActionInit const aActionTable[] =
         OASIS_FORMULA_ACTIONS ), /* generated entry */
     //  text:condition
     ENTRY2QN( TEXT, DATABASE_ROW_SELECT, XML_ETACTION_RENAME_ELEM_PROC_ATTRS,
-        XML_NAMESPACE_TEXT, XML_DATABASE_SELECT,
+        XmlNamespace::TEXT, XML_DATABASE_SELECT,
         OASIS_FORMULA_ACTIONS ), /* generated entry */
     //  text:condition
     ENTRY1( TEXT, CONDITIONAL_TEXT, XML_ETACTION_PROC_ATTRS,
@@ -511,9 +511,9 @@ XMLTransformerActionInit const aActionTable[] =
 
     // rename <table:dependencies> to <table:dependences>
     ENTRY1Q( TABLE, DEPENDENCIES, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TABLE, XML_DEPENDENCES ),
+                        XmlNamespace::TABLE, XML_DEPENDENCES ),
     ENTRY1Q( TABLE, DEPENDENCY, XML_ETACTION_RENAME_ELEM,
-                        XML_NAMESPACE_TABLE, XML_DEPENDENCE ),
+                        XmlNamespace::TABLE, XML_DEPENDENCE ),
 
     // process table::conversion-mode
     ENTRY1( TABLE, CONVERSION_MODE, XML_ETACTION_PROC_ATTRS,
@@ -616,7 +616,7 @@ XMLTransformerActionInit const aEventActionTable[] =
 {
     ENTRY0( XLINK, HREF, XML_ATACTION_HREF ),
     ENTRY1( SCRIPT, LANGUAGE, XML_ATACTION_REMOVE_NAMESPACE_PREFIX,
-                    XML_NAMESPACE_OOO ),
+                    XmlNamespace::OOO ),
     ENTRY0( SCRIPT, EVENT_NAME, XML_ATACTION_EVENT_NAME ),
     ENTRY0( SCRIPT, MACRO_NAME, XML_ATACTION_MACRO_NAME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
@@ -638,7 +638,7 @@ XMLTransformerActionInit const aMasterPageActionTable[] =
     ENTRY1( STYLE, NEXT_STYLE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
                  XML_FAMILY_TYPE_MASTER_PAGE ),
     ENTRY1Q( STYLE, PAGE_LAYOUT_NAME, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_STYLE, XML_PAGE_MASTER_NAME ),
+                        XmlNamespace::STYLE, XML_PAGE_MASTER_NAME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -696,9 +696,9 @@ XMLTransformerActionInit const aTableStyleRefActionTable[] =
 XMLTransformerActionInit const aFontFaceActionTable[] =
 {
     ENTRY1Q( SVG, FONT_FAMILY, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_FO, XML_FONT_FAMILY ),
+                        XmlNamespace::FO, XML_FONT_FAMILY ),
     ENTRY1Q( STYLE, FONT_ADORNMENTS, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_STYLE, XML_FONT_STYLE_NAME ),
+                        XmlNamespace::STYLE, XML_FONT_STYLE_NAME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -710,7 +710,7 @@ XMLTransformerActionInit const aParaActionTable[] =
     ENTRY1( TEXT, COND_STYLE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
                 XML_FAMILY_TYPE_PARAGRAPH ),
     ENTRY1Q( TEXT, OUTLINE_LEVEL, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TEXT, XML_LEVEL ),
+                        XmlNamespace::TEXT, XML_LEVEL ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -750,7 +750,7 @@ XMLTransformerActionInit const aShapeActionTable[] =
     ENTRY0( DR3D, DISTANCE, XML_ATACTION_IN2INCH ),
     ENTRY0( DR3D, FOCAL_LENGTH, XML_ATACTION_IN2INCH ),
     ENTRY1Q( DRAW, CONTROL, XML_ATACTION_RENAME,
-                    XML_NAMESPACE_FORM, XML_ID ),
+                    XmlNamespace::FORM, XML_ID ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OASIS, sal_uInt32(true) ),
 
     // needed by chart:legend.  The legend needs also the draw actions.  As
@@ -797,7 +797,7 @@ XMLTransformerActionInit const aConnectorActionTable[] =
     ENTRY0( FO, MAX_HEIGHT, XML_ATACTION_IN2INCH ),
     ENTRY0( DRAW, LINE_SKEW, XML_ATACTION_INS2INCHS ),
     ENTRY1Q( DRAW, CONTROL, XML_ATACTION_RENAME,
-                    XML_NAMESPACE_FORM, XML_ID ),
+                    XmlNamespace::FORM, XML_ID ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OASIS, sal_uInt32(true) ),
     ENTRY0( DRAW, START_SHAPE, XML_ATACTION_DECODE_ID ),
     ENTRY0( DRAW, END_SHAPE, XML_ATACTION_DECODE_ID ),
@@ -819,7 +819,7 @@ XMLTransformerActionInit const aTabStopActionTable[] =
 {
     ENTRY0( STYLE, POSITION, XML_ATACTION_IN2INCH ),
     ENTRY1Q( STYLE, LEADER_TEXT, XML_ATACTION_RENAME,
-                  XML_NAMESPACE_STYLE, XML_LEADER_CHAR ),
+                  XmlNamespace::STYLE, XML_LEADER_CHAR ),
     ENTRY0( STYLE, LEADER_STYLE, XML_ATACTION_REMOVE ),
     ENTRY0( STYLE, LEADER_TYPE, XML_ATACTION_REMOVE ),
     ENTRY0( STYLE, LEADER_WIDTH, XML_ATACTION_REMOVE ),
@@ -835,7 +835,7 @@ XMLTransformerActionInit const aLineNumberingActionTable[] =
     ENTRY1( TEXT, STYLE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
                 XML_FAMILY_TYPE_TEXT ),
     ENTRY1Q( TEXT, COUNT_IN_TEXT_BOXES , XML_ATACTION_RENAME,
-                    XML_NAMESPACE_TEXT, XML_COUNT_IN_FLOATING_FRAMES),
+                    XmlNamespace::TEXT, XML_COUNT_IN_FLOATING_FRAMES),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -877,9 +877,9 @@ XMLTransformerActionInit const aColumnsActionTable[] =
     ENTRY0( STYLE, SPACE_BEFORE, XML_ATACTION_REMOVE ),
     ENTRY0( STYLE, SPACE_AFTER, XML_ATACTION_REMOVE ),
     ENTRY1Q( FO, START_INDENT, XML_ATACTION_RENAME_IN2INCH,
-           XML_NAMESPACE_FO, XML_MARGIN_LEFT ),
+           XmlNamespace::FO, XML_MARGIN_LEFT ),
     ENTRY1Q( FO, END_INDENT, XML_ATACTION_RENAME_IN2INCH,
-           XML_NAMESPACE_FO, XML_MARGIN_RIGHT ),
+           XmlNamespace::FO, XML_MARGIN_RIGHT ),
     ENTRY0( STYLE, WIDTH, XML_ATACTION_IN2INCH ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -888,19 +888,19 @@ XMLTransformerActionInit const aColumnsActionTable[] =
 XMLTransformerActionInit const aTextValueTypeActionTable[] =
 {
     ENTRY1Q( OFFICE, VALUE_TYPE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TEXT, XML_VALUE_TYPE ),
+           XmlNamespace::TEXT, XML_VALUE_TYPE ),
     ENTRY1Q( OFFICE, VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TEXT, XML_VALUE ),
+           XmlNamespace::TEXT, XML_VALUE ),
     ENTRY1Q( OFFICE, CURRENCY, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TEXT, XML_CURRENCY ),
+           XmlNamespace::TEXT, XML_CURRENCY ),
     ENTRY1Q( OFFICE, DATE_VALUE, XML_ATACTION_RENAME_RNG2ISO_DATETIME,
-           XML_NAMESPACE_TEXT, XML_DATE_VALUE ),
+           XmlNamespace::TEXT, XML_DATE_VALUE ),
     ENTRY1Q( OFFICE, TIME_VALUE, XML_ATACTION_RENAME_RNG2ISO_DATETIME,
-           XML_NAMESPACE_TEXT, XML_TIME_VALUE ),
+           XmlNamespace::TEXT, XML_TIME_VALUE ),
     ENTRY1Q( OFFICE, BOOLEAN_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TEXT, XML_BOOLEAN_VALUE ),
+           XmlNamespace::TEXT, XML_BOOLEAN_VALUE ),
     ENTRY1Q( OFFICE, STRING_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TEXT, XML_STRING_VALUE ),
+           XmlNamespace::TEXT, XML_STRING_VALUE ),
     ENTRY0( TEXT, FORMULA, XML_ATACTION_REMOVE_ANY_NAMESPACE_PREFIX ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -909,24 +909,24 @@ XMLTransformerActionInit const aTextValueTypeActionTable[] =
 XMLTransformerActionInit const aTableValueTypeActionTable[] =
 {
     ENTRY1Q( OFFICE, VALUE_TYPE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TABLE, XML_VALUE_TYPE ),
+           XmlNamespace::TABLE, XML_VALUE_TYPE ),
     ENTRY1Q( OFFICE, VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TABLE, XML_VALUE ),
+           XmlNamespace::TABLE, XML_VALUE ),
     ENTRY1Q( OFFICE, CURRENCY, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TABLE, XML_CURRENCY ),
+           XmlNamespace::TABLE, XML_CURRENCY ),
     ENTRY1Q( OFFICE, DATE_VALUE, XML_ATACTION_RENAME_RNG2ISO_DATETIME,
-           XML_NAMESPACE_TABLE, XML_DATE_VALUE ),
+           XmlNamespace::TABLE, XML_DATE_VALUE ),
     ENTRY1Q( OFFICE, TIME_VALUE, XML_ATACTION_RENAME_RNG2ISO_DATETIME,
-           XML_NAMESPACE_TABLE, XML_TIME_VALUE ),
+           XmlNamespace::TABLE, XML_TIME_VALUE ),
     ENTRY1Q( OFFICE, BOOLEAN_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TABLE, XML_BOOLEAN_VALUE ),
+           XmlNamespace::TABLE, XML_BOOLEAN_VALUE ),
     ENTRY1Q( OFFICE, STRING_VALUE, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TABLE, XML_STRING_VALUE ),
+           XmlNamespace::TABLE, XML_STRING_VALUE ),
     ENTRY1( TABLE, STYLE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
                 XML_FAMILY_TYPE_TABLE_CELL ),
     ENTRY0( TABLE, FORMULA, XML_ATACTION_REMOVE_ANY_NAMESPACE_PREFIX ),
     ENTRY1Q( TABLE, CONTENT_VALIDATION_NAME, XML_ATACTION_RENAME,
-           XML_NAMESPACE_TABLE, XML_VALIDATION_NAME ),
+           XmlNamespace::TABLE, XML_VALIDATION_NAME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -934,11 +934,11 @@ XMLTransformerActionInit const aTableValueTypeActionTable[] =
 XMLTransformerActionInit const aAnnotationActionTable[] =
 {
     ENTRY1Q( DC, CREATOR, XML_ETACTION_MOVE_TO_ATTR,
-                XML_NAMESPACE_OFFICE, XML_AUTHOR ),
+                XmlNamespace::OFFICE, XML_AUTHOR ),
     ENTRY1Q( DC, DATE, XML_ETACTION_MOVE_TO_ATTR_RNG2ISO_DATETIME,
-                XML_NAMESPACE_OFFICE, XML_CREATE_DATE ),
+                XmlNamespace::OFFICE, XML_CREATE_DATE ),
     ENTRY1Q( META, DATE_STRING, XML_ETACTION_MOVE_TO_ATTR,
-                XML_NAMESPACE_OFFICE, XML_CREATE_DATE_STRING ),
+                XmlNamespace::OFFICE, XML_CREATE_DATE_STRING ),
     ENTRY0( TEXT, P, XML_ETACTION_EXTRACT_CHARACTERS ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ETACTION_EOT )
 };
@@ -947,9 +947,9 @@ XMLTransformerActionInit const aAnnotationActionTable[] =
 XMLTransformerActionInit const aChangeInfoActionTable[] =
 {
     ENTRY1Q( DC, CREATOR, XML_ETACTION_MOVE_TO_ATTR,
-                XML_NAMESPACE_OFFICE, XML_CHG_AUTHOR ),
+                XmlNamespace::OFFICE, XML_CHG_AUTHOR ),
     ENTRY1Q( DC, DATE, XML_ETACTION_MOVE_TO_ATTR_RNG2ISO_DATETIME,
-                XML_NAMESPACE_OFFICE, XML_CHG_DATE_TIME ),
+                XmlNamespace::OFFICE, XML_CHG_DATE_TIME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ETACTION_EOT )
 };
 
@@ -957,7 +957,7 @@ XMLTransformerActionInit const aChangeInfoActionTable[] =
 XMLTransformerActionInit const aBackgroundImageActionTable[] =
 {
     ENTRY1Q( DRAW, OPACITY, XML_ATACTION_RENAME_NEG_PERCENT,
-                     XML_NAMESPACE_DRAW, XML_TRANSPARENCY ),
+                     XmlNamespace::DRAW, XML_TRANSPARENCY ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OASIS, sal_uInt32(true) ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -966,7 +966,7 @@ XMLTransformerActionInit const aBackgroundImageActionTable[] =
 XMLTransformerActionInit const aDDEConnectionDeclActionTable[] =
 {
     ENTRY1Q( OFFICE, NAME, XML_ATACTION_RENAME,
-                     XML_NAMESPACE_TEXT, XML_NAME ),
+                     XmlNamespace::TEXT, XML_NAME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -976,8 +976,8 @@ XMLTransformerActionInit const aFormControlActionTable[] =
     ENTRY0( FORM, NAME, XML_ATACTION_MOVE_TO_ELEM ),
     ENTRY2QN( FORM, CONTROL_IMPLEMENTATION,
                     XML_ATACTION_RENAME_REMOVE_NAMESPACE_PREFIX,
-                       XML_NAMESPACE_FORM, XML_SERVICE_NAME,
-                    XML_NAMESPACE_OOO ),
+                       XmlNamespace::FORM, XML_SERVICE_NAME,
+                    XmlNamespace::OOO ),
     ENTRY0( FORM, ID, XML_ATACTION_MOVE_TO_ELEM ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OASIS, sal_uInt32(false) ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
@@ -987,11 +987,11 @@ XMLTransformerActionInit const aFormControlActionTable[] =
 XMLTransformerActionInit const aFormColumnActionTable[] =
 {
     ENTRY1Q( FORM, TEXT_STYLE_NAME, XML_ATACTION_RENAME_DECODE_STYLE_NAME_REF,
-                        XML_NAMESPACE_FORM, XML_COLUMN_STYLE_NAME ),
+                        XmlNamespace::FORM, XML_COLUMN_STYLE_NAME ),
     ENTRY2QN( FORM, CONTROL_IMPLEMENTATION,
                     XML_ATACTION_RENAME_REMOVE_NAMESPACE_PREFIX,
-                       XML_NAMESPACE_FORM, XML_SERVICE_NAME,
-                    XML_NAMESPACE_OOO ),
+                       XmlNamespace::FORM, XML_SERVICE_NAME,
+                    XmlNamespace::OOO ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -999,7 +999,7 @@ XMLTransformerActionInit const aFormColumnActionTable[] =
 XMLTransformerActionInit const aFormPropActionTable[] =
 {
     ENTRY1Q( OFFICE, VALUE_TYPE, XML_ATACTION_RENAME,
-                          XML_NAMESPACE_FORM, XML_PROPERTY_TYPE ),
+                          XmlNamespace::FORM, XML_PROPERTY_TYPE ),
     ENTRY0( OFFICE, VALUE, XML_ATACTION_REMOVE ),
     ENTRY0( OFFICE, STRING_VALUE, XML_ATACTION_REMOVE ),
     ENTRY0( OFFICE, BOOLEAN_VALUE, XML_ATACTION_REMOVE ),
@@ -1021,7 +1021,7 @@ XMLTransformerActionInit const aXLinkActionTable[] =
 XMLTransformerActionInit const aConfigItemSetActionTable[] =
 {
     ENTRY1( CONFIG, NAME, XML_ATACTION_REMOVE_NAMESPACE_PREFIX,
-                    XML_NAMESPACE_OOO ),
+                    XmlNamespace::OOO ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1047,7 +1047,7 @@ XMLTransformerActionInit const aContentValidationActionTable[] =
 XMLTransformerActionInit const aDDEConvModeActionTable[] =
 {
     ENTRY1Q( TABLE, KEEP_TEXT, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TABLE, XML_LET_TEXT ),
+                        XmlNamespace::TABLE, XML_LET_TEXT ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1055,7 +1055,7 @@ XMLTransformerActionInit const aDDEConvModeActionTable[] =
 XMLTransformerActionInit const aDataPilotMemberActionTable[] =
 {
     ENTRY1Q( TABLE, SHOW_DETAILS, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TABLE, XML_DISPLAY_DETAILS ),
+                        XmlNamespace::TABLE, XML_DISPLAY_DETAILS ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1063,7 +1063,7 @@ XMLTransformerActionInit const aDataPilotMemberActionTable[] =
 XMLTransformerActionInit const aDataPilotLevelActionTable[] =
 {
     ENTRY1Q( TABLE, SHOW_EMPTY, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TABLE, XML_DISPLAY_EMPTY ),
+                        XmlNamespace::TABLE, XML_DISPLAY_EMPTY ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1071,7 +1071,7 @@ XMLTransformerActionInit const aDataPilotLevelActionTable[] =
 XMLTransformerActionInit const aSourceServiceActionTable[] =
 {
     ENTRY1Q( TABLE, USER_NAME, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TABLE, XML_USERNAME ),
+                        XmlNamespace::TABLE, XML_USERNAME ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1091,8 +1091,8 @@ XMLTransformerActionInit const aFormActionTable[] =
 {
     ENTRY2QN( FORM, CONTROL_IMPLEMENTATION,
                     XML_ATACTION_RENAME_REMOVE_NAMESPACE_PREFIX,
-                       XML_NAMESPACE_FORM, XML_SERVICE_NAME,
-                    XML_NAMESPACE_OOO ),
+                       XmlNamespace::FORM, XML_SERVICE_NAME,
+                    XmlNamespace::OOO ),
     ENTRY1( XLINK, HREF, XML_ATACTION_URI_OASIS, sal_uInt32(false) ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
@@ -1101,7 +1101,7 @@ XMLTransformerActionInit const aFormActionTable[] =
 XMLTransformerActionInit const aAlphabeticalIndexMarkActionTable[] =
 {
     ENTRY1Q( TEXT, MAIN_ENTRY, XML_ATACTION_RENAME,
-                        XML_NAMESPACE_TEXT, XML_MAIN_ETRY ),
+                        XmlNamespace::TEXT, XML_MAIN_ETRY ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1109,16 +1109,16 @@ XMLTransformerActionInit const aAlphabeticalIndexMarkActionTable[] =
 XMLTransformerActionInit const aDrawAreaPolygonActionTable[] =
 {
     ENTRY1Q( DRAW, POINTS, XML_ATACTION_RENAME,
-             XML_NAMESPACE_SVG, XML_POINTS ),
+             XmlNamespace::SVG, XML_POINTS ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
 // OASIS_SCRIPT_ACTIONS
 XMLTransformerActionInit const aScriptActionTable[] =
 {
-    ENTRY1( SCRIPT, LANGUAGE, XML_ATACTION_REMOVE_NAMESPACE_PREFIX, XML_NAMESPACE_OOO ),
-    ENTRY1Q( OOO, NAME, XML_ATACTION_RENAME, XML_NAMESPACE_SCRIPT, XML_NAME ),
-    ENTRY1Q( OOO, READONLY, XML_ATACTION_RENAME, XML_NAMESPACE_SCRIPT, XML_READONLY ),
+    ENTRY1( SCRIPT, LANGUAGE, XML_ATACTION_REMOVE_NAMESPACE_PREFIX, XmlNamespace::OOO ),
+    ENTRY1Q( OOO, NAME, XML_ATACTION_RENAME, XmlNamespace::SCRIPT, XML_NAME ),
+    ENTRY1Q( OOO, READONLY, XML_ATACTION_RENAME, XmlNamespace::SCRIPT, XML_READONLY ),
     ENTRY0( OFFICE, TOKEN_INVALID, XML_ATACTION_EOT )
 };
 
@@ -1187,7 +1187,7 @@ void XMLTableTransformerContext_Impl::StartElement(
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                  &aLocalName );
-        if( XML_NAMESPACE_TABLE == nPrefix )
+        if( XmlNamespace::TABLE == nPrefix )
         {
             if ( IsXMLToken( aLocalName, XML_IS_SUB_TABLE ) )
             {
@@ -1195,7 +1195,7 @@ void XMLTableTransformerContext_Impl::StartElement(
                 if( IsXMLToken( rValue, XML_TRUE ) )
                 {
                     m_aElemQName = GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_TABLE,
+                                XmlNamespace::TABLE,
                                 ::xmloff::token::GetXMLToken( XML_SUB_TABLE ) );
                     if ( !pMutableAttrList )
                     {
@@ -1408,7 +1408,7 @@ void XMLTabStopOASISTContext_Impl::StartElement(
         {
             OUString aNewAttrQName(
                 GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_STYLE,
+                            XmlNamespace::STYLE,
                             ::xmloff::token::GetXMLToken( XML_LEADER_CHAR ) ) );
             pMutableAttrList->AddAttribute( aNewAttrQName,
                                     OUString( cStyleLeaderChar ) );
@@ -1465,7 +1465,7 @@ void XMLConfigItemTContext_Impl::StartElement(
         sal_uInt16 nPrefix =
             GetTransformer().GetNamespaceMap().GetKeyByAttrName( rAttrName,
                                                                  &aLocalName );
-        if( XML_NAMESPACE_CONFIG == nPrefix )
+        if( XmlNamespace::CONFIG == nPrefix )
         {
             if ( IsXMLToken( aLocalName, XML_NAME ) )
             {
@@ -1625,7 +1625,7 @@ XMLTransformerContext *Oasis2OOoTransformer::CreateUserDefinedContext(
         {
             const XMLTransformerContext *pCurrent = GetCurrentContext();
             return new XMLControlOASISTransformerContext( *this, rQName,
-                        pCurrent && pCurrent->HasQName( XML_NAMESPACE_FORM,
+                        pCurrent && pCurrent->HasQName( XmlNamespace::FORM,
                                            XML_FORM ) );
         }
     case XML_ETACTION_FORM_PROPERTY:
@@ -1883,53 +1883,53 @@ Oasis2OOoTransformer::Oasis2OOoTransformer() throw() :
     m_pEventMap( nullptr ),
     m_pFormEventMap( nullptr )
 {
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XML_NAMESPACE_OFFICE );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE_OOO), XML_NAMESPACE_OFFICE );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE), XmlNamespace::OFFICE );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_OFFICE), GetXMLToken(XML_N_OFFICE_OOO), XmlNamespace::OFFICE );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META), XML_NAMESPACE_META );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META_OOO), XML_NAMESPACE_META );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META), XmlNamespace::META );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_META), GetXMLToken(XML_N_META_OOO), XmlNamespace::META );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XML_NAMESPACE_STYLE );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE_OOO), XML_NAMESPACE_STYLE );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE), XmlNamespace::STYLE );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_STYLE), GetXMLToken(XML_N_STYLE_OOO), XmlNamespace::STYLE );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER), XML_NAMESPACE_NUMBER );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER_OOO), XML_NAMESPACE_NUMBER );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER), XmlNamespace::NUMBER );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_NUMBER), GetXMLToken(XML_N_NUMBER_OOO), XmlNamespace::NUMBER );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XML_NAMESPACE_CONFIG );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG_OOO), XML_NAMESPACE_CONFIG );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG), XmlNamespace::CONFIG );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_CONFIG), GetXMLToken(XML_N_CONFIG_OOO), XmlNamespace::CONFIG );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT), XML_NAMESPACE_TEXT );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT_OOO), XML_NAMESPACE_TEXT );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT), XmlNamespace::TEXT );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_TEXT), GetXMLToken(XML_N_TEXT_OOO), XmlNamespace::TEXT );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE), XML_NAMESPACE_TABLE );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE_OOO), XML_NAMESPACE_TABLE );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE), XmlNamespace::TABLE );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_TABLE), GetXMLToken(XML_N_TABLE_OOO), XmlNamespace::TABLE );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XML_NAMESPACE_DRAW );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW_OOO), XML_NAMESPACE_DRAW );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW), XmlNamespace::DRAW );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DRAW), GetXMLToken(XML_N_DRAW_OOO), XmlNamespace::DRAW );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_DR3D), GetXMLToken(XML_N_DR3D), XML_NAMESPACE_DR3D );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DR3D), GetXMLToken(XML_N_DR3D_OOO), XML_NAMESPACE_DR3D );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_DR3D), GetXMLToken(XML_N_DR3D), XmlNamespace::DR3D );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DR3D), GetXMLToken(XML_N_DR3D_OOO), XmlNamespace::DR3D );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_PRESENTATION), GetXMLToken(XML_N_PRESENTATION), XML_NAMESPACE_PRESENTATION );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_PRESENTATION), GetXMLToken(XML_N_PRESENTATION_OOO), XML_NAMESPACE_PRESENTATION );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_PRESENTATION), GetXMLToken(XML_N_PRESENTATION), XmlNamespace::PRESENTATION );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_PRESENTATION), GetXMLToken(XML_N_PRESENTATION_OOO), XmlNamespace::PRESENTATION );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART), XML_NAMESPACE_CHART );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART_OOO), XML_NAMESPACE_CHART );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART), XmlNamespace::CHART );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_CHART), GetXMLToken(XML_N_CHART_OOO), XmlNamespace::CHART );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM), XML_NAMESPACE_FORM );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM_OOO), XML_NAMESPACE_FORM );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM), XmlNamespace::FORM );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_FORM), GetXMLToken(XML_N_FORM_OOO), XmlNamespace::FORM );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT), XML_NAMESPACE_SCRIPT );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT_OOO), XML_NAMESPACE_SCRIPT );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT), XmlNamespace::SCRIPT );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_SCRIPT), GetXMLToken(XML_N_SCRIPT_OOO), XmlNamespace::SCRIPT );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_DLG), GetXMLToken(XML_N_DLG), XML_NAMESPACE_DLG );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DLG), GetXMLToken(XML_N_DLG), XML_NAMESPACE_DLG );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_DLG), GetXMLToken(XML_N_DLG), XmlNamespace::DLG );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_DLG), GetXMLToken(XML_N_DLG), XmlNamespace::DLG );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XML_NAMESPACE_FO );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO), XML_NAMESPACE_FO );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO_COMPAT), XmlNamespace::FO );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_FO), GetXMLToken(XML_N_FO), XmlNamespace::FO );
 
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG_COMPAT), XML_NAMESPACE_SVG );
-    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG),  XML_NAMESPACE_SVG );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG_COMPAT), XmlNamespace::SVG );
+    GetReplaceNamespaceMap().Add( GetXMLToken(XML_NP_SVG), GetXMLToken(XML_N_SVG),  XmlNamespace::SVG );
 
     for(auto & rp : m_aActions)
         rp.reset();
diff --git a/xmloff/source/transform/PropertyActionsOASIS.cxx b/xmloff/source/transform/PropertyActionsOASIS.cxx
index 2afab0cc570e..d3383f648560 100644
--- a/xmloff/source/transform/PropertyActionsOASIS.cxx
+++ b/xmloff/source/transform/PropertyActionsOASIS.cxx
@@ -27,519 +27,519 @@ using namespace ::xmloff::token;
 
 XMLTransformerActionInit const aGraphicPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_SVG, XML_STROKE_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::SVG, XML_STROKE_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_MARKER_START_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_MARKER_START_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_MARKER_END_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_MARKER_END_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHADOW_OFFSET_X, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_SHADOW_OFFSET_X, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHADOW_OFFSET_Y, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_SHADOW_OFFSET_Y, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHADOW_OPACITY,
+    { XmlNamespace::DRAW, XML_SHADOW_OPACITY,
                 XML_ATACTION_RENAME_NEG_PERCENT,
-                XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+                XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_SHADOW_TRANSPARENCY), 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_GUIDE_OVERHANG, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_GUIDE_OVERHANG, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_START_GUIDE, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_START_GUIDE, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_END_GUIDE, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_END_GUIDE, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_ESCAPE, XML_ATACTION_CAPTION_ESCAPE_OASIS,
+    { XmlNamespace::DRAW, XML_CAPTION_ESCAPE, XML_ATACTION_CAPTION_ESCAPE_OASIS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_LINE_LENGTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_CAPTION_LINE_LENGTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_DEPTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DR3D, XML_DEPTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::SVG, XML_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::SVG, XML_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MAX_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MAX_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MAX_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MAX_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
           NO_PARAMS },
-    { XML_NAMESPACE_FO, XML_CLIP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_CLIP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-//  { XML_NAMESPACE_STYLE, XML_WRAP_DYNAMIC_TRESHOLD, XML_ATACTION_REMOVE,
+//  { XmlNamespace::STYLE, XML_WRAP_DYNAMIC_TRESHOLD, XML_ATACTION_REMOVE,
 //      NO_PARAMS }, /* generated entry */ // TODO
-    { XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_VISIBLE_AREA_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_VISIBLE_AREA_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_VISIBLE_AREA_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_VISIBLE_AREA_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_START_LINE_SPACING_HORIZONTAL, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_START_LINE_SPACING_VERTICAL, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_END_LINE_SPACING_HORIZONTAL, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_END_LINE_SPACING_VERTICAL, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_LINE_DISTANCE, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_GUIDE_DISTANCE, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_GAP, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_X, XML_ATACTION_IN2INCH,
+    { XmlNamespace::DRAW, XML_START_LINE_SPACING_HORIZONTAL, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_START_LINE_SPACING_VERTICAL, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_END_LINE_SPACING_HORIZONTAL, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_END_LINE_SPACING_VERTICAL, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_LINE_DISTANCE, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_GUIDE_DISTANCE, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_CAPTION_GAP, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::SVG, XML_X, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_Y, XML_ATACTION_IN2INCH,
+    { XmlNamespace::SVG, XML_Y, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_STROKE_DASH, XML_ATACTION_DECODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_STROKE_DASH, XML_ATACTION_DECODE_STYLE_NAME_REF,
         XML_FAMILY_TYPE_STROKE_DASH, 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_MARKER_START, XML_ATACTION_DECODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_MARKER_START, XML_ATACTION_DECODE_STYLE_NAME_REF,
         XML_FAMILY_TYPE_MARKER, 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_MARKER_END, XML_ATACTION_DECODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_MARKER_END, XML_ATACTION_DECODE_STYLE_NAME_REF,
         XML_FAMILY_TYPE_MARKER, 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_FILL_GRADIENT_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL_GRADIENT_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
         XML_FAMILY_TYPE_GRADIENT, 0, 0 },
 
     // #i25616#
-    { XML_NAMESPACE_DRAW, XML_OPACITY, XML_OPTACTION_OPACITY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_IMAGE_OPACITY, XML_OPTACTION_IMAGE_OPACITY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_OPACITY, XML_OPTACTION_OPACITY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_IMAGE_OPACITY, XML_OPTACTION_IMAGE_OPACITY, NO_PARAMS },
 
-    { XML_NAMESPACE_DRAW, XML_STROKE_LINEJOIN, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_SVG,
+    { XmlNamespace::DRAW, XML_STROKE_LINEJOIN, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::SVG,
                                                  XML_STROKE_LINEJOIN), 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_OPACITY_NAME,
+    { XmlNamespace::DRAW, XML_OPACITY_NAME,
                 XML_ATACTION_RENAME_DECODE_STYLE_NAME_REF,
-                XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+                XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_TRANSPARENCY_NAME),
                 XML_FAMILY_TYPE_GRADIENT, 0 },
-    { XML_NAMESPACE_DRAW, XML_FILL_HATCH_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL_HATCH_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
         XML_FAMILY_TYPE_HATCH, 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
         XML_FAMILY_TYPE_FILL_IMAGE, 0, 0 },
 
     // Font work properties
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_DISTANCE, XML_ATACTION_IN2INCH, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_START, XML_ATACTION_IN2INCH, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_OFFSET_X, XML_ATACTION_IN2INCH, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_OFFSET_Y, XML_ATACTION_IN2INCH, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_DISTANCE, XML_ATACTION_IN2INCH, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_START, XML_ATACTION_IN2INCH, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_SHADOW_OFFSET_X, XML_ATACTION_IN2INCH, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_SHADOW_OFFSET_Y, XML_ATACTION_IN2INCH, NO_PARAMS },
 
-    { XML_NAMESPACE_DRAW, XML_AUTO_GROW_WIDTH, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+    { XmlNamespace::DRAW, XML_AUTO_GROW_WIDTH, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_AUTO_GROW_HEIGHT   ), 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_AUTO_GROW_HEIGHT, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+    { XmlNamespace::DRAW, XML_AUTO_GROW_HEIGHT, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_AUTO_GROW_WIDTH    ), 0, 0 },
-    { XML_NAMESPACE_PRESENTATION, XML_DURATION, XML_ATACTION_RNG2ISO_DATETIME, NO_PARAMS },
-    { XML_NAMESPACE_TEXT, XML_ANIMATION_DELAY, XML_ATACTION_RNG2ISO_DATETIME, NO_PARAMS },
+    { XmlNamespace::PRESENTATION, XML_DURATION, XML_ATACTION_RNG2ISO_DATETIME, NO_PARAMS },
+    { XmlNamespace::TEXT, XML_ANIMATION_DELAY, XML_ATACTION_RNG2ISO_DATETIME, NO_PARAMS },
 
-    { XML_NAMESPACE_STYLE, XML_PROTECT, XML_ATACTION_DECODE_PROTECT, NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_MIRROR, XML_ATACTION_DRAW_MIRROR_OASIS, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_GAMMA, XML_ATACTION_GAMMA_OASIS, NO_PARAMS },
-    { XML_NAMESPACE_SVG, XML_STROKE_OPACITY, XML_ATACTION_OPACITY_FIX, NO_PARAMS },
+    { XmlNamespace::STYLE, XML_PROTECT, XML_ATACTION_DECODE_PROTECT, NO_PARAMS },
+    { XmlNamespace::STYLE, XML_MIRROR, XML_ATACTION_DRAW_MIRROR_OASIS, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_GAMMA, XML_ATACTION_GAMMA_OASIS, NO_PARAMS },
+    { XmlNamespace::SVG, XML_STROKE_OPACITY, XML_ATACTION_OPACITY_FIX, NO_PARAMS },
 
-    { XML_NAMESPACE_STYLE, XML_FLOW_WITH_TEXT, XML_ATACTION_REMOVE,
+    { XmlNamespace::STYLE, XML_FLOW_WITH_TEXT, XML_ATACTION_REMOVE,
         NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_WRAP_INFLUENCE_ON_POSITION, XML_ATACTION_REMOVE,
+    { XmlNamespace::DRAW, XML_WRAP_INFLUENCE_ON_POSITION, XML_ATACTION_REMOVE,
         NO_PARAMS },
 
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aDrawingPagePropertyOASISAttrActionTable[] =
 {
     // style-graphic-fill-properties-attlist
-    { XML_NAMESPACE_DRAW, XML_FILL_GRADIENT_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL_GRADIENT_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
         NO_PARAMS  },
-    { XML_NAMESPACE_DRAW, XML_FILL_HATCH_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL_HATCH_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF,
         NO_PARAMS  },
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT, XML_ATACTION_IN2INCH, NO_PARAMS }, /* generated entry */
 
-    { XML_NAMESPACE_PRESENTATION, XML_DISPLAY_HEADER, XML_ATACTION_REMOVE, NO_PARAMS },
-    { XML_NAMESPACE_PRESENTATION, XML_DISPLAY_FOOTER, XML_ATACTION_REMOVE, NO_PARAMS },
-    { XML_NAMESPACE_PRESENTATION, XML_DISPLAY_PAGE_NUMBER, XML_ATACTION_REMOVE, NO_PARAMS },
-    { XML_NAMESPACE_PRESENTATION, XML_DISPLAY_DATE_TIME, XML_ATACTION_REMOVE, NO_PARAMS },
+    { XmlNamespace::PRESENTATION, XML_DISPLAY_HEADER, XML_ATACTION_REMOVE, NO_PARAMS },
+    { XmlNamespace::PRESENTATION, XML_DISPLAY_FOOTER, XML_ATACTION_REMOVE, NO_PARAMS },
+    { XmlNamespace::PRESENTATION, XML_DISPLAY_PAGE_NUMBER, XML_ATACTION_REMOVE, NO_PARAMS },
+    { XmlNamespace::PRESENTATION, XML_DISPLAY_DATE_TIME, XML_ATACTION_REMOVE, NO_PARAMS },
 
-    { XML_NAMESPACE_SMIL, XML_TYPE, XML_ATACTION_REMOVE, NO_PARAMS },
-    { XML_NAMESPACE_SMIL, XML_SUBTYPE, XML_ATACTION_REMOVE, NO_PARAMS },
-    { XML_NAMESPACE_SMIL, XML_DIRECTION, XML_ATACTION_REMOVE, NO_PARAMS },
-    { XML_NAMESPACE_SMIL, XML_FADECOLOR, XML_ATACTION_REMOVE, NO_PARAMS },
+    { XmlNamespace::SMIL, XML_TYPE, XML_ATACTION_REMOVE, NO_PARAMS },
+    { XmlNamespace::SMIL, XML_SUBTYPE, XML_ATACTION_REMOVE, NO_PARAMS },
+    { XmlNamespace::SMIL, XML_DIRECTION, XML_ATACTION_REMOVE, NO_PARAMS },
+    { XmlNamespace::SMIL, XML_FADECOLOR, XML_ATACTION_REMOVE, NO_PARAMS },
 
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aPageLayoutPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_PAGE_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PAGE_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PAGE_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PAGE_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
           NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_FOOTNOTE_MAX_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_FOOTNOTE_MAX_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_BASE_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_LAYOUT_GRID_BASE_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_RUBY_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_LAYOUT_GRID_RUBY_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_REGISTER_TRUTH_REF_STYLE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF, XML_FAMILY_TYPE_PARAGRAPH, 0, 0 },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::STYLE, XML_REGISTER_TRUTH_REF_STYLE_NAME, XML_ATACTION_DECODE_STYLE_NAME_REF, XML_FAMILY_TYPE_PARAGRAPH, 0, 0 },
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aHeaderFooterPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_SVG, XML_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::SVG, XML_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MIN_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MIN_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
           NO_PARAMS },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTextPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_FONT_SIZE, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_FONT_SIZE, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_ASIAN, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_ASIAN, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_COMPLEX, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_COMPLEX, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_REL, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_REL, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_REL_ASIAN, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_REL_ASIAN, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_REL_COMPLEX, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_REL_COMPLEX, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_LETTER_SPACING, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_LETTER_SPACING, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_TEXT_SHADOW, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_TEXT_SHADOW, XML_ATACTION_INS2INCHS,
           NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_TEXT_UNDERLINE_TYPE,
+    { XmlNamespace::STYLE, XML_TEXT_UNDERLINE_TYPE,
         XML_OPTACTION_UNDERLINE_TYPE, NO_PARAMS }, /* new attribute */
-    { XML_NAMESPACE_STYLE, XML_TEXT_UNDERLINE_STYLE,
+    { XmlNamespace::STYLE, XML_TEXT_UNDERLINE_STYLE,
         XML_OPTACTION_UNDERLINE_STYLE, NO_PARAMS }, /* new attribute */
-    { XML_NAMESPACE_STYLE, XML_TEXT_UNDERLINE_WIDTH,
+    { XmlNamespace::STYLE, XML_TEXT_UNDERLINE_WIDTH,
         XML_OPTACTION_UNDERLINE_WIDTH, NO_PARAMS }, /* new attribute */
-    { XML_NAMESPACE_STYLE, XML_TEXT_UNDERLINE_MODE,
+    { XmlNamespace::STYLE, XML_TEXT_UNDERLINE_MODE,
         XML_OPTACTION_LINE_MODE, NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_TEXT_LINE_THROUGH_TYPE,
+    { XmlNamespace::STYLE, XML_TEXT_LINE_THROUGH_TYPE,
         XML_OPTACTION_LINETHROUGH_TYPE, NO_PARAMS }, /* new entry*/
-    { XML_NAMESPACE_STYLE, XML_TEXT_LINE_THROUGH_STYLE,
+    { XmlNamespace::STYLE, XML_TEXT_LINE_THROUGH_STYLE,
         XML_OPTACTION_LINETHROUGH_STYLE, NO_PARAMS }, /* new entry*/
-    { XML_NAMESPACE_STYLE, XML_TEXT_LINE_THROUGH_WIDTH,
+    { XmlNamespace::STYLE, XML_TEXT_LINE_THROUGH_WIDTH,
         XML_OPTACTION_LINETHROUGH_WIDTH, NO_PARAMS }, /* new entry*/
-    { XML_NAMESPACE_STYLE, XML_TEXT_LINE_THROUGH_COLOR,
+    { XmlNamespace::STYLE, XML_TEXT_LINE_THROUGH_COLOR,
         XML_ATACTION_REMOVE, NO_PARAMS }, /* new entry*/
-    { XML_NAMESPACE_STYLE, XML_TEXT_LINE_THROUGH_TEXT,
+    { XmlNamespace::STYLE, XML_TEXT_LINE_THROUGH_TEXT,
         XML_OPTACTION_LINETHROUGH_TEXT, NO_PARAMS }, /* new entry*/
-    { XML_NAMESPACE_STYLE, XML_TEXT_LINE_THROUGH_TEXT_STYLE,
+    { XmlNamespace::STYLE, XML_TEXT_LINE_THROUGH_TEXT_STYLE,
         XML_ATACTION_REMOVE, NO_PARAMS }, /* new entry*/
-    { XML_NAMESPACE_STYLE, XML_TEXT_LINE_THROUGH_MODE,
+    { XmlNamespace::STYLE, XML_TEXT_LINE_THROUGH_MODE,
         XML_OPTACTION_LINE_MODE, NO_PARAMS },
-    { XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_STYLE,
+    { XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::STYLE,
                                                  XML_TEXT_BACKGROUND_COLOR  ), 0, 0 },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aParagraphPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_TEXT_ALIGN, XML_OPTACTION_CONTROL_TEXT_ALIGN,
+    { XmlNamespace::FO, XML_TEXT_ALIGN, XML_OPTACTION_CONTROL_TEXT_ALIGN,
         NO_PARAMS },
-    { XML_NAMESPACE_FO, XML_LINE_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_LINE_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LINE_HEIGHT_AT_LEAST, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_LINE_HEIGHT_AT_LEAST, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LINE_SPACING, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_LINE_SPACING, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TAB_STOP_DISTANCE, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_TAB_STOP_DISTANCE, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_TEXT_INDENT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_TEXT_INDENT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
           NO_PARAMS },
-    { XML_NAMESPACE_FO, XML_KEEP_WITH_NEXT, XML_OPTACTION_KEEP_WITH_NEXT,
+    { XmlNamespace::FO, XML_KEEP_WITH_NEXT, XML_OPTACTION_KEEP_WITH_NEXT,
           NO_PARAMS },
-    { XML_NAMESPACE_FO, XML_KEEP_TOGETHER, XML_OPTACTION_KEEP_TOGETHER,
+    { XmlNamespace::FO, XML_KEEP_TOGETHER, XML_OPTACTION_KEEP_TOGETHER,
         NO_PARAMS },
-//  { XML_NAMESPACE_STYLE, XML_WRITING_MODE, XML_OPTACTION_DRAW_WRITING_MODE, 0 },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+//  { XmlNamespace::STYLE, XML_WRITING_MODE, XML_OPTACTION_DRAW_WRITING_MODE, 0 },
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aSectionPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTablePropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_KEEP_WITH_NEXT, XML_OPTACTION_KEEP_WITH_NEXT,
+    { XmlNamespace::FO, XML_KEEP_WITH_NEXT, XML_OPTACTION_KEEP_WITH_NEXT,
           NO_PARAMS },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTableColumnPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_COLUMN_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_COLUMN_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTableRowPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_ROW_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_ROW_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_MIN_ROW_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::STYLE, XML_MIN_ROW_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTableCellPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_VERTICAL_ALIGN, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_FO,
+    { XmlNamespace::STYLE, XML_VERTICAL_ALIGN, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::FO,
                                                  XML_VERTICAL_ALIGN ), 0, 0 },
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIAGONAL_BL_TR, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_DIAGONAL_BL_TR, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIAGONAL_BL_TR_WIDTH, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_DIAGONAL_BL_TR_WIDTH, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIAGONAL_TL_BR, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_DIAGONAL_TL_BR, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIAGONAL_TL_BR_WIDTH, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_DIAGONAL_TL_BR_WIDTH, XML_ATACTION_INS2INCHS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIRECTION, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_FO,
+    { XmlNamespace::STYLE, XML_DIRECTION, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::FO,
                                                  XML_DIRECTION), 0, 0 },
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INS2INCHS,
           NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_REPEAT_CONTENT, XML_ATACTION_REMOVE,
+    { XmlNamespace::STYLE, XML_REPEAT_CONTENT, XML_ATACTION_REMOVE,
         NO_PARAMS }, /* new entry*/
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aListLevelPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_TEXT, XML_SPACE_BEFORE, XML_ATACTION_IN2INCH,
+    { XmlNamespace::TEXT, XML_SPACE_BEFORE, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_MIN_LABEL_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::TEXT, XML_MIN_LABEL_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_MIN_LABEL_DISTANCE, XML_ATACTION_IN2INCH,
+    { XmlNamespace::TEXT, XML_MIN_LABEL_DISTANCE, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::FO, XML_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aChartPropertyOASISAttrActionTable[] =
 {
-    { XML_NAMESPACE_CHART, XML_SYMBOL_WIDTH, XML_ATACTION_IN2INCH,
+    { XmlNamespace::CHART, XML_SYMBOL_WIDTH, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_SYMBOL_HEIGHT, XML_ATACTION_IN2INCH,
+    { XmlNamespace::CHART, XML_SYMBOL_HEIGHT, XML_ATACTION_IN2INCH,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIRECTION, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_FO,
+    { XmlNamespace::STYLE, XML_DIRECTION, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::FO,
                                                  XML_DIRECTION ), 0, 0 },
-    { XML_NAMESPACE_CHART, XML_INTERPOLATION, XML_OPTACTION_INTERPOLATION, NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_ROTATION_ANGLE, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_TEXT,
+    { XmlNamespace::CHART, XML_INTERPOLATION, XML_OPTACTION_INTERPOLATION, NO_PARAMS },
+    { XmlNamespace::STYLE, XML_ROTATION_ANGLE, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::TEXT,
                                                  XML_ROTATION_ANGLE ), 0, 0 },
-    { XML_NAMESPACE_CHART, XML_INTERVAL_MAJOR, XML_OPTACTION_INTERVAL_MAJOR, NO_PARAMS },
-    { XML_NAMESPACE_CHART, XML_INTERVAL_MINOR_DIVISOR, XML_OPTACTION_INTERVAL_MINOR_DIVISOR,
+    { XmlNamespace::CHART, XML_INTERVAL_MAJOR, XML_OPTACTION_INTERVAL_MAJOR, NO_PARAMS },
+    { XmlNamespace::CHART, XML_INTERVAL_MINOR_DIVISOR, XML_OPTACTION_INTERVAL_MINOR_DIVISOR,
       NO_PARAMS },
-     { XML_NAMESPACE_CHART, XML_JAPANESE_CANDLE_STICK, XML_ATACTION_RENAME,
-      XMLTransformerActionInit::QNameParam( XML_NAMESPACE_CHART,
+     { XmlNamespace::CHART, XML_JAPANESE_CANDLE_STICK, XML_ATACTION_RENAME,
+      XMLTransformerActionInit::QNameParam( XmlNamespace::CHART,
                                             XML_STOCK_UPDOWN_BARS ), 0, 0 },
-    { XML_NAMESPACE_CHART, XML_SYMBOL_TYPE, XML_OPTACTION_SYMBOL_TYPE, NO_PARAMS },
-    { XML_NAMESPACE_CHART, XML_SYMBOL_NAME, XML_OPTACTION_SYMBOL_NAME, NO_PARAMS },
+    { XmlNamespace::CHART, XML_SYMBOL_TYPE, XML_OPTACTION_SYMBOL_TYPE, NO_PARAMS },
+    { XmlNamespace::CHART, XML_SYMBOL_NAME, XML_OPTACTION_SYMBOL_NAME, NO_PARAMS },
 
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/xmloff/source/transform/PropertyActionsOOo.cxx b/xmloff/source/transform/PropertyActionsOOo.cxx
index 4771e2c4bd7c..d2cb1abb2705 100644
--- a/xmloff/source/transform/PropertyActionsOOo.cxx
+++ b/xmloff/source/transform/PropertyActionsOOo.cxx
@@ -27,1032 +27,1032 @@ using namespace ::xmloff::token;
 
 XMLTransformerActionInit const aGraphicPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_DRAW, XML_STROKE, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_STROKE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_STROKE_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::SVG, XML_STROKE_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_STROKE_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::SVG, XML_STROKE_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_MARKER_START_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_MARKER_START_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_MARKER_END_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_MARKER_END_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_MARKER_START_CENTER, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_MARKER_START_CENTER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_MARKER_END_CENTER, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_MARKER_END_CENTER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_STROKE_OPACITY, XML_ATACTION_OPACITY_FIX,
+    { XmlNamespace::SVG, XML_STROKE_OPACITY, XML_ATACTION_OPACITY_FIX,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_STROKE_LINEJOIN, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+    { XmlNamespace::SVG, XML_STROKE_LINEJOIN, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_STROKE_LINEJOIN), 0, 0 },
-    { XML_NAMESPACE_TEXT, XML_ANIMATION, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANIMATION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ANIMATION_DIRECTION, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANIMATION_DIRECTION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ANIMATION_START_INSIDE, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANIMATION_START_INSIDE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ANIMATION_STOP_INSIDE, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANIMATION_STOP_INSIDE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ANIMATION_REPEAT, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANIMATION_REPEAT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ANIMATION_DELAY, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANIMATION_DELAY, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ANIMATION_STEPS, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANIMATION_STEPS, XML_ATACTION_COPY,
           NO_PARAMS }, /* TODO: missing in OASIS spec */
-    { XML_NAMESPACE_DRAW, XML_AUTO_GROW_WIDTH, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+    { XmlNamespace::DRAW, XML_AUTO_GROW_WIDTH, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_AUTO_GROW_HEIGHT   ), 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_AUTO_GROW_HEIGHT, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+    { XmlNamespace::DRAW, XML_AUTO_GROW_HEIGHT, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_AUTO_GROW_WIDTH    ), 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_FIT_TO_SIZE, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_FIT_TO_SIZE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_TEXTAREA_VERTICAL_ALIGN, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_TEXTAREA_VERTICAL_ALIGN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_TEXTAREA_HORIZONTAL_ALIGN, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_TEXTAREA_HORIZONTAL_ALIGN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_COLOR_MODE, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_COLOR_MODE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_COLOR_INVERSION, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_COLOR_INVERSION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_LUMINANCE, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_LUMINANCE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CONTRAST, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_CONTRAST, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_GAMMA, XML_ATACTION_GAMMA_OOO,
+    { XmlNamespace::DRAW, XML_GAMMA, XML_ATACTION_GAMMA_OOO,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_RED, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_RED, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_GREEN, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_GREEN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_BLUE, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_BLUE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHADOW, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_SHADOW, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHADOW_OFFSET_X, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_SHADOW_OFFSET_X, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHADOW_OFFSET_Y, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_SHADOW_OFFSET_Y, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHADOW_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_SHADOW_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHADOW_TRANSPARENCY,
+    { XmlNamespace::DRAW, XML_SHADOW_TRANSPARENCY,
                 XML_ATACTION_RENAME_NEG_PERCENT,
-                XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+                XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_SHADOW_OPACITY), 0, 0 },
-    { XML_NAMESPACE_DRAW, XML_START_LINE_SPACING_HORIZONTAL, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_START_LINE_SPACING_HORIZONTAL, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_START_LINE_SPACING_VERTICAL, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_START_LINE_SPACING_VERTICAL, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_END_LINE_SPACING_HORIZONTAL, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_END_LINE_SPACING_HORIZONTAL, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_END_LINE_SPACING_VERTICAL, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_END_LINE_SPACING_VERTICAL, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_LINE_DISTANCE, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_LINE_DISTANCE, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_GUIDE_OVERHANG, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_GUIDE_OVERHANG, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_GUIDE_DISTANCE, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_GUIDE_DISTANCE, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_START_GUIDE, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_START_GUIDE, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_END_GUIDE, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_END_GUIDE, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_PLACING, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_PLACING, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_PARALLEL, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_PARALLEL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_MEASURE_ALIGN, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_MEASURE_ALIGN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_MEASURE_VERTICAL_ALIGN, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_MEASURE_VERTICAL_ALIGN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_UNIT, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_UNIT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_SHOW_UNIT, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_SHOW_UNIT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_DECIMAL_PLACES, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_DECIMAL_PLACES, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_TYPE, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_CAPTION_TYPE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_ANGLE_TYPE, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_CAPTION_ANGLE_TYPE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_ANGLE, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_CAPTION_ANGLE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_GAP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_CAPTION_GAP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_ESCAPE_DIRECTION, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_CAPTION_ESCAPE_DIRECTION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_ESCAPE, XML_ATACTION_CAPTION_ESCAPE_OOO,
+    { XmlNamespace::DRAW, XML_CAPTION_ESCAPE, XML_ATACTION_CAPTION_ESCAPE_OOO,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_LINE_LENGTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_CAPTION_LINE_LENGTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_CAPTION_FIT_LINE_LENGTH, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_CAPTION_FIT_LINE_LENGTH, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_HORIZONTAL_SEGMENTS, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_HORIZONTAL_SEGMENTS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_VERTICAL_SEGMENTS, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_VERTICAL_SEGMENTS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_EDGE_ROUNDING, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_EDGE_ROUNDING, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-//  { XML_NAMESPACE_DR3D, XML_EDGE_ROUNDING_MODE, XML_ATACTION_COPY,
+//  { XmlNamespace::DR3D, XML_EDGE_ROUNDING_MODE, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* TODO: does not exist! */
-    { XML_NAMESPACE_DR3D, XML_BACK_SCALE, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_BACK_SCALE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_DEPTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DR3D, XML_DEPTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_BACKFACE_CULLING, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_BACKFACE_CULLING, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_LIGHTING_MODE, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_LIGHTING_MODE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_NORMALS_KIND, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_NORMALS_KIND, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_NORMALS_DIRECTION, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_NORMALS_DIRECTION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_TEX_GENERATION_MODE_X, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_TEX_GENERATION_MODE_X, XML_ATACTION_COPY,
           NO_PARAMS },
-    { XML_NAMESPACE_DR3D, XML_TEX_GENERATION_MODE_Y, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_TEX_GENERATION_MODE_Y, XML_ATACTION_COPY,
           NO_PARAMS },
-    { XML_NAMESPACE_DR3D, XML_END_ANGLE, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_END_ANGLE, XML_ATACTION_COPY,
         NO_PARAMS },
-    { XML_NAMESPACE_DR3D, XML_TEX_KIND, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_TEX_KIND, XML_ATACTION_COPY,
           NO_PARAMS },
-    { XML_NAMESPACE_DR3D, XML_TEX_FILTER, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_TEX_FILTER, XML_ATACTION_COPY,
           NO_PARAMS },
-    { XML_NAMESPACE_DR3D, XML_TEX_MODE, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_TEX_MODE, XML_ATACTION_COPY,
           NO_PARAMS },
-    { XML_NAMESPACE_DR3D, XML_AMBIENT_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_AMBIENT_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_EMISSIVE_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_EMISSIVE_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_SPECULAR_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_SPECULAR_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_DIFFUSE_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_DIFFUSE_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_SHININESS, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_SHININESS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DR3D, XML_SHADOW, XML_ATACTION_COPY,
+    { XmlNamespace::DR3D, XML_SHADOW, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::SVG, XML_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::SVG, XML_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_REL_WIDTH, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_REL_WIDTH, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_REL_HEIGHT, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_REL_HEIGHT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MIN_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MIN_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MIN_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MIN_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MAX_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MAX_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MAX_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MAX_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN_DUPLICATE,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN_DUPLICATE,
           XML_PROP_TYPE_PARAGRAPH, 0, 0 }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN_DUPLICATE,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN_DUPLICATE,
           XML_PROP_TYPE_PARAGRAPH, 0, 0 }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN_DUPLICATE,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN_DUPLICATE,
           XML_PROP_TYPE_PARAGRAPH, 0, 0 }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN_DUPLICATE,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN_DUPLICATE,
           XML_PROP_TYPE_PARAGRAPH, 0, 0 }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BACKGROUND_TRANSPARENCY, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_BACKGROUND_TRANSPARENCY, XML_ATACTION_COPY,
           NO_PARAMS },
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
           NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_PRINT_CONTENT, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_PRINT_CONTENT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_PROTECT, XML_ATACTION_PROTECT,
+    { XmlNamespace::STYLE, XML_PROTECT, XML_ATACTION_PROTECT,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_HORIZONTAL_POS, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_HORIZONTAL_POS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_X, XML_ATACTION_INCH2IN,
+    { XmlNamespace::SVG, XML_X, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_HORIZONTAL_REL, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_HORIZONTAL_REL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_VERTICAL_POS, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_VERTICAL_POS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_SVG, XML_Y, XML_ATACTION_INCH2IN,
+    { XmlNamespace::SVG, XML_Y, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_VERTICAL_REL, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_VERTICAL_REL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ANCHOR_TYPE, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANCHOR_TYPE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ANCHOR_PAGE_NUMBER, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ANCHOR_PAGE_NUMBER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_EDITABLE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_EDITABLE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_WRAP, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_WRAP, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-//  { XML_NAMESPACE_STYLE, XML_WRAP_DYNAMIC_TRESHOLD, XML_ATACTION_COPY,
+//  { XmlNamespace::STYLE, XML_WRAP_DYNAMIC_TRESHOLD, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute */
-    { XML_NAMESPACE_STYLE, XML_NUMBER_WRAPPED_PARAGRAPHS, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_NUMBER_WRAPPED_PARAGRAPHS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_WRAP_CONTOUR, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_WRAP_CONTOUR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_WRAP_CONTOUR_MODE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_WRAP_CONTOUR_MODE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_RUN_THROUGH, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_RUN_THROUGH, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FLOW_WITH_TEXT, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FLOW_WITH_TEXT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-//  { XML_NAMESPACE_STYLE, XML_OVERFLOW_BEHAVIOR, XML_ATACTION_COPY,
+//  { XmlNamespace::STYLE, XML_OVERFLOW_BEHAVIOR, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute */
     /* Rename attribute values of <style:mirror>: (#i49139#)
          horizontal-on-left-pages --> horizontal-on-even
          horizontal-on-right-pages --> horizontal-on-odd
     */
-    { XML_NAMESPACE_STYLE, XML_MIRROR, XML_ATACTION_STYLE_MIRROR_OOO,
+    { XmlNamespace::STYLE, XML_MIRROR, XML_ATACTION_STYLE_MIRROR_OOO,
         NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_CLIP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_CLIP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FRAME_DISPLAY_SCROLLBAR, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_FRAME_DISPLAY_SCROLLBAR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FRAME_DISPLAY_BORDER, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_FRAME_DISPLAY_BORDER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FRAME_MARGIN_HORIZONTAL, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_FRAME_MARGIN_HORIZONTAL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FRAME_MARGIN_VERTICAL, XML_ATACTION_COPY,
+    { XmlNamespace::DRAW, XML_FRAME_MARGIN_VERTICAL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_VISIBLE_AREA_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_VISIBLE_AREA_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_VISIBLE_AREA_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_VISIBLE_AREA_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::DRAW, XML_VISIBLE_AREA_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_STROKE_DASH, XML_ATACTION_ENCODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_STROKE_DASH, XML_ATACTION_ENCODE_STYLE_NAME_REF,
         NO_PARAMS  },
-    { XML_NAMESPACE_DRAW, XML_MARKER_START, XML_ATACTION_ENCODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_MARKER_START, XML_ATACTION_ENCODE_STYLE_NAME_REF,
         NO_PARAMS  },
-    { XML_NAMESPACE_DRAW, XML_MARKER_END, XML_ATACTION_ENCODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_MARKER_END, XML_ATACTION_ENCODE_STYLE_NAME_REF,
         NO_PARAMS  },
     // style-graphic-fill-properties-attlist
-    { XML_NAMESPACE_DRAW, XML_FILL, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_COLOR, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_GRADIENT_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_COLOR, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_GRADIENT_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
         NO_PARAMS  },
-    { XML_NAMESPACE_DRAW, XML_GRADIENT_STEP_COUNT, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_HATCH_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_HATCH_SOLID, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_GRADIENT_STEP_COUNT, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_HATCH_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_HATCH_SOLID, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
         NO_PARAMS  },
-    { XML_NAMESPACE_STYLE, XML_REPEAT, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH, XML_ATACTION_INCH2IN, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT, XML_ATACTION_INCH2IN, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_REF_POINT, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_TILE_REPEAT_OFFSET, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::STYLE, XML_REPEAT, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH, XML_ATACTION_INCH2IN, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT, XML_ATACTION_INCH2IN, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_X, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT_Y, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_REF_POINT, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_TILE_REPEAT_OFFSET, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
 
     // #i25616#
-    { XML_NAMESPACE_DRAW, XML_TRANSPARENCY, XML_PTACTION_TRANSPARENCY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_TRANSPARENCY, XML_PTACTION_TRANSPARENCY, NO_PARAMS },
 
-    { XML_NAMESPACE_DRAW, XML_TRANSPARENCY_NAME,
+    { XmlNamespace::DRAW, XML_TRANSPARENCY_NAME,
                 XML_ATACTION_RENAME_ENCODE_STYLE_NAME_REF,
-                XMLTransformerActionInit::QNameParam( XML_NAMESPACE_DRAW,
+                XMLTransformerActionInit::QNameParam( XmlNamespace::DRAW,
                                                  XML_OPACITY_NAME), 0, 0 },
 
-    { XML_NAMESPACE_DRAW, XML_MOVE_PROTECT, XML_ATACTION_MOVE_PROTECT, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_SIZE_PROTECT, XML_ATACTION_SIZE_PROTECT, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FIT_TO_CONTOUR, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_MOVE_PROTECT, XML_ATACTION_MOVE_PROTECT, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_SIZE_PROTECT, XML_ATACTION_SIZE_PROTECT, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FIT_TO_CONTOUR, XML_ATACTION_COPY, NO_PARAMS },
 
     // Font work properties
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_STYLE, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_ADJUST, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_DISTANCE, XML_ATACTION_INCH2IN, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_START, XML_ATACTION_INCH2IN, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_MIRROR, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_OUTLINE, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_COLOR, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_OFFSET_X, XML_ATACTION_INCH2IN, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_OFFSET_Y, XML_ATACTION_INCH2IN, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_FORM, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_HIDE_FORM, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_DRAW, XML_FONTWORK_SHADOW_TRANSPARENCE, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_STYLE, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_ADJUST, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_DISTANCE, XML_ATACTION_INCH2IN, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_START, XML_ATACTION_INCH2IN, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_MIRROR, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_OUTLINE, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_SHADOW, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_SHADOW_COLOR, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_SHADOW_OFFSET_X, XML_ATACTION_INCH2IN, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_SHADOW_OFFSET_Y, XML_ATACTION_INCH2IN, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_FORM, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_HIDE_FORM, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::DRAW, XML_FONTWORK_SHADOW_TRANSPARENCE, XML_ATACTION_COPY, NO_PARAMS },
 
-    { XML_NAMESPACE_DRAW, XML_WRAP_INFLUENCE_ON_POSITION, XML_ATACTION_COPY, NO_PARAMS }, // new in OOo 2.0
+    { XmlNamespace::DRAW, XML_WRAP_INFLUENCE_ON_POSITION, XML_ATACTION_COPY, NO_PARAMS }, // new in OOo 2.0
 
-    { XML_NAMESPACE_DRAW, XML_MIRROR, XML_ATACTION_DRAW_MIRROR_OOO,
+    { XmlNamespace::DRAW, XML_MIRROR, XML_ATACTION_DRAW_MIRROR_OOO,
         NO_PARAMS }, /* generated entry */
 
     // b6242385: read writing-mode for text frames
-    { XML_NAMESPACE_STYLE, XML_WRITING_MODE, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::STYLE, XML_WRITING_MODE, XML_ATACTION_COPY, NO_PARAMS },
 
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aGraphicPropertyOOoElemActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_BACKGROUND_IMAGE, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_COLUMNS, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_LIST_STYLE, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::STYLE, XML_BACKGROUND_IMAGE, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::STYLE, XML_COLUMNS, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::TEXT, XML_LIST_STYLE, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aDrawingPagePropertyOOoAttrActionTable[] =
 {
     // style-graphic-fill-properties-attlist
-    { XML_NAMESPACE_DRAW, XML_FILL_GRADIENT_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL_GRADIENT_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
         NO_PARAMS  },
-    { XML_NAMESPACE_DRAW, XML_FILL_HATCH_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_HATCH_SOLID, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL_HATCH_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_HATCH_SOLID, XML_ATACTION_COPY, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
         NO_PARAMS  },
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_WIDTH, XML_ATACTION_INCH2IN, NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_FILL_IMAGE_HEIGHT, XML_ATACTION_INCH2IN, NO_PARAMS }, /* generated entry */
-//  { XML_NAMESPACE_DRAW, XML_OPACITY_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_WIDTH, XML_ATACTION_INCH2IN, NO_PARAMS }, /* generated entry */
+    { XmlNamespace::DRAW, XML_FILL_IMAGE_HEIGHT, XML_ATACTION_INCH2IN, NO_PARAMS }, /* generated entry */
+//  { XmlNamespace::DRAW, XML_OPACITY_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF,
 //      NO_PARAMS  },
 
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aPageLayoutPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_PAGE_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PAGE_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PAGE_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PAGE_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
           NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_FOOTNOTE_MAX_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_FOOTNOTE_MAX_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_BASE_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_LAYOUT_GRID_BASE_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LAYOUT_GRID_RUBY_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_LAYOUT_GRID_RUBY_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_REGISTER_TRUTH_REF_STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF, NO_PARAMS },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::STYLE, XML_REGISTER_TRUTH_REF_STYLE_NAME, XML_ATACTION_ENCODE_STYLE_NAME_REF, NO_PARAMS },
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aHeaderFooterPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_SVG, XML_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::SVG, XML_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MIN_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MIN_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
           NO_PARAMS },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTextPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_FONT_VARIANT, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_FONT_VARIANT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_TEXT_TRANSFORM, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_TEXT_TRANSFORM, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_USE_WINDOW_FONT_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_USE_WINDOW_FONT_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_OUTLINE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_OUTLINE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_CROSSING_OUT, XML_PTACTION_LINETHROUGH,
+    { XmlNamespace::STYLE, XML_TEXT_CROSSING_OUT, XML_PTACTION_LINETHROUGH,
           NO_PARAMS }, /* TODO: rename */
-    { XML_NAMESPACE_STYLE, XML_TEXT_POSITION, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_POSITION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_NAME, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_NAME, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_NAME_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_NAME_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_NAME_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_NAME_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_FONT_FAMILY, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_FONT_FAMILY, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_FAMILY_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_FAMILY_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_FAMILY_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_FAMILY_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_FAMILY_GENERIC, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_FAMILY_GENERIC, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_FAMILY_GENERIC_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_FAMILY_GENERIC_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_FAMILY_GENERIC_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_FAMILY_GENERIC_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_STYLE_NAME, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_STYLE_NAME, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_STYLE_NAME_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_STYLE_NAME_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_STYLE_NAME_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_STYLE_NAME_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_PITCH, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_PITCH, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_PITCH_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_PITCH_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_PITCH_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_PITCH_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_CHARSET, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_CHARSET, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_FONT_SIZE, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_FONT_SIZE, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_ASIAN, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_ASIAN, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_COMPLEX, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_COMPLEX, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_REL, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_REL, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_REL_ASIAN, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_REL_ASIAN, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_SIZE_REL_COMPLEX, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_FONT_SIZE_REL_COMPLEX, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-//  { XML_NAMESPACE_STYLE, XML_SCRIPT_TYPE, XML_ATACTION_COPY,
+//  { XmlNamespace::STYLE, XML_SCRIPT_TYPE, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute*/
-    { XML_NAMESPACE_FO, XML_LETTER_SPACING, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_LETTER_SPACING, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_LANGUAGE, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_LANGUAGE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LANGUAGE_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_LANGUAGE_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LANGUAGE_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_LANGUAGE_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_COUNTRY, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_COUNTRY, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_COUNTRY_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_COUNTRY_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_COUNTRY_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_COUNTRY_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_FONT_STYLE, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_FONT_STYLE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_STYLE_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_STYLE_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_STYLE_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_STYLE_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_RELIEF, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_RELIEF, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_TEXT_SHADOW, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_TEXT_SHADOW, XML_ATACTION_INCHS2INS,
           NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_TEXT_UNDERLINE, XML_PTACTION_UNDERLINE,
+    { XmlNamespace::STYLE, XML_TEXT_UNDERLINE, XML_PTACTION_UNDERLINE,
           NO_PARAMS }, /* TODO: rename */
-    { XML_NAMESPACE_STYLE, XML_TEXT_UNDERLINE_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_UNDERLINE_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_FONT_WEIGHT, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_FONT_WEIGHT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_WEIGHT_ASIAN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_WEIGHT_ASIAN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_FONT_WEIGHT_COMPLEX, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_WEIGHT_COMPLEX, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_SCORE_SPACES,
+    { XmlNamespace::FO, XML_SCORE_SPACES,
         XML_PTACTION_LINE_MODE, NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_LETTER_KERNING, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_LETTER_KERNING, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_BLINKING, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_BLINKING, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_BACKGROUND_COLOR, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_FO,
+    { XmlNamespace::STYLE, XML_TEXT_BACKGROUND_COLOR, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::FO,
                                                  XML_BACKGROUND_COLOR   ), 0, 0 },
-    { XML_NAMESPACE_STYLE, XML_TEXT_COMBINE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_COMBINE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_COMBINE_START_CHAR, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_COMBINE_START_CHAR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_COMBINE_END_CHAR, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_COMBINE_END_CHAR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_EMPHASIZE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_EMPHASIZE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_SCALE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_SCALE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_ROTATION_ANGLE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_ROTATION_ANGLE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_ROTATION_SCALE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_ROTATION_SCALE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_DISPLAY, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_DISPLAY, XML_ATACTION_COPY,
           NO_PARAMS }, /* new in OOo 2.0 */
-    { XML_NAMESPACE_FO, XML_HYPHENATE, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_HYPHENATE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_HYPHENATION_REMAIN_CHAR_COUNT, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_HYPHENATION_REMAIN_CHAR_COUNT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_HYPHENATION_PUSH_CHAR_COUNT, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_HYPHENATION_PUSH_CHAR_COUNT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_OVERLINE_STYLE, XML_ATACTION_REMOVE,
+    { XmlNamespace::STYLE, XML_TEXT_OVERLINE_STYLE, XML_ATACTION_REMOVE,
         NO_PARAMS }, /* #i113645# */
-    { XML_NAMESPACE_STYLE, XML_TEXT_OVERLINE_COLOR, XML_ATACTION_REMOVE,
+    { XmlNamespace::STYLE, XML_TEXT_OVERLINE_COLOR, XML_ATACTION_REMOVE,
         NO_PARAMS }, /* #i113645# */
-    { XML_NAMESPACE_FO, XML_WRAP_OPTION, XML_ATACTION_REMOVE,
+    { XmlNamespace::FO, XML_WRAP_OPTION, XML_ATACTION_REMOVE,
         NO_PARAMS }, /* #i116555# */
 
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTextPropertyOOoElemActionTable[] =
 {
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 
 XMLTransformerActionInit const aParagraphPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_LINE_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_LINE_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LINE_HEIGHT_AT_LEAST, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_LINE_HEIGHT_AT_LEAST, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LINE_SPACING, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_LINE_SPACING, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_TEXT_ALIGN, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_TEXT_ALIGN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_TEXT_ALIGN_LAST, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_TEXT_ALIGN_LAST, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_ALIGN, XML_ATACTION_RENAME,
-          XMLTransformerActionInit::QNameParam( XML_NAMESPACE_FO, XML_TEXT_ALIGN ), 0, 0 },
-    { XML_NAMESPACE_STYLE, XML_JUSTIFY_SINGLE_WORD, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_ALIGN, XML_ATACTION_RENAME,
+          XMLTransformerActionInit::QNameParam( XmlNamespace::FO, XML_TEXT_ALIGN ), 0, 0 },
+    { XmlNamespace::STYLE, XML_JUSTIFY_SINGLE_WORD, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BREAK_INSIDE, XML_PTACTION_BREAK_INSIDE,
+    { XmlNamespace::STYLE, XML_BREAK_INSIDE, XML_PTACTION_BREAK_INSIDE,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_WIDOWS, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_WIDOWS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_ORPHANS, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_ORPHANS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TAB_STOP_DISTANCE, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_TAB_STOP_DISTANCE, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_HYPHENATION_KEEP, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_HYPHENATION_KEEP, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_HYPHENATION_LADDER_COUNT, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_HYPHENATION_LADDER_COUNT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_REGISTER_TRUE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_REGISTER_TRUE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_TEXT_INDENT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_TEXT_INDENT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_AUTO_TEXT_INDENT, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_AUTO_TEXT_INDENT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BREAK_BEFORE, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_BREAK_BEFORE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BREAK_AFTER, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_BREAK_AFTER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
           NO_PARAMS },
-    { XML_NAMESPACE_FO, XML_KEEP_WITH_NEXT, XML_PTACTION_KEEP_WITH_NEXT,
+    { XmlNamespace::FO, XML_KEEP_WITH_NEXT, XML_PTACTION_KEEP_WITH_NEXT,
           NO_PARAMS },
-    { XML_NAMESPACE_TEXT, XML_NUMBER_LINES, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_NUMBER_LINES, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_LINE_NUMBER, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_LINE_NUMBER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_VERTICAL_ALIGN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_VERTICAL_ALIGN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_WRITING_MODE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_WRITING_MODE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_DRAW, XML_WRITING_MODE, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_STYLE,
+    { XmlNamespace::DRAW, XML_WRITING_MODE, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::STYLE,
                                                  XML_WRITING_MODE ), 0, 0 },
-//  { XML_NAMESPACE_STYLE, XML_WRITING_MODE_AUTOMATIC, XML_ATACTION_COPY,
+//  { XmlNamespace::STYLE, XML_WRITING_MODE_AUTOMATIC, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute */
-    { XML_NAMESPACE_STYLE, XML_SNAP_TO_LAYOUT_GRID, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_SNAP_TO_LAYOUT_GRID, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_PAGE_NUMBER, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_PAGE_NUMBER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BACKGROUND_TRANSPARENCY, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_BACKGROUND_TRANSPARENCY, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_AUTOSPACE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_AUTOSPACE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_PUNCTUATION_WRAP, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_PUNCTUATION_WRAP, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_LINE_BREAK, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_LINE_BREAK, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_ENABLE_NUMBERING, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_ENABLE_NUMBERING, XML_ATACTION_COPY,
           NO_PARAMS }, /* TODO: undocumented*/
-    { XML_NAMESPACE_STYLE, XML_FONT_INDEPENDENT_LINE_SPACING, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_FONT_INDEPENDENT_LINE_SPACING, XML_ATACTION_COPY,
           NO_PARAMS },
-    { XML_NAMESPACE_STYLE, XML_DEFAULT_OUTLINE_LEVEL, XML_ATACTION_REMOVE,
+    { XmlNamespace::STYLE, XML_DEFAULT_OUTLINE_LEVEL, XML_ATACTION_REMOVE,
           NO_PARAMS }, /* i41811: style-default-outline was exported as property */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aParagraphPropertyOOoElemActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_TAB_STOPS, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TAB_STOPS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DROP_CAP, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_DROP_CAP, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BACKGROUND_IMAGE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_BACKGROUND_IMAGE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aSectionPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTablePropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_MARGIN_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_KEEP_WITH_NEXT, XML_PTACTION_KEEP_WITH_NEXT,
+    { XmlNamespace::FO, XML_KEEP_WITH_NEXT, XML_PTACTION_KEEP_WITH_NEXT,
           NO_PARAMS },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTableColumnPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_COLUMN_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_COLUMN_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTableRowPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_ROW_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_ROW_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_MIN_ROW_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::STYLE, XML_MIN_ROW_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTableCellPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_FO, XML_VERTICAL_ALIGN, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_STYLE,
+    { XmlNamespace::FO, XML_VERTICAL_ALIGN, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::STYLE,
                                                  XML_VERTICAL_ALIGN ), 0, 0 },
-    { XML_NAMESPACE_FO, XML_TEXT_ALIGN, XML_ATACTION_COPY_DUPLICATE,
+    { XmlNamespace::FO, XML_TEXT_ALIGN, XML_ATACTION_COPY_DUPLICATE,
           XML_PROP_TYPE_PARAGRAPH, 0, 0 }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_TEXT_ALIGN_SOURCE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_TEXT_ALIGN_SOURCE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_DIRECTION, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_STYLE,
+    { XmlNamespace::FO, XML_DIRECTION, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::STYLE,
                                                  XML_DIRECTION), 0, 0 },
-    { XML_NAMESPACE_STYLE, XML_GLYPH_ORIENTATION_VERTICAL, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_GLYPH_ORIENTATION_VERTICAL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_SHADOW, XML_ATACTION_INCHS2INS,
           NO_PARAMS },
-    { XML_NAMESPACE_FO, XML_BACKGROUND_COLOR, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_BACKGROUND_COLOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::FO, XML_BORDER_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_TOP, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_BOTTOM, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_LEFT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_BORDER_LINE_WIDTH_RIGHT, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIAGONAL_BL_TR, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_DIAGONAL_BL_TR, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIAGONAL_BL_TR_WIDTH, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_DIAGONAL_BL_TR_WIDTH, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIAGONAL_TL_BR, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_DIAGONAL_TL_BR, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIAGONAL_TL_BR_WIDTH, XML_ATACTION_INCHS2INS,
+    { XmlNamespace::STYLE, XML_DIAGONAL_TL_BR_WIDTH, XML_ATACTION_INCHS2INS,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_TOP, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_BOTTOM, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_LEFT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_PADDING_RIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_WRAP_OPTION, XML_ATACTION_COPY,
+    { XmlNamespace::FO, XML_WRAP_OPTION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_REPEAT_CONTENT, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_REPEAT_CONTENT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_ROTATION_ANGLE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_ROTATION_ANGLE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_ROTATION_ALIGN, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_ROTATION_ALIGN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_CELL_PROTECT, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_CELL_PROTECT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_PRINT_CONTENT, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_PRINT_CONTENT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DECIMAL_PLACES, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_DECIMAL_PLACES, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aTableCellPropertyOOoElemActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_BACKGROUND_IMAGE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_BACKGROUND_IMAGE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aListLevelPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_TEXT, XML_SPACE_BEFORE, XML_ATACTION_INCH2IN,
+    { XmlNamespace::TEXT, XML_SPACE_BEFORE, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_MIN_LABEL_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::TEXT, XML_MIN_LABEL_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_MIN_LABEL_DISTANCE, XML_ATACTION_INCH2IN,
+    { XmlNamespace::TEXT, XML_MIN_LABEL_DISTANCE, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::FO, XML_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aChartPropertyOOoAttrActionTable[] =
 {
-    { XML_NAMESPACE_CHART, XML_SCALE_TEXT, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_SCALE_TEXT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_THREE_DIMENSIONAL, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_THREE_DIMENSIONAL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_DEEP, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_DEEP, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-//  { XML_NAMESPACE_CHART, XML_SYMBOL_TYPE, XML_ATACTION_COPY,
+//  { XmlNamespace::CHART, XML_SYMBOL_TYPE, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute */
-//  { XML_NAMESPACE_CHART, XML_SYMBOL_TYPE, XML_ATACTION_COPY,
+//  { XmlNamespace::CHART, XML_SYMBOL_TYPE, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute */
-//  { XML_NAMESPACE_CHART, XML_SYMBOL_TYPE, XML_ATACTION_COPY,
+//  { XmlNamespace::CHART, XML_SYMBOL_TYPE, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute */
-//  { XML_NAMESPACE_CHART, XML_SYMBOL_NAME, XML_ATACTION_COPY,
+//  { XmlNamespace::CHART, XML_SYMBOL_NAME, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute */
-//  { XML_NAMESPACE_CHART, XML_SYMBOL_TYPE, XML_ATACTION_COPY,
+//  { XmlNamespace::CHART, XML_SYMBOL_TYPE, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* new attribute */
-    { XML_NAMESPACE_XLINK, XML_HREF, XML_ATACTION_COPY,
+    { XmlNamespace::XLINK, XML_HREF, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_SYMBOL_WIDTH, XML_ATACTION_INCH2IN,
+    { XmlNamespace::CHART, XML_SYMBOL_WIDTH, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_SYMBOL_HEIGHT, XML_ATACTION_INCH2IN,
+    { XmlNamespace::CHART, XML_SYMBOL_HEIGHT, XML_ATACTION_INCH2IN,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_VERTICAL, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_VERTICAL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_CONNECT_BARS, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_CONNECT_BARS, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_GAP_WIDTH, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_GAP_WIDTH, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_OVERLAP, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_OVERLAP, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-//  { XML_NAMESPACE_CHART, XML_JAPANESE_CANDLE_STICK, XML_ATACTION_COPY,
+//  { XmlNamespace::CHART, XML_JAPANESE_CANDLE_STICK, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* TODO: renamed? */
-//  { XML_NAMESPACE_CHART, XML_INTERPOLATION, XML_ATACTION_COPY,
+//  { XmlNamespace::CHART, XML_INTERPOLATION, XML_ATACTION_COPY,
 //      NO_PARAMS }, /* TODO: renamed? */
-    { XML_NAMESPACE_CHART, XML_SPLINE_ORDER, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_SPLINE_ORDER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_SPLINE_RESOLUTION, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_SPLINE_RESOLUTION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_PIE_OFFSET, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_PIE_OFFSET, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_LINES, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_LINES, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_SOLID_TYPE, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_SOLID_TYPE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_STACKED, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_STACKED, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_PERCENTAGE, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_PERCENTAGE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_LINK_DATA_STYLE_TO_SOURCE, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_LINK_DATA_STYLE_TO_SOURCE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_VISIBLE, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_VISIBLE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_LOGARITHMIC, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_LOGARITHMIC, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_MAXIMUM, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_MAXIMUM, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_MINIMUM, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_MINIMUM, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_ORIGIN, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_ORIGIN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_TICK_MARKS_MAJOR_INNER, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_TICK_MARKS_MAJOR_INNER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_TICK_MARKS_MAJOR_OUTER, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_TICK_MARKS_MAJOR_OUTER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_TICK_MARKS_MINOR_INNER, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_TICK_MARKS_MINOR_INNER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_TICK_MARKS_MINOR_OUTER, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_TICK_MARKS_MINOR_OUTER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_DISPLAY_LABEL, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_DISPLAY_LABEL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_TEXT_OVERLAP, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_TEXT_OVERLAP, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_TEXT, XML_LINE_BREAK, XML_ATACTION_COPY,
+    { XmlNamespace::TEXT, XML_LINE_BREAK, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_LABEL_ARRANGEMENT, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_LABEL_ARRANGEMENT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_DIRECTION, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_DIRECTION, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_STYLE, XML_ROTATION_ANGLE, XML_ATACTION_COPY,
+    { XmlNamespace::STYLE, XML_ROTATION_ANGLE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_DATA_LABEL_NUMBER, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_DATA_LABEL_NUMBER, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_DATA_LABEL_TEXT, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_DATA_LABEL_TEXT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_DATA_LABEL_SYMBOL, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_DATA_LABEL_SYMBOL, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_MEAN_VALUE, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_MEAN_VALUE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_ERROR_CATEGORY, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_ERROR_CATEGORY, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_ERROR_PERCENTAGE, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_ERROR_PERCENTAGE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_ERROR_MARGIN, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_ERROR_MARGIN, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_ERROR_LOWER_LIMIT, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_ERROR_LOWER_LIMIT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_ERROR_UPPER_LIMIT, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_ERROR_UPPER_LIMIT, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_ERROR_UPPER_INDICATOR, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_ERROR_UPPER_INDICATOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_ERROR_LOWER_INDICATOR, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_ERROR_LOWER_INDICATOR, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_SERIES_SOURCE, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_SERIES_SOURCE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_CHART, XML_REGRESSION_TYPE, XML_ATACTION_COPY,
+    { XmlNamespace::CHART, XML_REGRESSION_TYPE, XML_ATACTION_COPY,
           NO_PARAMS }, /* generated entry */
-    { XML_NAMESPACE_FO, XML_DIRECTION, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_STYLE,
+    { XmlNamespace::FO, XML_DIRECTION, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::STYLE,
                                                  XML_DIRECTION ), 0, 0 },
-    { XML_NAMESPACE_CHART, XML_SPLINES, XML_PTACTION_SPLINES, NO_PARAMS },
-    { XML_NAMESPACE_TEXT, XML_ROTATION_ANGLE, XML_ATACTION_RENAME,
-        XMLTransformerActionInit::QNameParam( XML_NAMESPACE_STYLE,
+    { XmlNamespace::CHART, XML_SPLINES, XML_PTACTION_SPLINES, NO_PARAMS },
+    { XmlNamespace::TEXT, XML_ROTATION_ANGLE, XML_ATACTION_RENAME,
+        XMLTransformerActionInit::QNameParam( XmlNamespace::STYLE,
                                                  XML_ROTATION_ANGLE ), 0, 0 },
-    { XML_NAMESPACE_CHART, XML_INTERVAL_MAJOR, XML_PTACTION_INTERVAL_MAJOR, NO_PARAMS },
-    { XML_NAMESPACE_CHART, XML_INTERVAL_MINOR, XML_PTACTION_INTERVAL_MINOR, NO_PARAMS },
+    { XmlNamespace::CHART, XML_INTERVAL_MAJOR, XML_PTACTION_INTERVAL_MAJOR, NO_PARAMS },
+    { XmlNamespace::CHART, XML_INTERVAL_MINOR, XML_PTACTION_INTERVAL_MINOR, NO_PARAMS },
 
-     { XML_NAMESPACE_CHART, XML_STOCK_UPDOWN_BARS, XML_ATACTION_RENAME,
-      XMLTransformerActionInit::QNameParam( XML_NAMESPACE_CHART,
+     { XmlNamespace::CHART, XML_STOCK_UPDOWN_BARS, XML_ATACTION_RENAME,
+      XMLTransformerActionInit::QNameParam( XmlNamespace::CHART,
                                             XML_JAPANESE_CANDLE_STICK ), 0, 0 },
-    { XML_NAMESPACE_CHART, XML_SYMBOL, XML_PTACTION_SYMBOL, NO_PARAMS },
+    { XmlNamespace::CHART, XML_SYMBOL, XML_PTACTION_SYMBOL, NO_PARAMS },
 
     // note: chart:symbol-image-name was only used before 6.0 beta
-    { XML_NAMESPACE_CHART, XML_SYMBOL_IMAGE_NAME, XML_PTACTION_SYMBOL_IMAGE_NAME, NO_PARAMS },
+    { XmlNamespace::CHART, XML_SYMBOL_IMAGE_NAME, XML_PTACTION_SYMBOL_IMAGE_NAME, NO_PARAMS },
 
     // #i32368# property should no longer be used as XML-property (in OASIS
     // format), but is still ex-/imported for compatibility with the OOo file format
-     { XML_NAMESPACE_CHART, XML_LINES_USED, XML_ATACTION_COPY, NO_PARAMS },
+     { XmlNamespace::CHART, XML_LINES_USED, XML_ATACTION_COPY, NO_PARAMS },
     // #i32366# property should no longer be used as XML-property (in OASIS
     // format), but is still ex-/imported for compatibility with the OOo file format
-     { XML_NAMESPACE_CHART, XML_STOCK_WITH_VOLUME, XML_ATACTION_COPY, NO_PARAMS },
+     { XmlNamespace::CHART, XML_STOCK_WITH_VOLUME, XML_ATACTION_COPY, NO_PARAMS },
 
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 XMLTransformerActionInit const aChartPropertyOOoElemActionTable[] =
 {
-    { XML_NAMESPACE_STYLE, XML_SYMBOL_IMAGE, XML_ATACTION_COPY, NO_PARAMS },
-    { XML_NAMESPACE_OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
+    { XmlNamespace::STYLE, XML_SYMBOL_IMAGE, XML_ATACTION_COPY, NO_PARAMS },
+    { XmlNamespace::OFFICE, XML_TOKEN_INVALID, XML_ATACTION_EOT, NO_PARAMS }
 };
 
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/xmloff/source/transform/StyleOASISTContext.cxx b/xmloff/source/transform/StyleOASISTContext.cxx
index a8b7b91eb997..7d6cfbb41f63 100644
--- a/xmloff/source/transform/StyleOASISTContext.cxx
+++ b/xmloff/source/transform/StyleOASISTContext.cxx
@@ -95,7 +95,7 @@ public:
 XMLPropertiesTContext_Impl::XMLPropertiesTContext_Impl(
     XMLTransformerBase& rImp, const OUString& rQName, XMLPropType eP,
     bool _bControlStyle ) :
-    XMLPersElemContentTContext( rImp, rQName, XML_NAMESPACE_STYLE,
+    XMLPersElemContentTContext( rImp, rQName, XmlNamespace::STYLE,
                                 XML_PROPERTIES),
     m_ePropType( eP ),
     m_bControlStyle( _bControlStyle )
@@ -233,7 +233,7 @@ void XMLPropertiesTContext_Impl::StartElement(
                             IsXMLToken( rAttrValue, XML_SKIP_WHITE_SPACE );
                         OUString aAttrQName(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_FO,
+                                XmlNamespace::FO,
                                 GetXMLToken( XML_SCORE_SPACES ) ) );
                         sal_Int16 nIndex =
                             pAttrList->GetIndexByName( aAttrQName );
@@ -305,7 +305,7 @@ void XMLPropertiesTContext_Impl::StartElement(
 
                         pAttrList->AddAttribute(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_CHART,
+                                XmlNamespace::CHART,
                                 GetXMLToken( XML_SPLINES )),
                             OUString::number( nSplineType ));
                     }
@@ -333,7 +333,7 @@ void XMLPropertiesTContext_Impl::StartElement(
                         if( nSymbolType < 0 )
                             pAttrList->AddAttribute(
                                 GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                    XML_NAMESPACE_CHART,
+                                    XmlNamespace::CHART,
                                     GetXMLToken( XML_SYMBOL )),
                                 OUString::number( nSymbolType ));
                     }
@@ -377,7 +377,7 @@ void XMLPropertiesTContext_Impl::StartElement(
                         if( nSymbolType >= 0 )
                             pAttrList->AddAttribute(
                                 GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                    XML_NAMESPACE_CHART,
+                                    XmlNamespace::CHART,
                                     GetXMLToken( XML_SYMBOL )),
                                 OUString::number( nSymbolType ));
                     }
@@ -397,7 +397,7 @@ void XMLPropertiesTContext_Impl::StartElement(
                 case XML_OPTACTION_KEEP_TOGETHER:
                     pAttrList->AddAttribute(
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_STYLE,GetXMLToken(XML_BREAK_INSIDE)),
+                            XmlNamespace::STYLE,GetXMLToken(XML_BREAK_INSIDE)),
                         GetXMLToken(
                             IsXMLToken( rAttrValue, XML_ALWAYS )
                             ? XML_COLUMNSPLIT_AVOID
@@ -409,7 +409,7 @@ void XMLPropertiesTContext_Impl::StartElement(
                     {
                         OUString aNewAttrQName(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_STYLE,
+                                XmlNamespace::STYLE,
                                 ::xmloff::token::GetXMLToken(
                                 XML_TEXT_ALIGN ) ) );
                         pAttrList->AddAttribute( aNewAttrQName, rAttrValue );
@@ -418,7 +418,7 @@ void XMLPropertiesTContext_Impl::StartElement(
                     {
                         OUString aNewAttrQName(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_FO,
+                                XmlNamespace::FO,
                                 ::xmloff::token::GetXMLToken(
                                 XML_TEXT_ALIGN ) ) );
                         pAttrList->AddAttribute( aNewAttrQName, rAttrValue );
@@ -455,12 +455,12 @@ void XMLPropertiesTContext_Impl::StartElement(
 
                         if( rAttrValue.indexOf( GetXMLToken( XML_SIZE ) ) != -1 )
                             pAttrList->AddAttribute( GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                    XML_NAMESPACE_DRAW,
+                                    XmlNamespace::DRAW,
                                     GetXMLToken( XML_SIZE_PROTECT )), GetXMLToken( XML_TRUE ) );
 
                         if( rAttrValue.indexOf( GetXMLToken( XML_POSITION ) ) != -1 )
                             pAttrList->AddAttribute( GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                    XML_NAMESPACE_DRAW,
+                                    XmlNamespace::DRAW,
                                     GetXMLToken( XML_MOVE_PROTECT )), GetXMLToken( XML_TRUE ) );
                     }
                     break;
@@ -497,7 +497,7 @@ void XMLPropertiesTContext_Impl::StartElement(
                         // create old draw:mirror for drawing graphic objects
                         const OUString& aAttrValue( GetXMLToken( IsXMLToken( rAttrValue, XML_HORIZONTAL ) ? XML_TRUE : XML_FALSE ) );
                         pAttrList->AddAttribute( GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                    XML_NAMESPACE_DRAW,
+                                    XmlNamespace::DRAW,
                                     GetXMLToken( XML_MIRROR )), aAttrValue );
                     }
                     break;
@@ -540,14 +540,14 @@ void XMLPropertiesTContext_Impl::StartElement(
         if( XML_TOKEN_END != eUnderline )
             pAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_STYLE,
+                        XmlNamespace::STYLE,
                         GetXMLToken( XML_TEXT_UNDERLINE ) ),
                     MergeUnderline( eUnderline, bBoldUnderline,
                                     bDoubleUnderline ) );
         if( XML_TOKEN_END != eLineThrough )
             pAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_STYLE,
+                        XmlNamespace::STYLE,
                         GetXMLToken( XML_TEXT_CROSSING_OUT ) ),
                     MergeLineThrough( eLineThrough, bBoldLineThrough,
                                     bDoubleLineThrough, cLineThroughChar ) );
@@ -561,7 +561,7 @@ void XMLPropertiesTContext_Impl::StartElement(
             ::sax::Converter::convertDouble( aBuf, fIntervalMinor );
             pAttrList->AddAttribute(
                 GetTransformer().GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_CHART,
+                    XmlNamespace::CHART,
                     GetXMLToken( XML_INTERVAL_MINOR )),
                 aBuf.makeStringAndClear());
         }
@@ -571,7 +571,7 @@ void XMLPropertiesTContext_Impl::StartElement(
         {
             pAttrList->AddAttribute(
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_DRAW,
+                        XmlNamespace::DRAW,
                         GetXMLToken( XML_TRANSPARENCY ) ),
                     !aImageOpacityValueRemember.isEmpty()
                     ? aImageOpacityValueRemember : aOpacityValueRemember );
@@ -744,7 +744,7 @@ rtl::Reference<XMLTransformerContext> XMLStyleOASISTContext::CreateChildContext(
 {
     rtl::Reference<XMLTransformerContext> pContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix || XML_NAMESPACE_LO_EXT == nPrefix )
+    if( XmlNamespace::STYLE == nPrefix || XmlNamespace::LO_EXT == nPrefix )
     {
         XMLPropType ePropType =
             XMLPropertiesTContext_Impl::GetPropType( rLocalName );
diff --git a/xmloff/source/transform/StyleOOoTContext.cxx b/xmloff/source/transform/StyleOOoTContext.cxx
index ccf445adbe9a..ac7702c2b479 100644
--- a/xmloff/source/transform/StyleOOoTContext.cxx
+++ b/xmloff/source/transform/StyleOOoTContext.cxx
@@ -275,7 +275,7 @@ XMLTypedPropertiesOOoTContext_Impl
             new XMLTypedPropertiesOOoTContext_Impl(
                     GetTransformer(),
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_STYLE,
+                        XmlNamespace::STYLE,
                         ::xmloff::token::GetXMLToken(
                             aPropTokens[m_rPropTypes[nIndex]] ) ));
     }
@@ -320,7 +320,7 @@ XMLTypedPropertiesOOoTContext_Impl
     }
 
 #ifdef DBG_UTIL
-    if( !( XML_NAMESPACE_NONE == nPrefix ||
+    if( !( XmlNamespace::NONE == nPrefix ||
                 (XML_NAMESPACE_UNKNOWN_FLAG & nPrefix) ||
                 XML_PROP_TYPE_END==m_rPropTypes[1] ||
                 (i<MAX_PROP_TYPES && XML_PROP_TYPE_END!=m_rPropTypes[i]) ) )
@@ -341,7 +341,7 @@ XMLTypedPropertiesOOoTContext_Impl
             new XMLTypedPropertiesOOoTContext_Impl(
                     GetTransformer(),
                     GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_STYLE,
+                        XmlNamespace::STYLE,
                         ::xmloff::token::GetXMLToken(
                             aPropTokens[m_rPropTypes[nIndex]] ) ));
     }
@@ -493,13 +493,13 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
                                             : XML_SKIP_WHITE_SPACE) );
                 OUString aAttrQName(
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_STYLE,
+                            XmlNamespace::STYLE,
                             GetXMLToken( XML_TEXT_UNDERLINE_MODE ) ) );
                 pContext->AddAttribute( aAttrQName, aAttrValue );
 
                 aAttrQName =
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_STYLE,
+                            XmlNamespace::STYLE,
                             GetXMLToken( XML_TEXT_LINE_THROUGH_MODE ) );
                 pContext->AddAttribute( aAttrQName, aAttrValue );
             }
@@ -568,20 +568,20 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
                 }
                 pContext->AddAttribute(
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_STYLE,
+                            XmlNamespace::STYLE,
                             GetXMLToken( XML_TEXT_UNDERLINE_STYLE ) ),
                         eToken != XML_TOKEN_END ? GetXMLToken( eToken )
                                                    : sAttrValue );
                 if( bDouble )
                     pContext->AddAttribute(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_STYLE,
+                                XmlNamespace::STYLE,
                                 GetXMLToken( XML_TEXT_UNDERLINE_TYPE ) ),
                             GetXMLToken( XML_DOUBLE ) );
                 if( bBold )
                     pContext->AddAttribute(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_STYLE,
+                                XmlNamespace::STYLE,
                                 GetXMLToken( XML_TEXT_UNDERLINE_WIDTH ) ),
                             GetXMLToken( XML_BOLD ) );
             }
@@ -617,26 +617,26 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
                 }
                 pContext->AddAttribute(
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                            XML_NAMESPACE_STYLE,
+                            XmlNamespace::STYLE,
                             GetXMLToken( XML_TEXT_LINE_THROUGH_STYLE ) ),
                         eToken != XML_TOKEN_END ? GetXMLToken( eToken )
                                                    : sAttrValue );
                 if( bDouble )
                     pContext->AddAttribute(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_STYLE,
+                                XmlNamespace::STYLE,
                                 GetXMLToken( XML_TEXT_LINE_THROUGH_TYPE ) ),
                             GetXMLToken( XML_DOUBLE ) );
                 if( bBold )
                     pContext->AddAttribute(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_STYLE,
+                                XmlNamespace::STYLE,
                                 GetXMLToken( XML_TEXT_LINE_THROUGH_WIDTH ) ),
                             GetXMLToken( XML_BOLD ) );
                 if( c )
                     pContext->AddAttribute(
                             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_STYLE,
+                                XmlNamespace::STYLE,
                                 GetXMLToken( XML_TEXT_LINE_THROUGH_TEXT ) ),
                             OUString( c ) );
             }
@@ -645,7 +645,7 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
             {
                 sal_Int32 nSplineType = sAttrValue.toInt32();
                 OUString aNewAttrName = GetTransformer().GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_CHART, GetXMLToken( XML_INTERPOLATION ) );
+                    XmlNamespace::CHART, GetXMLToken( XML_INTERPOLATION ) );
 
                 switch( nSplineType )
                 {
@@ -685,7 +685,7 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
             {
                 sal_Int32 nSymbolType = sAttrValue.toInt32();
                 OUString aNewAttrName = GetTransformer().GetNamespaceMap().GetQNameByKey(
-                    XML_NAMESPACE_CHART, GetXMLToken( XML_SYMBOL_TYPE ) );
+                    XmlNamespace::CHART, GetXMLToken( XML_SYMBOL_TYPE ) );
 
                 if( nSymbolType >= 0 )
                 {
@@ -755,7 +755,7 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
                     if( eToken != XML_TOKEN_INVALID )
                     {
                         pContext->AddAttribute( GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                                    XML_NAMESPACE_CHART, GetXMLToken( XML_SYMBOL_NAME )),
+                                                    XmlNamespace::CHART, GetXMLToken( XML_SYMBOL_NAME )),
                                                 GetXMLToken( eToken ));
                     }
                 }
@@ -792,13 +792,13 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
                 // create an xlink:href element for URI attribute
                 XMLPersAttrListTContext *pSymbolImageContext = new XMLPersAttrListTContext(
                     GetTransformer(), GetTransformer().GetNamespaceMap().GetQNameByKey(
-                        XML_NAMESPACE_CHART, GetXMLToken( XML_SYMBOL_IMAGE )));
+                        XmlNamespace::CHART, GetXMLToken( XML_SYMBOL_IMAGE )));
                 rtl::Reference<XMLTransformerContext> xSymbolImageContext(pSymbolImageContext);
 
                 OUString aAttrValue( sAttrValue );
                 if( GetTransformer().ConvertURIToOASIS( aAttrValue, true ))
                 {
-                    pSymbolImageContext->AddAttribute( XML_NAMESPACE_XLINK, XML_HREF, aAttrValue );
+                    pSymbolImageContext->AddAttribute( XmlNamespace::XLINK, XML_HREF, aAttrValue );
                     pContext->AddContent(xSymbolImageContext);
                 }
             }
@@ -809,10 +809,10 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
             {
                 OUString aAttrValue( sAttrValue );
                 XMLTransformerBase::NegPercent(aAttrValue);
-                pContext->AddAttribute( XML_NAMESPACE_DRAW,
+                pContext->AddAttribute( XmlNamespace::DRAW,
                                         XML_OPACITY,
                                         aAttrValue );
-                pContext->AddAttribute( XML_NAMESPACE_DRAW,
+                pContext->AddAttribute( XmlNamespace::DRAW,
                                         XML_IMAGE_OPACITY,
                                         aAttrValue );
             }
@@ -821,7 +821,7 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
         case XML_PTACTION_BREAK_INSIDE:
             {
                 pContext->AddAttribute(
-                    XML_NAMESPACE_FO, XML_KEEP_TOGETHER,
+                    XmlNamespace::FO, XML_KEEP_TOGETHER,
                     GetXMLToken(
                         IsXMLToken( sAttrValue, XML_COLUMNSPLIT_AVOID )
                         ? XML_ALWAYS
@@ -942,14 +942,14 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
     {
         pMirrorContext->AddAttribute(
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_STYLE, GetXMLToken( XML_MIRROR ) ),
+                                XmlNamespace::STYLE, GetXMLToken( XML_MIRROR ) ),
                         aStyleMirrorAttrValue.makeStringAndClear());
     }
     else if ( bExistDrawMirror )
     {
         pMirrorContext->AddAttribute(
                         GetTransformer().GetNamespaceMap().GetQNameByKey(
-                                XML_NAMESPACE_STYLE, GetXMLToken( XML_MIRROR ) ),
+                                XmlNamespace::STYLE, GetXMLToken( XML_MIRROR ) ),
                         aDrawMirrorAttrValue);
     }
 
@@ -975,7 +975,7 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
         }
 
         assert(pProtectContext && "coverity[var_deref_model] - pProtectContext should be assigned in a superset of the enclosing if condition entry logic");
-        pProtectContext->AddAttribute( GetTransformer().GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_STYLE, GetXMLToken( XML_PROTECT ) ), aProtectAttrValue );
+        pProtectContext->AddAttribute( GetTransformer().GetNamespaceMap().GetQNameByKey( XmlNamespace::STYLE, GetXMLToken( XML_PROTECT ) ), aProtectAttrValue );
     }
 
     if( !pIntervalMinorDivisorContext )
@@ -988,7 +988,7 @@ void XMLPropertiesOOoTContext_Impl::StartElement(
 
         pIntervalMinorDivisorContext->AddAttribute(
             GetTransformer().GetNamespaceMap().GetQNameByKey(
-                XML_NAMESPACE_CHART,
+                XmlNamespace::CHART,
                 GetXMLToken( XML_INTERVAL_MINOR_DIVISOR )),
             OUString::number( nIntervalMinorDivisor ));
     }
@@ -1055,7 +1055,7 @@ rtl::Reference<XMLTransformerContext> XMLStyleOOoTContext::CreateChildContext(
 {
     rtl::Reference<XMLTransformerContext> pContext;
 
-    if( XML_NAMESPACE_STYLE == nPrefix &&
+    if( XmlNamespace::STYLE == nPrefix &&
         IsXMLToken( rLocalName, XML_PROPERTIES ) )
     {
         if( aPropTypes[m_eFamily][0] == XML_PROP_TYPE_END )
@@ -1082,12 +1082,12 @@ rtl::Reference<XMLTransformerContext> XMLStyleOOoTContext::CreateChildContext(
                 if( m_bPersistent )
                     pContext.set(new XMLPersElemContentTContext(
                                     GetTransformer(), rQName,
-                                    XML_NAMESPACE_STYLE,
+                                    XmlNamespace::STYLE,
                                     aPropTokens[aPropTypes[m_eFamily][0]] ));
                 else
                     pContext.set(new XMLRenameElemTransformerContext(
                                     GetTransformer(), rQName,
-                                    XML_NAMESPACE_STYLE,
+                                    XmlNamespace::STYLE,
                                     aPropTokens[aPropTypes[m_eFamily][0]] ));
             }
         }
diff --git a/xmloff/source/transform/TransformerActions.hxx b/xmloff/source/transform/TransformerActions.hxx
index 17109c031808..234b506c1145 100644
--- a/xmloff/source/transform/TransformerActions.hxx
+++ b/xmloff/source/transform/TransformerActions.hxx
@@ -39,7 +39,7 @@ struct NameKey_Impl
     }
 
     NameKey_Impl() :
-        m_nPrefix( XML_NAMESPACE_UNKNOWN )
+        m_nPrefix( XmlNamespace::UNKNOWN )
     {
     }
 
diff --git a/xmloff/source/transform/TransformerBase.cxx b/xmloff/source/transform/TransformerBase.cxx
index bac4b993073f..635f9d8843af 100644
--- a/xmloff/source/transform/TransformerBase.cxx
+++ b/xmloff/source/transform/TransformerBase.cxx
@@ -178,13 +178,13 @@ XMLTransformerBase::XMLTransformerBase( XMLTransformerActionInit const *pInit,
     m_ElemActions( pInit ),
     m_TokenMap( pTKMapInit )
 {
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XML_NAMESPACE_XLINK );
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_DC), GetXMLToken(XML_N_DC), XML_NAMESPACE_DC );
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_MATH), GetXMLToken(XML_N_MATH), XML_NAMESPACE_MATH );
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XML_NAMESPACE_OOO );
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_DOM), GetXMLToken(XML_N_DOM), XML_NAMESPACE_DOM );
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_OOOW), GetXMLToken(XML_N_OOOW), XML_NAMESPACE_OOOW );
-    GetNamespaceMap().Add( GetXMLToken(XML_NP_OOOC), GetXMLToken(XML_N_OOOC), XML_NAMESPACE_OOOC );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_XLINK), GetXMLToken(XML_N_XLINK), XmlNamespace::XLINK );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_DC), GetXMLToken(XML_N_DC), XmlNamespace::DC );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_MATH), GetXMLToken(XML_N_MATH), XmlNamespace::MATH );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_OOO), GetXMLToken(XML_N_OOO), XmlNamespace::OOO );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_DOM), GetXMLToken(XML_N_DOM), XmlNamespace::DOM );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_OOOW), GetXMLToken(XML_N_OOOW), XmlNamespace::OOOW );
+    GetNamespaceMap().Add( GetXMLToken(XML_NP_OOOC), GetXMLToken(XML_N_OOOC), XmlNamespace::OOOC );
 }
 
 XMLTransformerBase::~XMLTransformerBase() throw ()
@@ -232,14 +232,14 @@ void SAL_CALL XMLTransformerBase::startElement( const OUString& rName,
             sal_uInt16 nKey = m_pNamespaceMap->AddIfKnown( aPrefix, rAttrValue );
             // If namespace is unknown, try to match a name with similar
             // TC Id and version
-            if( XML_NAMESPACE_UNKNOWN == nKey  )
+            if( XmlNamespace::UNKNOWN == nKey  )
             {
                 OUString aTestName( rAttrValue );
                 if( SvXMLNamespaceMap::NormalizeOasisURN( aTestName ) )
                     nKey = m_pNamespaceMap->AddIfKnown( aPrefix, aTestName );
             }
             // If that namespace is not known, too, add it as unknown
-            if( XML_NAMESPACE_UNKNOWN == nKey  )
+            if( XmlNamespace::UNKNOWN == nKey  )
                 nKey = m_pNamespaceMap->Add( aPrefix, rAttrValue );
 
             const OUString& rRepName = m_vReplaceNamespaceMap.GetNameByKey( nKey );
@@ -639,9 +639,9 @@ XMLMutableAttributeList *XMLTransformerBase::ProcessAttrList(
                         sal_uInt16 nValPrefix =
                             static_cast<sal_uInt16>((*aIter).second.m_nParam1);
                         if( IsXMLToken( GetClass(), XML_SPREADSHEET  ) )
-                            nValPrefix = XML_NAMESPACE_OOOC;
+                            nValPrefix = XmlNamespace::OOOC;
                         else if( IsXMLToken( GetClass(), XML_TEXT  ) )
-                            nValPrefix = XML_NAMESPACE_OOOW;
+                            nValPrefix = XmlNamespace::OOOW;
                         AddNamespacePrefix( aAttrValue, nValPrefix );
                         pMutableAttrList->SetValueByIndex( i, aAttrValue );
                     }
@@ -1207,7 +1207,7 @@ bool XMLTransformerBase::RemoveNamespacePrefix( OUString& rName,
     OUString aLocalName;
     sal_uInt16 nPrefix =
         GetNamespaceMap().GetKeyByAttrValueQName(rName, &aLocalName);
-    bool bRet = XML_NAMESPACE_UNKNOWN != nPrefix &&
+    bool bRet = XmlNamespace::UNKNOWN != nPrefix &&
                     (USHRT_MAX == nPrefixOnly || nPrefix == nPrefixOnly);
     if( bRet )
         rName = aLocalName;
diff --git a/xmloff/source/xforms/TokenContext.cxx b/xmloff/source/xforms/TokenContext.cxx
index 71215c4395d7..3c12345ffff7 100644
--- a/xmloff/source/xforms/TokenContext.cxx
+++ b/xmloff/source/xforms/TokenContext.cxx
@@ -71,11 +71,11 @@ void TokenContext::StartElement(
         // and the value...
         const OUString& rValue = xAttributeList->getValueByIndex(i);
 
-        if( nToken != XML_TOK_UNKNOWN )
+        if( nToken != XmlNamespace::UNKNOWN )
         {
             HandleAttribute( nToken, rValue );
         }
-        else if( nPrefix != XML_NAMESPACE_XMLNS )
+        else if( nPrefix != XmlNamespace::XMLNS )
         {
             // error handling, for all attribute that are not
             // namespace declarations
@@ -97,7 +97,7 @@ SvXMLImportContextRef TokenContext::CreateChildContext(
     SAL_WARN_IF( mpChildren == nullptr, "xmloff", "no token map for child elements" );
     SvXMLTokenMap aMap( mpChildren );
     sal_uInt16 nToken = aMap.Get( nPrefix, rLocalName );
-    if( nToken != XML_TOK_UNKNOWN )
+    if( nToken != XmlNamespace::UNKNOWN )
     {
         // call handle child, and pass down arguments
         pContext = HandleChild( nToken, nPrefix, rLocalName, xAttrList );
diff --git a/xmloff/source/xforms/TokenContext.hxx b/xmloff/source/xforms/TokenContext.hxx
index f52fb362db1d..e46255e2352a 100644
--- a/xmloff/source/xforms/TokenContext.hxx
+++ b/xmloff/source/xforms/TokenContext.hxx
@@ -30,7 +30,7 @@ namespace com::sun::star {
 
 class SvXMLImport;
 
-#define TOKEN_MAP_ENTRY(NAMESPACE,TOKEN) { XML_NAMESPACE_##NAMESPACE, xmloff::token::XML_##TOKEN, xmloff::token::XML_##TOKEN }
+#define TOKEN_MAP_ENTRY(NAMESPACE,TOKEN) { XmlNamespace::##NAMESPACE, xmloff::token::XML_##TOKEN, xmloff::token::XML_##TOKEN }
 
 extern const SvXMLTokenMapEntry aEmptyMap[1];
 
diff --git a/xmloff/source/xforms/XFormsBindContext.cxx b/xmloff/source/xforms/XFormsBindContext.cxx
index d636beb42576..69ad08f024da 100644
--- a/xmloff/source/xforms/XFormsBindContext.cxx
+++ b/xmloff/source/xforms/XFormsBindContext.cxx
@@ -155,7 +155,7 @@ static void lcl_fillNamespaceContainer(
         // as a hack, we will ignore our own 'default' namespaces
         SAL_WARN_IF( sPrefix.isEmpty(), "xmloff", "no prefix?" );
         if( !sPrefix.startsWith("_") &&
-            nKeyIter >= XML_NAMESPACE_META_SO52)
+            nKeyIter >= XmlNamespace::META_SO52)
         {
             // insert prefix (use replace if already known)
             if( xContainer->hasByName( sPrefix ) )
@@ -167,7 +167,7 @@ static void lcl_fillNamespaceContainer(
         // proceed to next
         nKeyIter = aMap.GetNextKey( nKeyIter );
     }
-    while( nKeyIter != XML_NAMESPACE_UNKNOWN );
+    while( nKeyIter != XmlNamespace::UNKNOWN );
 }
 
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/xmloff/source/xforms/xformsapi.cxx b/xmloff/source/xforms/xformsapi.cxx
index 1ed999431b11..5fb6eb6fb194 100644
--- a/xmloff/source/xforms/xformsapi.cxx
+++ b/xmloff/source/xforms/xformsapi.cxx
@@ -171,7 +171,7 @@ void xforms_setValue( Reference<XPropertySet> const & xPropertySet,
     xPropertySet->setPropertyValue( rName, rAny );
 }
 
-#define TOKEN_MAP_ENTRY(NAMESPACE,TOKEN) { XML_NAMESPACE_##NAMESPACE, xmloff::token::XML_##TOKEN, xmloff::token::XML_##TOKEN }
+#define TOKEN_MAP_ENTRY(NAMESPACE,TOKEN) { XmlNamespace::##NAMESPACE, xmloff::token::XML_##TOKEN, xmloff::token::XML_##TOKEN }
 const SvXMLTokenMapEntry aTypes[] =
 {
     TOKEN_MAP_ENTRY( XSD, STRING  ),
@@ -201,7 +201,7 @@ sal_uInt16 xforms_getTypeClass(
     sal_uInt16 nToken = aMap.Get( nPrefix, sLocalName );
 
     sal_uInt16 nTypeClass = css::xsd::DataTypeClass::STRING;
-    if( nToken != XML_TOK_UNKNOWN )
+    if( nToken != XmlNamespace::UNKNOWN )
     {
         // we found an XSD name: then get the proper API name for it
         SAL_WARN_IF( !xRepository.is(), "xmloff", "can't find type without repository");
@@ -269,7 +269,7 @@ OUString xforms_getTypeName(
     sal_uInt16 nPrefix = rNamespaceMap.GetKeyByAttrValueQName(rXMLName, &sLocalName);
     static const SvXMLTokenMap aMap( aTypes );
     sal_uInt16 nToken = aMap.Get( nPrefix, sLocalName );
-    return ( nToken == XML_TOK_UNKNOWN )
+    return ( nToken == XmlNamespace::UNKNOWN )
         ? rXMLName
         : xforms_getBasicTypeName( xRepository, rNamespaceMap, rXMLName );
 }
diff --git a/xmloff/source/xforms/xformsexport.cxx b/xmloff/source/xforms/xformsexport.cxx
index d3348b00b54c..8132673db629 100644
--- a/xmloff/source/xforms/xformsexport.cxx
+++ b/xmloff/source/xforms/xformsexport.cxx
@@ -121,7 +121,7 @@ static void lcl_export( const Reference<XPropertySet>& rPropertySet,
                  SvXMLExport& rExport,
                  const ExportTable* pTable );
 
-#define TABLE_ENTRY(NAME,NAMESPACE,TOKEN,CONVERTER) { NAME,XML_NAMESPACE_##NAMESPACE,xmloff::token::XML_##TOKEN, CONVERTER }
+#define TABLE_ENTRY(NAME,NAMESPACE,TOKEN,CONVERTER) { NAME,XmlNamespace::##NAMESPACE,xmloff::token::XML_##TOKEN, CONVERTER }
 #define TABLE_END { nullptr, 0, 0, nullptr }
 
 // any conversion functions
@@ -169,7 +169,7 @@ void exportXFormsModel( SvXMLExport& rExport,
         return;
 
     lcl_export( xModelPropSet, rExport, aXFormsModelTable );
-    SvXMLElementExport aModelElement( rExport, XML_NAMESPACE_XFORMS, XML_MODEL,
+    SvXMLElementExport aModelElement( rExport, XmlNamespace::XFORMS, XML_MODEL,
                                       true, true );
 
     // instances
@@ -234,12 +234,12 @@ void exportXFormsInstance( SvXMLExport& rExport,
     }
 
     if( !sId.isEmpty() )
-        rExport.AddAttribute( XML_NAMESPACE_NONE, XML_ID, sId );
+        rExport.AddAttribute( XmlNamespace::NONE, XML_ID, sId );
 
     if( !sURL.isEmpty() )
-        rExport.AddAttribute( XML_NAMESPACE_NONE, XML_SRC, sURL );
+        rExport.AddAttribute( XmlNamespace::NONE, XML_SRC, sURL );
 
-    SvXMLElementExport aElem( rExport, XML_NAMESPACE_XFORMS, XML_INSTANCE,
+    SvXMLElementExport aElem( rExport, XmlNamespace::XFORMS, XML_INSTANCE,
                               true, true );
     rExport.IgnorableWhitespace();
     if( xDoc.is() )
@@ -319,7 +319,7 @@ void exportXFormsBinding( SvXMLExport& rExport,
         // now that we have the proper type name, write out the attribute
         if( !sTypeName.isEmpty() )
         {
-            rExport.AddAttribute( XML_NAMESPACE_NONE, XML_TYPE,
+            rExport.AddAttribute( XmlNamespace::NONE, XML_TYPE,
                                   sTypeName );
         }
     }
@@ -342,7 +342,7 @@ void exportXFormsBinding( SvXMLExport& rExport,
             // (we don't need to change the map, since this element has no
             // other content)
             sal_uInt16 nKey = rMap.GetKeyByPrefix( rPrefix );
-            if( nKey == XML_NAMESPACE_UNKNOWN  ||
+            if( nKey == XmlNamespace::UNKNOWN  ||
                 rMap.GetNameByKey( nKey ) != sURI )
             {
                 // add declaration if it doesn't already exist
@@ -358,7 +358,7 @@ void exportXFormsBinding( SvXMLExport& rExport,
         }
     }
 
-    SvXMLElementExport aElement( rExport, XML_NAMESPACE_XFORMS, XML_BIND,
+    SvXMLElementExport aElement( rExport, XmlNamespace::XFORMS, XML_BIND,
                                  true, true );
 }
 
@@ -390,7 +390,7 @@ void exportXFormsSubmission( SvXMLExport& rExport,
                              const Reference<XPropertySet>& xSubmission )
 {
     lcl_export( xSubmission, rExport, aXFormsSubmissionTable );
-    SvXMLElementExport aElement( rExport, XML_NAMESPACE_XFORMS, XML_SUBMISSION,
+    SvXMLElementExport aElement( rExport, XmlNamespace::XFORMS, XML_SUBMISSION,
                                  true, true );
 }
 
@@ -449,7 +449,7 @@ static void lcl_exportDataTypeFacets( SvXMLExport& rExport,
 
             if( !sValue.isEmpty() )
             {
-                rExport.AddAttribute( XML_NAMESPACE_NONE, XML_VALUE, sValue );
+                rExport.AddAttribute( XmlNamespace::NONE, XML_VALUE, sValue );
                 SvXMLElementExport aFacet(
                     rExport,
                     pCurrent->nNamespace,
@@ -517,7 +517,7 @@ static OUString lcl_getXSDType( SvXMLExport const & rExport,
         OSL_FAIL( "unknown data type" );
     }
 
-    return rExport.GetNamespaceMap().GetQNameByKey( XML_NAMESPACE_XSD,
+    return rExport.GetNamespaceMap().GetQNameByKey( XmlNamespace::XSD,
                                                     GetXMLToken( eToken ) );
 }
 
@@ -535,16 +535,16 @@ static void lcl_exportDataType( SvXMLExport& rExport,
     // <xsd:simpleType name="...">
     OUString sName;
     xType->getPropertyValue( "Name" ) >>= sName;
-    rExport.AddAttribute( XML_NAMESPACE_NONE, XML_NAME, sName );
+    rExport.AddAttribute( XmlNamespace::NONE, XML_NAME, sName );
     SvXMLElementExport aSimpleType( rExport,
-                                    XML_NAMESPACE_XSD, XML_SIMPLETYPE,
+                                    XmlNamespace::XSD, XML_SIMPLETYPE,
                                     true, true );
 
     // <xsd:restriction base="xsd:...">
-    rExport.AddAttribute( XML_NAMESPACE_NONE, XML_BASE,
+    rExport.AddAttribute( XmlNamespace::NONE, XML_BASE,
                           lcl_getXSDType( rExport, xType ) );
     SvXMLElementExport aRestriction( rExport,
-                                     XML_NAMESPACE_XSD,
+                                     XmlNamespace::XSD,
                                      XML_RESTRICTION,
                                      true, true );
 
@@ -559,7 +559,7 @@ void exportXFormsSchemas( SvXMLExport& rExport,
 {
     // TODO: for now, we'll fake this...
     {
-        SvXMLElementExport aSchemaElem( rExport, XML_NAMESPACE_XSD, XML_SCHEMA,
+        SvXMLElementExport aSchemaElem( rExport, XmlNamespace::XSD, XML_SCHEMA,
                                         true, true );
 
         // now get data type repository, and export
-- 
2.26.2

