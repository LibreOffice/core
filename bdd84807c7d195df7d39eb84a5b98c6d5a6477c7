{
  "comments": [
    {
      "key": {
        "uuid": "ba039bf9_bb63d10a",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-06-19T15:10:14Z",
      "side": 1,
      "message": "please use `css` instead of `::com::sun::star`",
      "range": {
        "startLine": 50,
        "startChar": 14,
        "endLine": 50,
        "endChar": 30
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93550f19_b7572532",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1002359
      },
      "writtenOn": "2020-06-20T13:39:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ba039bf9_bb63d10a",
      "range": {
        "startLine": 50,
        "startChar": 14,
        "endLine": 50,
        "endChar": 30
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7801cd5e_c670551f",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-06-19T15:10:14Z",
      "side": 1,
      "message": "This should obviously be 2?",
      "range": {
        "startLine": 51,
        "startChar": 77,
        "endLine": 51,
        "endChar": 78
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74594d9f_7d063cba",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1002359
      },
      "writtenOn": "2020-06-20T13:39:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7801cd5e_c670551f",
      "range": {
        "startLine": 51,
        "startChar": 77,
        "endLine": 51,
        "endChar": 78
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2eb7738_4f948d86",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 99,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-06-19T15:10:14Z",
      "side": 1,
      "message": "`p` means \"pointer-like object\". This is a vector, rather aStyleNames?",
      "range": {
        "startLine": 99,
        "startChar": 38,
        "endLine": 99,
        "endChar": 39
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4f4218f_febdd714",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 99,
      "author": {
        "id": 1002359
      },
      "writtenOn": "2020-06-20T13:39:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f2eb7738_4f948d86",
      "range": {
        "startLine": 99,
        "startChar": 38,
        "endLine": 99,
        "endChar": 39
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f86ad1cc_3345a2ea",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 117,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-06-19T15:10:14Z",
      "side": 1,
      "message": "what does \"m\" stand for? maybe more telling name would be xStyleProps?",
      "range": {
        "startLine": 117,
        "startChar": 57,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d26504c3_6be671ee",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 117,
      "author": {
        "id": 1002359
      },
      "writtenOn": "2020-06-20T13:39:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f86ad1cc_3345a2ea",
      "range": {
        "startLine": 117,
        "startChar": 57,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb6b364f_9abf179f",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 121,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-06-19T15:10:14Z",
      "side": 1,
      "message": "Starting from this line, you are listing known properties, and get their values. This is inefficient, and will result in duplicating code.\n\nInstead, ask the property set for getPropertySetInfo(), and use its methods to get the list of all properties. Then for each of them, get the values. Then introduce a function that would take a property name and value pair, and return a string (for now) that will be inserted into the control. The function may have a list of known properties, which it knows how to format (e.g., for colors, it might use OUString::number() call with base equal to 16, to produce hex strings instead of decimals). But for unknown properties, it would still return a default result (the name plus the value in no particular format).\n\nPrepending the leading whitespace to the function result would be performed here.",
      "range": {
        "startLine": 121,
        "startChar": 16,
        "endLine": 121,
        "endChar": 94
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16fa258f_84cb045b",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 121,
      "author": {
        "id": 1002359
      },
      "writtenOn": "2020-06-20T13:39:40Z",
      "side": 1,
      "message": "\u003e Instead, ask the property set for getPropertySetInfo(), and use its methods to get the list of all properties. Then for each of them, get the values. Then introduce a function that would take a property name and value pair, and return a string (for now) that will be inserted into the control. The function may have a list of known properties, which it knows how to format (e.g., for colors, it might use OUString::number() call with base equal to 16, to produce hex strings instead of decimals). But for unknown properties, it would still return a default result (the name plus the value in no particular format).\n\nDone.\nAlso there are around 70 properties, some properties like CharFontCharSetAsian, CharFontNameAsian.. might not be required so often as others like \"CharFont\", \"CharHeight\", \"CharUnderline\". and so on. Can we drop them ?\n\nFor that we might declare an enum of the properties like\nenum style_name{\n   eCharFontname\n   eCharShadow\n   eCharHeight\n   ..\n}\n\nand later use switch case at the \u0027WriterInspectorTextPanel::GetPropertyValues\u0027 method to get the values only for the relevant style. What do you think ?",
      "parentUuid": "eb6b364f_9abf179f",
      "range": {
        "startLine": 121,
        "startChar": 16,
        "endLine": 121,
        "endChar": 94
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51b40290_15f6029a",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.cxx",
        "patchSetId": 8
      },
      "lineNbr": 121,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-06-21T12:33:45Z",
      "side": 1,
      "message": "\u003e Also there are around 70 properties, some properties like CharFontCharSetAsian, CharFontNameAsian.. might not be required so often as others like \"CharFont\", \"CharHeight\", \"CharUnderline\". and so on. Can we drop them ?\n\nWell - a complex question.\n\nFirst of all: we need a dirty result first, and we need it really soon. 1/4th of GSoC is over, and the initial dump phase takes longer than expected; we will need to make it functional and hopefully pretty - but only after we see it in full length, to realize what we got.\n\nAdditionally, some of the properties\u0027 visibility depend on settings. The ones you mentiond e.g. depend on having Asian and CTL support enabled on Language Settings options page.\n\nBut what\u0027s more important - we should *only* display at each level those settings that *are* defined on that level. I am not sure that UNO provides us a way to see e.g. if a setting is defined in the style of in its parent.\n\nPlus, displaying the settings in the inspector, we are not interested in everything that is defined in any level, but only in things that affect the cursor position. E.g., if an applied paragraph  style defines font name, and an applied character style also defines a font name, both these things should *not* be displayed in the inspector when the font name is also defined as direct formatting!\n\nThis might require to use SfxItemSet directly, allowing to query for the status of an item (like \"not set on this level\").",
      "parentUuid": "16fa258f_84cb045b",
      "range": {
        "startLine": 121,
        "startChar": 16,
        "endLine": 121,
        "endChar": 94
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ca4c1df_7742504d",
        "filename": "sw/source/uibase/sidebar/WriterInspectorTextPanel.hxx",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-06-19T15:10:14Z",
      "side": 1,
      "message": "Please avoid any \"using\" directives. We are cleaning up them gradually; please use namespaces explicitly.",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 20
      },
      "revId": "bdd84807c7d195df7d39eb84a5b98c6d5a6477c7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}