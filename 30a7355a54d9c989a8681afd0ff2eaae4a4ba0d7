{
  "comments": [
    {
      "key": {
        "uuid": "5f4e5783_e65e0ae5",
        "filename": "offapi/com/sun/star/frame/XAppDispatchProvider.idl",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-01-12T06:09:30Z",
      "side": 1,
      "message": "sberg, can we change this?",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_32212ea1",
        "filename": "offapi/com/sun/star/frame/XAppDispatchProvider.idl",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-01-16T10:15:29Z",
      "side": 1,
      "message": "yes, you can at least technically change that, as XAppDispatchProvider is not published; whether it is a good idea to change it (i.e., whether 3rd party code already relies on it in practice, even though it is not published) I do not know---it probably doesn\u0027t hurt to mark the commit [API CHANGE] nevertheless and mention this at \u003chttps://wiki.documentfoundation.org/ReleaseNotes/6.3#UNO_API_changes\u003e",
      "parentUuid": "5f4e5783_e65e0ae5",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_122632b9",
        "filename": "offapi/com/sun/star/frame/XDispatchInformationProvider2.idl",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-01-16T10:15:29Z",
      "side": 1,
      "message": "this method lacks documentation (esp. for the meaning of SlotMode, which is the addition over XDispatchInformationProvider.getConfigurableDispatchInformation, and maybe there\u0027s a better name than ...2 (e.g., getConfigurable DispatchInformationForSlotMode)?",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_52514a0e",
        "filename": "offapi/com/sun/star/frame/XDispatchInformationProvider2.idl",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-01-16T10:36:28Z",
      "side": 1,
      "message": "SlotMode is apparently meant to model SfxSlotMode (include/sfx2/msg.hxx), which is an enum class with underlying type int:\n* why use unsinged long instead of long here, when the modelled C++ SfxSlotMode has an underlying type of int, not unsigned int (and unsigned types are problematic in UNO, e.g. because Java doesn\u0027t have them, and should generally be avoided)?\n* SfxSlotMode, while having an underlying type of int, curiously declares its enumerators explicitly with values of type long; is SfxSlotMode probably meant to grow further bits over time, that may make it necessary to extend it beyond what can be covered by UNO long (to what can be covered by UNO hyper)?\n* would it make sense to duplicate SfxSlotMode as a UNO enum (if SfxSlotMode is supposed to be complete, and not grow new enumerators over time) or a UNO constant group (otherwise)?\n* but, on closer inspection, SlotMode appears to /not/ model SfxSlotMode after all, given e.g. the new\n    SfxSlotMode nMode;\n    if ( nSlotMode \u003d\u003d 0 )\n        nMode \u003d SfxSlotMode::TOOLBOXCONFIG|SfxSlotMode::ACCELCONFIG|SfxSlotMode::MENUCONFIG;\n    else\n        nMode \u003d SfxSlotMode( nSlotMode );\nin SfxAppDispatchProvider::getConfigurableDispatchInformation2 (sfx2/source/appl/appdispatchprovider.cxx), so 0 has a meaning different from SfxSlotMode::NONE?",
      "parentUuid": "1f485f77_122632b9",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}