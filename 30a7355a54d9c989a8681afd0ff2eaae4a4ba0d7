{
  "comments": [
    {
      "key": {
        "uuid": "5f4e5783_e65e0ae5",
        "filename": "offapi/com/sun/star/frame/XAppDispatchProvider.idl",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-01-12T06:09:30Z",
      "side": 1,
      "message": "sberg, can we change this?",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_32212ea1",
        "filename": "offapi/com/sun/star/frame/XAppDispatchProvider.idl",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-01-16T10:15:29Z",
      "side": 1,
      "message": "yes, you can at least technically change that, as XAppDispatchProvider is not published; whether it is a good idea to change it (i.e., whether 3rd party code already relies on it in practice, even though it is not published) I do not know---it probably doesn\u0027t hurt to mark the commit [API CHANGE] nevertheless and mention this at \u003chttps://wiki.documentfoundation.org/ReleaseNotes/6.3#UNO_API_changes\u003e",
      "parentUuid": "5f4e5783_e65e0ae5",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_122632b9",
        "filename": "offapi/com/sun/star/frame/XDispatchInformationProvider2.idl",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-01-16T10:15:29Z",
      "side": 1,
      "message": "this method lacks documentation (esp. for the meaning of SlotMode, which is the addition over XDispatchInformationProvider.getConfigurableDispatchInformation, and maybe there\u0027s a better name than ...2 (e.g., getConfigurable DispatchInformationForSlotMode)?",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_52514a0e",
        "filename": "offapi/com/sun/star/frame/XDispatchInformationProvider2.idl",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-01-16T10:36:28Z",
      "side": 1,
      "message": "SlotMode is apparently meant to model SfxSlotMode (include/sfx2/msg.hxx), which is an enum class with underlying type int:\n* why use unsinged long instead of long here, when the modelled C++ SfxSlotMode has an underlying type of int, not unsigned int (and unsigned types are problematic in UNO, e.g. because Java doesn\u0027t have them, and should generally be avoided)?\n* SfxSlotMode, while having an underlying type of int, curiously declares its enumerators explicitly with values of type long; is SfxSlotMode probably meant to grow further bits over time, that may make it necessary to extend it beyond what can be covered by UNO long (to what can be covered by UNO hyper)?\n* would it make sense to duplicate SfxSlotMode as a UNO enum (if SfxSlotMode is supposed to be complete, and not grow new enumerators over time) or a UNO constant group (otherwise)?\n* but, on closer inspection, SlotMode appears to /not/ model SfxSlotMode after all, given e.g. the new\n    SfxSlotMode nMode;\n    if ( nSlotMode \u003d\u003d 0 )\n        nMode \u003d SfxSlotMode::TOOLBOXCONFIG|SfxSlotMode::ACCELCONFIG|SfxSlotMode::MENUCONFIG;\n    else\n        nMode \u003d SfxSlotMode( nSlotMode );\nin SfxAppDispatchProvider::getConfigurableDispatchInformation2 (sfx2/source/appl/appdispatchprovider.cxx), so 0 has a meaning different from SfxSlotMode::NONE?",
      "parentUuid": "1f485f77_122632b9",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_8c89e627",
        "filename": "offapi/com/sun/star/frame/XDispatchInformationProvider2.idl",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1001615
      },
      "writtenOn": "2019-01-18T00:53:01Z",
      "side": 1,
      "message": "getConfigurableDispatchInformationForSlotMode sounds good.\n\nWould the following be enough documentation?\n\n/** provides information about supported commands for given SfxSlotMode\n\n    \u003cp\u003e\n    This interface can be used to retrieve additional information about\n    supported commands. This interface is normally used by configuration\n    implementations to retrieve SfxSlotMode::MENUCONFIG, TOOLBOXCONFIG\n    and ACCELCONFIG supported commands. SlotMode -1 \n    indicates retrieval of all supported commands.\n    \u003c/p\u003e\n\n    @see enum class SfxSlotMode\n\n    @since LibreOffice 6.3\n */",
      "parentUuid": "1f485f77_122632b9",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_ac9a626b",
        "filename": "offapi/com/sun/star/frame/XDispatchInformationProvider2.idl",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1001615
      },
      "writtenOn": "2019-01-18T00:53:01Z",
      "side": 1,
      "message": "* why use unsinged long instead of long here, when the modelled C++ SfxSlotMode has an underlying type of int, not unsigned int (and unsigned types are problematic in UNO, e.g. because Java doesn\u0027t have them, and should generally be avoided)?\n  I agree long is a better choice.\n\n* would it make sense to duplicate SfxSlotMode as a UNO enum (if SfxSlotMode is supposed to be complete, and not grow new enumerators over time) or a UNO constant group (otherwise)?\n  I do not know.\n\n* ... so 0 has a meaning different from SfxSlotMode::NONE?\n  Changing unsigned long to long would allow -1 to be used for default meaning SfxSlotMode::TOOLBOXCONFIG|SfxSlotMode::ACCELCONFIG|SfxSlotMode::MENUCONFIG Would this be acceptable?",
      "parentUuid": "1f485f77_52514a0e",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_acf9424e",
        "filename": "offapi/com/sun/star/frame/XDispatchInformationProvider2.idl",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-01-18T08:40:30Z",
      "side": 1,
      "message": "* Why do you need some default value at all that means SfxSlotMode::TOOLBOXCONFIG|SfxSlotMode::ACCELCONFIG|SfxSlotMode::MENUCONFIG; why not pass that or-ed value in calls that want that meaning?\n* If you don\u0027t duplicate the C++ SfxSlotMode enum as a UNOIDL entity (and make the SlotMode parameter reference that entity), you effectively make this XDispachInformationProvider2 an internal, never-to-be-published interface (as we don\u0027t have stability guarantees for the LO internal C++ SfxSlotMode enum that would be needed here if XDispatchInformationProvider2 were a published interface).  That may be just fine (if getConfigurableDispatchInformation2 is something that would conceivably never be called by external code anyway, and is only coded in UNO for technical reasons, because the existing LO-internal code calling it only has a UNO reference available; which appears to be the case here).  (And if there\u0027ll ever be a need, we could still introduce some SlotMode UNOIDL entity and change this, yet unpublished, interface accordingly.  Just make it clear in the documentation that this unpublished interface is only intended for internal use at least for now.)\n* I\u0027d still seek a better name than \"getConfigurableDispatchInformation2\", though.",
      "parentUuid": "1f485f77_ac9a626b",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f485f77_cc2d9ea9",
        "filename": "offapi/com/sun/star/frame/XDispatchInformationProvider2.idl",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000549
      },
      "writtenOn": "2019-01-18T09:49:42Z",
      "side": 1,
      "message": "I wonder, why do we need to fully expose the SfxSlotMode enum in such a way via a public API (even if \"unpublished\"), given that we only ever want to filter commands by a UI element type. In addition, it isn\u0027t clear to me why there is a need to somehow handle the or-ed case, given that we already have the original XDispatchInformationProvider interface that does, and probably will continue to do this?\n\nWouldn\u0027t it be better to just use here constants from css::ui::UIElementType (and have a separate method for the accel case, or maybe just use UIElementType::UNKNOWN)?",
      "parentUuid": "1f485f77_acf9424e",
      "revId": "30a7355a54d9c989a8681afd0ff2eaae4a4ba0d7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}