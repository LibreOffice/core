#!/usr/bin/env perl

# A hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message
# if it wants to stop the commit.

use strict;
#use File::Copy;
#use Cwd;

$ENV{LC_ALL} = "C";

sub check_whitespaces($)
{
    my ($h) = @_;
    my $src_limited = "c|cpp|cxx|h|hrc|hxx|idl|inl|java|swift|map|MK|pmk|pl|pm|sdi|sh|src|tab|ui|xcu|xml";
    my $src_full = "c|cpp|cxx|h|hrc|hxx|idl|inl|java|swift|map|mk|MK|pmk|pl|pm|sdi|sh|src|tab|ui|xcu|xml";

    my $found_bad = 0;
    my $filename;
    my $reported_filename = "";
    my $lineno;
    sub bad_line
    {
        my ($why, $line, $file_filter) = @_;
        if (!defined $file_filter || $filename =~ /\.($file_filter)$/)
        {
            if (!$found_bad)
            {
                print STDERR "*\n";
                print STDERR "* You have some suspicious patch lines:\n";
                print STDERR "*\n";
                $found_bad = 1;
            }
            if ($reported_filename ne $filename)
            {
                print STDERR "* In $filename\n";
                $reported_filename = $filename;
            }
            print STDERR "* $why (line $lineno)\n";
            print STDERR "$filename:$lineno:$line\n";
        }
    }
    open( FILES, "git-diff-index -p -M --cached $h |" ) ||  die "Cannot run git diff-index.";
    while (<FILES>)
    {
        if (m|^diff --git a/(.*) b/\1$|)
        {
            $filename = $1;
            next;
        }
        if (/^@@ -\S+ \+(\d+)/)
        {
            $lineno = $1 - 1;
            next;
        }
        if (/^ /)
        {
            $lineno++;
            next;
        }
        if (s/^\+//)
        {
            $lineno++;
            chomp;
            if (/\s$/)
            {
                bad_line("trailing whitespace", $_ , $src_limited);
            }
            if (/\r$/)
            {
                bad_line("DOS lineends", $_ , $src_limited);
            }
            if (/\s*	/)
            {
                bad_line("indent with Tab", $_, $src_limited);
            }
            if (/^(?:[<>=]){7}$/)
            {
                bad_line("unresolved merge conflict", $src_full);
            }
            if (/SAL_DEBUG/)
            {
                bad_line("temporary debug in commit", $_, $src_limited);
            }
            if (/<property name="use_markup">True<\/property>/)
            {
                bad_line("use font attributes instead of use-markup", $_, $src_limited);
            }
            if (/<property name="tooltip_markup"/ )
            {
                bad_line("use tooltip_text instead of tooltip_markup", $_, $src_limited);
            }
        }
    }
    if ( $found_bad)
    {
        exit($found_bad);
    }
}

# Do the work :-)

# Initial commit: diff against an empty tree object
my $against="4b825dc642cb6eb9a060e54bf8d69288fbee4904";
if ( system( "git rev-parse --verify HEAD >/dev/null 2>&1" ) == 0 )
{
    $against="HEAD"
}

# If you want to allow non-ascii filenames set this variable to true.
my $allownonascii=`git config hooks.allownonascii`;

# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if ( $allownonascii ne "true" &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    `git diff --cached --name-only --diff-filter=A -z $against | \
     LC_ALL=C tr -d '[ -~]\\0'` ne "" )
{
    print <<EOM;
Error: Attempt to add a non-ascii file name.

This can cause problems if you want to work
with people on other platforms.

To be portable it is advisable to rename the file ...

If you know what you are doing you can disable this
check using:

  git config hooks.allownonascii true

EOM
    exit( 1 );
}

# Block large files.
open( FILES, "git diff --cached --name-only --diff-filter=A -z $against |" ) ||  die "Cannot run git diff-index.";
while (<FILES>)
{
    my $size = `git cat-file -s :$_`;
    # For now let's say large is 500KB
    my $limit = 500;
    if ($size > $limit * 1024)
    {
        print "Error: Attempt to add a large file: $_, pleasy try to fit into $limit KB.\n";
        exit( 1 );
    }
}

# fix whitespace in code
check_whitespaces( $against);

# all OK
exit( 0 );
# vi:set shiftwidth=4 expandtab:
