/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_lang_XMultiServiceFactory_idl__
#define __com_sun_star_lang_XMultiServiceFactory_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/uno/Exception.idl>



module com {  module sun {  module star {  module lang {


/** Allows creating instances specified by a string name.

    @note
    Although this interface deals with the notion of "services", it is
    not restricted to services but is more general.
    This interface can be used for all kinds
    of factories for all kinds of instances, not only UNO services.
*/
published interface XMultiServiceFactory: com::sun::star::uno::XInterface
{
    /** Creates an instance classified by the specified name.

        @param aServiceSpecifier
               classified name of instance
        @return
                instance
    */
    com::sun::star::uno::XInterface createInstance( [in] string aServiceSpecifier )
        raises( com::sun::star::uno::Exception );

    /** Creates an instance classified by the specified name and passes the arguments
        to that instance.

        @param ServiceSpecifier
               classified name of instance
        @param Arguments
               arguments passed to the instance
        @return
                instance
    */
    com::sun::star::uno::XInterface createInstanceWithArguments(
        [in] string ServiceSpecifier,
        [in] sequence<any> Arguments )
        raises( com::sun::star::uno::Exception );

    /** Provides the available names of the factory to be used to create instances.

        @returns
                 sequence of all names
    */
    sequence<string> getAvailableServiceNames();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
