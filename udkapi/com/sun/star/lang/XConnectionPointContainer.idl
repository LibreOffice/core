/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_lang_XConnectionPointContainer_idl__
#define __com_sun_star_lang_XConnectionPointContainer_idl__

#include <com/sun/star/uno/XInterface.idl>


module com {  module sun {  module star {  module lang {

 published interface XConnectionPoint;

/** makes it possible to locate a specific connection point
    for a specified UIK and manages a sequence of connections points.

    <p>An implementation of this interface <strong>must</strong>
    support the com::sun::star::uno::XWeak interface.
    Look at the language binding for a superclass or something else.  </p>

    @see XConnectionPoint
    @see com::sun::star::uno::XWeak
 */
published interface XConnectionPointContainer: com::sun::star::uno::XInterface
{
    /** @returns
            a sequence of all outgoing types; specifies which are supported
            by this connectable object.
     */
    sequence<type> getConnectionPointTypes();

    /** @returns
            an XConnectionPoint interface of a
            connection point for a specified type if that type
            describes a supported outgoing interface. It is
            NULL on failure of the call.

        @param aType
            specifies the connection point's type.
     */
    XConnectionPoint queryConnectionPoint( [in] type aType );

    /** creates a connection between this object and a
        client's sink, where the sink implements the outgoing
        interface specified with ID.

        <p>The interface is advised under the connection point you
        get with <code>queryConnectionPoint( id )</code>.  </p>

        <p>Use this method instead of the advise method at the
        connection point, only if you know that the broadcaster supports
        the outgoing interface, or if it does not matter that the
        outgoing interface is not supported.  </p>

        @see XConnectionPoint::advise
     */
    void advise( [in] type aType,
             [in] com::sun::star::uno::XInterface xListener );

    /** terminates a notification previously set up with
        advise at the container or at the suitable connection point.

        @see XConnectionPoint::unadvise
     */
    void unadvise( [in] type aType,
             [in] com::sun::star::uno::XInterface xListener );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
