/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_lang_XMultiComponentFactory_idl__
#define __com_sun_star_lang_XMultiComponentFactory_idl__

#include <com/sun/star/uno/XComponentContext.idl>



module com {  module sun {  module star {  module lang {

/** Factory interface for creating component instances giving a context from
    which to retrieve deployment values.

    @see XInitialization
*/
published interface XMultiComponentFactory : com::sun::star::uno::XInterface
{
    /** Creates an instance of a component which supports the
        services specified by the factory.

        @param aServiceSpecifier
               service name
        @param Context
               context the component instance gets its deployment values from
        @return
                component instance
    */
    com::sun::star::uno::XInterface createInstanceWithContext(
        [in] string aServiceSpecifier,
        [in] com::sun::star::uno::XComponentContext Context )
        raises (com::sun::star::uno::Exception);

    /** Creates an instance of a component which supports the
        services specified by the factory, and initializes the new instance
        with the given arguments and context.

        @param ServiceSpecifier
               service name
        @param Arguments
               arguments
        @param Context
               context the component instance gets its deployment values from
        @return
                component instance
    */
    com::sun::star::uno::XInterface createInstanceWithArgumentsAndContext(
        [in] string ServiceSpecifier,
        [in] sequence<any> Arguments,
        [in] com::sun::star::uno::XComponentContext Context )
        raises (com::sun::star::uno::Exception);

    /** Gets the names of all supported services.

        @returns
                 sequence of all service names
    */
    sequence< string > getAvailableServiceNames();
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
