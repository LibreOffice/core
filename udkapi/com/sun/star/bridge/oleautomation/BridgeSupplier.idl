/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_bridge_oleautomation_BridgeSupplier_idl__
#define __com_sun_star_bridge_oleautomation_BridgeSupplier_idl__

#include <com/sun/star/bridge/XBridgeSupplier2.idl>



module com { module sun { module star { module bridge { module oleautomation {

/** maps UNO types to oleautomation types and vice versa.
    <p>
    The function
    com::sun::star::bridge::XBridgeSupplier2::createBridge()
    maps a value of a UNO or Automation type to the desired target type. If a UNO
    interface was mapped  to <code>IDispatch</code>, then all objects
    (interfaces, structs) and other types which are obtained from that Automation
    object are automatically mapped to the corresponding Automation types. Hence,
    if one provides an initial object which forms the root of all other objects,
    such as a service manager, then only that object needs to be explicitly
    mapped by a call to
    com::sun::star::bridge::XBridgeSupplier2::createBridge().
    The same holds true if an automation  object is mapped to an UNO interface.
    </p>
    <p>
    For Automation objects to be mapped they have to implement
    <code>IDispatch</code> interface. Other COM interfaces, except for
    <code>IUnknown</code>, are not supported. UNO interfaces and structs are
    mapped to <code>IDispatch</code>.
    </p>
    <p>
    The service implements the
    com::sun::star::bridge::XBridgeSupplier2 interface and
    handles the model types
    com::sun::star::bridge::ModelDependent::UNO and
    com::sun::star::bridge::ModelDependent::OLE.
    The service does not specify any requirements for registering OLE objects and
    class factories.
    </p>
*/
service BridgeSupplier
{
    interface com::sun::star::bridge::XBridgeSupplier2;

};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
