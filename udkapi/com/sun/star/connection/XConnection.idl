/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef _COM_SUN_STAR_CONNECTION_XCONNECTION_IDL_
#define _COM_SUN_STAR_CONNECTION_XCONNECTION_IDL_

#include <com/sun/star/io/IOException.idl>


module com {  module sun {  module star {  module connection {

/** A bidirectional bytestream.

    <p> You should additionally implement XConnection2.

    @see XConnection2
 */
published interface XConnection: com::sun::star::uno::XInterface
{

    /** reads a requested number of bytes from the connection.
        <p> This method is blocking, meaning that it always returns a bytesequence
        with the requested number of bytes, unless it has reached end of file (which
        often means, that close() has been called).

        <p> please see also the readSomeBytes() method of XConnection2.

        @return The read number of bytes.
                The return value and the length of the
                returned sequence must be identical.
        @param aReadBytes
                The buffer to receive the read bytes.
        @param nBytesToRead
                The number of bytes to be read from the stream.

        @throws com::sun::star::io::IOException
               in case an error occurred during reading from the stream.
     */
    long read( [out] sequence < byte > aReadBytes , [in] long nBytesToRead )
            raises( com::sun::star::io::IOException );

    /** writes the given bytesequence to the stream.
        <p>The method blocks until the whole sequence is written.

        @throws com::sun::star::io::IOException
               in case an error occurred during writing to the stream.
     */
    void write( [in] sequence < byte > aData )
        raises( com::sun::star::io::IOException );


    /** Empties all internal buffers.
     */
    void flush( )
            raises( com::sun::star::io::IOException );

    /** Immediately terminates any ongoing read or write calls.
        All subsequent read or write calls()
     */
    void close( )
            raises( com::sun::star::io::IOException );


    /** A unique string describing the connection.

        <p>This string is different from the arguments to XConnection::accept()
        and XConnector::connect(). In general, the string contains an additional
        handle value.  For example, "socket,host=localhost,port=2002,uniqueValue=2324". </p>
     */
    string getDescription();
};

};};};};

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
