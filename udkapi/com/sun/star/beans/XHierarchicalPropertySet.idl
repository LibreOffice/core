/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_beans_XHierarchicalPropertySet_idl__
#define __com_sun_star_beans_XHierarchicalPropertySet_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/beans/XHierarchicalPropertySetInfo.idl>

#include <com/sun/star/beans/UnknownPropertyException.idl>

#include <com/sun/star/beans/PropertyVetoException.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>

#include <com/sun/star/lang/WrappedTargetException.idl>



module com {  module sun {  module star {  module beans {


/** provides information about and access to the
    a hierarchy of properties from an implementation.

    <p> Usually an object that implements this interface
        also implements XPropertySet and at
        least some of the properties have subproperties.  </p>

    <p> This interface allows direct access to subsubproperties, ...
        up to an arbitrary nesting depth. Often the intermediate
        elements of the hierarchy implement XProperty.  </p>

    <p> Each implementation specifies how the
        hierarchical property names, that are
        used to access the elements of the hierarchy,
        are formed.  </p>

    <p> Commonly a notation similar to filesystem paths
        (separated by '/' slashes) or nested module names
        (separated by dots '.' or '::') is used.  </p>

 */
published interface XHierarchicalPropertySet: com::sun::star::uno::XInterface
{

    /** retrieve information about the hierarchy of properties

        @returns
                the XHierarchicalPropertySetInfo interface,
                which describes the property hierarchy of the object which
                supplies this interface.

        @returns
                `NULL` if the implementation cannot or will
                not provide information about the properties; otherwise the
                interface XHierarchicalPropertySetInfo is returned.
     */
    com::sun::star::beans::XHierarchicalPropertySetInfo
                getHierarchicalPropertySetInfo();


    /** sets the value of the property with the specified nested name.

        @param  aHierarchicalPropertyName
                This parameter specifies the name of the property.

        @param  aValue
                This parameter specifies the new value for the property.

        @throws UnknownPropertyException
                if the property does not exist.

        @throws PropertyVetoException
                if the property is constrained and the change is vetoed by a
                XVetoableChangeListener.

        @throws com::sun::star::uno::lang::IllegalArgumentException
                if <var>aValue</var> is not a legal value for this property or
                if <var>aHierarchicalPropertyName</var> is not a well-formed
                nested name for this hierarchy.
                An implementation is not required to detect the latter condition.

        @throws com::sun::star::lang::WrappedTargetException
                if the implementation has an internal reason for the exception.
                In this case the original exception is wrapped into that
                com::sun::star::lang::WrappedTargetException.

        @see XPropertySet::setPropertyValue
     */
    void setHierarchicalPropertyValue( [in] string aHierarchicalPropertyName,
             [in] any aValue )
            raises( com::sun::star::beans::UnknownPropertyException,
                    com::sun::star::beans::PropertyVetoException,
                    com::sun::star::lang::IllegalArgumentException,
                    com::sun::star::lang::WrappedTargetException );


    /** @returns
                the value of the property with the specified nested name.

        @param  aHierarchicalPropertyName
                This parameter specifies the name of the property.

        @throws UnknownPropertyException
                if the property does not exist.

        @throws com::sun::star::uno::lang::IllegalArgumentException
                if <var>aHierarchicalPropertyName</var> is not a well-formed
                nested name for this hierarchy.
                   An implementation is not required to detect this
                condition.

        @throws com::sun::star::lang::WrappedTargetException
                if the implementation has an internal reason for the exception.
                In this case the original exception is wrapped into that
                com::sun::star::lang::WrappedTargetException.

        @see XPropertySet::getPropertyValue
     */
    any getHierarchicalPropertyValue( [in] string aHierarchicalPropertyName )
            raises( com::sun::star::beans::UnknownPropertyException,
                    com::sun::star::lang::IllegalArgumentException,
                    com::sun::star::lang::WrappedTargetException );


};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
