/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_beans_MethodConcept_idl__
#define __com_sun_star_beans_MethodConcept_idl__



 module com {  module sun {  module star {  module beans {

/** These constants are used to specify concepts of the
    introspection which apply to methods.

    <p>This list is not necessarily complete; new constants
    may be added.</p>
    @see Introspection
    @see XIntrospection
    @see XIntrospectionAccess

*/
published constants MethodConcept
{
    /** This value is used to query for all methods, see
        XIntrospectionAccess::getMethod() and
        XIntrospectionAccess::getMethods()
     */
    const long ALL = -1;

    /** specifies methods which can result in an unstable state
        (i.e. deadlock, application crash, security hole, etc.)
        when called directly by the user.
     */
    const long DANGEROUS = 1;

    /** specifies methods which are used to set and get the
        value of properties/attributes.

        <p>These methods have the signature <code>type get...()
        </code>, <code>void set...()</code> or <code>boolean is...()
        </code>. </p>
     */
    const long PROPERTY = 2;

    /** specifies methods of the <em>listener concept</em>.

        <p>These methods have the signature <code>add...Listener()
        </code> or <code>remove...Listener()</code>. </p>
     */
    const long LISTENER = 4;

    /** specifies methods of the <em>enumeration concept</em>.

        <p>These methods have the signature
        <code>create...Enumeration</code> and return an interface
        that is derived from com::sun::star::container::XEnumeration.
        Additionally, the method
        com::sun::star::container::XEnumerationAccess::getElementType()
        belongs to this concept.</p>
     */
    const long ENUMERATION = 8;

    /** specifies methods of the <em>name container concept</em>.

        <p>These methods have the signature
        <code>get...ByName()</code>,
        <code>set...ByName()</code>,
        <code>replace...ByName()</code>,
        <code>remove...ByName()</code>,
        <code>has...ByName()</code>, or
        <code>get...Names</code>.  In addition, the method
        com::sun::star::container::XEnumerationAccess::getElementType()
        belongs to this concept. </p>
     */
    const long NAMECONTAINER = 16;

    /** specifies methods of the <em>index container concept</em>.

        <p>These methods have the signature
        <code>get...ByIndex()</code>,
        <code>insert...ByIndex()</code>,
        <code>replace...ByIndex()</code>, or
        <code>remove...ByIndex()</code>.
        The method com::sun::star::container::XIndexAccess::getCount()
        also belongs to this concept. </p>
     */
    const long INDEXCONTAINER = 32;

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
