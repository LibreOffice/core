/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_beans_XMultiPropertySet_idl__
#define __com_sun_star_beans_XMultiPropertySet_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/beans/XPropertySetInfo.idl>

#include <com/sun/star/beans/PropertyVetoException.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>

#include <com/sun/star/lang/WrappedTargetException.idl>

#include <com/sun/star/beans/XPropertiesChangeListener.idl>



module com {  module sun {  module star {  module beans {


/** provides access to multiple properties with a single call.
 */
published interface XMultiPropertySet: com::sun::star::uno::XInterface
{

    /** @returns
            the XPropertySetInfo interface, which describes
            all properties of the object to which this interface belongs.
            NULL is returned if the object cannot or will
            not provide information about the properties.

        @see XPropertySet::getPropertySetInfo
     */
    com::sun::star::beans::XPropertySetInfo getPropertySetInfo();


    /** sets the values to the properties with the specified names.

        <p>The values of the properties must change before the bound
        events are fired. The values of the constrained properties
        should change after the vetoable events are fired and only if no
        exception occurred. Unknown properties are ignored.  </p>

        @param aPropertyNames
            specifies the names of the properties. All names must be unique.
            This sequence must be alphabetically sorted.

        @param aValues
            contains the new values of the properties. The order is the same
            as in <var>aPropertyNames</var>.

        @throws IllegalArgumentException
            if one of the new values cannot be converted to the type
            of the underlying property by an identity or widening conversion.

        @throws com::sun::star::lang:WrappedTargetException
            if the implementation has an internal reason for the exception.
            In this case the original exception is wrapped.
     */
    void setPropertyValues( [in] sequence<string> aPropertyNames,
             [in] sequence<any> aValues )
            raises( com::sun::star::beans::PropertyVetoException,
                    com::sun::star::lang::IllegalArgumentException,
                    com::sun::star::lang::WrappedTargetException );


    /** @returns
            a sequence of all values of the properties which are specified by their names.

        <p>The order of the values in the returned sequence will be the same
        as the order of the names in the argument. </p>

        @param aPropertyNames
            specifies the names of the properties.
            This sequence must be alphabetically sorted.
     */
    sequence<any> getPropertyValues( [in] sequence<string> aPropertyNames );


    /** adds an XPropertiesChangeListener to the
        specified property with the specified names.

        <p>The implementation can ignore the names of the properties
        and fire the event on all properties. </p>

        <p>It is suggested to allow multiple registration of the same listener,
        thus for each time a listener is added, it has to be removed.

        @param aPropertyNames
            specifies the names of the properties.

        @param xListener
            contains the listener for the property change events.

        @see removePropertiesChangeListener
     */
    void addPropertiesChangeListener( [in] sequence<string> aPropertyNames,
             [in] com::sun::star::beans::XPropertiesChangeListener xListener );


    /** removes an XPropertiesChangeListener from the listener list.

        <p>It is a "noop" if the listener is not registered.  </p>

        <p>It is suggested to allow multiple registration of the same listener,
        thus for each time a listener is added, it has to be removed.

        @param xListener
            contains the listener to be removed.

        @see addPropertiesChangeListener
     */
    void removePropertiesChangeListener(
            [in] com::sun::star::beans::XPropertiesChangeListener xListener );


    /** fires a sequence of PropertyChangeEvents to the specified
        listener.

        @param aPropertyNames
            specifies the sorted names of the properties.

        @param xListener
            contains the listener for the property change events.
     */
    void firePropertiesChangeEvent( [in] sequence<string> aPropertyNames,
             [in] com::sun::star::beans::XPropertiesChangeListener xListener );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
