/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_beans_PropertyAttribute_idl__
#define __com_sun_star_beans_PropertyAttribute_idl__


 module com {  module sun {  module star {  module beans {


/** These values are used to specify the behavior of a Property.
 */
published constants PropertyAttribute
{

    /** indicates that a property value can be void.

        <p>It does not mean that the type of the property is void!</p>
     */
    const short MAYBEVOID = 1;


    /** indicates that a PropertyChangeEvent will be fired
        to all registered XPropertyChangeListeners whenever the
        value of this property changes.
     */
    const short BOUND = 2;


    /** indicates that a PropertyChangeEvent will be fired
        to all registered XVetoableChangeListeners whenever the
        value of this property is about to change.

            <p>This always implies that the property is <em>bound</em>, too. </p>
     */
    const short CONSTRAINED = 4;


    /** indicates that the value of the property is not persistent.
     */
    const short TRANSIENT = 8;


    /** indicates that the value of the property is read-only.
     */
    const short READONLY = 16;


    /** indicates that the value of the property can be ambiguous.
     */
    const short MAYBEAMBIGUOUS = 32;


    /** indicates that the property can be set to default.
     */
    const short MAYBEDEFAULT = 64;


    /** indicates that the property can be removed
        (i.e., by calling XPropertyContainer::removeProperty()).
     */
    const short REMOVABLE = 128;

    /** @deprecated
        same as PropertyAttribute::REMOVABLE.
     */
    const short REMOVEABLE = 128;

    /** indicates that a property is optional.

        <p>This attribute is not of interest for concrete property
        implementations. It's needed for property specifications inside
        service specifications in UNOIDL.</p>

        @see com::sun::star::reflection::XPropertyTypeDescription
        @see com::sun::star::reflection::XServiceTypeDescription
    @since OOo 1.1.2
     */
    const short OPTIONAL = 256;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
