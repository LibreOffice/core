/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_container_XEnumeration_idl__
#define __com_sun_star_container_XEnumeration_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/container/NoSuchElementException.idl>

#include <com/sun/star/lang/WrappedTargetException.idl>



module com {  module sun {  module star {  module container {


/** provides functionality to enumerate the contents of a container.

    <p>An object that implements the XEnumeration interface
    generates a series of elements, one at a time. Successive calls to
    the <code>XEnumeration::nextElement</code> method return successive
    elements of the series.  </p>

    <p>For example (Java), to print all elements of a vector <var>aVect</var>:
    </p>

    @code{.java}
    for (XEnumeration xEnum = aVect.elements() ; xEnum.hasMoreElements() ; )
    {
        System.out.println( xEnum.nextElement() );
    }
    @endcode


    <p> If the object changed, the behavior of the enumeration is
    not specified. This is not a remote interface.  </p>
 */
published interface XEnumeration: com::sun::star::uno::XInterface
{

    /** tests whether this enumeration contains more elements.
     */
    boolean hasMoreElements();


    /** @returns
            the next element of this enumeration.

        @throws  NoSuchElementException
            if no more elements exist.

        @throws  com::sun::star::lang::WrappedTargetException
            If the implementation has internal reasons for exceptions,
            then wrap these in a com::sun::star::lang::WrappedTargetException
            exception.
     */
    any nextElement()
            raises( com::sun::star::container::NoSuchElementException,
                    com::sun::star::lang::WrappedTargetException );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
