/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_reflection_XServiceConstructorDescription_idl__
#define __com_sun_star_reflection_XServiceConstructorDescription_idl__

#include <com/sun/star/uno/XInterface.idl>

module com {  module sun {  module star {  module reflection {

interface XCompoundTypeDescription;
interface XParameter;

/**
   Reflects a service constructor.

   @since OOo 2.0
 */
interface XServiceConstructorDescription {
    /**
       Returns whether the constructor is a default constructor.

       @return `TRUE` if the constructor is a default constructor
     */
    boolean isDefaultConstructor();

    /**
       Returns the constructor's name.

       @return the constructor's name; for a default constructor, an empty
           `string` is returned
     */
    string getName();

    /**
       Returns the constructor's parameters.

       @return the reflections of all the constructor's parameters, in their
           lexical order; for a default constructor, an empty sequence is
           returned
     */
    sequence<XParameter> getParameters();

    /**
       Returns the exceptions that can be raised by the constructor.

       @return the reflections of all the exceptions that are listed in the
       constructor's <code>raises</code> specification, in no particular order;
       all elements of the returned sequence will be reflections of exception
       types; for a default constructor, an empty sequence is returned (even
       though the mapping of a default constructor in a particular language
       binding may well raise certain UNO exceptions)
     */
    sequence<XCompoundTypeDescription> getExceptions();
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
