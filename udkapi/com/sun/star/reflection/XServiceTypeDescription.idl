/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_reflection_XServiceTypeDescription_idl__
#define __com_sun_star_reflection_XServiceTypeDescription_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/reflection/XInterfaceTypeDescription.idl>
#include <com/sun/star/reflection/XPropertyTypeDescription.idl>


 module com {  module sun {  module star {  module reflection {


/** Reflects a service.

    <p>This type is superseded by XServiceTypeDescription2, which
    supports single-interface&ndash;based services, in addition to the obsolete,
    accumulation-based services.</p>

    <p>The type class of this type is
    com::sun::star::uno::TypeClass::SERVICE.

    @since OOo 1.1.2
  */
published interface XServiceTypeDescription : com::sun::star::reflection::XTypeDescription
{
    /** Returns the type descriptions of the mandatory services
        defined for this service.

        @return a sequence containing service type descriptions, for an
            obsolete, accumulation-based service; for a
            single-interface&ndash;based service, an empty sequence is returned
      */
    sequence< XServiceTypeDescription > getMandatoryServices();

    /** Returns the type descriptions of the optional services
        defined for this service.

        @return a sequence containing service type descriptions, for an
            obsolete, accumulation-based service; for a
            single-interface&ndash;based service, an empty sequence is returned
      */
    sequence< XServiceTypeDescription > getOptionalServices();

    /** Returns the type descriptions of the mandatory interfaces
        defined for this service.

        @return a sequence containing interface type descriptions, for an
            obsolete, accumulation-based service; for a
            single-interface&ndash;based service, an empty sequence is returned
      */
    sequence< XInterfaceTypeDescription > getMandatoryInterfaces();

    /** Returns the type descriptions of the optional interface
        defined for this service.

        @return a sequence containing interface type descriptions, for an
            obsolete, accumulation-based service; for a
            single-interface&ndash;based service, an empty sequence is returned
      */
    sequence< XInterfaceTypeDescription > getOptionalInterfaces();

    /** Returns the properties defined for this service.

        @return a sequence containing property descriptions, for an obsolete,
            accumulation-based service; for a single-interface&ndash;based
            service, an empty sequence is returned
      */
    sequence< XPropertyTypeDescription > getProperties();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
