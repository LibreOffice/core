/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/**
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_reflection_XPublished_idl__
#define __com_sun_star_reflection_XPublished_idl__

#include <com/sun/star/uno/XInterface.idl>

module com {  module sun {  module star {  module reflection {

/**
   Reflects the &ldquo;published&rdquo; status of a UNOIDL entity.

   <p>This interface is intended to be supported by objects that also support
   <type scope="com::sun::star::reflection">XTypeDescription</type>.
   (This interface could have been made an optional sub-interface of
   <type scope="com::sun::star::reflection">XTypeDescription</type>, but is
   instead kept independent for reasons of backwards compatibility.)</p>

   <p>For the various kinds of UNOIDL entities that are represented by objects
   supporting <type scope="com::sun::star::reflection">XTypeDescription</type>
   and its subtypes, this optional interface should be supported as follows:</p>
   <ul>
       <li>Enum types
       (<type scope="com::sun::star::reflection">XEnumTypeDescription</type>),
       plain struct types
       (<type scope="com::sun::star::reflection">XStructTypeDescription</type>),
       polymorphic struct type templates
       (<type scope="com::sun::star::reflection">XStructTypeDescription</type>),
       exception types (<type
       scope="com::sun::star::reflection">XCompoundTypeDescription</type>),
       interface types (<type
       scope="com::sun::star::reflection">XInterfaceTypeDescription2</type>),
       typedefs (<type
       scope="com::sun::star::reflection">XIndirectTypeDescription</type>),
       individual constants (<type
       scope="com::sun::star::reflection">XConstantTypeDescription</type>),
       constant groups (<type
       scope="com::sun::star::reflection">XConstantsTypeDescription</type>),
       single-interface&ndash;based services (<type
       scope="com::sun::star::reflection">XServiceTypeDescription2</type>),
       accumulation-based services (<type
       scope="com::sun::star::reflection">XServiceTypeDescription2</type>),
       interface-based singletons (<type
       scope="com::sun::star::reflection">XSingletonTypeDescription2</type>),
       and service-based singletons (<type
       scope="com::sun::star::reflection">XSingletonTypeDescription2</type>)
       support the notion of being published.  Therefore, for an object that
       represents any such entity,
       <type scope="com::sun::star::reflection">XPublished</type> should be
       supported.</li>

       <li>Sequence types (<type
       scope="com::sun::star::reflection">XIndirectTypeDescription</type>),
       type parameters of polymorphic struct type templates
       (<type scope="com::sun::star::reflection">XTypeDescription</type>),
       instantiated polymorphic struct types
       (<type scope="com::sun::star::reflection">XStructTypeDescription</type>),
       attributes of interface types (<type scope="com::sun::star::reflection">
       XInterfaceAttributeTypeDescription2</type>), methods of interface types
       (<type scope="com::sun::star::reflection">
       XInterfaceMethodTypeDescription</type>), properties of
       accumulation-based services (<type
       scope="com::sun::star::reflection">XPropertyTypeDescription</type>),
       deprecated
       <type scope="com::sun::star::reflection">XArrayTypeDescription</type>s,
       and deprecated
       <type scope="com::sun::star::reflection">XUnionTypeDescription</type>s do
       not support the notion of being published.  Therefore, for an object that
       represents any such entity,
       <type scope="com::sun::star::reflection">XPublished</type> should not be
       supported.</li>
   </ul>

   @since OOo 2.0
*/
interface XPublished {
    /**
       Returns the &ldquo;published&rdquo; status of a UNOIDL entity.

       @return <TRUE/> if the UNOIDL entity represented by this object is
       published
     */
    boolean isPublished();
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
