/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_reflection_XIdlArray_idl__
#define __com_sun_star_reflection_XIdlArray_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>

#include <com/sun/star/lang/ArrayIndexOutOfBoundsException.idl>



 module com {  module sun {  module star {  module reflection {


/** Reflects an IDL sequence and provides dynamic access to instances of
    that sequence.
    This interface supports widening conversion when getting or setting elements.

    @attention
    Although the name of this interface denotes arrays,
    sequences are meant. Don't be obfuscated, arrays are not supported by UNO!
*/
published interface XIdlArray: com::sun::star::uno::XInterface
{
    /** Rellocates the length of the sequence instance.

        @param array
               sequence instance
        @param length
                new length of sequence
     */
    void realloc(
        [inout] any array,
        [in] long length )
        raises( com::sun::star::lang::IllegalArgumentException );

    /** Returns the length of the given sequence.

        @param array
               sequence instance
        @return
                length of sequence
    */
    long getLen( [in] any array )
        raises( com::sun::star::lang::IllegalArgumentException );

    /** Returns element at given index.

        @param aArray
               sequence instance
        @param nIndex
               index
        @return
                value

        @throws IllegalArgumentException
        if the specified object is not a sequence or if the specified object is null

        @throws ArrayIndexOutOfBoundsException
        if the specified index argument is negative, or if it is greater than or equal to the
        length of the specified sequence.
    */
    any get(
        [in] any aArray,
        [in] long nIndex )
        raises( com::sun::star::lang::IllegalArgumentException,
                com::sun::star::lang::ArrayIndexOutOfBoundsException );

    /** Sets a new value at given index.

        @param aArray
               sequence instance
        @param nIndex
               index
        @param aNewValue
               new value to be set

        @throws IllegalArgumentException
        if the specified object is not a sequence or if the specified object is null

        @throws ArrayIndexOutOfBoundsException
        if the specified index argument is negative, or if it is greater than or equal to the
        length of the specified sequence.
    */
    void set(
        [inout] any aArray,
        [in] long nIndex,
        [in] any aNewValue )
        raises( com::sun::star::lang::IllegalArgumentException,
                com::sun::star::lang::ArrayIndexOutOfBoundsException );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
