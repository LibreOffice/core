/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_io_XMarkableStream_idl__
#define __com_sun_star_io_XMarkableStream_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/io/IOException.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>



module com {  module sun {  module star {  module io {

/** makes it possible to set and remove seekable marks to a stream.
 */
published interface XMarkableStream: com::sun::star::uno::XInterface
{
    /** creates a mark of the current position and returns an identifier to it.
     */
    long createMark()
            raises( com::sun::star::io::IOException );

    /** deletes the mark that you previously created with
        XMarkableStream::createMark().

        <p>It is an error to delete a mark if other marks after this
        exist.  In this case, for reasons of robustness, the
        implementation must delete this mark and all others after
        this mark.  </p>
     */
    void deleteMark( [in] long Mark )
            raises( com::sun::star::io::IOException,
                    com::sun::star::lang::IllegalArgumentException );

    /** jumps to a previously created mark.
     */
    void jumpToMark( [in] long nMark )
            raises( com::sun::star::io::IOException,
                    com::sun::star::lang::IllegalArgumentException );


    /** jumps to the furthest position of the stream.
        <p> In the inputstream case, a subsequent read call returns
        data, that was never read or skipped over before. In the
        outputstream case, a subsequent write call will add
        new data at the end of the stream without overwriting existing data.
     */
    void jumpToFurthest()
            raises( com::sun::star::io::IOException );

    /** @returns
            the offset from the current stream position to the
            mark ("current position" - "mark position").

        @param nMark
            identifies the mark which is used as a base
            to calculate the offset of the current position.

        @throws IllegalArgumentException
            if the mark does not exist or is deleted.

        @throws IOException
            if an I/O error has occurred.
     */
    long offsetToMark( [in] long nMark )
            raises( com::sun::star::io::IOException,
                    com::sun::star::lang::IllegalArgumentException );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
