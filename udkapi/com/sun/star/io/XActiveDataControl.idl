/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_io_XActiveDataControl_idl__
#define __com_sun_star_io_XActiveDataControl_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/io/XStreamListener.idl>



module com {  module sun {  module star {  module io {

/** makes it possible to control an active data source.

    <p>This interface should be supported by objects which implement
    XActiveDataSource or XActiveDataSink.</p>
 */
published interface XActiveDataControl: com::sun::star::uno::XInterface
{
    /** registers an object to receive events from this data source.
       <p>It is suggested to allow multiple registration of the same listener,
        thus for each time a listener is added, it has to be removed.
     */
    void addListener( [in] com::sun::star::io::XStreamListener aListener );

    /** unregisters an object to receive events from this data source.

       <p>It is suggested to allow multiple registration of the same listener,
        thus for each time a listener is added, it has to be removed.
     */
    void removeListener( [in] com::sun::star::io::XStreamListener aListener );

    /** starts I/O.

        <p>Either XActiveDataControl::setInputStream() or
        XActiveDataControl::setOutputStream() must be called beforehand.
        </p>

        <p>This method does not block the thread, so reading is
        generally not finished when the method returns. </p>
     */
    void start();

    /** does a weak abort.

        <p>It closes all connected resources and calls
        XInputStream::close() or
        XOutputStream::close() and fires the
        XStreamListener::terminated()-event.</p>
     */
    void terminate();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
