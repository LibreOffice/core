/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_io_XDataInputStream_idl__
#define __com_sun_star_io_XDataInputStream_idl__

#include <com/sun/star/io/XInputStream.idl>

#include <com/sun/star/io/IOException.idl>



module com {  module sun {  module star {  module io {

/** makes it possible to read machine-independent simple data types from a
    stream.
    @see com::sun::star::io::XDataOutputStream
 */
published interface XDataInputStream: com::sun::star::io::XInputStream
{
    /** reads in a boolean. It is an 8-bit value. 0 means FALSE; all
        other values mean TRUE.
     */
    byte readBoolean()
            raises( com::sun::star::io::IOException );

    /** reads an 8-bit byte.
     */
    byte readByte()
            raises( com::sun::star::io::IOException );

    /** reads a 16-bit unicode character.
     */
    char readChar()
            raises( com::sun::star::io::IOException );

    /** reads a 16-bit big endian integer.
     */
    short readShort()
            raises( com::sun::star::io::IOException );

    /** reads a 32-bit big endian integer.
     */
    long readLong()
            raises( com::sun::star::io::IOException );

    /** reads a 64-bit big endian integer.
     */
    hyper readHyper()
            raises( com::sun::star::io::IOException );

    /** reads a 32-bit IEEE float.
     */
    float readFloat()
            raises( com::sun::star::io::IOException );

    /** reads a 64-bit IEEE double.
     */
    double readDouble()
            raises( com::sun::star::io::IOException );

    /** reads a string of UTF encoded characters.
     */
    string readUTF()
            raises( com::sun::star::io::IOException );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
