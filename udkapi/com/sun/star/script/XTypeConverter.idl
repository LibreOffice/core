/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_script_XTypeConverter_idl__
#define __com_sun_star_script_XTypeConverter_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/reflection/XIdlClass.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>

#include <com/sun/star/script/CannotConvertException.idl>

#include <com/sun/star/uno/TypeClass.idl>



 module com {  module sun {  module star {  module script {


/** Interface to provide standard type conversions.

    @see Converter
*/
published interface XTypeConverter: com::sun::star::uno::XInterface
{
    /** Converts the value <code>aFrom</code> to the specified type
        <code>xDestinationType</code>.
        Throws an CannotConvertException if the conversion
        failed.
        @param aFrom
               source value
        @param xDestinationType
               destination type
        @return
                converted value (any carrying value of type <code>xDestinationType</code>
    */
    any convertTo(
        [in] any aFrom,
        [in] type xDestinationType )
        raises( com::sun::star::lang::IllegalArgumentException,
                com::sun::star::script::CannotConvertException );

    /** Converts the value <code>aFrom</code> to the specified simple type
        <code>aDestinationType</code>.
        Throws an CannotConvertException if the conversion
        failed and an com::sun::star::lang::IllegalArgumentException
        if the destination
        com::sun::star::uno::TypeClass is not simple,
        e.g. not long or byte.

        @param aFrom
               source value
        @param aDestinationType
               destination type class
        @return
                converted value (any carrying value of type <code>aDestinationType</code>
    */
    any convertToSimpleType(
        [in] any aFrom,
        [in] com::sun::star::uno::TypeClass aDestinationType )
        raises( com::sun::star::lang::IllegalArgumentException,
                com::sun::star::script::CannotConvertException );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
