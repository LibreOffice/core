{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "977e5d4d_f0efc78d",
        "filename": "vcl/qt5/QtTransferable.cxx",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-04-07T05:56:36Z",
      "side": 1,
      "message": "Just curious, if QtMimeData::hasFormat is case-insensitive (or maybe operates on pre-processed data) - what if the content type string is provided as \";charset\u003dUTF-8\" by the other party?",
      "revId": "5b3227fac58dcbd588e2389e205679cd77842bac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da453f55_09f8df24",
        "filename": "vcl/qt5/QtTransferable.cxx",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-04-07T05:57:52Z",
      "side": 1,
      "message": "... and/or has a space between \u0027;\u0027 and \u0027charset\u0027.",
      "parentUuid": "977e5d4d_f0efc78d",
      "revId": "5b3227fac58dcbd588e2389e205679cd77842bac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97ac9758_a61bc459",
        "filename": "vcl/qt5/QtTransferable.cxx",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-04-07T06:56:20Z",
      "side": 1,
      "message": "At a quick glance at https://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/kernel/qmimedata.cpp#n595 (in particular QMimeData::setData, QMimeDataPrivate::setData, QMimeData::hasFormat), I see no preprocessing at least on that Qt level, so we\u0027d presumably be out of luck then.\nOn the other hand, most Qt applications probably just use QMimeData::text() (mentioned as an alternative in the commit msg) to retrieve the data and would - as I understand it - thus fail the same way, so I\u0027m wondering whether it would actually make sense to try all kinds of variants here on LO side?\n(That\u0027s a serious question, not trying to indirectly say \"It doesn\u0027t make sense.\".)\n\nI think at least in theory, sane behavior should be ensured somewhere on \"lower levels\", ideally a spec that all implementations adhere to, then things being implemented on Qt level that can just be reused from here.\n\nFor Wayland, I found https://wayland.freedesktop.org/docs/html/ch04.html#sect-Protocol-data-sharing - which has this:\n\n\"MIME is defined in RFC\u0027s 2045-2049. A registry of MIME types [1] is maintained by the Internet Assigned Numbers Authority (IANA).\"\n[1] https://www.iana.org/assignments/media-types/media-types.xhtml\n\nOne would probably have to read the RFCs completely, but at least quickly searching for \"charset\" shows all kinds of variants that are used (upper/lower case, with/without space after the semicolon) and RFC6657 (\"Update to MIME regarding \"charset\" Parameter Handling in Textual Media Types.\", linked from the registry of MIME types linked above) uses uppercase values in its text...\n\nSo the short answer is probably that pretty much all places in QtTransferable currently expect lowercase and no space, which seems to be working in practice, but might not match everything that could be possible...\n(More research on lower levels would be needed to give a more definite answer.)",
      "parentUuid": "da453f55_09f8df24",
      "revId": "5b3227fac58dcbd588e2389e205679cd77842bac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7003d095_edf09001",
        "filename": "vcl/qt5/QtTransferable.cxx",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1000789
      },
      "writtenOn": "2022-04-07T10:10:29Z",
      "side": 1,
      "message": "I\u0027ve used the following sample program to validate my assumptions: \n\n#include \u003cQApplication\u003e\n#include \u003cQClipboard\u003e\n#include \u003cQDebug\u003e\n#include \u003cQString\u003e\n#include \u003cQThread\u003e\n#include \u003cQtGlobal\u003e\n#include \u003cQMimeData\u003e\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n\n    QString mimeTypeLowercase(\"text/plain;charset\u003dutf-8\");\n    QString mimeTypeUppercase(\"text/plain;charset\u003dUTF-8\");\n    QString mimeTypeLowercaseWithSpace(\"text/plain; charset\u003dutf-8\");\n    auto types \u003d {mimeTypeLowercase, mimeTypeUppercase, mimeTypeLowercaseWithSpace};\n    QString text(\"维基百科，自由的百科全书\");\n\n    QClipboard* clipboard \u003d QApplication::clipboard();\n\n\n    for (const QString\u0026 charset : types)\n    {\n        clipboard-\u003eclear();\n        // dummy text\n        clipboard-\u003esetText(\"hello\");\n        QMimeData* data \u003d new QMimeData;\n        data-\u003esetData(charset, text.toUtf8());\n        clipboard-\u003esetMimeData(data);\n\n        for (const QString\u0026 type : types)\n        {\n            const QMimeData* clipboardData \u003d clipboard-\u003emimeData();\n            if (clipboardData \u0026\u0026 clipboardData-\u003ehasFormat(type))\n            {\n                QString clipboardText \u003d QString::fromUtf8(clipboard-\u003emimeData()-\u003edata(type));\n                qDebug() \u003c\u003c type \u003c\u003c \": \" \u003c\u003c clipboardText;\n            }\n            else\n                qDebug() \u003c\u003c \"no data for \" \u003c\u003c type;\n        }\n        qDebug() \u003c\u003c \"-----------------------------\";\n    }\n\n    return a.exec();\n}\n\nThe result of running that on Plasma X11 matches my expectation in light of what I wrote earlier; output:\n\n\"text/plain;charset\u003dutf-8\" :  \"维基百科，自由的百科全书\"\nno data for  \"text/plain;charset\u003dUTF-8\"\nno data for  \"text/plain; charset\u003dutf-8\"\n-----------------------------\nno data for  \"text/plain;charset\u003dutf-8\"\n\"text/plain;charset\u003dUTF-8\" :  \"维基百科，自由的百科全书\"\nno data for  \"text/plain; charset\u003dutf-8\"\n-----------------------------\nno data for  \"text/plain;charset\u003dutf-8\"\nno data for  \"text/plain;charset\u003dUTF-8\"\n\"text/plain; charset\u003dutf-8\" :  \"维基百科，自由的百科全书\"\n-----------------------------\n\n\nand when pasting into kate or gedit after running the program, this only works when using \"text/plain;charset\u003dutf-8\", not the other two variants. (I\u0027ve changed the order of `types` between runs to test that.)\n\nIt could still be that Klipper (the KDE clipboard manager) somehow interferes at some stage and behavior on GNOME would be different.\n\n(On Wayland, pasting into kate or gedit doesn\u0027t work at all, probably by some security design.)",
      "parentUuid": "97ac9758_a61bc459",
      "revId": "5b3227fac58dcbd588e2389e205679cd77842bac",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}