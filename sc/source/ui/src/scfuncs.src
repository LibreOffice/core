/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

/* Resource file for the function wizard / autopilot.
 *
 *  For every function there is a StringArray with a resource id (offset by
 *  RID_SC_FUNC_DESCRIPTIONS_START) with the OpCode of the function
 *
 *  In this stringarray, the description of the function is given as the first
 *  entry, followed by two entries for each parameter, first the type or name
 *  of the parameter, second a description of the parameter.
 */

#include "scfuncs.hrc"
#include "formula/compiler.hrc"

 // -=*# Resource for function DCOUNT #*=-
StringArray SC_OPCODE_DB_COUNT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Counts the cells of a data range whose contents match the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DCOUNTA #*=-
StringArray SC_OPCODE_DB_COUNT_2+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Counts all non-blank cells of a data range where the content corresponds to the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DAVERAGE #*=-
StringArray SC_OPCODE_DB_AVERAGE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the average value of all the cells of a data range whose contents match the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DGET #*=-
StringArray SC_OPCODE_DB_GET+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Defines the contents of the cell of a data range which matches the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DMAX #*=-
StringArray SC_OPCODE_DB_MAX+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the maximum value from all of the cells of a data range which correspond to the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DMIN #*=-
StringArray SC_OPCODE_DB_MIN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the minimum of all cells of a data range where the contents correspond to the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DPRODUCT #*=-
StringArray SC_OPCODE_DB_PRODUCT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Multiplies all cells of a data range where the contents match the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DSTDEV #*=-
StringArray SC_OPCODE_DB_STD_DEV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the standard deviation of all cells in a data range whose contents match the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DSTDEVP #*=-
StringArray SC_OPCODE_DB_STD_DEV_P+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the standard deviation with regards to the population of all cells of a data range matching the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DSUM #*=-
StringArray SC_OPCODE_DB_SUM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Adds all the cells of a data range where the contents match the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DVAR #*=-
StringArray SC_OPCODE_DB_VAR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines the variance of all the cells in a data range where the contents match the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DVARP #*=-
StringArray SC_OPCODE_DB_VAR_P+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines variance of a population based on all cells in a data range where contents match the search criteria." ; >;
        < "Database" ; >;
        < "The range of cells containing data." ; >;
        < "Database field" ; >;
        < "Indicates which database field (column) is to be used for the search criteria." ; >;
        < "Search criteria" ; >;
        < "Defines the cell range containing the search criteria." ; >;
    };
};
 // -=*# Resource for function DATE #*=-
StringArray SC_OPCODE_GET_DATE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Provides an internal number for the date given." ; >;
        < "year" ; >;
        < "An integer between 1583 and 9956 or 0 and 99 (19xx or 20xx depending on the defined option)." ; >;
        < "month" ; >;
        < "An integer between 1 and 12 representing the month." ; >;
        < "day" ; >;
        < "An integer between 1 and 31 representing the day of the month." ; >;
    };
};
 // -=*# Resource for function DATE_VALUE #*=-
StringArray SC_OPCODE_GET_DATE_VALUE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns an internal number for a text having a possible date format." ; >;
        < "text" ; >;
        < "A text enclosed in quotation marks which returns a date in a %PRODUCTNAME date format." ; >;
    };
};
 // -=*# Resource for function DAY #*=-
StringArray SC_OPCODE_GET_DAY+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the sequential date of the month as an integer (1-31) in relation to the date value." ; >;
        < "Number" ; >;
        < "The internal number for the date." ; >;
    };
};
 // -=*# Resource for function DAYS360 #*=-
StringArray SC_OPCODE_GET_DIFF_DATE_360+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the number of days between two dates based on a 360-day year." ; >;
        < "Date_1" ; >;
        < "The start date for calculating the difference in days." ; >;
        < "Date_2" ; >;
        < "The end date for calculating the difference in days." ; >;
        < "Type" ; >;
        < "Method used to form differences: Type = 0 denotes US method (NASD), Type = 1 denotes the European method." ; >;
    };
};
 // -=*# Resource for function NETWORKDAYS #*=-
StringArray SC_OPCODE_NETWORKDAYS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of workdays between two dates using arguments to indicate weekenddays and holidays." ; >;
        < "Start Date" ; >;
        < "Start date for calculation." ; >;
        < "End Date" ; >;
        < "End date for calculation." ; >;
        < "list of dates" ; >;
        < "Optional set of one or more dates to be considered as holiday." ; >;
        < "array" ; >;
        < "Optional list of numbers to indicate working (0) and weekend (non-zero) days. When omitted, weekend is Saturday and Sunday." ; >;
    };
};
 // -=*# Resource for function NETWORKDAYS.INTL #*=-
StringArray SC_OPCODE_NETWORKDAYS_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of workdays between two dates using arguments to indicate weekend days and holidays." ; >;
        < "Start Date" ; >;
        < "Start date for calculation." ; >;
        < "End Date" ; >;
        < "End date for calculation." ; >;
        < "number or string" ; >;
        < "Optional number or string to indicate when weekends occur. When omitted, weekend is Saturday and Sunday." ; >;
        < "array" ; >;
        < "Optional set of one or more dates to be considered as holiday." ; >;
    };
};
 // -=*# Resource for function WORKDAY.INTL #*=-
StringArray SC_OPCODE_WORKDAY_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the serial number of the date before or after a number of workdays using arguments to indicate weekend days and holidays." ; >;
        < "Start Date" ; >;
        < "Start date for calculation." ; >;
        < "Days" ; >;
        < "The number of workdays before or after start date." ; >;
        < "number or string" ; >;
        < "Optional number or string to indicate when weekends occur. When omitted, weekend is Saturday and Sunday." ; >;
        < "array" ; >;
        < "Optional set of one or more dates to be considered as holiday." ; >;
    };
};
 // -=*# Resource for function HOUR #*=-
StringArray SC_OPCODE_GET_HOUR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines the sequential number of the hour of the day (0-23) for the time value." ; >;
        < "Number" ; >;
        < "Internal time value" ; >;
    };
};
 // -=*# Resource for function MINUTE #*=-
StringArray SC_OPCODE_GET_MIN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines the sequential number for the minute of the hour (0-59) for the time value." ; >;
        < "Number" ; >;
        < "Internal time value." ; >;
    };
};
 // -=*# Resource for function MONTH #*=-
StringArray SC_OPCODE_GET_MONTH+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines the sequential number of a month of the year (1-12) for the date value." ; >;
        < "Number" ; >;
        < "The internal number of the date." ; >;
    };
};
 // -=*# Resource for function NOW #*=-
StringArray SC_OPCODE_GET_ACT_TIME+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines the current time of the computer." ; >;
    };
};
 // -=*# Resource for function SECOND #*=-
StringArray SC_OPCODE_GET_SEC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines the sequential number of the second of a minute (0-59) for the time value." ; >;
        < "Number" ; >;
        < "The internal time value." ; >;
    };
};
 // -=*# Resource for function TIME #*=-
StringArray SC_OPCODE_GET_TIME+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines a time value from the details for hour, minute and second." ; >;
        < "hour" ; >;
        < "The integer for the hour." ; >;
        < "minute" ; >;
        < "The integer for the minute." ; >;
        < "second" ; >;
        < "The integer for the second." ; >;
    };
};
 // -=*# Resource for function TIMEVALUE #*=-
StringArray SC_OPCODE_GET_TIME_VALUE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a sequential number for a text shown in a possible time entry format." ; >;
        < "text" ; >;
        < "A text enclosed in quotation marks which returns a time in a %PRODUCTNAME time format." ; >;
    };
};
 // -=*# Resource for function TODAY #*=-
StringArray SC_OPCODE_GET_ACT_DATE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines the current date of the computer." ; >;
    };
};
 // -=*# Resource for function WEEKDAY #*=-
StringArray SC_OPCODE_GET_DAY_OF_WEEK+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the day of the week for the date value as an integer." ; >;
        < "Number" ; >;
        < "The internal number for the date." ; >;
        < "Type" ; >;
        < "Fixes the beginning of the week and the type of calculation to be used." ; >;
    };
};
 // -=*# Resource for function YEAR #*=-
StringArray SC_OPCODE_GET_YEAR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the year of a date value as an integer." ; >;
        < "Number" ; >;
        < "Internal number of the date." ; >;
    };
};
 // -=*# Resource for function DAYS #*=-
StringArray SC_OPCODE_GET_DIFF_DATE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the number of days between two dates." ; >;
        < "Date_2" ; >;
        < "The end date for calculating the difference in days." ; >;
        < "Date_1" ; >;
        < "The start date for calculating the difference in days." ; >;
    };
};
 // -=*# Resource for function DATEDIF #*=-
StringArray SC_OPCODE_GET_DATEDIF+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of whole days, months or years between 'start date' and 'end date'."; >;

        < "Start date"; >;

        < "The start date."; >;

        < "End date"; >;

        < "The end date."; >;

        < "Interval"; >;

        < "Interval to be calculated. Can be \"d\", \"m\", \"y\", \"ym\", \"md\" or \"yd\"."; >;
    };
};
 // -=*# Resource for function WEEKNUM #*=-
StringArray SC_OPCODE_WEEK+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the calendar week corresponding to the given date." ; >;
        < "Number" ; >;
        < "The internal number of the date." ; >;
        < "mode" ; >;
        < "Indicates the first day of the week and when week 1 starts." ; >;
    };
};
 // -=*# Resource for function ISOWEEKNUM #*=-
StringArray SC_OPCODE_ISOWEEKNUM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the ISO 8601 calendar week for the given date." ; >;
        < "Number" ; >;
        < "The internal number of the date." ; >;
    };
};
StringArray SC_OPCODE_WEEKNUM_OOO+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the calendar week corresponding to the given date.\nThis function only provides interoperability with %PRODUCTNAME 5.0 and earlier and OpenOffice.org." ; >;
        < "Number" ; >;
        < "The internal number of the date." ; >;
        < "mode" ; >;
        < "Indicates the first day of the week (1 = Sunday, other values = Monday)." ; >;
    };
};
 // -=*# Resource for function EASTERSUNDAY #*=-
StringArray SC_OPCODE_EASTERSUNDAY+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the date of Easter Sunday in a given year."; >;
        < "year"; >;
        < "An integer between 1583 and 9956, or 0 and 99 (19xx or 20xx depending on the option set)."; >;
    };
};
 // -=*# Resource for function PV #*=-
StringArray SC_OPCODE_PV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Present value. Calculates the present value of an investment." ; >;
        < "Rate" ; >;
        < "The rate of interest for the period given." ; >;
        < "NPER" ; >;
        < "The payment period. The total number of periods in which the annuity is paid." ; >;
        < "PMT" ; >;
        < "Regular payments. The constant amount of annuity that is paid in each period." ; >;
        < "FV" ; >;
        < "Future value. The value (final value) to be attained after the last payment." ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
    };
};
 // -=*# Resource for function FV #*=-
StringArray SC_OPCODE_FV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Future value. Returns the future value of an investment based on regular payments and a constant interest rate." ; >;
        < "Rate" ; >;
        < "The rate of interest per period." ; >;
        < "NPER" ; >;
        < "Payment period. The total number of periods in which the annuity (pension) is paid." ; >;
        < "PMT" ; >;
        < "Regular payments. The constant annuity to be paid in each period." ; >;
        < "PV" ; >;
        < "Present value. The current value of a series of payments" ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
    };
};
 // -=*# Resource for function NPER #*=-
StringArray SC_OPCODE_NPER+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Payment period. Calculates the number of payment periods for an investment based on regular payments and a constant interest rate." ; >;
        < "Rate" ; >;
        < "The rate of interest per period." ; >;
        < "PMT" ; >;
        < "Regular payments. The constant annuity to be paid in each period." ; >;
        < "PV" ; >;
        < "Present value. The current value of a series of payments" ; >;
        < "FV" ; >;
        < "Future value. The value (end value) to be attained after the final payment." ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
    };
};
 // -=*# Resource for function PMT #*=-
StringArray SC_OPCODE_PMT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Regular payments. Returns the periodic payment of an annuity, based on regular payments and a fixed periodic interest rate." ; >;
        < "Rate" ; >;
        < "The rate of interest per period." ; >;
        < "NPER" ; >;
        < "Payment period. The total number of periods in which the annuity (pension) is paid." ; >;
        < "PV" ; >;
        < "Present value. The current value of a series of payments" ; >;
        < "FV" ; >;
        < "Future value. The value (end value) to be attained after the final payment." ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
    };
};
 // -=*# Resource for function RATE #*=-
StringArray SC_OPCODE_RATE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the constant interest rate of an investment with regular payments." ; >;
        < "NPER" ; >;
        < "Payment period. The total number of periods in which the annuity (pension) is paid." ; >;
        < "PMT" ; >;
        < "Regular payments. The constant annuity to be paid in each period." ; >;
        < "PV" ; >;
        < "Present value. The current value of a series of payments" ; >;
        < "FV" ; >;
        < "Future value. The value (end value) to be attained after the final payment." ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
        < "Guess" ; >;
        < "Guess. The estimate of the interest rate for the iterative calculating method." ; >;
    };
};
 // -=*# Resource for function IPMT #*=-
StringArray SC_OPCODE_IPMT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Compounded interest. Calculates the interest payment on the principal for an investment with regular payments and a constant interest rate for a given period." ; >;
        < "Rate" ; >;
        < "The rate of interest per period." ; >;
        < "Period" ; >;
        < "Periods. The periods for which the compounded interest is to be calculated. P = 1 denotes for the first period, P = NPER for the last one." ; >;
        < "NPER" ; >;
        < "Payment period. The total number of periods in which the annuity (pension) is paid." ; >;
        < "pv" ; >;
        < "Present value. The current value of a series of payments" ; >;
        < "FV" ; >;
        < "Future value. The value (end value) to be attained after the final payment." ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
    };
};
 // -=*# Resource for function PPMT #*=-
StringArray SC_OPCODE_PPMT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Repayment. Calculates the repayment amount for a period for an investment whereby the payments are at regular intervals and the interest rate constant." ; >;
        < "Rate" ; >;
        < "The interest rate per period." ; >;
        < "Period" ; >;
        < "Period. The period for which the repayments are to be calculated. Per = 1 denotes for the first period, P = NPER for the last" ; >;
        < "NPER" ; >;
        < "The payment period. The total number of periods in which the annuity (pension) is paid." ; >;
        < "PV" ; >;
        < "The present value. The present value or the amount the annuity is currently worth." ; >;
        < "FV" ; >;
        < "Future value. The value (end value) attained after the last payment has been made." ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
    };
};
 // -=*# Resource for function CUMPRINC #*=-
StringArray SC_OPCODE_CUM_PRINC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Cumulative Capital. Calculates the total amount of the repayment share in a period for an investment with constant interest rate." ; >;
        < "Rate" ; >;
        < "The rate of interest per period." ; >;
        < "NPER" ; >;
        < "Payment period. The total number of periods in which the annuity (pension) is paid." ; >;
        < "PV" ; >;
        < "The present value. The present value or the amount the annuity is currently worth." ; >;
        < "S" ; >;
        < "The start period. The first period to be taken into account. S = 1 denotes the very first period." ; >;
        < "E" ; >;
        < "End period. The last period to be taken into account." ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
    };
};
 // -=*# Resource for function CUMIPMT #*=-
StringArray SC_OPCODE_CUM_IPMT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Cumulative compounded interest. Calculates the total amount of the interest share in a period for an investment with a constant interest rate." ; >;
        < "Rate" ; >;
        < "The rate of interest per period." ; >;
        < "NPER" ; >;
        < "Payment period. The total number of periods in which the annuity (pension) is paid." ; >;
        < "pv" ; >;
        < "The present value. The present value or the amount the annuity is currently worth." ; >;
        < "S" ; >;
        < "The start period. The first period to be taken into account. S = 1 denotes the very first period." ; >;
        < "E" ; >;
        < "The end period. The last period to be taken into account." ; >;
        < "Type" ; >;
        < "Type = 1 denotes due at the beginning of the period, = 0 at the end." ; >;
    };
};
 // -=*# Resource for function SYD #*=-
StringArray SC_OPCODE_SYD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the arithmetically declining value of an asset (depreciation) for a specified period." ; >;
        < "Cost" ; >;
        < "Acquisition costs. The initial cost of the asset." ; >;
        < "Salvage" ; >;
        < "Salvage: The remaining value of the asset at the end of its life." ; >;
        < "Life" ; >;
        < "Useful life. The number of periods in the useful life of the asset." ; >;
        < "Period" ; >;
        < "Period. The depreciation period which must have the same time unit as average useful life." ; >;
    };
};
 // -=*# Resource for function SLN #*=-
StringArray SC_OPCODE_SLN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the linear depreciation per period." ; >;
        < "Cost" ; >;
        < "Acquisition cost. The initial cost of an asset." ; >;
        < "Salvage" ; >;
        < "Salvage: The remaining value of the asset at the end of its life." ; >;
        < "Life" ; >;
        < "Useful life. The number of periods in the useful life of the asset." ; >;
    };
};
 // -=*# Resource for function DDB #*=-
StringArray SC_OPCODE_DDB+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the depreciation of an asset for a specific period using the double-declining balance method or declining balance factor." ; >;
        < "Cost" ; >;
        < "Acquisition costs. The initial cost of the asset." ; >;
        < "Salvage" ; >;
        < "Salvage: The remaining value of the asset at the end of its life." ; >;
        < "Life" ; >;
        < "Useful life. The number of periods in the useful life of the asset." ; >;
        < "Period" ; >;
        < "Period. The depreciation period in the same time unit as the average useful life entry." ; >;
        < "Factor" ; >;
        < "Factor. The factor for balance decline. F = 2 means a double declining balance factor" ; >;
    };
};
 // -=*# Resource for function DB #*=-
StringArray SC_OPCODE_DB+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the real depreciation of an asset for a specified period using the fixed-declining balance method." ; >;
        < "Cost" ; >;
        < "Acquisition costs: The initial cost of the asset." ; >;
        < "Salvage" ; >;
        < "Salvage: The remaining value of the asset at the end of its life." ; >;
        < "Life" ; >;
        < "Useful life. The number of periods in the useful life of the asset." ; >;
        < "Period" ; >;
        < "Periods: The period for which the depreciation is calculated. The time unit used for period must be the same as that for the useful life." ; >;
        < "month" ; >;
        < "Months: The number of months in the first year of depreciation." ; >;
    };
};
 // -=*# Resource for function VDB #*=-
StringArray SC_OPCODE_VBD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Variable declining balance. Returns the declining balance depreciation for a particular period." ; >;
        < "Cost" ; >;
        < "Cost. The initial cost of the asset." ; >;
        < "Salvage" ; >;
        < "Salvage. The salvage value of an asset at the end of its useful life." ; >;
        < "Life" ; >;
        < "Useful life. The number of periods in the useful life of the asset." ; >;
        < "S" ; >;
        < "Start. The first period for depreciation in the same time unit as the useful life." ; >;
        < "end" ; >;
        < "End. The last period of the depreciation using the same time unit as for the useful life." ; >;
        < "Factor" ; >;
        < "Factor. The factor for the reduction of the depreciation. F = 2 denotes double rate depreciation." ; >;
        < "Type" ; >;
        < "Do not alter. Type = 1 denotes switch to linear depreciation, type = 0 do not switch." ; >;
    };
};
 // -=*# Resource for function EFFECT #*=-
StringArray SC_OPCODE_EFFECT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the annual net interest rate for a nominal interest rate." ; >;
        < "NOM" ; >;
        < "Nominal Interest" ; >;
        < "P" ; >;
        < "Periods. The number of interest payments per year." ; >;
    };
};
 // -=*# Resource for function NOMINAL #*=-
StringArray SC_OPCODE_NOMINAL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the yearly nominal interest rate as an effective interest rate." ; >;
        < "effect_rate" ; >;
        < "The effective interest rate" ; >;
        < "npery" ; >;
        < "Periods. The number of interest payment per year." ; >;
    };
};
 // -=*# Resource for function NPV #*=-
StringArray SC_OPCODE_NPV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Net present value. Calculates the net present value of an investment based on a series of periodic payments and a discount rate." ; >;
        < "RATE" ; >;
        < "The rate of discount for one period." ; >;
        < "value " ; >;
        < "Value 1, value 2,... are 1 to 30 arguments representing payments and income." ; >;
    };
};
 // -=*# Resource for function IRR #*=-
StringArray SC_OPCODE_IRR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the actuarial rate of interest of an investment excluding costs or profits." ; >;
        < "Values" ; >;
        < "An array or reference to cells whose contents correspond to the payments. " ; >;
        < "Guess" ; >;
        < "Guess. An estimated value of the rate of return to be used for the iteration calculation." ; >;
    };
};
 // -=*# Resource for function MIRR #*=-
StringArray SC_OPCODE_MIRR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the modified internal rate of return for a series of investments."; >;
        < "Values"; >;
        < "An array or reference to cells whose contents correspond to the payments."; >;
        < "investment"; >;
        < "Interest rate for investments (the negative values in the array)."; >;
        < "reinvest_rate"; >;
        < "interest rate for reinvestments (the positive values in the array)."; >;
    };
};
 // -=*# Resource for function ISPMT #*=-
StringArray SC_OPCODE_ISPMT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the amount of interest for constant amortization rates."; >;
        < "rate"; >;
        < "Interest rate for a single amortization rate."; >;
        < "Period"; >;
        < "Number of amortization periods for the calculation of the interest."; >;
        < "total_periods"; >;
        < "Sum total of amortization periods."; >;
        < "invest"; >;
        < "Amount of the investment."; >;
    };
};
 // -=*# Resource for function PDURATION #*=-
StringArray SC_OPCODE_PDURATION+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Duration. Calculates the number of periods required by an investment to attain the desired value." ; >;
        < "RATE" ; >;
        < "The constant rate of interest." ; >;
        < "pv" ; >;
        < "The present value. The current value of the investment." ; >;
        < "FV" ; >;
        < "The future value of the investment." ; >;
    };
};
 // -=*# Resource for function RRI #*=-
StringArray SC_OPCODE_RRI+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Interest. Calculates the interest rate which represents the rate of return from an investment." ; >;
        < "P" ; >;
        < "The number of periods used in the calculation." ; >;
        < "pv" ; >;
        < "Present value. The current value of the investment." ; >;
        < "FV" ; >;
        < "The future value of the investment." ; >;
    };
};
 // -=*# Resource for function ISREF #*=-
StringArray SC_OPCODE_IS_REF+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if value is a reference." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISERR #*=-
StringArray SC_OPCODE_IS_ERR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if the value is an error value not equal to #N/A." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISERROR #*=-
StringArray SC_OPCODE_IS_ERROR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if the value is an error value." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISBLANK #*=-
StringArray SC_OPCODE_IS_EMPTY+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if value refers to an empty cell." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISLOGICAL #*=-
StringArray SC_OPCODE_IS_LOGICAL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if the value carries a logical number format." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISNA #*=-
StringArray SC_OPCODE_IS_NV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if value equals #N/A." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISNONTEXT #*=-
StringArray SC_OPCODE_IS_NON_STRING+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if the value is not text." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISTEXT #*=-
StringArray SC_OPCODE_IS_STRING+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if value is text." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISNUMBER #*=-
StringArray SC_OPCODE_IS_VALUE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if value is a number." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISFORMULA #*=-
StringArray SC_OPCODE_IS_FORMULA+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if the cell is a formula cell." ; >;
        < "reference" ; >;
        < "The cell to be checked." ; >;
    };
};
 // -=*# Resource for function FORMULA #*=-
StringArray SC_OPCODE_FORMULA+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the formula of a formula cell."; >;
        < "Reference"; >;
        < "The formula cell."; >;
    };
};
 // -=*# Resource for function N #*=-
StringArray SC_OPCODE_N+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a value to a number." ; >;
        < "value" ; >;
        < "The value to be interpreted as a number." ; >;
    };
};
 // -=*# Resource for function NA #*=-
StringArray SC_OPCODE_NO_VALUE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Not available. Returns the error value #N/A." ; >;
    };
};
 // -=*# Resource for function TYPE #*=-
StringArray SC_OPCODE_TYPE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the data type of a value (1 = number, 2 = text, 4 = Boolean value, 8 = formula, 16 = error value, 64 = array)." ; >;
        < "value" ; >;
        < "The value for which the data type is to be determined." ; >;
    };
};
 // -=*# Resource for function CELL #*=-
StringArray SC_OPCODE_CELL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines information about address, formatting or contents of a cell."; >;
        < "info_type"; >;
        < "String that specifies the type of information."; >;
        < "Reference"; >;
        < "The position of the cell you want to examine."; >;
    };
};
 // -=*# Resource for function CURRENT #*=-
StringArray SC_OPCODE_CURRENT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the current value of the formula at the present location. " ; >;
    };
};
 // -=*# Resource for function FALSE #*=-
StringArray SC_OPCODE_FALSE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Defines the logical value as FALSE." ; >;
    };
};
 // -=*# Resource for function NOT #*=-
StringArray SC_OPCODE_NOT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Reverses the value of the argument." ; >;
        < "Logical value" ; >;
        < "An expression that can be either TRUE or FALSE." ; >;
    };
};
 // -=*# Resource for function TRUE #*=-
StringArray SC_OPCODE_TRUE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the logical value TRUE." ; >;
    };
};
 // -=*# Resource for function IF #*=-
StringArray SC_OPCODE_IF+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Specifies a logical test to be performed." ; >;
        < "Test" ; >;
        < "Any value or expression which can be either TRUE or FALSE." ; >;
        < "Then_value" ; >;
        < "The result of the function if the logical test returns a TRUE." ; >;
        < "Otherwise_value" ; >;
        < "The result of the function if the logical test returns FALSE." ; >;
    };
};
 // -=*# Resource for function IFERROR #*=-
StringArray SC_OPCODE_IF_ERROR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns value if not an error value, else alternative." ; >;
        < "value" ; >;
        < "The value to be calculated." ; >;
        < "alternative value" ; >;
        < "The alternative to be returned, should value be an error value." ; >;
    };
};
 // -=*# Resource for function IFNA #*=-
StringArray SC_OPCODE_IF_NA+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns value if not a #N/A error, else alternative." ; >;
        < "value" ; >;
        < "The value to be calculated." ; >;
        < "alternative value" ; >;
        < "The alternative to be returned, should value be a #N/A error." ; >;
    };
};
 // -=*# Resource for function OR #*=-
StringArray SC_OPCODE_OR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if an argument is TRUE." ; >;
        < "Logical value " ; >;
        < "Logical value 1, logical value 2,... are 1 to 30 conditions to be tested and which return either TRUE or FALSE." ; >;
    };
};
 // -=*# Resource for function XOR #*=-
StringArray SC_OPCODE_XOR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if an odd number of arguments evaluates to TRUE." ; >;
        < "Logical value " ; >;
        < "Logical value 1, logical value 2, ... are 1 to 30 conditions to be tested and which return either TRUE or FALSE." ; >;
    };
};
 // -=*# Resource for function AND #*=-
StringArray SC_OPCODE_AND+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if all arguments are TRUE." ; >;
        < "Logical value " ; >;
        < "Logical value 1, logical value 2;...are 1 to 30 conditions to be tested and each returns either TRUE or FALSE." ; >;
    };
};
 // -=*# Resource for function ABS #*=-
StringArray SC_OPCODE_ABS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Absolute value of a number." ; >;
        < "Number" ; >;
        < "The number whose absolute value is to be returned." ; >;
    };
};
 // -=*# Resource for function POWER #*=-
StringArray SC_OPCODE_POWER+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a^b, base a raised to the power of exponent b." ; >;
        < "Base" ; >;
        < "The base a of the power a^b." ; >;
        < "Exponent" ; >;
        < "The exponent b of the power a^b." ; >;
    };
};
 // -=*# Resource for function COUNTBLANK #*=-
StringArray SC_OPCODE_COUNT_EMPTY_CELLS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Counts the blank cells in a specified range." ; >;
        < "range" ; >;
        < "The range in which empty cells are to be counted." ; >;
    };
};
 // -=*# Resource for function PI #*=-
StringArray SC_OPCODE_PI+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the value of the number Pi." ; >;
    };
};
 // -=*# Resource for function SUM #*=-
StringArray SC_OPCODE_SUM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the sum of all arguments." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 arguments whose total is to be calculated." ; >;
    };
};
 // -=*# Resource for function SUMSQ #*=-
StringArray SC_OPCODE_SUM_SQ+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the sum of the squares of the arguments." ; >;
        < "number " ; >;
        < "Number 1, number 2,... are 1 to 30 arguments for which the sum of the squares is to be calculated." ; >;
    };
};
 // -=*# Resource for function PRODUCT #*=-
StringArray SC_OPCODE_PRODUCT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Multiplies the arguments." ; >;
        < "Number " ; >;
        < "Number 1, number 2, ... are 1 to 30 arguments to be multiplied and a result returned." ; >;
    };
};
 // -=*# Resource for function SUMIF #*=-
StringArray SC_OPCODE_SUM_IF+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Totals the arguments that meet the condition." ; >;
        < "range" ; >;
        < "The range to be evaluated by the criteria given." ; >;
        < "criteria" ; >;
        < "The criteria to be applied to the range." ; >;
        < "sum_range" ; >;
        < "The range from which the values are to be totalled." ; >;
    };
};

// -=*# Resource for function AVERAGEIF #*=-
StringArray SC_OPCODE_AVERAGE_IF+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Averages the arguments that meet the conditions." ; >;
        < "range" ; >;
        < "The range to be evaluated by the criteria given." ; >;
        < "criteria" ; >;
        < "The criteria to be applied to the range." ; >;
        < "average_range" ; >;
        < "The range from which the values are to be averaged." ; >;
    };
};

StringArray SC_OPCODE_SUM_IFS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Totals the values of cells in a range that meet multiple criteria in multiple ranges." ; >;
        < "sum_range" ; >;
        < "The range from which the values are to be totalled." ; >;
        < "range " ; >;
        < "Range 1, range 2,... are the ranges to be evaluated by the criteria given." ; >;
        < "criteria " ; >;
        < "Criteria 1, criteria 2,... are the criteria to be applied to the ranges given." ; >;
    };
};

// -=*# Resource for function AVERAGEIFS #*=-
StringArray SC_OPCODE_AVERAGE_IFS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Averages the value of the cells that meet multiple criteria in multiple ranges." ; >;
        < "average_range" ; >;
        < "The range from which the values are to be averaged." ; >;
        < "range " ; >;
        < "Range 1, range 2,... are the ranges to be evaluated by the criteria given." ; >;
        < "criteria " ; >;
        < "Criteria 1, criteria 2,... are the criteria to be applied to the ranges given." ; >;
    };
};

// -=*# Resource for function COUNTIFS #*=-
StringArray SC_OPCODE_COUNT_IFS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Counts the cells that meet multiple criteria in multiple ranges." ; >;
        < "range " ; >;
        < "Range 1, range 2,... are the ranges to be evaluated by the criteria given." ; >;
        < "criteria " ; >;
        < "Criteria 1, criteria 2,... are the criteria to be applied to the ranges given." ; >;
    };
};

 // -=*# Resource for function COUNTIF #*=-
StringArray SC_OPCODE_COUNT_IF+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Counts the arguments which meet the set conditions." ; >;
        < "range" ; >;
        < "The range of cells to be evaluated by the criteria given." ; >;
        < "criteria" ; >;
        < "The criteria to be applied to the range." ; >;
    };
};
 // -=*# Resource for function SQRT #*=-
StringArray SC_OPCODE_SQRT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the square root of a number." ; >;
        < "number" ; >;
        < "A positive value for which the square root is to be calculated." ; >;
    };
};
 // -=*# Resource for function RAND #*=-
StringArray SC_OPCODE_RANDOM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a random number between 0 and 1." ; >;
    };
};
 // -=*# Resource for function ISEVEN #*=-
StringArray SC_OPCODE_IS_EVEN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if value is an even integer." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function ISODD #*=-
StringArray SC_OPCODE_IS_ODD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns TRUE if value is an odd integer." ; >;
        < "value" ; >;
        < "The value to be tested." ; >;
    };
};
 // -=*# Resource for function COMBIN #*=-
StringArray SC_OPCODE_COMBIN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the number of combinations for elements without repetition." ; >;
        < "number_1" ; >;
        < "The total number of elements." ; >;
        < "number_2" ; >;
        < "The number of elements selected." ; >;
    };
};
 // -=*# Resource for function COMBINA #*=-
StringArray SC_OPCODE_COMBIN_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the number of combinations of elements including repetition." ; >;
        < "number_1" ; >;
        < "The total number of elements." ; >;
        < "number_2" ; >;
        < "The number of elements selected." ; >;
    };
};
 // -=*# Resource for function ARCCOS #*=-
StringArray SC_OPCODE_ARC_COS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the arccosine of a number." ; >;
        < "Number" ; >;
        < "A value between -1 and 1 for which the arccosine is to be returned." ; >;
    };
};
 // -=*# Resource for function ARCSIN #*=-
StringArray SC_OPCODE_ARC_SIN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the arcsine of a number." ; >;
        < "Number" ; >;
        < "A value between -1 and 1 for which the arcsine is to be returned." ; >;
    };
};
 // -=*# Resource for function ARCCOSHYP #*=-
StringArray SC_OPCODE_ARC_COS_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the inverse hyperbolic cosine of a number." ; >;
        < "Number" ; >;
        < "A value greater than or equal to 1 for which the inverse hyperbolic cosine is to be returned." ; >;
    };
};
 // -=*# Resource for function ARCSINHYP #*=-
StringArray SC_OPCODE_ARC_SIN_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the inverse hyperbolic sine of a number." ; >;
        < "Number" ; >;
        < "The value for which the inverse hyperbolic sine is to be returned." ; >;
    };
};
 // -=*# Resource for function ARCCOT #*=-
StringArray SC_OPCODE_ARC_COT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the inverse cotangent of a number." ; >;
        < "Number" ; >;
        < "The value for which the inverse cotangent is to be returned." ; >;
    };
};
 // -=*# Resource for function ARCTAN #*=-
StringArray SC_OPCODE_ARC_TAN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the arctangent of a number." ; >;
        < "Number" ; >;
        < "The value for which the arctangent is to be returned." ; >;
    };
};
 // -=*# Resource for function ARCCOTHYP #*=-
StringArray SC_OPCODE_ARC_COT_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the inverse hyperbolic cotangent of a number." ; >;
        < "Number" ; >;
        < "A value smaller than -1 or greater than 1 for which the inverse hyperbolic cotangent is to be returned." ; >;
    };
};
 // -=*# Resource for function ARCTANHYP #*=-
StringArray SC_OPCODE_ARC_TAN_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the inverse hyperbolic tangent of a number." ; >;
        < "Number" ; >;
        < "A value between -1 and 1 for which the inverse hyperbolic tangent is to be returned." ; >;
    };
};
 // -=*# Resource for function COS #*=-
StringArray SC_OPCODE_COS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the cosine of a number." ; >;
        < "Number" ; >;
        < "The angle in the radians for which the cosine is to be returned." ; >;
    };
};
 // -=*# Resource for function SIN #*=-
StringArray SC_OPCODE_SIN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the sine of a number." ; >;
        < "number" ; >;
        < "The angle in radians for which the sine is to be calculated." ; >;
    };
};
 // -=*# Resource for function COT #*=-
StringArray SC_OPCODE_COT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the cotangent of a number." ; >;
        < "Number" ; >;
        < "The angle in radians whose cotangent value is to be returned." ; >;
    };
};
 // -=*# Resource for function TAN #*=-
StringArray SC_OPCODE_TAN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the tangent of a number." ; >;
        < "number" ; >;
        < "The angle in radians for which the tangent is to be calculated." ; >;
    };
};
 // -=*# Resource for function COSHYP #*=-
StringArray SC_OPCODE_COS_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the hyperbolic cosine of a number." ; >;
        < "Number" ; >;
        < "The value for which the hyperbolic cosine is to be returned." ; >;
    };
};
 // -=*# Resource for function SINHYP #*=-
StringArray SC_OPCODE_SIN_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the hyperbolic sine of a number." ; >;
        < "number" ; >;
        < "The value for which the hyperbolic sine is to be calculated." ; >;
    };
};
 // -=*# Resource for function COTHYP #*=-
StringArray SC_OPCODE_COT_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the hyperbolic cotangent of a number." ; >;
        < "Number" ; >;
        < "A value not equal to 0 for which the hyperbolic cotangent is to be returned." ; >;
    };
};
 // -=*# Resource for function TANHYP #*=-
StringArray SC_OPCODE_TAN_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the hyperbolic tangent of a number." ; >;
        < "number" ; >;
        < "The value for which the hyperbolic tangent is to be calculated." ; >;
    };
};
 // -=*# Resource for function ARCTAN2 #*=-
StringArray SC_OPCODE_ARC_TAN_2+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the arctangent for the specified coordinates." ; >;
        < "number_x" ; >;
        < "The value for the x coordinate." ; >;
        < "number_y" ; >;
        < "The value for the y coordinate." ; >;
    };
};

// -=*# Resource for function CSC #*=-
StringArray SC_OPCODE_COSECANT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Return the cosecant of an angle. CSC(x)=1/SIN(x)" ; >;
        < "Angle" ; >;
        < "The angle in radians for which the cosecant is to be calculated." ; >;
    };
};

// -=*# Resource for function SEC #*=-
StringArray SC_OPCODE_SECANT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Return the secant of an angle. SEC(x)=1/COS(x)" ; >;
        < "Angle" ; >;
        < "The angle in radians for which the secant is to be calculated." ; >;
    };
};
// -=*# Resource for function CSCH #*=-
StringArray SC_OPCODE_COSECANT_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Return the hyperbolic cosecant of a hyperbolic angle. CSCH(x)=1/SINH(x)" ; >;
        < "Angle" ; >;
        < "The hyperbolic angle in radians for which the hyperbolic cosecant is to be calculated." ; >;
    };
};
// -=*# Resource for function SECH #*=-
StringArray SC_OPCODE_SECANT_HYP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Return the hyperbolic secant of a hyperbolic angle. SECH(x)=1/COSH(x)" ; >;
        < "Angle" ; >;
        < "The hyperbolic angle in radians for which the hyperbolic secant is to be calculated." ; >;
    };
};

 // -=*# Resource for function DEG #*=-
StringArray SC_OPCODE_DEG+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a radian to degrees" ; >;
        < "Number" ; >;
        < "The angle in a radian" ; >;
    };
};
 // -=*# Resource for function RAD #*=-
StringArray SC_OPCODE_RAD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts degrees to radians" ; >;
        < "Number" ; >;
        < "The angle in degrees." ; >;
    };
};
 // -=*# Resource for function EXP #*=-
StringArray SC_OPCODE_EXP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the exponent for basis e." ; >;
        < "Number" ; >;
        < "The exponent applied to base e." ; >;
    };
};
 // -=*# Resource for function LOG #*=-
StringArray SC_OPCODE_LOG+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the logarithm to any specified base." ; >;
        < "Number" ; >;
        < "A value greater than 0 for which the logarithm is to be calculated." ; >;
        < "Base" ; >;
        < "The base of the logarithm. If omitted, the base is regarded as 10." ; >;
    };
};
 // -=*# Resource for function LN #*=-
StringArray SC_OPCODE_LN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the natural logarithm of a number." ; >;
        < "Number" ; >;
        < "A value greater than 0 for which the natural logarithm is to be calculated." ; >;
    };
};
 // -=*# Resource for function LOG10 #*=-
StringArray SC_OPCODE_LOG10+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the base-10 logarithm of a number." ; >;
        < "Number" ; >;
        < "A value greater than 0 for which the logarithm is to be calculated." ; >;
    };
};
 // -=*# Resource for function FACT #*=-
StringArray SC_OPCODE_FACT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the factorial of a number." ; >;
        < "Number" ; >;
        < "The number for which the factorial is to be calculated." ; >;
    };
};
 // -=*# Resource for function MOD #*=-
StringArray SC_OPCODE_MOD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the remainder of a division." ; >;
        < "Dividend" ; >;
        < "The number to be divided." ; >;
        < "Divisor" ; >;
        < "The number by which the dividend is divided." ; >;
    };
};
 // -=*# Resource for function SIGN #*=-
StringArray SC_OPCODE_PLUS_MINUS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the algebraic sign of a number." ; >;
        < "Number" ; >;
        < "The number for which the algebraic sign is to be determined." ; >;
    };
};
 // -=*# Resource for function SUBTOTAL #*=-
StringArray SC_OPCODE_SUB_TOTAL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates subtotals in a spreadsheet." ; >;
        < "Function" ; >;
        < "Function index. Is an index of the possible functions Total, Max, ..." ; >;
        < "range " ; >;
        < "The cells of the range which are to be taken into account." ; >;
    };
};
 // -=*# Resource for function AGGREGATE #*=-
StringArray SC_OPCODE_AGGREGATE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates an aggregate in a spreadsheet." ; >;
        < "Function" ; >;
        < "Function index. Is an index of the possible functions Total, Max, ..." ; >;
        < "Options" ; >;
        < "Option index. Is an index of the possible ignore options." ; >;
        < "Ref1 or array " ; >;
        < "The cell(s) of the range which are to be taken into account." ; >;
        < "Ref2..n or k " ; >;
        < "The cells of the range which are to be taken into account or mandatory 2nd argument for certain functions." ; >;
    };
};
 // -=*# Resource for function INT #*=-
StringArray SC_OPCODE_INT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number down to the nearest integer." ; >;
        < "Number" ; >;
        < "The number to be rounded down." ; >;
    };
};
 // -=*# Resource for function TRUNC #*=-
StringArray SC_OPCODE_TRUNC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Truncates the decimal places of a number." ; >;
        < "number" ; >;
        < "The number to be truncated." ; >;
        < "count" ; >;
        < "The number of places after the decimal point that are not to be truncated." ; >;
    };
};
 // -=*# Resource for function ROUND #*=-
StringArray SC_OPCODE_ROUND+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number to a predefined accuracy." ; >;
        < "number" ; >;
        < "The number to be rounded." ; >;
        < "count" ; >;
        < "The number of places to which a number is to be rounded." ; >;
    };
};
 // -=*# Resource for function ROUNDUP #*=-
StringArray SC_OPCODE_ROUND_UP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number up to the predefined accuracy." ; >;
        < "number" ; >;
        < "The number to be rounded up." ; >;
        < "count" ; >;
        < "The number of places to which a number is to be rounded." ; >;
    };
};
 // -=*# Resource for function ROUNDDOWN #*=-
StringArray SC_OPCODE_ROUND_DOWN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number down to a predefined accuracy." ; >;
        < "number" ; >;
        < "The number to be rounded down." ; >;
        < "count" ; >;
        < "The number of places down to which a number is to be rounded." ; >;
    };
};
 // -=*# Resource for function EVEN #*=-
StringArray SC_OPCODE_EVEN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a positive number up and negative number down to the nearest even integer."; >;
        < "Number" ; >;
        < "The number to be rounded up." ; >;
    };
};
 // -=*# Resource for function ODD #*=-
StringArray SC_OPCODE_ODD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a positive number up and negative number down to the nearest odd integer."; >;
        < "Number" ; >;
        < "The number to be rounded up." ; >;
    };
};
 // -=*# Resource for function CEILING.XCL #*=-
StringArray SC_OPCODE_CEIL_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number away from zero to the nearest multiple of significance.\nThis function exists for interoperability with Microsoft Excel 2007 or older versions." ; >;
        < "Number" ; >;
        < "The number to be rounded up." ; >;
        < "Significance" ; >;
        < "The number to whose multiple the value is rounded." ; >;
    };
};
 // -=*# Resource for function CEILING.PRECISE #*=-
StringArray SC_OPCODE_CEIL_PRECISE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number up to the nearest multiple of significance, regardless of sign of significance." ; >;
        < "Number" ; >;
        < "The number to be rounded up." ; >;
        < "Significance" ; >;
        < "The number to whose multiple the value is rounded." ; >;
    };
};
 // -=*# Resource for function ISO.CEILING #*=-
StringArray SC_OPCODE_CEIL_ISO+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number up to the nearest multiple of significance, regardless of sign of significance." ; >;
        < "Number" ; >;
        < "The number to be rounded up." ; >;
        < "Significance" ; >;
        < "The number to whose multiple the value is rounded." ; >;
    };
};
 // -=*# Resource for function CEILING #*=-
StringArray SC_OPCODE_CEIL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number up to the nearest multiple of significance." ; >;
        < "Number" ; >;
        < "The number to be rounded up." ; >;
        < "Significance" ; >;
        < "If given the number to whose multiple the value is rounded, else -1 or 1 depending on sign of Number." ; >;
        < "Mode" ; >;
        < "If given and not equal to zero then rounded up according to amount when a negative number and significance." ; >;
    };
};
 // -=*# Resource for function CEILING.MATH #*=-
StringArray SC_OPCODE_CEIL_MATH+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number up to the nearest multiple of significance." ; >;
        < "Number" ; >;
        < "The number to be rounded up." ; >;
        < "Significance" ; >;
        < "If given the number to whose multiple the value is rounded, else 1." ; >;
        < "Mode" ; >;
        < "For negative numbers; if given and not equal to zero then rounds away from zero, else rounds towards zero." ; >;
    };
};
 // -=*# Resource for function FLOOR #*=-
StringArray SC_OPCODE_FLOOR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds number down to the nearest multiple of significance." ; >;
        < "Number" ; >;
        < "The number to be rounded down." ; >;
        < "Significance" ; >;
        < "The number to whose multiple the value is to be rounded down." ; >;
        < "Mode" ; >;
        < "If given and not equal to zero then rounded towards zero with negative number and significance." ; >;
    };
};
 // -=*# Resource for function FLOOR.XCL #*=-
StringArray SC_OPCODE_FLOOR_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds number towards zero to the nearest multiple of absolute value of significance.\nThis function exists for interoperability with Microsoft Excel 2007 or older versions." ; >;
        < "Number" ; >;
        < "The number to be rounded down." ; >;
        < "Significance" ; >;
        < "The number to whose multiple the value is to be rounded down." ; >;
    };
};
 // -=*# Resource for function FLOOR.MATH #*=-
StringArray SC_OPCODE_FLOOR_MATH+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds number down to the nearest multiple of significance, regardless of sign of significance." ; >;
        < "Number" ; >;
        < "The number to be rounded down." ; >;
        < "Significance" ; >;
        < "The number to whose multiple the value is to be rounded down." ; >;
        < "Mode" ; >;
        < "For negative numbers; if given and not equal to or less than zero rounds towards zero." ; >;
    };
};
 // -=*# Resource for function FLOOR.PRECISE #*=-
StringArray SC_OPCODE_FLOOR_PRECISE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds number down (towards -∞) to the nearest multiple of significance." ; >;
        < "Number" ; >;
        < "The number to be rounded down." ; >;
        < "Significance" ; >;
        < "The number to whose multiple the value is to be rounded down. Sign has no meaning." ; >;
    };
};
 // -=*# Resource for function GCD #*=-
StringArray SC_OPCODE_GCD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Greatest Common Divisor" ; >;
        < "Integer " ; >;
        < "Integer 1; integer 2,... are integers for which the greatest common divisor is to be calculated." ; >;
    };
};
 // -=*# Resource for function LCM #*=-
StringArray SC_OPCODE_LCM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Lowest common multiple" ; >;
        < "Integer " ; >;
        < "Integer 1; integer 2,... are integers whose smallest common multiple is to be calculated." ; >;
    };
};
 // -=*# Resource for function TRANSPOSE #*=-
StringArray SC_OPCODE_MAT_TRANS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Array transposition. Exchanges the rows and columns of an array." ; >;
        < "array" ; >;
        < "The array in which the rows and columns have been transposed." ; >;
    };
};
 // -=*# Resource for function MMULT #*=-
StringArray SC_OPCODE_MAT_MULT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Array multiplication. Returns the product of two arrays." ; >;
        < "array_1" ; >;
        < "The first array for the array product." ; >;
        < "array_2" ; >;
        < "The second array having the same number of rows as the first array has columns." ; >;
    };
};
 // -=*# Resource for function MDETERM #*=-
StringArray SC_OPCODE_MAT_DET+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the array determinant." ; >;
        < "array" ; >;
        < "The array for which the determinant is to be determined." ; >;
    };
};
 // -=*# Resource for function MINVERSE #*=-
StringArray SC_OPCODE_MAT_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the inverse of an array." ; >;
        < "array" ; >;
        < "The array to be inverted." ; >;
    };
};
 // -=*# Resource for function MUNIT #*=-
StringArray SC_OPCODE_MATRIX_UNIT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the unitary square array of a certain size." ; >;
        < "Dimensions" ; >;
        < "The size of the unitary array." ; >;
    };
};
 // -=*# Resource for function SUMPRODUCT #*=-
StringArray SC_OPCODE_SUM_PRODUCT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "(Inner products) Returns the sum of the products of array arguments." ; >;
        < "Array " ; >;
        < "Array 1, array 2, ... are up to 30 arrays whose arguments are to be multiplied." ; >;
    };
};
 // -=*# Resource for function SUMX2MY2 #*=-
StringArray SC_OPCODE_SUM_X2MY2+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the sum of the difference of squares of two arrays." ; >;
        < "array_x" ; >;
        < "First array where the square of the arguments are totalled." ; >;
        < "array_y" ; >;
        < "Second array where the square of the arguments is to be subtracted." ; >;
    };
};
 // -=*# Resource for function SUMX2PY2 #*=-
StringArray SC_OPCODE_SUM_X2DY2+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the total of the square sum of two arrays." ; >;
        < "array_x" ; >;
        < "First array where the square of the arguments are totalled." ; >;
        < "array_y" ; >;
        < "Second array where the square of the arguments is to be totalled." ; >;
    };
};
 // -=*# Resource for function SUMXMY2 #*=-
StringArray SC_OPCODE_SUM_XMY2+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the sum of squares of differences of two arrays." ; >;
        < "array_x" ; >;
        < "First array for forming argument differences." ; >;
        < "array_y" ; >;
        < "Second array for forming the argument differences." ; >;
    };
};

 // -=*# Resource for function FREQUENCY #*=-
StringArray SC_OPCODE_FREQUENCY+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a frequency distribution as a vertical array." ; >;
        < "data" ; >;
        < "The array of the data." ; >;
        < "classes" ; >;
        < "The array for forming classes." ; >;
    };
};
 // -=*# Resource for function LINEST #*=-
StringArray SC_OPCODE_LINEST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates parameters of the linear regression as an array." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array." ; >;
        < "Linear_type" ; >;
        < "If type = 0 the linears will be calculated through the zero point, or else moved linears." ; >;
        < "stats" ; >;
        < "If parameter = 0 then only the regression coefficient will be calculated, otherwise other values as well." ; >;
    };
};
 // -=*# Resource for function LOGEST #*=-
StringArray SC_OPCODE_LOGEST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the parameters of the exponential regression curve as an array." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array." ; >;
        < "Function_type" ; >;
        < "If type = 0 then the functions will be calculated in the form of y=m^x, or also functions y=b*m^x." ; >;
        < "stats" ; >;
        < "If parameter = 0 then only the regression coefficient will be calculated, otherwise other values as well." ; >;
    };
};
 // -=*# Resource for function TREND #*=-
StringArray SC_OPCODE_TREND+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates points along a regression line." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array as the basis for the regression." ; >;
        < "new data_X" ; >;
        < "The array of X data for recalculating the values." ; >;
        < "Linear_type" ; >;
        < "If type = 0 the linears will be calculated through the zero point, or else moved linears." ; >;
    };
};
 // -=*# Resource for function GROWTH #*=-
StringArray SC_OPCODE_GROWTH+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates points on the exponential regression function." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array as the basis for the regression." ; >;
        < "new_data_X" ; >;
        < "The array of X data for recalculating the values." ; >;
        < "Function_type" ; >;
        < "If type = 0 then the functions will be calculated in the form of y=m^x, or also functions y=b*m^x." ; >;
    };
};
 // -=*# Resource for function COUNT #*=-
StringArray SC_OPCODE_COUNT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Counts how many numbers are in the list of arguments." ; >;
        < "value " ; >;
        < "Value 1, value 2, ... are 1 to 30 arguments containing different data types but where only numbers are counted." ; >;
    };
};
 // -=*# Resource for function COUNTA #*=-
StringArray SC_OPCODE_COUNT_2+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Counts how many values are in the list of arguments." ; >;
        < "value " ; >;
        < "Value 1, value 2, ... are 1 to 30 arguments representing the values to be counted." ; >;
    };
};
 // -=*# Resource for function MAX #*=-
StringArray SC_OPCODE_MAX+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the maximum value in a list of arguments." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments for which the largest number is to be determined." ; >;
    };
};
 // -=*# Resource for function MAXA #*=-
StringArray SC_OPCODE_MAX_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the maximum value in a list of arguments. Text is evaluated as Zero."; >;
        < "value "; >;
        < "Value 1, value 2,    are 1 to 30 arguments whose largest value is to be determined."; >;
    };
};
 // -=*# Resource for function MIN #*=-
StringArray SC_OPCODE_MIN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the minimum value in a list of arguments." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments for which the smallest number is to be determined." ; >;
    };
};
 // -=*# Resource for function MINA #*=-
StringArray SC_OPCODE_MIN_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the smallest value in a list of arguments. Text is evaluated as zero."; >;
        < "value "; >;
        < "Value 1; value 2;... are 1 to 30 arguments whose smallest number is to be determined."; >;
    };
};
 // -=*# Resource for function VAR #*=-
StringArray SC_OPCODE_VAR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the variance based on a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample of a population." ; >;
    };
};
 // -=*# Resource for function VAR.S #*=-
StringArray SC_OPCODE_VAR_S+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the variance based on a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample of a population." ; >;
    };
};
 // -=*# Resource for function VARA #*=-
StringArray SC_OPCODE_VAR_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the variance based on a sample. Text is evaluated as zero."; >;
        < "value "; >;
        < "Value 1; value 2; ... are 1 to 30 arguments representing a sample taken from a basic total population."; >;
    };
};
 // -=*# Resource for function VARP #*=-
StringArray SC_OPCODE_VAR_P+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates variance based on the entire population." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which represent a population." ; >;
    };
};
 // -=*# Resource for function VAR.P #*=-
StringArray SC_OPCODE_VAR_P_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates variance based on the entire population." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which represent a population." ; >;
    };
};
 // -=*# Resource for function VARPA #*=-
StringArray SC_OPCODE_VAR_P_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the variance based on the entire population. Text is evaluated as zero."; >;
        < "value "; >;
        < "Value 1; value 2;... are 1 to 30 arguments representing a population."; >;
    };
};
 // -=*# Resource for function STDEV #*=-
StringArray SC_OPCODE_ST_DEV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the standard deviation based on a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample of a population." ; >;
    };
};
 // -=*# Resource for function STDEV.S #*=-
StringArray SC_OPCODE_ST_DEV_S+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the standard deviation based on a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample of a population." ; >;
    };
};
 // -=*# Resource for function STDEVA #*=-
StringArray SC_OPCODE_ST_DEV_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the standard deviation based on a sample. Text is evaluated as zero."; >;
        < "value "; >;
        < "Value 1; value 2; ... are 1 to 30 arguments representing a sample taken from a basic total population."; >;
    };
};
 // -=*# Resource for function STDEVP #*=-
StringArray SC_OPCODE_ST_DEV_P+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the standard deviation based on the entire population." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a population." ; >;
    };
};
 // -=*# Resource for function STDEV.P #*=-
StringArray SC_OPCODE_ST_DEV_P_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the standard deviation based on the entire population." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a population." ; >;
    };
};
 // -=*# Resource for function STDEVPA #*=-
StringArray SC_OPCODE_ST_DEV_P_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the standard deviation based on the entire population. Text is evaluated as zero."; >;
        < "value "; >;
        < "Value 1; value 2;... are 1 to 30 arguments corresponding to a population."; >;
    };
};
 // -=*# Resource for function AVERAGE #*=-
StringArray SC_OPCODE_AVERAGE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the average of a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2;...are 1 to 30 numeric arguments representing a population sample." ; >;
    };
};
 // -=*# Resource for function AVERAGEA #*=-
StringArray SC_OPCODE_AVERAGE_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the average value for a sample. Text is evaluated as zero."; >;
        < "value "; >;
        < "Value 1; value 2; ... are 1 to 30 arguments representing a sample taken from a basic total population."; >;
    };
};
 // -=*# Resource for function DEVSQ #*=-
StringArray SC_OPCODE_DEV_SQ+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the sum of squares of deviations from the sample mean value" ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample." ; >;
    };
};
 // -=*# Resource for function AVEDEV #*=-
StringArray SC_OPCODE_AVE_DEV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the average of the absolute deviations of a sample from the mean." ; >;
        < "number " ; >;
        < "Number 1, number 2;...are 1 to 30 numerical arguments representing a sample." ; >;
    };
};
 // -=*# Resource for function SKEW #*=-
StringArray SC_OPCODE_SKEW+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the skewness of a distribution." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments portraying a sample of the distribution." ; >;
    };
};
 // -=*# Resource for function SKEWP #*=-
StringArray SC_OPCODE_SKEWP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the skewness of a distribution using the population of a random variable." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments portraying the population." ; >;
    };
};
 // -=*# Resource for function KURT #*=-
StringArray SC_OPCODE_KURT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the kurtosis of a distribution." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments, representing a sample of the distribution." ; >;
    };
};
 // -=*# Resource for function GEOMEAN #*=-
StringArray SC_OPCODE_GEO_MEAN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the geometric mean of a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample." ; >;
    };
};
 // -=*# Resource for function HARMEAN #*=-
StringArray SC_OPCODE_HAR_MEAN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the harmonic mean of a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample." ; >;
    };
};
 // -=*# Resource for function MODE #*=-
StringArray SC_OPCODE_MODAL_VALUE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the most common value in a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample." ; >;
    };
};
 // -=*# Resource for function MODE.SNGL #*=-
StringArray SC_OPCODE_MODAL_VALUE_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the most common value in a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample." ; >;
    };
};
 // -=*# Resource for function MODE.MULT #*=-
StringArray SC_OPCODE_MODAL_VALUE_MULTI+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the most common value in a sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 254 numerical arguments which portray a sample." ; >;
    };
};
 // -=*# Resource for function MEDIAN #*=-
StringArray SC_OPCODE_MEDIAN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the median of a given sample." ; >;
        < "number " ; >;
        < "Number 1, number 2, ... are 1 to 30 numerical arguments which portray a sample." ; >;
    };
};
 // -=*# Resource for function PERCENTILE #*=-
StringArray SC_OPCODE_PERCENTILE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the alpha quantile of a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Alpha" ; >;
        < "The percentage rate of the quantile between 0 and 1." ; >;
    };
};
 // -=*# Resource for function PERCENTILE.EXC #*=-
StringArray SC_OPCODE_PERCENTILE_EXC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the alpha percentile of a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Alpha" ; >;
        < "The percentile value, range 0...1, exclusive." ; >;
    };
};
 // -=*# Resource for function PERCENTILE.INC #*=-
StringArray SC_OPCODE_PERCENTILE_INC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the alpha percentile of a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Alpha" ; >;
        < "The percentile value, range 0...1, inclusive." ; >;
    };
};
 // -=*# Resource for function QUARTILE #*=-
StringArray SC_OPCODE_QUARTILE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the quartile of a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Type" ; >;
        < "The type of the quartile (0 = MIN, 1 = 25%, 2 = 50%, 3 = 75%, 4 = MAX)." ; >;
    };
};
 // -=*# Resource for function QUARTILE.EXC #*=-
StringArray SC_OPCODE_QUARTILE_EXC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the quartile of a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Type" ; >;
        < "The type of the quartile (1 = 25%, 2 = 50%, 3 = 75%)." ; >;
    };
};
 // -=*# Resource for function QUARTILE.INC #*=-
StringArray SC_OPCODE_QUARTILE_INC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the quartile of a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Type" ; >;
        < "The type of the quartile (0 = MIN, 1 = 25%, 2 = 50%, 3 = 75%, 4 = MAX)." ; >;
    };
};
 // -=*# Resource for function LARGE #*=-
StringArray SC_OPCODE_LARGE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the k-th largest value of a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Rank_c" ; >;
        < "The ranking of the value." ; >;
    };
};
 // -=*# Resource for function SMALL #*=-
StringArray SC_OPCODE_SMALL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the k-th smallest value of a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Rank_c" ; >;
        < "The ranking of the value." ; >;
    };
};
 // -=*# Resource for function PERCENTRANK #*=-
StringArray SC_OPCODE_PERCENT_RANK+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the percentage rank of a value in a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "value" ; >;
        < "The value for which percentage ranking is to be determined." ; >;
        < "significance" ; >;
        < "The number of significant digits for the returned percentage: if omitted, a value of 3 is used." ; >;
    };
};
 // -=*# Resource for function PERCENTRANK.EXC #*=-
StringArray SC_OPCODE_PERCENT_RANK_EXC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the percentage rank (0..1, exclusive) of a value in a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "value" ; >;
        < "The value for which percentage ranking is to be determined." ; >;
        < "significance" ; >;
        < "The number of significant digits for the returned percentage: if omitted, a value of 3 is used." ; >;
    };
};
 // -=*# Resource for function PERCENTRANK.INC #*=-
StringArray SC_OPCODE_PERCENT_RANK_INC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the percentage rank (0..1, inclusive) of a value in a sample." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "value" ; >;
        < "The value for which percentage ranking is to be determined." ; >;
        < "significance" ; >;
        < "The number of significant digits for the returned percentage: if omitted, a value of 3 is used." ; >;
    };
};
 // -=*# Resource for function RANK #*=-
StringArray SC_OPCODE_RANK+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the ranking of a value in a sample." ; >;
        < "value" ; >;
        < "The value for which the rank is to be determined." ; >;
        < "Data" ; >;
        < "The array of the data in the sample." ; >;
        < "Type" ; >;
        < "Sequence order: 0 or omitted means descending, any other value than 0 means ascending." ; >;
    };
};
 // -=*# Resource for function RANK.EQ #*=-
StringArray SC_OPCODE_RANK_EQ+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the ranking of a value in a sample; if more than one value has the same rank, the top rank of that set of values is returned." ; >;
        < "value" ; >;
        < "The value for which the rank is to be determined." ; >;
        < "Data" ; >;
        < "The array of the data in the sample." ; >;
        < "Type" ; >;
        < "Sequence order: 0 or omitted means descending, any other value than 0 means ascending." ; >;
    };
};
 // -=*# Resource for function RANK.AVG #*=-
StringArray SC_OPCODE_RANK_AVG+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the ranking of a value in a sample; if more than one value has the same rank, the average rank is returned." ; >;
        < "value" ; >;
        < "The value for which the rank is to be determined." ; >;
        < "Data" ; >;
        < "The array of the data in the sample." ; >;
        < "Type" ; >;
        < "Sequence order: 0 or omitted means descending, any other value than 0 means ascending." ; >;
    };
};
 // -=*# Resource for function TRIMMEAN #*=-
StringArray SC_OPCODE_TRIM_MEAN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the mean of a sample without including the marginal values." ; >;
        < "data" ; >;
        < "The array of the data in the sample." ; >;
        < "Alpha" ; >;
        < "The percentage of marginal data that is not to be taken into account." ; >;
    };
};
 // -=*# Resource for function PROB #*=-
StringArray SC_OPCODE_PROB+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the discrete probability of an interval." ; >;
        < "data" ; >;
        < "The sample data array." ; >;
        < "probability" ; >;
        < "The array of the associated probabilities." ; >;
        < "Start" ; >;
        < "The start of the value interval whose probabilities is to be totalled." ; >;
        < "End" ; >;
        < "The end of the value interval where the probabilities are to be totalled." ; >;
    };
};
 // -=*# Resource for function B #*=-
StringArray SC_OPCODE_B+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the probability of a trial result using binomial distribution." ; >;
        < "trials" ; >;
        < "The number of trials." ; >;
        < "SP" ; >;
        < "The individual probability of a trial result." ; >;
        < "T_1" ; >;
        < "Lower limit for the number of trials." ; >;
        < "T_2" ; >;
        < "Upper limit for the number of trials." ; >;
    };
};
 // -=*# Resource for function PHI #*=-
StringArray SC_OPCODE_PHI+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the distribution function for a standard normal distribution." ; >;
        < "number" ; >;
        < "The value for which the standard normal distribution is to be calculated." ; >;
    };
};
 // -=*# Resource for function GAUSS #*=-
StringArray SC_OPCODE_GAUSS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the integral values of the standard normal cumulative distribution." ; >;
        < "Number" ; >;
        < "The value for which the integral value of the standard normal distribution is to be calculated." ; >;
    };
};
 // -=*# Resource for function FISHER #*=-
StringArray SC_OPCODE_FISHER+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the Fisher transformation." ; >;
        < "Number" ; >;
        < "The value to be transformed (-1 < VALUE < 1)." ; >;
    };
};
 // -=*# Resource for function FISHERINV #*=-
StringArray SC_OPCODE_FISHER_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the inverse of the Fisher transformation." ; >;
        < "Number" ; >;
        < "The value that is to be transformed back." ; >;
    };
};
 // -=*# Resource for function BINOMDIST #*=-
StringArray SC_OPCODE_BINOM_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the binomial distribution." ; >;
        < "X" ; >;
        < "The number of successes in a series of trials." ; >;
        < "trials" ; >;
        < "The total number of trials." ; >;
        < "SP" ; >;
        < "The success probability of a trial." ; >;
        < "C" ; >;
        < "Cumulated. C=0 calculates the individual probability, C=1 the cumulated probability." ; >;
    };
};
 // -=*# Resource for function BINOM.DIST #*=-
StringArray SC_OPCODE_BINOM_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the binomial distribution." ; >;
        < "X" ; >;
        < "The number of successes in a series of trials." ; >;
        < "trials" ; >;
        < "The total number of trials." ; >;
        < "SP" ; >;
        < "The success probability of a trial." ; >;
        < "C" ; >;
        < "Cumulated. C=0 calculates the individual probability, C=1 the cumulated probability." ; >;
    };
};
 // -=*# Resource for function NEGBINOMDIST #*=-
StringArray SC_OPCODE_NEG_BINOM_VERT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the negative binomial distribution." ; >;
        < "X" ; >;
        < "The number of failures in the trial range." ; >;
        < "R" ; >;
        < "The number of successes in the trial sequence." ; >;
        < "SP" ; >;
        < "The success probability of a trial." ; >;
    };
};
 // -=*# Resource for function NEGBINOM.DIST #*=-
StringArray SC_OPCODE_NEG_BINOM_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the negative binomial distribution." ; >;
        < "X" ; >;
        < "The number of failures in the trial range." ; >;
        < "R" ; >;
        < "The number of successes in the trial sequence." ; >;
        < "SP" ; >;
        < "The success probability of a trial." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function CRITBINOM #*=-
StringArray SC_OPCODE_CRIT_BINOM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value." ; >;
        < "trials" ; >;
        < "The total number of trials." ; >;
        < "SP" ; >;
        < "The success probability of a trial." ; >;
        < "alpha" ; >;
        < "The border probability that is attained or exceeded." ; >;
    };
};
 // -=*# Resource for function BINOM.INV #*=-
StringArray SC_OPCODE_BINOM_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value." ; >;
        < "trials" ; >;
        < "The total number of trials." ; >;
        < "SP" ; >;
        < "The success probability of a trial." ; >;
        < "alpha" ; >;
        < "The border probability that is attained or exceeded." ; >;
    };
};
 // -=*# Resource for function POISSON #*=-
StringArray SC_OPCODE_POISSON_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the Poisson distribution." ; >;
        < "Number" ; >;
        < "The value for which the Poisson distribution is to be calculated." ; >;
        < "mean" ; >;
        < "Mean. The mean value of the Poisson distribution." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE or omitted calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function POISSON.DIST #*=-
StringArray SC_OPCODE_POISSON_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the Poisson distribution." ; >;
        < "Number" ; >;
        < "The value for which the Poisson distribution is to be calculated." ; >;
        < "mean" ; >;
        < "Mean. The mean value of the Poisson distribution." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE or omitted calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function NORMDIST #*=-
StringArray SC_OPCODE_NORM_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the normal distribution." ; >;
        < "Number" ; >;
        < "The value for which the normal distribution is to be calculated." ; >;
        < "Mean" ; >;
        < "The mean value. The mean value of the normal distribution." ; >;
        < "STDEV" ; >;
        < "Standard deviation. The standard deviation of the normal distribution." ; >;
        < "C" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE or omitted calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function NORM.DIST #*=-
StringArray SC_OPCODE_NORM_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the normal distribution." ; >;
        < "Number" ; >;
        < "The value for which the normal distribution is to be calculated." ; >;
        < "Mean" ; >;
        < "The mean value. The mean value of the normal distribution." ; >;
        < "STDEV" ; >;
        < "Standard deviation. The standard deviation of the normal distribution." ; >;
        < "C" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function NORMINV #*=-
StringArray SC_OPCODE_NORM_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse normal distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse normal distribution is to be calculated." ; >;
        < "mean" ; >;
        < "The mean value. The mean value of the normal distribution." ; >;
        < "STDEV" ; >;
        < "Standard deviation. The standard deviation of the normal distribution." ; >;
    };
};
 // -=*# Resource for function NORM.INV #*=-
StringArray SC_OPCODE_NORM_INV_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse normal distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse normal distribution is to be calculated." ; >;
        < "mean" ; >;
        < "The mean value. The mean value of the normal distribution." ; >;
        < "STDEV" ; >;
        < "Standard deviation. The standard deviation of the normal distribution." ; >;
    };
};
 // -=*# Resource for function NORMSDIST #*=-
StringArray SC_OPCODE_STD_NORM_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "The values of the standard normal cumulative distribution." ; >;
        < "Number" ; >;
        < "The value for which the standard normal distribution is to be calculated." ; >;
    };
};
 // -=*# Resource for function NORM.S.DIST #*=-
StringArray SC_OPCODE_STD_NORM_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "The values of the standard normal distribution." ; >;
        < "Number" ; >;
        < "The value for which the standard normal distribution is to be calculated." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function NORMSINV #*=-
StringArray SC_OPCODE_S_NORM_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse standard normal distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse standard normal distribution is to be calculated." ; >;
    };
};
 // -=*# Resource for function NORM.S.INV #*=-
StringArray SC_OPCODE_S_NORM_INV_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse standard normal distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse standard normal distribution is to be calculated." ; >;
    };
};
 // -=*# Resource for function LOGNORMDIST #*=-
StringArray SC_OPCODE_LOG_NORM_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the log normal distribution." ; >;
        < "Number" ; >;
        < "The value for which the log normal distribution is to be calculated." ; >;
        < "mean" ; >;
        < "The mean value of the log normal distribution. It is set to 0 if omitted." ; >;
        < "STDEV" ; >;
        < "The standard deviation of the log normal distribution. It is set to 1 if omitted." ; >;
        < "Cumulative"; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE or omitted calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function LOGNORM.DIST #*=-
StringArray SC_OPCODE_LOG_NORM_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the log normal distribution." ; >;
        < "Number" ; >;
        < "The value for which the log normal distribution is to be calculated." ; >;
        < "mean" ; >;
        < "The mean value of the log normal distribution." ; >;
        < "STDEV" ; >;
        < "The standard deviation of the log normal distribution." ; >;
        < "Cumulative"; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function LOGINV #*=-
StringArray SC_OPCODE_LOG_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse of the lognormal distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse log normal distribution is to be calculated." ; >;
        < "mean" ; >;
        < "Mean value. The mean value of the log normal distribution." ; >;
        < "STDEV" ; >;
        < "Standard deviation. The standard deviation of the log normal distribution." ; >;
    };
};
 // -=*# Resource for function LOGNORM.INV #*=-
StringArray SC_OPCODE_LOG_INV_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse of the lognormal distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse log normal distribution is to be calculated." ; >;
        < "mean" ; >;
        < "Mean value. The mean value of the log normal distribution." ; >;
        < "STDEV" ; >;
        < "Standard deviation. The standard deviation of the log normal distribution." ; >;
    };
};
 // -=*# Resource for function EXPONDIST #*=-
StringArray SC_OPCODE_EXP_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the exponential distribution." ; >;
        < "Number" ; >;
        < "The value to which the exponential distribution is to be calculated." ; >;
        < "lambda" ; >;
        < "The parameters of the exponential distribution." ; >;
        < "C" ; >;
        < "Cumulated. C=0 calculates the density function, C=1 the distribution." ; >;
    };
};
 // -=*# Resource for function EXPON.DIST #*=-
StringArray SC_OPCODE_EXP_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the exponential distribution." ; >;
        < "Number" ; >;
        < "The value to which the exponential distribution is to be calculated." ; >;
        < "lambda" ; >;
        < "The parameters of the exponential distribution." ; >;
        < "C" ; >;
        < "Cumulated. C=0 calculates the density function, C=1 the distribution." ; >;
    };
};
 // -=*# Resource for function GAMMADIST #*=-
StringArray SC_OPCODE_GAMMA_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the value of the probability density function or the cumulative distribution function for the Gamma distribution." ; >;
        < "Number" ; >;
        < "The value for which the gamma distribution is to be calculated." ; >;
        < "alpha" ; >;
        < "The Alpha parameter of the Gamma distribution." ; >;
        < "beta" ; >;
        < "The Beta parameter of the Gamma distribution." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE or omitted calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function GAMMA.DIST #*=-
StringArray SC_OPCODE_GAMMA_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the value of the probability density function or the cumulative distribution function for the Gamma distribution." ; >;
        < "Number" ; >;
        < "The value for which the gamma distribution is to be calculated." ; >;
        < "alpha" ; >;
        < "The Alpha parameter of the Gamma distribution." ; >;
        < "beta" ; >;
        < "The Beta parameter of the Gamma distribution." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE calculates the cumulative distribution function." ; >;
    };
};
 // -=*# Resource for function GAMMAINV #*=-
StringArray SC_OPCODE_GAMMA_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse gamma distribution." ; >;
        < "Number" ; >;
        < "The probability value for which the inverse gamma distribution is to be calculated." ; >;
        < "alpha" ; >;
        < "The Alpha (shape) parameter of the Gamma distribution." ; >;
        < "beta" ; >;
        < "The Beta (scale) parameter of the Gamma distribution." ; >;
    };
};
 // -=*# Resource for function GAMMA.INV #*=-
StringArray SC_OPCODE_GAMMA_INV_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse gamma distribution." ; >;
        < "Number" ; >;
        < "The probability value for which the inverse gamma distribution is to be calculated." ; >;
        < "alpha" ; >;
        < "The Alpha (shape) parameter of the Gamma distribution." ; >;
        < "beta" ; >;
        < "The Beta (scale) parameter of the Gamma distribution." ; >;
    };
};
 // -=*# Resource for function GAMMALN #*=-
StringArray SC_OPCODE_GAMMA_LN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the natural logarithm of the gamma function." ; >;
        < "Number" ; >;
        < "The value for which the natural logarithm of the gamma function is to be calculated." ; >;
    };
};
 // -=*# Resource for function GAMMALN.PRECISE #*=-
StringArray SC_OPCODE_GAMMA_LN_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the natural logarithm of the gamma function." ; >;
        < "Number" ; >;
        < "The value for which the natural logarithm of the gamma function is to be calculated." ; >;
    };
};

 // -=*# Resource for function GAMMA #*=-
StringArray SC_OPCODE_GAMMA+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the value of the Gamma function." ; >;
        < "Number" ; >;
        < "The value for which the Gamma function is to be calculated." ; >;
    };
};

 // -=*# Resource for function BETADIST #*=-
StringArray SC_OPCODE_BETA_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the beta distribution." ; >;
        < "number" ; >;
        < "The value for which the beta distribution is to be calculated." ; >;
        < "alpha" ; >;
        < "The Alpha parameter of the Beta distribution." ; >;
        < "beta" ; >;
        < "The Beta parameter of the Beta distribution." ; >;
        < "Start" ; >;
        < "The starting value for the value interval of the distribution." ; >;
        < "End" ; >;
        < "The final value for the value interval of the distribution." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE for probability density function, any other value or TRUE or omitted for cumulative distribution function."; >;
    };
};
 // -=*# Resource for function BETAINV #*=-
StringArray SC_OPCODE_BETA_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse beta distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse beta distribution is to be calculated." ; >;
        < "alpha" ; >;
        < "The Alpha parameter of the Beta distribution." ; >;
        < "beta" ; >;
        < "The Beta parameter of the Beta distribution." ; >;
        < "Start" ; >;
        < "The starting value for the value interval of the distribution." ; >;
        < "End" ; >;
        < "The final value for the value interval of the distribution." ; >;
    };
};
 // -=*# Resource for function BETA.DIST #*=-
StringArray SC_OPCODE_BETA_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the beta distribution." ; >;
        < "number" ; >;
        < "The value for which the beta distribution is to be calculated." ; >;
        < "alpha" ; >;
        < "The Alpha parameter of the Beta distribution." ; >;
        < "beta" ; >;
        < "The Beta parameter of the Beta distribution." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE for probability density function, any other value or TRUE or omitted for cumulative distribution function."; >;
        < "Start" ; >;
        < "The starting value for the value interval of the distribution." ; >;
        < "End" ; >;
        < "The final value for the value interval of the distribution." ; >;
    };
};
 // -=*# Resource for function BETA.INV #*=-
StringArray SC_OPCODE_BETA_INV_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse beta distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse beta distribution is to be calculated." ; >;
        < "alpha" ; >;
        < "The Alpha parameter of the Beta distribution." ; >;
        < "beta" ; >;
        < "The Beta parameter of the Beta distribution." ; >;
        < "Start" ; >;
        < "The starting value for the value interval of the distribution." ; >;
        < "End" ; >;
        < "The final value for the value interval of the distribution." ; >;
    };
};
 // -=*# Resource for function WEIBULL #*=-
StringArray SC_OPCODE_WEIBULL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the values of the Weibull distribution." ; >;
        < "Number" ; >;
        < "The value for which the Weibull distribution is to be calculated." ; >;
        < "Alpha" ; >;
        < "The Alpha parameter of the Weibull distribution." ; >;
        < "beta" ; >;
        < "The Beta parameter of the Weibull distribution." ; >;
        < "C" ; >;
        < "Cumulated. C=0 calculates the density function, C=1 the distribution." ; >;
    };
};
 // -=*# Resource for function WEIBULL.DIST #*=-
StringArray SC_OPCODE_WEIBULL_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the values of the Weibull distribution." ; >;
        < "Number" ; >;
        < "The value for which the Weibull distribution is to be calculated." ; >;
        < "Alpha" ; >;
        < "The Alpha parameter of the Weibull distribution." ; >;
        < "beta" ; >;
        < "The Beta parameter of the Weibull distribution." ; >;
        < "C" ; >;
        < "Cumulated. C=0 calculates the density function, C=1 the distribution." ; >;
    };
};
 // -=*# Resource for function HYPGEOMDIST #*=-
StringArray SC_OPCODE_HYP_GEOM_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the hypergeometric distribution." ; >;
        < "X" ; >;
        < "The number of successes in the sample." ; >;
        < "n_sample" ; >;
        < "The size of the sample." ; >;
        < "successes" ; >;
        < "The number of successes in the population." ; >;
        < "n_population" ; >;
        < "The population size." ; >;
        < "Cumulative" ; >;
        < "Cumulated. TRUE calculates the cumulative distribution function, FALSE the probability mass function." ; >;
    };
};
 // -=*# Resource for function HYPGEOM.DIST #*=-
StringArray SC_OPCODE_HYP_GEOM_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the hypergeometric distribution." ; >;
        < "X" ; >;
        < "The number of successes in the sample." ; >;
        < "n_sample" ; >;
        < "The size of the sample." ; >;
        < "successes" ; >;
        < "The number of successes in the population." ; >;
        < "n_population" ; >;
        < "The population size." ; >;
        < "Cumulative" ; >;
        < "Cumulated. TRUE calculates the cumulative distribution function, FALSE the probability mass function." ; >;
    };
};
 // -=*# Resource for function TDIST #*=-
StringArray SC_OPCODE_T_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the t-distribution." ; >;
        < "Number" ; >;
        < "The value for which the T distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the T distribution." ; >;
        < "mode" ; >;
        < "Mode = 1 calculates the one-tailed test, 2 = two-tailed distribution." ; >;
    };
};
 // -=*# Resource for function T.DIST.2T #*=-
StringArray SC_OPCODE_T_DIST_2T+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the two-tailed t-distribution." ; >;
        < "Number" ; >;
        < "The value for which the T distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the T distribution." ; >;
    };
};
 // -=*# Resource for function T.DIST #*=-
StringArray SC_OPCODE_T_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the t-distribution." ; >;
        < "Number" ; >;
        < "The value for which the T distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the T distribution." ; >;
        < "cumulative" ; >;
        < "True calculates the cumulative distribution function, false the probability density function." ; >;
    };
};
 // -=*# Resource for function T.DIST.RT #*=-
StringArray SC_OPCODE_T_DIST_RT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the right-tailed t-distribution." ; >;
        < "Number" ; >;
        < "The value for which the T distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the T distribution." ; >;
    };
};
 // -=*# Resource for function TINV #*=-
StringArray SC_OPCODE_T_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse t-distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse T distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the T distribution." ; >;
    };
};
 // -=*# Resource for function T.INV #*=-
StringArray SC_OPCODE_T_INV_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the left-tailed inverse t-distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse T distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the T distribution." ; >;
    };
};
 // -=*# Resource for function T.INV.2T #*=-
StringArray SC_OPCODE_T_INV_2T+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the two-tailed inverse t-distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse T distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the T distribution." ; >;
    };
};
 // -=*# Resource for function FDIST #*=-
StringArray SC_OPCODE_F_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the F probability distribution." ; >;
        < "Number" ; >;
        < "The value for which the F distribution is to be calculated." ; >;
        < "degrees_freedom_1" ; >;
        < "The degrees of freedom in the numerator of the F distribution." ; >;
        < "degrees_freedom_2" ; >;
        < "The degrees of freedom in the denominator of the F distribution." ; >;
    };
};
 // -=*# Resource for function F.DIST #*=-
StringArray SC_OPCODE_F_DIST_LT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the left tail F probability distribution." ; >;
        < "Number" ; >;
        < "The value for which the F distribution is to be calculated." ; >;
        < "degrees_freedom_1" ; >;
        < "The degrees of freedom in the numerator of the F distribution." ; >;
        < "degrees_freedom_2" ; >;
        < "The degrees of freedom in the denominator of the F distribution." ; >;
        < "cumulative" ; >;
        < "Cumulative distribution function (TRUE) or probability density function (FALSE)." ; >;
    };
};
 // -=*# Resource for function F.DIST.RT #*=-
StringArray SC_OPCODE_F_DIST_RT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the right tail F probability distribution." ; >;
        < "Number" ; >;
        < "The value for which the F distribution is to be calculated." ; >;
        < "degrees_freedom_1" ; >;
        < "The degrees of freedom in the numerator of the F distribution." ; >;
        < "degrees_freedom_2" ; >;
        < "The degrees of freedom in the denominator of the F distribution." ; >;
    };
};
 // -=*# Resource for function FINV #*=-
StringArray SC_OPCODE_F_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse F distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse F distribution is to be calculated." ; >;
        < "degrees_freedom_1" ; >;
        < "The degrees of freedom in the numerator of the F distribution." ; >;
        < "degrees_freedom_2" ; >;
        < "The degrees of freedom in the denominator of the F distribution." ; >;
    };
};
 // -=*# Resource for function F.INV #*=-
StringArray SC_OPCODE_F_INV_LT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse left tail F distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse F distribution is to be calculated." ; >;
        < "degrees_freedom_1" ; >;
        < "The degrees of freedom in the numerator of the F distribution." ; >;
        < "degrees_freedom_2" ; >;
        < "The degrees of freedom in the denominator of the F distribution." ; >;
    };
};
 // -=*# Resource for function F.INV.RT #*=-
StringArray SC_OPCODE_F_INV_RT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse right tail F distribution." ; >;
        < "number" ; >;
        < "The probability value for which the inverse F distribution is to be calculated." ; >;
        < "degrees_freedom_1" ; >;
        < "The degrees of freedom in the numerator of the F distribution." ; >;
        < "degrees_freedom_2" ; >;
        < "The degrees of freedom in the denominator of the F distribution." ; >;
    };
};
 // -=*# Resource for function CHIDIST #*=-
StringArray SC_OPCODE_CHI_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the right-tail probability of the chi-square distribution." ; >;
        < "Number" ; >;
        < "The value for which the chi square distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the chi square distribution." ; >;
    };
};
 // -=*# Resource for function CHISQ.DIST.RT #*=-
StringArray SC_OPCODE_CHI_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the right-tail probability of the chi-square distribution." ; >;
        < "Number" ; >;
        < "The value for which the chi square distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the chi square distribution." ; >;
    };
};

 // -=*# Resource for function CHISQDIST #*=-
StringArray SC_OPCODE_CHISQ_DIST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns left-tail probability of the cumulative distribution function or values of the probability density function of the chi-square distribution." ; >;
        < "Number" ; >;
        < "The value for which the probability density function or cumulative distribution function is to be calculated." ; >;
        < "Degrees of Freedom" ; >;
        < "The degrees of freedom of the chi-square distribution." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE or omitted calculates the cumulative distribution function." ; >;
    };
};

 // -=*# Resource for function CHISQ.DIST #*=-
StringArray SC_OPCODE_CHISQ_DIST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns left-tail probability of the cumulative distribution function or values of the probability density function of the chi-square distribution." ; >;
        < "Number" ; >;
        < "The value for which the probability density function or cumulative distribution function is to be calculated." ; >;
        < "Degrees of Freedom" ; >;
        < "The degrees of freedom of the chi-square distribution." ; >;
        < "Cumulative" ; >;
        < "0 or FALSE calculates the probability density function. Any other value or TRUE calculates the cumulative distribution function." ; >;
    };
};

 // -=*# Resource for function CHIINV #*=-
StringArray SC_OPCODE_CHI_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse of CHIDIST(x; DegreesOfFreedom)." ; >;
        < "number" ; >;
        < "The probability value for which the inverse chi square distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the chi square distribution." ; >;
    };
};

 // -=*# Resource for function CHISQ.INV.RT #*=-
StringArray SC_OPCODE_CHI_INV_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse of CHIDIST(x; DegreesOfFreedom)." ; >;
        < "number" ; >;
        < "The probability value for which the inverse chi square distribution is to be calculated." ; >;
        < "degrees_freedom" ; >;
        < "The degrees of freedom of the chi square distribution." ; >;
    };
};

 // -=*# Resource for function CHISQINV #*=-
StringArray SC_OPCODE_CHISQ_INV+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse of CHISQDIST(x;DegreesOfFreedom;TRUE())." ; >;
        < "Probability" ; >;
        < "The probability value for which the inverse of the chi square distribution is to be calculated." ; >;
        < "Degrees of Freedom" ; >;
        < "The degrees of freedom of the chi square distribution." ; >;
    };
};

 // -=*# Resource for function CHISQ.INV #*=-
StringArray SC_OPCODE_CHISQ_INV_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Values of the inverse of CHISQ.DIST(x;DegreesOfFreedom;TRUE())." ; >;
        < "Probability" ; >;
        < "The probability value for which the inverse of the chi square distribution is to be calculated." ; >;
        < "Degrees of Freedom" ; >;
        < "The degrees of freedom of the chi square distribution." ; >;
    };
};

 // -=*# Resource for function STANDARDIZE #*=-
StringArray SC_OPCODE_STANDARD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a random variable to a normalized value." ; >;
        < "Number" ; >;
        < "The value to be standardized." ; >;
        < "mean" ; >;
        < "The mean value used for moving." ; >;
        < "STDEV" ; >;
        < "The standard deviation used for scaling." ; >;
    };
};
 // -=*# Resource for function PERMUT #*=-
StringArray SC_OPCODE_PERMUT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of permutations for a given number of elements without repetition." ; >;
        < "Count_1" ; >;
        < "The total number of elements." ; >;
        < "Count_2" ; >;
        < "The selection number taken from the elements." ; >;
    };
};
 // -=*# Resource for function PERMUTATIONA #*=-
StringArray SC_OPCODE_PERMUTATION_A+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of permutations for a given number of objects (repetition allowed)." ; >;
        < "Count_1" ; >;
        < "The total number of elements." ; >;
        < "Count_2" ; >;
        < "The selection number taken from the elements." ; >;
    };
};
 // -=*# Resource for function CONFIDENCE #*=-
StringArray SC_OPCODE_CONFIDENCE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a (1-alpha) confidence interval for a normal distribution." ; >;
        < "alpha" ; >;
        < "The level of the confidence interval." ; >;
        < "STDEV" ; >;
        < "The standard deviation of the population." ; >;
        < "size" ; >;
        < "The size of the population." ; >;
    };
};
 // -=*# Resource for function CONFIDENCE.NORM #*=-
StringArray SC_OPCODE_CONFIDENCE_N+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a (1-alpha) confidence interval for a normal distribution." ; >;
        < "alpha" ; >;
        < "The level of the confidence interval." ; >;
        < "STDEV" ; >;
        < "The standard deviation of the population." ; >;
        < "size" ; >;
        < "The size of the population." ; >;
    };
};
 // -=*# Resource for function CONFIDENCE.T #*=-
StringArray SC_OPCODE_CONFIDENCE_T+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a (1-alpha) confidence interval for a Student's t distribution." ; >;
        < "alpha" ; >;
        < "The level of the confidence interval." ; >;
        < "STDEV" ; >;
        < "The standard deviation of the population." ; >;
        < "size" ; >;
        < "The size of the population." ; >;
    };
};
 // -=*# Resource for function ZTEST #*=-
StringArray SC_OPCODE_Z_TEST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the probability of observing a z-statistic greater than the one computed based on a sample." ; >;
        < "data" ; >;
        < "The given sample, drawn from a normally distributed population." ; >;
        < "mu" ; >;
        < "The known mean of the population." ; >;
        < "sigma" ; >;
        < "The known standard deviation of the population. If omitted, the standard deviation of the given sample is used." ; >;
    };
};
 // -=*# Resource for function Z.TEST #*=-
StringArray SC_OPCODE_Z_TEST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the probability of observing a z-statistic greater than the one computed based on a sample." ; >;
        < "data" ; >;
        < "The given sample, drawn from a normally distributed population." ; >;
        < "mu" ; >;
        < "The known mean of the population." ; >;
        < "sigma" ; >;
        < "The known standard deviation of the population. If omitted, the standard deviation of the given sample is used." ; >;
    };
};
 // -=*# Resource for function CHITEST #*=-
StringArray SC_OPCODE_CHI_TEST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the chi square independence test." ; >;
        < "Data_B" ; >;
        < "The observed data array." ; >;
        < "data_E" ; >;
        < "The expected data array." ; >;
    };
};
 // -=*# Resource for function CHISQ.TEST #*=-
StringArray SC_OPCODE_CHI_TEST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the chi square independence test." ; >;
        < "Data_B" ; >;
        < "The observed data array." ; >;
        < "data_E" ; >;
        < "The expected data array." ; >;
    };
};
 // -=*# Resource for function FTEST #*=-
StringArray SC_OPCODE_F_TEST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the F test." ; >;
        < "data_1" ; >;
        < "The first record array." ; >;
        < "data_2" ; >;
        < "The second record array." ; >;
    };
};
 // -=*# Resource for function F.TEST #*=-
StringArray SC_OPCODE_F_TEST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the F test." ; >;
        < "data_1" ; >;
        < "The first record array." ; >;
        < "data_2" ; >;
        < "The second record array." ; >;
    };
};
 // -=*# Resource for function TTEST #*=-
StringArray SC_OPCODE_T_TEST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the T test." ; >;
        < "data_1" ; >;
        < "The first record array." ; >;
        < "data_2" ; >;
        < "The second record array." ; >;
        < "mode" ; >;
        < "Mode specifies the number of distribution tails to return. 1= one-tailed, 2 = two-tailed distribution" ; >;
        < "Type" ; >;
        < "The type of the T test." ; >;
    };
};
 // -=*# Resource for function T.TEST #*=-
StringArray SC_OPCODE_T_TEST_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the T test." ; >;
        < "data_1" ; >;
        < "The first record array." ; >;
        < "data_2" ; >;
        < "The second record array." ; >;
        < "mode" ; >;
        < "Mode specifies the number of distribution tails to return. 1= one-tailed, 2 = two-tailed distribution" ; >;
        < "Type" ; >;
        < "The type of the T test." ; >;
    };
};
 // -=*# Resource for function RSQ #*=-
StringArray SC_OPCODE_RSQ+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the square of the Pearson product moment correlation coefficient." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array." ; >;
    };
};
 // -=*# Resource for function INTERCEPT #*=-
StringArray SC_OPCODE_INTERCEPT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the intercept of the linear regression line and the Y axis." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array." ; >;
    };
};
 // -=*# Resource for function SLOPE #*=-
StringArray SC_OPCODE_SLOPE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the slope of the linear regression line." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array." ; >;
    };
};
 // -=*# Resource for function STEYX #*=-
StringArray SC_OPCODE_STEYX+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the standard error of the linear regression." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array." ; >;
    };
};
 // -=*# Resource for function PEARSON #*=-
StringArray SC_OPCODE_PEARSON+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the Pearson product moment correlation coefficient." ; >;
        < "Data_1" ; >;
        < "The first record array." ; >;
        < "Data_2" ; >;
        < "The second record array." ; >;
    };
};
 // -=*# Resource for function CORREL #*=-
StringArray SC_OPCODE_CORREL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the correlation coefficient." ; >;
        < "Data_1" ; >;
        < "The first record array." ; >;
        < "Data_2" ; >;
        < "The second record array." ; >;
    };
};
 // -=*# Resource for function COVAR #*=-
StringArray SC_OPCODE_COVAR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the population covariance." ; >;
        < "Data_1" ; >;
        < "The first record array." ; >;
        < "Data_2" ; >;
        < "The second record array." ; >;
    };
};
 // -=*# Resource for function COVARIANCE.P #*=-
StringArray SC_OPCODE_COVARIANCE_P+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the population covariance." ; >;
        < "Data_1" ; >;
        < "The first record array." ; >;
        < "Data_2" ; >;
        < "The second record array." ; >;
    };
};
 // -=*# Resource for function COVARIANCE.S #*=-
StringArray SC_OPCODE_COVARIANCE_S+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the sample covariance." ; >;
        < "Data_1" ; >;
        < "The first record array." ; >;
        < "Data_2" ; >;
        < "The second record array." ; >;
    };
};
 // -=*# Resource for function FORECAST #*=-
StringArray SC_OPCODE_FORECAST+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a value along a linear regression" ; >;
        < "value" ; >;
        < "The X value for which the Y value on the regression linear is to be calculated." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array." ; >;
    };
};
 // -=*# Resource for function FORECAST.ETS #*=-
StringArray SC_OPCODE_FORECAST_ETS_ADD+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates future value(s) using additive Exponential Smoothing algorithm." ; >;
        < "target" ; >;
        < "The date (array) for which you want to predict a value." ; >;
        < "values" ; >;
        < "The data array from which you want to forecast." ; >;
        < "timeline" ; >;
        < "The date or numeric array; a consistent step between values is needed." ; >;
        < "period length" ; >;
        < "Number of Samples in Period (default 1); length of the seasonal pattern." ; >;
        < "data completion" ; >;
        < "Data completion (default 1); 0 treats missing points as zero, 1 interpolates." ; >;
        < "aggregation" ; >;
        < "Aggregation (default 1 = AVERAGE); method to be used to aggregate identical (time) values." ; >;
    };
};
 // -=*# Resource for function FORECAST.ETS.MULT #*=-
StringArray SC_OPCODE_FORECAST_ETS_MUL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates future value(s) using multiplicative Exponential Smoothing algorithm." ; >;
        < "target" ; >;
        < "The date (array) for which you want to predict a value." ; >;
        < "values" ; >;
        < "The data array from which you want to forecast." ; >;
        < "timeline" ; >;
        < "The date or numeric array; a consistent step between values is needed." ; >;
        < "period length" ; >;
        < "Number of Samples in Period (default 1); length of the seasonal pattern." ; >;
        < "data completion" ; >;
        < "Data completion (default 1); 0 treats missing points as zero, 1 interpolates." ; >;
        < "aggregation" ; >;
        < "Aggregation (default 1 = AVERAGE); method to be used to aggregate identical (time) values." ; >;
    };
};
 // -=*# Resource for function FORECAST.ETS.CONFINT #*=-
StringArray SC_OPCODE_FORECAST_ETS_PIA+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a prediction interval at the specified target value(s) for additive Exponential Smoothing method" ; >;
        < "target" ; >;
        < "The date (array) for which you want to predict a value." ; >;
        < "values" ; >;
        < "The data array from which you want to forecast." ; >;
        < "timeline" ; >;
        < "The date or numeric array; a consistent step between values is needed." ; >;
        < "confidence level" ; >;
        < "Confidence level (default 0.95); value 0 to 1 (exclusive) for 0 to 100% calculated prediction interval." ; >;
        < "period length" ; >;
        < "Number of Samples in Period (default 1); length of the seasonal pattern." ; >;
        < "data completion" ; >;
        < "Data completion (default 1); 0 treats missing points as zero, 1 interpolates." ; >;
        < "aggregation" ; >;
        < "Aggregation (default 1 = AVERAGE); method to be used to aggregate identical (time) values." ; >;
    };
};
 // -=*# Resource for function FORECAST.ETS.PI.MULT #*=-
StringArray SC_OPCODE_FORECAST_ETS_PIM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a prediction interval at the specified target value(s) for multiplicative Exponential Smoothing method" ; >;
        < "target" ; >;
        < "The date (array) for which you want to predict a value." ; >;
        < "values" ; >;
        < "The data array from which you want to forecast." ; >;
        < "timeline" ; >;
        < "The date or numeric array; a consistent step between values is needed." ; >;
        < "confidence level" ; >;
        < "Confidence level (default 0.95); value 0 to 1 (exclusive) for 0 to 100% calculated prediction interval." ; >;
        < "period length" ; >;
        < "Number of Samples in Period (default 1); length of the seasonal pattern." ; >;
        < "data completion" ; >;
        < "Data completion (default 1); 0 treats missing points as zero, 1 interpolates." ; >;
        < "aggregation" ; >;
        < "Aggregation (default 1 = AVERAGE); method to be used to aggregate identical (time) values." ; >;
    };
};
 // -=*# Resource for function FORECAST.ETS.SEASONALITY #*=-
StringArray SC_OPCODE_FORECAST_ETS_SEA+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the number of samples in period (season) using additive Exponential Triple Smoothing algorithm." ; >;
        < "values" ; >;
        < "The data array from which you want to forecast." ; >;
        < "timeline" ; >;
        < "The date or numeric array; a consistent step between values is needed." ; >;
        < "data completion" ; >;
        < "Data completion (default 1); 0 treats missing points as zero, 1 interpolates." ; >;
        < "aggregation" ; >;
        < "Aggregation (default 1 = AVERAGE); method to be used to aggregate identical (time) values." ; >;
    };
};
 // -=*# Resource for function FORECAST.ETS.STAT #*=-
StringArray SC_OPCODE_FORECAST_ETS_STA+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns statistical value(s) using additive Exponential Smoothing algorithm." ; >;
        < "values" ; >;
        < "The data array from which you want to forecast." ; >;
        < "timeline" ; >;
        < "The date or numeric array; a consistent step between values is needed." ; >;
        < "statistic type" ; >;
        < "Value (1-9) or array of values, indicating which statistic will be returned for the calculated forecast" ; >;
        < "period length" ; >;
        < "Number of Samples in Period (default 1); length of the seasonal pattern." ; >;
        < "data completion" ; >;
        < "Data completion (default 1); 0 treats missing points as zero, 1 interpolates." ; >;
        < "aggregation" ; >;
        < "Aggregation (default 1 = AVERAGE); method to be used to aggregate identical (time) values." ; >;
    };
};
 // -=*# Resource for function FORECAST.ETS.STAT.MULT #*=-
StringArray SC_OPCODE_FORECAST_ETS_STM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns statistical value(s) using multiplicative Exponential Smoothing algorithm." ; >;
        < "values" ; >;
        < "The data array from which you want to forecast." ; >;
        < "timeline" ; >;
        < "The date or numeric array; a consistent step between values is needed." ; >;
        < "statistic type" ; >;
        < "Value (1-9) or array of values, indicating which statistic will be returned for the calculated forecast" ; >;
        < "period length" ; >;
        < "Number Of Samples in Period (default 1); length of the seasonal pattern." ; >;
        < "data completion" ; >;
        < "Data completion (default 1); 0 treats missing points as zero, 1 interpolates." ; >;
        < "aggregation" ; >;
        < "Aggregation (default 1 = AVERAGE); method to be used to aggregate identical (time) values." ; >;
    };
};
 // -=*# Resource for function FORECAST.LINEAR #*=-
StringArray SC_OPCODE_FORECAST_LIN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a value along a linear regression" ; >;
        < "value" ; >;
        < "The X value for which the Y value on the regression linear is to be calculated." ; >;
        < "data_Y" ; >;
        < "The Y data array." ; >;
        < "data_X" ; >;
        < "The X data array." ; >;
    };
};
 // -=*# Resource for function ADDRESS #*=-
StringArray SC_OPCODE_ADDRESS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the reference to a cell as text." ; >;
        < "row" ; >;
        < "The row number of the cell." ; >;
        < "column" ; >;
        < "The column number of the cell." ; >;
        < "ABS" ; >;
        < "Specifies whether absolute or relative referencing is to be used." ; >;
        < "A1" ; >;
        < "The reference style: 0 or FALSE means R1C1 style, any other value or omitted means A1 style." ; >;
        < "sheet" ; >; // previously to OOo3.0 this was String resource RID_SC_FUNCTION_DESCRIPTIONS2.SC_OPCODE_ADDRESS 8
        < "The spreadsheet name of the cell reference." ; >; // previously to OOo3.0 this was String resource RID_SC_FUNCTION_DESCRIPTIONS2.SC_OPCODE_ADDRESS 9
    };
};
 // -=*# Resource for function AREAS #*=-
StringArray SC_OPCODE_AREAS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of individual ranges that belong to a (multiple) range." ; >;
        < "reference" ; >;
        < "The reference to a (multiple) range." ; >;
    };
};
 // -=*# Resource for function CHOOSE #*=-
StringArray SC_OPCODE_CHOOSE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Selects a value from a list of up to 30 value arguments." ; >;
        < "Index" ; >;
        < "The index of the value (1..30) selected." ; >;
        < "value " ; >;
        < "Value 1, value 2,... The list of arguments from which a value is chosen." ; >;
    };
};
 // -=*# Resource for function COLUMNS #*=-
StringArray SC_OPCODE_COLUMN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the internal column number of a reference." ; >;
        < "reference" ; >;
        < "The reference to a cell or a range." ; >;
    };
};
 // -=*# Resource for function ROW #*=-
StringArray SC_OPCODE_ROW+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Defines the internal row number of a reference." ; >;
        < "reference" ; >;
        < "The reference to a cell or a range." ; >;
    };
};
 // -=*# Resource for function SHEET #*=-
StringArray SC_OPCODE_SHEET+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the internal sheet number of a reference or a string." ; >;
        < "reference" ; >;
        < "The reference to a cell or a range or the character string of a sheet name." ; >;
    };
};
 // -=*# Resource for function COLUMNS #*=-
StringArray SC_OPCODE_COLUMNS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of columns in an array or reference." ; >;
        < "array" ; >;
        < "The array (reference) for which the number of columns is to be determined." ; >;
    };
};
 // -=*# Resource for function ROWS #*=-
StringArray SC_OPCODE_ROWS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of rows in a reference or array." ; >;
        < "array" ; >;
        < "The array (reference) for which the number of rows is to be determined." ; >;
    };
};
 // -=*# Resource for function SHEETS #*=-
StringArray SC_OPCODE_SHEETS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the number of sheets of a given reference. If no parameter has been entered, the total number of sheets in the document is returned." ; >;
        < "reference" ; >;
        < "The reference to a cell or a range." ; >;
    };
};
 // -=*# Resource for function HLOOKUP #*=-
StringArray SC_OPCODE_H_LOOKUP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Horizontal search and reference to the cells located below." ; >;
        < "search_criteria" ; >;
        < "The value to be found in the first row." ; >;
        < "array" ; >;
        < "The array or the range for the reference." ; >;
        < "Index" ; >;
        < "The row index in the array." ; >;
        < "sorted" ; >;
        < "If the value is TRUE or not given, the search row of the array must be sorted in ascending order." ; >;
    };
};
 // -=*# Resource for function VLOOKUP #*=-
StringArray SC_OPCODE_V_LOOKUP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Vertical search and reference to indicated cells." ; >;
        < "Search criterion" ; >;
        < "The value to be found in the first column." ; >;
        < "array" ; >;
        < "The array or range for referencing." ; >;
        < "Index" ; >;
        < "Column index number in the array." ; >;
        < "sort order" ; >;
        < "If the value is TRUE or not given, the search column of the array must be sorted in ascending order." ; >;
    };
};
 // -=*# Resource for function INDEX #*=-
StringArray SC_OPCODE_INDEX+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a reference to a cell from a defined range." ; >;
        < "reference" ; >;
        < "The reference to a (multiple) range." ; >;
        < "row" ; >;
        < "The row in the range." ; >;
        < "column" ; >;
        < "The column in the range." ; >;
        < "range" ; >;
        < "The index of the subrange if referring to a multiple range." ; >;
    };
};
 // -=*# Resource for function INDIRECT #*=-
StringArray SC_OPCODE_INDIRECT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the contents of a cell that is referenced in text form." ; >;
        < "ref " ; >;
        < "The cell whose contents are to be evaluated is to be referenced in text form (e.g. \"A1\")." ; >;
        < "A1" ; >;
        < "The reference style: 0 or FALSE means R1C1 style, any other value or omitted means A1 style." ; >;
    };
};
 // -=*# Resource for function LOOKUP #*=-
StringArray SC_OPCODE_LOOKUP+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Determines a value in a vector by comparison to values in another vector." ; >;
        < "Search criterion" ; >;
        < "The value to be used for comparison." ; >;
        < "Search vector" ; >;
        < "The vector (row or column) in which to search." ; >;
        < "result_vector" ; >;
        < "The vector (row or range) from which the value is to be determined." ; >;
    };
};
 // -=*# Resource for function MATCH #*=-
StringArray SC_OPCODE_MATCH+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Defines a position in a array after comparing values." ; >;
        < "Search criterion" ; >;
        < "The value to be used for comparison." ; >;
        < "lookup_array" ; >;
        < "The array (range) in which the search is made." ; >;
        < "Type" ; >;
        < "Type can take the value 1, 0 or -1 and determines the criteria are to be used for comparison purposes." ; >;
    };
};
 // -=*# Resource for function OFFSET #*=-
StringArray SC_OPCODE_OFFSET+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a reference which has been moved in relation to the starting point." ; >;
        < "reference" ; >;
        < "The reference (cell) from which to base the movement." ; >;
        < "rows" ; >;
        < "The number of rows to be moved either up or down." ; >;
        < "columns" ; >;
        < "The number of columns that are to be moved to the left or to the right." ; >;
        < "height" ; >;
        < "The number of rows of the moved reference." ; >;
        < "width" ; >;
        < "The number of columns in the moved reference." ; >;
    };
};
 // -=*# Resource for function ERRORTYPE #*=-
StringArray SC_OPCODE_ERROR_TYPE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a number corresponding to an error type" ; >;
        < "reference" ; >;
        < "The reference (cell) in which the error occurred." ; >;
    };
};
 // -=*# Resource for function ERROR.TYPE #*=-
StringArray SC_OPCODE_ERROR_TYPE_ODF+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a number corresponding to one of the error values or #N/A if no error exists" ; >;
        < "expression" ; >;
        < "The error value whose identifying number you want to find. Can be the actual error value or a reference to a cell that you want to test." ; >;
    };
};
 // -=*# Resource for function STYLE #*=-
StringArray SC_OPCODE_STYLE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Applies a Style to the formula cell." ; >;
        < "Style" ; >;
        < "The name of the Style to be applied." ; >;
        < "Time" ; >;
        < "The time (in seconds) that the Style is to remain valid." ; >;
        < "Style2" ; >;
        < "The Style to be applied after time expires." ; >;
    };
};
 // -=*# Resource for function DDE #*=-
StringArray SC_OPCODE_DDE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Result of a DDE link." ; >;
        < "server" ; >;
        < "The name of the server application." ; >;
        < "File" ; >;
        < "The name of the file." ; >;
        < "range" ; >;
        < "The range from which data is to be taken." ; >;
        < "mode" ; >;
        < "Defines how data is to be converted to numbers." ; >;
    };
};
 // -=*# Resource for function HYPERLINK #*=-
StringArray SC_OPCODE_HYPERLINK+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Hyperlink." ; >;
        < "URL " ; >;
        < "URL"; >;
        < "CellText " ; >;
        < "Cell Text"; >;
    };
};
 // -=*# Resource for function GETPIVOTDATA #*=-
StringArray SC_OPCODE_GET_PIVOT_DATA+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Extracts value(s) from a pivot table."; >;
        < "Data Field"; >;
        < "The name of the pivot table field to extract."; >;
        < "Pivot Table"; >;
        < "A reference to a cell or range in the pivot table."; >;
        < "Field Name / Item"; >;
        < "Field name/value pair to filter the target data."; >;
    };
};
 // -=*# Resource for function BAHTTEXT #*=-
StringArray SC_OPCODE_BAHTTEXT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a number to text (Baht)." ; >;
        < "Number" ; >;
        < "The number to convert."; >;
    };
};
 // -=*# Resource for function JIS #*=-
StringArray SC_OPCODE_JIS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts half-width ASCII and katakana characters to full-width." ; >;
        < "text" ; >;
        < "The text to convert."; >;
    };
};
 // -=*# Resource for function ASC #*=-
StringArray SC_OPCODE_ASC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts full-width ASCII and katakana characters to half-width." ; >;
        < "text" ; >;
        < "The text to convert."; >;
    };
};
 // -=*# Resource for function CODE #*=-
StringArray SC_OPCODE_CODE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a numeric code for the first character in a text string." ; >;
        < "text" ; >;
        < "This is the text for which the code of the first character is to be found." ; >;
    };
};
 // -=*# Resource for function DOLLAR #*=-
StringArray SC_OPCODE_CURRENCY+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a number to text in currency format." ; >;
        < "value" ; >;
        < "Value is a number, a reference to a cell containing a number or a formula that results in a number." ; >;
        < "decimals" ; >;
        < "Decimal places. Denotes the number of digits to the right of the decimal point." ; >;
    };
};
 // -=*# Resource for function CHAR #*=-
StringArray SC_OPCODE_CHAR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a code number into a character or letter." ; >;
        < "number" ; >;
        < "The code value for the character." ; >;
    };
};
 // -=*# Resource for function CLEAN #*=-
StringArray SC_OPCODE_CLEAN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Removes all nonprintable characters from text." ; >;
        < "text" ; >;
        < "The text from which nonprintable characters are to be removed." ; >;
    };
};
 // -=*# Resource for function CONCATENATE #*=-
StringArray SC_OPCODE_CONCAT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Combines several text items into one." ; >;
        < "text" ; >;
        < "Text for the concatenation." ; >;
    };
};
 // -=*# Resource for function CONCAT #*=-
StringArray SC_OPCODE_CONCAT_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Combines several text items into one, accepts cell ranges as arguments." ; >;
        < "text" ; >;
        < "Text and/or cell ranges for the concatenation." ; >;
    };
};
 // -=*# Resource for function TEXTJOIN #*=-
StringArray SC_OPCODE_TEXTJOIN_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Combines several text items into one, accepts cell ranges as arguments. Uses delimiter between items." ; >;
        < "delimiter" ; >;
        < "Text string to be used as delimiter." ; >;
        < "skip empty cells" ; >;
        < "If TRUE, empty cells will be ignored." ; >;
        < "text" ; >;
        < "Text and/or cell ranges for the concatenation." ; >;
    };
};
 // -=*# Resource for function IFS #*=-
StringArray SC_OPCODE_IFS_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Checks 1 or more conditions and returns a value corresponding to the first true condition." ; >;
        < "test" ; >;
        < "Any value or expression which can be either TRUE or FALSE." ; >;
        < "result" ; >;
        < "The result of the function if test is TRUE." ; >;
    };
};
 // -=*# Resource for function SWITCH #*=-
StringArray SC_OPCODE_SWITCH_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Checks 1 or more values and returns a result corresponding to the first value equal to the given expression." ; >;
        < "expression" ; >;
        < "Value that will be compared against value1-valueN." ; >;
        < "value " ; >;
        < "Value that will be compared against expression." ; >;
        < "result" ; >;
        < "Value to return when corresponding value argument matches expression." ; >;
    };
};
StringArray SC_OPCODE_MINIFS_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the minimum value in a range that meet multiple criteria in multiple ranges." ; >;
        < "min_range" ; >;
        < "The range from which the minimum will be determined." ; >;
        < "range" ; >;
        < "Range 1, range 2,... are the ranges to be evaluated by the criteria given." ; >;
        < "criteria" ; >;
        < "Criteria 1, criteria 2,... are the criteria to be applied to the ranges given." ; >;
    };
};
StringArray SC_OPCODE_MAXIFS_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the maximum value in a range that meet multiple criteria in multiple ranges." ; >;
        < "max_range" ; >;
        < "The range from which the maximum will be determined." ; >;
        < "range" ; >;
        < "Range 1, range 2,... are the ranges to be evaluated by the criteria given." ; >;
        < "criteria" ; >;
        < "Criteria 1, criteria 2,... are the criteria to be applied to the ranges given." ; >;
    };
};
 // -=*# Resource for function EXACT #*=-
StringArray SC_OPCODE_EXACT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Specifies whether two texts are identical." ; >;
        < "text_1" ; >;
        < "The first text to be used for comparing texts." ; >;
        < "text_2" ; >;
        < "The second text for comparing texts." ; >;
    };
};
 // -=*# Resource for function FIND #*=-
StringArray SC_OPCODE_FIND+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Looks for a string of text within another (case sensitive)" ; >;
        < "find_text" ; >;
        < "The text to be found." ; >;
        < "text" ; >;
        < "The text in which a search is to be made." ; >;
        < "position" ; >;
        < "The position in the text from which the search starts." ; >;
    };
};
 // -=*# Resource for function SEARCH #*=-
StringArray SC_OPCODE_SEARCH+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Looks for one text value within another (not case-sensitive)." ; >;
        < "find_text" ; >;
        < "The text to be found." ; >;
        < "text" ; >;
        < "The text in which a search is to be made." ; >;
        < "position" ; >;
        < "The position in the text where the search is started." ; >;
    };
};
 // -=*# Resource for function TRIM #*=-
StringArray SC_OPCODE_TRIM+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Removes extra spaces from text." ; >;
        < "text" ; >;
        < "The text in which extra spaces between words are to be deleted." ; >;
    };
};
 // -=*# Resource for function PROPER #*=-
StringArray SC_OPCODE_PROPER+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Capitalizes the first letter in all words." ; >;
        < "text" ; >;
        < "The text in which the beginning of words are to be replaced by capital letters." ; >;
    };
};
 // -=*# Resource for function UPPER #*=-
StringArray SC_OPCODE_UPPER+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts text to uppercase." ; >;
        < "text" ; >;
        < "The text in which lower case letters are to be converted to capitals." ; >;
    };
};
 // -=*# Resource for function LOWER #*=-
StringArray SC_OPCODE_LOWER+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts text to lowercase." ; >;
        < "text" ; >;
        < "The text in which capitals are converted to lower case letters." ; >;
    };
};
 // -=*# Resource for function VALUE #*=-
StringArray SC_OPCODE_VALUE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts text to a number." ; >;
        < "text" ; >;
        < "The text to be converted to a number." ; >;
    };
};
 // -=*# Resource for function TEXT #*=-
StringArray SC_OPCODE_TEXT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a number to text according to a given format." ; >;
        < "number" ; >;
        < "The numeric value to be converted." ; >;
        < "Format" ; >;
        < "The text that describes the format." ; >;
    };
};
 // -=*# Resource for function T #*=-
StringArray SC_OPCODE_T+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a value if it is text, otherwise an empty string." ; >;
        < "value" ; >;
        < "The value to be checked and returned if it is text." ; >;
    };
};
 // -=*# Resource for function REPLACE #*=-
StringArray SC_OPCODE_REPLACE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Replaces characters within a text string with a different text string." ; >;
        < "Text" ; >;
        < "The text in which some characters are to be replaced." ; >;
        < "position" ; >;
        < "The character position from which text is to be replaced." ; >;
        < "length" ; >;
        < "The number of characters to be replaced." ; >;
        < "new text" ; >;
        < "The text to be inserted." ; >;
    };
};
 // -=*# Resource for function FIXED #*=-
StringArray SC_OPCODE_FIXED+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Formats a number with a fixed number of places after the decimal point and thousands separator." ; >;
        < "number" ; >;
        < "The number to be formatted." ; >;
        < "Decimals" ; >;
        < "Decimal places. The number of fixed decimal places that are to be displayed." ; >;
        < "No thousands separators" ; >;
        < "Thousands separator. If 0 or omitted the locale group separator is used else the separator is suppressed." ; >;
    };
};
 // -=*# Resource for function LEN #*=-
StringArray SC_OPCODE_LEN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates length of a text string." ; >;
        < "text" ; >;
        < "The text in which the length is to be determined." ; >;
    };
};
 // -=*# Resource for function LEFT #*=-
StringArray SC_OPCODE_LEFT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the first character or characters of a text." ; >;
        < "text" ; >;
        < "The text where the initial partial words are to be determined." ; >;
        < "number" ; >;
        < "The number of characters for the start text." ; >;
    };
};
 // -=*# Resource for function RIGHT #*=-
StringArray SC_OPCODE_RIGHT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the last character or characters of a text." ; >;
        < "text" ; >;
        < "The text in which the end partial words are to be determined." ; >;
        < "number" ; >;
        < "The number of characters for the end text." ; >;
    };
};
 // -=*# Resource for function MID #*=-
StringArray SC_OPCODE_MID+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a partial text string of a text." ; >;
        < "text" ; >;
        < "The text in which partial words are to be determined." ; >;
        < "start" ; >;
        < "The position from which the part word is to be determined." ; >;
        < "number" ; >;
        < "The number of characters for the text." ; >;
    };
};
 // -=*# Resource for function REPT #*=-
StringArray SC_OPCODE_REPT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Repeats text a given number of times." ; >;
        < "text" ; >;
        < "The text to be repeated." ; >;
        < "number" ; >;
        < "The number of times the text is to be repeated." ; >;
    };
};
 // -=*# Resource for function SUBSTITUTE #*=-
StringArray SC_OPCODE_SUBSTITUTE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Substitutes new text for old text in a string." ; >;
        < "text" ; >;
        < "The text in which partial words are to be replaced." ; >;
        < "search_text" ; >;
        < "The partial string to be (repeatedly) replaced." ; >;
        < "new text" ; >;
        < "The text which is to replace the text string." ; >;
        < "occurrence" ; >;
        < "Which occurrence of the old text is to be replaced." ; >;
    };
};
 // -=*# Resource for function BASE #*=-
StringArray SC_OPCODE_BASE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a positive integer to text from a number system to the base defined." ; >;
        < "number" ; >;
        < "The number to be converted." ; >;
        < "radix" ; >;
        < "The base number for conversion must be in the range 2 - 36." ; >;
        < "Minimum length" ; >;
        < "If the text is shorter than the specified length, zeros are added to the left of the string." ; >;
    };
};
 // -=*# Resource for function DECIMAL #*=-
StringArray SC_OPCODE_DECIMAL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a text of a specified number system to a positive integer in the base given." ; >;
        < "text" ; >;
        < "The text to be converted." ; >;
        < "radix" ; >;
        < "The base number for conversion must be in the range 2 - 36." ; >;
    };
};
 // -=*# Resource for function CONVERT_OOO #*=-
StringArray SC_OPCODE_CONVERT_OOO+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a value according to a conversion table in the configuration (main.xcd)."; >;
        < "value" ; >;
        < "The value to be converted."; >;
        < "text" ; >;
        < "Unit from which something is converted, case-sensitive."; >;
        < "text" ; >;
        < "Unit into which something is converted, case-sensitive."; >;
    };
};
 // -=*# Resource for function ROMAN #*=-
StringArray SC_OPCODE_ROMAN+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a number to a Roman numeral."; >;
        < "Number"; >;
        < "The number to be converted to a Roman numeral must be in the 0 - 3999 range."; >;
        < "Mode"; >;
        < "The more this value increases, the more the Roman numeral is simplified. The value must be in the 0 - 4 range."; >;
    };
};
 // -=*# Resource for function ARABIC #*=-
StringArray SC_OPCODE_ARABIC+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates the value of a Roman numeral."; >;
        < "Text"; >;
        < "The text that represents a Roman numeral."; >;
    };
};
StringArray SC_OPCODE_INFO+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns information about the environment."; >;
        < "Text"; >;
        < "Can be \"osversion\", \"system\", \"release\", \"numfile\", and \"recalc\"."; >;
    };
};
StringArray SC_OPCODE_UNICODE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the numeric code for the first Unicode character in a text string." ; >;
        < "text" ; >;
        < "This is the text for which the code of the first character is to be found." ; >;
    };
};
StringArray SC_OPCODE_UNICHAR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a code number into a Unicode character or letter." ; >;
        < "number" ; >;
        < "The code value for the character." ; >;
    };
};
StringArray SC_OPCODE_EUROCONVERT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts a value from one to another Euro currency."; >;
        < "value" ; >;
        < "The value to be converted."; >;
        < "from_currency" ; >;
        < "ISO 4217 code of the currency from which is converted, case-sensitive."; >;
        < "to_currency" ; >;
        < "ISO 4217 code of the currency into which is converted, case-sensitive."; >;
        < "full_precision" ; >;
        < "If omitted or 0 or FALSE, the result is rounded to the decimals of to_currency. Else the result is not rounded."; >;
        < "triangulation_precision" ; >;
        < "If given and >=3, the intermediate result of a triangular conversion is rounded to that precision. If omitted, the result is not rounded."; >; // This description uses almost all available space in the dialog, make sure translations fit in size.
    };
};
StringArray SC_OPCODE_NUMBERVALUE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Converts text to a number, in a locale-independent way." ; >;
        < "text" ; >;
        < "The text to be converted to a number." ; >;
        < "decimal_separator" ; >;
        < "Defines the character used as the decimal separator." ; >;
        < "group_separator" ; >;
        < "Defines the character(s) used as the group separator." ; >;
    };
};

StringArray SC_OPCODE_BITAND+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Bitwise \"AND\" of two integers."; >;
        < "Number1" ; >;
        < "Positive integer less than 2^48." ; >;
        < "Number2" ; >;
        < "Positive integer less than 2^48." ; >;
    };
};
StringArray SC_OPCODE_BITOR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Bitwise \"OR\" of two integers."; >;
        < "Number1" ; >;
        < "Positive integer less than 2^48." ; >;
        < "Number2" ; >;
        < "Positive integer less than 2^48." ; >;
    };
};
StringArray SC_OPCODE_BITXOR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Bitwise \"exclusive OR\" of two integers."; >;
        < "Number1" ; >;
        < "Positive integer less than 2^48." ; >;
        < "Number2" ; >;
        < "Positive integer less than 2^48." ; >;
    };
};
StringArray SC_OPCODE_BITRSHIFT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Bitwise right shift of an integer value."; >;
        < "Number" ; >;
        < "The value to be shifted. Positive integer less than 2^48." ; >;
        < "Shift" ; >;
        < "The integer number of bits the value is to be shifted." ; >;
    };
};
StringArray SC_OPCODE_BITLSHIFT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Bitwise left shift of an integer value."; >;
        < "Number" ; >;
        < "The value to be shifted. Positive integer less than 2^48." ; >;
        < "Shift" ; >;
        < "The integer number of bits the value is to be shifted." ; >;
    };
};
StringArray SC_OPCODE_LENB+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Calculates length of a text string, with DBCS" ; >;
        < "text" ; >;
        < "The text in which the length is to be determined." ; >;
    };
};
StringArray SC_OPCODE_RIGHTB+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the last character or characters of a text,with DBCS" ; >;
        < "text" ; >;
        < "The text in which the end partial words are to be determined." ; >;
        < "number" ; >;
        < "The number of characters for the end text." ; >;
    };
};
StringArray SC_OPCODE_LEFTB+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the first character or characters of a text,with DBCS" ; >;
        < "text" ; >;
        < "The text where the initial partial words are to be determined." ; >;
        < "number" ; >;
        < "The number of characters for the start text." ; >;
    };
};
StringArray SC_OPCODE_MIDB+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns a partial text string of a text, with DBCS" ; >;
        < "text" ; >;
        < "The text in which partial words are to be determined." ; >;
        < "start" ; >;
        < "The position from which the part word is to be determined." ; >;
        < "number" ; >;
        < "The number of characters for the text." ; >;
    };
};
StringArray SC_OPCODE_FILTERXML+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Apply an XPath expression to an XML document"; >;
        < "XML Document"; >;
        < "String containing a valid XML stream"; >;
        < "XPath expression"; >;
        < "String containing a valid XPath expression"; >;
    };
};
StringArray SC_OPCODE_COLOR+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns an implementation defined value representing a RGBA color"; >;
        < "Red"; >;
        < "Value of red"; >;
        < "Green"; >;
        < "Value of green"; >;
        < "Blue"; >;
        < "Value of blue"; >;
        < "Alpha"; >;
        < "Value of alpha"; >;
    };
};
StringArray SC_OPCODE_WEBSERVICE+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Get some webcontent from an URI."; >;
        < "URI"; >;
        < "URI of the webservice"; >;
    };
};
StringArray SC_OPCODE_ENCODEURL+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Return a URL-encoded string."; >;
        < "Text"; >;
        < "A string to be URL-encoded"; >;
    };
};
StringArray SC_OPCODE_ERF_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the error function."; >;
        < "Lower Limit"; >;
        < "The lower limit for integration"; >;
    };
};
StringArray SC_OPCODE_ERFC_MS+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the complementary error function."; >;
        < "Lower Limit"; >;
        < "The lower limit for integration"; >;
    };
};
StringArray SC_OPCODE_RAWSUBTRACT+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Returns the subtraction of numbers. Like a-b-c but without eliminating small roundoff errors." ; >;
        < "minuend" ; >;
        < "Number from which following arguments are subtracted." ; >;
        < "subtrahend " ; >;
        < "Subtrahend 1, subtrahend 2, ... are numerical arguments subtracted from the minuend." ; >;
    };
};
 // -=*# Resource for function ROUNDSIG #*=-
StringArray SC_OPCODE_ROUNDSIG+RID_SC_FUNC_DESCRIPTIONS_START
{
    ItemList [ en-US ] =
    {
        < "Rounds a number to predefined significant digits." ; >;
        < "value" ; >;
        < "The number to be rounded." ; >;
        < "digits" ; >;
        < "The number of significant digits to which value is to be rounded." ; >;
    };
};

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
