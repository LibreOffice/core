{
  "comments": [
    {
      "key": {
        "uuid": "1a54edaf_3ba07df4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2015-07-08T16:34:44Z",
      "side": 1,
      "message": "Another question is: can\u0027t boost::bind be replaced with std::bind? MSVC 2015 is failing to compile in boost::bind atm.",
      "revId": "1c49d76bc11de6e90ed56f0f665421aaaee8a643",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a54edaf_7be4b53a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2015-07-08T20:00:54Z",
      "side": 1,
      "message": "my current approach is to use lambdas when possible, because they are built-in and don\u0027t require 1000s of lines of template laden header files that drive up compile times.\n\ni think we should generally get rid of boost headers when the std::equivalent is usable on our compiler base-line, to avoid having to patch boost header with warning removal patches that upstream doesn\u0027t want to merge.\n\nif you look at the first example in this patch, it is actually nicer with the old boost::bind than with the new code, but i don\u0027t want #include \u003cboost/bind\u003e in a comphelper header that is used all over the code.\n\nif the boost::bind is in a cxx file however, there is no problem with using std::bind instead, if that happens to be nicer than a lambda in some particular case.",
      "parentUuid": "1a54edaf_3ba07df4",
      "revId": "1c49d76bc11de6e90ed56f0f665421aaaee8a643",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a54edaf_3bd5dd42",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2015-07-08T20:02:27Z",
      "side": 1,
      "message": "\"if you look at the first example in this patch\" \u003c- not this patch, but the one for comphelper that i haven\u0027t uploaded :)",
      "parentUuid": "1a54edaf_7be4b53a",
      "revId": "1c49d76bc11de6e90ed56f0f665421aaaee8a643",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a54edaf_bbc1cd82",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2015-07-08T21:10:41Z",
      "side": 1,
      "message": ";-)\n\nWhile playing with replacement of boost::bind with std::bind I\u0027m seeing the failures to compile on most recent clang++. That\u0027s because std::bind cannot induce the type of overloaded function: [1]. So something like that is failing to compile (without explicit cast, that is going to be ugly):\n\n  +++ b/basegfx/source/range/b2drangeclipper.cxx\n  +using namespace std::placeholders;\n  namespace basegfx\n {\n     namespace\n  @@ -496,9 +497,9 @@ namespace basegfx\n                 B2DPolygon aRes;\n                 std::for_each( maPoints.begin(),\n                                maPoints.end(),\n  -                             boost::bind(\n  +                             std::bind(\n                      \u0026B2DPolygon::append,\n  -                                 boost::ref(aRes),\n  +                                 std::ref(aRes),\n                                    _1,\n                                    1 ) );\n\nwith the following error: [2]. How can you replce the bind above with labmda?\n\n* [1] http://stackoverflow.com/questions/10555566/is-there-any-difference-between-c11-stdbind-and-boostbind\n* [2] http://paste.openstack.org/show/356353",
      "parentUuid": "1a54edaf_3bd5dd42",
      "revId": "1c49d76bc11de6e90ed56f0f665421aaaee8a643",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}