{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8f9f9501_428f764f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2021-12-21T17:24:21Z",
      "side": 1,
      "message": "Oh boy, this leads to lots of collisions :-)\n\nI am just about to use some private time to do a bigger general change: Separate BasePrimitive2D C++ implementation from UNO API completely. That would make Primitive2DContainer unnecessary, UNO API object connected to BasePrimitive2D only on demand - so, rarely.\nThe idea is - due to UNO API being used, but not too much - to change all that stuff to shared_ptr \u0026\u0026 shared_ptr\u003cvector\u003cPrimitive2D\u003e\u003e. Only if needed you can get an UNO API XReference for XPrimitive2D to hand around \u0026 do UNO API stuff as up to now.\nAlso included a static method at BasePrimitive2D to return to the C++ implementation class anytime and use the instances directly...\nThis was intended to avoid uno sequences for now effectively, but also to allow eventually easier addition of a visitor concept just on the C++ implementation side.\nI am pretty far with it, so maybe I can show you the changed implementation of BasePri8mitive2D soon - I would also need help, tipps \u0026 reviews as soon as it\u0027s stable, plus we will need to change the implementations of existing primitives \u0026 renderers/processors. I think it will be worth it :-)\n\nI would *not* move primitive stuff to vcl - it looks promising, but as soon as primitive stuff is used in vcl it will mix up stuff, make vcl not better and compromise the primitive concept. All necessary can be done in drawinglayer as I see it...",
      "revId": "defb5373c86664c7653cfc05a8e3d2ce7ef30e48",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95639807_44c94004",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2021-12-22T00:15:45Z",
      "side": 1,
      "message": "\u003e Oh boy, this leads to lots of collisions :-)\n\u003e \n\u003e I am just about to use some private time to do a bigger general change: Separate BasePrimitive2D C++ implementation from UNO API completely. That would make Primitive2DContainer unnecessary, UNO API object connected to BasePrimitive2D only on demand - so, rarely.\n\u003e The idea is - due to UNO API being used, but not too much - to change all that stuff to shared_ptr \u0026\u0026 shared_ptr\u003cvector\u003cPrimitive2D\u003e\u003e. Only if needed you can get an UNO API XReference for XPrimitive2D to hand around \u0026 do UNO API stuff as up to now.\n\u003e Also included a static method at BasePrimitive2D to return to the C++ implementation class anytime and use the instances directly...\n\u003e This was intended to avoid uno sequences for now effectively, but also to allow eventually easier addition of a visitor concept just on the C++ implementation side.\n\u003e I am pretty far with it, so maybe I can show you the changed implementation of BasePri8mitive2D soon - I would also need help, tipps \u0026 reviews as soon as it\u0027s stable, plus we will need to change the implementations of existing primitives \u0026 renderers/processors. I think it will be worth it :-)\n\nThis sounds promising. Please do one change at a time and push to gerrit for review. IMHO the only thing that needs UNO in drawinglayer is a wrapper to pass a container of primitives around - nothing else makes sense for usage through UNO. \n\n\u003e I would *not* move primitive stuff to vcl - it looks promising, but as soon as primitive stuff is used in vcl it will mix up stuff, make vcl not better and compromise the primitive concept. All necessary can be done in drawinglayer as I see it...\n\nThis is why I instead separated the drawinglayer into 2 libraries - one would serve as core implementation and interfaces and wouldn\u0027t depend on VCL (so it can be freely used there), the other part would be the rest. The minimum implementation is in [1], we can easily move needed classes to core if necessary. \n\n[1] https://gerrit.libreoffice.org/c/core/+/127286",
      "parentUuid": "8f9f9501_428f764f",
      "revId": "defb5373c86664c7653cfc05a8e3d2ce7ef30e48",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67be0c03_8c35e975",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2021-12-22T06:39:36Z",
      "side": 1,
      "message": "\u003e I am just about to use some private time to do a bigger general change: Separate BasePrimitive2D C++ implementation from UNO API completely\n\nI\u0027ve already done that - here: https://gerrit.libreoffice.org/c/core/+/126487\nBut there are a couple of places in vcl/ that need typeinfo for drawinglayer stuff, and that is why I did this change.",
      "parentUuid": "95639807_44c94004",
      "revId": "defb5373c86664c7653cfc05a8e3d2ce7ef30e48",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca757783_60908ed3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2021-12-22T09:25:33Z",
      "side": 1,
      "message": "So, thought about it back and forth - leading to a simple question:\n  Why do you want Primitives in vcl?\n  What do you intend to do with them?",
      "revId": "defb5373c86664c7653cfc05a8e3d2ce7ef30e48",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "379ee3da_711603fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2021-12-22T09:32:57Z",
      "side": 1,
      "message": "\u003e   Why do you want Primitives in vcl?\n\u003e   What do you intend to do with them?\n\nThe long term plan is to make the rendering of primitives more efficient by more directly translating them to the underlying platform-specific graphic APIs.\n\nThat means, for example, instead of attempting to reflect parts of the Skia API in the OutputDevice API, we can do a processor that directly converts Primitive\u0027s into skia API.\n\nWhich means the Processor class needs to have access to stuff inside the vcl plugin code, and to the drawinglayer primitives.\n\nAnyhow, it looks like quikee\u0027s patch at \n   https://gerrit.libreoffice.org/c/core/+/127286\nis going to work for me, so I can abandon this.",
      "parentUuid": "ca757783_60908ed3",
      "revId": "defb5373c86664c7653cfc05a8e3d2ce7ef30e48",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0ce3bc5_13e1c6cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2021-12-22T09:45:52Z",
      "side": 1,
      "message": "\u003e I\u0027ve already done that - here: https://gerrit.libreoffice.org/c/core/+/126487\n\u003e But there are a couple of places in vcl/ that need typeinfo for drawinglayer stuff, and that is why I did this change.\n\nInteresting, need to check that deeper. My change is more radical and based on shared_ptr, hope to put it somewhere ASAP to discuss. It would need quite some adaptions for all primitive implementations, but also makes seq\u003cprimitives\u003e obsolete outside UNO API.\n\nCould you explain why this leaded to \"why I did this change\" - I do not see a need to have primitives in vcl. And no, I did not oversee that they would need to be used in vcl when I designed/implemented that first 40% of primitives :-)",
      "parentUuid": "67be0c03_8c35e975",
      "revId": "defb5373c86664c7653cfc05a8e3d2ce7ef30e48",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25172aff_26e7d5d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2021-12-22T10:09:30Z",
      "side": 1,
      "message": "\u003e The long term plan is to make the rendering of primitives more efficient by more directly translating them to the underlying platform-specific graphic APIs.\n\u003e \n\u003e That means, for example, instead of attempting to reflect parts of the Skia API in the OutputDevice API, we can do a processor that directly converts Primitive\u0027s into skia API.\n\u003e \n\u003e Which means the Processor class needs to have access to stuff inside the vcl plugin code, and to the drawinglayer primitives.\n\nYes, that is true, but does not require to have Primitive stuff available in vcl. It is separated by purpose. The long term plan for primitives - done when designing \u0026 implementing them - was always to have system-backend-specific renderers/processors.\n\nIt is separated to have a long-term path to get rid of vcl dependencies - who wants to keep that Win3.11 GDI based stuff forever? So I would prefer to not mix stuff up.\n\nThe now used pixel-processor/renderer targeted at vcl OutputDevice was always thought as an in-between solution, but it is used now for 10years - sigh - due to with the opensource area not having ressources anymore to continue that transformation stuff. We could have those system-specific renderers if there would have been support...Jehova, Jehova :-)\n\nTechnically I would do/had always planned to do something like:\n\n- use the primitive processor which is also the visitor/renderer tool for primitives. Add small UNO API like for Primitive (would just be incarnation \u0026 render(seq\u003cprimitives\u003e)) to implement e.g. cairo-dependent pixel-renderer in drawinglayer module (maybe even as seperate small library)\n\n- There is already a central place to get a pixel-renderer, extend that to  create/prepare/return the correct specialized renderer for the current runtime situation\n\n- In the implementation it would - for now - be necessary to re-use sal gdi stuff from backends to get fast progress (and not to double code). Remember that the long term view would be ideally vice-versa - use up-calls to allow current render calls at OutputDevice to be done by that renderers using temp primitives - so backends could completely move to that uno service implementations long term\n\n- Indeed we would thus for now need a possibility to access specific back-ends in specific service implementation libraries. I think we could find possibilities to do that. AFAIK e.g. cairo is already much moere open accessible than it should be...\n\nAh, for the UNO API stuff - it\u0027s just for interface, inside the processor/renderer you could go back to the C++ implementation instantly. Only a single primitive2D would need a UNO API impl object for transfer (you can always pack a vector/sequence of primitives into a neutral group primitive to reduce diameter of stuff to hand around :-)\n\nThis is what I have tried to talk about at all meetings/conferences, tried to spread if/how that can/may be developed further. If there are better ideas, that is of course welcome - it\u0027s open source now :-)\n\n\n\u003e \n\u003e Anyhow, it looks like quikee\u0027s patch at \n\u003e    https://gerrit.libreoffice.org/c/core/+/127286\n\u003e is going to work for me, so I can abandon this.",
      "parentUuid": "379ee3da_711603fb",
      "revId": "defb5373c86664c7653cfc05a8e3d2ce7ef30e48",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}