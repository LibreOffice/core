{
  "comments": [
    {
      "key": {
        "uuid": "9a57fde8_234fab93",
        "filename": "editeng/source/editeng/eerdll.cxx",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2017-03-07T12:42:19Z",
      "side": 1,
      "message": "surely, in this dtor, the only thing we should be doing is asserting that m_bDisposed is true?\nAll the other logic belongs in dispose().\nNote that if you do this, you might need to make m_bDisposed a std::atomic\u003cbool\u003e",
      "revId": "dc50e7e1cf1e5702542b0b96f12c0facaaa0fbc0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a57fde8_a322bbb7",
        "filename": "editeng/source/editeng/eerdll.cxx",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2017-03-07T12:54:38Z",
      "side": 1,
      "message": "From the failures, it seems that editeng can be torn down before DeInitVCL() too. In that case, we need two additional things over dispose(): a/ get the SolarMutex (which should be safe if we havent sailed past DeInitVCL() yet b/ remove the callback, so that vcl doesnt get upset on Windows to dtor a std::function to a gone location.\n\nAnd yeah, std::atomic\u003cbool\u003e is a good idea indeed.",
      "parentUuid": "9a57fde8_234fab93",
      "revId": "dc50e7e1cf1e5702542b0b96f12c0facaaa0fbc0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a57fde8_e32cc3ad",
        "filename": "editeng/source/editeng/eerdll.cxx",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2017-03-07T13:02:13Z",
      "side": 1,
      "message": "Then surely DeInitVCL() is too low down in the stack and we  need to tie into something higher up to destroy GlobalEditData?\nNote that there is nice stack-trace-dumping logging now which works on Windows and Linux, if you need to figure out where the call to the dtor is coming from - see SAL_DEBUG_BACKTRACE",
      "parentUuid": "9a57fde8_a322bbb7",
      "revId": "dc50e7e1cf1e5702542b0b96f12c0facaaa0fbc0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a57fde8_6317f351",
        "filename": "editeng/source/editeng/eerdll.cxx",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2017-03-07T13:11:49Z",
      "side": 1,
      "message": "addendum: I dont want to call:\n\n RemoveOnDeInitVCL(this);\n\nin the callback, as that changes the container that is being iterated over in DeInitVCL(). So I call it here, and for that I need the SolarMutex. DeInitVCl() clears the callbacks itself when it iterated over them.\n\nThe current implementation in VCL uses std::map::erase which http://www.cplusplus.com/reference/map/map/erase/ says:\n\u003e Iterators, pointers and references referring to elements removed by the function are invalidated.\n\nso this likely wouldnt work. One use a different container in vcl ... but as-is, a callback should not remove itself.",
      "parentUuid": "9a57fde8_a322bbb7",
      "revId": "dc50e7e1cf1e5702542b0b96f12c0facaaa0fbc0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a57fde8_c306df1f",
        "filename": "editeng/source/editeng/eerdll.cxx",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2017-03-07T13:16:52Z",
      "side": 1,
      "message": "Maybe just don\u0027t have a RemoteOnDeInitVCL method at all, and rely on VCL cleaning itself up? Then this problem goes away.\n\nOtherwise, you could just do what other code does - inside the broadcast method, before doing the actual broadcasting, take a copy of the data-structure, and then iterate over that.",
      "parentUuid": "9a57fde8_6317f351",
      "revId": "dc50e7e1cf1e5702542b0b96f12c0facaaa0fbc0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}