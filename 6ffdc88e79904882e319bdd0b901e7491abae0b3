{
  "comments": [
    {
      "key": {
        "uuid": "bf659307_8570a174",
        "filename": "starmath/source/cfgitem.cxx",
        "patchSetId": 3
      },
      "lineNbr": 378,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-07-23T01:51:41Z",
      "side": 1,
      "message": "Note that this is slightly less efficient than the original code. It calls getArray() three times - for begin(), end(), and begin() (instead of once previously), with the related overhead; and also it creates (allocates and initializes) a lambda *object* (not a function, which would be possible if its capture list were empty).\n\nIn this case, plain range-based for would be more efficient than the new code (but slightly less efficient than old code, because of two getArray()s, because range-based for still needs to call end()).",
      "range": {
        "startLine": 376,
        "startChar": 4,
        "endLine": 378,
        "endChar": 73
      },
      "revId": "6ffdc88e79904882e319bdd0b901e7491abae0b3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_456a8980",
        "filename": "starmath/source/cfgitem.cxx",
        "patchSetId": 3
      },
      "lineNbr": 378,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-07-23T01:58:43Z",
      "side": 1,
      "message": "Also note that to modify the original sequence using algorithms, std::for_each is recommended instead of std::transform - see Notes in [1], and the discussion starting with \"For both overloads, if the iterator type is mutable,\" in [2].\n\n[1] https://en.cppreference.com/w/cpp/algorithm/transform\n[2] https://en.cppreference.com/w/cpp/algorithm/for_each",
      "parentUuid": "bf659307_8570a174",
      "range": {
        "startLine": 376,
        "startChar": 4,
        "endLine": 378,
        "endChar": 73
      },
      "revId": "6ffdc88e79904882e319bdd0b901e7491abae0b3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_66047416",
        "filename": "starmath/source/cfgitem.cxx",
        "patchSetId": 3
      },
      "lineNbr": 378,
      "author": {
        "id": 1001501
      },
      "writtenOn": "2019-07-23T14:57:48Z",
      "side": 1,
      "message": "Then almost all my changes to sequence iterations are less efficient since original code usually uses getArray() and getLength() methods, while changed code uses begin() and end().\nI\u0027ll replace here and on line 583 with range-for.\nIn general, are these readability changes worth decreased performance?",
      "parentUuid": "bf659307_8570a174",
      "range": {
        "startLine": 376,
        "startChar": 4,
        "endLine": 378,
        "endChar": 73
      },
      "revId": "6ffdc88e79904882e319bdd0b901e7491abae0b3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_050a51d1",
        "filename": "stoc/source/defaultregistry/defaultregistry.cxx",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-07-23T03:14:38Z",
      "side": 1,
      "message": "This whole two-pass thing looks a good candidate to a single-pass refactoring using a vector as accumulator, and std::accumulate populating the vector, then converting the result to sequence...",
      "range": {
        "startLine": 760,
        "startChar": 4,
        "endLine": 781,
        "endChar": 9
      },
      "revId": "6ffdc88e79904882e319bdd0b901e7491abae0b3",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}