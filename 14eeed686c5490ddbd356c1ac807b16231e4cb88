{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1fc643af_bed2b871",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-21T07:55:42Z",
      "side": 1,
      "message": "why?",
      "revId": "14eeed686c5490ddbd356c1ac807b16231e4cb88",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "881142b1_b64bfc51",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-21T12:52:29Z",
      "side": 1,
      "message": "Why not? I was annoyed that the cross-build did always build the same code, just because the saxparser binary was linked again. No need for new builds, if the generated source doesn\u0027t change.",
      "parentUuid": "1fc643af_bed2b871",
      "revId": "14eeed686c5490ddbd356c1ac807b16231e4cb88",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9110f4d_5fb23faf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-21T12:59:46Z",
      "side": 1,
      "message": "I rather wondered about the \"use random temporary files\" part",
      "parentUuid": "881142b1_b64bfc51",
      "revId": "14eeed686c5490ddbd356c1ac807b16231e4cb88",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfc0d430_30421d44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-21T13:29:17Z",
      "side": 1,
      "message": "\u003e I rather wondered about the \"use random temporary files\" part\n\nIt\u0027s temporary, so just keep it in temp? Feels more natural then made up names. gbuild OTOH is not really consistent in the $(gb_MKTEMP) usage.\n\nbikeshedding / YMMV: I think $(gb_MKTEMP) should be the preference, even if it calls a program and therefore will be a bit slower.",
      "parentUuid": "e9110f4d_5fb23faf",
      "revId": "14eeed686c5490ddbd356c1ac807b16231e4cb88",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cd78758_ad81c9a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-21T13:39:41Z",
      "side": 1,
      "message": "I see.  I\u0027m coming from the opposite background, that\u0027s why I wondered.  (My qualms with gb_MKTEMP are that it makes it harder to debug build issues by obscuring the actual file names and easily fills TMPDIR with garbage if e.g. a recipe fails in the middle of a ... \u0026\u0026 ... \u0026\u0026 ... chain and thus never gets to the rm---which is less of an issue if the temporary file has a well-known name in WORKDIR, where it gets overwritten by the next build and/or removed by `make clean`.)",
      "parentUuid": "cfc0d430_30421d44",
      "revId": "14eeed686c5490ddbd356c1ac807b16231e4cb88",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5681f2d_74b4fa74",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2021-12-27T08:11:10Z",
      "side": 1,
      "message": "\u003e My qualms with gb_MKTEMP are that it makes it harder to debug build issues by obscuring the actual file names and easily fills TMPDIR with garbage if e.g. a recipe fails in the middle of a ... \u0026\u0026 ... \u0026\u0026 ... chain and thus never gets to the rm---which is less of an issue if the temporary file has a well-known name in WORKDIR, where it gets overwritten by the next build and/or removed by `make clean`.\n\nThat is actually some argument instead of my \"TEMP is for temporary files, so use it\". If you have well know names, you can easily remove them in a 2nd rule statement with \"rm -f\", with no need to worry about complex failing shell chains). Maybe that is even EasyHack-able, to get rid of gb_MKTEMPâ€¦ hmmm. Our worktree is writable after all, and easy to clean. Not sure, if it\u0027s worth to have an additional \"make clean-temporary\" target, which you can toggle like \"make keep-temporary\u003dt\" for debugging. I don\u0027t think there is a way to remove all temporary file at then end of any rule, like some pattern rules do. And I\u0027m probably totally over-engineering this...",
      "parentUuid": "0cd78758_ad81c9a0",
      "revId": "14eeed686c5490ddbd356c1ac807b16231e4cb88",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}