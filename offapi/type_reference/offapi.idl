module com {
 module sun {
  module star {
   module accessibility {
    interface XAccessibleContext;
    interface XAccessible {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::accessibility::XAccessibleContext getAccessibleContext();
    };
   };
   module awt {
    published struct Point {
     long X;
     long Y;
    };
    published struct Rectangle {
     long X;
     long Y;
     long Width;
     long Height;
    };
    published struct Size {
     long Width;
     long Height;
    };
   };
   module util {
    published typedef long Color;
   };
   module awt {
    published struct KeyStroke {
     short Modifiers;
     short KeyCode;
     char KeyChar;
     short KeyFunc;
    };
   };
   module auth {
    published exception AuthenticationFailedException: ::com::sun::star::uno::Exception {
    };
    published exception InvalidArgumentException: ::com::sun::star::uno::Exception {
    };
    published exception InvalidContextException: ::com::sun::star::uno::Exception {
    };
    published exception InvalidCredentialException: ::com::sun::star::uno::Exception {
    };
    published exception InvalidPrincipalException: ::com::sun::star::uno::Exception {
    };
    published exception PersistenceFailureException: ::com::sun::star::uno::Exception {
    };
    published interface XSSOManager;
    published interface XSSOManagerFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::auth::XSSOManager getSSOManager();
    };
    published service SSOManagerFactory: ::com::sun::star::auth::XSSOManagerFactory;
    published interface XSSOPasswordCache {
     interface ::com::sun::star::uno::XInterface;
     void addPassword([in] string UserName, [in] string Password, [in] boolean Persist) raises (::com::sun::star::auth::InvalidArgumentException, ::com::sun::star::auth::PersistenceFailureException);
     string getPassword([in] string UserName, [out] boolean Persist) raises (::com::sun::star::auth::InvalidArgumentException, ::com::sun::star::auth::PersistenceFailureException);
     void removePassword([in] string UserName, [in] boolean RemovePersist) raises (::com::sun::star::auth::InvalidArgumentException, ::com::sun::star::auth::PersistenceFailureException);
    };
    published service SSOPasswordCache: ::com::sun::star::auth::XSSOPasswordCache;
    published exception UnsupportedException: ::com::sun::star::uno::Exception {
    };
    published interface XSSOContext {
     interface ::com::sun::star::uno::XInterface;
     string getSource();
     string getTarget();
     string getMechanism();
     boolean getMutual();
    };
    published interface XSSOAcceptorContext {
     interface ::com::sun::star::auth::XSSOContext;
     sequence< byte > accept([in] sequence< byte > Token) raises (::com::sun::star::auth::InvalidArgumentException, ::com::sun::star::auth::InvalidCredentialException, ::com::sun::star::auth::InvalidContextException, ::com::sun::star::auth::AuthenticationFailedException);
    };
    published interface XSSOInitiatorContext {
     interface ::com::sun::star::auth::XSSOContext;
     sequence< byte > init([in] sequence< byte > Token) raises (::com::sun::star::auth::InvalidArgumentException, ::com::sun::star::auth::InvalidCredentialException, ::com::sun::star::auth::InvalidContextException, ::com::sun::star::auth::AuthenticationFailedException);
    };
    published interface XSSOManager {
     interface ::com::sun::star::uno::XInterface;
     string getMechanism();
     ::com::sun::star::auth::XSSOInitiatorContext createInitiatorContext([in] string SourcePrincipal, [in] string TargetPrincipal, [in] string TargetHost) raises (::com::sun::star::auth::InvalidArgumentException, ::com::sun::star::auth::InvalidCredentialException, ::com::sun::star::auth::InvalidPrincipalException, ::com::sun::star::auth::UnsupportedException);
     ::com::sun::star::auth::XSSOAcceptorContext createAcceptorContext([in] string TargetPrincipal) raises (::com::sun::star::auth::InvalidArgumentException, ::com::sun::star::auth::InvalidCredentialException, ::com::sun::star::auth::InvalidPrincipalException, ::com::sun::star::auth::UnsupportedException);
    };
   };
   module awt {
    published struct ActionEvent: ::com::sun::star::lang::EventObject {
     string ActionCommand;
    };
    published enum AdjustmentType {
     ADJUST_LINE = 0,
     ADJUST_PAGE = 1,
     ADJUST_ABS = 2
    };
    published struct AdjustmentEvent: ::com::sun::star::lang::EventObject {
     long Value;
     ::com::sun::star::awt::AdjustmentType Type;
    };
    published interface XControlModel;
    published interface XToolkit;
    published interface XView;
    published interface XWindowPeer;
    published interface XControl {
     interface ::com::sun::star::lang::XComponent;
     void setContext([in] ::com::sun::star::uno::XInterface Context);
     ::com::sun::star::uno::XInterface getContext();
     void createPeer([in] ::com::sun::star::awt::XToolkit Toolkit, [in] ::com::sun::star::awt::XWindowPeer Parent);
     ::com::sun::star::awt::XWindowPeer getPeer();
     boolean setModel([in] ::com::sun::star::awt::XControlModel Model);
     ::com::sun::star::awt::XControlModel getModel();
     ::com::sun::star::awt::XView getView();
     void setDesignMode([in] boolean bOn);
     boolean isDesignMode();
     boolean isTransparent();
    };
    published interface XGraphics;
    published interface XView {
     interface ::com::sun::star::uno::XInterface;
     boolean setGraphics([in] ::com::sun::star::awt::XGraphics aDevice);
     ::com::sun::star::awt::XGraphics getGraphics();
     ::com::sun::star::awt::Size getSize();
     void draw([in] long nX, [in] long nY);
     void setZoom([in] float fZoomX, [in] float fZoomY);
    };
    published interface XFocusListener;
    published interface XKeyListener;
    published interface XMouseListener;
    published interface XMouseMotionListener;
    published interface XPaintListener;
    published interface XWindowListener;
    published interface XWindow {
     interface ::com::sun::star::lang::XComponent;
     void setPosSize([in] long X, [in] long Y, [in] long Width, [in] long Height, [in] short Flags);
     ::com::sun::star::awt::Rectangle getPosSize();
     void setVisible([in] boolean Visible);
     void setEnable([in] boolean Enable);
     void setFocus();
     void addWindowListener([in] ::com::sun::star::awt::XWindowListener xListener);
     void removeWindowListener([in] ::com::sun::star::awt::XWindowListener xListener);
     void addFocusListener([in] ::com::sun::star::awt::XFocusListener xListener);
     void removeFocusListener([in] ::com::sun::star::awt::XFocusListener xListener);
     void addKeyListener([in] ::com::sun::star::awt::XKeyListener xListener);
     void removeKeyListener([in] ::com::sun::star::awt::XKeyListener xListener);
     void addMouseListener([in] ::com::sun::star::awt::XMouseListener xListener);
     void removeMouseListener([in] ::com::sun::star::awt::XMouseListener xListener);
     void addMouseMotionListener([in] ::com::sun::star::awt::XMouseMotionListener xListener);
     void removeMouseMotionListener([in] ::com::sun::star::awt::XMouseMotionListener xListener);
     void addPaintListener([in] ::com::sun::star::awt::XPaintListener xListener);
     void removePaintListener([in] ::com::sun::star::awt::XPaintListener xListener);
    };
    published service UnoControl {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::awt::XControl;
     interface ::com::sun::star::awt::XWindow;
     interface ::com::sun::star::awt::XView;
     [optional] interface ::com::sun::star::accessibility::XAccessible;
    };
    published service UnoControlDialogElement {
     [property] long Height;
     [property] string Name;
     [property] string PositionX;
     [property] string PositionY;
     [property] long Step;
     [property] short TabIndex;
     [property] string Tag;
     [property] long Width;
    };
    published interface XControlModel {
     interface ::com::sun::star::uno::XInterface;
    };
   };
   module util {
    published interface XCloneable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::util::XCloneable createClone();
    };
   };
   module awt {
    published service UnoControlModel {
     [optional] service ::com::sun::star::awt::UnoControlDialogElement;
     interface ::com::sun::star::awt::XControlModel;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::beans::XMultiPropertySet;
     interface ::com::sun::star::io::XPersistObject;
     interface ::com::sun::star::util::XCloneable;
     [property] string DefaultControl;
    };
    /** @deprecated */ published constants CharSet {
     const short ANSI = 1;
     const short DONTKNOW = 0;
     const short IBMPC_437 = 3;
     const short IBMPC_850 = 4;
     const short IBMPC_860 = 5;
     const short IBMPC_861 = 6;
     const short IBMPC_863 = 7;
     const short IBMPC_865 = 8;
     const short MAC = 2;
     const short SYMBOL = 10;
     const short SYSTEM = 9;
    };
    published constants Command {
     const short AUTOSCROLL = 5;
     const short CONTEXTMENU = 1;
     const short CURSORPOS = 11;
     const short ENDEXTTEXTINPUT = 9;
     const short EXTTEXTINPUT = 8;
     const short HANGUL_HANJA_CONVERSION = 14;
     const short INPUTCONTEXTCHANGE = 10;
     const short MODKEYCHANGE = 13;
     const short PASTESELECTION = 12;
     const short STARTAUTOSCROLL = 4;
     const short STARTDRAG = 2;
     const short STARTEXTTEXTINPUT = 7;
     const short USER = 4096;
     const short VOICE = 6;
     const short WHEEL = 3;
    };
    published constants DeviceCapability {
     const long GETBITS = 2;
     const long RASTEROPERATIONS = 1;
    };
    published struct DeviceInfo {
     long Width;
     long Height;
     long LeftInset;
     long TopInset;
     long RightInset;
     long BottomInset;
     double PixelPerMeterX;
     double PixelPerMeterY;
     short BitsPerPixel;
     long Capabilities;
    };
    published struct InputEvent: ::com::sun::star::lang::EventObject {
     short Modifiers;
    };
    published struct MouseEvent: ::com::sun::star::awt::InputEvent {
     short Buttons;
     long X;
     long Y;
     long ClickCount;
     boolean PopupTrigger;
    };
    published struct EnhancedMouseEvent: ::com::sun::star::awt::MouseEvent {
     ::com::sun::star::uno::XInterface Target;
    };
    published constants FocusChangeReason {
     const long AROUND = 64;
     const long BACKWARD = 32;
     const long CURSOR = 2;
     const long FORWARD = 16;
     const long MNEMONIC = 4;
     const long TAB = 1;
     const long UNIQUEMNEMONIC = 256;
    };
    published struct FocusEvent: ::com::sun::star::lang::EventObject {
     short FocusFlags;
     ::com::sun::star::uno::XInterface NextFocus;
     boolean Temporary;
    };
    published enum FontSlant {
     NONE = 0,
     OBLIQUE = 1,
     ITALIC = 2,
     DONTKNOW = 3,
     REVERSE_OBLIQUE = 4,
     REVERSE_ITALIC = 5
    };
    published struct FontDescriptor {
     string Name;
     short Height;
     short Width;
     string StyleName;
     short Family;
     short CharSet;
     short Pitch;
     float CharacterWidth;
     float Weight;
     ::com::sun::star::awt::FontSlant Slant;
     short Underline;
     short Strikeout;
     float Orientation;
     boolean Kerning;
     boolean WordLineMode;
     short Type;
    };
    published constants FontEmphasisMark {
     const short ABOVE = 4096;
     const short ACCENT = 4;
     const short BELOW = 8192;
     const short CIRCLE = 2;
     const short DISC = 3;
     const short DOT = 1;
     const short NONE = 0;
    };
    published constants FontFamily {
     const short DECORATIVE = 1;
     const short DONTKNOW = 0;
     const short MODERN = 2;
     const short ROMAN = 3;
     const short SCRIPT = 4;
     const short SWISS = 5;
     const short SYSTEM = 6;
    };
    published constants FontPitch {
     const short DONTKNOW = 0;
     const short FIXED = 1;
     const short VARIABLE = 2;
    };
    published constants FontRelief {
     const short EMBOSSED = 1;
     const short ENGRAVED = 2;
     const short NONE = 0;
    };
    published constants FontStrikeout {
     const short BOLD = 4;
     const short DONTKNOW = 3;
     const short DOUBLE = 2;
     const short NONE = 0;
     const short SINGLE = 1;
     const short SLASH = 5;
     const short X = 6;
    };
    published constants FontType {
     const short DEVICE = 2;
     const short DONTKNOW = 0;
     const short RASTER = 1;
     const short SCALABLE = 4;
    };
    published constants FontUnderline {
     const short BOLD = 12;
     const short BOLDDASH = 14;
     const short BOLDDASHDOT = 16;
     const short BOLDDASHDOTDOT = 17;
     const short BOLDDOTTED = 13;
     const short BOLDLONGDASH = 15;
     const short BOLDWAVE = 18;
     const short DASH = 5;
     const short DASHDOT = 7;
     const short DASHDOTDOT = 8;
     const short DONTKNOW = 4;
     const short DOTTED = 3;
     const short DOUBLE = 2;
     const short DOUBLEWAVE = 11;
     const short LONGDASH = 6;
     const short NONE = 0;
     const short SINGLE = 1;
     const short SMALLWAVE = 9;
     const short WAVE = 10;
    };
    published constants FontWeight {
     const float BLACK = 200;
     const float BOLD = 150;
     const float DONTKNOW = 0;
     const float LIGHT = 75;
     const float NORMAL = 100;
     const float SEMIBOLD = 110;
     const float SEMILIGHT = 90;
     const float THIN = 50;
     const float ULTRABOLD = 175;
     const float ULTRALIGHT = 60;
    };
    published constants FontWidth {
     const float CONDENSED = 75;
     const float DONTKNOW = 0;
     const float EXPANDED = 150;
     const float EXTRACONDENSED = 60;
     const float EXTRAEXPANDED = 175;
     const float NORMAL = 100;
     const float SEMICONDENSED = 90;
     const float SEMIEXPANDED = 110;
     const float ULTRACONDENSED = 50;
     const float ULTRAEXPANDED = 200;
    };
    published enum GradientStyle {
     LINEAR = 0,
     AXIAL = 1,
     RADIAL = 2,
     ELLIPTICAL = 3,
     SQUARE = 4,
     RECT = 5
    };
    published struct Gradient {
     ::com::sun::star::awt::GradientStyle Style;
     ::com::sun::star::util::Color StartColor;
     ::com::sun::star::util::Color EndColor;
     short Angle;
     short Border;
     short XOffset;
     short YOffset;
     short StartIntensity;
     short EndIntensity;
     short StepCount;
    };
    published constants ImageAlign {
     const short BOTTOM = 3;
     const short LEFT = 0;
     const short RIGHT = 2;
     const short TOP = 1;
    };
    published constants ImageStatus {
     const long IMAGESTATUS_ABORTED = 4;
     const long IMAGESTATUS_ERROR = 1;
     const long IMAGESTATUS_SINGLEFRAMEDONE = 2;
     const long IMAGESTATUS_STATICIMAGEDONE = 3;
    };
    published constants InvalidateStyle {
     const short CHILDREN = 1;
     const short NOCHILDREN = 2;
     const short NOCLIPCHILDREN = 16384;
     const short NOERASE = 4;
     const short NOTRANSPARENT = 32;
     const short TRANSPARENT = 16;
     const short UPDATE = 8;
    };
    published struct ItemEvent: ::com::sun::star::lang::EventObject {
     long Selected;
     long Highlighted;
     long ItemId;
    };
    published constants Key {
     const short A = 512;
     const short ADD = 1287;
     const short B = 513;
     const short BACKSPACE = 1283;
     const short BRACKETLEFT = 1315;
     const short BRACKETRIGHT = 1316;
     const short C = 514;
     const short CAPSLOCK = 1312;
     const short COMMA = 1292;
     const short CONTEXTMENU = 1305;
     const short COPY = 1298;
     const short CUT = 1297;
     const short D = 515;
     const short DECIMAL = 1309;
     const short DELETE = 1286;
     const short DELETE_TO_BEGIN_OF_LINE = 1536;
     const short DELETE_TO_BEGIN_OF_PARAGRAPH = 1538;
     const short DELETE_TO_END_OF_LINE = 1537;
     const short DELETE_TO_END_OF_PARAGRAPH = 1539;
     const short DELETE_WORD_BACKWARD = 1540;
     const short DELETE_WORD_FORWARD = 1541;
     const short DIVIDE = 1290;
     const short DOWN = 1024;
     const short E = 516;
     const short END = 1029;
     const short EQUAL = 1295;
     const short ESCAPE = 1281;
     const short F = 517;
     const short F1 = 768;
     const short F10 = 777;
     const short F11 = 778;
     const short F12 = 779;
     const short F13 = 780;
     const short F14 = 781;
     const short F15 = 782;
     const short F16 = 783;
     const short F17 = 784;
     const short F18 = 785;
     const short F19 = 786;
     const short F2 = 769;
     const short F20 = 787;
     const short F21 = 788;
     const short F22 = 789;
     const short F23 = 790;
     const short F24 = 791;
     const short F25 = 792;
     const short F26 = 793;
     const short F3 = 770;
     const short F4 = 771;
     const short F5 = 772;
     const short F6 = 773;
     const short F7 = 774;
     const short F8 = 775;
     const short F9 = 776;
     const short FIND = 1302;
     const short FRONT = 1304;
     const short G = 518;
     const short GREATER = 1294;
     const short H = 519;
     const short HANGUL_HANJA = 1308;
     const short HELP = 1306;
     const short HOME = 1028;
     const short I = 520;
     const short INSERT = 1285;
     const short INSERT_LINEBREAK = 1542;
     const short INSERT_PARAGRAPH = 1543;
     const short J = 521;
     const short K = 522;
     const short L = 523;
     const short LEFT = 1026;
     const short LESS = 1293;
     const short M = 524;
     const short MENU = 1307;
     const short MOVE_TO_BEGIN_OF_DOCUMENT = 1560;
     const short MOVE_TO_BEGIN_OF_LINE = 1546;
     const short MOVE_TO_BEGIN_OF_PARAGRAPH = 1548;
     const short MOVE_TO_END_OF_DOCUMENT = 1561;
     const short MOVE_TO_END_OF_LINE = 1547;
     const short MOVE_TO_END_OF_PARAGRAPH = 1549;
     const short MOVE_WORD_BACKWARD = 1544;
     const short MOVE_WORD_FORWARD = 1545;
     const short MULTIPLY = 1289;
     const short N = 525;
     const short NUM0 = 256;
     const short NUM1 = 257;
     const short NUM2 = 258;
     const short NUM3 = 259;
     const short NUM4 = 260;
     const short NUM5 = 261;
     const short NUM6 = 262;
     const short NUM7 = 263;
     const short NUM8 = 264;
     const short NUM9 = 265;
     const short NUMLOCK = 1313;
     const short O = 526;
     const short OPEN = 1296;
     const short P = 527;
     const short PAGEDOWN = 1031;
     const short PAGEUP = 1030;
     const short PASTE = 1299;
     const short POINT = 1291;
     const short PROPERTIES = 1303;
     const short Q = 528;
     const short QUOTELEFT = 1311;
     const short QUOTERIGHT = 1318;
     const short R = 529;
     const short REPEAT = 1301;
     const short RETURN = 1280;
     const short RIGHT = 1027;
     const short S = 530;
     const short SCROLLLOCK = 1314;
     const short SELECT_ALL = 1557;
     const short SELECT_BACKWARD = 1550;
     const short SELECT_FORWARD = 1551;
     const short SELECT_LINE = 1555;
     const short SELECT_PARAGRAPH = 1556;
     const short SELECT_TO_BEGIN_OF_DOCUMENT = 1562;
     const short SELECT_TO_BEGIN_OF_LINE = 1558;
     const short SELECT_TO_BEGIN_OF_PARAGRAPH = 1564;
     const short SELECT_TO_END_OF_DOCUMENT = 1563;
     const short SELECT_TO_END_OF_LINE = 1559;
     const short SELECT_TO_END_OF_PARAGRAPH = 1565;
     const short SELECT_WORD = 1554;
     const short SELECT_WORD_BACKWARD = 1552;
     const short SELECT_WORD_FORWARD = 1553;
     const short SEMICOLON = 1317;
     const short SPACE = 1284;
     const short SUBTRACT = 1288;
     const short T = 531;
     const short TAB = 1282;
     const short TILDE = 1310;
     const short U = 532;
     const short UNDO = 1300;
     const short UP = 1025;
     const short V = 533;
     const short W = 534;
     const short X = 535;
     const short Y = 536;
     const short Z = 537;
    };
    published struct KeyEvent: ::com::sun::star::awt::InputEvent {
     short KeyCode;
     char KeyChar;
     short KeyFunc;
    };
    published constants KeyFunction {
     const short CLOSE = 6;
     const short COPY = 9;
     const short CUT = 8;
     const short DELETE = 13;
     const short DONTKNOW = 0;
     const short FIND = 15;
     const short FINDBACKWARD = 16;
     const short FRONT = 18;
     const short NEW = 1;
     const short OPEN = 2;
     const short PASTE = 10;
     const short PRINT = 5;
     const short PROPERTIES = 17;
     const short QUIT = 7;
     const short REDO = 12;
     const short REPEAT = 14;
     const short SAVE = 3;
     const short SAVEAS = 4;
     const short UNDO = 11;
    };
    /** @deprecated */ published constants KeyGroup {
     const short ALPHA = 512;
     const short CURSOR = 1024;
     const short FKEYS = 768;
     const short MISC = 1280;
     const short NUM = 256;
     const short TYPE = 3840;
    };
    published constants KeyModifier {
     const short MOD1 = 2;
     const short MOD2 = 4;
     const short MOD3 = 8;
     const short SHIFT = 1;
    };
    published enum MenuItemType {
     DONTKNOW = 0,
     STRING = 1,
     IMAGE = 2,
     STRINGIMAGE = 3,
     SEPARATOR = 4
    };
    published interface XMenuListener;
    published interface XPopupMenu;
    published interface XMenu {
     interface ::com::sun::star::uno::XInterface;
     void addMenuListener([in] ::com::sun::star::awt::XMenuListener xListener);
     void removeMenuListener([in] ::com::sun::star::awt::XMenuListener xListener);
     void insertItem([in] short nItemId, [in] string aText, [in] short nItemStyle, [in] short nItemPos);
     void removeItem([in] short nItemPos, [in] short nCount);
     void clear();
     short getItemCount();
     short getItemId([in] short nItemPos);
     short getItemPos([in] short nItemId);
     ::com::sun::star::awt::MenuItemType getItemType([in] short nItemPos);
     void enableItem([in] short nItemId, [in] boolean bEnable);
     boolean isItemEnabled([in] short nItemId);
     void hideDisabledEntries([in] boolean bHide);
     void enableAutoMnemonics([in] boolean bEnable);
     void setItemText([in] short nItemId, [in] string aText);
     string getItemText([in] short nItemId);
     void setCommand([in] short nItemId, [in] string aCommand);
     string getCommand([in] short nItemId);
     void setHelpCommand([in] short nItemId, [in] string aCommand);
     string getHelpCommand([in] short nItemId);
     void setHelpText([in] short nItemId, [in] string sHelpText);
     string getHelpText([in] short nItemId);
     void setTipHelpText([in] short nItemId, [in] string sTipHelpText);
     string getTipHelpText([in] short nItemId);
     boolean isPopupMenu();
     void setPopupMenu([in] short nItemId, [in] ::com::sun::star::awt::XPopupMenu aPopupMenu);
     ::com::sun::star::awt::XPopupMenu getPopupMenu([in] short nItemId);
    };
    published interface XMenuBar {
     interface ::com::sun::star::awt::XMenu;
    };
    published service MenuBar: ::com::sun::star::awt::XMenuBar;
    published struct MenuEvent: ::com::sun::star::lang::EventObject {
     short MenuId;
    };
    published enum MessageBoxType {
     MESSAGEBOX = 0,
     INFOBOX = 1,
     WARNINGBOX = 2,
     ERRORBOX = 3,
     QUERYBOX = 4
    };
    published constants MouseButton {
     const short LEFT = 1;
     const short MIDDLE = 4;
     const short RIGHT = 2;
    };
    published struct PaintEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::awt::Rectangle UpdateRect;
     short Count;
    };
    published interface XPointer {
     interface ::com::sun::star::uno::XInterface;
     void setType([in] long nType);
     long getType();
    };
    published interface XWindowPeer;
   };
   module graphic {
    published interface XGraphic;
   };
   module awt {
    published interface XPopupMenu {
     interface ::com::sun::star::awt::XMenu;
     void insertSeparator([in] short nItemPos);
     void setDefaultItem([in] short nItemId);
     short getDefaultItem();
     void checkItem([in] short nItemId, [in] boolean bCheck);
     boolean isItemChecked([in] short nItemId);
     short execute([in] ::com::sun::star::awt::XWindowPeer Parent, [in] ::com::sun::star::awt::Rectangle Position, [in] short Direction);
     boolean isInExecute();
     void endExecute();
     void setAcceleratorKeyEvent([in] short nItemId, [in] ::com::sun::star::awt::KeyEvent aKeyEvent);
     ::com::sun::star::awt::KeyEvent getAcceleratorKeyEvent([in] short nItemId);
     void setItemImage([in] short nItemId, [in] ::com::sun::star::graphic::XGraphic xGraphic, [in] boolean bScale);
     ::com::sun::star::graphic::XGraphic getItemImage([in] short nItemId);
    };
    published service PopupMenu: ::com::sun::star::awt::XPopupMenu;
    published constants PopupMenuDirection {
     const short EXECUTE_DEFAULT = 0;
     const short EXECUTE_DOWN = 1;
     const short EXECUTE_LEFT = 4;
     const short EXECUTE_RIGHT = 8;
     const short EXECUTE_UP = 2;
    };
    published constants PosSize {
     const short HEIGHT = 8;
     const short POS = 3;
     const short POSSIZE = 15;
     const short SIZE = 12;
     const short WIDTH = 4;
     const short X = 1;
     const short Y = 2;
    };
    published exception PrinterException: ::com::sun::star::uno::Exception {
    };
    published interface XInfoPrinter;
    published interface XPrinter;
    published interface XPrinterServer {
     interface ::com::sun::star::uno::XInterface;
     sequence< string > getPrinterNames();
     ::com::sun::star::awt::XPrinter createPrinter([in] string printerName);
     ::com::sun::star::awt::XInfoPrinter createInfoPrinter([in] string printerName);
    };
    published enum PushButtonType {
     STANDARD = 0,
     OK = 1,
     CANCEL = 2,
     HELP = 3
    };
    published enum RasterOperation {
     OVERPAINT = 0,
     XOR = 1,
     ZEROBITS = 2,
     ALLBITS = 3,
     INVERT = 4
    };
    published constants ScrollBarOrientation {
     const long HORIZONTAL = 0;
     const long VERTICAL = 1;
    };
    published struct Selection {
     long Min;
     long Max;
    };
    published struct SimpleFontMetric {
     short Ascent;
     short Descent;
     short Leading;
     short Slant;
     char FirstChar;
     char LastChar;
    };
    published struct SpinEvent: ::com::sun::star::lang::EventObject {
     short dummy1;
    };
    published constants Style {
     const short DIALOG = 1;
     const short FRAME = 0;
    };
    /** @deprecated */ published struct SystemDependentXWindow {
     long WindowHandle;
     hyper DisplayPointer;
    };
    published constants SystemPointer {
     const long ARROW = 0;
     const long CHAIN = 70;
     const long CHAIN_NOTALLOWED = 71;
     const long CHART = 65;
     const long COPYDATA = 41;
     const long COPYDATALINK = 44;
     const long COPYFILE = 46;
     const long COPYFILELINK = 49;
     const long COPYFILES = 51;
     const long CROOK = 36;
     const long CROP = 37;
     const long CROSS = 5;
     const long DETECTIVE = 66;
     const long DRAW_ARC = 57;
     const long DRAW_BEZIER = 56;
     const long DRAW_CAPTION = 64;
     const long DRAW_CIRCLECUT = 59;
     const long DRAW_CONNECT = 62;
     const long DRAW_ELLIPSE = 60;
     const long DRAW_FREEHAND = 61;
     const long DRAW_LINE = 53;
     const long DRAW_PIE = 58;
     const long DRAW_POLYGON = 55;
     const long DRAW_RECT = 54;
     const long DRAW_TEXT = 63;
     const long ESIZE = 10;
     const long FILL = 31;
     const long HAND = 27;
     const long HELP = 4;
     const long HSHEAR = 33;
     const long HSIZEBAR = 25;
     const long HSPLIT = 23;
     const long INVISIBLE = 1;
     const long LINKDATA = 42;
     const long LINKFILE = 47;
     const long MAGNIFY = 30;
     const long MIRROR = 35;
     const long MOVE = 6;
     const long MOVEBEZIERWEIGHT = 39;
     const long MOVEDATA = 40;
     const long MOVEDATALINK = 43;
     const long MOVEFILE = 45;
     const long MOVEFILELINK = 48;
     const long MOVEFILES = 50;
     const long MOVEPOINT = 38;
     const long NESIZE = 12;
     const long NOTALLOWED = 52;
     const long NSIZE = 7;
     const long NWSIZE = 11;
     const long PEN = 29;
     const long PIVOT_COL = 67;
     const long PIVOT_FIELD = 69;
     const long PIVOT_ROW = 68;
     const long REFHAND = 28;
     const long ROTATE = 32;
     const long SESIZE = 14;
     const long SSIZE = 8;
     const long SWSIZE = 13;
     const long TEXT = 3;
     const long VSHEAR = 34;
     const long VSIZEBAR = 26;
     const long VSPLIT = 24;
     const long WAIT = 2;
     const long WINDOW_ESIZE = 18;
     const long WINDOW_NESIZE = 20;
     const long WINDOW_NSIZE = 15;
     const long WINDOW_NWSIZE = 19;
     const long WINDOW_SESIZE = 22;
     const long WINDOW_SSIZE = 16;
     const long WINDOW_SWSIZE = 21;
     const long WINDOW_WSIZE = 17;
     const long WSIZE = 9;
    };
    published interface XControlContainer;
    published interface XTabControllerModel;
    published interface XTabController {
     interface ::com::sun::star::uno::XInterface;
     void setModel([in] ::com::sun::star::awt::XTabControllerModel Model);
     ::com::sun::star::awt::XTabControllerModel getModel();
     void setContainer([in] ::com::sun::star::awt::XControlContainer Container);
     ::com::sun::star::awt::XControlContainer getContainer();
     sequence< ::com::sun::star::awt::XControl > getControls();
     void autoTabOrder();
     void activateTabOrder();
     void activateFirst();
     void activateLast();
    };
    published service TabController: ::com::sun::star::awt::XTabController;
    published interface XTabControllerModel {
     interface ::com::sun::star::uno::XInterface;
     boolean getGroupControl();
     void setGroupControl([in] boolean GroupControl);
     void setControlModels([in] sequence< ::com::sun::star::awt::XControlModel > Controls);
     sequence< ::com::sun::star::awt::XControlModel > getControlModels();
     void setGroup([in] sequence< ::com::sun::star::awt::XControlModel > Group, [in] string GroupName);
     long getGroupCount();
     void getGroup([in] long nGroup, [out] sequence< ::com::sun::star::awt::XControlModel > Group, [out] string Name);
     void getGroupByName([in] string Name, [out] sequence< ::com::sun::star::awt::XControlModel > Group);
    };
    published service TabControllerModel {
     interface ::com::sun::star::awt::XTabControllerModel;
     interface ::com::sun::star::io::XPersistObject;
    };
    published constants TextAlign {
     const long CENTER = 1;
     const long LEFT = 0;
     const long RIGHT = 2;
    };
    published struct TextEvent: ::com::sun::star::lang::EventObject {
     short dummy1;
    };
   };
   module datatransfer {
    module clipboard {
     published interface XClipboard;
    };
    module dnd {
     published interface XDragGestureRecognizer;
     published interface XDragSource;
     published interface XDropTarget;
    };
   };
   module awt {
    published interface XDataTransferProviderAccess {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::datatransfer::dnd::XDragGestureRecognizer getDragGestureRecognizer([in] ::com::sun::star::awt::XWindow window);
     ::com::sun::star::datatransfer::dnd::XDragSource getDragSource([in] ::com::sun::star::awt::XWindow window);
     ::com::sun::star::datatransfer::dnd::XDropTarget getDropTarget([in] ::com::sun::star::awt::XWindow window);
     ::com::sun::star::datatransfer::clipboard::XClipboard getClipboard([in] string clipboardName);
    };
    published interface XFocusListener;
    published interface XKeyHandler;
    published interface XTopWindow;
    published interface XTopWindowListener;
    /** @deprecated */ published interface XExtendedToolkit {
     interface ::com::sun::star::uno::XInterface;
     long getTopWindowCount();
     ::com::sun::star::awt::XTopWindow getTopWindow([in] long nIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     ::com::sun::star::awt::XTopWindow getActiveTopWindow();
     void addTopWindowListener([in] ::com::sun::star::awt::XTopWindowListener xListener);
     void removeTopWindowListener([in] ::com::sun::star::awt::XTopWindowListener xListener);
     void addKeyHandler([in] ::com::sun::star::awt::XKeyHandler xHandler);
     void removeKeyHandler([in] ::com::sun::star::awt::XKeyHandler xHandler);
     void addFocusListener([in] ::com::sun::star::awt::XFocusListener xListener);
     void removeFocusListener([in] ::com::sun::star::awt::XFocusListener xListener);
     void fireFocusGained([in] ::com::sun::star::uno::XInterface source);
     void fireFocusLost([in] ::com::sun::star::uno::XInterface source);
    };
    published interface XMessageBox;
    published interface XWindowPeer;
    published interface XMessageBoxFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::XMessageBox createMessageBox([in] ::com::sun::star::awt::XWindowPeer aParent, [in] ::com::sun::star::awt::MessageBoxType eType, [in] long nButtons, [in] string sTitle, [in] string sMessage);
    };
    /** @deprecated */ published interface XReschedule {
     interface ::com::sun::star::uno::XInterface;
     void reschedule();
    };
    published interface XWindowPeer;
    published interface XSystemChildFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::XWindowPeer createSystemChild([in] any Parent, [in] sequence< byte > ProcessId, [in] short SystemType);
    };
    published enum WindowClass {
     TOP = 0,
     MODALTOP = 1,
     CONTAINER = 2,
     SIMPLE = 3
    };
    published interface XWindowPeer;
    published struct WindowDescriptor {
     ::com::sun::star::awt::WindowClass Type;
     string WindowServiceName;
     ::com::sun::star::awt::XWindowPeer Parent;
     short ParentIndex;
     ::com::sun::star::awt::Rectangle Bounds;
     long WindowAttributes;
    };
    published interface XDevice;
    published interface XRegion;
    published interface XWindowPeer;
    published interface XToolkit {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::XWindowPeer getDesktopWindow();
     ::com::sun::star::awt::Rectangle getWorkArea();
     ::com::sun::star::awt::XWindowPeer createWindow([in] ::com::sun::star::awt::WindowDescriptor Descriptor) raises (::com::sun::star::lang::IllegalArgumentException);
     sequence< ::com::sun::star::awt::XWindowPeer > createWindows([in] sequence< ::com::sun::star::awt::WindowDescriptor > Descriptors) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::awt::XDevice createScreenCompatibleDevice([in] long Width, [in] long Height);
     ::com::sun::star::awt::XRegion createRegion();
    };
    published interface XToolkit2 {
     interface ::com::sun::star::awt::XToolkit;
     interface ::com::sun::star::awt::XDataTransferProviderAccess;
     interface ::com::sun::star::awt::XSystemChildFactory;
     interface ::com::sun::star::awt::XMessageBoxFactory;
     interface ::com::sun::star::awt::XExtendedToolkit;
     interface ::com::sun::star::awt::XReschedule;
    };
    published service Toolkit: ::com::sun::star::awt::XToolkit2;
    published interface XActionListener;
    published interface XButton {
     interface ::com::sun::star::uno::XInterface;
     void addActionListener([in] ::com::sun::star::awt::XActionListener l);
     void removeActionListener([in] ::com::sun::star::awt::XActionListener l);
     void setLabel([in] string Label);
     void setActionCommand([in] string Command);
    };
    published interface XLayoutConstrains {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::Size getMinimumSize();
     ::com::sun::star::awt::Size getPreferredSize();
     ::com::sun::star::awt::Size calcAdjustedSize([in] ::com::sun::star::awt::Size aNewSize);
    };
    published service UnoControlButton {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XButton;
     interface ::com::sun::star::awt::XLayoutConstrains;
    };
   };
   module style {
    published enum VerticalAlignment {
     TOP = 0,
     MIDDLE = 1,
     BOTTOM = 2
    };
   };
   module graphic {
    published interface XGraphic;
   };
   module awt {
    published service UnoControlButtonModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property, optional] short Align;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] boolean DefaultButton;
     [property] boolean Enabled;
     [property, optional] boolean FocusOnClick;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property] short ImageAlign;
     [property, optional] short ImagePosition;
     [property] string ImageURL;
     [property, optional, transient] ::com::sun::star::graphic::XGraphic Graphic;
     [property] string Label;
     [property, optional] boolean MultiLine;
     [property] boolean Printable;
     [property] short PushButtonType;
     [property, optional] boolean Repeat;
     [property, optional] long RepeatDelay;
     [property] short State;
     [property] boolean Tabstop;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] boolean Toggle;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published interface XItemListener;
    published interface XCheckBox {
     interface ::com::sun::star::uno::XInterface;
     void addItemListener([in] ::com::sun::star::awt::XItemListener l);
     void removeItemListener([in] ::com::sun::star::awt::XItemListener l);
     short getState();
     void setState([in] short n);
     void setLabel([in] string Label);
     void enableTriState([in] boolean b);
    };
    published service UnoControlCheckBox {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XCheckBox;
     interface ::com::sun::star::awt::XLayoutConstrains;
    };
   };
   module graphic {
    published interface XGraphic;
   };
   module awt {
    published service UnoControlCheckBoxModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property, optional] short Align;
     [property, optional] long BackgroundColor;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] short ImagePosition;
     [property, optional] string ImageURL;
     [property, optional, transient] ::com::sun::star::graphic::XGraphic Graphic;
     [property] string Label;
     [property, optional] boolean MultiLine;
     [property] boolean Printable;
     [property] short State;
     [property] boolean Tabstop;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property] boolean TriState;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
     [property, optional] short VisualEffect;
     [property, optional] short WritingMode;
    };
    published interface XTextListener;
    published interface XTextComponent {
     interface ::com::sun::star::uno::XInterface;
     void addTextListener([in] ::com::sun::star::awt::XTextListener l);
     void removeTextListener([in] ::com::sun::star::awt::XTextListener l);
     void setText([in] string aText);
     void insertText([in] ::com::sun::star::awt::Selection Sel, [in] string Text);
     string getText();
     string getSelectedText();
     void setSelection([in] ::com::sun::star::awt::Selection aSelection);
     ::com::sun::star::awt::Selection getSelection();
     boolean isEditable();
     void setEditable([in] boolean bEditable);
     void setMaxTextLen([in] short nLen);
     short getMaxTextLen();
    };
    published interface XTextLayoutConstrains {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::Size getMinimumSize([in] short nCols, [in] short nLines);
     void getColumnsAndLines([out] short nCols, [out] short nLines);
    };
    published service UnoControlEdit {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XTextComponent;
     interface ::com::sun::star::awt::XLayoutConstrains;
     interface ::com::sun::star::awt::XTextLayoutConstrains;
    };
    published interface XActionListener;
    published interface XItemListener;
    published interface XComboBox {
     interface ::com::sun::star::uno::XInterface;
     void addItemListener([in] ::com::sun::star::awt::XItemListener l);
     void removeItemListener([in] ::com::sun::star::awt::XItemListener l);
     void addActionListener([in] ::com::sun::star::awt::XActionListener l);
     void removeActionListener([in] ::com::sun::star::awt::XActionListener l);
     void addItem([in] string aItem, [in] short nPos);
     void addItems([in] sequence< string > aItems, [in] short nPos);
     void removeItems([in] short nPos, [in] short nCount);
     short getItemCount();
     string getItem([in] short nPos);
     sequence< string > getItems();
     short getDropDownLineCount();
     void setDropDownLineCount([in] short nLines);
    };
    published service UnoControlComboBox {
     service ::com::sun::star::awt::UnoControlEdit;
     interface ::com::sun::star::awt::XComboBox;
    };
    interface XItemListListener;
    interface XItemList {
     interface ::com::sun::star::uno::XInterface;
     [attribute, readonly] long ItemCount;
     void insertItem([in] long Position, [in] string ItemText, [in] string ItemImageURL) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     void insertItemText([in] long Position, [in] string ItemText) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     void insertItemImage([in] long Position, [in] string ItemImageURL) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     void removeItem([in] long Position) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     void removeAllItems();
     void setItemText([in] long Position, [in] string ItemText) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     void setItemImage([in] long Position, [in] string ItemImageURL) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     void setItemTextAndImage([in] long Position, [in] string ItemText, [in] string ItemImageURL) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     void setItemData([in] long Position, [in] any ItemData) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     string getItemText([in] long Position) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     string getItemImage([in] long Position) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     ::com::sun::star::beans::Pair< string, string > getItemTextAndImage([in] long Position) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     any getItemData([in] long Position) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     sequence< ::com::sun::star::beans::Pair< string, string > > getAllItems();
     void addItemListListener([in] ::com::sun::star::awt::XItemListListener Listener);
     void removeItemListListener([in] ::com::sun::star::awt::XItemListListener Listener);
    };
    published service UnoControlComboBoxModel {
     service ::com::sun::star::awt::UnoControlModel;
     [optional] interface ::com::sun::star::awt::XItemList;
     [property, optional] short Align;
     [property] boolean Autocomplete;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Dropdown;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] short LineCount;
     [property] short MaxTextLen;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property] sequence< string > StringItemList;
     [property] boolean Tabstop;
     [property] string Text;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] short WritingMode;
     [property, optional] short MouseWheelBehavior;
    };
    published interface XControlContainer {
     interface ::com::sun::star::uno::XInterface;
     void setStatusText([in] string StatusText);
     sequence< ::com::sun::star::awt::XControl > getControls();
     ::com::sun::star::awt::XControl getControl([in] string aName);
     void addControl([in] string Name, [in] ::com::sun::star::awt::XControl Control);
     void removeControl([in] ::com::sun::star::awt::XControl Control);
    };
    published interface XUnoControlContainer {
     interface ::com::sun::star::uno::XInterface;
     void setTabControllers([in] sequence< ::com::sun::star::awt::XTabController > TabControllers);
     sequence< ::com::sun::star::awt::XTabController > getTabControllers();
     void addTabController([in] ::com::sun::star::awt::XTabController TabController);
     void removeTabController([in] ::com::sun::star::awt::XTabController TabController);
    };
    published service UnoControlContainer {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XUnoControlContainer;
     interface ::com::sun::star::awt::XControlContainer;
     interface ::com::sun::star::container::XContainer;
    };
    published service UnoControlContainerModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] boolean Enabled;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Printable;
     [property] string Text;
     [property] string HelpText;
     [property] string HelpURL;
    };
    published interface XCurrencyField {
     interface ::com::sun::star::uno::XInterface;
     void setValue([in] double Value);
     double getValue();
     void setMin([in] double Value);
     double getMin();
     void setMax([in] double Value);
     double getMax();
     void setFirst([in] double Value);
     double getFirst();
     void setLast([in] double Value);
     double getLast();
     void setSpinSize([in] double Value);
     double getSpinSize();
     void setDecimalDigits([in] short nDigits);
     short getDecimalDigits();
     void setStrictFormat([in] boolean bStrict);
     boolean isStrictFormat();
    };
    published interface XSpinListener;
    published interface XSpinField {
     interface ::com::sun::star::uno::XInterface;
     void addSpinListener([in] ::com::sun::star::awt::XSpinListener l);
     void removeSpinListener([in] ::com::sun::star::awt::XSpinListener l);
     void up();
     void down();
     void first();
     void last();
     void enableRepeat([in] boolean bRepeat);
    };
    published service UnoControlCurrencyField {
     service ::com::sun::star::awt::UnoControlEdit;
     interface ::com::sun::star::awt::XCurrencyField;
     [optional] interface ::com::sun::star::awt::XSpinField;
    };
    published service UnoControlCurrencyFieldModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] string CurrencySymbol;
     [property] short DecimalAccuracy;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] boolean PrependCurrencySymbol;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property, optional] boolean Repeat;
     [property, optional] long RepeatDelay;
     [property] boolean ShowThousandsSeparator;
     [property] boolean Spin;
     [property] boolean StrictFormat;
     [property] boolean Tabstop;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property] double Value;
     [property] double ValueMax;
     [property] double ValueMin;
     [property] double ValueStep;
     [property, optional] short WritingMode;
     [property, optional] short MouseWheelBehavior;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
   };
   module util {
    published struct Date {
     unsigned short Day;
     unsigned short Month;
     short Year;
    };
   };
   module awt {
    published interface XDateField {
     interface ::com::sun::star::uno::XInterface;
     void setDate([in] ::com::sun::star::util::Date Date);
     ::com::sun::star::util::Date getDate();
     void setMin([in] ::com::sun::star::util::Date Date);
     ::com::sun::star::util::Date getMin();
     void setMax([in] ::com::sun::star::util::Date Date);
     ::com::sun::star::util::Date getMax();
     void setFirst([in] ::com::sun::star::util::Date Date);
     ::com::sun::star::util::Date getFirst();
     void setLast([in] ::com::sun::star::util::Date Date);
     ::com::sun::star::util::Date getLast();
     void setLongFormat([in] boolean bLong);
     boolean isLongFormat();
     void setEmpty();
     boolean isEmpty();
     void setStrictFormat([in] boolean bStrict);
     boolean isStrictFormat();
    };
    published service UnoControlDateField {
     service ::com::sun::star::awt::UnoControlEdit;
     interface ::com::sun::star::awt::XDateField;
     [optional] interface ::com::sun::star::awt::XSpinField;
    };
    published service UnoControlDateFieldModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] ::com::sun::star::util::Date Date;
     [property] short DateFormat;
     [property] ::com::sun::star::util::Date DateMax;
     [property] ::com::sun::star::util::Date DateMin;
     [property] boolean DateShowCentury;
     [property] boolean Dropdown;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property, optional] boolean Repeat;
     [property, optional] long RepeatDelay;
     [property] boolean Spin;
     [property] boolean StrictFormat;
     [property] boolean Tabstop;
     [property, optional] string Text;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] short WritingMode;
     [property, optional] short MouseWheelBehavior;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published interface XDialog {
     interface ::com::sun::star::uno::XInterface;
     void setTitle([in] string Title);
     string getTitle();
     short execute();
     void endExecute();
    };
    published interface XDialog2 {
     interface ::com::sun::star::awt::XDialog;
     void endDialog([in] long Result);
     void setHelpId([in] string Id);
    };
    published interface XTopWindowListener;
    published interface XTopWindow {
     interface ::com::sun::star::uno::XInterface;
     void addTopWindowListener([in] ::com::sun::star::awt::XTopWindowListener xListener);
     void removeTopWindowListener([in] ::com::sun::star::awt::XTopWindowListener xListener);
     void toFront();
     void toBack();
     void setMenuBar([in] ::com::sun::star::awt::XMenuBar xMenu);
    };
    published interface XUnoControlDialog {
     interface ::com::sun::star::awt::XControlContainer;
     interface ::com::sun::star::awt::XControl;
     interface ::com::sun::star::awt::XWindow;
     interface ::com::sun::star::awt::XTopWindow;
     interface ::com::sun::star::awt::XDialog2;
    };
    published service UnoControlDialog: ::com::sun::star::awt::XUnoControlDialog;
   };
   module graphic {
    published interface XGraphic;
   };
   module awt {
    published service UnoControlDialogModel {
     service ::com::sun::star::awt::UnoControlModel;
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::container::XContainer;
     interface ::com::sun::star::container::XNameContainer;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] boolean Closeable;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property] boolean Moveable;
     [property] boolean Sizeable;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property] string Title;
     [property, optional] boolean DesktopAsParent;
     [property, optional] string ImageURL;
     [property, optional, transient] ::com::sun::star::graphic::XGraphic Graphic;
    };
    published service UnoControlEditModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] short Align;
     [property, optional] boolean AutoHScroll;
     [property, optional] boolean AutoVScroll;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property, optional] short EchoChar;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] boolean HardLineBreaks;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] boolean HScroll;
     [property, optional] short LineEndFormat;
     [property] short MaxTextLen;
     [property] boolean MultiLine;
     [property, optional] boolean PaintTransparent;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property] boolean Tabstop;
     [property] string Text;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property] boolean VScroll;
     [property, optional] short WritingMode;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published service UnoControlFileControl {
     service ::com::sun::star::awt::UnoControlEdit;
    };
    published service UnoControlFileControlModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] boolean Printable;
     [property, optional] boolean ReadOnly;
     [property] boolean Tabstop;
     [property] string Text;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published service UnoControlFixedLine {
     service ::com::sun::star::awt::UnoControl;
    };
    published service UnoControlFixedLineModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property] string Label;
     [property] long Orientation;
     [property] boolean Printable;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
    };
    published interface XFixedText {
     interface ::com::sun::star::uno::XInterface;
     void setText([in] string Text);
     string getText();
     void setAlignment([in] short nAlign);
     short getAlignment();
    };
    published service UnoControlFixedText {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XFixedText;
     interface ::com::sun::star::awt::XLayoutConstrains;
    };
    published service UnoControlFixedTextModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] short Align;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property] string Label;
     [property] boolean MultiLine;
     [property] boolean Printable;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published service UnoControlFormattedField {
     service ::com::sun::star::awt::UnoControlEdit;
     [optional] interface ::com::sun::star::awt::XSpinField;
    };
   };
   module util {
    published interface XNumberFormatsSupplier;
   };
   module awt {
    published service UnoControlFormattedFieldModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] short Align;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] any EffectiveDefault;
     [property] double EffectiveMax;
     [property] double EffectiveMin;
     [property] double EffectiveValue;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] long FormatKey;
     [property] ::com::sun::star::util::XNumberFormatsSupplier FormatsSupplier;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] short MaxTextLen;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property, optional] boolean Repeat;
     [property, optional] long RepeatDelay;
     [property] boolean Spin;
     [property, optional] boolean StrictFormat;
     [property] boolean Tabstop;
     [property] string Text;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property] boolean TreatAsNumber;
     [property, optional] short WritingMode;
     [property, optional] short MouseWheelBehavior;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published service UnoControlGroupBox {
     service ::com::sun::star::awt::UnoControl;
    };
    published service UnoControlGroupBoxModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property] string Label;
     [property] boolean Printable;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] short WritingMode;
    };
    published service UnoControlImageControl {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XLayoutConstrains;
    };
   };
   module graphic {
    published interface XGraphic;
   };
   module awt {
    published service UnoControlImageControlModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Enabled;
     [property] string HelpText;
     [property] string HelpURL;
     [property] string ImageURL;
     [property, optional, transient] ::com::sun::star::graphic::XGraphic Graphic;
     [property] boolean Printable;
     [property] boolean ScaleImage;
     [property, optional] short ScaleMode;
     [property, optional] boolean Tabstop;
    };
    published interface XActionListener;
    published interface XItemListener;
    published interface XListBox {
     interface ::com::sun::star::uno::XInterface;
     void addItemListener([in] ::com::sun::star::awt::XItemListener l);
     void removeItemListener([in] ::com::sun::star::awt::XItemListener l);
     void addActionListener([in] ::com::sun::star::awt::XActionListener l);
     void removeActionListener([in] ::com::sun::star::awt::XActionListener l);
     void addItem([in] string aItem, [in] short nPos);
     void addItems([in] sequence< string > aItems, [in] short nPos);
     void removeItems([in] short nPos, [in] short nCount);
     short getItemCount();
     string getItem([in] short nPos);
     sequence< string > getItems();
     short getSelectedItemPos();
     sequence< short > getSelectedItemsPos();
     string getSelectedItem();
     sequence< string > getSelectedItems();
     void selectItemPos([in] short nPos, [in] boolean bSelect);
     void selectItemsPos([in] sequence< short > aPositions, [in] boolean bSelect);
     void selectItem([in] string aItem, [in] boolean bSelect);
     boolean isMutipleMode();
     void setMultipleMode([in] boolean bMulti);
     short getDropDownLineCount();
     void setDropDownLineCount([in] short nLines);
     void makeVisible([in] short nEntry);
    };
    published service UnoControlListBox {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XListBox;
     interface ::com::sun::star::awt::XLayoutConstrains;
     interface ::com::sun::star::awt::XTextLayoutConstrains;
    };
    published service UnoControlListBoxModel {
     service ::com::sun::star::awt::UnoControlModel;
     [optional] interface ::com::sun::star::awt::XItemList;
     [property, optional] short Align;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Dropdown;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property] short LineCount;
     [property] boolean MultiSelection;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property] sequence< short > SelectedItems;
     [property] sequence< string > StringItemList;
     [property] boolean Tabstop;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] short WritingMode;
     [property, optional] short MouseWheelBehavior;
     [property, maybevoid, optional] short ItemSeparatorPos;
    };
    published interface XNumericField {
     interface ::com::sun::star::uno::XInterface;
     void setValue([in] double Value);
     double getValue();
     void setMin([in] double Value);
     double getMin();
     void setMax([in] double Value);
     double getMax();
     void setFirst([in] double Value);
     double getFirst();
     void setLast([in] double Value);
     double getLast();
     void setSpinSize([in] double Value);
     double getSpinSize();
     void setDecimalDigits([in] short nDigits);
     short getDecimalDigits();
     void setStrictFormat([in] boolean bStrict);
     boolean isStrictFormat();
    };
    published service UnoControlNumericField {
     service ::com::sun::star::awt::UnoControlEdit;
     interface ::com::sun::star::awt::XNumericField;
     [optional] interface ::com::sun::star::awt::XSpinField;
    };
    published service UnoControlNumericFieldModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] short DecimalAccuracy;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property, optional] boolean Repeat;
     [property, optional] long RepeatDelay;
     [property] boolean ShowThousandsSeparator;
     [property] boolean Spin;
     [property] boolean StrictFormat;
     [property] boolean Tabstop;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property] double Value;
     [property] double ValueMax;
     [property] double ValueMin;
     [property] double ValueStep;
     [property, optional] short WritingMode;
     [property, optional] short MouseWheelBehavior;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published interface XPatternField {
     interface ::com::sun::star::uno::XInterface;
     void setMasks([in] string EditMask, [in] string LiteralMask);
     void getMasks([out] string EditMask, [out] string LiteralMask);
     void setString([in] string Str);
     string getString();
     void setStrictFormat([in] boolean bStrict);
     boolean isStrictFormat();
    };
    published service UnoControlPatternField {
     service ::com::sun::star::awt::UnoControlEdit;
     interface ::com::sun::star::awt::XPatternField;
     [optional] interface ::com::sun::star::awt::XSpinField;
    };
    published service UnoControlPatternFieldModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] string EditMask;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] string LiteralMask;
     [property] short MaxTextLen;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property] boolean StrictFormat;
     [property] boolean Tabstop;
     [property] string Text;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] short WritingMode;
     [property, optional] short MouseWheelBehavior;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published interface XProgressBar {
     interface ::com::sun::star::uno::XInterface;
     void setForegroundColor([in] ::com::sun::star::util::Color Color);
     void setBackgroundColor([in] ::com::sun::star::util::Color Color);
     void setRange([in] long Min, [in] long Max);
     void setValue([in] long Value);
     long getValue();
    };
    published service UnoControlProgressBar {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XProgressBar;
    };
    published service UnoControlProgressBarModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Enabled;
     [property] ::com::sun::star::util::Color FillColor;
     [property] string HelpText;
     [property] string HelpURL;
     [property] boolean Printable;
     [property] long ProgressValue;
     [property] long ProgressValueMax;
     [property] long ProgressValueMin;
    };
    published interface XItemListener;
    published interface XRadioButton {
     interface ::com::sun::star::uno::XInterface;
     void addItemListener([in] ::com::sun::star::awt::XItemListener l);
     void removeItemListener([in] ::com::sun::star::awt::XItemListener l);
     boolean getState();
     void setState([in] boolean b);
     void setLabel([in] string Label);
    };
    published service UnoControlRadioButton {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XRadioButton;
     interface ::com::sun::star::awt::XLayoutConstrains;
    };
   };
   module graphic {
    published interface XGraphic;
   };
   module awt {
    published service UnoControlRadioButtonModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property, optional] short Align;
     [property, optional] long BackgroundColor;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] short ImagePosition;
     [property, optional] string ImageURL;
     [property, optional, transient] ::com::sun::star::graphic::XGraphic Graphic;
     [property] string Label;
     [property, optional] boolean MultiLine;
     [property] boolean Printable;
     [property] short State;
     [property] boolean Tabstop;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
     [property, optional] short VisualEffect;
     [property, optional] short WritingMode;
    };
    published interface XAdjustmentListener;
    published interface XScrollBar {
     interface ::com::sun::star::uno::XInterface;
     void addAdjustmentListener([in] ::com::sun::star::awt::XAdjustmentListener l);
     void removeAdjustmentListener([in] ::com::sun::star::awt::XAdjustmentListener l);
     void setValue([in] long n);
     void setValues([in] long nValue, [in] long nVisible, [in] long nMax);
     long getValue();
     void setMaximum([in] long n);
     long getMaximum();
     void setLineIncrement([in] long n);
     long getLineIncrement();
     void setBlockIncrement([in] long n);
     long getBlockIncrement();
     void setVisibleSize([in] long n);
     long getVisibleSize();
     void setOrientation([in] long n);
     long getOrientation();
    };
    published service UnoControlScrollBar {
     service ::com::sun::star::awt::UnoControl;
     interface ::com::sun::star::awt::XScrollBar;
    };
    published service UnoControlScrollBarModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property, optional] ::com::sun::star::util::Color BackgroundColor;
     [property] long BlockIncrement;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Enabled;
     [property] string HelpText;
     [property] string HelpURL;
     [property] long LineIncrement;
     [property, optional] boolean LiveScroll;
     [property] long Orientation;
     [property] boolean Printable;
     [property, optional] long RepeatDelay;
     [property] long ScrollValue;
     [property, optional] long ScrollValueMin;
     [property] long ScrollValueMax;
     [property, optional] ::com::sun::star::util::Color SymbolColor;
     [property, optional] boolean Tabstop;
     [property] long VisibleSize;
    };
   };
   module util {
    published struct Time {
     unsigned long NanoSeconds;
     unsigned short Seconds;
     unsigned short Minutes;
     unsigned short Hours;
     boolean IsUTC;
    };
   };
   module awt {
    published interface XTimeField {
     interface ::com::sun::star::uno::XInterface;
     void setTime([in] ::com::sun::star::util::Time Time);
     ::com::sun::star::util::Time getTime();
     void setMin([in] ::com::sun::star::util::Time Time);
     ::com::sun::star::util::Time getMin();
     void setMax([in] ::com::sun::star::util::Time Time);
     ::com::sun::star::util::Time getMax();
     void setFirst([in] ::com::sun::star::util::Time Time);
     ::com::sun::star::util::Time getFirst();
     void setLast([in] ::com::sun::star::util::Time Time);
     ::com::sun::star::util::Time getLast();
     void setEmpty();
     boolean isEmpty();
     void setStrictFormat([in] boolean bStrict);
     boolean isStrictFormat();
    };
    published service UnoControlTimeField {
     service ::com::sun::star::awt::UnoControlEdit;
     interface ::com::sun::star::awt::XTimeField;
     [optional] interface ::com::sun::star::awt::XSpinField;
    };
    published service UnoControlTimeFieldModel {
     service ::com::sun::star::awt::UnoControlModel;
     [property] ::com::sun::star::util::Color BackgroundColor;
     [property] short Border;
     [property, optional] long BorderColor;
     [property] boolean Enabled;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] short FontEmphasisMark;
     [property] short FontRelief;
     [property] string HelpText;
     [property] string HelpURL;
     [property, optional] boolean HideInactiveSelection;
     [property] boolean Printable;
     [property] boolean ReadOnly;
     [property, optional] boolean Repeat;
     [property, optional] long RepeatDelay;
     [property] boolean Spin;
     [property] boolean StrictFormat;
     [property] boolean Tabstop;
     [property, optional] string Text;
     [property] ::com::sun::star::util::Color TextColor;
     [property] ::com::sun::star::util::Color TextLineColor;
     [property] ::com::sun::star::util::Time Time;
     [property] short TimeFormat;
     [property] ::com::sun::star::util::Time TimeMax;
     [property] ::com::sun::star::util::Time TimeMin;
     [property, optional] short WritingMode;
     [property, optional] short MouseWheelBehavior;
     [property, optional] ::com::sun::star::style::VerticalAlignment VerticalAlign;
    };
    published struct VclContainerEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::uno::XInterface Child;
    };
    /** @deprecated */ published constants VclWindowPeerAttribute {
     const long AUTOHSCROLL = 1073741824;
     const long AUTOVSCROLL = -2147483648;
     const long CENTER = 2048;
     const long CLIPCHILDREN = 524288;
     const long DEFBUTTON = 65536;
     const long DEF_CANCEL = 268435456;
     const long DEF_NO = -2147483648;
     const long DEF_OK = 134217728;
     const long DEF_RETRY = 536870912;
     const long DEF_YES = 1073741824;
     const long DROPDOWN = 32768;
     const long GROUP = 2097152;
     const long HSCROLL = 256;
     const long LEFT = 1024;
     const long NOBORDER = 1048576;
     const long NOLABEL = 536870912;
     const long OK = 4194304;
     const long OK_CANCEL = 8388608;
     const long READONLY = 262144;
     const long RETRY_CANCEL = 67108864;
     const long RIGHT = 4096;
     const long SORT = 16384;
     const long SPIN = 8192;
     const long VSCROLL = 512;
     const long YES_NO = 16777216;
     const long YES_NO_CANCEL = 33554432;
    };
    published constants WindowAttribute {
     const long BORDER = 16;
     const long CLOSEABLE = 128;
     const long FULLSIZE = 2;
     const long MINSIZE = 8;
     const long MOVEABLE = 64;
     const long NODECORATION = 512;
     const long OPTIMUMSIZE = 4;
     const long SHOW = 1;
     const long SIZEABLE = 32;
     /** @deprecated */ const long SYSTEMDEPENDENT = 256;
    };
    published struct WindowEvent: ::com::sun::star::lang::EventObject {
     long X;
     long Y;
     long Width;
     long Height;
     long LeftInset;
     long TopInset;
     long RightInset;
     long BottomInset;
    };
    published interface XActionListener {
     interface ::com::sun::star::lang::XEventListener;
     void actionPerformed([in] ::com::sun::star::awt::ActionEvent rEvent);
    };
    published interface XActivateListener {
     interface ::com::sun::star::lang::XEventListener;
     void windowActivated([in] ::com::sun::star::lang::EventObject e);
     void windowDeactivated([in] ::com::sun::star::lang::EventObject e);
    };
    published interface XAdjustmentListener {
     interface ::com::sun::star::lang::XEventListener;
     void adjustmentValueChanged([in] ::com::sun::star::awt::AdjustmentEvent rEvent);
    };
    published interface XBitmap {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::Size getSize();
     sequence< byte > getDIB();
     sequence< byte > getMaskDIB();
    };
    published interface XDisplayBitmap;
    published interface XFont;
    published interface XGraphics;
    published interface XDevice {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::XGraphics createGraphics();
     ::com::sun::star::awt::XDevice createDevice([in] long nWidth, [in] long nHeight);
     ::com::sun::star::awt::DeviceInfo getInfo();
     sequence< ::com::sun::star::awt::FontDescriptor > getFontDescriptors();
     ::com::sun::star::awt::XFont getFont([in] ::com::sun::star::awt::FontDescriptor aDescriptor);
     ::com::sun::star::awt::XBitmap createBitmap([in] long nX, [in] long nY, [in] long nWidth, [in] long nHeight);
     ::com::sun::star::awt::XDisplayBitmap createDisplayBitmap([in] ::com::sun::star::awt::XBitmap Bitmap);
    };
    published interface XDisplayBitmap {
     interface ::com::sun::star::uno::XInterface;
    };
    published interface XEventHandler;
    published interface XDisplayConnection {
     interface ::com::sun::star::uno::XInterface;
     void addEventHandler([in] any window, [in] ::com::sun::star::awt::XEventHandler eventHandler, [in] long eventMask);
     void removeEventHandler([in] any window, [in] ::com::sun::star::awt::XEventHandler eventHandler);
     void addErrorHandler([in] ::com::sun::star::awt::XEventHandler errorHandler);
     void removeErrorHandler([in] ::com::sun::star::awt::XEventHandler errorHandler);
     any getIdentifier();
    };
    published interface XEnhancedMouseClickHandler {
     interface ::com::sun::star::lang::XEventListener;
     boolean mousePressed([in] ::com::sun::star::awt::EnhancedMouseEvent e);
     boolean mouseReleased([in] ::com::sun::star::awt::EnhancedMouseEvent e);
    };
    published interface XEventHandler {
     interface ::com::sun::star::uno::XInterface;
     boolean handleEvent([in] any event);
    };
    /** @deprecated */ published interface XFileDialog {
     interface ::com::sun::star::uno::XInterface;
     void setPath([in] string Path);
     string getPath();
     void setFilters([in] sequence< string > rFilterNames, [in] sequence< string > rMasks);
     void setCurrentFilter([in] string Filter);
     string getCurrentFilter();
    };
    published interface XFocusListener {
     interface ::com::sun::star::lang::XEventListener;
     void focusGained([in] ::com::sun::star::awt::FocusEvent e);
     void focusLost([in] ::com::sun::star::awt::FocusEvent e);
    };
    published interface XFont {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::FontDescriptor getFontDescriptor();
     ::com::sun::star::awt::SimpleFontMetric getFontMetric();
     short getCharWidth([in] char c);
     sequence< short > getCharWidths([in] char nFirst, [in] char nLast);
     long getStringWidth([in] string str);
     long getStringWidthArray([in] string str, [out] sequence< long > aDXArray);
     void getKernPairs([out] sequence< char > Chars1, [out] sequence< char > Chars2, [out] sequence< short > Kerns);
    };
    published interface XRegion;
    published interface XGraphics {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::XDevice getDevice();
     ::com::sun::star::awt::SimpleFontMetric getFontMetric();
     void setFont([in] ::com::sun::star::awt::XFont xNewFont);
     void selectFont([in] ::com::sun::star::awt::FontDescriptor aDescription);
     void setTextColor([in] ::com::sun::star::util::Color nColor);
     void setTextFillColor([in] ::com::sun::star::util::Color nColor);
     void setLineColor([in] ::com::sun::star::util::Color nColor);
     void setFillColor([in] ::com::sun::star::util::Color nColor);
     void setRasterOp([in] ::com::sun::star::awt::RasterOperation ROP);
     void setClipRegion([in] ::com::sun::star::awt::XRegion Clipping);
     void intersectClipRegion([in] ::com::sun::star::awt::XRegion xClipping);
     void push();
     void pop();
     void copy([in] ::com::sun::star::awt::XDevice xSource, [in] long nSourceX, [in] long nSourceY, [in] long nSourceWidth, [in] long nSourceHeight, [in] long nDestX, [in] long nDestY, [in] long nDestWidth, [in] long nDestHeight);
     void draw([in] ::com::sun::star::awt::XDisplayBitmap xBitmapHandle, [in] long SourceX, [in] long SourceY, [in] long SourceWidth, [in] long SourceHeight, [in] long DestX, [in] long DestY, [in] long DestWidth, [in] long DestHeight);
     void drawPixel([in] long X, [in] long Y);
     void drawLine([in] long X1, [in] long Y1, [in] long X2, [in] long Y2);
     void drawRect([in] long X, [in] long Y, [in] long Width, [in] long Height);
     void drawRoundedRect([in] long X, [in] long Y, [in] long Width, [in] long Height, [in] long nHorzRound, [in] long nVertRound);
     void drawPolyLine([in] sequence< long > DataX, [in] sequence< long > DataY);
     void drawPolygon([in] sequence< long > DataX, [in] sequence< long > DataY);
     void drawPolyPolygon([in] sequence< sequence< long > > DataX, [in] sequence< sequence< long > > DataY);
     void drawEllipse([in] long X, [in] long Y, [in] long Width, [in] long Height);
     void drawArc([in] long X, [in] long Y, [in] long Width, [in] long Height, [in] long X1, [in] long Y1, [in] long X2, [in] long Y2);
     void drawPie([in] long X, [in] long Y, [in] long Width, [in] long Height, [in] long X1, [in] long Y1, [in] long X2, [in] long Y2);
     void drawChord([in] long nX, [in] long nY, [in] long nWidth, [in] long nHeight, [in] long nX1, [in] long nY1, [in] long nX2, [in] long nY2);
     void drawGradient([in] long nX, [in] long nY, [in] long nWidth, [in] long Height, [in] ::com::sun::star::awt::Gradient aGradient);
     void drawText([in] long X, [in] long Y, [in] string Text);
     void drawTextArray([in] long X, [in] long Y, [in] string Text, [in] sequence< long > Longs);
    };
   };
   module graphic {
    published interface XGraphic;
   };
   module awt {
    published interface XGraphics2 {
     interface ::com::sun::star::awt::XGraphics;
     void clear([in] ::com::sun::star::awt::Rectangle aRect);
     void drawImage([in] long nX, [in] long nY, [in] long nWidth, [in] long nHeight, [in] short nStyle, [in] ::com::sun::star::graphic::XGraphic aGraphic);
    };
    published interface XImageButton {
     interface ::com::sun::star::uno::XInterface;
     void addActionListener([in] ::com::sun::star::awt::XActionListener l);
     void removeActionListener([in] ::com::sun::star::awt::XActionListener l);
     void setActionCommand([in] string Command);
    };
    published interface XImageProducer;
    published interface XImageConsumer {
     interface ::com::sun::star::uno::XInterface;
     void init([in] long Width, [in] long Height);
     void setColorModel([in] short BitCount, [in] sequence< long > RGBAPal, [in] long RedMask, [in] long GreenMask, [in] long BlueMask, [in] long AlphaMask);
     void setPixelsByBytes([in] long nX, [in] long nY, [in] long nWidth, [in] long nHeight, [in] sequence< byte > aProducerData, [in] long nOffset, [in] long nScanSize);
     void setPixelsByLongs([in] long nX, [in] long nY, [in] long nWidth, [in] long nHeight, [in] sequence< long > aProducerData, [in] long nOffset, [in] long nScanSize);
     void complete([in] long Status, [in] ::com::sun::star::awt::XImageProducer xProducer);
    };
    published interface XImageProducer {
     interface ::com::sun::star::uno::XInterface;
     void addConsumer([in] ::com::sun::star::awt::XImageConsumer xConsumer);
     void removeConsumer([in] ::com::sun::star::awt::XImageConsumer xConsumer);
     void startProduction();
    };
    published interface XPrinterPropertySet {
     interface ::com::sun::star::beans::XPropertySet;
     void setHorizontal([in] boolean bHorizontal) raises (::com::sun::star::beans::PropertyVetoException, ::com::sun::star::lang::IllegalArgumentException);
     sequence< string > getFormDescriptions();
     void selectForm([in] string aFormDescription) raises (::com::sun::star::beans::PropertyVetoException, ::com::sun::star::lang::IllegalArgumentException);
     sequence< byte > getBinarySetup();
     void setBinarySetup([in] sequence< byte > data) raises (::com::sun::star::beans::PropertyVetoException, ::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XInfoPrinter {
     interface ::com::sun::star::awt::XPrinterPropertySet;
     ::com::sun::star::awt::XDevice createDevice();
    };
    published interface XItemListener {
     interface ::com::sun::star::lang::XEventListener;
     void itemStateChanged([in] ::com::sun::star::awt::ItemEvent rEvent);
    };
    published interface XKeyHandler {
     interface ::com::sun::star::lang::XEventListener;
     boolean keyPressed([in] ::com::sun::star::awt::KeyEvent aEvent);
     boolean keyReleased([in] ::com::sun::star::awt::KeyEvent aEvent);
    };
    published interface XKeyListener {
     interface ::com::sun::star::lang::XEventListener;
     void keyPressed([in] ::com::sun::star::awt::KeyEvent e);
     void keyReleased([in] ::com::sun::star::awt::KeyEvent e);
    };
    published interface XMenuListener {
     interface ::com::sun::star::lang::XEventListener;
     void itemHighlighted([in] ::com::sun::star::awt::MenuEvent aEvent);
     void itemSelected([in] ::com::sun::star::awt::MenuEvent aEvent);
     void itemActivated([in] ::com::sun::star::awt::MenuEvent aEvent);
     void itemDeactivated([in] ::com::sun::star::awt::MenuEvent aEvent);
    };
    published interface XMessageBox {
     interface ::com::sun::star::uno::XInterface;
     [attribute] string CaptionText;
     [attribute] string MessageText;
     short execute();
    };
    published interface XMouseClickHandler {
     interface ::com::sun::star::lang::XEventListener;
     boolean mousePressed([in] ::com::sun::star::awt::MouseEvent e);
     boolean mouseReleased([in] ::com::sun::star::awt::MouseEvent e);
    };
    published interface XMouseListener {
     interface ::com::sun::star::lang::XEventListener;
     void mousePressed([in] ::com::sun::star::awt::MouseEvent e);
     void mouseReleased([in] ::com::sun::star::awt::MouseEvent e);
     void mouseEntered([in] ::com::sun::star::awt::MouseEvent e);
     void mouseExited([in] ::com::sun::star::awt::MouseEvent e);
    };
    published interface XMouseMotionHandler {
     interface ::com::sun::star::lang::XEventListener;
     boolean mouseDragged([in] ::com::sun::star::awt::MouseEvent e);
     boolean mouseMoved([in] ::com::sun::star::awt::MouseEvent e);
    };
    published interface XMouseMotionListener {
     interface ::com::sun::star::lang::XEventListener;
     void mouseDragged([in] ::com::sun::star::awt::MouseEvent e);
     void mouseMoved([in] ::com::sun::star::awt::MouseEvent e);
    };
    published interface XPaintListener {
     interface ::com::sun::star::lang::XEventListener;
     void windowPaint([in] ::com::sun::star::awt::PaintEvent e);
    };
    published interface XPrinter {
     interface ::com::sun::star::awt::XPrinterPropertySet;
     boolean start([in] string nJobName, [in] short nCopies, [in] boolean nCollate) raises (::com::sun::star::awt::PrinterException, ::com::sun::star::lang::IllegalArgumentException);
     void end() raises (::com::sun::star::awt::PrinterException);
     void terminate();
     ::com::sun::star::awt::XDevice startPage() raises (::com::sun::star::awt::PrinterException);
     void endPage() raises (::com::sun::star::awt::PrinterException);
    };
    /** @deprecated */ published interface XProgressMonitor {
     interface ::com::sun::star::awt::XProgressBar;
     void addText([in] string Topic, [in] string Text, [in] boolean beforeProgress);
     void removeText([in] string Topic, [in] boolean beforeProgress);
     void updateText([in] string Topic, [in] string Text, [in] boolean beforeProgress);
    };
    published interface XRegion {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::Rectangle getBounds();
     void clear();
     void move([in] long nHorzMove, [in] long nVertMove);
     void unionRectangle([in] ::com::sun::star::awt::Rectangle Rect);
     void intersectRectangle([in] ::com::sun::star::awt::Rectangle Region);
     void excludeRectangle([in] ::com::sun::star::awt::Rectangle Rect);
     void xOrRectangle([in] ::com::sun::star::awt::Rectangle Rect);
     void unionRegion([in] ::com::sun::star::awt::XRegion Region);
     void intersectRegion([in] ::com::sun::star::awt::XRegion Region);
     void excludeRegion([in] ::com::sun::star::awt::XRegion Region);
     void xOrRegion([in] ::com::sun::star::awt::XRegion Region);
     sequence< ::com::sun::star::awt::Rectangle > getRectangles();
    };
    published interface XSpinListener {
     interface ::com::sun::star::lang::XEventListener;
     void up([in] ::com::sun::star::awt::SpinEvent rEvent);
     void down([in] ::com::sun::star::awt::SpinEvent rEvent);
     void first([in] ::com::sun::star::awt::SpinEvent rEvent);
     void last([in] ::com::sun::star::awt::SpinEvent rEvent);
    };
    published interface XSystemDependentWindowPeer {
     interface ::com::sun::star::uno::XInterface;
     any getWindowHandle([in] sequence< byte > ProcessId, [in] short SystemType);
    };
    published interface XTextArea {
     interface ::com::sun::star::uno::XInterface;
     string getTextLines();
    };
    published interface XTextEditField {
     interface ::com::sun::star::uno::XInterface;
     void setEchoChar([in] char cEcho);
    };
    published interface XTextListener {
     interface ::com::sun::star::lang::XEventListener;
     void textChanged([in] ::com::sun::star::awt::TextEvent rEvent);
    };
    published interface XTopWindowListener {
     interface ::com::sun::star::lang::XEventListener;
     void windowOpened([in] ::com::sun::star::lang::EventObject e);
     void windowClosing([in] ::com::sun::star::lang::EventObject e);
     void windowClosed([in] ::com::sun::star::lang::EventObject e);
     void windowMinimized([in] ::com::sun::star::lang::EventObject e);
     void windowNormalized([in] ::com::sun::star::lang::EventObject e);
     void windowActivated([in] ::com::sun::star::lang::EventObject e);
     void windowDeactivated([in] ::com::sun::star::lang::EventObject e);
    };
    published interface XUserInputInterception {
     interface ::com::sun::star::uno::XInterface;
     void addKeyHandler([in] ::com::sun::star::awt::XKeyHandler xHandler);
     void removeKeyHandler([in] ::com::sun::star::awt::XKeyHandler xHandler);
     void addMouseClickHandler([in] ::com::sun::star::awt::XMouseClickHandler xHandler);
     void removeMouseClickHandler([in] ::com::sun::star::awt::XMouseClickHandler xHandler);
    };
    published interface XVclContainerListener;
    /** @deprecated */ published interface XVclContainer {
     interface ::com::sun::star::uno::XInterface;
     void addVclContainerListener([in] ::com::sun::star::awt::XVclContainerListener l);
     void removeVclContainerListener([in] ::com::sun::star::awt::XVclContainerListener l);
     sequence< ::com::sun::star::awt::XWindow > getWindows();
    };
    /** @deprecated */ published interface XVclContainerListener {
     interface ::com::sun::star::lang::XEventListener;
     void windowAdded([in] ::com::sun::star::awt::VclContainerEvent e);
     void windowRemoved([in] ::com::sun::star::awt::VclContainerEvent e);
    };
    /** @deprecated */ published interface XVclContainerPeer {
     interface ::com::sun::star::uno::XInterface;
     void enableDialogControl([in] boolean bEnable);
     void setTabOrder([in] sequence< ::com::sun::star::awt::XWindow > WindowOrder, [in] sequence< any > Tabs, [in] boolean GroupControl);
     void setGroup([in] sequence< ::com::sun::star::awt::XWindow > Windows);
    };
    published interface XWindowPeer {
     interface ::com::sun::star::lang::XComponent;
     ::com::sun::star::awt::XToolkit getToolkit();
     void setPointer([in] ::com::sun::star::awt::XPointer Pointer);
     void setBackground([in] ::com::sun::star::util::Color Color);
     void invalidate([in] short Flags);
     void invalidateRect([in] ::com::sun::star::awt::Rectangle Rect, [in] short Flags);
    };
    /** @deprecated */ published interface XVclWindowPeer {
     interface ::com::sun::star::awt::XWindowPeer;
     boolean isChild([in] ::com::sun::star::awt::XWindowPeer Peer);
     void setDesignMode([in] boolean bOn);
     boolean isDesignMode();
     void enableClipSiblings([in] boolean bClip);
     void setForeground([in] ::com::sun::star::util::Color Color);
     void setControlFont([in] ::com::sun::star::awt::FontDescriptor aFont);
     void getStyles([in] short nType, [out] ::com::sun::star::awt::FontDescriptor Font, [out] ::com::sun::star::util::Color ForegroundColor, [out] ::com::sun::star::util::Color BackgroundColor);
     void setProperty([in] string PropertyName, [in] any Value);
     any getProperty([in] string PropertyName);
    };
    published interface XWindow2 {
     interface ::com::sun::star::awt::XWindow;
     void setOutputSize([in] ::com::sun::star::awt::Size Size);
     ::com::sun::star::awt::Size getOutputSize();
     boolean isVisible();
     boolean isActive();
     boolean isEnabled();
     boolean hasFocus();
    };
    published interface XWindowListener {
     interface ::com::sun::star::lang::XEventListener;
     void windowResized([in] ::com::sun::star::awt::WindowEvent e);
     void windowMoved([in] ::com::sun::star::awt::WindowEvent e);
     void windowShown([in] ::com::sun::star::lang::EventObject e);
     void windowHidden([in] ::com::sun::star::lang::EventObject e);
    };
    module grid {
     published interface XGridColumn;
     published interface XGridColumnModel {
      interface ::com::sun::star::lang::XComponent;
      interface ::com::sun::star::container::XContainer;
      interface ::com::sun::star::util::XCloneable;
      long getColumnCount();
      ::com::sun::star::awt::grid::XGridColumn createColumn();
      long addColumn([in] ::com::sun::star::awt::grid::XGridColumn column) raises (::com::sun::star::lang::IllegalArgumentException);
      void removeColumn([in] long ColumnIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      sequence< ::com::sun::star::awt::grid::XGridColumn > getColumns();
      ::com::sun::star::awt::grid::XGridColumn getColumn([in] long index) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      void setDefaultColumns([in] long elements);
     };
     published interface XGridDataModel {
      interface ::com::sun::star::lang::XComponent;
      interface ::com::sun::star::util::XCloneable;
      [attribute, readonly] long RowCount;
      [attribute, readonly] long ColumnCount;
      any getCellData([in] long Column, [in] long RowIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      any getCellToolTip([in] long Column, [in] long RowIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      any getRowHeading([in] long RowIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      sequence< any > getRowData([in] long RowIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     };
     published interface XGridDataListener;
     published interface XMutableGridDataModel {
      interface ::com::sun::star::awt::grid::XGridDataModel;
      void addRow([in] any Heading, [in] sequence< any > Data);
      void addRows([in] sequence< any > Headings, [in] sequence< sequence< any > > Data) raises (::com::sun::star::lang::IllegalArgumentException);
      void insertRow([in] long Index, [in] any Heading, [in] sequence< any > Data) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      void insertRows([in] long Index, [in] sequence< any > Headings, [in] sequence< sequence< any > > Data) raises (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::IllegalArgumentException);
      void removeRow([in] long RowIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      void removeAllRows();
      void updateCellData([in] long ColumnIndex, [in] long RowIndex, [in] any Value) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      void updateRowData([in] sequence< long > ColumnIndexes, [in] long RowIndex, [in] sequence< any > Values) raises (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::lang::IllegalArgumentException);
      void updateRowHeading([in] long RowIndex, [in] any Heading) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      void updateCellToolTip([in] long ColumnIndex, [in] long RowIndex, [in] any Value) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      void updateRowToolTip([in] long RowIndex, [in] any Value) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      void addGridDataListener([in] ::com::sun::star::awt::grid::XGridDataListener Listener);
      void removeGridDataListener([in] ::com::sun::star::awt::grid::XGridDataListener Listener);
     };
     published service DefaultGridDataModel: ::com::sun::star::awt::grid::XMutableGridDataModel;
    };
   };
   module style {
    published enum HorizontalAlignment {
     LEFT = 0,
     CENTER = 1,
     RIGHT = 2
    };
   };
   module awt {
    module grid {
     published interface XGridColumnListener;
     published interface XGridColumn {
      interface ::com::sun::star::lang::XComponent;
      interface ::com::sun::star::util::XCloneable;
      [attribute] any Identifier;
      [attribute] long ColumnWidth;
      [attribute] long MinWidth;
      [attribute] long MaxWidth;
      [attribute] boolean Resizeable;
      [attribute] long Flexibility {
       set raises (::com::sun::star::lang::IllegalArgumentException);
 };
      [attribute] ::com::sun::star::style::HorizontalAlignment HorizontalAlign;
      [attribute] string Title;
      [attribute] string HelpText;
      [attribute, readonly] long Index;
      [attribute] long DataColumnIndex;
      void addGridColumnListener([in] ::com::sun::star::awt::grid::XGridColumnListener Listener);
      void removeGridColumnListener([in] ::com::sun::star::awt::grid::XGridColumnListener Listener);
     };
     published struct GridColumnEvent: ::com::sun::star::lang::EventObject {
      string AttributeName;
      any OldValue;
      any NewValue;
      long ColumnIndex;
     };
     published struct GridDataEvent: ::com::sun::star::lang::EventObject {
      long FirstColumn;
      long LastColumn;
      long FirstRow;
      long LastRow;
     };
     published struct GridSelectionEvent: ::com::sun::star::lang::EventObject {
      sequence< long > SelectedRowIndexes;
      sequence< long > SelectedColumnIndexes;
     };
    };
   };
   module util {
    published exception VetoException: ::com::sun::star::uno::Exception {
    };
   };
   module awt {
    module grid {
     published interface XGridControl {
      interface ::com::sun::star::uno::XInterface;
      long getColumnAtPoint([in] long X, [in] long Y);
      long getRowAtPoint([in] long X, [in] long Y);
      long getCurrentColumn();
      long getCurrentRow();
      void goToCell([in] long ColumnIndex, [in] long RowIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::util::VetoException);
     };
     published interface XGridSelectionListener;
     published interface XGridRowSelection {
      interface ::com::sun::star::uno::XInterface;
      void selectAllRows();
      void selectRow([in] long RowIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      void deselectAllRows();
      void deselectRow([in] long RowIndex) raises (::com::sun::star::lang::IndexOutOfBoundsException);
      sequence< long > getSelectedRows();
      boolean hasSelectedRows();
      boolean isRowSelected([in] long RowIndex);
      void addSelectionListener([in] ::com::sun::star::awt::grid::XGridSelectionListener listener);
      void removeSelectionListener([in] ::com::sun::star::awt::grid::XGridSelectionListener listener);
     };
    };
   };
   module view {
    published enum SelectionType {
     NONE = 0,
     SINGLE = 1,
     MULTI = 2,
     RANGE = 3
    };
   };
   module awt {
    module grid {
     published service UnoControlGridModel {
      service ::com::sun::star::awt::UnoControlModel;
      [property] boolean ShowRowHeader;
      [property] long RowHeaderWidth;
      [property] boolean ShowColumnHeader;
      [property, maybevoid] long ColumnHeaderHeight;
      [property, maybevoid] long RowHeight;
      [property] ::com::sun::star::awt::grid::XGridColumnModel ColumnModel;
      [property] ::com::sun::star::awt::grid::XGridDataModel GridDataModel;
      [property] boolean HScroll;
      [property] boolean VScroll;
      [property] boolean Tabstop;
      [property] ::com::sun::star::view::SelectionType SelectionModel;
      [property] boolean UseGridLines;
      [property, maybevoid] ::com::sun::star::util::Color GridLineColor;
      [property, maybevoid] ::com::sun::star::util::Color HeaderBackgroundColor;
      [property, maybevoid] ::com::sun::star::util::Color HeaderTextColor;
      [property, maybevoid] ::com::sun::star::util::Color ActiveSelectionBackgroundColor;
      [property, maybevoid] ::com::sun::star::util::Color InactiveSelectionBackgroundColor;
      [property, maybevoid] ::com::sun::star::util::Color ActiveSelectionTextColor;
      [property, maybevoid] ::com::sun::star::util::Color InactiveSelectionTextColor;
      [property, maybevoid] sequence< ::com::sun::star::util::Color > RowBackgroundColors;
      [property] ::com::sun::star::style::VerticalAlignment VerticalAlign;
      [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
      [property, maybevoid] ::com::sun::star::util::Color TextColor;
      [property, maybevoid] ::com::sun::star::util::Color TextLineColor;
      [property] short FontEmphasisMark;
      [property] short FontRelief;
      [property] string HelpText;
      [property] string HelpURL;
     };
     published interface XGridColumnListener {
      interface ::com::sun::star::lang::XEventListener;
      void columnChanged([in] ::com::sun::star::awt::grid::GridColumnEvent event);
     };
     published interface XGridDataListener {
      interface ::com::sun::star::lang::XEventListener;
      void rowsInserted([in] ::com::sun::star::awt::grid::GridDataEvent Event);
      void rowsRemoved([in] ::com::sun::star::awt::grid::GridDataEvent Event);
      void dataChanged([in] ::com::sun::star::awt::grid::GridDataEvent Event);
      void rowHeadingChanged([in] ::com::sun::star::awt::grid::GridDataEvent Event);
     };
     published interface XGridSelectionListener {
      interface ::com::sun::star::lang::XEventListener;
      void selectionChanged([in] ::com::sun::star::awt::grid::GridSelectionEvent gridSelectionEvent);
     };
    };
    module tab {
     published struct TabPageActivatedEvent: ::com::sun::star::lang::EventObject {
      short TabPageID;
     };
     published interface XTabPage {
      interface ::com::sun::star::uno::XInterface;
     };
     published service UnoControlTabPage {
      service ::com::sun::star::awt::UnoControlContainer;
      interface ::com::sun::star::awt::tab::XTabPage;
     };
     published interface XTabPageContainerListener;
     published interface XTabPageContainer {
      interface ::com::sun::star::uno::XInterface;
      [attribute] short ActiveTabPageID;
      short getTabPageCount();
      boolean isTabPageActive([in] short tabPageIndex);
      ::com::sun::star::awt::tab::XTabPage getTabPage([in] short tabPageIndex);
      ::com::sun::star::awt::tab::XTabPage getTabPageByID([in] short tabPageID);
      void addTabPageContainerListener([in] ::com::sun::star::awt::tab::XTabPageContainerListener listener);
      void removeTabPageContainerListener([in] ::com::sun::star::awt::tab::XTabPageContainerListener listener);
     };
     published service UnoControlTabPageContainer {
      service ::com::sun::star::awt::UnoControl;
      interface ::com::sun::star::awt::tab::XTabPageContainer;
     };
     published interface XTabPageModel;
     published interface XTabPageContainerModel {
      interface ::com::sun::star::container::XIndexContainer;
      interface ::com::sun::star::container::XContainer;
      ::com::sun::star::awt::tab::XTabPageModel createTabPage([in] short TabPageID);
      ::com::sun::star::awt::tab::XTabPageModel loadTabPage([in] short TabPageID, [in] string ResourceURL);
     };
     published service UnoControlTabPageContainerModel {
      service ::com::sun::star::awt::UnoControlModel;
      interface ::com::sun::star::awt::tab::XTabPageContainerModel;
     };
     published interface XTabPageModel {
      interface ::com::sun::star::uno::XInterface;
      [attribute, readonly] short TabPageID;
      [attribute] boolean Enabled;
      [attribute] string Title;
      [attribute] string ImageURL;
      [attribute] string ToolTip;
     };
     published service UnoControlTabPageModel {
      interface ::com::sun::star::awt::tab::XTabPageModel;
     };
     published interface XTabPageContainerListener {
      interface ::com::sun::star::lang::XEventListener;
      void tabPageActivated([in] ::com::sun::star::awt::tab::TabPageActivatedEvent tabPageActivatedEvent);
     };
    };
   };
   module view {
    published interface XSelectionChangeListener;
    published interface XSelectionSupplier {
     interface ::com::sun::star::uno::XInterface;
     boolean select([in] any xSelection) raises (::com::sun::star::lang::IllegalArgumentException);
     any getSelection();
     void addSelectionChangeListener([in] ::com::sun::star::view::XSelectionChangeListener xListener);
     void removeSelectionChangeListener([in] ::com::sun::star::view::XSelectionChangeListener xListener);
    };
   };
   module drawing {
    published interface XShape;
   };
   module chart {
    published interface XAxisXSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XShape getXAxisTitle();
     ::com::sun::star::beans::XPropertySet getXAxis();
     ::com::sun::star::beans::XPropertySet getXMainGrid();
     ::com::sun::star::beans::XPropertySet getXHelpGrid();
    };
    published service ChartAxisXSupplier {
     interface ::com::sun::star::chart::XAxisXSupplier;
     [property] boolean HasXAxis;
     [property] boolean HasXAxisDescription;
     [property] boolean HasXAxisGrid;
     [property] boolean HasXAxisHelpGrid;
     [property] boolean HasXAxisTitle;
    };
   };
   module drawing {
    published interface XShape;
   };
   module chart {
    published interface XAxisZSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XShape getZAxisTitle();
     ::com::sun::star::beans::XPropertySet getZMainGrid();
     ::com::sun::star::beans::XPropertySet getZHelpGrid();
     ::com::sun::star::beans::XPropertySet getZAxis();
    };
    published service ChartAxisZSupplier {
     interface ::com::sun::star::chart::XAxisZSupplier;
     [property] boolean HasZAxis;
     [property] boolean HasZAxisDescription;
     [property] boolean HasZAxisGrid;
     [property] boolean HasZAxisHelpGrid;
     [property] boolean HasZAxisTitle;
    };
    published enum ChartErrorCategory {
     NONE = 0,
     VARIANCE = 1,
     STANDARD_DEVIATION = 2,
     PERCENT = 3,
     ERROR_MARGIN = 4,
     CONSTANT_VALUE = 5
    };
    published enum ChartErrorIndicatorType {
     NONE = 0,
     TOP_AND_BOTTOM = 1,
     UPPER = 2,
     LOWER = 3
    };
    published enum ChartRegressionCurveType {
     NONE = 0,
     LINEAR = 1,
     LOGARITHM = 2,
     EXPONENTIAL = 3,
     POLYNOMIAL = 4,
     POWER = 5
    };
    published service ChartStatistics {
     interface ::com::sun::star::beans::XPropertySet;
     [property] double ConstantErrorLow;
     [property] double ConstantErrorHigh;
     [property] boolean MeanValue;
     /** @deprecated */ [property] ::com::sun::star::chart::ChartErrorCategory ErrorCategory;
     [property, optional] long ErrorBarStyle;
     [property] double PercentageError;
     [property] double ErrorMargin;
     [property] ::com::sun::star::chart::ChartErrorIndicatorType ErrorIndicator;
     [property] ::com::sun::star::chart::ChartRegressionCurveType RegressionCurves;
     [property, optional] string ErrorBarRangePositive;
     [property, optional] string ErrorBarRangeNegative;
    };
   };
   module drawing {
    published interface XShape;
   };
   module chart {
    published interface XAxisYSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XShape getYAxisTitle();
     ::com::sun::star::beans::XPropertySet getYAxis();
     ::com::sun::star::beans::XPropertySet getYHelpGrid();
     ::com::sun::star::beans::XPropertySet getYMainGrid();
    };
    published service ChartAxisYSupplier {
     interface ::com::sun::star::chart::XAxisYSupplier;
     [property] boolean HasYAxis;
     [property] boolean HasYAxisDescription;
     [property] boolean HasYAxisGrid;
     [property] boolean HasYAxisHelpGrid;
     [property] boolean HasYAxisTitle;
    };
    published interface XTwoAxisYSupplier {
     interface ::com::sun::star::chart::XAxisYSupplier;
     ::com::sun::star::beans::XPropertySet getSecondaryYAxis();
    };
    published service ChartTwoAxisYSupplier {
     service ::com::sun::star::chart::ChartAxisYSupplier;
     interface ::com::sun::star::chart::XTwoAxisYSupplier;
     [property] boolean HasSecondaryYAxis;
     [property] boolean HasSecondaryYAxisDescription;
     [property, optional] boolean HasSecondaryYAxisTitle;
    };
    published enum ChartDataRowSource {
     ROWS = 0,
     COLUMNS = 1
    };
    interface XAxis;
    interface XAxisSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::chart::XAxis getAxis([in] long nDimensionIndex);
     ::com::sun::star::chart::XAxis getSecondaryAxis([in] long nDimensionIndex);
    };
   };
   module drawing {
    /** @deprecated */ published interface XShapeDescriptor {
     interface ::com::sun::star::uno::XInterface;
     string getShapeType();
    };
    published interface XShape {
     interface ::com::sun::star::drawing::XShapeDescriptor;
     ::com::sun::star::awt::Point getPosition();
     void setPosition([in] ::com::sun::star::awt::Point aPosition);
     ::com::sun::star::awt::Size getSize();
     void setSize([in] ::com::sun::star::awt::Size aSize) raises (::com::sun::star::beans::PropertyVetoException);
    };
   };
   module chart {
    published interface XDiagram {
     interface ::com::sun::star::drawing::XShape;
     string getDiagramType();
     ::com::sun::star::beans::XPropertySet getDataRowProperties([in] long nRow) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     ::com::sun::star::beans::XPropertySet getDataPointProperties([in] long nCol, [in] long nRow) raises (::com::sun::star::lang::IndexOutOfBoundsException);
    };
    interface XDiagramPositioning {
     interface ::com::sun::star::uno::XInterface;
     void setAutomaticDiagramPositioning();
     boolean isAutomaticDiagramPositioning();
     void setDiagramPositionExcludingAxes([in] ::com::sun::star::awt::Rectangle PositionRect);
     boolean isExcludingDiagramPositioning();
     ::com::sun::star::awt::Rectangle calculateDiagramPositionExcludingAxes();
     void setDiagramPositionIncludingAxes([in] ::com::sun::star::awt::Rectangle PositionRect);
     ::com::sun::star::awt::Rectangle calculateDiagramPositionIncludingAxes();
     void setDiagramPositionIncludingAxesAndAxisTitles([in] ::com::sun::star::awt::Rectangle PositionRect);
     ::com::sun::star::awt::Rectangle calculateDiagramPositionIncludingAxesAndAxisTitles();
    };
    interface XSecondAxisTitleSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XShape getSecondXAxisTitle();
     ::com::sun::star::drawing::XShape getSecondYAxisTitle();
    };
   };
   module xml {
    published service UserDefinedAttributesSupplier {
     [property] ::com::sun::star::container::XNameContainer UserDefinedAttributes;
    };
   };
   module chart {
    published service Diagram {
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::chart::XDiagram;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::chart::XAxisSupplier;
     [optional] interface ::com::sun::star::chart::XSecondAxisTitleSupplier;
     [optional] interface ::com::sun::star::chart::XDiagramPositioning;
     [property, optional] boolean AutomaticPosition;
     [property, optional] boolean AutomaticSize;
     [property] ::com::sun::star::chart::ChartDataRowSource DataRowSource;
     [property] long DataCaption;
     [property, optional] long MissingValueTreatment;
    };
    published interface X3DDefaultSetter {
     interface ::com::sun::star::uno::XInterface;
     void set3DSettingsToDefault();
     void setDefaultRotation();
     void setDefaultIllumination();
    };
    published interface X3DDisplay {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getWall();
     ::com::sun::star::beans::XPropertySet getFloor();
    };
    published service Dim3DDiagram {
     interface ::com::sun::star::chart::X3DDisplay;
     [optional] interface ::com::sun::star::chart::X3DDefaultSetter;
     [property] boolean Dim3D;
     [property, optional] long Perspective;
     [property, optional] long RotationHorizontal;
     [property, optional] long RotationVertical;
    };
    published service StackableDiagram {
     [property] boolean Percent;
     [property] boolean Stacked;
    };
    published service AreaDiagram {
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::ChartStatistics;
     service ::com::sun::star::chart::ChartAxisXSupplier;
     service ::com::sun::star::chart::ChartTwoAxisYSupplier;
     service ::com::sun::star::chart::ChartAxisZSupplier;
     service ::com::sun::star::chart::Dim3DDiagram;
     service ::com::sun::star::chart::StackableDiagram;
    };
    published service BarDiagram {
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::ChartStatistics;
     service ::com::sun::star::chart::ChartAxisXSupplier;
     service ::com::sun::star::chart::ChartTwoAxisYSupplier;
     service ::com::sun::star::chart::ChartAxisZSupplier;
     service ::com::sun::star::chart::Dim3DDiagram;
     service ::com::sun::star::chart::StackableDiagram;
     [property] boolean Vertical;
     [property, optional] boolean Deep;
     [property, optional] boolean StackedBarsConnected;
     [property, optional] boolean GroupBarsPerAxis;
     /** @deprecated */ [property] long NumberOfLines;
    };
    published service BubbleDiagram {
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::ChartAxisXSupplier;
     service ::com::sun::star::chart::ChartTwoAxisYSupplier;
     [optional] service ::com::sun::star::chart::ChartStatistics;
    };
    published service Chart3DBarProperties {
     interface ::com::sun::star::beans::XPropertySet;
     [property] long SolidType;
    };
   };
   module drawing {
    published enum BitmapMode {
     REPEAT = 0,
     STRETCH = 1,
     NO_REPEAT = 2
    };
    published enum FillStyle {
     NONE = 0,
     SOLID = 1,
     GRADIENT = 2,
     HATCH = 3,
     BITMAP = 4
    };
    published enum HatchStyle {
     SINGLE = 0,
     DOUBLE = 1,
     TRIPLE = 2
    };
    published struct Hatch {
     ::com::sun::star::drawing::HatchStyle Style;
     ::com::sun::star::util::Color Color;
     long Distance;
     long Angle;
    };
    published enum RectanglePoint {
     LEFT_TOP = 0,
     MIDDLE_TOP = 1,
     RIGHT_TOP = 2,
     LEFT_MIDDLE = 3,
     MIDDLE_MIDDLE = 4,
     RIGHT_MIDDLE = 5,
     LEFT_BOTTOM = 6,
     MIDDLE_BOTTOM = 7,
     RIGHT_BOTTOM = 8
    };
   };
   module text {
    published struct GraphicCrop {
     long Top;
     long Bottom;
     long Left;
     long Right;
    };
   };
   module drawing {
    published service FillProperties {
     [property] ::com::sun::star::drawing::FillStyle FillStyle;
     [property] ::com::sun::star::util::Color FillColor;
     [property] short FillTransparence;
     [property] string FillTransparenceGradientName;
     [property, optional] ::com::sun::star::awt::Gradient FillTransparenceGradient;
     [property] string FillGradientName;
     [property, optional] ::com::sun::star::awt::Gradient FillGradient;
     [property] string FillHatchName;
     [property, optional] ::com::sun::star::drawing::Hatch FillHatch;
     [property] boolean FillBackground;
     [property] string FillBitmapName;
     [property, optional] ::com::sun::star::awt::XBitmap FillBitmap;
     [property, optional] string FillBitmapURL;
     [property] short FillBitmapPositionOffsetX;
     [property] short FillBitmapPositionOffsetY;
     [property] short FillBitmapOffsetX;
     [property] short FillBitmapOffsetY;
     [property] ::com::sun::star::drawing::RectanglePoint FillBitmapRectanglePoint;
     [property] boolean FillBitmapLogicalSize;
     [property] long FillBitmapSizeX;
     [property] long FillBitmapSizeY;
     [property] ::com::sun::star::drawing::BitmapMode FillBitmapMode;
     [property, optional] boolean FillBitmapStretch;
     [property, optional] boolean FillBitmapTile;
     [property, optional] ::com::sun::star::text::GraphicCrop GraphicCrop;
    };
    published enum LineCap {
     BUTT = 0,
     ROUND = 1,
     SQUARE = 2
    };
    published enum DashStyle {
     RECT = 0,
     ROUND = 1,
     RECTRELATIVE = 2,
     ROUNDRELATIVE = 3
    };
    published struct LineDash {
     ::com::sun::star::drawing::DashStyle Style;
     short Dots;
     long DotLen;
     short Dashes;
     long DashLen;
     long Distance;
    };
    published enum LineJoint {
     NONE = 0,
     MIDDLE = 1,
     BEVEL = 2,
     MITER = 3,
     ROUND = 4
    };
    published enum LineStyle {
     NONE = 0,
     SOLID = 1,
     DASH = 2
    };
    published enum PolygonFlags {
     NORMAL = 0,
     SMOOTH = 1,
     CONTROL = 2,
     SYMMETRIC = 3
    };
    published typedef sequence< ::com::sun::star::drawing::PolygonFlags > FlagSequence;
    published typedef sequence< ::com::sun::star::drawing::FlagSequence > FlagSequenceSequence;
    published typedef sequence< ::com::sun::star::awt::Point > PointSequence;
    published typedef sequence< ::com::sun::star::drawing::PointSequence > PointSequenceSequence;
    published struct PolyPolygonBezierCoords {
     ::com::sun::star::drawing::PointSequenceSequence Coordinates;
     ::com::sun::star::drawing::FlagSequenceSequence Flags;
    };
    published service LineProperties {
     [property] ::com::sun::star::drawing::LineStyle LineStyle;
     [property] ::com::sun::star::drawing::LineDash LineDash;
     [property, optional] string LineDashName;
     [property] ::com::sun::star::util::Color LineColor;
     [property] short LineTransparence;
     [property] long LineWidth;
     [property] ::com::sun::star::drawing::LineJoint LineJoint;
     [property, optional] ::com::sun::star::drawing::LineCap LineCap;
     [property, optional] string LineStartName;
     [property, optional] string LineEndName;
     [property, optional] ::com::sun::star::drawing::PolyPolygonBezierCoords LineStart;
     [property, optional] ::com::sun::star::drawing::PolyPolygonBezierCoords LineEnd;
     [property, optional] boolean LineStartCenter;
     [property, optional] long LineStartWidth;
     [property, optional] boolean LineEndCenter;
     [property, optional] long LineEndWidth;
    };
   };
   module chart {
    published service ChartArea {
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::LineProperties;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::beans::XPropertySet;
    };
    published enum ChartAxisArrangeOrderType {
     AUTO = 0,
     SIDE_BY_SIDE = 1,
     STAGGER_EVEN = 2,
     STAGGER_ODD = 3
    };
    published enum ChartAxisLabelPosition {
     NEAR_AXIS = 0,
     NEAR_AXIS_OTHER_SIDE = 1,
     OUTSIDE_START = 2,
     OUTSIDE_END = 3
    };
    published enum ChartAxisMarkPosition {
     AT_LABELS = 0,
     AT_AXIS = 1,
     AT_LABELS_AND_AXIS = 2
    };
    published enum ChartAxisPosition {
     ZERO = 0,
     START = 1,
     END = 2,
     VALUE = 3
    };
    published struct TimeIncrement {
     any MajorTimeInterval;
     any MinorTimeInterval;
     any TimeResolution;
    };
    interface XAxis {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getAxisTitle();
     ::com::sun::star::beans::XPropertySet getMajorGrid();
     ::com::sun::star::beans::XPropertySet getMinorGrid();
    };
   };
   module table {
    published struct BorderLine {
     ::com::sun::star::util::Color Color;
     short InnerLineWidth;
     short OuterLineWidth;
     short LineDistance;
    };
    published struct BorderLine2: ::com::sun::star::table::BorderLine {
     short LineStyle;
     unsigned long LineWidth;
    };
    published enum ShadowLocation {
     NONE = 0,
     TOP_LEFT = 1,
     TOP_RIGHT = 2,
     BOTTOM_LEFT = 3,
     BOTTOM_RIGHT = 4
    };
    published struct ShadowFormat {
     ::com::sun::star::table::ShadowLocation Location;
     short ShadowWidth;
     boolean IsTransparent;
     ::com::sun::star::util::Color Color;
    };
   };
   module style {
    published service CharacterProperties {
     [property] string CharFontName;
     [property] string CharFontStyleName;
     [property] short CharFontFamily;
     [property] short CharFontCharSet;
     [property] short CharFontPitch;
     [property] ::com::sun::star::util::Color CharColor;
     [property, optional] short CharEscapement;
     [property] float CharHeight;
     [property] short CharUnderline;
     [property] float CharWeight;
     [property] ::com::sun::star::awt::FontSlant CharPosture;
     [property, optional] boolean CharAutoKerning;
     [property, optional] ::com::sun::star::util::Color CharBackColor;
     [property, optional] long CharShadingValue;
     [property, optional] boolean CharBackTransparent;
     [property, optional] short CharCaseMap;
     [property, optional] boolean CharCrossedOut;
     [property, optional] boolean CharFlash;
     [property, optional] short CharStrikeout;
     [property, optional] boolean CharWordMode;
     [property, optional] short CharKerning;
     [property] ::com::sun::star::lang::Locale CharLocale;
     [property, optional] boolean CharKeepTogether;
     [property, optional] boolean CharNoLineBreak;
     [property, optional] boolean CharShadowed;
     [property, optional] short CharFontType;
     [property, optional] string CharStyleName;
     [property, optional] boolean CharContoured;
     [property, optional] boolean CharCombineIsOn;
     [property, optional] string CharCombinePrefix;
     [property, optional] string CharCombineSuffix;
     [property, optional] short CharEmphasis;
     [property, optional] short CharRelief;
     [property, optional] string RubyText;
     [property, optional] short RubyAdjust;
     [property, optional] string RubyCharStyleName;
     [property, optional] boolean RubyIsAbove;
     [property, optional] short CharRotation;
     [property, optional] boolean CharRotationIsFitToLine;
     [property, optional] short CharScaleWidth;
     [property, optional] string HyperLinkURL;
     [property, optional] string HyperLinkTarget;
     [property, optional] string HyperLinkName;
     [property, optional] string VisitedCharStyleName;
     [property, optional] string UnvisitedCharStyleName;
     [property, optional] byte CharEscapementHeight;
     [property, optional] boolean CharNoHyphenation;
     [property] ::com::sun::star::util::Color CharUnderlineColor;
     [property] boolean CharUnderlineHasColor;
     [property, optional] sequence< string > CharStyleNames;
     [property, optional] boolean CharHidden;
     [property, optional] ::com::sun::star::container::XNameContainer TextUserDefinedAttributes;
     [property, optional] ::com::sun::star::table::BorderLine2 CharLeftBorder;
     [property, optional] ::com::sun::star::table::BorderLine2 CharRightBorder;
     [property, optional] ::com::sun::star::table::BorderLine2 CharTopBorder;
     [property, optional] ::com::sun::star::table::BorderLine2 CharBottomBorder;
     [property, optional] long CharBorderDistance;
     [property, optional] long CharLeftBorderDistance;
     [property, optional] long CharRightBorderDistance;
     [property, optional] long CharTopBorderDistance;
     [property, optional] long CharBottomBorderDistance;
     [property, optional] ::com::sun::star::table::ShadowFormat CharShadowFormat;
     [property, optional] ::com::sun::star::util::Color CharHighlight;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > CharInteropGrabBag;
    };
   };
   module chart {
    published service ChartAxis {
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::style::CharacterProperties;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::chart::XAxis;
     [property, optional] double Max;
     [property, optional] double Min;
     [property, optional] double StepMain;
     [property, optional] long StepHelpCount;
     /** @deprecated */ [property, optional] double StepHelp;
     [property, optional] boolean AutoMax;
     [property, optional] boolean AutoMin;
     [property, optional] boolean AutoStepMain;
     [property, optional] boolean AutoStepHelp;
     [property, optional] boolean Logarithmic;
     [property, optional] long AxisType;
     [property, maybevoid, optional] ::com::sun::star::chart::TimeIncrement TimeIncrement;
     [property, optional] boolean ReverseDirection;
     [property, optional] ::com::sun::star::chart::ChartAxisPosition CrossoverPosition;
     [property, optional] double CrossoverValue;
     [property, optional] double Origin;
     [property, optional] boolean AutoOrigin;
     [property] long Marks;
     [property] long HelpMarks;
     [property, optional] ::com::sun::star::chart::ChartAxisMarkPosition MarkPosition;
     [property] boolean DisplayLabels;
     [property] long NumberFormat;
     [property, optional] boolean LinkNumberFormatToSource;
     [property, optional] ::com::sun::star::chart::ChartAxisLabelPosition LabelPosition;
     [property] long TextRotation;
     [property] ::com::sun::star::chart::ChartAxisArrangeOrderType ArrangeOrder;
     [property] boolean TextBreak;
     [property] boolean TextCanOverlap;
     [property] long Overlap;
     [property] long GapWidth;
    };
    published constants ChartAxisAssign {
     const long PRIMARY_Y = 2;
     const long SECONDARY_Y = 4;
    };
    published constants ChartAxisMarks {
     const long INNER = 1;
     const long NONE = 0;
     const long OUTER = 2;
    };
    published constants ChartAxisType {
     const long AUTOMATIC = 0;
     const long CATEGORY = 1;
     const long DATE = 2;
    };
    published interface XChartDataChangeEventListener;
    published interface XChartData {
     interface ::com::sun::star::uno::XInterface;
     void addChartDataChangeEventListener([in] ::com::sun::star::chart::XChartDataChangeEventListener aListener);
     void removeChartDataChangeEventListener([in] ::com::sun::star::chart::XChartDataChangeEventListener aListener);
     double getNotANumber();
     boolean isNotANumber([in] double nNumber);
    };
    published service ChartData {
     interface ::com::sun::star::chart::XChartData;
    };
    published interface XChartDataArray {
     interface ::com::sun::star::chart::XChartData;
     sequence< sequence< double > > getData();
     void setData([in] sequence< sequence< double > > aData);
     sequence< string > getRowDescriptions();
     void setRowDescriptions([in] sequence< string > aRowDescriptions);
     sequence< string > getColumnDescriptions();
     void setColumnDescriptions([in] sequence< string > aColumnDescriptions);
    };
    published service ChartDataArray {
     service ::com::sun::star::chart::ChartData;
     interface ::com::sun::star::chart::XChartDataArray;
    };
    published constants ChartDataCaption {
     /** @deprecated */ const long FORMAT = 8;
     const long NONE = 0;
     const long PERCENT = 2;
     const long SYMBOL = 16;
     const long TEXT = 4;
     const long VALUE = 1;
    };
    published enum ChartDataChangeType {
     ALL = 0,
     DATA_RANGE = 1,
     COLUMN_INSERTED = 2,
     ROW_INSERTED = 3,
     COLUMN_DELETED = 4,
     ROW_DELETED = 5
    };
    published struct ChartDataChangeEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::chart::ChartDataChangeType Type;
     short StartColumn;
     short EndColumn;
     short StartRow;
     short EndRow;
    };
    /** @deprecated */ published struct ChartDataValue {
     double Value;
     double HighError;
     double LowError;
    };
    /** @deprecated */ published typedef sequence< ::com::sun::star::chart::ChartDataValue > ChartDataPoint;
    published service ChartDataPointProperties {
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::style::CharacterProperties;
     [optional] service ::com::sun::star::drawing::FillProperties;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     [optional] service ::com::sun::star::chart::Chart3DBarProperties;
     interface ::com::sun::star::beans::XPropertySet;
     [property] long DataCaption;
     [property, optional] string LabelSeparator;
     [property, optional] long NumberFormat;
     [property, optional] long PercentageNumberFormat;
     [property, optional] long LabelPlacement;
     [property, optional] long SymbolType;
     [property, optional] string SymbolBitmapURL;
     [property, optional] long SegmentOffset;
    };
    /** @deprecated */ published struct ChartDataRow {
     string Name;
     sequence< sequence< ::com::sun::star::chart::ChartDataValue > > Points;
    };
    published service ChartDataRowProperties {
     service ::com::sun::star::chart::ChartDataPointProperties;
     [optional] service ::com::sun::star::chart::ChartStatistics;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::beans::XPropertySet;
     [property] long Axis;
     [property, optional, readonly] ::com::sun::star::beans::XPropertySet DataRegressionProperties;
     [property, optional, readonly] ::com::sun::star::beans::XPropertySet DataErrorProperties;
     [property, optional, readonly] ::com::sun::star::beans::XPropertySet DataMeanValueProperties;
    };
   };
   module frame {
    published interface XController;
    published interface XModel {
     interface ::com::sun::star::lang::XComponent;
     boolean attachResource([in] string URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments);
     string getURL();
     sequence< ::com::sun::star::beans::PropertyValue > getArgs();
     void connectController([in] ::com::sun::star::frame::XController Controller);
     void disconnectController([in] ::com::sun::star::frame::XController Controller);
     void lockControllers();
     void unlockControllers();
     boolean hasControllersLocked();
     ::com::sun::star::frame::XController getCurrentController();
     void setCurrentController([in] ::com::sun::star::frame::XController Controller) raises (::com::sun::star::container::NoSuchElementException);
     ::com::sun::star::uno::XInterface getCurrentSelection();
    };
   };
   module chart {
    published interface XChartDocument {
     interface ::com::sun::star::frame::XModel;
     ::com::sun::star::drawing::XShape getTitle();
     ::com::sun::star::drawing::XShape getSubTitle();
     ::com::sun::star::drawing::XShape getLegend();
     ::com::sun::star::beans::XPropertySet getArea();
     ::com::sun::star::chart::XDiagram getDiagram();
     void setDiagram([in] ::com::sun::star::chart::XDiagram xDiagram);
     ::com::sun::star::chart::XChartData getData();
     void attachData([in] ::com::sun::star::chart::XChartData xData);
    };
   };
   module drawing {
    published interface XDrawPage;
    /** @deprecated */ published interface XDrawPageSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XDrawPage getDrawPage();
    };
   };
   module chart {
    published service ChartDocument {
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::chart::XChartDocument;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::drawing::XDrawPageSupplier;
     [property] boolean HasMainTitle;
     [property] boolean HasSubTitle;
     [property] boolean HasLegend;
    };
    published service ChartGrid {
     service ::com::sun::star::drawing::LineProperties;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::beans::XPropertySet;
    };
    published enum ChartLegendPosition {
     NONE = 0,
     LEFT = 1,
     TOP = 2,
     RIGHT = 3,
     BOTTOM = 4
    };
   };
   module drawing {
    published struct HomogenMatrixLine3 {
     double Column1;
     double Column2;
     double Column3;
    };
    published struct HomogenMatrix3 {
     ::com::sun::star::drawing::HomogenMatrixLine3 Line1;
     ::com::sun::star::drawing::HomogenMatrixLine3 Line2;
     ::com::sun::star::drawing::HomogenMatrixLine3 Line3;
    };
    published interface XGluePointsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexContainer getGluePoints();
    };
   };
   module style {
    published interface XStyle;
   };
   module drawing {
    published service Shape {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::drawing::XShape;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::drawing::XShapeDescriptor;
     [optional] interface ::com::sun::star::drawing::XGluePointsSupplier;
     [optional] interface ::com::sun::star::beans::XTolerantMultiPropertySet;
     [property, optional] long ZOrder;
     [property, optional] short LayerID;
     [property, optional] string LayerName;
     [property, optional] boolean Visible;
     [property, optional] boolean Printable;
     [property, optional] boolean MoveProtect;
     [property, optional] string Name;
     [property, optional] boolean SizeProtect;
     [property, optional] ::com::sun::star::style::XStyle Style;
     [property, optional] ::com::sun::star::drawing::HomogenMatrix3 Transformation;
     [property, optional] ::com::sun::star::container::XNameContainer ShapeUserDefinedAttributes;
     [property, optional] long NavigationOrder;
     [property, optional] string Hyperlink;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > InteropGrabBag;
     [property, optional] short RelativeHeight;
     [property, optional] short RelativeWidth;
     [property, optional] short RelativeHeightRelation;
     [property, optional] short RelativeWidthRelation;
    };
   };
   module chart {
    published service ChartLegend {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::style::CharacterProperties;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     [property, optional] boolean AutomaticPosition;
     [property] ::com::sun::star::chart::ChartLegendPosition Alignment;
    };
    published service ChartLine {
     service ::com::sun::star::drawing::LineProperties;
     interface ::com::sun::star::beans::XPropertySet;
    };
    published service ChartPieSegmentProperties {
     service ::com::sun::star::chart::ChartDataPointProperties;
     interface ::com::sun::star::beans::XPropertySet;
     [property] long SegmentOffset;
    };
    published struct ChartSeriesAddress {
     string DataRangeAddress;
     string LabelAddress;
     sequence< string > DomainRangeAddresses;
    };
    published constants ChartSolidType {
     const long CONE = 2;
     const long CYLINDER = 1;
     const long PYRAMID = 3;
     const long RECTANGULAR_SOLID = 0;
    };
    published constants ChartSymbolType {
     const long AUTO = -2;
     const long BITMAPURL = -1;
     const long NONE = -3;
     const long SYMBOL0 = 0;
     const long SYMBOL1 = 1;
     const long SYMBOL2 = 2;
     const long SYMBOL3 = 3;
     const long SYMBOL4 = 4;
     const long SYMBOL5 = 5;
     const long SYMBOL6 = 6;
     const long SYMBOL7 = 7;
    };
    published service ChartTableAddressSupplier {
     [property] string CategoriesRangeAddress;
     [property] sequence< ::com::sun::star::chart::ChartSeriesAddress > SeriesAddresses;
     [property, optional] string MainTitleAddress;
     [property, optional] string SubTitleAddress;
    };
    published service ChartTitle {
     service ::com::sun::star::drawing::Shape;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     [property, optional] boolean AutomaticPosition;
     [property] long TextRotation;
     [property] string String;
    };
    published interface XTwoAxisXSupplier {
     interface ::com::sun::star::chart::XAxisXSupplier;
     ::com::sun::star::beans::XPropertySet getSecondaryXAxis();
    };
    published service ChartTwoAxisXSupplier {
     service ::com::sun::star::chart::ChartAxisXSupplier;
     interface ::com::sun::star::chart::XTwoAxisXSupplier;
     [property] boolean HasSecondaryXAxis;
     [property] boolean HasSecondaryXAxisDescription;
     [property, optional] boolean HasSecondaryXAxisTitle;
    };
    published constants DataLabelPlacement {
     const long AVOID_OVERLAP = 0;
     const long BOTTOM = 6;
     const long BOTTOM_LEFT = 5;
     const long BOTTOM_RIGHT = 7;
     const long CENTER = 1;
     const long INSIDE = 10;
     const long LEFT = 4;
     const long NEAR_ORIGIN = 12;
     const long OUTSIDE = 11;
     const long RIGHT = 8;
     const long TOP = 2;
     const long TOP_LEFT = 3;
     const long TOP_RIGHT = 9;
    };
    published service DonutDiagram {
     service ::com::sun::star::chart::Diagram;
    };
    published constants ErrorBarStyle {
     const long ABSOLUTE = 3;
     const long ERROR_MARGIN = 5;
     const long FROM_DATA = 7;
     const long NONE = 0;
     const long RELATIVE = 4;
     const long STANDARD_DEVIATION = 2;
     const long STANDARD_ERROR = 6;
     const long VARIANCE = 1;
    };
    published service FilledNetDiagram {
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::ChartAxisXSupplier;
     service ::com::sun::star::chart::ChartAxisYSupplier;
     service ::com::sun::star::chart::StackableDiagram;
    };
    published service LineDiagram {
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::ChartStatistics;
     service ::com::sun::star::chart::ChartAxisXSupplier;
     service ::com::sun::star::chart::ChartTwoAxisYSupplier;
     service ::com::sun::star::chart::ChartAxisZSupplier;
     service ::com::sun::star::chart::Dim3DDiagram;
     service ::com::sun::star::chart::StackableDiagram;
     [property] long SymbolType;
     [property, optional] ::com::sun::star::awt::Size SymbolSize;
     /** @deprecated */ [property, optional] string SymbolBitmapURL;
     [property] boolean Lines;
     [property] long SplineType;
     [property, optional] long SplineOrder;
     [property, optional] long SplineResolution;
    };
    published constants MissingValueTreatment {
     const long CONTINUE = 2;
     const long LEAVE_GAP = 0;
     const long USE_ZERO = 1;
    };
    published service NetDiagram {
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::StackableDiagram;
     service ::com::sun::star::chart::ChartAxisYSupplier;
    };
    published service PieDiagram {
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::Dim3DDiagram;
    };
    published interface XStatisticDisplay {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getUpBar();
     ::com::sun::star::beans::XPropertySet getDownBar();
     ::com::sun::star::beans::XPropertySet getMinMaxLine();
    };
    published service StockDiagram {
     service ::com::sun::star::chart::ChartStatistics;
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::ChartAxisXSupplier;
     service ::com::sun::star::chart::ChartTwoAxisYSupplier;
     interface ::com::sun::star::chart::XStatisticDisplay;
     [property] boolean Volume;
     [property] boolean UpDown;
    };
    published struct TimeInterval {
     long Number;
     long TimeUnit;
    };
    published constants TimeUnit {
     const long DAY = 0;
     const long MONTH = 1;
     const long YEAR = 2;
    };
    published interface XChartDataChangeEventListener {
     interface ::com::sun::star::lang::XEventListener;
     void chartDataChanged([in] ::com::sun::star::chart::ChartDataChangeEvent aEvent);
    };
    published interface XComplexDescriptionAccess {
     interface ::com::sun::star::chart::XChartDataArray;
     sequence< sequence< string > > getComplexRowDescriptions();
     void setComplexRowDescriptions([in] sequence< sequence< string > > rRowDescriptions);
     sequence< sequence< string > > getComplexColumnDescriptions();
     void setComplexColumnDescriptions([in] sequence< sequence< string > > rColumnDescriptions);
    };
    published interface XDateCategories {
     interface ::com::sun::star::uno::XInterface;
     void setDateCategories([in] sequence< double > rDates);
     sequence< double > getDateCategories();
    };
    published service XYDiagram {
     service ::com::sun::star::chart::Diagram;
     service ::com::sun::star::chart::ChartStatistics;
     service ::com::sun::star::chart::ChartAxisXSupplier;
     service ::com::sun::star::chart::ChartTwoAxisYSupplier;
     service ::com::sun::star::chart::LineDiagram;
    };
   };
   module style {
    published service CharacterPropertiesAsian {
     [property] float CharHeightAsian;
     [property] float CharWeightAsian;
     [property] string CharFontNameAsian;
     [property] string CharFontStyleNameAsian;
     [property] short CharFontFamilyAsian;
     [property] short CharFontCharSetAsian;
     [property] short CharFontPitchAsian;
     [property] ::com::sun::star::awt::FontSlant CharPostureAsian;
     [property] ::com::sun::star::lang::Locale CharLocaleAsian;
    };
    published service CharacterPropertiesComplex {
     [property] float CharHeightComplex;
     [property] float CharWeightComplex;
     [property] string CharFontNameComplex;
     [property] string CharFontStyleNameComplex;
     [property] short CharFontFamilyComplex;
     [property] short CharFontCharSetComplex;
     [property] short CharFontPitchComplex;
     [property] ::com::sun::star::awt::FontSlant CharPostureComplex;
     [property] ::com::sun::star::lang::Locale CharLocaleComplex;
    };
   };
   module util {
    published exception CloseVetoException: ::com::sun::star::uno::Exception {
    };
   };
   module style {
    published interface XStyleFamiliesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getStyleFamilies();
    };
   };
   module util {
    published interface XNumberFormats;
    published interface XNumberFormatsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getNumberFormatSettings();
     ::com::sun::star::util::XNumberFormats getNumberFormats();
    };
   };
   module drawing {
    published enum Alignment {
     TOP_LEFT = 0,
     TOP = 1,
     TOP_RIGHT = 2,
     LEFT = 3,
     CENTER = 4,
     RIGHT = 5,
     BOTTOM_LEFT = 6,
     BOTTOM = 7,
     BOTTOM_RIGHT = 8
    };
    published struct Direction3D {
     double DirectionX;
     double DirectionY;
     double DirectionZ;
    };
   };
   module style {
    published interface XStyle {
     interface ::com::sun::star::container::XNamed;
     boolean isUserDefined();
     boolean isInUse();
     string getParentStyle();
     void setParentStyle([in] string aParentStyle) raises (::com::sun::star::container::NoSuchElementException);
    };
    published service Style {
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::style::XStyle;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::beans::XMultiPropertySet;
     [optional] interface ::com::sun::star::beans::XMultiPropertyStates;
     [property, optional, readonly] boolean IsPhysical;
     [property, optional] string FollowStyle;
     [property, optional, readonly] string DisplayName;
     [property, optional] string IsAutoUpdate;
     [property, optional] sequence< ::com::sun::star::beans::NamedValue > ParaStyleConditions;
     [property, optional] boolean Hidden;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > StyleInteropGrabBag;
    };
    published interface XDefaultsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getDefaults();
    };
    published enum BreakType {
     NONE = 0,
     COLUMN_BEFORE = 1,
     COLUMN_AFTER = 2,
     COLUMN_BOTH = 3,
     PAGE_BEFORE = 4,
     PAGE_AFTER = 5,
     PAGE_BOTH = 6
    };
    published struct DropCapFormat {
     byte Lines;
     byte Count;
     short Distance;
    };
    published enum GraphicLocation {
     NONE = 0,
     LEFT_TOP = 1,
     MIDDLE_TOP = 2,
     RIGHT_TOP = 3,
     LEFT_MIDDLE = 4,
     MIDDLE_MIDDLE = 5,
     RIGHT_MIDDLE = 6,
     LEFT_BOTTOM = 7,
     MIDDLE_BOTTOM = 8,
     RIGHT_BOTTOM = 9,
     AREA = 10,
     TILED = 11
    };
    published struct LineSpacing {
     short Mode;
     short Height;
    };
    published enum ParagraphAdjust {
     LEFT = 0,
     RIGHT = 1,
     BLOCK = 2,
     CENTER = 3,
     STRETCH = 4
    };
    published enum TabAlign {
     LEFT = 0,
     CENTER = 1,
     RIGHT = 2,
     DECIMAL = 3,
     DEFAULT = 4
    };
    published struct TabStop {
     long Position;
     ::com::sun::star::style::TabAlign Alignment;
     char DecimalChar;
     char FillChar;
    };
    published service ParagraphProperties {
     [property] ::com::sun::star::style::ParagraphAdjust ParaAdjust;
     [property, optional] ::com::sun::star::style::LineSpacing ParaLineSpacing;
     [property, optional] ::com::sun::star::util::Color ParaBackColor;
     [property, optional] boolean ParaBackTransparent;
     [property, optional] string ParaBackGraphicURL;
     [property, optional] string ParaBackGraphicFilter;
     [property, optional] ::com::sun::star::style::GraphicLocation ParaBackGraphicLocation;
     [property] short ParaLastLineAdjust;
     [property, optional] boolean ParaExpandSingleWord;
     [property] long ParaLeftMargin;
     [property] long ParaRightMargin;
     [property] long ParaTopMargin;
     [property] long ParaBottomMargin;
     [property, optional] boolean ParaContextMargin;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > ParaInteropGrabBag;
     [property, optional] boolean ParaLineNumberCount;
     [property, optional] long ParaLineNumberStartValue;
     [property, optional] string PageDescName;
     [property, optional] short PageNumberOffset;
     [property, optional] boolean ParaRegisterModeActive;
     [property, optional] sequence< ::com::sun::star::style::TabStop > ParaTabStops;
     [property, optional] string ParaStyleName;
     [property, maybevoid, optional, readonly] string PageStyleName;
     [property, optional] ::com::sun::star::style::DropCapFormat DropCapFormat;
     [property, optional] boolean DropCapWholeWord;
     [property, optional] boolean ParaKeepTogether;
     [property, optional] boolean ParaSplit;
     [property, optional] short NumberingLevel;
     [property, optional] ::com::sun::star::container::XIndexReplace NumberingRules;
     [property, optional] short NumberingStartValue;
     [property, optional] boolean ParaIsNumberingRestart;
     [property, optional] string NumberingStyleName;
     [property, optional] byte ParaOrphans;
     [property, optional] byte ParaWidows;
     [property, optional] ::com::sun::star::table::ShadowFormat ParaShadowFormat;
     [property, optional] ::com::sun::star::table::BorderLine LeftBorder;
     [property, optional] ::com::sun::star::table::BorderLine RightBorder;
     [property, optional] ::com::sun::star::table::BorderLine TopBorder;
     [property, optional] ::com::sun::star::table::BorderLine BottomBorder;
     [property, optional] long BorderDistance;
     [property, optional] long LeftBorderDistance;
     [property, optional] long RightBorderDistance;
     [property, optional] long TopBorderDistance;
     [property, optional] long BottomBorderDistance;
     [property, optional] ::com::sun::star::style::BreakType BreakType;
     [property, optional] string DropCapCharStyleName;
     [property, optional] long ParaFirstLineIndent;
     [property, optional] boolean ParaIsAutoFirstLineIndent;
     [property] boolean ParaIsHyphenation;
     [property, optional] short ParaHyphenationMaxHyphens;
     [property, optional] short ParaHyphenationMaxLeadingChars;
     [property, optional] short ParaHyphenationMaxTrailingChars;
     [property, optional] short ParaVertAlignment;
     [property, optional] ::com::sun::star::container::XNameContainer ParaUserDefinedAttributes;
     [property, maybevoid, optional] boolean NumberingIsNumber;
     [property, maybevoid, optional] boolean ParaIsConnectBorder;
     [property, optional] string ListId;
     [property, optional] short OutlineLevel;
    };
   };
   module util {
    published interface XModifyListener;
    published interface XModifyBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addModifyListener([in] ::com::sun::star::util::XModifyListener aListener);
     void removeModifyListener([in] ::com::sun::star::util::XModifyListener aListener);
    };
   };
   module sdbc {
    published exception SQLException: ::com::sun::star::uno::Exception {
     string SQLState;
     long ErrorCode;
     any NextException;
    };
   };
   module util {
    published struct DateTime {
     unsigned long NanoSeconds;
     unsigned short Seconds;
     unsigned short Minutes;
     unsigned short Hours;
     unsigned short Day;
     unsigned short Month;
     short Year;
     boolean IsUTC;
    };
   };
   module sdbc {
    published interface XArray;
    published interface XBlob;
    published interface XClob;
    published interface XRef;
    published interface XParameters {
     interface ::com::sun::star::uno::XInterface;
     void setNull([in] long parameterIndex, [in] long sqlType) raises (::com::sun::star::sdbc::SQLException);
     void setObjectNull([in] long parameterIndex, [in] long sqlType, [in] string typeName) raises (::com::sun::star::sdbc::SQLException);
     void setBoolean([in] long parameterIndex, [in] boolean x) raises (::com::sun::star::sdbc::SQLException);
     void setByte([in] long parameterIndex, [in] byte x) raises (::com::sun::star::sdbc::SQLException);
     void setShort([in] long parameterIndex, [in] short x) raises (::com::sun::star::sdbc::SQLException);
     void setInt([in] long parameterIndex, [in] long x) raises (::com::sun::star::sdbc::SQLException);
     void setLong([in] long parameterIndex, [in] hyper x) raises (::com::sun::star::sdbc::SQLException);
     void setFloat([in] long parameterIndex, [in] float x) raises (::com::sun::star::sdbc::SQLException);
     void setDouble([in] long parameterIndex, [in] double x) raises (::com::sun::star::sdbc::SQLException);
     void setString([in] long parameterIndex, [in] string x) raises (::com::sun::star::sdbc::SQLException);
     void setBytes([in] long parameterIndex, [in] sequence< byte > x) raises (::com::sun::star::sdbc::SQLException);
     void setDate([in] long parameterIndex, [in] ::com::sun::star::util::Date x) raises (::com::sun::star::sdbc::SQLException);
     void setTime([in] long parameterIndex, [in] ::com::sun::star::util::Time x) raises (::com::sun::star::sdbc::SQLException);
     void setTimestamp([in] long parameterIndex, [in] ::com::sun::star::util::DateTime x) raises (::com::sun::star::sdbc::SQLException);
     void setBinaryStream([in] long parameterIndex, [in] ::com::sun::star::io::XInputStream x, [in] long length) raises (::com::sun::star::sdbc::SQLException);
     void setCharacterStream([in] long parameterIndex, [in] ::com::sun::star::io::XInputStream x, [in] long length) raises (::com::sun::star::sdbc::SQLException);
     void setObject([in] long parameterIndex, [in] any x) raises (::com::sun::star::sdbc::SQLException);
     void setObjectWithInfo([in] long parameterIndex, [in] any x, [in] long targetSqlType, [in] long scale) raises (::com::sun::star::sdbc::SQLException);
     void setRef([in] long parameterIndex, [in] ::com::sun::star::sdbc::XRef x) raises (::com::sun::star::sdbc::SQLException);
     void setBlob([in] long parameterIndex, [in] ::com::sun::star::sdbc::XBlob x) raises (::com::sun::star::sdbc::SQLException);
     void setClob([in] long parameterIndex, [in] ::com::sun::star::sdbc::XClob x) raises (::com::sun::star::sdbc::SQLException);
     void setArray([in] long parameterIndex, [in] ::com::sun::star::sdbc::XArray x) raises (::com::sun::star::sdbc::SQLException);
     void clearParameters() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XResultSet {
     interface ::com::sun::star::uno::XInterface;
     boolean next() raises (::com::sun::star::sdbc::SQLException);
     boolean isBeforeFirst() raises (::com::sun::star::sdbc::SQLException);
     boolean isAfterLast() raises (::com::sun::star::sdbc::SQLException);
     boolean isFirst() raises (::com::sun::star::sdbc::SQLException);
     boolean isLast() raises (::com::sun::star::sdbc::SQLException);
     void beforeFirst() raises (::com::sun::star::sdbc::SQLException);
     void afterLast() raises (::com::sun::star::sdbc::SQLException);
     boolean first() raises (::com::sun::star::sdbc::SQLException);
     boolean last() raises (::com::sun::star::sdbc::SQLException);
     long getRow() raises (::com::sun::star::sdbc::SQLException);
     boolean absolute([in] long row) raises (::com::sun::star::sdbc::SQLException);
     boolean relative([in] long rows) raises (::com::sun::star::sdbc::SQLException);
     boolean previous() raises (::com::sun::star::sdbc::SQLException);
     void refreshRow() raises (::com::sun::star::sdbc::SQLException);
     boolean rowUpdated() raises (::com::sun::star::sdbc::SQLException);
     boolean rowInserted() raises (::com::sun::star::sdbc::SQLException);
     boolean rowDeleted() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::uno::XInterface getStatement() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XRowSetListener;
    published interface XRowSet {
     interface ::com::sun::star::sdbc::XResultSet;
     void execute() raises (::com::sun::star::sdbc::SQLException);
     void addRowSetListener([in] ::com::sun::star::sdbc::XRowSetListener listener);
     void removeRowSetListener([in] ::com::sun::star::sdbc::XRowSetListener listener);
    };
   };
   module view {
    published interface XSelectionChangeListener {
     interface ::com::sun::star::lang::XEventListener;
     void selectionChanged([in] ::com::sun::star::lang::EventObject aEvent);
    };
   };
   module configuration {
    published service HierarchyElement {
     interface ::com::sun::star::container::XHierarchicalName;
     interface ::com::sun::star::container::XNamed;
     [optional] interface ::com::sun::star::beans::XProperty;
     [optional] interface ::com::sun::star::beans::XPropertyWithState;
     [optional] interface ::com::sun::star::container::XChild;
    };
   };
   module util {
    published interface XChangesListener;
    published interface XChangesNotifier {
     interface ::com::sun::star::uno::XInterface;
     void addChangesListener([in] ::com::sun::star::util::XChangesListener aListener);
     void removeChangesListener([in] ::com::sun::star::util::XChangesListener aListener);
    };
   };
   module configuration {
    published service AccessRootElement {
     service ::com::sun::star::configuration::HierarchyElement;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::util::XChangesNotifier;
     [optional] interface ::com::sun::star::lang::XLocalizable;
    };
    published service AdministrationProvider {
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::lang::XComponent;
    };
    published exception CannotLoadConfigurationException: ::com::sun::star::uno::Exception {
    };
    published service HierarchyAccess {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XHierarchicalNameAccess;
     interface ::com::sun::star::container::XContainer;
     interface ::com::sun::star::beans::XExactName;
     [optional] interface ::com::sun::star::beans::XPropertySetInfo;
     [optional] interface ::com::sun::star::beans::XPropertyState;
     [optional] interface ::com::sun::star::beans::XMultiPropertyStates;
    };
    published service PropertyHierarchy {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::beans::XMultiPropertySet;
     interface ::com::sun::star::beans::XHierarchicalPropertySet;
     interface ::com::sun::star::beans::XMultiHierarchicalPropertySet;
    };
    published service GroupAccess {
     service ::com::sun::star::configuration::HierarchyAccess;
     service ::com::sun::star::configuration::PropertyHierarchy;
     [optional] interface ::com::sun::star::beans::XPropertyState;
     [optional] interface ::com::sun::star::beans::XMultiPropertyStates;
    };
    published service GroupElement {
     service ::com::sun::star::configuration::HierarchyElement;
     interface ::com::sun::star::container::XChild;
    };
    published interface XTemplateContainer {
     interface ::com::sun::star::uno::XInterface;
     string getElementTemplateName();
    };
   };
   module util {
    published interface XStringEscape {
     interface ::com::sun::star::uno::XInterface;
     string escapeString([in] string aString) raises (::com::sun::star::lang::IllegalArgumentException);
     string unescapeString([in] string aEscapedString) raises (::com::sun::star::lang::IllegalArgumentException);
    };
   };
   module configuration {
    published service SimpleSetAccess {
     interface ::com::sun::star::container::XNameAccess;
     [optional] interface ::com::sun::star::configuration::XTemplateContainer;
     [optional] interface ::com::sun::star::util::XStringEscape;
     [optional] interface ::com::sun::star::container::XContainer;
    };
    published service SetAccess {
     service ::com::sun::star::configuration::HierarchyAccess;
     service ::com::sun::star::configuration::SimpleSetAccess;
     interface ::com::sun::star::container::XContainer;
    };
    published interface XTemplateInstance {
     interface ::com::sun::star::uno::XInterface;
     string getTemplateName();
    };
    published service SetElement {
     service ::com::sun::star::configuration::HierarchyElement;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::configuration::XTemplateInstance;
    };
    published service ConfigurationAccess {
     service ::com::sun::star::configuration::HierarchyAccess;
     service ::com::sun::star::configuration::HierarchyElement;
     [optional] service ::com::sun::star::configuration::SetAccess;
     [optional] service ::com::sun::star::configuration::GroupAccess;
     [optional] service ::com::sun::star::configuration::AccessRootElement;
     [optional] service ::com::sun::star::configuration::SetElement;
     [optional] service ::com::sun::star::configuration::GroupElement;
    };
    /** @deprecated */ published service ConfigurationProvider {
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::lang::XComponent;
    };
   };
   module util {
    published interface XFlushListener;
    published interface XFlushable {
     interface ::com::sun::star::uno::XInterface;
     void flush();
     void addFlushListener([in] ::com::sun::star::util::XFlushListener l);
     void removeFlushListener([in] ::com::sun::star::util::XFlushListener l);
    };
   };
   module configuration {
    published service ConfigurationRegistry {
     interface ::com::sun::star::registry::XSimpleRegistry;
     interface ::com::sun::star::util::XFlushable;
    };
    published service GroupUpdate {
     service ::com::sun::star::configuration::GroupAccess;
     interface ::com::sun::star::container::XNameReplace;
    };
    published service SimpleSetUpdate {
     service ::com::sun::star::configuration::SimpleSetAccess;
     interface ::com::sun::star::container::XNameContainer;
     [optional] interface ::com::sun::star::lang::XSingleServiceFactory;
     [optional] interface ::com::sun::star::lang::XMultiServiceFactory;
    };
    published service SetUpdate {
     service ::com::sun::star::configuration::SetAccess;
     service ::com::sun::star::configuration::SimpleSetUpdate;
    };
   };
   module util {
    published struct ElementChange {
     any Accessor;
     any Element;
     any ReplacedElement;
    };
    published typedef sequence< ::com::sun::star::util::ElementChange > ChangesSet;
    published interface XChangesBatch {
     interface ::com::sun::star::uno::XInterface;
     void commitChanges() raises (::com::sun::star::lang::WrappedTargetException);
     boolean hasPendingChanges();
     ::com::sun::star::util::ChangesSet getPendingChanges();
    };
   };
   module configuration {
    published service UpdateRootElement {
     service ::com::sun::star::configuration::AccessRootElement;
     interface ::com::sun::star::util::XChangesBatch;
    };
    published service ConfigurationUpdateAccess {
     service ::com::sun::star::configuration::ConfigurationAccess;
     [optional] service ::com::sun::star::configuration::SetUpdate;
     [optional] service ::com::sun::star::configuration::GroupUpdate;
     [optional] service ::com::sun::star::configuration::UpdateRootElement;
    };
    published exception CorruptedConfigurationException: ::com::sun::star::uno::RuntimeException {
     string Details;
    };
    published exception CorruptedUIConfigurationException: ::com::sun::star::configuration::CorruptedConfigurationException {
    };
   };
   module util {
    published interface XRefreshListener;
    published interface XRefreshable {
     interface ::com::sun::star::uno::XInterface;
     void refresh();
     void addRefreshListener([in] ::com::sun::star::util::XRefreshListener l);
     void removeRefreshListener([in] ::com::sun::star::util::XRefreshListener l);
    };
   };
   module configuration {
    published service DefaultProvider {
     service ::com::sun::star::configuration::ConfigurationProvider;
     [optional] interface ::com::sun::star::util::XRefreshable;
     [optional] interface ::com::sun::star::util::XFlushable;
     [optional] interface ::com::sun::star::lang::XLocalizable;
     [property, optional] boolean EnableAsync;
    };
    published exception InstallationIncompleteException: ::com::sun::star::configuration::CannotLoadConfigurationException {
    };
    published exception InvalidBootstrapFileException: ::com::sun::star::configuration::CannotLoadConfigurationException {
     string BootstrapFileURL;
    };
    published exception MissingBootstrapFileException: ::com::sun::star::configuration::CannotLoadConfigurationException {
     string BootstrapFileURL;
    };
    module backend {
     published exception BackendSetupException: ::com::sun::star::configuration::CannotLoadConfigurationException {
      any BackendException;
     };
     published exception AuthenticationFailedException: ::com::sun::star::configuration::backend::BackendSetupException {
     };
     published exception BackendAccessException: ::com::sun::star::lang::WrappedTargetException {
     };
     published interface XLayer;
     published interface XUpdateHandler;
     published interface XBackend {
      interface ::com::sun::star::uno::XInterface;
      sequence< ::com::sun::star::configuration::backend::XLayer > listOwnLayers([in] string aComponent) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
      ::com::sun::star::configuration::backend::XUpdateHandler getOwnUpdateHandler([in] string aComponent) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::NoSupportException, ::com::sun::star::lang::IllegalArgumentException);
      sequence< ::com::sun::star::configuration::backend::XLayer > listLayers([in] string aComponent, [in] string aEntity) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
      ::com::sun::star::configuration::backend::XUpdateHandler getUpdateHandler([in] string aComponent, [in] string aEntity) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::NoSupportException, ::com::sun::star::lang::IllegalArgumentException);
     };
     published interface XBackendEntities {
      interface ::com::sun::star::uno::XInterface;
      string getOwnerEntity();
      string getAdminEntity();
      boolean supportsEntity([in] string aEntity) raises (::com::sun::star::configuration::backend::BackendAccessException);
      boolean isEqualEntity([in] string aEntity, [in] string aOtherEntity) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
     };
     published interface XSchema;
     published interface XSchemaSupplier {
      interface ::com::sun::star::uno::XInterface;
      ::com::sun::star::configuration::backend::XSchema getComponentSchema([in] string aComponent) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
     };
     published service Backend {
      interface ::com::sun::star::configuration::backend::XSchemaSupplier;
      interface ::com::sun::star::configuration::backend::XBackend;
      [optional] interface ::com::sun::star::configuration::backend::XBackendEntities;
     };
     published service BackendAdapter {
      service ::com::sun::star::configuration::backend::Backend;
      interface ::com::sun::star::configuration::backend::XBackendEntities;
      [optional] interface ::com::sun::star::lang::XInitialization;
     };
     published exception CannotConnectException: ::com::sun::star::configuration::backend::BackendSetupException {
     };
     published exception ConnectionLostException: ::com::sun::star::configuration::backend::BackendAccessException {
     };
     published exception MalformedDataException: ::com::sun::star::uno::Exception {
      any ErrorDetails;
     };
     published interface XLayer;
     published interface XLayerImporter {
      interface ::com::sun::star::uno::XInterface;
      ::com::sun::star::configuration::backend::XBackend getTargetBackend();
      void setTargetBackend([in] ::com::sun::star::configuration::backend::XBackend aBackend) raises (::com::sun::star::lang::NullPointerException);
      void importLayer([in] ::com::sun::star::configuration::backend::XLayer aLayer) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::NullPointerException, ::com::sun::star::lang::WrappedTargetException);
      void importLayerForEntity([in] ::com::sun::star::configuration::backend::XLayer aLayer, [in] string aEntity) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::NullPointerException, ::com::sun::star::lang::WrappedTargetException);
     };
     published service Importer {
      interface ::com::sun::star::configuration::backend::XLayerImporter;
      [optional] interface ::com::sun::star::lang::XInitialization;
     };
     published service CopyImporter {
      service ::com::sun::star::configuration::backend::Importer;
      interface ::com::sun::star::lang::XInitialization;
     };
    };
   };
   module task {
    published interface XJob {
     interface ::com::sun::star::uno::XInterface;
     any execute([in] sequence< ::com::sun::star::beans::NamedValue > Arguments) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::Exception);
    };
   };
   module configuration {
    module backend {
     published service DataImporter {
      interface ::com::sun::star::task::XJob;
     };
     published service HierarchyBrowser {
      interface ::com::sun::star::task::XJob;
     };
     published exception InsufficientAccessRightsException: ::com::sun::star::configuration::backend::BackendAccessException {
     };
     published service InteractionHandler {
      interface ::com::sun::star::task::XInteractionHandler;
      interface ::com::sun::star::lang::XInitialization;
     };
     published exception InvalidAuthenticationMechanismException: ::com::sun::star::configuration::backend::BackendSetupException {
     };
     published interface XLayerHandler;
     published interface XLayer {
      interface ::com::sun::star::uno::XInterface;
      void readData([in] ::com::sun::star::configuration::backend::XLayerHandler aHandler) raises (::com::sun::star::lang::NullPointerException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::configuration::backend::MalformedDataException);
     };
     published interface XLayerHandler;
     published interface XCompositeLayer {
      interface ::com::sun::star::configuration::backend::XLayer;
      sequence< string > listSubLayerIds() raises (::com::sun::star::lang::WrappedTargetException);
      void readSubLayerData([in] ::com::sun::star::configuration::backend::XLayerHandler aHandler, [in] string aSubLayerId) raises (::com::sun::star::lang::NullPointerException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::configuration::backend::MalformedDataException);
     };
    };
   };
   module util {
    published interface XTimeStamped {
     interface ::com::sun::star::uno::XInterface;
     string getTimestamp();
    };
   };
   module configuration {
    module backend {
     published service Layer {
      interface ::com::sun::star::configuration::backend::XLayer;
      [optional] interface ::com::sun::star::configuration::backend::XCompositeLayer;
      [optional] interface ::com::sun::star::util::XTimeStamped;
      [property, optional, readonly] string URL;
     };
     published service LayerFilter {
      interface ::com::sun::star::configuration::backend::XLayer;
      interface ::com::sun::star::lang::XInitialization;
     };
     published struct TemplateIdentifier {
      string Name;
      string Component;
     };
     published interface XUpdateHandler {
      interface ::com::sun::star::uno::XInterface;
      void startUpdate() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::IllegalAccessException, ::com::sun::star::lang::WrappedTargetException);
      void endUpdate() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::IllegalAccessException, ::com::sun::star::lang::WrappedTargetException);
      void modifyNode([in] string aName, [in] short aAttributes, [in] short aAttributeMask, [in] boolean bReset) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addOrReplaceNode([in] string aName, [in] short aAttributes) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addOrReplaceNodeFromTemplate([in] string aName, [in] short aAttributes, [in] ::com::sun::star::configuration::backend::TemplateIdentifier aTemplate) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endNode() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void removeNode([in] string aName) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void modifyProperty([in] string aName, [in] short aAttributes, [in] short aAttributeMask, [in] type aType) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void setPropertyValue([in] any aValue) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void setPropertyValueForLocale([in] any aValue, [in] string aLocale) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void resetPropertyValue() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void resetPropertyValueForLocale([in] string aLocale) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endProperty() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void resetProperty([in] string aName) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addOrReplaceProperty([in] string aName, [in] short aAttributes, [in] type aType) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addOrReplacePropertyWithValue([in] string aName, [in] short aAttributes, [in] any aValue) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void removeProperty([in] string aName) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
     };
     published service LayerUpdateMerger {
      interface ::com::sun::star::configuration::backend::XUpdateHandler;
      interface ::com::sun::star::lang::XInitialization;
     };
     published interface XUpdatableLayer;
     published interface XMultiLayerStratum {
      interface ::com::sun::star::uno::XInterface;
      sequence< string > listLayerIds([in] string aComponent, [in] string aEntity) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
      string getUpdateLayerId([in] string aComponent, [in] string aEntity) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::NoSupportException, ::com::sun::star::lang::IllegalArgumentException);
      ::com::sun::star::configuration::backend::XLayer getLayer([in] string aLayerId, [in] string aTimestamp) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
      sequence< ::com::sun::star::configuration::backend::XLayer > getLayers([in] sequence< string > aLayerIds, [in] string aTimestamp) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
      sequence< ::com::sun::star::configuration::backend::XLayer > getMultipleLayers([in] sequence< string > aLayerIds, [in] sequence< string > aTimestamps) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
      ::com::sun::star::configuration::backend::XUpdatableLayer getUpdatableLayer([in] string aLayerId) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::NoSupportException, ::com::sun::star::lang::IllegalArgumentException);
     };
     published service SingleBackend {
      interface ::com::sun::star::configuration::backend::XSchemaSupplier;
      interface ::com::sun::star::configuration::backend::XMultiLayerStratum;
      interface ::com::sun::star::configuration::backend::XBackendEntities;
     };
     published service LdapSingleBackend {
      service ::com::sun::star::configuration::backend::SingleBackend;
     };
     published interface XUpdatableLayer;
     published interface XSingleLayerStratum {
      interface ::com::sun::star::uno::XInterface;
      ::com::sun::star::configuration::backend::XLayer getLayer([in] string aComponent, [in] string aTimestamp) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException);
      ::com::sun::star::configuration::backend::XUpdatableLayer getUpdatableLayer([in] string aComponent) raises (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::NoSupportException, ::com::sun::star::lang::IllegalArgumentException);
     };
     published service LocalDataImporter {
      service ::com::sun::star::configuration::backend::DataImporter;
     };
     published service LocalHierarchyBrowser {
      service ::com::sun::star::configuration::backend::HierarchyBrowser;
     };
     published service LocalSingleBackend {
      service ::com::sun::star::configuration::backend::SingleBackend;
     };
     published service MergeImporter {
      service ::com::sun::star::configuration::backend::Importer;
     };
     published constants NodeAttribute {
      const short FINALIZED = 256;
      const short FUSE = 2048;
      const short MANDATORY = 512;
      const short MASK = 32512;
      const short READONLY = 1024;
     };
     published service OfflineBackend {
      service ::com::sun::star::configuration::backend::BackendAdapter;
     };
     published service OnlineBackend {
      service ::com::sun::star::configuration::backend::BackendAdapter;
     };
     published interface XSchemaHandler;
     published interface XSchema {
      interface ::com::sun::star::uno::XInterface;
      void readSchema([in] ::com::sun::star::configuration::backend::XSchemaHandler aHandler) raises (::com::sun::star::lang::NullPointerException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::configuration::backend::MalformedDataException);
      void readComponent([in] ::com::sun::star::configuration::backend::XSchemaHandler aHandler) raises (::com::sun::star::lang::NullPointerException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::configuration::backend::MalformedDataException);
      void readTemplates([in] ::com::sun::star::configuration::backend::XSchemaHandler aHandler) raises (::com::sun::star::lang::NullPointerException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::configuration::backend::MalformedDataException);
     };
     published service Schema {
      interface ::com::sun::star::configuration::backend::XSchema;
      [property, optional, readonly] string URL;
     };
     published constants SchemaAttribute {
      const short EXTENSIBLE = 4;
      const short LOCALIZED = 2;
      const short MASK = 255;
      const short REQUIRED = 1;
     };
     published service SingleBackendAdapter {
      service ::com::sun::star::configuration::backend::BackendAdapter;
     };
     published interface XUpdatableLayer {
      interface ::com::sun::star::configuration::backend::XLayer;
      void replaceWith([in] ::com::sun::star::configuration::backend::XLayer aNewLayer) raises (::com::sun::star::lang::NullPointerException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::configuration::backend::MalformedDataException);
     };
     published service UpdatableLayer {
      service ::com::sun::star::configuration::backend::Layer;
      interface ::com::sun::star::configuration::backend::XUpdatableLayer;
     };
     published interface XLayerHandler {
      interface ::com::sun::star::uno::XInterface;
      void startLayer() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endLayer() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void overrideNode([in] string aName, [in] short aAttributes, [in] boolean bClear) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addOrReplaceNode([in] string aName, [in] short aAttributes) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addOrReplaceNodeFromTemplate([in] string aName, [in] ::com::sun::star::configuration::backend::TemplateIdentifier aTemplate, [in] short aAttributes) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endNode() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void dropNode([in] string aName) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void overrideProperty([in] string aName, [in] short aAttributes, [in] type aType, [in] boolean bClear) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void setPropertyValue([in] any aValue) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void setPropertyValueForLocale([in] any aValue, [in] string aLocale) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endProperty() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addProperty([in] string aName, [in] short aAttributes, [in] type aType) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addPropertyWithValue([in] string aName, [in] short aAttributes, [in] any aValue) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
     };
     published interface XSchemaHandler {
      interface ::com::sun::star::uno::XInterface;
      void startSchema() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endSchema() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void importComponent([in] string aName) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void startComponent([in] string aName) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endComponent() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void startGroupTemplate([in] ::com::sun::star::configuration::backend::TemplateIdentifier aTemplate, [in] short aAttributes) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void startSetTemplate([in] ::com::sun::star::configuration::backend::TemplateIdentifier aTemplate, [in] short aAttributes, [in] ::com::sun::star::configuration::backend::TemplateIdentifier aItemType) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endTemplate() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void startGroup([in] string aName, [in] short aAttributes) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void startSet([in] string aName, [in] short aAttributes, [in] ::com::sun::star::configuration::backend::TemplateIdentifier aItemType) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void endNode() raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addProperty([in] string aName, [in] short aAttributes, [in] type aType) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addPropertyWithDefault([in] string aName, [in] short aAttributes, [in] any aDefaultValue) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addInstance([in] string aName, [in] ::com::sun::star::configuration::backend::TemplateIdentifier aTemplate) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
      void addItemType([in] ::com::sun::star::configuration::backend::TemplateIdentifier aItemType) raises (::com::sun::star::configuration::backend::MalformedDataException, ::com::sun::star::lang::WrappedTargetException);
     };
     module xml {
      published service LayerParser {
       interface ::com::sun::star::configuration::backend::XLayer;
       interface ::com::sun::star::io::XActiveDataSink;
       interface ::com::sun::star::lang::XInitialization;
      };
      published service LayerWriter {
       interface ::com::sun::star::configuration::backend::XLayerHandler;
       interface ::com::sun::star::io::XActiveDataSource;
       interface ::com::sun::star::lang::XInitialization;
      };
      published service SchemaParser {
       interface ::com::sun::star::configuration::backend::XSchema;
       interface ::com::sun::star::io::XActiveDataSink;
       interface ::com::sun::star::lang::XInitialization;
      };
     };
    };
    module bootstrap {
     /** @deprecated */ published service BootstrapContext {
      interface ::com::sun::star::uno::XComponentContext;
     };
    };
    published singleton theDefaultProvider: ::com::sun::star::lang::XMultiServiceFactory;
   };
   module ui {
    module dialogs {
     published interface XExecutableDialog {
      interface ::com::sun::star::uno::XInterface;
      void setTitle([in] string aTitle);
      short execute();
     };
    };
   };
   module datatransfer {
    published struct DataFlavor {
     string MimeType;
     string HumanPresentableName;
     type DataType;
    };
    published interface XDataFormatTranslator {
     interface ::com::sun::star::uno::XInterface;
     any getSystemDataTypeFromDataFlavor([in] ::com::sun::star::datatransfer::DataFlavor aDataFlavor);
     ::com::sun::star::datatransfer::DataFlavor getDataFlavorFromSystemDataType([in] any aSysDataType);
    };
    published service DataFormatTranslator: ::com::sun::star::datatransfer::XDataFormatTranslator;
    published interface XMimeContentType;
    published interface XMimeContentTypeFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::datatransfer::XMimeContentType createMimeContentType([in] string aContentType) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service MimeContentTypeFactory: ::com::sun::star::datatransfer::XMimeContentTypeFactory;
    published exception UnsupportedFlavorException: ::com::sun::star::uno::Exception {
    };
    published interface XMimeContentType {
     interface ::com::sun::star::uno::XInterface;
     string getMediaType();
     string getMediaSubtype();
     string getFullMediaType();
     sequence< string > getParameters();
     boolean hasParameter([in] string aName);
     string getParameterValue([in] string aName) raises (::com::sun::star::container::NoSuchElementException);
    };
    published interface XSystemTransferable {
     interface ::com::sun::star::uno::XInterface;
     any getData([in] sequence< byte > aProcessId);
    };
    published interface XTransferDataAccess {
     interface ::com::sun::star::uno::XInterface;
     hyper queryDataSize([in] sequence< ::com::sun::star::datatransfer::DataFlavor > aFlavorList);
     sequence< any > getData([in] sequence< ::com::sun::star::datatransfer::DataFlavor > aFlavorList);
    };
    published interface XTransferable {
     interface ::com::sun::star::uno::XInterface;
     any getTransferData([in] ::com::sun::star::datatransfer::DataFlavor aFlavor) raises (::com::sun::star::datatransfer::UnsupportedFlavorException, ::com::sun::star::io::IOException);
     sequence< ::com::sun::star::datatransfer::DataFlavor > getTransferDataFlavors();
     boolean isDataFlavorSupported([in] ::com::sun::star::datatransfer::DataFlavor aFlavor);
    };
    published interface XTransferableEx {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::datatransfer::DataFlavor > queryTransferDataFlavors([in] sequence< ::com::sun::star::datatransfer::DataFlavor > requestedFlavors);
    };
    published interface XTransferableSource {
     interface ::com::sun::star::uno::XInterface;
     string getDataSourceDescription();
    };
    interface XTransferableSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::datatransfer::XTransferable getTransferable();
     void insertTransferable([in] ::com::sun::star::datatransfer::XTransferable xTrans) raises (::com::sun::star::datatransfer::UnsupportedFlavorException);
    };
    module clipboard {
     published struct ClipboardEvent: ::com::sun::star::lang::EventObject {
      ::com::sun::star::datatransfer::XTransferable Contents;
     };
     published interface XClipboard;
     published interface XClipboardManager {
      interface ::com::sun::star::uno::XInterface;
      ::com::sun::star::datatransfer::clipboard::XClipboard getClipboard([in] string aName) raises (::com::sun::star::container::NoSuchElementException);
      void addClipboard([in] ::com::sun::star::datatransfer::clipboard::XClipboard xClipboard) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException);
      void removeClipboard([in] string aName);
      sequence< string > listClipboardNames();
     };
     published service ClipboardManager {
      interface ::com::sun::star::datatransfer::clipboard::XClipboardManager;
      interface ::com::sun::star::lang::XComponent;
     };
     published interface XClipboardOwner;
     published interface XClipboard {
      interface ::com::sun::star::uno::XInterface;
      ::com::sun::star::datatransfer::XTransferable getContents();
      void setContents([in] ::com::sun::star::datatransfer::XTransferable xTrans, [in] ::com::sun::star::datatransfer::clipboard::XClipboardOwner xClipboardOwner);
      string getName();
     };
     published interface XClipboardEx {
      interface ::com::sun::star::datatransfer::clipboard::XClipboard;
      byte getRenderingCapabilities();
     };
     published interface XClipboardListener;
     published interface XClipboardNotifier {
      interface ::com::sun::star::uno::XInterface;
      void addClipboardListener([in] ::com::sun::star::datatransfer::clipboard::XClipboardListener listener);
      void removeClipboardListener([in] ::com::sun::star::datatransfer::clipboard::XClipboardListener listener);
     };
     published service GenericClipboard {
      interface ::com::sun::star::datatransfer::clipboard::XClipboardEx;
      interface ::com::sun::star::datatransfer::clipboard::XClipboardNotifier;
      interface ::com::sun::star::lang::XInitialization;
      interface ::com::sun::star::lang::XComponent;
     };
     published constants RenderingCapabilities {
      const byte Delayed = 1;
      const byte Persistant = 2;
     };
     published interface XFlushableClipboard {
      interface ::com::sun::star::uno::XInterface;
      void flushClipboard();
     };
     published interface XSystemClipboard {
      interface ::com::sun::star::datatransfer::clipboard::XClipboardEx;
      interface ::com::sun::star::datatransfer::clipboard::XClipboardNotifier;
      interface ::com::sun::star::lang::XComponent;
      [optional] interface ::com::sun::star::datatransfer::clipboard::XFlushableClipboard;
     };
     published service SystemClipboard: ::com::sun::star::datatransfer::clipboard::XSystemClipboard;
     published interface XClipboardFactory {
      interface ::com::sun::star::uno::XInterface;
      ::com::sun::star::datatransfer::clipboard::XClipboard createClipboard([in] string aName) raises (::com::sun::star::lang::IllegalArgumentException);
     };
     published interface XClipboardListener {
      interface ::com::sun::star::lang::XEventListener;
      void changedContents([in] ::com::sun::star::datatransfer::clipboard::ClipboardEvent event);
     };
     published interface XClipboardOwner {
      interface ::com::sun::star::uno::XInterface;
      void lostOwnership([in] ::com::sun::star::datatransfer::clipboard::XClipboard xClipboard, [in] ::com::sun::star::datatransfer::XTransferable xTrans);
     };
    };
    module dnd {
     published constants DNDConstants {
      const byte ACTION_COPY = 1;
      const byte ACTION_COPY_OR_MOVE = 3;
      const byte ACTION_DEFAULT = -128;
      const byte ACTION_LINK = 4;
      const byte ACTION_MOVE = 2;
      const byte ACTION_NONE = 0;
      const byte ACTION_REFERENCE = 4;
     };
     published interface XDragSource;
     published struct DragGestureEvent: ::com::sun::star::lang::EventObject {
      byte DragAction;
      long DragOriginX;
      long DragOriginY;
      ::com::sun::star::datatransfer::dnd::XDragSource DragSource;
      any Event;
     };
     published interface XDragSource;
     published interface XDragSourceContext;
     published struct DragSourceEvent: ::com::sun::star::lang::EventObject {
      ::com::sun::star::datatransfer::dnd::XDragSourceContext DragSourceContext;
      ::com::sun::star::datatransfer::dnd::XDragSource DragSource;
     };
     published struct DragSourceDragEvent: ::com::sun::star::datatransfer::dnd::DragSourceEvent {
      byte DropAction;
      byte UserAction;
     };
     published struct DragSourceDropEvent: ::com::sun::star::datatransfer::dnd::DragSourceEvent {
      byte DropAction;
      boolean DropSuccess;
     };
     published struct DropTargetEvent: ::com::sun::star::lang::EventObject {
      byte Dummy;
     };
     published interface XDropTargetDragContext;
     published struct DropTargetDragEvent: ::com::sun::star::datatransfer::dnd::DropTargetEvent {
      ::com::sun::star::datatransfer::dnd::XDropTargetDragContext Context;
      byte DropAction;
      long LocationX;
      long LocationY;
      byte SourceActions;
     };
     published struct DropTargetDragEnterEvent: ::com::sun::star::datatransfer::dnd::DropTargetDragEvent {
      sequence< ::com::sun::star::datatransfer::DataFlavor > SupportedDataFlavors;
     };
     published interface XDropTargetDropContext;
     published struct DropTargetDropEvent: ::com::sun::star::datatransfer::dnd::DropTargetEvent {
      ::com::sun::star::datatransfer::dnd::XDropTargetDropContext Context;
      byte DropAction;
      long LocationX;
      long LocationY;
      byte SourceActions;
      ::com::sun::star::datatransfer::XTransferable Transferable;
     };
     published exception InvalidDNDOperationException: ::com::sun::star::uno::RuntimeException {
     };
     published interface XDragSourceListener;
     published interface XDragSource {
      interface ::com::sun::star::uno::XInterface;
      boolean isDragImageSupported();
      long getDefaultCursor([in] byte dragAction) raises (::com::sun::star::lang::IllegalArgumentException);
      void startDrag([in] ::com::sun::star::datatransfer::dnd::DragGestureEvent trigger, [in] byte sourceActions, [in] long cursor, [in] long image, [in] ::com::sun::star::datatransfer::XTransferable trans, [in] ::com::sun::star::datatransfer::dnd::XDragSourceListener listener);
     };
     published service OleDragSource {
      interface ::com::sun::star::datatransfer::dnd::XDragSource;
      interface ::com::sun::star::lang::XInitialization;
      interface ::com::sun::star::lang::XComponent;
     };
     published interface XDropTargetListener;
     published interface XDropTarget {
      interface ::com::sun::star::uno::XInterface;
      void addDropTargetListener([in] ::com::sun::star::datatransfer::dnd::XDropTargetListener dtl);
      void removeDropTargetListener([in] ::com::sun::star::datatransfer::dnd::XDropTargetListener dtl);
      boolean isActive();
      void setActive([in] boolean active);
      byte getDefaultActions();
      void setDefaultActions([in] byte actions);
     };
     published service OleDropTarget {
      interface ::com::sun::star::datatransfer::dnd::XDropTarget;
      interface ::com::sun::star::lang::XInitialization;
      interface ::com::sun::star::lang::XComponent;
     };
     published service X11DragSource {
      interface ::com::sun::star::datatransfer::dnd::XDragSource;
      interface ::com::sun::star::lang::XInitialization;
      interface ::com::sun::star::lang::XComponent;
     };
     published service X11DropTarget {
      interface ::com::sun::star::datatransfer::dnd::XDropTarget;
      interface ::com::sun::star::lang::XInitialization;
      interface ::com::sun::star::lang::XComponent;
     };
     published interface XAutoscroll {
      interface ::com::sun::star::uno::XInterface;
      void autoscroll([in] long cursorLocationX, [in] long cursorLocationY);
      any getAutoscrollRegion();
     };
     published interface XDragGestureListener {
      interface ::com::sun::star::lang::XEventListener;
      void dragGestureRecognized([in] ::com::sun::star::datatransfer::dnd::DragGestureEvent dge);
     };
     published interface XDragGestureRecognizer {
      interface ::com::sun::star::uno::XInterface;
      void addDragGestureListener([in] ::com::sun::star::datatransfer::dnd::XDragGestureListener dgl);
      void removeDragGestureListener([in] ::com::sun::star::datatransfer::dnd::XDragGestureListener dgl);
      void resetRecognizer();
     };
     published interface XDragSourceContext {
      interface ::com::sun::star::uno::XInterface;
      long getCurrentCursor();
      void setCursor([in] long cursorId);
      void setImage([in] long imageId);
      void transferablesFlavorsChanged();
     };
     published interface XDragSourceListener {
      interface ::com::sun::star::lang::XEventListener;
      void dragDropEnd([in] ::com::sun::star::datatransfer::dnd::DragSourceDropEvent dsde);
      void dragEnter([in] ::com::sun::star::datatransfer::dnd::DragSourceDragEvent dsde);
      void dragExit([in] ::com::sun::star::datatransfer::dnd::DragSourceEvent dse);
      void dragOver([in] ::com::sun::star::datatransfer::dnd::DragSourceDragEvent dsde);
      void dropActionChanged([in] ::com::sun::star::datatransfer::dnd::DragSourceDragEvent dsde);
     };
     published interface XDropTargetDragContext {
      interface ::com::sun::star::uno::XInterface;
      void acceptDrag([in] byte dragOperation);
      void rejectDrag();
     };
     published interface XDropTargetDropContext {
      interface ::com::sun::star::uno::XInterface;
      void acceptDrop([in] byte dragOperation);
      void rejectDrop();
      void dropComplete([in] boolean success);
     };
     published interface XDropTargetListener {
      interface ::com::sun::star::lang::XEventListener;
      void drop([in] ::com::sun::star::datatransfer::dnd::DropTargetDropEvent dtde);
      void dragEnter([in] ::com::sun::star::datatransfer::dnd::DropTargetDragEnterEvent dtdee);
      void dragExit([in] ::com::sun::star::datatransfer::dnd::DropTargetEvent dte);
      void dragOver([in] ::com::sun::star::datatransfer::dnd::DropTargetDragEvent dtde);
      void dropActionChanged([in] ::com::sun::star::datatransfer::dnd::DropTargetDragEvent dtde);
     };
    };
   };
   module ucb {
    published exception CommandAbortedException: ::com::sun::star::uno::Exception {
    };
    published exception CommandFailedException: ::com::sun::star::uno::Exception {
     any Reason;
    };
    published enum ContentCreationError {
     UNKNOWN = 0,
     /** @deprecated */ NO_CONTENT_BROKER = 1,
     /** @deprecated */ NO_IDENTIFIER_FACTORY = 2,
     IDENTIFIER_CREATION_FAILED = 3,
     NO_CONTENT_PROVIDER = 4,
     CONTENT_CREATION_FAILED = 5
    };
    published exception ContentCreationException: ::com::sun::star::uno::Exception {
     ::com::sun::star::ucb::ContentCreationError eError;
    };
    published interface XProgressHandler;
    published interface XCommandEnvironment {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::task::XInteractionHandler getInteractionHandler();
     ::com::sun::star::ucb::XProgressHandler getProgressHandler();
    };
   };
   module document {
    published exception AmbigousFilterRequest: ::com::sun::star::uno::Exception {
     string URL;
     string SelectedFilter;
     string DetectedFilter;
    };
    published exception BrokenPackageRequest: ::com::sun::star::uno::Exception {
     string aName;
    };
    published exception ChangedByOthersRequest: ::com::sun::star::uno::Exception {
    };
    published exception CorruptedFilterConfigurationException: ::com::sun::star::uno::RuntimeException {
     string Details;
    };
   };
   module embed {
    published interface XStorage;
   };
   module document {
    published interface XDocumentProperties {
     interface ::com::sun::star::uno::XInterface;
     [attribute] string Author;
     [attribute] string Generator;
     [attribute] ::com::sun::star::util::DateTime CreationDate;
     [attribute] string Title;
     [attribute] string Subject;
     [attribute] string Description;
     [attribute] sequence< string > Keywords;
     [attribute] ::com::sun::star::lang::Locale Language;
     [attribute] string ModifiedBy;
     [attribute] ::com::sun::star::util::DateTime ModificationDate;
     [attribute] string PrintedBy;
     [attribute] ::com::sun::star::util::DateTime PrintDate;
     [attribute] string TemplateName;
     [attribute] string TemplateURL;
     [attribute] ::com::sun::star::util::DateTime TemplateDate;
     [attribute] string AutoloadURL;
     [attribute] long AutoloadSecs {
      set raises (::com::sun::star::lang::IllegalArgumentException);
 };
     [attribute] string DefaultTarget;
     [attribute] sequence< ::com::sun::star::beans::NamedValue > DocumentStatistics;
     [attribute] short EditingCycles {
      set raises (::com::sun::star::lang::IllegalArgumentException);
 };
     [attribute] long EditingDuration {
      set raises (::com::sun::star::lang::IllegalArgumentException);
 };
     void resetUserData([in] string Author);
     ::com::sun::star::beans::XPropertyContainer getUserDefinedProperties();
     void loadFromStorage([in] ::com::sun::star::embed::XStorage Storage, [in] sequence< ::com::sun::star::beans::PropertyValue > Medium) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::WrongFormatException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::io::IOException);
     void loadFromMedium([in] string URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Medium) raises (::com::sun::star::io::WrongFormatException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::io::IOException);
     void storeToStorage([in] ::com::sun::star::embed::XStorage Storage, [in] sequence< ::com::sun::star::beans::PropertyValue > Medium) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::io::IOException);
     void storeToMedium([in] string URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Medium) raises (::com::sun::star::lang::WrappedTargetException, ::com::sun::star::io::IOException);
    };
    published service DocumentProperties: ::com::sun::star::document::XDocumentProperties {
     create();
    };
    published service EventDescriptor {
     [property] string EventType;
     [property] string Script;
    };
    /** @deprecated */ published struct EventObject: ::com::sun::star::lang::EventObject {
     string EventName;
    };
    published service Events {
     interface ::com::sun::star::container::XNameReplace;
    };
    published interface XExporter {
     interface ::com::sun::star::uno::XInterface;
     void setSourceDocument([in] ::com::sun::star::lang::XComponent Document) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XFilter {
     interface ::com::sun::star::uno::XInterface;
     boolean filter([in] sequence< ::com::sun::star::beans::PropertyValue > aDescriptor);
     void cancel();
    };
    published service ExportFilter {
     interface ::com::sun::star::document::XExporter;
     interface ::com::sun::star::document::XFilter;
     [optional] interface ::com::sun::star::lang::XInitialization;
     [optional] interface ::com::sun::star::container::XNamed;
    };
    published interface XExtendedFilterDetection {
     interface ::com::sun::star::uno::XInterface;
     string detect([inout] sequence< ::com::sun::star::beans::PropertyValue > Descriptor);
    };
    published service ExtendedTypeDetection {
     interface ::com::sun::star::document::XExtendedFilterDetection;
    };
    published service ExtendedTypeDetectionFactory {
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::container::XNameAccess;
     [optional] interface ::com::sun::star::container::XNameContainer;
     [optional] interface ::com::sun::star::container::XContainerQuery;
     [optional] interface ::com::sun::star::util::XFlushable;
    };
    published interface XFilterAdapter {
     interface ::com::sun::star::uno::XInterface;
     void convert([in] ::com::sun::star::io::XInputStream xml, [in] ::com::sun::star::io::XOutputStream device, [in] boolean convertToOffice, [in] string pluginUrl, [in] string fileName);
    };
    published service FilterAdapter {
     interface ::com::sun::star::document::XFilterAdapter;
    };
    published service FilterFactory {
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XContainerQuery;
     [optional] interface ::com::sun::star::container::XNameContainer;
     [optional] interface ::com::sun::star::util::XFlushable;
    };
    published exception FilterOptionsRequest: ::com::sun::star::uno::Exception {
     ::com::sun::star::frame::XModel rModel;
     sequence< ::com::sun::star::beans::PropertyValue > rProperties;
    };
    published interface XGraphicObjectResolver {
     interface ::com::sun::star::uno::XInterface;
     string resolveGraphicObjectURL([in] string aURL);
    };
    published service HeaderFooterSettings {
     interface ::com::sun::star::beans::XPropertySet;
     [property, optional] boolean IsPrintPageName;
     [property, optional] boolean IsPrintDate;
     [property, optional] boolean IsPrintTime;
    };
    published interface XImporter {
     interface ::com::sun::star::uno::XInterface;
     void setTargetDocument([in] ::com::sun::star::lang::XComponent Document) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service ImportFilter {
     interface ::com::sun::star::document::XImporter;
     interface ::com::sun::star::document::XFilter;
     [optional] interface ::com::sun::star::lang::XInitialization;
     [optional] interface ::com::sun::star::container::XNamed;
    };
    published interface XLinkTargetSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getLinks();
    };
    published service LinkTarget {
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::document::XLinkTargetSupplier;
     [property, readonly] string LinkDisplayName;
    };
    published service LinkTargets {
     interface ::com::sun::star::container::XNameAccess;
    };
    published constants LinkUpdateModes {
     const long AUTO = 2;
     const long GLOBAL_SETTING = 3;
     const long MANUAL = 1;
     const long NEVER = 0;
    };
    published exception LockFileIgnoreRequest: ::com::sun::star::io::IOException {
    };
    published exception LockedDocumentRequest: ::com::sun::star::uno::Exception {
     string DocumentURL;
     string UserInfo;
    };
    published exception LockedOnSavingRequest: ::com::sun::star::uno::Exception {
     string DocumentURL;
     string UserInfo;
    };
    published constants MacroExecMode {
     const short ALWAYS_EXECUTE = 2;
     const short ALWAYS_EXECUTE_NO_WARN = 4;
     const short FROM_LIST = 1;
     const short FROM_LIST_AND_SIGNED_NO_WARN = 9;
     const short FROM_LIST_AND_SIGNED_WARN = 8;
     const short FROM_LIST_NO_WARN = 7;
     const short NEVER_EXECUTE = 0;
     const short USE_CONFIG = 3;
     const short USE_CONFIG_APPROVE_CONFIRMATION = 6;
     const short USE_CONFIG_REJECT_CONFIRMATION = 5;
    };
    published exception NoSuchFilterRequest: ::com::sun::star::uno::Exception {
     string URL;
    };
   };
   module xml {
    module sax {
     published exception SAXException: ::com::sun::star::uno::Exception {
      any WrappedException;
     };
    };
   };
   module document {
    interface XDocumentEventListener;
   };
   module frame {
    interface XController2;
   };
   module document {
    interface XDocumentEventBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addDocumentEventListener([in] ::com::sun::star::document::XDocumentEventListener Listener);
     void removeDocumentEventListener([in] ::com::sun::star::document::XDocumentEventListener Listener);
     void notifyDocumentEvent([in] string EventName, [in] ::com::sun::star::frame::XController2 ViewController, [in] any Supplement) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::NoSupportException);
    };
    published interface XDocumentPropertiesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::document::XDocumentProperties getDocumentProperties();
    };
   };
   module script {
    interface XStorageBasedLibraryContainer;
   };
   module document {
    interface XEmbeddedScripts {
     interface ::com::sun::star::uno::XInterface;
     [attribute, readonly] ::com::sun::star::script::XStorageBasedLibraryContainer BasicLibraries;
     [attribute, readonly] ::com::sun::star::script::XStorageBasedLibraryContainer DialogLibraries;
     [attribute, readonly] boolean AllowMacroExecution;
    };
    published interface XEventListener;
    /** @deprecated */ published interface XEventBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addEventListener([in] ::com::sun::star::document::XEventListener Listener);
     void removeEventListener([in] ::com::sun::star::document::XEventListener Listener);
    };
    published interface XEventsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameReplace getEvents();
    };
    interface XUndoManager;
    interface XUndoManagerSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::document::XUndoManager getUndoManager();
    };
    published interface XViewDataSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getViewData();
     void setViewData([in] ::com::sun::star::container::XIndexAccess Data);
    };
   };
   module frame {
    published interface XStorable {
     interface ::com::sun::star::uno::XInterface;
     boolean hasLocation();
     string getLocation();
     boolean isReadonly();
     void store() raises (::com::sun::star::io::IOException);
     void storeAsURL([in] string sURL, [in] sequence< ::com::sun::star::beans::PropertyValue > lArguments) raises (::com::sun::star::io::IOException);
     void storeToURL([in] string sURL, [in] sequence< ::com::sun::star::beans::PropertyValue > lArguments) raises (::com::sun::star::io::IOException);
    };
   };
   module util {
    published interface XModifiable {
     interface ::com::sun::star::util::XModifyBroadcaster;
     boolean isModified();
     void setModified([in] boolean bModified) raises (::com::sun::star::beans::PropertyVetoException);
    };
   };
   module view {
    published interface XPrintJobListener;
    published interface XPrintJobBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addPrintJobListener([in] ::com::sun::star::view::XPrintJobListener xListener);
     void removePrintJobListener([in] ::com::sun::star::view::XPrintJobListener xListener);
    };
    published interface XPrintable {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::beans::PropertyValue > getPrinter();
     void setPrinter([in] sequence< ::com::sun::star::beans::PropertyValue > aPrinter) raises (::com::sun::star::lang::IllegalArgumentException);
     void print([in] sequence< ::com::sun::star::beans::PropertyValue > xOptions) raises (::com::sun::star::lang::IllegalArgumentException);
    };
   };
   module document {
    published service OfficeDocument {
     interface ::com::sun::star::frame::XModel;
     interface ::com::sun::star::util::XModifiable;
     interface ::com::sun::star::frame::XStorable;
     interface ::com::sun::star::view::XPrintable;
     /** @deprecated */ [optional] interface ::com::sun::star::document::XEventBroadcaster;
     [optional] interface ::com::sun::star::document::XDocumentEventBroadcaster;
     [optional] interface ::com::sun::star::document::XEventsSupplier;
     [optional] interface ::com::sun::star::document::XViewDataSupplier;
     [optional] interface ::com::sun::star::view::XPrintJobBroadcaster;
     [optional] interface ::com::sun::star::document::XEmbeddedScripts;
     [optional] interface ::com::sun::star::document::XDocumentPropertiesSupplier;
     [optional] interface ::com::sun::star::document::XUndoManagerSupplier;
     [property, optional] boolean AutomaticControlFocus;
     [property, optional] boolean ApplyFormDesignMode;
     [property, optional, readonly] string RuntimeUID;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > InteropGrabBag;
    };
    published service OleEmbeddedServerRegistration: ::com::sun::star::uno::XInterface;
    published exception OwnLockOnDocumentRequest: ::com::sun::star::uno::Exception {
     string DocumentURL;
     string TimeInfo;
     boolean IsStoring;
    };
   };
   module ui {
    module dialogs {
     published service FilterOptionsDialog {
      interface ::com::sun::star::beans::XPropertyAccess;
      interface ::com::sun::star::ui::dialogs::XExecutableDialog;
     };
    };
   };
   module document {
    published constants PrinterIndependentLayout {
     const short DISABLED = 1;
     /** @deprecated */ const short ENABLED = 2;
     const short HIGH_RESOLUTION = 3;
     const short LOW_RESOLUTION = 2;
    };
    published constants RedlineDisplayType {
     const short INSERTED = 1;
     const short INSERTED_AND_REMOVED = 2;
     const short NONE = 0;
     const short REMOVED = 3;
    };
   };
   module i18n {
    published interface XForbiddenCharacters;
   };
   module document {
    published service Settings {
     interface ::com::sun::star::beans::XPropertySet;
     [property, optional] ::com::sun::star::i18n::XForbiddenCharacters ForbiddenCharacters;
     [property, optional] short LinkUpdateMode;
     [property] string PrinterName;
     [property] sequence< byte > PrinterSetup;
     [property, optional] boolean IsKernAsianPunctuation;
     [property, optional] short CharacterCompressionType;
     [property, optional] boolean ApplyUserData;
     [property, optional] boolean SaveVersionOnClose;
     [property, optional] boolean UpdateFromTemplate;
     [property, optional] boolean FieldAutoUpdate;
     [property, optional] string CurrentDatabaseDataSource;
     [property, optional] string CurrentDatabaseCommand;
     [property, optional] long CurrentDatabaseCommandType;
     [property, optional] long DefaultTabStop;
     [property, optional] boolean IsPrintBooklet;
     [property, optional] boolean IsPrintBookletFront;
     [property, optional] boolean IsPrintBookletBack;
     [property, optional] long PrintQuality;
     [property, optional] string ColorTableURL;
     [property, optional] string DashTableURL;
     [property, optional] string LineEndTableURL;
     [property, optional] string HatchTableURL;
     [property, optional] string GradientTableURL;
     [property, optional] string BitmapTableURL;
     [property, optional] boolean AutoCalculate;
     [property, optional] short PrinterIndependentLayout;
     [property, optional] boolean AddExternalLeading;
     [property, optional] boolean EmbedFonts;
     [property, optional] boolean EmbedSystemFonts;
    };
    published interface XTypeDetection {
     interface ::com::sun::star::uno::XInterface;
     string queryTypeByURL([in] string URL);
     string queryTypeByDescriptor([inout] sequence< ::com::sun::star::beans::PropertyValue > Descriptor, [in] boolean AllowDeep);
    };
    published service TypeDetection {
     interface ::com::sun::star::document::XTypeDetection;
     interface ::com::sun::star::container::XNameAccess;
     [optional] interface ::com::sun::star::container::XNameContainer;
     [optional] interface ::com::sun::star::container::XContainerQuery;
     [optional] interface ::com::sun::star::util::XFlushable;
    };
    published constants UpdateDocMode {
     const short ACCORDING_TO_CONFIG = 2;
     const short FULL_UPDATE = 3;
     const short NO_UPDATE = 0;
     const short QUIET_UPDATE = 1;
    };
    published interface XActionLockable {
     interface ::com::sun::star::uno::XInterface;
     boolean isActionLocked();
     void addActionLock();
     void removeActionLock();
     void setActionLocks([in] short nLock);
     short resetActionLocks();
    };
    published interface XBinaryStreamResolver {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::io::XInputStream getInputStream([in] string aURL);
     ::com::sun::star::io::XOutputStream createOutputStream();
     string resolveOutputStream([in] ::com::sun::star::io::XOutputStream aBinaryStream);
    };
    published interface XDocumentInsertable {
     interface ::com::sun::star::uno::XInterface;
     void insertDocumentFromURL([in] string aURL, [in] sequence< ::com::sun::star::beans::PropertyValue > aOptions) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException);
    };
    published interface XEmbeddedObjectResolver {
     interface ::com::sun::star::uno::XInterface;
     string resolveEmbeddedObjectURL([in] string aURL);
    };
    published interface XEmbeddedObjectSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::lang::XComponent getEmbeddedObject();
    };
    /** @deprecated */ published interface XEventListener {
     interface ::com::sun::star::lang::XEventListener;
     void notifyEvent([in] ::com::sun::star::document::EventObject Event);
    };
    published interface XInteractionFilterOptions {
     interface ::com::sun::star::task::XInteractionContinuation;
     void setFilterOptions([in] sequence< ::com::sun::star::beans::PropertyValue > rProperties);
     sequence< ::com::sun::star::beans::PropertyValue > getFilterOptions();
    };
    published interface XInteractionFilterSelect {
     interface ::com::sun::star::task::XInteractionContinuation;
     void setFilter([in] string Name);
     string getFilter();
    };
    published interface XXMLBasicExporter {
     interface ::com::sun::star::document::XExporter;
     interface ::com::sun::star::document::XFilter;
    };
   };
   module xml {
    module sax {
     published interface XDocumentHandler;
    };
   };
   module document {
    published service XMLBasicExporter: ::com::sun::star::document::XXMLBasicExporter {
     createWithHandler([in] ::com::sun::star::xml::sax::XDocumentHandler DocumentHandler);
    };
   };
   module xml {
    module sax {
     published interface XAttributeList;
     published interface XLocator;
     published interface XDocumentHandler {
      interface ::com::sun::star::uno::XInterface;
      void startDocument() raises (::com::sun::star::xml::sax::SAXException);
      void endDocument() raises (::com::sun::star::xml::sax::SAXException);
      void startElement([in] string aName, [in] ::com::sun::star::xml::sax::XAttributeList xAttribs) raises (::com::sun::star::xml::sax::SAXException);
      void endElement([in] string aName) raises (::com::sun::star::xml::sax::SAXException);
      void characters([in] string aChars) raises (::com::sun::star::xml::sax::SAXException);
      void ignorableWhitespace([in] string aWhitespaces) raises (::com::sun::star::xml::sax::SAXException);
      void processingInstruction([in] string aTarget, [in] string aData) raises (::com::sun::star::xml::sax::SAXException);
      void setDocumentLocator([in] ::com::sun::star::xml::sax::XLocator xLocator) raises (::com::sun::star::xml::sax::SAXException);
     };
    };
   };
   module document {
    published service XMLBasicImporter {
     interface ::com::sun::star::document::XImporter;
     interface ::com::sun::star::xml::sax::XDocumentHandler;
    };
    published service XMLOasisBasicExporter: ::com::sun::star::document::XXMLBasicExporter {
     createWithHandler([in] ::com::sun::star::xml::sax::XDocumentHandler DocumentHandler);
    };
    published interface XXMLOasisBasicImporter {
     interface ::com::sun::star::document::XImporter;
     interface ::com::sun::star::xml::sax::XDocumentHandler;
    };
    published service XMLOasisBasicImporter: ::com::sun::star::document::XXMLOasisBasicImporter;
    published interface XMimeTypeInfo {
     interface ::com::sun::star::uno::XInterface;
     boolean supportsMimeType([in] string MimeTypeName);
     sequence< string > getSupportedMimeTypeNames();
    };
    published interface XRedlinesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XEnumerationAccess getRedlines();
    };
   };
   module frame {
    published exception DoubleInitializationException: ::com::sun::star::uno::Exception {
    };
   };
   module drawing {
    published service AppletShape {
     service ::com::sun::star::drawing::Shape;
     [property] string AppletCodeBase;
     [property] string AppletName;
     [property] string AppletCode;
     [property] sequence< ::com::sun::star::beans::PropertyValue > AppletCommands;
     [property, readonly] boolean AppletIsScript;
    };
    /** @deprecated */ published enum Arrangement {
     FRONT = 0,
     MORE_FRONT = 1,
     MORE_BACK = 2,
     BACK = 3
    };
    published service Background {
     service ::com::sun::star::drawing::FillProperties;
    };
    /** @deprecated */ published struct BezierPoint {
     ::com::sun::star::awt::Point Position;
     ::com::sun::star::awt::Point ControlPoint1;
     ::com::sun::star::awt::Point ControlPoint2;
    };
    published service BitmapTable {
     interface ::com::sun::star::container::XNameContainer;
    };
    published struct Position3D {
     double PositionX;
     double PositionY;
     double PositionZ;
    };
    published struct BoundVolume {
     ::com::sun::star::drawing::Position3D min;
     ::com::sun::star::drawing::Position3D max;
    };
    published struct CameraGeometry {
     ::com::sun::star::drawing::Position3D vrp;
     ::com::sun::star::drawing::Direction3D vpn;
     ::com::sun::star::drawing::Direction3D vup;
    };
    published constants CaptionEscapeDirection {
     const short auto = 2;
     const short horizontal = 0;
     const short vertical = 1;
    };
    /** @deprecated */ published service RotationDescriptor {
     /** @deprecated */ [property] long RotateAngle;
     /** @deprecated */ [property, optional] long ShearAngle;
    };
    published service ShadowProperties {
     [property] boolean Shadow;
     [property] ::com::sun::star::util::Color ShadowColor;
     [property] short ShadowTransparence;
     [property] long ShadowXDistance;
     [property] long ShadowYDistance;
    };
    published enum TextAnimationDirection {
     LEFT = 0,
     RIGHT = 1,
     UP = 2,
     DOWN = 3
    };
    published enum TextAnimationKind {
     NONE = 0,
     BLINK = 1,
     SCROLL = 2,
     ALTERNATE = 3,
     SLIDE = 4
    };
    published enum TextFitToSizeType {
     NONE = 0,
     PROPORTIONAL = 1,
     ALLLINES = 2,
     AUTOFIT = 3
    };
    published enum TextHorizontalAdjust {
     LEFT = 0,
     CENTER = 1,
     RIGHT = 2,
     BLOCK = 3
    };
    published enum TextVerticalAdjust {
     TOP = 0,
     CENTER = 1,
     BOTTOM = 2,
     BLOCK = 3
    };
   };
   module style {
    published service ParagraphPropertiesAsian {
     [property] boolean ParaIsHangingPunctuation;
     [property] boolean ParaIsCharacterDistance;
     [property] boolean ParaIsForbiddenRules;
    };
    published service ParagraphPropertiesComplex {
     [property] short WritingMode;
    };
   };
   module text {
    /** @deprecated */ published enum WritingMode {
     LR_TB = 0,
     RL_TB = 1,
     TB_RL = 2
    };
   };
   module drawing {
    published service TextProperties {
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::ParagraphProperties;
     [optional] service ::com::sun::star::style::CharacterPropertiesAsian;
     [optional] service ::com::sun::star::style::CharacterPropertiesComplex;
     [optional] service ::com::sun::star::style::ParagraphPropertiesAsian;
     [optional] service ::com::sun::star::style::ParagraphPropertiesComplex;
     [property, optional] boolean IsNumbering;
     [property, optional] ::com::sun::star::container::XIndexReplace NumberingRules;
     [property] boolean TextAutoGrowHeight;
     [property] boolean TextAutoGrowWidth;
     [property] boolean TextContourFrame;
     [property] ::com::sun::star::drawing::TextFitToSizeType TextFitToSize;
     [property] ::com::sun::star::drawing::TextHorizontalAdjust TextHorizontalAdjust;
     [property] ::com::sun::star::drawing::TextVerticalAdjust TextVerticalAdjust;
     [property] long TextLeftDistance;
     [property] long TextRightDistance;
     [property] long TextUpperDistance;
     [property] long TextLowerDistance;
     [property] long TextMaximumFrameHeight;
     [property] long TextMaximumFrameWidth;
     [property] long TextMinimumFrameHeight;
     [property] long TextMinimumFrameWidth;
     [property] short TextAnimationAmount;
     [property] short TextAnimationCount;
     [property] short TextAnimationDelay;
     [property] ::com::sun::star::drawing::TextAnimationDirection TextAnimationDirection;
     [property] ::com::sun::star::drawing::TextAnimationKind TextAnimationKind;
     [property] boolean TextAnimationStartInside;
     [property] boolean TextAnimationStopInside;
     [property] ::com::sun::star::text::WritingMode TextWritingMode;
    };
   };
   module text {
    published interface XText;
    published interface XTextRange {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::text::XText getText();
     ::com::sun::star::text::XTextRange getStart();
     ::com::sun::star::text::XTextRange getEnd();
     string getString();
     void setString([in] string aString);
    };
    published interface XTextCursor;
    published interface XSimpleText {
     interface ::com::sun::star::text::XTextRange;
     ::com::sun::star::text::XTextCursor createTextCursor();
     ::com::sun::star::text::XTextCursor createTextCursorByRange([in] ::com::sun::star::text::XTextRange aTextPosition);
     void insertString([in] ::com::sun::star::text::XTextRange xRange, [in] string aString, [in] boolean bAbsorb);
     void insertControlCharacter([in] ::com::sun::star::text::XTextRange xRange, [in] short nControlCharacter, [in] boolean bAbsorb) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XTextContent;
    published interface XText {
     interface ::com::sun::star::text::XSimpleText;
     void insertTextContent([in] ::com::sun::star::text::XTextRange xRange, [in] ::com::sun::star::text::XTextContent xContent, [in] boolean bAbsorb) raises (::com::sun::star::lang::IllegalArgumentException);
     void removeTextContent([in] ::com::sun::star::text::XTextContent xContent) raises (::com::sun::star::container::NoSuchElementException);
    };
   };
   module drawing {
    published service Text {
     service ::com::sun::star::drawing::TextProperties;
     interface ::com::sun::star::text::XText;
    };
    published service CaptionShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::RotationDescriptor;
     [property] long CornerRadius;
     [property] ::com::sun::star::awt::Point CaptionPoint;
     [property] short CaptionType;
     [property] boolean CaptionIsFixedAngle;
     [property] long CaptionAngle;
     [property] long CaptionGap;
     [property] long CaptionEscapeDirection;
     [property] boolean CaptionIsEscapeRelative;
     [property] long CaptionEscapeRelative;
     [property] long CaptionEscapeAbsolute;
     [property] long CaptionLineLength;
     [property] boolean CaptionIsFitLineLength;
    };
    published constants CaptionType {
     const short angled = 1;
     const short connector = 2;
     const short straight = 0;
    };
    published enum CircleKind {
     FULL = 0,
     SECTION = 1,
     CUT = 2,
     ARC = 3
    };
    published enum PolygonKind {
     LINE = 0,
     POLY = 1,
     PLIN = 2,
     PATHLINE = 3,
     PATHFILL = 4,
     FREELINE = 5,
     FREEFILL = 6,
     PATHPOLY = 7,
     PATHPLIN = 8
    };
    published service PolyPolygonBezierDescriptor {
     [property, readonly] ::com::sun::star::drawing::PolygonKind PolygonKind;
     [property] ::com::sun::star::drawing::PolyPolygonBezierCoords PolyPolygonBezier;
     [property] ::com::sun::star::drawing::PolyPolygonBezierCoords Geometry;
    };
    published service ClosedBezierShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::PolyPolygonBezierDescriptor;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
    };
    published enum ColorMode {
     STANDARD = 0,
     GREYS = 1,
     MONO = 2,
     WATERMARK = 3
    };
    published service ColorTable: ::com::sun::star::container::XNameContainer;
    published enum ConnectionType {
     AUTO = 0,
     LEFT = 1,
     TOP = 2,
     RIGHT = 3,
     BOTTOM = 4,
     SPECIAL = 5
    };
    published enum ConnectorType {
     STANDARD = 0,
     CURVE = 1,
     LINE = 2,
     LINES = 3
    };
    published service ConnectorProperties {
     [property] ::com::sun::star::drawing::ConnectorType EdgeKind;
     [property] long EdgeNode1HorzDist;
     [property] long EdgeNode1VertDist;
     [property] long EdgeNode2HorzDist;
     [property] long EdgeNode2VertDist;
    };
    published service ConnectorShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::ConnectorProperties;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::RotationDescriptor;
     [property] ::com::sun::star::drawing::XShape StartShape;
     [property] long StartGluePointIndex;
     [property] ::com::sun::star::awt::Point StartPosition;
     [property] ::com::sun::star::drawing::XShape EndShape;
     [property] ::com::sun::star::awt::Point EndPosition;
     [property] long EndGluePointIndex;
     [property] long EdgeLine1Delta;
     [property] long EdgeLine2Delta;
     [property] long EdgeLine3Delta;
    };
    published interface XControlShape {
     interface ::com::sun::star::drawing::XShape;
     ::com::sun::star::awt::XControlModel getControl();
     void setControl([in] ::com::sun::star::awt::XControlModel xControl);
    };
    published service ControlShape {
     service ::com::sun::star::drawing::Shape;
     interface ::com::sun::star::drawing::XControlShape;
    };
    published typedef sequence< long > CoordinateSequence;
    published typedef sequence< ::com::sun::star::drawing::CoordinateSequence > CoordinateSequenceSequence;
    published service DashTable {
     interface ::com::sun::star::container::XNameContainer;
    };
    /** @deprecated */ published enum MeasureKind {
     STANDARD = 0,
     RADIUS = 1
    };
    published enum MeasureTextHorzPos {
     AUTO = 0,
     LEFTOUTSIDE = 1,
     INSIDE = 2,
     RIGHTOUTSIDE = 3
    };
    published enum MeasureTextVertPos {
     AUTO = 0,
     EAST = 1,
     BREAKEDLINE = 2,
     WEST = 3,
     CENTERED = 4
    };
    published service MeasureProperties {
     [property] boolean MeasureBelowReferenceEdge;
     [property] long MeasureHelpLine1Length;
     [property] long MeasureHelpLine2Length;
     [property] long MeasureHelpLineDistance;
     [property] long MeasureHelpLineOverhang;
     [property] ::com::sun::star::drawing::MeasureKind MeasureKind;
     [property] long MeasureLineDistance;
     [property] long MeasureOverhang;
     [property] boolean MeasureShowUnit;
     [property] boolean MeasureTextAutoAngle;
     [property] long MeasureTextAutoAngleView;
     [property] long MeasureTextFixedAngle;
     [property] ::com::sun::star::drawing::MeasureTextHorzPos MeasureTextHorizontalPosition;
     [property] ::com::sun::star::drawing::MeasureTextVertPos MeasureTextVerticalPosition;
     [property] boolean MeasureTextIsFixedAngle;
     [property] boolean MeasureTextRotate90;
     [property] boolean MeasureTextUpsideDown;
     [property, optional] short MeasureDecimalPlaces;
    };
    published service Defaults {
     service ::com::sun::star::drawing::TextProperties;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::ConnectorProperties;
     service ::com::sun::star::drawing::MeasureProperties;
    };
    published service DocumentSettings {
     service ::com::sun::star::document::Settings;
     [optional] service ::com::sun::star::document::HeaderFooterSettings;
     interface ::com::sun::star::beans::XPropertySet;
     [property, optional] short MeasureUnit;
     [property, optional] long ScaleNumerator;
     [property, optional] long ScaleDenominator;
     [property, optional] boolean IsPrintFitPage;
     [property, optional] boolean IsPrintTilePage;
     [property, optional] long PageNumberFormat;
     [property, optional] boolean ParagraphSummation;
    };
    published typedef sequence< double > DoubleSequence;
    published typedef sequence< ::com::sun::star::drawing::DoubleSequence > DoubleSequenceSequence;
    published interface XShapes;
    published interface XShapeBinder {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XShape bind([in] ::com::sun::star::drawing::XShapes xShapes);
     void unbind([in] ::com::sun::star::drawing::XShape xShape);
    };
    published interface XShapes;
    published interface XShapeCombiner {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XShape combine([in] ::com::sun::star::drawing::XShapes xShapes);
     void split([in] ::com::sun::star::drawing::XShape Group);
    };
    published interface XShapeGroup;
    published interface XShapes;
    published interface XShapeGrouper {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XShapeGroup group([in] ::com::sun::star::drawing::XShapes xShapes);
     void ungroup([in] ::com::sun::star::drawing::XShapeGroup aGroup);
    };
    published interface XShapes {
     interface ::com::sun::star::container::XIndexAccess;
     void add([in] ::com::sun::star::drawing::XShape xShape);
     void remove([in] ::com::sun::star::drawing::XShape xShape);
    };
   };
   module view {
    published enum PaperOrientation {
     PORTRAIT = 0,
     LANDSCAPE = 1
    };
   };
   module drawing {
    published service GenericDrawPage {
     interface ::com::sun::star::drawing::XShapes;
     interface ::com::sun::star::drawing::XShapeGrouper;
     [optional] interface ::com::sun::star::drawing::XShapeCombiner;
     [optional] interface ::com::sun::star::drawing::XShapeBinder;
     [optional] interface ::com::sun::star::container::XNamed;
     [optional] interface ::com::sun::star::beans::XPropertySet;
     [property, optional] long BorderBottom;
     [property, optional] long BorderLeft;
     [property, optional] long BorderRight;
     [property, optional] long BorderTop;
     [property, optional] long Height;
     [property, optional] long Width;
     [property, optional, readonly] short Number;
     [property, optional] ::com::sun::star::view::PaperOrientation Orientation;
     [property, optional] ::com::sun::star::container::XNameContainer UserDefinedAttributes;
     [property, optional, readonly] boolean IsBackgroundDark;
     [property, optional] ::com::sun::star::container::XIndexAccess NavigationOrder;
    };
    published interface XDrawPage;
    published interface XMasterPageTarget {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XDrawPage getMasterPage();
     void setMasterPage([in] ::com::sun::star::drawing::XDrawPage xMasterPage);
    };
   };
   module form {
    published interface XFormsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameContainer getForms();
    };
   };
   module drawing {
    published service DrawPage {
     service ::com::sun::star::drawing::GenericDrawPage;
     interface ::com::sun::star::drawing::XMasterPageTarget;
     [optional] interface ::com::sun::star::form::XFormsSupplier;
    };
    published interface XDrawPage;
    published interface XDrawPages;
    /** @deprecated */ published interface XDrawPageExpander {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XDrawPages expand([in] ::com::sun::star::drawing::XDrawPage xPage);
    };
    published interface XDrawPage;
    published interface XDrawPages;
    /** @deprecated */ published interface XDrawPageSummarizer {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XDrawPage summarize([in] ::com::sun::star::drawing::XDrawPages xPages);
    };
    published interface XDrawPage;
    published interface XDrawPages {
     interface ::com::sun::star::container::XIndexAccess;
     ::com::sun::star::drawing::XDrawPage insertNewByIndex([in] long nIndex);
     void remove([in] ::com::sun::star::drawing::XDrawPage xPage);
    };
    published service DrawPages {
     interface ::com::sun::star::drawing::XDrawPages;
     [optional] interface ::com::sun::star::drawing::XDrawPageSummarizer;
     [optional] interface ::com::sun::star::drawing::XDrawPageExpander;
    };
    /** @deprecated */ published enum DrawViewMode {
     DRAW = 0,
     NOTES = 1,
     HANDOUT = 2
    };
    published interface XDrawPage;
    published interface XDrawPageDuplicator {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XDrawPage duplicate([in] ::com::sun::star::drawing::XDrawPage xPage);
    };
    published interface XDrawPagesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XDrawPages getDrawPages();
    };
    published interface XLayerSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getLayerManager();
    };
    published interface XMasterPagesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XDrawPages getMasterPages();
    };
    published interface XDrawPage;
    published interface XDrawView {
     interface ::com::sun::star::uno::XInterface;
     void setCurrentPage([in] ::com::sun::star::drawing::XDrawPage xPage);
     ::com::sun::star::drawing::XDrawPage getCurrentPage();
    };
   };
   module frame {
    published interface XFrame;
    published interface XController {
     interface ::com::sun::star::lang::XComponent;
     void attachFrame([in] ::com::sun::star::frame::XFrame Frame);
     boolean attachModel([in] ::com::sun::star::frame::XModel Model);
     boolean suspend([in] boolean Suspend);
     any getViewData();
     void restoreViewData([in] any Data);
     ::com::sun::star::frame::XModel getModel();
     ::com::sun::star::frame::XFrame getFrame();
    };
   };
   module util {
    published struct URL {
     string Complete;
     string Main;
     string Protocol;
     string User;
     string Password;
     string Server;
     short Port;
     string Path;
     string Name;
     string Arguments;
     string Mark;
    };
   };
   module frame {
    published struct DispatchDescriptor {
     ::com::sun::star::util::URL FeatureURL;
     string FrameName;
     long SearchFlags;
    };
    published interface XDispatch;
    published interface XDispatchProvider {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::frame::XDispatch queryDispatch([in] ::com::sun::star::util::URL URL, [in] string TargetFrameName, [in] long SearchFlags);
     sequence< ::com::sun::star::frame::XDispatch > queryDispatches([in] sequence< ::com::sun::star::frame::DispatchDescriptor > Requests);
    };
   };
   module ui {
    published interface XContextMenuInterceptor;
    published interface XContextMenuInterception {
     interface ::com::sun::star::uno::XInterface;
     void registerContextMenuInterceptor([in] ::com::sun::star::ui::XContextMenuInterceptor Interceptor);
     void releaseContextMenuInterceptor([in] ::com::sun::star::ui::XContextMenuInterceptor Interceptor);
    };
   };
   module frame {
    published service Controller {
     interface ::com::sun::star::frame::XController;
     interface ::com::sun::star::frame::XDispatchProvider;
     [optional] interface ::com::sun::star::ui::XContextMenuInterception;
     [optional] interface ::com::sun::star::awt::XUserInputInterception;
     [optional] interface ::com::sun::star::view::XSelectionSupplier;
     [optional] interface ::com::sun::star::datatransfer::XTransferableSupplier;
    };
   };
   module view {
    published interface XControlAccess {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::XControl getControl([in] ::com::sun::star::awt::XControlModel xModel) raises (::com::sun::star::container::NoSuchElementException);
    };
   };
   module form {
    published interface XForm;
    module runtime {
     interface XFormController;
    };
   };
   module view {
    interface XFormLayerAccess {
     interface ::com::sun::star::view::XControlAccess;
     ::com::sun::star::form::runtime::XFormController getFormController([in] ::com::sun::star::form::XForm Form);
     boolean isFormDesignMode();
     void setFormDesignMode([in] boolean DesignMode);
    };
   };
   module drawing {
    published interface XDrawPage;
    published service DrawingDocumentDrawView {
     service ::com::sun::star::frame::Controller;
     interface ::com::sun::star::drawing::XDrawView;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::view::XSelectionSupplier;
     [optional] interface ::com::sun::star::awt::XWindow;
     [optional] interface ::com::sun::star::view::XFormLayerAccess;
     [property] boolean IsMasterPageMode;
     [property] boolean IsLayerMode;
     [property] ::com::sun::star::drawing::XDrawPage CurrentPage;
     [property, readonly] ::com::sun::star::awt::Rectangle VisibleArea;
     [property, optional] short ZoomType;
     [property, optional] short ZoomValue;
     [property, optional] ::com::sun::star::awt::Point ViewOffset;
    };
    /** @deprecated */ published service DrawingDocumentFactory {
     /** @deprecated */ interface ::com::sun::star::lang::XMultiServiceFactory;
    };
    published service EllipseShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
     [property] ::com::sun::star::drawing::CircleKind CircleKind;
     [property] long CircleStartAngle;
     [property] long CircleEndAngle;
    };
    published enum ProjectionMode {
     PARALLEL = 0,
     PERSPECTIVE = 1
    };
    published enum ShadeMode {
     FLAT = 0,
     PHONG = 1,
     SMOOTH = 2,
     DRAFT = 3
    };
    published enum EscapeDirection {
     SMART = 0,
     LEFT = 1,
     RIGHT = 2,
     UP = 3,
     DOWN = 4,
     HORIZONTAL = 5,
     VERTICAL = 6
    };
    /** @deprecated */ published struct GluePoint {
     ::com::sun::star::awt::Point Position;
     short EscapeDirection;
     boolean PositionAbsolute;
     short Alignment;
    };
    published struct GluePoint2 {
     ::com::sun::star::awt::Point Position;
     boolean IsRelative;
     ::com::sun::star::drawing::Alignment PositionAlignment;
     ::com::sun::star::drawing::EscapeDirection Escape;
     boolean IsUserDefined;
    };
    published service GradientTable {
     interface ::com::sun::star::container::XNameContainer;
    };
    published interface XGraphicExportFilter {
     interface ::com::sun::star::document::XFilter;
     interface ::com::sun::star::document::XExporter;
     interface ::com::sun::star::document::XMimeTypeInfo;
    };
    published service GraphicExportFilter: ::com::sun::star::drawing::XGraphicExportFilter;
   };
   module graphic {
    published interface XGraphic;
   };
   module drawing {
    published service GraphicObjectShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
     [property] string GraphicURL;
     [property] string GraphicStreamURL;
     [property, optional] ::com::sun::star::awt::XBitmap GraphicObjectFillBitmap;
     [property] short AdjustLuminance;
     [property] short AdjustContrast;
     [property] short AdjustRed;
     [property] short AdjustGreen;
     [property] short AdjustBlue;
     [property] double Gamma;
     [property] short Transparency;
     [property] ::com::sun::star::drawing::ColorMode GraphicColorMode;
     [property, optional] ::com::sun::star::container::XIndexContainer ImageMap;
     [property, optional] ::com::sun::star::graphic::XGraphic Graphic;
    };
    /** @deprecated */ published interface XShapeGroup {
     interface ::com::sun::star::drawing::XShape;
     void enterGroup();
     void leaveGroup();
    };
    published service GroupShape {
     service ::com::sun::star::drawing::Shape;
     interface ::com::sun::star::drawing::XShapeGroup;
     interface ::com::sun::star::drawing::XShapes;
    };
    published service HatchTable {
     interface ::com::sun::star::container::XNameContainer;
    };
    published struct HomogenMatrixLine {
     double Column1;
     double Column2;
     double Column3;
     double Column4;
    };
    published struct HomogenMatrix {
     ::com::sun::star::drawing::HomogenMatrixLine Line1;
     ::com::sun::star::drawing::HomogenMatrixLine Line2;
     ::com::sun::star::drawing::HomogenMatrixLine Line3;
     ::com::sun::star::drawing::HomogenMatrixLine Line4;
    };
    published struct HomogenMatrixLine4 {
     double Column1;
     double Column2;
     double Column3;
     double Column4;
    };
    published struct HomogenMatrix4 {
     ::com::sun::star::drawing::HomogenMatrixLine4 Line1;
     ::com::sun::star::drawing::HomogenMatrixLine4 Line2;
     ::com::sun::star::drawing::HomogenMatrixLine4 Line3;
     ::com::sun::star::drawing::HomogenMatrixLine4 Line4;
    };
    published enum HorizontalDimensioning {
     AUTO = 0,
     LEFT = 1,
     CENTERED = 2,
     RIGHT = 3
    };
    published service Layer {
     interface ::com::sun::star::beans::XPropertySet;
     [property] string Name;
     [property] boolean IsVisible;
     [property] boolean IsPrintable;
     [property] boolean IsLocked;
    };
    published interface XLayer;
    published interface XLayerManager {
     interface ::com::sun::star::container::XIndexAccess;
     ::com::sun::star::drawing::XLayer insertNewByIndex([in] long nIndex);
     void remove([in] ::com::sun::star::drawing::XLayer xLayer) raises (::com::sun::star::container::NoSuchElementException);
     void attachShapeToLayer([in] ::com::sun::star::drawing::XShape xShape, [in] ::com::sun::star::drawing::XLayer xLayer);
     ::com::sun::star::drawing::XLayer getLayerForShape([in] ::com::sun::star::drawing::XShape xShape);
    };
    published service LayerManager {
     interface ::com::sun::star::drawing::XLayerManager;
     interface ::com::sun::star::container::XNameAccess;
    };
    published enum LayerType {
     LAYOUT = 0,
     CONTROLSA = 1,
     DIMENSIONIANG_LINES = 2,
     USER_DEFINED = 3
    };
    /** @deprecated */ published enum LineEndType {
     NONE = 0,
     ARROW = 1,
     CIRCLE = 2,
     SQUARE = 3,
     SPECIAL = 4
    };
    published service PolyPolygonDescriptor {
     [property, readonly] ::com::sun::star::drawing::PolygonKind PolygonKind;
     [property] ::com::sun::star::drawing::PointSequenceSequence PolyPolygon;
     [property] ::com::sun::star::drawing::PointSequenceSequence Geometry;
    };
    published service LineShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::PolyPolygonDescriptor;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
    };
    published service MarkerTable {
     interface ::com::sun::star::container::XNameContainer;
    };
    published service MasterPage {
     service ::com::sun::star::drawing::GenericDrawPage;
    };
    published service MasterPages {
     interface ::com::sun::star::drawing::XDrawPages;
    };
    published service MeasureShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::MeasureProperties;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
     [property] ::com::sun::star::awt::Point StartPosition;
     [property] ::com::sun::star::awt::Point EndPosition;
    };
    published enum MirrorAxis {
     VERTICAL = 0,
     HORIZONTAL = 1
    };
    published enum NormalsKind {
     SPECIFIC = 0,
     FLAT = 1,
     SPHERE = 2
    };
    published service OLE2Shape {
     service ::com::sun::star::drawing::Shape;
     [property] string CLSID;
     [property] string PersistName;
     [property, readonly] ::com::sun::star::frame::XModel Model;
     [property, readonly] boolean IsInternal;
    };
    published service OpenBezierShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::PolyPolygonBezierDescriptor;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
    };
    published service PageShape {
     service ::com::sun::star::drawing::Shape;
     [property, optional] long PageNumber;
    };
    published service PluginShape {
     service ::com::sun::star::drawing::Shape;
     [property] string PluginMimeType;
     [property] string PluginURL;
     [property] sequence< ::com::sun::star::beans::PropertyValue > PluginCommands;
    };
    published service PolyLineShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::PolyPolygonDescriptor;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
    };
    published service PolyPolygonBezierShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::PolyPolygonBezierDescriptor;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
    };
    published service PolyPolygonShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::PolyPolygonDescriptor;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
    };
    published struct PolyPolygonShape3D {
     ::com::sun::star::drawing::DoubleSequenceSequence SequenceX;
     ::com::sun::star::drawing::DoubleSequenceSequence SequenceY;
     ::com::sun::star::drawing::DoubleSequenceSequence SequenceZ;
    };
    published service RectangleShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::RotationDescriptor;
     [property] long CornerRadius;
    };
    published service ShapeCollection: ::com::sun::star::drawing::XShapes;
    published service Shapes {
     interface ::com::sun::star::drawing::XShapes;
    };
    /** @deprecated */ published enum SnapObjectType {
     POINT = 0,
     VERTICAL = 1,
     HORIZONTAL = 2
    };
    /** @deprecated */ published enum TextAdjust {
     LEFT = 0,
     CENTER = 1,
     RIGHT = 2,
     BLOCK = 3,
     STRETCH = 4
    };
    published service TextShape {
     service ::com::sun::star::drawing::Shape;
     service ::com::sun::star::drawing::FillProperties;
     service ::com::sun::star::drawing::LineProperties;
     service ::com::sun::star::drawing::ShadowProperties;
     service ::com::sun::star::drawing::Text;
     service ::com::sun::star::drawing::RotationDescriptor;
     [property] long CornerRadius;
    };
    /** @deprecated */ published enum TextureKind {
     LUMINANCE = 0,
     COLOR = 1
    };
    published enum TextureKind2 {
     LUMINANCE = 0,
     INTENSITY = 1,
     COLOR = 2
    };
    published enum TextureMode {
     REPLACE = 0,
     MODULATE = 1,
     BLEND = 2
    };
    published enum TextureProjectionMode {
     OBJECTSPECIFIC = 0,
     PARALLEL = 1,
     SPHERE = 2
    };
    published service TransparencyGradientTable {
     interface ::com::sun::star::container::XNameContainer;
    };
    published enum VerticalDimensioning {
     AUTO = 0,
     TOP = 1,
     CENTERED = 2,
     BOTTOM = 3
    };
    /** @deprecated */ published interface XConnectableShape {
     interface ::com::sun::star::uno::XInterface;
     boolean canConnect([in] ::com::sun::star::awt::Point nPos, [in] boolean bCreateGluePoint, [in] long nMaxDist);
     boolean doConnect([in] ::com::sun::star::awt::Point nPos, [in] boolean bCreateGluePoint, [in] long nMaxDist);
    };
    /** @deprecated */ published interface XConnectorShape {
     interface ::com::sun::star::drawing::XShape;
     void connectStart([in] ::com::sun::star::drawing::XConnectableShape xShape, [in] ::com::sun::star::drawing::ConnectionType nPos);
     void connectEnd([in] ::com::sun::star::drawing::XConnectableShape xShape, [in] ::com::sun::star::drawing::ConnectionType nPos);
     void disconnectBegin([in] ::com::sun::star::drawing::XConnectableShape xShape);
     void disconnectEnd([in] ::com::sun::star::drawing::XConnectableShape xShape);
    };
    published interface XDrawPage {
     interface ::com::sun::star::drawing::XShapes;
    };
    published interface XLayer {
     interface ::com::sun::star::beans::XPropertySet;
    };
   };
   module frame {
    published interface XStatusListener;
    published interface XDispatch {
     interface ::com::sun::star::uno::XInterface;
     void dispatch([in] ::com::sun::star::util::URL URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments);
     void addStatusListener([in] ::com::sun::star::frame::XStatusListener Control, [in] ::com::sun::star::util::URL URL);
     void removeStatusListener([in] ::com::sun::star::frame::XStatusListener Control, [in] ::com::sun::star::util::URL URL);
    };
   };
   module drawing {
    published interface XSelectionFunction {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::lang::XServiceInfo;
     interface ::com::sun::star::frame::XDispatch;
     interface ::com::sun::star::awt::XKeyHandler;
     interface ::com::sun::star::awt::XMouseClickHandler;
     interface ::com::sun::star::awt::XMouseMotionHandler;
     interface ::com::sun::star::view::XSelectionChangeListener;
    };
    /** @deprecated */ published interface XShapeAligner {
     interface ::com::sun::star::uno::XInterface;
     void alignShapes([inout] ::com::sun::star::drawing::XShapes aShapes, [in] ::com::sun::star::drawing::Alignment eType);
    };
    /** @deprecated */ published interface XShapeArranger {
     interface ::com::sun::star::uno::XInterface;
     void arrange([in] ::com::sun::star::drawing::XShapes xShapes, [in] ::com::sun::star::drawing::Arrangement eType);
     void bringToFront([in] ::com::sun::star::drawing::XShapes xShapes, [in] short nSteps);
     void sendToBack([in] ::com::sun::star::drawing::XShapes xShapes, [in] short nSteps);
     void setBehindShape([in] ::com::sun::star::drawing::XShapes xShapes, [in] ::com::sun::star::drawing::XShape xShape);
     void setInFrontOf([in] ::com::sun::star::drawing::XShapes xShapes, [in] ::com::sun::star::drawing::XShape xShape);
     void reverseOrder([in] ::com::sun::star::drawing::XShapes xShapes);
    };
    /** @deprecated */ published interface XShapeMirror {
     interface ::com::sun::star::uno::XInterface;
     void mirror([inout] ::com::sun::star::drawing::XShapes aShapes, [in] ::com::sun::star::drawing::MirrorAxis eAxis);
     void mirrorAtAxis([inout] ::com::sun::star::drawing::XShapes aShapes, [in] ::com::sun::star::drawing::XShape aLine);
    };
    /** @deprecated */ published interface XUniversalShapeDescriptor {
     interface ::com::sun::star::drawing::XShapeDescriptor;
     void setShapeType([in] string aShapeTypeName);
    };
   };
   module embed {
    published constants Actions {
     const long PREVENT_CLOSE = 1;
     const long PREVENT_TERMINATION = 2;
    };
    published constants Aspects {
     const hyper MSOLE_CONTENT = 1;
     const hyper MSOLE_DOCPRINT = 8;
     const hyper MSOLE_ICON = 4;
     const hyper MSOLE_THUMBNAIL = 2;
    };
    published exception InvalidStorageException: ::com::sun::star::io::IOException {
    };
    published exception StorageWrappedTargetException: ::com::sun::star::lang::WrappedTargetException {
    };
   };
   module packages {
    published exception NoEncryptionException: ::com::sun::star::uno::Exception {
    };
    published exception WrongPasswordException: ::com::sun::star::uno::Exception {
    };
   };
   module embed {
    published interface XStorage {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::lang::XComponent;
     void copyToStorage([in] ::com::sun::star::embed::XStorage xDest) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     ::com::sun::star::io::XStream openStreamElement([in] string sStreamName, [in] long nOpenMode) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::WrongPasswordException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     ::com::sun::star::io::XStream openEncryptedStreamElement([in] string sStreamName, [in] long nOpenMode, [in] string sPassword) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::NoEncryptionException, ::com::sun::star::packages::WrongPasswordException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     ::com::sun::star::embed::XStorage openStorageElement([in] string sStorName, [in] long nOpenMode) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     ::com::sun::star::io::XStream cloneStreamElement([in] string sStreamName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::WrongPasswordException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     ::com::sun::star::io::XStream cloneEncryptedStreamElement([in] string sStreamName, [in] string sPassword) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::NoEncryptionException, ::com::sun::star::packages::WrongPasswordException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void copyLastCommitTo([in] ::com::sun::star::embed::XStorage xTargetStorage) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void copyStorageElementLastCommitTo([in] string sStorName, [in] ::com::sun::star::embed::XStorage xTargetStorage) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     boolean isStreamElement([in] string sElementName) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::InvalidStorageException);
     boolean isStorageElement([in] string sElementName) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::InvalidStorageException);
     void removeElement([in] string sElementName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void renameElement([in] string sElementName, [in] string sNewName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void copyElementTo([in] string sElementName, [in] ::com::sun::star::embed::XStorage xDest, [in] string sNewName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void moveElementTo([in] string sElementName, [in] ::com::sun::star::embed::XStorage xDest, [in] string sNewName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
    };
    published service BaseStorage {
     interface ::com::sun::star::embed::XStorage;
     interface ::com::sun::star::beans::XPropertySet;
     [property, readonly] long OpenMode;
     [property, optional, readonly] string URL;
    };
   };
   module frame {
    published interface XFrame;
   };
   module embed {
    published service DocumentCloser: ::com::sun::star::lang::XComponent {
     DocumentCloserCtor1([in] ::com::sun::star::frame::XFrame xFrame) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::frame::DoubleInitializationException, ::com::sun::star::uno::Exception);
    };
    published constants ElementModes {
     const long NOCREATE = 16;
     const long READ = 1;
     const long READWRITE = 7;
     const long SEEKABLE = 2;
     const long SEEKABLEREAD = 3;
     const long TRUNCATE = 8;
     const long WRITE = 4;
    };
    published constants EmbedMapUnits {
     const long ONE_1000TH_INCH = 4;
     const long ONE_100TH_INCH = 5;
     const long ONE_100TH_MM = 0;
     const long ONE_10TH_INCH = 6;
     const long ONE_10TH_MM = 1;
     const long ONE_CM = 3;
     const long ONE_INCH = 7;
     const long ONE_MM = 2;
     const long PIXEL = 10;
     const long POINT = 8;
     const long TWIP = 9;
    };
    published constants EmbedMisc {
     const hyper EMBED_ACTIVATEIMMEDIATELY = 4294967296;
     const hyper EMBED_NEEDSSIZEONLOAD = 17179869184;
     const hyper EMBED_NEVERRESIZE = 8589934592;
     const hyper MS_EMBED_ACTIVATEWHENVISIBLE = 256;
     const hyper MS_EMBED_ACTSLIKEBUTTON = 4096;
     const hyper MS_EMBED_ACTSLIKELABEL = 8192;
     const hyper MS_EMBED_ALIGNABLE = 32768;
     const hyper MS_EMBED_ALWAYSRUN = 2048;
     const hyper MS_EMBED_CANLINKBYOLE1 = 32;
     const hyper MS_EMBED_CANTLINKINSIDE = 16;
     const hyper MS_EMBED_IGNOREACTIVATEWHENVISIBLE = 524288;
     const hyper MS_EMBED_IMEMODE = 262144;
     const hyper MS_EMBED_INSERTNOTREPLACE = 4;
     const hyper MS_EMBED_INSIDEOUT = 128;
     const hyper MS_EMBED_INVISIBLEATRUNTIME = 1024;
     const hyper MS_EMBED_ISLINKOBJECT = 64;
     const hyper MS_EMBED_NOUIACTIVATE = 16384;
     const hyper MS_EMBED_ONLYICONIC = 2;
     const hyper MS_EMBED_RECOMPOSEONRESIZE = 1;
     const hyper MS_EMBED_RENDERINGISDEVICEINDEPENDENT = 512;
     const hyper MS_EMBED_SETCLIENTSITEFIRST = 131072;
     const hyper MS_EMBED_SIMPLEFRAME = 65536;
     const hyper MS_EMBED_STATIC = 8;
     const hyper MS_EMBED_SUPPORTSMULTILEVELUNDO = 2097152;
     const hyper MS_EMBED_WANTSTOMENUMERGE = 1048576;
    };
    published constants EmbedStates {
     const long ACTIVE = 2;
     const long INPLACE_ACTIVE = 3;
     const long LOADED = 0;
     const long RUNNING = 1;
     const long UI_ACTIVE = 4;
    };
    published constants EmbedUpdateModes {
     const long ALWAYS_UPDATE = 0;
     const long EXPLICIT_UPDATE = 1;
    };
    published constants EmbedVerbs {
     const long MS_OLEVERB_DISCARDUNDOSTATE = -6;
     const long MS_OLEVERB_HIDE = -3;
     const long MS_OLEVERB_IPACTIVATE = -5;
     const long MS_OLEVERB_OPEN = -2;
     const long MS_OLEVERB_PRIMARY = 0;
     const long MS_OLEVERB_SHOW = -1;
     const long MS_OLEVERB_UIACTIVATE = -4;
    };
    published interface XEmbedObjectCreator {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::uno::XInterface createInstanceInitNew([in] sequence< byte > aClassID, [in] string sClassName, [in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntryName, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     ::com::sun::star::uno::XInterface createInstanceInitFromEntry([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntryName, [in] sequence< ::com::sun::star::beans::PropertyValue > aMediaDescriptor, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     ::com::sun::star::uno::XInterface createInstanceInitFromMediaDescriptor([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntryName, [in] sequence< ::com::sun::star::beans::PropertyValue > aMediaDescriptor, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
    published interface XEmbedObjectFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::uno::XInterface createInstanceUserInit([in] sequence< byte > aClassID, [in] string sClassName, [in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntName, [in] long nEntryConnectionMode, [in] sequence< ::com::sun::star::beans::PropertyValue > aArgs, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
    published interface XLinkCreator {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::uno::XInterface createInstanceLink([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntryName, [in] sequence< ::com::sun::star::beans::PropertyValue > aArgs, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
    published interface XLinkFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::uno::XInterface createInstanceLinkUserInit([in] sequence< byte > aClassID, [in] string ClassName, [in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntryName, [in] sequence< ::com::sun::star::beans::PropertyValue > aArgs, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
   };
   module frame {
    published interface XDispatchProviderInterceptor;
   };
   module embed {
    published service EmbeddedObjectDescriptor {
     [property, optional] boolean StoreVisualReplacement;
     [property, optional] ::com::sun::star::frame::XDispatchProviderInterceptor OutplaceDispatchInterceptor;
     [property, optional] ::com::sun::star::embed::XStorage RecoveryStorage;
    };
    published constants EntryInitModes {
     const long DEFAULT_INIT = 0;
     const long MEDIA_DESCRIPTOR_INIT = 3;
     const long NO_INIT = 2;
     const long TRUNCATE_INIT = 1;
     const long URL_LINK_INIT = 4;
    };
    published service FileSystemStorage {
     service ::com::sun::star::embed::BaseStorage;
    };
    published service FileSystemStorageFactory: ::com::sun::star::lang::XSingleServiceFactory;
    published interface XHatchWindow;
    published interface XHatchWindowFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::embed::XHatchWindow createHatchWindowInstance([in] ::com::sun::star::awt::XWindowPeer xParent, [in] ::com::sun::star::awt::Rectangle aBounds, [in] ::com::sun::star::awt::Size aSize) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XEmbeddedObject;
    published struct InsertedObjectInfo {
     ::com::sun::star::embed::XEmbeddedObject Object;
     sequence< ::com::sun::star::beans::NamedValue > Options;
    };
    published interface XActionsApproval;
    published service InstanceLocker: ::com::sun::star::lang::XComponent {
     InstanceLockerCtor1([in] ::com::sun::star::uno::XInterface xInstance, [in] long nActions) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::frame::DoubleInitializationException, ::com::sun::star::uno::Exception);
     InstanceLockerCtor2([in] ::com::sun::star::uno::XInterface xInstance, [in] long nActions, [in] ::com::sun::star::embed::XActionsApproval xApprove) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::frame::DoubleInitializationException, ::com::sun::star::uno::Exception);
    };
    published exception LinkageMisuseException: ::com::sun::star::uno::Exception {
    };
    published interface XEmbedObjectClipboardCreator {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::embed::InsertedObjectInfo createInstanceInitFromClipboard([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntryName, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
    published exception WrongStateException: ::com::sun::star::uno::Exception {
    };
    published exception NeedsRunningStateException: ::com::sun::star::embed::WrongStateException {
    };
    published exception NoVisualAreaSizeException: ::com::sun::star::uno::Exception {
    };
    published interface XClassifiedObject {
     interface ::com::sun::star::uno::XInterface;
     sequence< byte > getClassID();
     string getClassName();
     void setClassInfo([in] sequence< byte > aClassID, [in] string sClassName) raises (::com::sun::star::lang::NoSupportException);
    };
    published interface XTransactedObject {
     interface ::com::sun::star::uno::XInterface;
     void commit() raises (::com::sun::star::io::IOException, ::com::sun::star::lang::WrappedTargetException);
     void revert() raises (::com::sun::star::io::IOException, ::com::sun::star::lang::WrappedTargetException);
    };
    published interface XOLESimpleStorage {
     interface ::com::sun::star::container::XNameContainer;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::embed::XTransactedObject;
     interface ::com::sun::star::embed::XClassifiedObject;
    };
    published service OLESimpleStorage: ::com::sun::star::embed::XOLESimpleStorage {
     createFromInputStream([in] ::com::sun::star::io::XInputStream xInputStream, [in] boolean bNoTempCopy);
     createFromStream([in] ::com::sun::star::io::XStream xStream, [in] boolean bNoTempCopy);
    };
    published exception ObjectSaveVetoException: ::com::sun::star::uno::Exception {
    };
    published exception StateChangeInProgressException: ::com::sun::star::embed::WrongStateException {
     long TargetState;
    };
    published interface XEncryptionProtectedSource {
     interface ::com::sun::star::uno::XInterface;
     void setEncryptionPassword([in] string sPassword) raises (::com::sun::star::io::IOException);
     void removeEncryption() raises (::com::sun::star::io::IOException);
    };
    published interface XTransactionListener;
    published interface XTransactionBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addTransactionListener([in] ::com::sun::star::embed::XTransactionListener aListener);
     void removeTransactionListener([in] ::com::sun::star::embed::XTransactionListener aListener);
    };
    published service Storage {
     service ::com::sun::star::embed::BaseStorage;
     interface ::com::sun::star::embed::XTransactedObject;
     interface ::com::sun::star::embed::XTransactionBroadcaster;
     [optional] interface ::com::sun::star::embed::XEncryptionProtectedSource;
     [property] string MediaType;
     [property, optional] string Version;
     [property, readonly] boolean MediaTypeFallbackIsUsed;
     [property, readonly] boolean IsRoot;
     [property, optional, readonly] boolean RepairPackage;
     [property, optional, readonly] boolean HasEncryptedEntries;
     [property, optional, readonly] boolean HasNonEncryptedEntries;
    };
    published service StorageFactory: ::com::sun::star::lang::XSingleServiceFactory;
    published constants StorageFormats {
     const long OFOPXML = 3;
     const long PACKAGE = 1;
     const long ZIP = 2;
    };
    published service StorageStream {
     interface ::com::sun::star::io::XStream;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::io::XSeekable;
     [optional] interface ::com::sun::star::embed::XEncryptionProtectedSource;
     [property] string MediaType;
     [property] boolean IsCompressed;
     [property, readonly] boolean IsEncrypted;
     [property] boolean UseCommonStoragePasswordEncryption;
     [property, readonly] long Size;
    };
    published exception UnreachableStateException: ::com::sun::star::uno::Exception {
     long CurrentState;
     long NextState;
    };
    published exception UseBackupException: ::com::sun::star::io::IOException {
     string TemporaryFileURL;
    };
    published constants VerbAttributes {
     const long MS_VERBATTR_NEVERDIRTIES = 1;
     const long MS_VERBATTR_ONCONTAINERMENU = 2;
    };
    published struct VerbDescriptor {
     long VerbID;
     string VerbName;
     long VerbFlags;
     long VerbAttributes;
    };
    published struct VisualRepresentation {
     ::com::sun::star::datatransfer::DataFlavor Flavor;
     any Data;
    };
    published interface XActionsApproval {
     interface ::com::sun::star::uno::XInterface;
     boolean approveAction([in] long nAction);
    };
    published interface XCommonEmbedPersist {
     interface ::com::sun::star::uno::XInterface;
     void storeOwn() raises (::com::sun::star::embed::WrongStateException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     boolean isReadonly() raises (::com::sun::star::embed::WrongStateException);
     void reload([in] sequence< ::com::sun::star::beans::PropertyValue > aMediaArgs, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
   };
   module util {
    published interface XCloseable;
   };
   module embed {
    published interface XComponentSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::util::XCloseable getComponent();
    };
    published interface XEmbedPersist {
     interface ::com::sun::star::embed::XCommonEmbedPersist;
     void setPersistentEntry([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntName, [in] long nEntryConnectionMode, [in] sequence< ::com::sun::star::beans::PropertyValue > aMediaArgs, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     void storeToEntry([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntName, [in] sequence< ::com::sun::star::beans::PropertyValue > aMediaArgs, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     void storeAsEntry([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntName, [in] sequence< ::com::sun::star::beans::PropertyValue > aMediaArgs, [in] sequence< ::com::sun::star::beans::PropertyValue > aObjectArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     void saveCompleted([in] boolean bUseNew) raises (::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
     boolean hasEntry() raises (::com::sun::star::embed::WrongStateException);
     string getEntryName() raises (::com::sun::star::embed::WrongStateException);
    };
    published interface XEmbeddedClient {
     interface ::com::sun::star::embed::XComponentSupplier;
     void saveObject() raises (::com::sun::star::embed::ObjectSaveVetoException, ::com::sun::star::uno::Exception);
     void visibilityChanged([in] boolean bVisible) raises (::com::sun::star::embed::WrongStateException);
    };
    published interface XStateChangeListener;
    published interface XStateChangeBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addStateChangeListener([in] ::com::sun::star::embed::XStateChangeListener xListener);
     void removeStateChangeListener([in] ::com::sun::star::embed::XStateChangeListener xListener);
    };
    published interface XVisualObject {
     interface ::com::sun::star::uno::XInterface;
     void setVisualAreaSize([in] hyper nAspect, [in] ::com::sun::star::awt::Size aSize) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
     ::com::sun::star::awt::Size getVisualAreaSize([in] hyper nAspect) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
     ::com::sun::star::embed::VisualRepresentation getPreferredVisualRepresentation([in] hyper nAspect) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
     long getMapUnit([in] hyper nAspect) raises (::com::sun::star::uno::Exception);
    };
   };
   module util {
    published interface XCloseListener;
    published interface XCloseBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addCloseListener([in] ::com::sun::star::util::XCloseListener Listener);
     void removeCloseListener([in] ::com::sun::star::util::XCloseListener Listener);
    };
    published interface XCloseable {
     interface ::com::sun::star::util::XCloseBroadcaster;
     void close([in] boolean DeliverOwnership) raises (::com::sun::star::util::CloseVetoException);
    };
   };
   module embed {
    published interface XEmbeddedObject {
     interface ::com::sun::star::embed::XVisualObject;
     interface ::com::sun::star::embed::XClassifiedObject;
     interface ::com::sun::star::embed::XComponentSupplier;
     interface ::com::sun::star::embed::XStateChangeBroadcaster;
     interface ::com::sun::star::document::XEventBroadcaster;
     interface ::com::sun::star::util::XCloseable;
     void changeState([in] long nNewState) raises (::com::sun::star::embed::UnreachableStateException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
     sequence< long > getReachableStates() raises (::com::sun::star::embed::NeedsRunningStateException, ::com::sun::star::embed::WrongStateException);
     long getCurrentState() raises (::com::sun::star::embed::WrongStateException);
     void doVerb([in] long nVerbID) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::embed::UnreachableStateException, ::com::sun::star::uno::Exception);
     sequence< ::com::sun::star::embed::VerbDescriptor > getSupportedVerbs() raises (::com::sun::star::embed::NeedsRunningStateException, ::com::sun::star::embed::WrongStateException);
     void setClientSite([in] ::com::sun::star::embed::XEmbeddedClient xClient) raises (::com::sun::star::embed::WrongStateException);
     ::com::sun::star::embed::XEmbeddedClient getClientSite() raises (::com::sun::star::embed::WrongStateException);
     void update() raises (::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
     void setUpdateMode([in] long nMode) raises (::com::sun::star::embed::WrongStateException);
     hyper getStatus([in] hyper nAspect) raises (::com::sun::star::embed::WrongStateException);
     void setContainerName([in] string sName);
    };
    published interface XExtendedStorageStream {
     interface ::com::sun::star::io::XStream;
     interface ::com::sun::star::lang::XComponent;
     [optional] interface ::com::sun::star::io::XSeekable;
     [optional] interface ::com::sun::star::embed::XEncryptionProtectedSource;
     [optional] interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::embed::XTransactedObject;
     [optional] interface ::com::sun::star::embed::XTransactionBroadcaster;
    };
    published interface XHatchWindowController;
    published interface XHatchWindow {
     interface ::com::sun::star::lang::XComponent;
     [attribute] ::com::sun::star::awt::Size HatchBorderSize;
     void setController([in] ::com::sun::star::embed::XHatchWindowController xController);
    };
    published interface XHatchWindowController {
     interface ::com::sun::star::uno::XInterface;
     void requestPositioning([in] ::com::sun::star::awt::Rectangle aRect);
     ::com::sun::star::awt::Rectangle calcAdjustedRectangle([in] ::com::sun::star::awt::Rectangle aRect);
     void activated();
     void deactivated();
    };
    published interface XHierarchicalStorageAccess {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::embed::XExtendedStorageStream openStreamElementByHierarchicalName([in] string sStreamPath, [in] long nOpenMode) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::WrongPasswordException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     ::com::sun::star::embed::XExtendedStorageStream openEncryptedStreamElementByHierarchicalName([in] string sStreamName, [in] long nOpenMode, [in] string sPassword) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::NoEncryptionException, ::com::sun::star::packages::WrongPasswordException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void removeStreamElementByHierarchicalName([in] string sElementPath) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
    };
    published interface XInplaceObject {
     interface ::com::sun::star::uno::XInterface;
     void setObjectRectangles([in] ::com::sun::star::awt::Rectangle aPosRect, [in] ::com::sun::star::awt::Rectangle aClipRect) raises (::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
     void enableModeless([in] boolean bEnable) raises (::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
     void translateAccelerators([in] sequence< ::com::sun::star::awt::KeyEvent > aKeys) raises (::com::sun::star::embed::WrongStateException);
    };
    published interface XInsertObjectDialog {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::embed::InsertedObjectInfo createInstanceByDialog([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntName, [in] sequence< ::com::sun::star::beans::PropertyValue > lObjArgs) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
    published interface XLinkageSupport {
     interface ::com::sun::star::embed::XCommonEmbedPersist;
     void breakLink([in] ::com::sun::star::embed::XStorage xStorage, [in] string sEntryName) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::embed::WrongStateException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     boolean isLink() raises (::com::sun::star::embed::WrongStateException);
     string getLinkURL() raises (::com::sun::star::embed::WrongStateException, ::com::sun::star::uno::Exception);
    };
   };
   module packages {
    published exception NoRawFormatException: ::com::sun::star::io::IOException {
    };
   };
   module embed {
    published interface XOptimizedStorage {
     interface ::com::sun::star::uno::XInterface;
     void insertRawNonEncrStreamElementDirect([in] string sStreamName, [in] ::com::sun::star::io::XInputStream xInStream) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::NoRawFormatException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void insertStreamElementDirect([in] string sStreamName, [in] ::com::sun::star::io::XInputStream xInStream, [in] sequence< ::com::sun::star::beans::PropertyValue > aProperties) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void copyElementDirectlyTo([in] string sSourceName, [in] ::com::sun::star::embed::XOptimizedStorage xTargetStorage, [in] string sTargetName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void writeAndAttachToStream([in] ::com::sun::star::io::XStream xStream) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void attachToURL([in] string sURL, [in] boolean bReadOnly) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     any getElementPropertyValue([in] string sElementName, [in] string sPropertyName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException, ::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::beans::PropertyVetoException, ::com::sun::star::embed::StorageWrappedTargetException);
     void copyStreamElementData([in] string sStreamName, [in] ::com::sun::star::io::XStream xTargetStream) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::WrongPasswordException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
    };
    published interface XPackageStructureCreator {
     interface ::com::sun::star::uno::XInterface;
     void convertToPackage([in] string sFolderURL, [in] ::com::sun::star::io::XOutputStream xTargetStream) raises (::com::sun::star::io::IOException);
    };
    published interface XPersistanceHolder {
     interface ::com::sun::star::uno::XInterface;
     void disconnectPersistence() raises (::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     void connectPersistance([in] ::com::sun::star::io::XStream xStream) raises (::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
    published interface XRelationshipAccess {
     interface ::com::sun::star::uno::XInterface;
     boolean hasByID([in] string sID) raises (::com::sun::star::io::IOException);
     string getTargetByID([in] string sID) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException);
     string getTypeByID([in] string sID) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException);
     sequence< ::com::sun::star::beans::StringPair > getRelationshipByID([in] string sID) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException);
     sequence< sequence< ::com::sun::star::beans::StringPair > > getRelationshipsByType([in] string sType) raises (::com::sun::star::io::IOException);
     sequence< sequence< ::com::sun::star::beans::StringPair > > getAllRelationships() raises (::com::sun::star::io::IOException);
     void insertRelationshipByID([in] string sID, [in] sequence< ::com::sun::star::beans::StringPair > aEntry, [in] boolean bReplace) raises (::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException);
     void removeRelationshipByID([in] string sID) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException);
     void insertRelationships([in] sequence< sequence< ::com::sun::star::beans::StringPair > > aEntries, [in] boolean bReplace) raises (::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException);
     void clearRelationships() raises (::com::sun::star::io::IOException);
    };
    published interface XStateChangeListener {
     interface ::com::sun::star::lang::XEventListener;
     void changingState([in] ::com::sun::star::lang::EventObject aEvent, [in] long nOldState, [in] long nNewState) raises (::com::sun::star::embed::WrongStateException);
     void stateChanged([in] ::com::sun::star::lang::EventObject aEvent, [in] long nOldState, [in] long nNewState);
    };
    published interface XStorageRawAccess {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::io::XInputStream getPlainRawStreamElement([in] string sStreamName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     ::com::sun::star::io::XInputStream getRawEncrStreamElement([in] string sStreamName) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::NoEncryptionException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
     void insertRawEncrStreamElement([in] string sStreamName, [in] ::com::sun::star::io::XInputStream xInStream) raises (::com::sun::star::embed::InvalidStorageException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::packages::NoRawFormatException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException, ::com::sun::star::embed::StorageWrappedTargetException);
    };
    published interface XTransactionListener {
     interface ::com::sun::star::lang::XEventListener;
     void preCommit([in] ::com::sun::star::lang::EventObject aEvent) raises (::com::sun::star::uno::Exception);
     void commited([in] ::com::sun::star::lang::EventObject aEvent);
     void preRevert([in] ::com::sun::star::lang::EventObject aEvent) raises (::com::sun::star::uno::Exception);
     void reverted([in] ::com::sun::star::lang::EventObject aEvent);
    };
    published interface XTransferableSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::datatransfer::XTransferable getTransferable();
    };
    published interface XWindowSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::XWindow getWindow();
    };
   };
   module form {
    published service ControlFontDialog: ::com::sun::star::ui::dialogs::XExecutableDialog {
     createWithGridModel([in] ::com::sun::star::beans::XPropertySet GridModel);
    };
    published interface XFormComponent {
     interface ::com::sun::star::container::XChild;
    };
    published service FormComponent {
     interface ::com::sun::star::form::XFormComponent;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::io::XPersistObject;
     [optional] interface ::com::sun::star::beans::XPropertyBag;
     [property] string Name;
    };
    published service FormControlModel {
     service ::com::sun::star::awt::UnoControlModel;
     service ::com::sun::star::form::FormComponent;
     [optional] interface ::com::sun::star::beans::XFastPropertySet;
     [optional] interface ::com::sun::star::beans::XPropertyState;
     [property, readonly] short ClassId;
     [property, optional] short TabIndex;
     [property] string Tag;
    };
    published interface XUpdateListener;
    published interface XUpdateBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addUpdateListener([in] ::com::sun::star::form::XUpdateListener aListener);
     void removeUpdateListener([in] ::com::sun::star::form::XUpdateListener aListener);
    };
    published interface XBoundComponent {
     interface ::com::sun::star::form::XUpdateBroadcaster;
     boolean commit();
    };
    published interface XLoadListener {
     interface ::com::sun::star::lang::XEventListener;
     void loaded([in] ::com::sun::star::lang::EventObject aEvent);
     void unloading([in] ::com::sun::star::lang::EventObject aEvent);
     void unloaded([in] ::com::sun::star::lang::EventObject aEvent);
     void reloading([in] ::com::sun::star::lang::EventObject aEvent);
     void reloaded([in] ::com::sun::star::lang::EventObject aEvent);
    };
    published interface XResetListener;
    published interface XReset {
     interface ::com::sun::star::uno::XInterface;
     void reset();
     void addResetListener([in] ::com::sun::star::form::XResetListener aListener);
     void removeResetListener([in] ::com::sun::star::form::XResetListener aListener);
    };
    published service DataAwareControlModel {
     service ::com::sun::star::form::FormControlModel;
     interface ::com::sun::star::form::XLoadListener;
     interface ::com::sun::star::form::XReset;
     [optional] interface ::com::sun::star::form::XBoundComponent;
     [property] string DataField;
     [property, optional] boolean InputRequired;
     [property, readonly] ::com::sun::star::beans::XPropertySet BoundField;
     [property] ::com::sun::star::beans::XPropertySet LabelControl;
    };
    /** @deprecated */ published enum DataSelectionType {
     TABLE = 0,
     QUERY = 1,
     SQL = 2,
     SQLPASSTHROUGH = 3
    };
    /** @deprecated */ published struct DatabaseDeleteEvent: ::com::sun::star::lang::EventObject {
     sequence< any > Bookmarks;
    };
    published struct DatabaseParameterEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::container::XIndexAccess Parameters;
    };
    /** @deprecated */ published struct ErrorEvent: ::com::sun::star::lang::EventObject {
     any Reason;
    };
    published enum FormButtonType {
     PUSH = 0,
     SUBMIT = 1,
     RESET = 2,
     URL = 3
    };
    published constants FormComponentType {
     const short CHECKBOX = 5;
     const short COMBOBOX = 7;
     const short COMMANDBUTTON = 2;
     const short CONTROL = 1;
     const short CURRENCYFIELD = 18;
     const short DATEFIELD = 15;
     const short FILECONTROL = 12;
     const short FIXEDTEXT = 10;
     const short GRIDCONTROL = 11;
     const short GROUPBOX = 8;
     const short HIDDENCONTROL = 13;
     const short IMAGEBUTTON = 4;
     const short IMAGECONTROL = 14;
     const short LISTBOX = 6;
     const short NAVIGATIONBAR = 22;
     const short NUMERICFIELD = 17;
     const short PATTERNFIELD = 19;
     const short RADIOBUTTON = 3;
     const short SCROLLBAR = 20;
     const short SPINBUTTON = 21;
     const short TEXTFIELD = 9;
     const short TIMEFIELD = 16;
    };
    published service FormComponents {
     interface ::com::sun::star::container::XContainer;
     interface ::com::sun::star::container::XNameContainer;
     interface ::com::sun::star::container::XIndexContainer;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::script::XEventAttacherManager;
    };
    /** @deprecated */ published service FormControllerDispatcher {
     [optional] interface ::com::sun::star::frame::XDispatchProvider;
    };
    published interface XConfirmDeleteListener;
    published interface XConfirmDeleteBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addConfirmDeleteListener([in] ::com::sun::star::form::XConfirmDeleteListener aListener);
     void removeConfirmDeleteListener([in] ::com::sun::star::form::XConfirmDeleteListener aListener);
    };
    published interface XDatabaseParameterListener;
    published interface XDatabaseParameterBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addParameterListener([in] ::com::sun::star::form::XDatabaseParameterListener aListener);
     void removeParameterListener([in] ::com::sun::star::form::XDatabaseParameterListener aListener);
    };
    published interface XFormControllerListener;
    /** @deprecated */ published interface XFormController {
     interface ::com::sun::star::awt::XTabController;
     ::com::sun::star::awt::XControl getCurrentControl();
     void addActivateListener([in] ::com::sun::star::form::XFormControllerListener l);
     void removeActivateListener([in] ::com::sun::star::form::XFormControllerListener l);
    };
   };
   module sdb {
    published interface XRowSetApproveListener;
    published interface XRowSetApproveBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addRowSetApproveListener([in] ::com::sun::star::sdb::XRowSetApproveListener listener);
     void removeRowSetApproveListener([in] ::com::sun::star::sdb::XRowSetApproveListener listener);
    };
    published interface XSQLErrorListener;
    published interface XSQLErrorBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addSQLErrorListener([in] ::com::sun::star::sdb::XSQLErrorListener Listener);
     void removeSQLErrorListener([in] ::com::sun::star::sdb::XSQLErrorListener Listener);
    };
   };
   module form {
    /** @deprecated */ published service FormController {
     [optional] service ::com::sun::star::form::FormControllerDispatcher;
     interface ::com::sun::star::form::XFormController;
     interface ::com::sun::star::awt::XTabController;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::util::XModifyBroadcaster;
     interface ::com::sun::star::form::XConfirmDeleteBroadcaster;
     interface ::com::sun::star::sdb::XSQLErrorBroadcaster;
     interface ::com::sun::star::sdb::XRowSetApproveBroadcaster;
     interface ::com::sun::star::form::XDatabaseParameterBroadcaster;
    };
    published enum FormSubmitEncoding {
     URL = 0,
     MULTIPART = 1,
     TEXT = 2
    };
    published enum FormSubmitMethod {
     GET = 0,
     POST = 1
    };
    published interface XForms {
     interface ::com::sun::star::container::XContainer;
     interface ::com::sun::star::container::XNameContainer;
     interface ::com::sun::star::container::XIndexContainer;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::script::XEventAttacherManager;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::util::XCloneable;
     interface ::com::sun::star::lang::XComponent;
    };
    published service Forms: ::com::sun::star::form::XForms;
    published enum ListSourceType {
     VALUELIST = 0,
     TABLE = 1,
     QUERY = 2,
     SQL = 3,
     SQLPASSTHROUGH = 4,
     TABLEFIELDS = 5
    };
    published enum NavigationBarMode {
     NONE = 0,
     CURRENT = 1,
     PARENT = 2
    };
    /** @deprecated */ published service PropertyBrowserController {
     interface ::com::sun::star::frame::XController;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::beans::XFastPropertySet;
     interface ::com::sun::star::beans::XMultiPropertySet;
     [property] ::com::sun::star::beans::XPropertySet IntrospectedObject;
     [property] string CurrentPage;
    };
    published service TabOrderDialog: ::com::sun::star::ui::dialogs::XExecutableDialog {
     createWithModel([in] ::com::sun::star::awt::XTabControllerModel TabbingModel, [in] ::com::sun::star::awt::XControlContainer ControlContext, [in] ::com::sun::star::awt::XWindow ParentWindow);
    };
    published enum TabulatorCycle {
     RECORDS = 0,
     CURRENT = 1,
     PAGE = 2
    };
    published interface XApproveActionListener;
    published interface XApproveActionBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addApproveActionListener([in] ::com::sun::star::form::XApproveActionListener aListener);
     void removeApproveActionListener([in] ::com::sun::star::form::XApproveActionListener aListener);
    };
    published interface XApproveActionListener {
     interface ::com::sun::star::lang::XEventListener;
     boolean approveAction([in] ::com::sun::star::lang::EventObject aEvent);
    };
    published interface XBoundControl {
     interface ::com::sun::star::uno::XInterface;
     boolean getLock();
     void setLock([in] boolean bLock);
    };
    published interface XChangeListener;
    published interface XChangeBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addChangeListener([in] ::com::sun::star::form::XChangeListener aListener);
     void removeChangeListener([in] ::com::sun::star::form::XChangeListener aListener);
    };
    published interface XChangeListener {
     interface ::com::sun::star::lang::XEventListener;
     void changed([in] ::com::sun::star::lang::EventObject rEvent);
    };
   };
   module sdb {
    published struct RowChangeEvent: ::com::sun::star::lang::EventObject {
     long Action;
     long Rows;
    };
   };
   module form {
    published interface XConfirmDeleteListener {
     interface ::com::sun::star::lang::XEventListener;
     boolean confirmDelete([in] ::com::sun::star::sdb::RowChangeEvent aEvent);
    };
    published interface XDatabaseParameterListener {
     interface ::com::sun::star::lang::XEventListener;
     boolean approveParameter([in] ::com::sun::star::form::DatabaseParameterEvent aEvent);
    };
    /** @deprecated */ published interface XDeleteListener {
     interface ::com::sun::star::lang::XEventListener;
     boolean approveDelete([in] ::com::sun::star::lang::EventObject aEvent);
     void deleted([in] ::com::sun::star::lang::EventObject aEvent);
    };
    published interface XErrorListener;
    /** @deprecated */ published interface XErrorBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addErrorListener([in] ::com::sun::star::form::XErrorListener aListener);
     void removeErrorListener([in] ::com::sun::star::form::XErrorListener aListener);
    };
    /** @deprecated */ published interface XErrorListener {
     interface ::com::sun::star::lang::XEventListener;
     void errorOccured([in] ::com::sun::star::form::ErrorEvent aEvent);
    };
    published interface XForm {
     interface ::com::sun::star::form::XFormComponent;
    };
    published interface XFormControllerListener {
     interface ::com::sun::star::lang::XEventListener;
     void formActivated([in] ::com::sun::star::lang::EventObject rEvent);
     void formDeactivated([in] ::com::sun::star::lang::EventObject rEvent);
    };
    /** @deprecated */ published interface XGrid {
     interface ::com::sun::star::uno::XInterface;
     short getCurrentColumnPosition();
     void setCurrentColumnPosition([in] short nPos);
    };
    published interface XGridColumnFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet createColumn([in] string aColumnType) raises (::com::sun::star::lang::IllegalArgumentException);
     sequence< string > getColumnTypes();
    };
    /** @deprecated */ published interface XGridFieldDataSupplier {
     interface ::com::sun::star::uno::XInterface;
     sequence< boolean > queryFieldDataType([in] type xType);
     sequence< any > queryFieldData([in] long nRow, [in] type xType);
    };
    interface XGridControlListener;
    interface XGridControl {
     interface ::com::sun::star::form::XGrid;
     interface ::com::sun::star::form::XGridFieldDataSupplier;
     void addGridControlListener([in] ::com::sun::star::form::XGridControlListener listener);
     void removeGridControlListener([in] ::com::sun::star::form::XGridControlListener listener);
    };
    /** @deprecated */ published interface XGridPeer {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexContainer getColumns();
     void setColumns([in] ::com::sun::star::container::XIndexContainer aColumns);
    };
    published interface XImageProducerSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::awt::XImageProducer getImageProducer();
    };
    /** @deprecated */ published interface XInsertListener {
     interface ::com::sun::star::lang::XEventListener;
     void inserting([in] ::com::sun::star::lang::EventObject aEvent);
     void inserted([in] ::com::sun::star::lang::EventObject aEvent);
    };
    published interface XLoadable {
     interface ::com::sun::star::uno::XInterface;
     void load();
     void unload();
     void reload();
     boolean isLoaded();
     void addLoadListener([in] ::com::sun::star::form::XLoadListener aListener);
     void removeLoadListener([in] ::com::sun::star::form::XLoadListener aListener);
    };
    /** @deprecated */ published interface XPositioningListener {
     interface ::com::sun::star::lang::XEventListener;
     void positioned([in] ::com::sun::star::lang::EventObject aEvent);
    };
    published interface XResetListener {
     interface ::com::sun::star::lang::XEventListener;
     boolean approveReset([in] ::com::sun::star::lang::EventObject rEvent);
     void resetted([in] ::com::sun::star::lang::EventObject rEvent);
    };
    /** @deprecated */ published interface XRestoreListener {
     interface ::com::sun::star::lang::XEventListener;
     void restored([in] ::com::sun::star::lang::EventObject aEvent);
    };
    published interface XSubmitListener;
    published interface XSubmit {
     interface ::com::sun::star::uno::XInterface;
     void submit([in] ::com::sun::star::awt::XControl aControl, [in] ::com::sun::star::awt::MouseEvent aMouseEvt);
     void addSubmitListener([in] ::com::sun::star::form::XSubmitListener aListener);
     void removeSubmitListener([in] ::com::sun::star::form::XSubmitListener aListener);
    };
    /** @deprecated */ published interface XSubmitListener {
     interface ::com::sun::star::lang::XEventListener;
     boolean approveSubmit([in] ::com::sun::star::lang::EventObject Event);
    };
    published interface XUpdateListener {
     interface ::com::sun::star::lang::XEventListener;
     boolean approveUpdate([in] ::com::sun::star::lang::EventObject aEvent);
     void updated([in] ::com::sun::star::lang::EventObject aEvent);
    };
    module component {
     published service CheckBox {
      service ::com::sun::star::awt::UnoControlCheckBoxModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] short DefaultState;
      [property] string RefValue;
     };
     published service DatabaseCheckBox {
      service ::com::sun::star::form::component::CheckBox;
      service ::com::sun::star::form::DataAwareControlModel;
     };
     published service ComboBox {
      service ::com::sun::star::awt::UnoControlComboBoxModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] string DefaultText;
     };
     published service DatabaseComboBox {
      service ::com::sun::star::form::component::ComboBox;
      service ::com::sun::star::form::DataAwareControlModel;
      [property] boolean ConvertEmptyToNull;
      [property] string ListSource;
      [property] ::com::sun::star::form::ListSourceType ListSourceType;
     };
     published service DateField {
      service ::com::sun::star::awt::UnoControlDateFieldModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] long DefaultDate;
     };
     published service DatabaseDateField {
      service ::com::sun::star::form::component::DateField;
      service ::com::sun::star::form::DataAwareControlModel;
     };
     published service FormattedField {
      service ::com::sun::star::awt::UnoControlFormattedFieldModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
     };
     published service DatabaseFormattedField {
      service ::com::sun::star::form::component::FormattedField;
      service ::com::sun::star::form::DataAwareControlModel;
      [property] boolean ConvertEmptyToNull;
     };
     published service ListBox {
      service ::com::sun::star::awt::UnoControlListBoxModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] sequence< short > DefaultSelection;
      [property] sequence< string > ListSource;
     };
     published service DatabaseListBox {
      service ::com::sun::star::form::component::ListBox;
      service ::com::sun::star::form::DataAwareControlModel;
      [property] short BoundColumn;
      [property] ::com::sun::star::form::ListSourceType ListSourceType;
      [property, optional, transient] sequence< any > SelectedValues;
      [property, optional, transient] any SelectedValue;
     };
     published service NumericField {
      service ::com::sun::star::awt::UnoControlNumericFieldModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] double DefaultValue;
     };
     published service DatabaseNumericField {
      service ::com::sun::star::form::component::NumericField;
      service ::com::sun::star::form::DataAwareControlModel;
     };
     published service RadioButton {
      service ::com::sun::star::awt::UnoControlRadioButtonModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] short DefaultState;
      [property] string RefValue;
      [property, optional] string UncheckedRefValue;
     };
     published service DatabaseRadioButton {
      service ::com::sun::star::form::component::RadioButton;
      service ::com::sun::star::form::DataAwareControlModel;
     };
    };
   };
   module text {
    published service TextRange {
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::ParagraphProperties;
     [optional] service ::com::sun::star::style::CharacterPropertiesAsian;
     [optional] service ::com::sun::star::style::CharacterPropertiesComplex;
     [optional] service ::com::sun::star::style::ParagraphPropertiesAsian;
     [optional] service ::com::sun::star::style::ParagraphPropertiesComplex;
     interface ::com::sun::star::text::XTextRange;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::beans::XPropertyState;
     [optional] interface ::com::sun::star::container::XContentEnumerationAccess;
    };
   };
   module form {
    module component {
     published service RichTextControl {
      service ::com::sun::star::awt::UnoControlEditModel;
      service ::com::sun::star::form::FormControlModel;
      service ::com::sun::star::text::TextRange;
      [property] boolean HardLineBreaks;
      [property] boolean RichText;
     };
     published service TextField {
      service ::com::sun::star::awt::UnoControlEditModel;
      service ::com::sun::star::form::FormControlModel;
      [optional] service ::com::sun::star::form::component::RichTextControl;
      interface ::com::sun::star::form::XReset;
      [property] string DefaultText;
     };
     published service DatabaseTextField {
      service ::com::sun::star::form::component::TextField;
      service ::com::sun::star::form::DataAwareControlModel;
      [property] boolean ConvertEmptyToNull;
     };
     published service TimeField {
      service ::com::sun::star::awt::UnoControlTimeFieldModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] long DefaultTime;
     };
     published service DatabaseTimeField {
      service ::com::sun::star::form::component::TimeField;
      service ::com::sun::star::form::DataAwareControlModel;
     };
     published service CommandButton {
      service ::com::sun::star::awt::UnoControlButtonModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XImageProducerSupplier;
      [optional] interface ::com::sun::star::form::XReset;
      [property] ::com::sun::star::form::FormButtonType ButtonType;
      [property] string TargetFrame;
      [property] string TargetURL;
      [property, optional] boolean DefaultState;
     };
     published service CurrencyField {
      service ::com::sun::star::awt::UnoControlCurrencyFieldModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] double DefaultValue;
     };
     published service Form {
      service ::com::sun::star::form::FormComponent;
      service ::com::sun::star::form::FormComponents;
      interface ::com::sun::star::form::XForm;
      interface ::com::sun::star::awt::XTabControllerModel;
     };
    };
   };
   module sdbc {
    published interface XCloseable {
     interface ::com::sun::star::uno::XInterface;
     void close() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XColumnLocate {
     interface ::com::sun::star::uno::XInterface;
     long findColumn([in] string columnName) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XResultSetMetaData;
    published interface XResultSetMetaDataSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XResultSetMetaData getMetaData() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XResultSetUpdate {
     interface ::com::sun::star::uno::XInterface;
     void insertRow() raises (::com::sun::star::sdbc::SQLException);
     void updateRow() raises (::com::sun::star::sdbc::SQLException);
     void deleteRow() raises (::com::sun::star::sdbc::SQLException);
     void cancelRowUpdates() raises (::com::sun::star::sdbc::SQLException);
     void moveToInsertRow() raises (::com::sun::star::sdbc::SQLException);
     void moveToCurrentRow() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XArray;
    published interface XBlob;
    published interface XClob;
    published interface XRef;
    published interface XRow {
     interface ::com::sun::star::uno::XInterface;
     boolean wasNull() raises (::com::sun::star::sdbc::SQLException);
     string getString([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     boolean getBoolean([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     byte getByte([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     short getShort([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     long getInt([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     hyper getLong([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     float getFloat([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     double getDouble([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     sequence< byte > getBytes([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::Date getDate([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::Time getTime([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::DateTime getTimestamp([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::io::XInputStream getBinaryStream([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::io::XInputStream getCharacterStream([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     any getObject([in] long columnIndex, [in] ::com::sun::star::container::XNameAccess typeMap) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XRef getRef([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XBlob getBlob([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XClob getClob([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XArray getArray([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XRowUpdate {
     interface ::com::sun::star::uno::XInterface;
     void updateNull([in] long columnIndex) raises (::com::sun::star::sdbc::SQLException);
     void updateBoolean([in] long columnIndex, [in] boolean x) raises (::com::sun::star::sdbc::SQLException);
     void updateByte([in] long columnIndex, [in] byte x) raises (::com::sun::star::sdbc::SQLException);
     void updateShort([in] long columnIndex, [in] short x) raises (::com::sun::star::sdbc::SQLException);
     void updateInt([in] long columnIndex, [in] long x) raises (::com::sun::star::sdbc::SQLException);
     void updateLong([in] long columnIndex, [in] hyper x) raises (::com::sun::star::sdbc::SQLException);
     void updateFloat([in] long columnIndex, [in] float x) raises (::com::sun::star::sdbc::SQLException);
     void updateDouble([in] long columnIndex, [in] double x) raises (::com::sun::star::sdbc::SQLException);
     void updateString([in] long columnIndex, [in] string x) raises (::com::sun::star::sdbc::SQLException);
     void updateBytes([in] long columnIndex, [in] sequence< byte > x) raises (::com::sun::star::sdbc::SQLException);
     void updateDate([in] long columnIndex, [in] ::com::sun::star::util::Date x) raises (::com::sun::star::sdbc::SQLException);
     void updateTime([in] long columnIndex, [in] ::com::sun::star::util::Time x) raises (::com::sun::star::sdbc::SQLException);
     void updateTimestamp([in] long columnIndex, [in] ::com::sun::star::util::DateTime x) raises (::com::sun::star::sdbc::SQLException);
     void updateBinaryStream([in] long columnIndex, [in] ::com::sun::star::io::XInputStream x, [in] long length) raises (::com::sun::star::sdbc::SQLException);
     void updateCharacterStream([in] long columnIndex, [in] ::com::sun::star::io::XInputStream x, [in] long length) raises (::com::sun::star::sdbc::SQLException);
     void updateObject([in] long columnIndex, [in] any x) raises (::com::sun::star::sdbc::SQLException);
     void updateNumericObject([in] long columnIndex, [in] any x, [in] long scale) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XWarningsSupplier {
     interface ::com::sun::star::uno::XInterface;
     any getWarnings() raises (::com::sun::star::sdbc::SQLException);
     void clearWarnings() raises (::com::sun::star::sdbc::SQLException);
    };
    published service ResultSet {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::sdbc::XResultSetMetaDataSupplier;
     interface ::com::sun::star::sdbc::XResultSet;
     interface ::com::sun::star::sdbc::XRow;
     interface ::com::sun::star::sdbc::XColumnLocate;
     [optional] interface ::com::sun::star::lang::XComponent;
     [optional] interface ::com::sun::star::sdbc::XCloseable;
     [optional] interface ::com::sun::star::sdbc::XWarningsSupplier;
     [optional] interface ::com::sun::star::sdbc::XResultSetUpdate;
     [optional] interface ::com::sun::star::sdbc::XRowUpdate;
     [property, optional, readonly] string CursorName;
     [property, readonly] long ResultSetConcurrency;
     [property, readonly] long ResultSetType;
     [property] long FetchDirection;
     [property] long FetchSize;
    };
   };
   module sdbcx {
    published interface XDeleteRows {
     interface ::com::sun::star::uno::XInterface;
     sequence< long > deleteRows([in] sequence< any > rows) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XRowLocate {
     interface ::com::sun::star::uno::XInterface;
     any getBookmark() raises (::com::sun::star::sdbc::SQLException);
     boolean moveToBookmark([in] any bookmark) raises (::com::sun::star::sdbc::SQLException);
     boolean moveRelativeToBookmark([in] any bookmark, [in] long rows) raises (::com::sun::star::sdbc::SQLException);
     long compareBookmarks([in] any first, [in] any second) raises (::com::sun::star::sdbc::SQLException);
     boolean hasOrderedBookmarks() raises (::com::sun::star::sdbc::SQLException);
     long hashBookmark([in] any bookmark) raises (::com::sun::star::sdbc::SQLException);
    };
   };
   module util {
    published interface XCancellable {
     interface ::com::sun::star::uno::XInterface;
     void cancel();
    };
   };
   module sdbcx {
    published service ResultSet {
     service ::com::sun::star::sdbc::ResultSet;
     interface ::com::sun::star::sdbcx::XRowLocate;
     [optional] interface ::com::sun::star::util::XCancellable;
     [optional] interface ::com::sun::star::sdbcx::XDeleteRows;
     [property, readonly] boolean IsBookmarkable;
     [property, optional, readonly] boolean CanUpdateInsertedRows;
    };
    published interface XColumnsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getColumns();
    };
   };
   module sdb {
    published service ResultSet {
     service ::com::sun::star::sdbcx::ResultSet;
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
    };
    published interface XCompletedExecution {
     interface ::com::sun::star::uno::XInterface;
     void executeWithCompletion([in] ::com::sun::star::task::XInteractionHandler handler) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XParametersSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getParameters();
    };
    published interface XResultSetAccess {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XResultSet createResultSet() raises (::com::sun::star::sdbc::SQLException);
    };
   };
   module sdbc {
    published service RowSet {
     service ::com::sun::star::sdbc::ResultSet;
     interface ::com::sun::star::sdbc::XRowSet;
     interface ::com::sun::star::sdbc::XParameters;
     interface ::com::sun::star::sdbc::XColumnLocate;
     [property] string DataSourceName;
     [property] string URL;
     [property] string Command;
     [property] long TransactionIsolation;
     [property] ::com::sun::star::container::XNameAccess TypeMap;
     [property] boolean EscapeProcessing;
     [property] long QueryTimeOut;
     [property] long MaxFieldSize;
     [property] long MaxRows;
     [property] string User;
     [property] string Password;
     [property] long ResultSetType;
    };
    published interface XConnection;
   };
   module sdb {
    published service RowSet {
     service ::com::sun::star::sdbc::RowSet;
     service ::com::sun::star::sdb::ResultSet;
     interface ::com::sun::star::sdb::XCompletedExecution;
     interface ::com::sun::star::sdb::XRowSetApproveBroadcaster;
     interface ::com::sun::star::sdb::XResultSetAccess;
     [optional] interface ::com::sun::star::sdbc::XResultSetUpdate;
     [optional] interface ::com::sun::star::sdbcx::XDeleteRows;
     [optional] interface ::com::sun::star::sdb::XParametersSupplier;
     [property] ::com::sun::star::sdbc::XConnection ActiveConnection;
     [property] string DataSourceName;
     [property] string Command;
     [property] long CommandType;
     [property, readonly] string ActiveCommand;
     [property] boolean IgnoreResult;
     [property] string Filter;
     [property] boolean ApplyFilter;
     [property, optional] string HavingClause;
     [property, optional] string GroupBy;
     [property] string Order;
     [property, readonly] long Privileges;
     [property, readonly] boolean IsModified;
     [property, readonly] boolean IsNew;
     [property, readonly] long RowCount;
     [property, readonly] boolean IsRowCountFinal;
     [property, optional] string UpdateTableName;
     [property, optional] string UpdateCatalogName;
     [property, optional] string UpdateSchemaName;
    };
   };
   module form {
    module component {
     published service DataForm {
      service ::com::sun::star::sdb::RowSet;
      service ::com::sun::star::form::component::Form;
      interface ::com::sun::star::form::XReset;
      interface ::com::sun::star::form::XLoadable;
      interface ::com::sun::star::sdb::XCompletedExecution;
      interface ::com::sun::star::form::XDatabaseParameterBroadcaster;
      [property] sequence< string > MasterFields;
      [property] sequence< string > DetailFields;
      [property] ::com::sun::star::form::TabulatorCycle Cycle;
      [property] ::com::sun::star::form::NavigationBarMode NavigationBarMode;
      [property] boolean AllowInserts;
      [property] boolean AllowUpdates;
      [property] boolean AllowDeletes;
     };
     published service DatabaseCurrencyField {
      service ::com::sun::star::form::component::CurrencyField;
      service ::com::sun::star::form::DataAwareControlModel;
     };
     published service DatabaseImageControl {
      service ::com::sun::star::awt::UnoControlImageControlModel;
      service ::com::sun::star::form::DataAwareControlModel;
      interface ::com::sun::star::form::XImageProducerSupplier;
      [property] boolean ReadOnly;
     };
     published service PatternField {
      service ::com::sun::star::awt::UnoControlPatternFieldModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] string DefaultText;
     };
     published service DatabasePatternField {
      service ::com::sun::star::form::component::PatternField;
      service ::com::sun::star::form::DataAwareControlModel;
      [property] boolean ConvertEmptyToNull;
     };
     published service FileControl {
      service ::com::sun::star::awt::UnoControlFileControlModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XReset;
      [property] string DefaultText;
     };
     published service FixedText {
      service ::com::sun::star::awt::UnoControlFixedTextModel;
      service ::com::sun::star::form::FormControlModel;
     };
     published service GridControl {
      service ::com::sun::star::form::FormControlModel;
      service ::com::sun::star::form::FormComponents;
      interface ::com::sun::star::form::XGridColumnFactory;
      /** @deprecated */ interface ::com::sun::star::view::XSelectionSupplier;
      interface ::com::sun::star::form::XReset;
      [property] short Border;
      [property, optional] long BorderColor;
      [property] boolean Enabled;
      [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
      [property] long RowHeight;
      [property] boolean Tabstop;
      [property] ::com::sun::star::util::Color TextColor;
     };
     published service GroupBox {
      service ::com::sun::star::awt::UnoControlGroupBoxModel;
      service ::com::sun::star::form::FormControlModel;
     };
     published service HTMLForm {
      service ::com::sun::star::form::component::Form;
      interface ::com::sun::star::form::XReset;
      interface ::com::sun::star::form::XSubmit;
      [property] string TargetFrame;
      [property] string TargetURL;
      [property] ::com::sun::star::form::FormSubmitMethod SubmitMethod;
      [property] ::com::sun::star::form::FormSubmitEncoding SubmitEncoding;
     };
     published service HiddenControl {
      service ::com::sun::star::form::FormComponent;
      [property] string HiddenValue;
     };
     published service ImageButton {
      service ::com::sun::star::awt::UnoControlImageControlModel;
      service ::com::sun::star::form::FormControlModel;
      interface ::com::sun::star::form::XImageProducerSupplier;
      [property] ::com::sun::star::form::FormButtonType ButtonType;
      [property] string TargetFrame;
      [property] string TargetURL;
     };
    };
    module control {
     published service CheckBox {
      service ::com::sun::star::awt::UnoControlCheckBox;
      interface ::com::sun::star::form::XBoundControl;
     };
     published service ComboBox {
      service ::com::sun::star::awt::UnoControlComboBox;
      interface ::com::sun::star::form::XBoundControl;
     };
     published service CommandButton {
      service ::com::sun::star::awt::UnoControlButton;
      interface ::com::sun::star::form::XApproveActionBroadcaster;
     };
     published service CurrencyField {
      service ::com::sun::star::awt::UnoControlCurrencyField;
      interface ::com::sun::star::form::XBoundControl;
     };
     published service DateField {
      service ::com::sun::star::awt::UnoControlDateField;
      interface ::com::sun::star::form::XBoundControl;
     };
     published service FormattedField {
      service ::com::sun::star::awt::UnoControlFormattedField;
      interface ::com::sun::star::form::XBoundControl;
     };
    };
   };
   module frame {
    published interface XDispatchProviderInterceptor;
    published interface XDispatchProviderInterception {
     interface ::com::sun::star::uno::XInterface;
     void registerDispatchProviderInterceptor([in] ::com::sun::star::frame::XDispatchProviderInterceptor Interceptor);
     void releaseDispatchProviderInterceptor([in] ::com::sun::star::frame::XDispatchProviderInterceptor Interceptor);
    };
   };
   module util {
    published interface XModeSelector {
     interface ::com::sun::star::uno::XInterface;
     void setMode([in] string aMode) raises (::com::sun::star::lang::NoSupportException);
     string getMode();
     sequence< string > getSupportedModes();
     boolean supportsMode([in] string aMode);
    };
   };
   module form {
    module control {
     published service GridControl {
      service ::com::sun::star::awt::UnoControl;
      interface ::com::sun::star::form::XBoundComponent;
      interface ::com::sun::star::form::XGrid;
      interface ::com::sun::star::util::XModifyBroadcaster;
      interface ::com::sun::star::container::XIndexAccess;
      interface ::com::sun::star::container::XEnumerationAccess;
      [optional] interface ::com::sun::star::form::XGridControl;
      [optional] interface ::com::sun::star::form::XGridFieldDataSupplier;
      [optional] interface ::com::sun::star::util::XModeSelector;
      [optional] interface ::com::sun::star::view::XSelectionSupplier;
      [optional] interface ::com::sun::star::frame::XDispatchProviderInterception;
     };
     published service GroupBox {
      service ::com::sun::star::awt::UnoControlGroupBox;
     };
     published service ImageButton {
      service ::com::sun::star::awt::UnoControlImageControl;
      interface ::com::sun::star::form::XApproveActionBroadcaster;
     };
     published service ImageControl {
      service ::com::sun::star::awt::UnoControlImageControl;
      interface ::com::sun::star::form::XBoundControl;
     };
     published service InteractionGridControl {
      service ::com::sun::star::form::control::GridControl;
      interface ::com::sun::star::frame::XDispatch;
     };
     published service ListBox {
      service ::com::sun::star::awt::UnoControlListBox;
      interface ::com::sun::star::form::XBoundControl;
      interface ::com::sun::star::form::XChangeBroadcaster;
     };
     published service NumericField {
      service ::com::sun::star::awt::UnoControlNumericField;
      interface ::com::sun::star::form::XBoundControl;
     };
     published service PatternField {
      service ::com::sun::star::awt::UnoControlPatternField;
      interface ::com::sun::star::form::XBoundControl;
     };
     published service RadioButton {
      service ::com::sun::star::awt::UnoControlRadioButton;
      interface ::com::sun::star::form::XBoundControl;
     };
     published service TextField {
      service ::com::sun::star::awt::UnoControlEdit;
      interface ::com::sun::star::form::XBoundControl;
      interface ::com::sun::star::form::XChangeBroadcaster;
     };
     published service TimeField {
      service ::com::sun::star::awt::UnoControlTimeField;
      interface ::com::sun::star::form::XBoundControl;
     };
    };
   };
   module formula {
    published service FormulaProperties {
     [property] short Alignment;
     [property] short BaseFontHeight;
     [property] string CustomFontNameFixed;
     [property] boolean FontFixedIsItalic;
     [property] boolean FontFixedIsBold;
     [property] string CustomFontNameSans;
     [property] boolean FontSansIsItalic;
     [property] boolean FontSansIsBold;
     [property] string CustomFontNameSerif;
     [property] boolean FontSerifIsItalic;
     [property] boolean FontSerifIsBold;
     [property] string FontNameFunctions;
     [property] boolean FontFunctionsIsItalic;
     [property] boolean FontFunctionsIsBold;
     [property] string FontNameNumbers;
     [property] boolean FontNumbersIsItalic;
     [property] boolean FontNumbersIsBold;
     [property] string FontNameText;
     [property] boolean FontTextIsItalic;
     [property] boolean FontTextIsBold;
     [property] string FontNameVariables;
     [property] boolean FontVariablesIsItalic;
     [property] boolean FontVariablesIsBold;
     [property] string Formula;
     [property] boolean IsScaleAllBrackets;
     [property] boolean IsTextMode;
     [property] short RelativeFontHeightFunctions;
     [property] short RelativeFontHeightIndices;
     [property] short RelativeFontHeightLimits;
     [property] short RelativeFontHeightOperators;
     [property] short RelativeFontHeightText;
     [property] short RelativeBracketDistance;
     [property] short RelativeBracketExcessSize;
     [property] short RelativeFractionBarExcessLength;
     [property] short RelativeFractionBarLineWeight;
     [property] short RelativeFractionDenominatorDepth;
     [property] short RelativeFractionNumeratorHeight;
     [property] short RelativeIndexSubscript;
     [property] short RelativeIndexSuperscript;
     [property] short RelativeLineSpacing;
     [property] short RelativeLowerLimitDistance;
     [property] short RelativeMatrixColumnSpacing;
     [property] short RelativeMatrixLineSpacing;
     [property] short RelativeOperatorExcessSize;
     [property] short RelativeOperatorSpacing;
     [property] short RelativeRootSpacing;
     [property] short RelativeScaleBracketExcessSize;
     [property] short RelativeSpacing;
     [property] short RelativeSymbolMinimumHeight;
     [property] short RelativeSymbolPrimaryHeight;
     [property] short RelativeUpperLimitDistance;
     [property] short TopMargin;
     [property] short BottomMargin;
     [property] short LeftMargin;
     [property] short RightMargin;
     [property, optional] short BaseLine;
    };
    /** @deprecated */ published struct SymbolDescriptor {
     string sName;
     string sExportName;
     string sSymbolSet;
     long nCharacter;
     string sFontName;
     short nCharSet;
     short nFamily;
     short nPitch;
     short nWeight;
     short nItalic;
    };
   };
   module frame {
    published struct DispatchInformation {
     string Command;
     short GroupId;
    };
    published interface XDispatchInformationProvider {
     interface ::com::sun::star::uno::XInterface;
     sequence< short > getSupportedCommandGroups();
     sequence< ::com::sun::star::frame::DispatchInformation > getConfigurableDispatchInformation([in] short CommandGroup);
    };
    published service Bibliography: ::com::sun::star::container::XNameAccess;
    published constants CommandGroup {
     const short APPLICATION = 1;
     const short CHART = 20;
     const short CONNECTOR = 22;
     const short CONTROLS = 25;
     const short DATA = 17;
     const short DOCUMENT = 3;
     const short DRAWING = 24;
     const short EDIT = 4;
     const short ENUMERATION = 16;
     const short EXPLORER = 21;
     const short FORMAT = 10;
     const short FRAME = 13;
     const short GRAPHIC = 14;
     const short IMAGE = 19;
     const short INSERT = 9;
     const short INTERNAL = 0;
     const short MACRO = 5;
     const short MATH = 7;
     const short MODIFY = 23;
     const short NAVIGATOR = 8;
     const short OPTIONS = 6;
     const short SPECIAL = 18;
     const short TABLE = 15;
     const short TEMPLATE = 11;
     const short TEXT = 12;
     const short VIEW = 2;
    };
    published service Components {
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published interface XDispatchResultListener;
    published interface XNotifyingDispatch {
     interface ::com::sun::star::frame::XDispatch;
     void dispatchWithNotification([in] ::com::sun::star::util::URL URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments, [in] ::com::sun::star::frame::XDispatchResultListener Listener);
    };
    published service ContentHandler {
     interface ::com::sun::star::frame::XNotifyingDispatch;
    };
    published interface XLoaderFactory {
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XContainerQuery;
    };
    published service ContentHandlerFactory: ::com::sun::star::frame::XLoaderFactory;
    published interface XComponentLoader {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::lang::XComponent loadComponentFromURL([in] string URL, [in] string TargetFrameName, [in] long SearchFlags, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments) raises (::com::sun::star::io::IOException, ::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XFrame;
    published interface XTerminateListener;
    published interface XDesktop {
     interface ::com::sun::star::uno::XInterface;
     boolean terminate();
     void addTerminateListener([in] ::com::sun::star::frame::XTerminateListener Listener);
     void removeTerminateListener([in] ::com::sun::star::frame::XTerminateListener Listener);
     ::com::sun::star::container::XEnumerationAccess getComponents();
     ::com::sun::star::lang::XComponent getCurrentComponent();
     ::com::sun::star::frame::XFrame getCurrentFrame();
    };
    published interface XFrameActionListener;
    published interface XFramesSupplier;
    published interface XFrame {
     interface ::com::sun::star::lang::XComponent;
     void initialize([in] ::com::sun::star::awt::XWindow xWindow);
     ::com::sun::star::awt::XWindow getContainerWindow();
     void setCreator([in] ::com::sun::star::frame::XFramesSupplier Creator);
     ::com::sun::star::frame::XFramesSupplier getCreator();
     string getName();
     void setName([in] string aName);
     ::com::sun::star::frame::XFrame findFrame([in] string aTargetFrameName, [in] long nSearchFlags);
     boolean isTop();
     void activate();
     void deactivate();
     boolean isActive();
     boolean setComponent([in] ::com::sun::star::awt::XWindow xComponentWindow, [in] ::com::sun::star::frame::XController xController);
     ::com::sun::star::awt::XWindow getComponentWindow();
     ::com::sun::star::frame::XController getController();
     void contextChanged();
     void addFrameActionListener([in] ::com::sun::star::frame::XFrameActionListener xListener);
     void removeFrameActionListener([in] ::com::sun::star::frame::XFrameActionListener xListener);
    };
    published interface XFrames;
    published interface XFramesSupplier {
     interface ::com::sun::star::frame::XFrame;
     ::com::sun::star::frame::XFrames getFrames();
     ::com::sun::star::frame::XFrame getActiveFrame();
     void setActiveFrame([in] ::com::sun::star::frame::XFrame Frame);
    };
    published interface XDesktop2 {
     interface ::com::sun::star::frame::XDispatchProvider;
     interface ::com::sun::star::frame::XDispatchProviderInterception;
     interface ::com::sun::star::frame::XFramesSupplier;
     interface ::com::sun::star::frame::XDesktop;
     interface ::com::sun::star::frame::XComponentLoader;
    };
    /** @deprecated */ published service Desktop: ::com::sun::star::frame::XDesktop2;
    /** @deprecated */ published interface XDesktopTask {
     interface ::com::sun::star::lang::XComponent;
     /** @deprecated */ void initialize([in] ::com::sun::star::awt::XWindow TaskWindow);
     /** @deprecated */ boolean close();
    };
    /** @deprecated */ published interface XWindowArranger {
     interface ::com::sun::star::uno::XInterface;
     /** @deprecated */ boolean hasArrangeCommand([in] short nCommand);
     /** @deprecated */ void arrange([in] short nCommand);
    };
    /** @deprecated */ published service DesktopTask {
     interface ::com::sun::star::frame::XDesktopTask;
     interface ::com::sun::star::frame::XFrame;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::frame::XWindowArranger;
     interface ::com::sun::star::frame::XFramesSupplier;
     [property, readonly] string Title;
     [property, readonly] boolean IsDesktop;
     [property] boolean IsVisible;
     [property] boolean IsFloating;
     [property] boolean IsAlwaysVisible;
     [property] ::com::sun::star::awt::Point Position;
     [property] ::com::sun::star::awt::Size Size;
    };
    /** @deprecated */ published service DesktopTasks {
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published interface XDispatchHelper {
     interface ::com::sun::star::uno::XInterface;
     any executeDispatch([in] ::com::sun::star::frame::XDispatchProvider DispatchProvider, [in] string URL, [in] string TargetFrameName, [in] long SearchFlags, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments);
    };
    published service DispatchHelper: ::com::sun::star::frame::XDispatchHelper;
    published service DispatchProvider {
     interface ::com::sun::star::frame::XDispatchProvider;
     [optional] interface ::com::sun::star::frame::XDispatchProviderInterception;
    };
    published interface XDispatchRecorder {
     interface ::com::sun::star::uno::XInterface;
     void startRecording([in] ::com::sun::star::frame::XFrame Frame);
     void endRecording();
     void recordDispatch([in] ::com::sun::star::util::URL URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments);
     void recordDispatchAsComment([in] ::com::sun::star::util::URL URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments);
     string getRecordedMacro();
    };
    published service DispatchRecorder: ::com::sun::star::frame::XDispatchRecorder;
    published interface XDispatchRecorderSupplier {
     interface ::com::sun::star::uno::XInterface;
     void setDispatchRecorder([in] ::com::sun::star::frame::XDispatchRecorder Recorder);
     ::com::sun::star::frame::XDispatchRecorder getDispatchRecorder();
     void dispatchAndRecord([in] ::com::sun::star::util::URL URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments, [in] ::com::sun::star::frame::XDispatch Dispatcher);
    };
    published service DispatchRecorderSupplier: ::com::sun::star::frame::XDispatchRecorderSupplier;
    published struct DispatchResultEvent: ::com::sun::star::lang::EventObject {
     short State;
     any Result;
    };
    published constants DispatchResultState {
     const short DONTKNOW = 2;
     const short FAILURE = 0;
     const short SUCCESS = 1;
    };
    published struct DispatchStatement {
     string aCommand;
     string aTarget;
     sequence< ::com::sun::star::beans::PropertyValue > aArgs;
     long nFlags;
     boolean bIsComment;
    };
   };
   module ucb {
    published interface XContent;
   };
   module frame {
    published interface XDocumentTemplates {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContent getContent();
     boolean storeTemplate([in] string GroupName, [in] string TemplateName, [in] ::com::sun::star::frame::XStorable Storable);
     boolean addTemplate([in] string GroupName, [in] string TemplateName, [in] string SourceURL);
     boolean removeTemplate([in] string GroupName, [in] string TemplateName);
     boolean renameTemplate([in] string GroupName, [in] string OldTemplateName, [in] string NewTemplateName);
     boolean addGroup([in] string GroupName);
     boolean removeGroup([in] string GroupName);
     boolean renameGroup([in] string OldGroupName, [in] string NewGroupName);
     void update();
    };
    published service DocumentTemplates: ::com::sun::star::frame::XDocumentTemplates;
    published struct FeatureStateEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::util::URL FeatureURL;
     string FeatureDescriptor;
     boolean IsEnabled;
     boolean Requery;
     any State;
    };
   };
   module task {
    published interface XStatusIndicator;
    published interface XStatusIndicatorFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::task::XStatusIndicator createStatusIndicator();
    };
   };
   module frame {
    published interface XFrame2 {
     interface ::com::sun::star::frame::XDispatchProvider;
     interface ::com::sun::star::frame::XDispatchInformationProvider;
     interface ::com::sun::star::frame::XDispatchProviderInterception;
     interface ::com::sun::star::frame::XFramesSupplier;
     interface ::com::sun::star::task::XStatusIndicatorFactory;
     [attribute, readonly] ::com::sun::star::container::XNameContainer UserDefinedAttributes;
     [attribute] string Title;
     [attribute] ::com::sun::star::frame::XDispatchRecorderSupplier DispatchRecorderSupplier;
     [attribute] ::com::sun::star::uno::XInterface LayoutManager;
    };
    published service Frame: ::com::sun::star::frame::XFrame2;
    published enum FrameAction {
     COMPONENT_ATTACHED = 0,
     COMPONENT_DETACHING = 1,
     COMPONENT_REATTACHED = 2,
     FRAME_ACTIVATED = 3,
     FRAME_DEACTIVATING = 4,
     CONTEXT_CHANGED = 5,
     FRAME_UI_ACTIVATED = 6,
     FRAME_UI_DEACTIVATING = 7
    };
    published struct FrameActionEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::frame::XFrame Frame;
     ::com::sun::star::frame::FrameAction Action;
    };
    published service FrameControl {
     service ::com::sun::star::awt::UnoControl;
     [property] string ComponentUrl;
     [property, readonly] string Frame;
    };
    published interface XLoadEventListener;
    published interface XFrameLoader {
     interface ::com::sun::star::uno::XInterface;
     void load([in] ::com::sun::star::frame::XFrame Frame, [in] string URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments, [in] ::com::sun::star::frame::XLoadEventListener Listener);
     void cancel();
    };
    published service FrameLoader {
     interface ::com::sun::star::frame::XFrameLoader;
     [optional] interface ::com::sun::star::lang::XInitialization;
     [optional] interface ::com::sun::star::container::XNamed;
    };
    published service FrameLoaderFactory: ::com::sun::star::frame::XLoaderFactory;
    published constants FrameSearchFlag {
     const long ALL = 23;
     /** @deprecated */ const long AUTO = 0;
     const long CHILDREN = 4;
     const long CREATE = 8;
     const long GLOBAL = 55;
     const long PARENT = 1;
     const long SELF = 2;
     const long SIBLINGS = 16;
     const long TASKS = 32;
    };
    published interface XFrames {
     interface ::com::sun::star::container::XIndexAccess;
     void append([in] ::com::sun::star::frame::XFrame xFrame);
     sequence< ::com::sun::star::frame::XFrame > queryFrames([in] long nSearchFlags);
     void remove([in] ::com::sun::star::frame::XFrame xFrame);
    };
    published service FramesContainer {
     interface ::com::sun::star::frame::XFrames;
    };
    published exception IllegalArgumentIOException: ::com::sun::star::io::IOException {
    };
    published interface XFrameActionListener {
     interface ::com::sun::star::lang::XEventListener;
     void frameAction([in] ::com::sun::star::frame::FrameActionEvent Action);
    };
   };
   module ui {
    published struct ConfigurationEvent: ::com::sun::star::container::ContainerEvent {
     string ResourceURL;
     any aInfo;
    };
   };
   module util {
    published interface XStringMapping {
     interface ::com::sun::star::uno::XInterface;
     boolean mapStrings([inout] sequence< string > Parameter);
    };
   };
   module frame {
    published service MediaTypeDetectionHelper: ::com::sun::star::util::XStringMapping;
    published interface XSynchronousFrameLoader {
     interface ::com::sun::star::uno::XInterface;
     boolean load([in] sequence< ::com::sun::star::beans::PropertyValue > Descriptor, [in] ::com::sun::star::frame::XFrame Frame);
     void cancel();
    };
    published interface XStatusListener {
     interface ::com::sun::star::lang::XEventListener;
     void statusChanged([in] ::com::sun::star::frame::FeatureStateEvent State);
    };
    published interface XUIControllerRegistration {
     interface ::com::sun::star::uno::XInterface;
     boolean hasController([in] string aCommandURL, [in] string aModelName);
     void registerController([in] string aCommandURL, [in] string aModelName, [in] string aControllerImplementationName);
     void deregisterController([in] string aCommandURL, [in] string aModelName);
    };
    published service ProtocolHandler {
     interface ::com::sun::star::frame::XDispatchProvider;
     [optional] interface ::com::sun::star::lang::XInitialization;
    };
    /** @deprecated */ published service Settings {
     interface ::com::sun::star::container::XNameAccess;
    };
   };
   module util {
    published interface XUpdatable {
     interface ::com::sun::star::uno::XInterface;
     void update();
    };
   };
   module frame {
    published service SynchronousFrameLoader {
     interface ::com::sun::star::frame::XSynchronousFrameLoader;
     [optional] interface ::com::sun::star::lang::XInitialization;
     [optional] interface ::com::sun::star::container::XNamed;
    };
    /** @deprecated */ published interface XTask {
     interface ::com::sun::star::frame::XFrame;
     /** @deprecated */ boolean close();
     /** @deprecated */ void tileWindows();
     /** @deprecated */ void arrangeWindowsVertical();
     /** @deprecated */ void arrangeWindowsHorizontal();
    };
    /** @deprecated */ published service Task {
     /** @deprecated */ interface ::com::sun::star::frame::XFrame;
     /** @deprecated */ interface ::com::sun::star::frame::XTask;
    };
    published service TemplateAccess {
     interface ::com::sun::star::frame::XDocumentTemplates;
     interface ::com::sun::star::lang::XLocalizable;
    };
    published exception TerminationVetoException: ::com::sun::star::uno::Exception {
    };
    published constants WindowArrange {
     const short CASCADE = 4;
     const short HORIZONTAL = 3;
     const short MAXIMIZE = 5;
     const short MINIMIZE = 6;
     const short TILE = 1;
     const short VERTICAL = 2;
    };
    /** @deprecated */ published interface XBrowseHistoryRegistry {
     interface ::com::sun::star::uno::XInterface;
     /** @deprecated */ void updateViewData([in] any Value);
     /** @deprecated */ void createNewEntry([in] string URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments, [in] string Title);
    };
    /** @deprecated */ published interface XComponentRegistry {
     interface ::com::sun::star::uno::XInterface;
     /** @deprecated */ ::com::sun::star::uno::XInterface createObject([in] string URL, [in] ::com::sun::star::uno::Uik Uik);
    };
    /** @deprecated */ published interface XConfigManager {
     interface ::com::sun::star::uno::XInterface;
     /** @deprecated */ void addPropertyChangeListener([in] string KeyName, [in] ::com::sun::star::beans::XPropertyChangeListener Listener);
     /** @deprecated */ void removePropertyChangeListener([in] string KeyName, [in] ::com::sun::star::beans::XPropertyChangeListener Listener);
     string substituteVariables([in] string Text);
     /** @deprecated */ void flush();
    };
    published interface XDispatchProviderInterceptor {
     interface ::com::sun::star::frame::XDispatchProvider;
     ::com::sun::star::frame::XDispatchProvider getSlaveDispatchProvider();
     void setSlaveDispatchProvider([in] ::com::sun::star::frame::XDispatchProvider NewDispatchProvider);
     ::com::sun::star::frame::XDispatchProvider getMasterDispatchProvider();
     void setMasterDispatchProvider([in] ::com::sun::star::frame::XDispatchProvider NewSupplier);
    };
    published interface XDispatchResultListener {
     interface ::com::sun::star::lang::XEventListener;
     void dispatchFinished([in] ::com::sun::star::frame::DispatchResultEvent Result);
    };
    /** @deprecated */ published interface XExtendedFilterDetection {
     interface ::com::sun::star::uno::XInterface;
     /** @deprecated */ string detect([in] string URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Argumentlist);
    };
    /** @deprecated */ published interface XFilterDetect {
     interface ::com::sun::star::uno::XInterface;
     string getContentType([in] string URL);
     boolean useExternBrowser([in] string URL);
    };
    /** @deprecated */ published interface XFrameLoaderQuery {
     interface ::com::sun::star::uno::XInterface;
     /** @deprecated */ sequence< string > getAvailableFilterNames();
     /** @deprecated */ sequence< ::com::sun::star::beans::PropertyValue > getLoaderProperties([in] string sFilterName);
     /** @deprecated */ string searchFilter([in] string sURL, [in] sequence< ::com::sun::star::beans::PropertyValue > seqArguments);
    };
    /** @deprecated */ published interface XFrameSetModel {
     interface ::com::sun::star::uno::XInterface;
     string getSource();
     void setSource([in] string Source);
    };
    published interface XInterceptorInfo {
     interface ::com::sun::star::uno::XInterface;
     sequence< string > getInterceptedURLs();
    };
    published interface XLoadEventListener {
     interface ::com::sun::star::lang::XEventListener;
     void loadFinished([in] ::com::sun::star::frame::XFrameLoader Loader);
     void loadCancelled([in] ::com::sun::star::frame::XFrameLoader Loader);
    };
    published interface XLoadable {
     interface ::com::sun::star::uno::XInterface;
     void initNew() raises (::com::sun::star::frame::DoubleInitializationException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
     void load([in] sequence< ::com::sun::star::beans::PropertyValue > lArguments) raises (::com::sun::star::frame::DoubleInitializationException, ::com::sun::star::io::IOException, ::com::sun::star::uno::Exception);
    };
    published interface XRecordableDispatch {
     interface ::com::sun::star::uno::XInterface;
     void dispatchAndRecord([in] ::com::sun::star::util::URL URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments, [in] ::com::sun::star::frame::XDispatchRecorder Recorder);
    };
    published interface XStorable2 {
     interface ::com::sun::star::frame::XStorable;
     void storeSelf([in] sequence< ::com::sun::star::beans::PropertyValue > lArguments) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::io::IOException);
    };
    published interface XSynchronousDispatch {
     interface ::com::sun::star::uno::XInterface;
     any dispatchWithReturnValue([in] ::com::sun::star::util::URL URL, [in] sequence< ::com::sun::star::beans::PropertyValue > Arguments);
    };
    /** @deprecated */ published interface XTasksSupplier {
     interface ::com::sun::star::uno::XInterface;
     /** @deprecated */ ::com::sun::star::container::XEnumerationAccess getTasks();
     /** @deprecated */ ::com::sun::star::frame::XTask getActiveTask();
    };
    published interface XTerminateListener {
     interface ::com::sun::star::lang::XEventListener;
     void queryTermination([in] ::com::sun::star::lang::EventObject Event) raises (::com::sun::star::frame::TerminationVetoException);
     void notifyTermination([in] ::com::sun::star::lang::EventObject Event);
    };
    /** @deprecated */ published interface XUrlList {
     interface ::com::sun::star::uno::XInterface;
     [attribute] sequence< string > List;
    };
    published singleton theDesktop: ::com::sun::star::frame::XDesktop2;
   };
   module graphic {
    published service GraphicDescriptor {
     interface ::com::sun::star::beans::XPropertySet;
     [property] byte GraphicType;
     [property] string MimeType;
     [property, optional] ::com::sun::star::awt::Size SizePixel;
     [property, optional] ::com::sun::star::awt::Size Size100thMM;
     [property, optional] byte BitsPerPixel;
     [property, optional] boolean Transparent;
     [property, optional] boolean Alpha;
     [property, optional] boolean Animated;
    };
    published interface XGraphic {
     interface ::com::sun::star::uno::XInterface;
     byte getType();
    };
    published service Graphic {
     service ::com::sun::star::graphic::GraphicDescriptor;
     interface ::com::sun::star::graphic::XGraphic;
    };
    published interface XGraphicProvider {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet queryGraphicDescriptor([in] ::com::sun::star::beans::PropertyValues MediaProperties) raises (::com::sun::star::io::IOException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::WrappedTargetException);
     ::com::sun::star::graphic::XGraphic queryGraphic([in] ::com::sun::star::beans::PropertyValues MediaProperties) raises (::com::sun::star::io::IOException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::WrappedTargetException);
     void storeGraphic([in] ::com::sun::star::graphic::XGraphic Graphic, [in] ::com::sun::star::beans::PropertyValues MediaProperties) raises (::com::sun::star::io::IOException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::WrappedTargetException);
    };
    published service GraphicProvider: ::com::sun::star::graphic::XGraphicProvider;
    published constants GraphicType {
     const byte EMPTY = 0;
     const byte PIXEL = 1;
     const byte VECTOR = 2;
    };
    published service MediaProperties {
     [property, optional] string URL;
     [property, optional] ::com::sun::star::io::XInputStream InputStream;
     [property, optional] ::com::sun::star::io::XStream OutputStream;
     [property, optional] string MimeType;
     [property, optional] ::com::sun::star::beans::PropertyValues FilterData;
    };
   };
   module i18n {
    published constants AmPmValue {
     const short AM = 0;
     const short PM = 1;
    };
    published struct Boundary {
     long startPos;
     long endPos;
    };
   };
   module linguistic2 {
    published interface XHyphenator;
   };
   module i18n {
    published struct LineBreakHyphenationOptions {
     ::com::sun::star::linguistic2::XHyphenator rHyphenator;
     ::com::sun::star::beans::PropertyValues aHyphenationOptions;
     long hyphenIndex;
    };
   };
   module linguistic2 {
    published interface XHyphenatedWord;
   };
   module i18n {
    published struct LineBreakResults {
     short breakType;
     long breakIndex;
     ::com::sun::star::linguistic2::XHyphenatedWord rHyphenatedWord;
    };
    published struct LineBreakUserOptions {
     string forbiddenBeginCharacters;
     string forbiddenEndCharacters;
     boolean applyForbiddenRules;
     boolean allowPunctuationOutsideMargin;
     boolean allowHyphenateEnglish;
    };
    published interface XBreakIterator {
     interface ::com::sun::star::uno::XInterface;
     long nextCharacters([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nCharacterIteratorMode, [in] long nCount, [out] long nDone);
     long previousCharacters([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nCharacterIteratorMode, [in] long nCount, [out] long nDone);
     ::com::sun::star::i18n::Boundary nextWord([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nWordType);
     ::com::sun::star::i18n::Boundary previousWord([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nWordType);
     ::com::sun::star::i18n::Boundary getWordBoundary([in] string aText, [in] long nPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nWordType, [in] boolean bPreferForward);
     /** @deprecated */ short getWordType([in] string aText, [in] long nPos, [in] ::com::sun::star::lang::Locale aLocale);
     boolean isBeginWord([in] string aText, [in] long nPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nWordType);
     boolean isEndWord([in] string aText, [in] long nPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nWordType);
     long beginOfSentence([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale);
     long endOfSentence([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale);
     ::com::sun::star::i18n::LineBreakResults getLineBreak([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] long nMinBreakPos, [in] ::com::sun::star::i18n::LineBreakHyphenationOptions aHyphOptions, [in] ::com::sun::star::i18n::LineBreakUserOptions aUserOptions);
     long beginOfScript([in] string aText, [in] long nStartPos, [in] short nScriptType);
     long endOfScript([in] string aText, [in] long nStartPos, [in] short nScriptType);
     long nextScript([in] string aText, [in] long nStartPos, [in] short nScriptType);
     long previousScript([in] string aText, [in] long nStartPos, [in] short nScriptType);
     short getScriptType([in] string aText, [in] long nPos);
     long beginOfCharBlock([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nCharType);
     long endOfCharBlock([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nCharType);
     long nextCharBlock([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nCharType);
     long previousCharBlock([in] string aText, [in] long nStartPos, [in] ::com::sun::star::lang::Locale aLocale, [in] short nCharType);
    };
    published service BreakIterator: ::com::sun::star::i18n::XBreakIterator;
    published constants BreakType {
     const short HANGINGPUNCTUATION = 3;
     const short HYPHENATION = 2;
     const short WORDBOUNDARY = 1;
    };
    published constants CTLScriptType {
     const short CTL_ARABIC = 2;
     const short CTL_HEBREW = 1;
     const short CTL_INDIC = 4;
     const short CTL_THAI = 3;
     const short CTL_UNKNOWN = 0;
    };
    published struct CalendarItem {
     string ID;
     string AbbrevName;
     string FullName;
    };
    published struct Calendar {
     sequence< ::com::sun::star::i18n::CalendarItem > Days;
     sequence< ::com::sun::star::i18n::CalendarItem > Months;
     sequence< ::com::sun::star::i18n::CalendarItem > Eras;
     string StartOfWeek;
     short MinimumNumberOfDaysForFirstWeek;
     boolean Default;
     string Name;
    };
    published struct CalendarItem2: ::com::sun::star::i18n::CalendarItem {
     string NarrowName;
    };
    published struct Calendar2 {
     sequence< ::com::sun::star::i18n::CalendarItem2 > Days;
     sequence< ::com::sun::star::i18n::CalendarItem2 > Months;
     sequence< ::com::sun::star::i18n::CalendarItem2 > GenitiveMonths;
     sequence< ::com::sun::star::i18n::CalendarItem2 > PartitiveMonths;
     sequence< ::com::sun::star::i18n::CalendarItem2 > Eras;
     string StartOfWeek;
     short MinimumNumberOfDaysForFirstWeek;
     boolean Default;
     string Name;
    };
    published constants CalendarDisplayCode {
     const long LONG_DAY = 2;
     const long LONG_DAY_NAME = 4;
     const long LONG_ERA = 12;
     const long LONG_GENITIVE_MONTH_NAME = 18;
     const long LONG_MONTH = 6;
     const long LONG_MONTH_NAME = 8;
     const long LONG_PARTITIVE_MONTH_NAME = 21;
     const long LONG_QUARTER = 16;
     const long LONG_YEAR = 10;
     const long LONG_YEAR_AND_ERA = 14;
     const long NARROW_DAY_NAME = 23;
     const long NARROW_GENITIVE_MONTH_NAME = 19;
     const long NARROW_MONTH_NAME = 24;
     const long NARROW_PARTITIVE_MONTH_NAME = 22;
     const long SHORT_DAY = 1;
     const long SHORT_DAY_NAME = 3;
     const long SHORT_ERA = 11;
     const long SHORT_GENITIVE_MONTH_NAME = 17;
     const long SHORT_MONTH = 5;
     const long SHORT_MONTH_NAME = 7;
     const long SHORT_PARTITIVE_MONTH_NAME = 20;
     const long SHORT_QUARTER = 15;
     const long SHORT_YEAR = 9;
     const long SHORT_YEAR_AND_ERA = 13;
    };
    published constants CalendarDisplayIndex {
     const short AM_PM = 0;
     const short DAY = 1;
     const short ERA = 4;
     const short GENITIVE_MONTH = 5;
     const short MONTH = 2;
     const short PARTITIVE_MONTH = 6;
     const short YEAR = 3;
    };
    published constants CalendarFieldIndex {
     const short AM_PM = 0;
     const short DAY_OF_MONTH = 1;
     const short DAY_OF_WEEK = 2;
     const short DAY_OF_YEAR = 3;
     const short DST_OFFSET = 4;
     const short DST_OFFSET_SECOND_MILLIS = 16;
     const short ERA = 13;
     const short FIELD_COUNT = 15;
     const short FIELD_COUNT2 = 17;
     const short HOUR = 5;
     const short MILLISECOND = 8;
     const short MINUTE = 6;
     const short MONTH = 12;
     const short SECOND = 7;
     const short WEEK_OF_MONTH = 9;
     const short WEEK_OF_YEAR = 10;
     const short YEAR = 11;
     const short ZONE_OFFSET = 14;
     const short ZONE_OFFSET_SECOND_MILLIS = 15;
    };
    published interface XCollator {
     interface ::com::sun::star::uno::XInterface;
     long compareSubstring([in] string aStr1, [in] long nOff1, [in] long nLen1, [in] string aStr2, [in] long nOff2, [in] long nLen2);
     long compareString([in] string aStr1, [in] string aStr2);
     long loadDefaultCollator([in] ::com::sun::star::lang::Locale aLocale, [in] long nCollatorOptions);
     long loadCollatorAlgorithm([in] string aAlgorithmName, [in] ::com::sun::star::lang::Locale aLocale, [in] long nCollatorOptions);
     sequence< string > listCollatorAlgorithms([in] ::com::sun::star::lang::Locale aLocale);
     void loadCollatorAlgorithmWithEndUserOption([in] string aAlgorithmName, [in] ::com::sun::star::lang::Locale aLocale, [in] sequence< long > aCollatorOptions);
     sequence< long > listCollatorOptions([in] string aAlgorithmName);
    };
    published service ChapterCollator: ::com::sun::star::i18n::XCollator;
    published constants CharType {
     const short ANY_CHAR = 0;
     const short COMBINING_SPACING_MARK = 8;
     const short CONNECTOR_PUNCTUATION = 22;
     const short CONTROL = 15;
     const short CURRENCY_SYMBOL = 25;
     const short DASH_PUNCTUATION = 19;
     const short DECIMAL_DIGIT_NUMBER = 9;
     const short ENCLOSING_MARK = 7;
     const short END_PUNCTUATION = 21;
     const short FINAL_PUNCTUATION = 29;
     const short FORMAT = 16;
     const short GENERAL_TYPES_COUNT = 30;
     const short INITIAL_PUNCTUATION = 28;
     const short LETTER_NUMBER = 10;
     const short LINE_SEPARATOR = 13;
     const short LOWERCASE_LETTER = 2;
     const short MATH_SYMBOL = 24;
     const short MODIFIER_LETTER = 4;
     const short MODIFIER_SYMBOL = 26;
     const short NON_SPACING_MARK = 6;
     const short OTHER_LETTER = 5;
     const short OTHER_NUMBER = 11;
     const short OTHER_PUNCTUATION = 23;
     const short OTHER_SYMBOL = 27;
     const short PARAGRAPH_SEPARATOR = 14;
     const short PRIVATE_USE = 17;
     const short SPACE_SEPARATOR = 12;
     const short START_PUNCTUATION = 20;
     const short SURROGATE = 18;
     const short TITLECASE_LETTER = 3;
     const short UPPERCASE_LETTER = 1;
    };
    published struct ParseResult {
     long LeadingWhiteSpace;
     long EndPos;
     long CharLen;
     double Value;
     long TokenType;
     long StartFlags;
     long ContFlags;
     string DequotedNameOrString;
    };
    published interface XCharacterClassification {
     interface ::com::sun::star::uno::XInterface;
     string toUpper([in] string aText, [in] long nPos, [in] long nCount, [in] ::com::sun::star::lang::Locale aLocale);
     string toLower([in] string aText, [in] long nPos, [in] long nCount, [in] ::com::sun::star::lang::Locale aLocale);
     string toTitle([in] string aText, [in] long nPos, [in] long nCount, [in] ::com::sun::star::lang::Locale aLocale);
     short getType([in] string aText, [in] long nPos);
     short getCharacterDirection([in] string aText, [in] long nPos);
     short getScript([in] string aText, [in] long nPos);
     long getCharacterType([in] string aText, [in] long nPos, [in] ::com::sun::star::lang::Locale aLocale);
     long getStringType([in] string aText, [in] long nPos, [in] long nCount, [in] ::com::sun::star::lang::Locale aLocale);
     ::com::sun::star::i18n::ParseResult parseAnyToken([in] string aText, [in] long nPos, [in] ::com::sun::star::lang::Locale aLocale, [in] long nStartCharFlags, [in] string aUserDefinedCharactersStart, [in] long nContCharFlags, [in] string aUserDefinedCharactersCont);
     ::com::sun::star::i18n::ParseResult parsePredefinedToken([in] long nTokenType, [in] string aText, [in] long nPos, [in] ::com::sun::star::lang::Locale aLocale, [in] long nStartCharFlags, [in] string aUserDefinedCharactersStart, [in] long nContCharFlags, [in] string aUserDefinedCharactersCont);
    };
    published service CharacterClassification: ::com::sun::star::i18n::XCharacterClassification;
    published constants CharacterIteratorMode {
     const short SKIPCELL = 1;
     const short SKIPCHARACTER = 0;
     const short SKIPCONTROLCHARACTER = 2;
    };
    published service Collator: ::com::sun::star::i18n::XCollator;
    published constants CollatorOptions {
     const short CollatorOptions_IGNORE_CASE = 1;
     const short CollatorOptions_IGNORE_CASE_ACCENT = 8;
     const short CollatorOptions_IGNORE_KANA = 2;
     const short CollatorOptions_IGNORE_WIDTH = 4;
    };
    published struct Currency {
     string ID;
     string Symbol;
     string BankSymbol;
     string Name;
     boolean Default;
     boolean UsedInCompatibleFormatCodes;
     short DecimalPlaces;
    };
    published struct Currency2: ::com::sun::star::i18n::Currency {
     boolean LegacyOnly;
    };
    published enum DirectionProperty {
     LEFT_TO_RIGHT = 0,
     RIGHT_TO_LEFT = 1,
     EUROPEAN_NUMBER = 2,
     EUROPEAN_NUMBER_SEPARATOR = 3,
     EUROPEAN_NUMBER_TERMINATOR = 4,
     ARABIC_NUMBER = 5,
     COMMON_NUMBER_SEPARATOR = 6,
     BLOCK_SEPARATOR = 7,
     SEGMENT_SEPARATOR = 8,
     WHITE_SPACE_NEUTRAL = 9,
     OTHER_NEUTRAL = 10,
     LEFT_TO_RIGHT_EMBEDDING = 11,
     LEFT_TO_RIGHT_OVERRIDE = 12,
     RIGHT_TO_LEFT_ARABIC = 13,
     RIGHT_TO_LEFT_EMBEDDING = 14,
     RIGHT_TO_LEFT_OVERRIDE = 15,
     POP_DIRECTIONAL_FORMAT = 16,
     DIR_NON_SPACING_MARK = 17,
     BOUNDARY_NEUTRAL = 18
    };
    published struct ForbiddenCharacters {
     string beginLine;
     string endLine;
    };
    published struct FormatElement {
     string formatCode;
     string formatName;
     string formatKey;
     string formatType;
     string formatUsage;
     short formatIndex;
     boolean isDefault;
    };
    published struct Implementation {
     string unoID;
     boolean isDefault;
    };
    published interface XIndexEntrySupplier {
     interface ::com::sun::star::uno::XInterface;
     string getIndexCharacter([in] string aIndexEntry, [in] ::com::sun::star::lang::Locale aLocale, [in] string aSortAlgorithm);
     string getIndexFollowPageWord([in] boolean bMorePages, [in] ::com::sun::star::lang::Locale aLocale);
    };
    published interface XExtendedIndexEntrySupplier {
     interface ::com::sun::star::i18n::XIndexEntrySupplier;
     sequence< ::com::sun::star::lang::Locale > getLocaleList();
     sequence< string > getAlgorithmList([in] ::com::sun::star::lang::Locale aLocale);
     boolean usePhoneticEntry([in] ::com::sun::star::lang::Locale aLocale);
     string getPhoneticCandidate([in] string aIndexEntry, [in] ::com::sun::star::lang::Locale aLocale);
     boolean loadAlgorithm([in] ::com::sun::star::lang::Locale aLocale, [in] string aIndexAlgorithm, [in] long nCollatorOptions);
     string getIndexKey([in] string aIndexEntry, [in] string aPhoneticEntry, [in] ::com::sun::star::lang::Locale aLocale);
     short compareIndexEntry([in] string aIndexEntry1, [in] string aPhoneticEntry1, [in] ::com::sun::star::lang::Locale aLocale1, [in] string aIndexEntry2, [in] string aPhoneticEntry2, [in] ::com::sun::star::lang::Locale aLocale2);
    };
    published service IndexEntrySupplier: ::com::sun::star::i18n::XExtendedIndexEntrySupplier;
    published constants InputSequenceCheckMode {
     const short BASIC = 1;
     const short PASSTHROUGH = 0;
     const short STRICT = 2;
    };
    published interface XInputSequenceChecker {
     interface ::com::sun::star::uno::XInterface;
     boolean checkInputSequence([in] string aText, [in] long nPos, [in] char cInputChar, [in] short nInputCheckMode);
    };
    published interface XExtendedInputSequenceChecker {
     interface ::com::sun::star::i18n::XInputSequenceChecker;
     long correctInputSequence([inout] string aText, [in] long nPos, [in] char cInputChar, [in] short nInputCheckMode);
    };
    published service InputSequenceChecker: ::com::sun::star::i18n::XExtendedInputSequenceChecker;
    published constants KCharacterType {
     const long ALPHA = 14;
     const long BASE_FORM = 64;
     const long CONTROL = 16;
     const long DIGIT = 1;
     const long LETTER = 128;
     const long LOWER = 4;
     const long PRINTABLE = 32;
     const long TITLE_CASE = 8;
     const long UPPER = 2;
    };
    published constants KNumberFormatType {
     const short LONG = 3;
     const short MEDIUM = 2;
     const short SHORT = 1;
    };
    published constants KNumberFormatUsage {
     const short CURRENCY = 8;
     const short DATE = 1;
     const short DATE_TIME = 3;
     const short FIXED_NUMBER = 4;
     const short FRACTION_NUMBER = 5;
     const short PERCENT_NUMBER = 6;
     const short SCIENTIFIC_NUMBER = 7;
     const short TIME = 2;
    };
    published constants KParseTokens {
     const long ANY_ALNUM = 61447;
     const long ANY_ALPHA = 45059;
     const long ANY_DIGIT = 16388;
     const long ANY_LETTER = 241667;
     const long ANY_LETTER_OR_NUMBER = 1044487;
     const long ANY_NUMBER = 802820;
     const long ASC_ALNUM = 7;
     const long ASC_ALPHA = 3;
     const long ASC_ANY_BUT_CONTROL = 1024;
     const long ASC_COLON = 64;
     const long ASC_CONTROL = 512;
     const long ASC_DIGIT = 4;
     const long ASC_DOLLAR = 16;
     const long ASC_DOT = 32;
     const long ASC_LOALPHA = 2;
     const long ASC_OTHER = 2048;
     const long ASC_UNDERSCORE = 8;
     const long ASC_UPALPHA = 1;
     const long IGNORE_LEADING_WS = 1073741824;
     const long TWO_DOUBLE_QUOTES_BREAK_STRING = 268435456;
     const long UNI_ALNUM = 61440;
     const long UNI_ALPHA = 45056;
     const long UNI_DIGIT = 16384;
     const long UNI_LETTER = 241664;
     const long UNI_LETTER_NUMBER = 262144;
     const long UNI_LOALPHA = 8192;
     const long UNI_MODIFIER_LETTER = 65536;
     const long UNI_NUMBER = 802816;
     const long UNI_OTHER = 536870912;
     const long UNI_OTHER_LETTER = 131072;
     const long UNI_OTHER_NUMBER = 524288;
     const long UNI_TITLE_ALPHA = 32768;
     const long UNI_UPALPHA = 4096;
    };
    published constants KParseType {
     const long ANY_NUMBER = 96;
     const long ASC_NUMBER = 32;
     const long BOOLEAN = 2;
     const long DOUBLE_QUOTE_STRING = 16;
     const long IDENTNAME = 4;
     const long MISSING_QUOTE = 1073741824;
     const long ONE_SINGLE_CHAR = 1;
     const long SINGLE_QUOTE_NAME = 8;
     const long UNI_NUMBER = 64;
    };
    published struct LanguageCountryInfo {
     string Language;
     string LanguageDefaultName;
     string Country;
     string CountryDefaultName;
     string Variant;
    };
    published interface XCalendar {
     interface ::com::sun::star::uno::XInterface;
     void loadDefaultCalendar([in] ::com::sun::star::lang::Locale rLocale);
     void loadCalendar([in] string uniqueID, [in] ::com::sun::star::lang::Locale rLocale);
     ::com::sun::star::i18n::Calendar getLoadedCalendar();
     sequence< string > getAllCalendars([in] ::com::sun::star::lang::Locale rLocale);
     string getUniqueID();
     void setDateTime([in] double nTimeInDays);
     double getDateTime();
     void setValue([in] short nCalendarFieldIndex, [in] short nValue);
     short getValue([in] short nCalendarFieldIndex);
     boolean isValid();
     void addValue([in] short nCalendarFieldIndex, [in] long nAmount);
     short getFirstDayOfWeek();
     void setFirstDayOfWeek([in] short nDay);
     void setMinimumNumberOfDaysForFirstWeek([in] short nDays);
     short getMinimumNumberOfDaysForFirstWeek();
     short getNumberOfMonthsInYear();
     short getNumberOfDaysInWeek();
     sequence< ::com::sun::star::i18n::CalendarItem > getMonths();
     sequence< ::com::sun::star::i18n::CalendarItem > getDays();
     string getDisplayName([in] short nCalendarDisplayIndex, [in] short nIdx, [in] short nNameType);
    };
    published interface XExtendedCalendar {
     interface ::com::sun::star::i18n::XCalendar;
     string getDisplayString([in] long nCalendarDisplayCode, [in] short nNativeNumberMode);
    };
    published interface XCalendar3 {
     interface ::com::sun::star::i18n::XExtendedCalendar;
     ::com::sun::star::i18n::Calendar2 getLoadedCalendar2();
     sequence< ::com::sun::star::i18n::CalendarItem2 > getDays2();
     sequence< ::com::sun::star::i18n::CalendarItem2 > getMonths2();
     sequence< ::com::sun::star::i18n::CalendarItem2 > getGenitiveMonths2();
     sequence< ::com::sun::star::i18n::CalendarItem2 > getPartitiveMonths2();
    };
    published service LocaleCalendar: ::com::sun::star::i18n::XCalendar3;
    published struct LocaleDataItem {
     string unoID;
     string dateSeparator;
     string thousandSeparator;
     string decimalSeparator;
     string timeSeparator;
     string time100SecSeparator;
     string listSeparator;
     string quotationStart;
     string quotationEnd;
     string doubleQuotationStart;
     string doubleQuotationEnd;
     string timeAM;
     string timePM;
     string measurementSystem;
     string LongDateDayOfWeekSeparator;
     string LongDateDaySeparator;
     string LongDateMonthSeparator;
     string LongDateYearSeparator;
    };
    published interface XLocaleData {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::i18n::LanguageCountryInfo getLanguageCountryInfo([in] ::com::sun::star::lang::Locale aLocale);
     ::com::sun::star::i18n::LocaleDataItem getLocaleItem([in] ::com::sun::star::lang::Locale aLocale);
     sequence< ::com::sun::star::i18n::Calendar > getAllCalendars([in] ::com::sun::star::lang::Locale aLocale);
     sequence< ::com::sun::star::i18n::Currency > getAllCurrencies([in] ::com::sun::star::lang::Locale aLocale);
     sequence< ::com::sun::star::i18n::FormatElement > getAllFormats([in] ::com::sun::star::lang::Locale aLocale);
     sequence< ::com::sun::star::i18n::Implementation > getCollatorImplementations([in] ::com::sun::star::lang::Locale aLocale);
     sequence< string > getSearchOptions([in] ::com::sun::star::lang::Locale aLocale);
     sequence< string > getCollationOptions([in] ::com::sun::star::lang::Locale aLocale);
     sequence< string > getTransliterations([in] ::com::sun::star::lang::Locale aLocale);
     ::com::sun::star::i18n::ForbiddenCharacters getForbiddenCharacters([in] ::com::sun::star::lang::Locale aLocale);
     sequence< string > getReservedWord([in] ::com::sun::star::lang::Locale aLocale);
     sequence< ::com::sun::star::lang::Locale > getAllInstalledLocaleNames();
    };
    published interface XLocaleData2 {
     interface ::com::sun::star::i18n::XLocaleData;
     sequence< ::com::sun::star::i18n::Currency2 > getAllCurrencies2([in] ::com::sun::star::lang::Locale aLocale);
    };
    published interface XLocaleData3 {
     interface ::com::sun::star::i18n::XLocaleData2;
     sequence< ::com::sun::star::i18n::Calendar2 > getAllCalendars2([in] ::com::sun::star::lang::Locale aLocale);
    };
    published interface XLocaleData4 {
     interface ::com::sun::star::i18n::XLocaleData3;
     sequence< string > getDateAcceptancePatterns([in] ::com::sun::star::lang::Locale aLocale);
    };
    published service LocaleData: ::com::sun::star::i18n::XLocaleData4;
    /** @deprecated */ published constants LocaleItem {
     const short COUNT = 17;
     const short DATE_SEPARATOR = 0;
     const short DECIMAL_SEPARATOR = 2;
     const short DOUBLE_QUOTATION_END = 9;
     const short DOUBLE_QUOTATION_START = 8;
     const short LIST_SEPARATOR = 5;
     const short LONG_DATE_DAY_OF_WEEK_SEPARATOR = 13;
     const short LONG_DATE_DAY_SEPARATOR = 14;
     const short LONG_DATE_MONTH_SEPARATOR = 15;
     const short LONG_DATE_YEAR_SEPARATOR = 16;
     const short MEASUREMENT_SYSTEM = 10;
     const short SINGLE_QUOTATION_END = 7;
     const short SINGLE_QUOTATION_START = 6;
     const short THOUSAND_SEPARATOR = 1;
     const short TIME_100SEC_SEPARATOR = 4;
     const short TIME_AM = 11;
     const short TIME_PM = 12;
     const short TIME_SEPARATOR = 3;
    };
    published constants Months {
     const short APRIL = 3;
     const short AUGUST = 7;
     const short DECEMBER = 11;
     const short FEBURARY = 1;
     const short JANUARY = 0;
     const short JULY = 6;
     const short JUNE = 5;
     const short MARCH = 2;
     const short MAY = 4;
     const short NOVEMBER = 10;
     const short OCTOBER = 9;
     const short SEPTEMBER = 8;
    };
    published exception MultipleCharsOutputException: ::com::sun::star::uno::Exception {
    };
    published constants NativeNumberMode {
     const short NATNUM0 = 0;
     const short NATNUM1 = 1;
     const short NATNUM10 = 10;
     const short NATNUM11 = 11;
     const short NATNUM2 = 2;
     const short NATNUM3 = 3;
     const short NATNUM4 = 4;
     const short NATNUM5 = 5;
     const short NATNUM6 = 6;
     const short NATNUM7 = 7;
     const short NATNUM8 = 8;
     const short NATNUM9 = 9;
    };
    published struct NativeNumberXmlAttributes {
     ::com::sun::star::lang::Locale Locale;
     string Format;
     string Style;
    };
    published interface XNativeNumberSupplier {
     interface ::com::sun::star::uno::XInterface;
     string getNativeNumberString([in] string aNumberString, [in] ::com::sun::star::lang::Locale aLocale, [in] short nNativeNumberMode);
     boolean isValidNatNum([in] ::com::sun::star::lang::Locale aLocale, [in] short nNativeNumberMode);
     ::com::sun::star::i18n::NativeNumberXmlAttributes convertToXmlAttributes([in] ::com::sun::star::lang::Locale aLocale, [in] short nNativeNumberMode);
     short convertFromXmlAttributes([in] ::com::sun::star::i18n::NativeNumberXmlAttributes aAttr);
    };
    published service NativeNumberSupplier: ::com::sun::star::i18n::XNativeNumberSupplier;
    published struct NumberFormatCode {
     short Type;
     short Usage;
     string Code;
     string DefaultName;
     string NameID;
     short Index;
     boolean Default;
    };
    published constants NumberFormatIndex {
     const short BOOLEAN = 48;
     const short CURRENCY_1000DEC2 = 13;
     const short CURRENCY_1000DEC2_CCC = 16;
     const short CURRENCY_1000DEC2_DASHED = 17;
     const short CURRENCY_1000DEC2_RED = 15;
     const short CURRENCY_1000INT = 12;
     const short CURRENCY_1000INT_RED = 14;
     const short CURRENCY_END = 17;
     const short CURRENCY_START = 12;
     const short DATETIME_END = 47;
     const short DATETIME_START = 46;
     const short DATETIME_SYSTEM_SHORT_HHMM = 46;
     const short DATETIME_SYS_DDMMYYYY_HHMMSS = 47;
     const short DATE_DEF_NNDDMMMYY = 28;
     const short DATE_DIN_DMMMMYYYY = 26;
     const short DATE_DIN_DMMMYYYY = 24;
     const short DATE_DIN_MMDD = 31;
     const short DATE_DIN_YYMMDD = 32;
     const short DATE_DIN_YYYYMMDD = 33;
     const short DATE_END = 38;
     const short DATE_MMMM = 36;
     const short DATE_QQJJ = 37;
     const short DATE_START = 18;
     const short DATE_SYSTEM_LONG = 19;
     const short DATE_SYSTEM_SHORT = 18;
     const short DATE_SYS_DDMMM = 35;
     const short DATE_SYS_DDMMYY = 20;
     const short DATE_SYS_DDMMYYYY = 21;
     const short DATE_SYS_DMMMMYYYY = 25;
     const short DATE_SYS_DMMMYY = 22;
     const short DATE_SYS_DMMMYYYY = 23;
     const short DATE_SYS_MMYY = 34;
     const short DATE_SYS_NNDMMMMYYYY = 29;
     const short DATE_SYS_NNDMMMYY = 27;
     const short DATE_SYS_NNNNDMMMMYYYY = 30;
     const short DATE_WW = 38;
     const short FRACTION_1 = 10;
     const short FRACTION_2 = 11;
     const short FRACTION_END = 11;
     const short FRACTION_START = 10;
     const short INDEX_TABLE_ENTRIES = 50;
     const short NUMBER_1000DEC2 = 4;
     const short NUMBER_1000INT = 3;
     const short NUMBER_DEC2 = 2;
     const short NUMBER_END = 5;
     const short NUMBER_INT = 1;
     const short NUMBER_STANDARD = 0;
     const short NUMBER_START = 0;
     const short NUMBER_SYSTEM = 5;
     const short PERCENT_DEC2 = 9;
     const short PERCENT_END = 9;
     const short PERCENT_INT = 8;
     const short PERCENT_START = 8;
     const short SCIENTIFIC_000E00 = 7;
     const short SCIENTIFIC_000E000 = 6;
     const short SCIENTIFIC_END = 7;
     const short SCIENTIFIC_START = 6;
     const short TEXT = 49;
     const short TIME_END = 45;
     const short TIME_HHMM = 39;
     const short TIME_HHMMAMPM = 41;
     const short TIME_HHMMSS = 40;
     const short TIME_HHMMSSAMPM = 42;
     const short TIME_HH_MMSS = 43;
     const short TIME_HH_MMSS00 = 45;
     const short TIME_MMSS00 = 44;
     const short TIME_START = 39;
    };
    published interface XNumberFormatCode {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::i18n::NumberFormatCode getDefault([in] short nFormatType, [in] short nFormatUsage, [in] ::com::sun::star::lang::Locale rLocale);
     ::com::sun::star::i18n::NumberFormatCode getFormatCode([in] short nFormatIndex, [in] ::com::sun::star::lang::Locale rLocale);
     sequence< ::com::sun::star::i18n::NumberFormatCode > getAllFormatCode([in] short nFormatUsage, [in] ::com::sun::star::lang::Locale rLocale);
     sequence< ::com::sun::star::i18n::NumberFormatCode > getAllFormatCodes([in] ::com::sun::star::lang::Locale rLocale);
    };
    published service NumberFormatMapper: ::com::sun::star::i18n::XNumberFormatCode;
    published constants ScriptDirection {
     const short LEFT_TO_RIGHT = 1;
     const short NEUTRAL = 0;
     const short RIGHT_TO_LEFT = 2;
    };
    published constants ScriptType {
     const short ASIAN = 2;
     const short COMPLEX = 3;
     const short LATIN = 1;
     const short WEAK = 4;
    };
    published struct TextConversionResult {
     ::com::sun::star::i18n::Boundary Boundary;
     sequence< string > Candidates;
    };
    published interface XTextConversion {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::i18n::TextConversionResult getConversions([in] string aText, [in] long nStartPos, [in] long nLength, [in] ::com::sun::star::lang::Locale Locale, [in] short nTextConversionType, [in] long nTextConversionOptions) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::NoSupportException);
     string getConversion([in] string aText, [in] long nStartPos, [in] long nLength, [in] ::com::sun::star::lang::Locale Locale, [in] short nTextConversionType, [in] long nTextConversionOptions) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::NoSupportException);
     boolean interactiveConversion([in] ::com::sun::star::lang::Locale Locale, [in] short nTextConversionType, [in] long nTextConversionOptions) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::NoSupportException);
    };
    published interface XExtendedTextConversion {
     interface ::com::sun::star::i18n::XTextConversion;
     string getConversionWithOffset([in] string aText, [in] long nStartPos, [in] long nLength, [in] ::com::sun::star::lang::Locale aLocale, [in] short nTextConversionType, [in] long nTextConversionOptions, [out] sequence< long > rOffset) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::NoSupportException);
    };
    published service TextConversion: ::com::sun::star::i18n::XExtendedTextConversion;
    published constants TextConversionOption {
     const long CHARACTER_BY_CHARACTER = 1;
     const long IGNORE_POST_POSITIONAL_WORD = 2;
     const long NONE = 0;
     const long USE_CHARACTER_VARIANTS = 2;
    };
    published constants TextConversionType {
     const short TO_HANGUL = 1;
     const short TO_HANJA = 2;
     const short TO_SCHINESE = 3;
     const short TO_TCHINESE = 4;
    };
    published enum TransliterationModules {
     UPPERCASE_LOWERCASE = 1,
     LOWERCASE_UPPERCASE = 2,
     HALFWIDTH_FULLWIDTH = 3,
     FULLWIDTH_HALFWIDTH = 4,
     KATAKANA_HIRAGANA = 5,
     HIRAGANA_KATAKANA = 6,
     NumToTextLower_zh_CN = 7,
     NumToTextUpper_zh_CN = 8,
     NumToTextLower_zh_TW = 9,
     NumToTextUpper_zh_TW = 10,
     NumToTextFormalHangul_ko = 11,
     NumToTextFormalLower_ko = 12,
     NumToTextFormalUpper_ko = 13,
     NON_IGNORE_MASK = 255,
     IGNORE_MASK = -256,
     IGNORE_CASE = 256,
     IGNORE_KANA = 512,
     IGNORE_WIDTH = 1024,
     ignoreTraditionalKanji_ja_JP = 4096,
     ignoreTraditionalKana_ja_JP = 8192,
     ignoreMinusSign_ja_JP = 16384,
     ignoreIterationMark_ja_JP = 32768,
     ignoreSeparator_ja_JP = 65536,
     ignoreZiZu_ja_JP = 131072,
     ignoreBaFa_ja_JP = 262144,
     ignoreTiJi_ja_JP = 524288,
     ignoreHyuByu_ja_JP = 1048576,
     ignoreSeZe_ja_JP = 2097152,
     ignoreIandEfollowedByYa_ja_JP = 4194304,
     ignoreKiKuFollowedBySa_ja_JP = 8388608,
     ignoreSize_ja_JP = 16777216,
     ignoreProlongedSoundMark_ja_JP = 33554432,
     ignoreMiddleDot_ja_JP = 67108864,
     ignoreSpace_ja_JP = 134217728,
     smallToLarge_ja_JP = 268435456,
     largeToSmall_ja_JP = 536870912,
     END_OF_MODULE = 0
    };
    published enum TransliterationModulesNew {
     UPPERCASE_LOWERCASE = 1,
     LOWERCASE_UPPERCASE = 2,
     HALFWIDTH_FULLWIDTH = 3,
     FULLWIDTH_HALFWIDTH = 4,
     KATAKANA_HIRAGANA = 5,
     HIRAGANA_KATAKANA = 6,
     IGNORE_CASE = 7,
     IGNORE_KANA = 8,
     IGNORE_WIDTH = 9,
     ignoreTraditionalKanji_ja_JP = 10,
     ignoreTraditionalKana_ja_JP = 11,
     ignoreMinusSign_ja_JP = 12,
     ignoreIterationMark_ja_JP = 13,
     ignoreSeparator_ja_JP = 14,
     ignoreZiZu_ja_JP = 15,
     ignoreBaFa_ja_JP = 16,
     ignoreTiJi_ja_JP = 17,
     ignoreHyuByu_ja_JP = 18,
     ignoreSeZe_ja_JP = 19,
     ignoreIandEfollowedByYa_ja_JP = 20,
     ignoreKiKuFollowedBySa_ja_JP = 21,
     ignoreSize_ja_JP = 22,
     ignoreProlongedSoundMark_ja_JP = 23,
     ignoreMiddleDot_ja_JP = 24,
     ignoreSpace_ja_JP = 25,
     smallToLarge_ja_JP = 26,
     largeToSmall_ja_JP = 27,
     NumToTextLower_zh_CN = 28,
     NumToTextUpper_zh_CN = 29,
     NumToTextLower_zh_TW = 30,
     NumToTextUpper_zh_TW = 31,
     NumToTextFormalHangul_ko = 32,
     NumToTextFormalLower_ko = 33,
     NumToTextFormalUpper_ko = 34,
     NumToTextInformalHangul_ko = 35,
     NumToTextInformalLower_ko = 36,
     NumToTextInformalUpper_ko = 37,
     NumToCharLower_zh_CN = 38,
     NumToCharUpper_zh_CN = 39,
     NumToCharLower_zh_TW = 40,
     NumToCharUpper_zh_TW = 41,
     NumToCharHangul_ko = 42,
     NumToCharLower_ko = 43,
     NumToCharUpper_ko = 44,
     NumToCharFullwidth = 45,
     NumToCharKanjiShort_ja_JP = 46,
     TextToNumLower_zh_CN = 47,
     TextToNumUpper_zh_CN = 48,
     TextToNumLower_zh_TW = 49,
     TextToNumUpper_zh_TW = 50,
     TextToNumFormalHangul_ko = 51,
     TextToNumFormalLower_ko = 52,
     TextToNumFormalUpper_ko = 53,
     TextToNumInformalHangul_ko = 54,
     TextToNumInformalLower_ko = 55,
     TextToNumInformalUpper_ko = 56,
     CharToNumLower_zh_CN = 59,
     CharToNumUpper_zh_CN = 60,
     CharToNumLower_zh_TW = 61,
     CharToNumUpper_zh_TW = 62,
     CharToNumHangul_ko = 63,
     CharToNumLower_ko = 64,
     CharToNumUpper_ko = 65,
     END_OF_MODULE = 0
    };
    published interface XTransliteration {
     interface ::com::sun::star::uno::XInterface;
     string getName();
     short getType();
     void loadModule([in] ::com::sun::star::i18n::TransliterationModules eModType, [in] ::com::sun::star::lang::Locale aLocale);
     void loadModuleNew([in] sequence< ::com::sun::star::i18n::TransliterationModulesNew > aModType, [in] ::com::sun::star::lang::Locale aLocale);
     void loadModuleByImplName([in] string aImplName, [in] ::com::sun::star::lang::Locale aLocale);
     void loadModulesByImplNames([in] sequence< string > aImplNameList, [in] ::com::sun::star::lang::Locale aLocale);
     sequence< string > getAvailableModules([in] ::com::sun::star::lang::Locale aLocale, [in] short nType);
     string transliterate([in] string aInStr, [in] long nStartPos, [in] long nCount, [out] sequence< long > rOffset);
     /** @deprecated */ string folding([in] string aInStr, [in] long nStartPos, [in] long nCount, [out] sequence< long > rOffset);
     boolean equals([in] string aStr1, [in] long nPos1, [in] long nCount1, [out] long rMatch1, [in] string aStr2, [in] long nPos2, [in] long nCount2, [out] long rMatch2);
     sequence< string > transliterateRange([in] string aStr1, [in] string aStr2);
     long compareSubstring([in] string aStr1, [in] long nOff1, [in] long nLen1, [in] string aStr2, [in] long nOff2, [in] long nLen2);
     long compareString([in] string aStr1, [in] string aStr2);
    };
    published interface XExtendedTransliteration {
     interface ::com::sun::star::i18n::XTransliteration;
     string transliterateString2String([in] string aStr, [in] long nStartPos, [in] long nCount);
     string transliterateChar2String([in] char cChar);
     char transliterateChar2Char([in] char cChar) raises (::com::sun::star::i18n::MultipleCharsOutputException);
    };
    published service Transliteration: ::com::sun::star::i18n::XExtendedTransliteration;
    published constants TransliterationType {
     const short CASCADE = 8;
     const short IGNORE = 4;
     const short NONE = 0;
     const short NUMERIC = 2;
     const short ONE_TO_ONE = 1;
     const short ONE_TO_ONE_NUMERIC = 3;
    };
    published enum UnicodeScript {
     kBasicLatin = 0,
     kLatin1Supplement = 1,
     kLatinExtendedA = 2,
     kLatinExtendedB = 3,
     kIPAExtension = 4,
     kSpacingModifier = 5,
     kCombiningDiacritical = 6,
     kGreek = 7,
     kCyrillic = 8,
     kArmenian = 9,
     kHebrew = 10,
     kArabic = 11,
     kSyriac = 12,
     kThaana = 13,
     kDevanagari = 14,
     kBengali = 15,
     kGurmukhi = 16,
     kGujarati = 17,
     kOriya = 18,
     kTamil = 19,
     kTelugu = 20,
     kKannada = 21,
     kMalayalam = 22,
     kSinhala = 23,
     kThai = 24,
     kLao = 25,
     kTibetan = 26,
     kMyanmar = 27,
     kGeorgian = 28,
     kHangulJamo = 29,
     kEthiopic = 30,
     kCherokee = 31,
     kUnifiedCanadianAboriginalSyllabics = 32,
     kOgham = 33,
     kRunic = 34,
     kKhmer = 35,
     kMongolian = 36,
     kLatinExtendedAdditional = 37,
     kGreekExtended = 38,
     kGeneralPunctuation = 39,
     kSuperSubScript = 40,
     kCurrencySymbolScript = 41,
     kSymbolCombiningMark = 42,
     kLetterlikeSymbol = 43,
     kNumberForm = 44,
     kArrow = 45,
     kMathOperator = 46,
     kMiscTechnical = 47,
     kControlPicture = 48,
     kOpticalCharacter = 49,
     kEnclosedAlphanumeric = 50,
     kBoxDrawing = 51,
     kBlockElement = 52,
     kGeometricShape = 53,
     kMiscSymbol = 54,
     kDingbat = 55,
     kBraillePatterns = 56,
     kCJKRadicalsSupplement = 57,
     kKangxiRadicals = 58,
     kIdeographicDescriptionCharacters = 59,
     kCJKSymbolPunctuation = 60,
     kHiragana = 61,
     kKatakana = 62,
     kBopomofo = 63,
     kHangulCompatibilityJamo = 64,
     kKanbun = 65,
     kBopomofoExtended = 66,
     kEnclosedCJKLetterMonth = 67,
     kCJKCompatibility = 68,
     k_CJKUnifiedIdeographsExtensionA = 69,
     kCJKUnifiedIdeograph = 70,
     kYiSyllables = 71,
     kYiRadicals = 72,
     kHangulSyllable = 73,
     kHighSurrogate = 74,
     kHighPrivateUseSurrogate = 75,
     kLowSurrogate = 76,
     kPrivateUse = 77,
     kCJKCompatibilityIdeograph = 78,
     kAlphabeticPresentation = 79,
     kArabicPresentationA = 80,
     kCombiningHalfMark = 81,
     kCJKCompatibilityForm = 82,
     kSmallFormVariant = 83,
     kArabicPresentationB = 84,
     kNoScript = 85,
     kHalfwidthFullwidthForm = 86,
     kScriptCount = 87
    };
    published constants UnicodeType {
     const short COMBINING_SPACING_MARK = 8;
     const short CONNECTOR_PUNCTUATION = 22;
     const short CONTROL = 15;
     const short CURRENCY_SYMBOL = 25;
     const short DASH_PUNCTUATION = 19;
     const short DECIMAL_DIGIT_NUMBER = 9;
     const short ENCLOSING_MARK = 7;
     const short END_PUNCTUATION = 29;
     const short FINAL_PUNCTUATION = 21;
     const short FORMAT = 16;
     const short GENERAL_TYPES_COUNT = 30;
     const short INITIAL_PUNCTUATION = 20;
     const short LETTER_NUMBER = 10;
     const short LINE_SEPARATOR = 13;
     const short LOWERCASE_LETTER = 2;
     const short MATH_SYMBOL = 24;
     const short MODIFIER_LETTER = 4;
     const short MODIFIER_SYMBOL = 26;
     const short NON_SPACING_MARK = 6;
     const short OTHER_LETTER = 5;
     const short OTHER_NUMBER = 11;
     const short OTHER_PUNCTUATION = 23;
     const short OTHER_SYMBOL = 27;
     const short PARAGRAPH_SEPARATOR = 14;
     const short PRIVATE_USE = 17;
     const short SPACE_SEPARATOR = 12;
     const short START_PUNCTUATION = 28;
     const short SURROGATE = 18;
     const short TITLECASE_LETTER = 3;
     const short UNASSIGNED = 0;
     const short UPPERCASE_LETTER = 1;
    };
    published constants Weekdays {
     const short FRIDAY = 5;
     const short MONDAY = 1;
     const short SATURDAY = 6;
     const short SUNDAY = 0;
     const short THURSDAY = 4;
     const short TUESDAY = 2;
     const short WEDNESDAY = 3;
    };
    published constants WordType {
     const short ANYWORD_IGNOREWHITESPACES = 1;
     const short ANY_WORD = 0;
     const short DICTIONARY_WORD = 2;
     const short WORD_COUNT = 3;
    };
    published interface XForbiddenCharacters {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::i18n::ForbiddenCharacters getForbiddenCharacters([in] ::com::sun::star::lang::Locale aLocale) raises (::com::sun::star::container::NoSuchElementException);
     boolean hasForbiddenCharacters([in] ::com::sun::star::lang::Locale aLocale);
     void setForbiddenCharacters([in] ::com::sun::star::lang::Locale aLocale, [in] ::com::sun::star::i18n::ForbiddenCharacters aForbiddenCharacters);
     void removeForbiddenCharacters([in] ::com::sun::star::lang::Locale aLocale);
    };
    published interface XScriptTypeDetector {
     interface ::com::sun::star::uno::XInterface;
     long beginOfScriptDirection([in] string aText, [in] long nPos, [in] short nScriptDirection);
     long endOfScriptDirection([in] string aText, [in] long nPos, [in] short nScriptDirection);
     short getScriptDirection([in] string aText, [in] long nPos, [in] short nDefaultScriptDirection);
     long beginOfCTLScriptType([in] string aText, [in] long nPos);
     long endOfCTLScriptType([in] string aText, [in] long nPos);
     short getCTLScriptType([in] string aText, [in] long nPos);
    };
    published constants reservedWords {
     const short ABOVE_WORD = 6;
     const short BELOW_WORD = 7;
     const short COUNT = 12;
     const short FALSE_WORD = 1;
     const short QUARTER1_ABBREVIATION = 8;
     const short QUARTER1_WORD = 2;
     const short QUARTER2_ABBREVIATION = 9;
     const short QUARTER2_WORD = 3;
     const short QUARTER3_ABBREVIATION = 10;
     const short QUARTER3_WORD = 4;
     const short QUARTER4_ABBREVIATION = 11;
     const short QUARTER4_WORD = 5;
     const short TRUE_WORD = 0;
    };
   };
   module image {
    published service ImageMap {
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::container::XIndexContainer;
    };
    published service ImageMapObject {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::document::XEventsSupplier;
     [property] string URL;
     [property] string Description;
     [property] string Target;
     [property] string Name;
     [property] boolean IsActive;
    };
    published service ImageMapCircleObject {
     service ::com::sun::star::image::ImageMapObject;
     [property] ::com::sun::star::awt::Point Center;
     [property] long Radius;
    };
    published service ImageMapPolygonObject {
     service ::com::sun::star::image::ImageMapObject;
     [property] ::com::sun::star::drawing::PointSequence Polygon;
    };
    published service ImageMapRectangleObject {
     service ::com::sun::star::image::ImageMapObject;
     [property] ::com::sun::star::awt::Rectangle Boundary;
    };
   };
   module ldap {
    published exception LdapConnectionException: ::com::sun::star::uno::Exception {
    };
    published exception LdapGenericException: ::com::sun::star::uno::Exception {
     long ErrorCode;
    };
   };
   module linguistic2 {
    published enum ConversionDirection {
     FROM_LEFT = 0,
     FROM_RIGHT = 1
    };
    published interface XConversionDictionary {
     interface ::com::sun::star::uno::XInterface;
     string getName();
     ::com::sun::star::lang::Locale getLocale();
     short getConversionType();
     void setActive([in] boolean bActivate);
     boolean isActive();
     void clear();
     sequence< string > getConversions([in] string aText, [in] long nStartPos, [in] long nLength, [in] ::com::sun::star::linguistic2::ConversionDirection eDirection, [in] long nTextConversionOptions) raises (::com::sun::star::lang::IllegalArgumentException);
     void addEntry([in] string aLeftText, [in] string aRightText) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException);
     void removeEntry([in] string aLeftText, [in] string aRightText) raises (::com::sun::star::container::NoSuchElementException);
     short getMaxCharCount([in] ::com::sun::star::linguistic2::ConversionDirection eDirection);
     sequence< string > getConversionEntries([in] ::com::sun::star::linguistic2::ConversionDirection eDirection);
    };
    published interface XConversionPropertyType {
     interface ::com::sun::star::uno::XInterface;
     void setPropertyType([in] string aLeftText, [in] string aRightText, [in] short nPropertyType) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::IllegalArgumentException);
     short getPropertyType([in] string aLeftText, [in] string aRightText) raises (::com::sun::star::container::NoSuchElementException);
    };
    published service ConversionDictionary {
     interface ::com::sun::star::linguistic2::XConversionDictionary;
     [optional] interface ::com::sun::star::util::XFlushable;
     [optional] interface ::com::sun::star::linguistic2::XConversionPropertyType;
    };
    published interface XConversionDictionaryList {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameContainer getDictionaryContainer();
     ::com::sun::star::linguistic2::XConversionDictionary addNewDictionary([in] string aName, [in] ::com::sun::star::lang::Locale aLocale, [in] short nConversionDictionaryType) raises (::com::sun::star::lang::NoSupportException, ::com::sun::star::container::ElementExistException);
     sequence< string > queryConversions([in] string aText, [in] long nStartPos, [in] long nLength, [in] ::com::sun::star::lang::Locale aLocale, [in] short nConversionDictionaryType, [in] ::com::sun::star::linguistic2::ConversionDirection eDirection, [in] long nTextConversionOptions) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::lang::NoSupportException);
     short queryMaxCharCount([in] ::com::sun::star::lang::Locale aLocale, [in] short nConversionDictionaryType, [in] ::com::sun::star::linguistic2::ConversionDirection eDirection);
    };
    published service ConversionDictionaryList: ::com::sun::star::linguistic2::XConversionDictionaryList;
    published enum DictionaryType {
     POSITIVE = 0,
     NEGATIVE = 1,
     /** @deprecated */ MIXED = 2
    };
    published interface XDictionaryEntry;
    published interface XDictionaryEventListener;
    published interface XDictionary {
     interface ::com::sun::star::container::XNamed;
     ::com::sun::star::linguistic2::DictionaryType getDictionaryType();
     void setActive([in] boolean bActivate);
     boolean isActive();
     long getCount();
     ::com::sun::star::lang::Locale getLocale();
     void setLocale([in] ::com::sun::star::lang::Locale aLocale);
     ::com::sun::star::linguistic2::XDictionaryEntry getEntry([in] string aWord);
     boolean addEntry([in] ::com::sun::star::linguistic2::XDictionaryEntry xDicEntry);
     boolean add([in] string aWord, [in] boolean bIsNegative, [in] string aRplcText);
     boolean remove([in] string aWord);
     boolean isFull();
     /** @deprecated */ sequence< ::com::sun::star::linguistic2::XDictionaryEntry > getEntries();
     void clear();
     boolean addDictionaryEventListener([in] ::com::sun::star::linguistic2::XDictionaryEventListener xListener);
     boolean removeDictionaryEventListener([in] ::com::sun::star::linguistic2::XDictionaryEventListener xListener);
    };
    published interface XDictionaryEntry;
    published struct DictionaryEvent: ::com::sun::star::lang::EventObject {
     short nEvent;
     ::com::sun::star::linguistic2::XDictionaryEntry xDictionaryEntry;
    };
    published constants DictionaryEventFlags {
     const short ACTIVATE_DIC = 32;
     const short ADD_ENTRY = 1;
     const short CHG_LANGUAGE = 8;
     const short CHG_NAME = 4;
     const short DEACTIVATE_DIC = 64;
     const short DEL_ENTRY = 2;
     const short ENTRIES_CLEARED = 16;
    };
    published interface XDictionaryListEventListener;
    published interface XDictionaryList {
     interface ::com::sun::star::uno::XInterface;
     short getCount();
     sequence< ::com::sun::star::linguistic2::XDictionary > getDictionaries();
     ::com::sun::star::linguistic2::XDictionary getDictionaryByName([in] string aDictionaryName);
     boolean addDictionary([in] ::com::sun::star::linguistic2::XDictionary xDictionary);
     boolean removeDictionary([in] ::com::sun::star::linguistic2::XDictionary xDictionary);
     boolean addDictionaryListEventListener([in] ::com::sun::star::linguistic2::XDictionaryListEventListener xListener, [in] boolean bReceiveVerbose);
     boolean removeDictionaryListEventListener([in] ::com::sun::star::linguistic2::XDictionaryListEventListener xListener);
     short beginCollectEvents();
     short endCollectEvents();
     short flushEvents();
     ::com::sun::star::linguistic2::XDictionary createDictionary([in] string aName, [in] ::com::sun::star::lang::Locale aLocale, [in] ::com::sun::star::linguistic2::DictionaryType eDicType, [in] string aURL);
    };
    published interface XDictionaryEntry;
    published interface XSearchableDictionaryList {
     interface ::com::sun::star::linguistic2::XDictionaryList;
     ::com::sun::star::linguistic2::XDictionaryEntry queryDictionaryEntry([in] string aWord, [in] ::com::sun::star::lang::Locale aLocale, [in] boolean bSearchPosDics, [in] boolean bSpellEntry);
    };
    published service DictionaryList: ::com::sun::star::linguistic2::XSearchableDictionaryList;
    published struct DictionaryListEvent: ::com::sun::star::lang::EventObject {
     short nCondensedEvent;
     sequence< ::com::sun::star::linguistic2::DictionaryEvent > aDictionaryEvents;
    };
    published constants DictionaryListEventFlags {
     const short ACTIVATE_NEG_DIC = 64;
     const short ACTIVATE_POS_DIC = 16;
     const short ADD_NEG_ENTRY = 4;
     const short ADD_POS_ENTRY = 1;
     const short DEACTIVATE_NEG_DIC = 128;
     const short DEACTIVATE_POS_DIC = 32;
     const short DEL_NEG_ENTRY = 8;
     const short DEL_POS_ENTRY = 2;
    };
    published service HangulHanjaConversionDictionary {
     service ::com::sun::star::linguistic2::ConversionDictionary;
    };
    published interface XSupportedLocales {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::lang::Locale > getLocales();
     boolean hasLocale([in] ::com::sun::star::lang::Locale aLocale);
    };
    published interface XHyphenatedWord;
    published interface XPossibleHyphens;
    published interface XHyphenator {
     interface ::com::sun::star::linguistic2::XSupportedLocales;
     ::com::sun::star::linguistic2::XHyphenatedWord hyphenate([in] string aWord, [in] ::com::sun::star::lang::Locale aLocale, [in] short nMaxLeading, [in] ::com::sun::star::beans::PropertyValues aProperties) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::linguistic2::XHyphenatedWord queryAlternativeSpelling([in] string aWord, [in] ::com::sun::star::lang::Locale aLocale, [in] short nIndex, [in] ::com::sun::star::beans::PropertyValues aProperties) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::linguistic2::XPossibleHyphens createPossibleHyphens([in] string aWord, [in] ::com::sun::star::lang::Locale aLocale, [in] ::com::sun::star::beans::PropertyValues aProperties) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XLinguServiceEventListener;
    published interface XLinguServiceEventBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     boolean addLinguServiceEventListener([in] ::com::sun::star::linguistic2::XLinguServiceEventListener xLstnr);
     boolean removeLinguServiceEventListener([in] ::com::sun::star::linguistic2::XLinguServiceEventListener xLstnr);
    };
    published service Hyphenator {
     interface ::com::sun::star::linguistic2::XHyphenator;
     interface ::com::sun::star::linguistic2::XLinguServiceEventBroadcaster;
     interface ::com::sun::star::lang::XInitialization;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::lang::XServiceDisplayName;
    };
    published interface XLinguProperties {
     interface ::com::sun::star::beans::XPropertySet;
     [attribute] boolean IsUseDictionaryList;
     [attribute] boolean IsIgnoreControlCharacters;
     [attribute] boolean IsSpellUpperCase;
     [attribute] boolean IsSpellWithDigits;
     /** @deprecated */ [attribute] boolean IsSpellCapitalization;
     [attribute] short HyphMinLeading;
     [attribute] short HyphMinTrailing;
     [attribute] short HyphMinWordLength;
     [attribute] ::com::sun::star::lang::Locale DefaultLocale;
     [attribute] boolean IsHyphAuto;
     [attribute] boolean IsHyphSpecial;
     [attribute] boolean IsSpellAuto;
     [attribute] boolean IsSpellSpecial;
     [attribute] boolean IsWrapReverse;
     [attribute] ::com::sun::star::lang::Locale DefaultLocale_CJK;
     [attribute] ::com::sun::star::lang::Locale DefaultLocale_CTL;
    };
    published service LinguProperties: ::com::sun::star::linguistic2::XLinguProperties;
    published struct LinguServiceEvent: ::com::sun::star::lang::EventObject {
     short nEvent;
    };
    published constants LinguServiceEventFlags {
     const short HYPHENATE_AGAIN = 4;
     const short PROOFREAD_AGAIN = 8;
     const short SPELL_CORRECT_WORDS_AGAIN = 1;
     const short SPELL_WRONG_WORDS_AGAIN = 2;
    };
    published interface XAvailableLocales {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::lang::Locale > getAvailableLocales([in] string aServiceName);
    };
    published interface XSpellChecker;
    published interface XThesaurus;
    published interface XLinguServiceManager {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::linguistic2::XSpellChecker getSpellChecker();
     ::com::sun::star::linguistic2::XHyphenator getHyphenator();
     ::com::sun::star::linguistic2::XThesaurus getThesaurus();
     boolean addLinguServiceManagerListener([in] ::com::sun::star::lang::XEventListener xListener);
     boolean removeLinguServiceManagerListener([in] ::com::sun::star::lang::XEventListener xListener);
     sequence< string > getAvailableServices([in] string aServiceName, [in] ::com::sun::star::lang::Locale aLocale);
     void setConfiguredServices([in] string aServiceName, [in] ::com::sun::star::lang::Locale aLocale, [in] sequence< string > aServiceImplNames);
     sequence< string > getConfiguredServices([in] string aServiceName, [in] ::com::sun::star::lang::Locale aLocale);
    };
    published interface XLinguServiceManager2 {
     interface ::com::sun::star::linguistic2::XLinguServiceManager;
     interface ::com::sun::star::linguistic2::XAvailableLocales;
     interface ::com::sun::star::lang::XComponent;
    };
    published service LinguServiceManager: ::com::sun::star::linguistic2::XLinguServiceManager2;
    published interface XSpellAlternatives;
    published interface XSpellChecker {
     interface ::com::sun::star::linguistic2::XSupportedLocales;
     boolean isValid([in] string aWord, [in] ::com::sun::star::lang::Locale aLocale, [in] ::com::sun::star::beans::PropertyValues aProperties) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::linguistic2::XSpellAlternatives spell([in] string aWord, [in] ::com::sun::star::lang::Locale aLocale, [in] ::com::sun::star::beans::PropertyValues aProperties) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service SpellChecker {
     interface ::com::sun::star::linguistic2::XSpellChecker;
     interface ::com::sun::star::linguistic2::XLinguServiceEventBroadcaster;
     interface ::com::sun::star::lang::XInitialization;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::lang::XServiceDisplayName;
    };
    published constants SpellFailure {
     const short CAPTION_ERROR = 3;
     const short IS_NEGATIVE_WORD = 2;
     const short SPELLING_ERROR = 4;
    };
    published interface XMeaning;
    published interface XThesaurus {
     interface ::com::sun::star::linguistic2::XSupportedLocales;
     sequence< ::com::sun::star::linguistic2::XMeaning > queryMeanings([in] string aTerm, [in] ::com::sun::star::lang::Locale aLocale, [in] ::com::sun::star::beans::PropertyValues aProperties) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service Thesaurus {
     interface ::com::sun::star::linguistic2::XThesaurus;
     interface ::com::sun::star::lang::XInitialization;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::lang::XServiceDisplayName;
    };
    published interface XDictionaryEntry;
    published interface XDictionaryEventListener;
    /** @deprecated */ published interface XDictionary1 {
     interface ::com::sun::star::container::XNamed;
     ::com::sun::star::linguistic2::DictionaryType getDictionaryType();
     void setActive([in] boolean bActivate);
     boolean isActive();
     short getCount();
     short getLanguage();
     void setLanguage([in] short nLang);
     ::com::sun::star::linguistic2::XDictionaryEntry getEntry([in] string aWord);
     boolean addEntry([in] ::com::sun::star::linguistic2::XDictionaryEntry xDicEntry);
     boolean add([in] string aWord, [in] boolean bIsNegative, [in] string aRplcText);
     boolean remove([in] string aWord);
     boolean isFull();
     sequence< ::com::sun::star::linguistic2::XDictionaryEntry > getEntries();
     void clear();
     boolean addDictionaryEventListener([in] ::com::sun::star::linguistic2::XDictionaryEventListener xListener);
     boolean removeDictionaryEventListener([in] ::com::sun::star::linguistic2::XDictionaryEventListener xListener);
    };
    published interface XDictionaryEntry {
     interface ::com::sun::star::uno::XInterface;
     string getDictionaryWord();
     boolean isNegative();
     string getReplacementText();
    };
    published interface XDictionaryEventListener {
     interface ::com::sun::star::lang::XEventListener;
     void processDictionaryEvent([in] ::com::sun::star::linguistic2::DictionaryEvent aDicEvent);
    };
    published interface XDictionaryListEventListener {
     interface ::com::sun::star::lang::XEventListener;
     void processDictionaryListEvent([in] ::com::sun::star::linguistic2::DictionaryListEvent aDicListEvent);
    };
    published interface XHyphenatedWord {
     interface ::com::sun::star::uno::XInterface;
     string getWord();
     ::com::sun::star::lang::Locale getLocale();
     short getHyphenationPos();
     string getHyphenatedWord();
     short getHyphenPos();
     boolean isAlternativeSpelling();
    };
    published interface XLinguServiceEventListener {
     interface ::com::sun::star::lang::XEventListener;
     void processLinguServiceEvent([in] ::com::sun::star::linguistic2::LinguServiceEvent aLngSvcEvent);
    };
    published interface XMeaning {
     interface ::com::sun::star::uno::XInterface;
     string getMeaning();
     sequence< string > querySynonyms();
    };
    published interface XPossibleHyphens {
     interface ::com::sun::star::uno::XInterface;
     string getWord();
     ::com::sun::star::lang::Locale getLocale();
     string getPossibleHyphens();
     sequence< short > getHyphenationPositions();
    };
    published interface XSpellAlternatives {
     interface ::com::sun::star::uno::XInterface;
     string getWord();
     ::com::sun::star::lang::Locale getLocale();
     short getFailureType();
     short getAlternativesCount();
     sequence< string > getAlternatives();
    };
    /** @deprecated */ published interface XSupportedLanguages {
     interface ::com::sun::star::uno::XInterface;
     sequence< short > getLanguages();
     boolean hasLanguage([in] short nLanguage);
    };
    /** @deprecated */ published interface XSpellChecker1 {
     interface ::com::sun::star::linguistic2::XSupportedLanguages;
     boolean isValid([in] string aWord, [in] short nLanguage, [in] ::com::sun::star::beans::PropertyValues aProperties) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::linguistic2::XSpellAlternatives spell([in] string aWord, [in] short nLanguage, [in] ::com::sun::star::beans::PropertyValues aProperties) raises (::com::sun::star::lang::IllegalArgumentException);
    };
   };
   module mozilla {
    published struct MenuMultipleChange {
     short ID;
     short GroupID;
     short PreItemID;
     string ItemText;
     boolean IsVisible;
     boolean IsActive;
     boolean IsCheckable;
     boolean IsChecked;
     sequence< byte > Image;
    };
    published interface XMenuProxyListener;
    published interface XMenuProxy {
     interface ::com::sun::star::lang::XComponent;
     void executeMenuItem([in] short ID);
     void addMenuProxyListener([in] ::com::sun::star::mozilla::XMenuProxyListener xListener);
     void removeMenuProxyListener([in] ::com::sun::star::mozilla::XMenuProxyListener xListener);
    };
    published service MenuProxy {
     interface ::com::sun::star::mozilla::XMenuProxy;
    };
    published struct MenuSingleChange {
     short ID;
     short ChangeID;
     any Change;
    };
    published interface XMenuProxyListener {
     interface ::com::sun::star::uno::XInterface;
     void menuChangedMultiple([in] sequence< ::com::sun::star::mozilla::MenuMultipleChange > MenuMultipleChanges);
     void menuChangedSingle([in] sequence< ::com::sun::star::mozilla::MenuSingleChange > MenuSingleChanges);
     void menuItemDeleted([in] short ID);
    };
    published service MenuProxyListener {
     interface ::com::sun::star::mozilla::XMenuProxyListener;
    };
    published enum MozillaProductType {
     Default = 0,
     Mozilla = 1,
     Firefox = 2,
     Thunderbird = 3
    };
    published interface XProfileDiscover {
     interface ::com::sun::star::uno::XInterface;
     long getProfileCount([in] ::com::sun::star::mozilla::MozillaProductType product);
     long getProfileList([in] ::com::sun::star::mozilla::MozillaProductType product, [out] sequence< string > list);
     string getDefaultProfile([in] ::com::sun::star::mozilla::MozillaProductType product);
     string getProfilePath([in] ::com::sun::star::mozilla::MozillaProductType product, [in] string profileName);
     boolean isProfileLocked([in] ::com::sun::star::mozilla::MozillaProductType product, [in] string profileName);
     boolean getProfileExists([in] ::com::sun::star::mozilla::MozillaProductType product, [in] string profileName);
    };
    published interface XProfileManager {
     interface ::com::sun::star::uno::XInterface;
     long bootupProfile([in] ::com::sun::star::mozilla::MozillaProductType product, [in] string profileName);
     long shutdownProfile();
     ::com::sun::star::mozilla::MozillaProductType getCurrentProduct();
     string getCurrentProfile();
     boolean isCurrentProfileLocked();
     string setCurrentProfile([in] ::com::sun::star::mozilla::MozillaProductType product, [in] string profileName);
    };
    published interface XCodeProxy;
    published interface XProxyRunner {
     interface ::com::sun::star::uno::XInterface;
     long Run([in] ::com::sun::star::mozilla::XCodeProxy aCode);
    };
    published interface XMozillaBootstrap {
     interface ::com::sun::star::mozilla::XProfileDiscover;
     interface ::com::sun::star::mozilla::XProfileManager;
     interface ::com::sun::star::mozilla::XProxyRunner;
    };
    published service MozillaBootstrap: ::com::sun::star::mozilla::XMozillaBootstrap;
    published interface XCloseSessionListener {
     interface ::com::sun::star::uno::XInterface;
     void sessionClosed([in] any sessionData);
    };
    published interface XCodeProxy {
     interface ::com::sun::star::uno::XInterface;
     long run();
     ::com::sun::star::mozilla::MozillaProductType getProductType();
     string getProfileName();
    };
   };
   module packages {
    published service Package {
     interface ::com::sun::star::lang::XInitialization;
     interface ::com::sun::star::container::XHierarchicalNameAccess;
     interface ::com::sun::star::lang::XSingleServiceFactory;
     interface ::com::sun::star::util::XChangesBatch;
    };
    published service PackageFolder {
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::container::XNameContainer;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::beans::XPropertySet;
    };
    published service PackageFolderEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published service PackageStream {
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::io::XActiveDataSink;
     interface ::com::sun::star::beans::XPropertySet;
    };
    module zip {
     published exception ZipException: ::com::sun::star::uno::Exception {
     };
    };
    module manifest {
     published interface XManifestReader {
      interface ::com::sun::star::uno::XInterface;
      sequence< sequence< ::com::sun::star::beans::PropertyValue > > readManifestSequence([in] ::com::sun::star::io::XInputStream rStream);
     };
     published service ManifestReader: ::com::sun::star::packages::manifest::XManifestReader;
     published interface XManifestWriter {
      interface ::com::sun::star::uno::XInterface;
      void writeManifestSequence([in] ::com::sun::star::io::XOutputStream rStream, [in] sequence< sequence< ::com::sun::star::beans::PropertyValue > > rSequence);
     };
     published service ManifestWriter: ::com::sun::star::packages::manifest::XManifestWriter;
    };
    module zip {
     published constants ZipConstants {
      const short BEST_COMPRESSION = 9;
      const short BEST_SPEED = 1;
      const short CENATT = 36;
      const short CENATX = 38;
      const short CENCOM = 32;
      const short CENCRC = 16;
      const short CENDAT = 14;
      const short CENDSK = 34;
      const short CENEXT = 30;
      const short CENFLG = 8;
      const short CENHDR = 46;
      const short CENHOW = 10;
      const short CENLEN = 24;
      const short CENNAM = 28;
      const short CENOFF = 42;
      const long CENSIG = 33639248;
      const short CENSIZ = 20;
      const short CENTIM = 12;
      const short CENVEM = 4;
      const short CENVER = 6;
      const short DEFAULT_COMPRESSION = -1;
      const short DEFAULT_STRATEGY = 0;
      const short DEFLATED = 8;
      const short DEF_MEM_LEVEL = 8;
      const short ENDCOM = 20;
      const short ENDHDR = 22;
      const short ENDOFF = 16;
      const long ENDSIG = 101010256;
      const short ENDSIZ = 12;
      const short ENDSUB = 8;
      const short ENDTOT = 10;
      const short EXTCRC = 4;
      const short EXTHDR = 16;
      const short EXTLEN = 12;
      const long EXTSIG = 134695760;
      const short EXTSIZ = 8;
      const short FILTERED = 1;
      const short HUFFMAN_ONLY = 2;
      const short LOCCRC = 14;
      const short LOCEXT = 28;
      const short LOCFLG = 6;
      const short LOCHDR = 30;
      const short LOCHOW = 8;
      const short LOCLEN = 22;
      const short LOCNAM = 26;
      const long LOCSIG = 67324752;
      const short LOCSIZ = 18;
      const short LOCTIM = 10;
      const short LOCVER = 4;
      const short NO_COMPRESSION = 0;
      const long SPANSIG = 134695760;
      const short STORED = 0;
     };
     published struct ZipEntry {
      short nVersion;
      short nFlag;
      short nMethod;
      long nTime;
      long nCrc;
      long nCompressedSize;
      long nSize;
      long nOffset;
      short nDiskNumber;
      string sName;
      sequence< byte > extra;
      string sComment;
     };
    };
   };
   module task {
    published enum InteractionClassification {
     ERROR = 0,
     WARNING = 1,
     INFO = 2,
     QUERY = 3
    };
    published exception ClassifiedInteractionRequest: ::com::sun::star::uno::Exception {
     ::com::sun::star::task::InteractionClassification Classification;
    };
   };
   module ucb {
    published enum IOErrorCode {
     ABORT = 0,
     ACCESS_DENIED = 1,
     ALREADY_EXISTING = 2,
     BAD_CRC = 3,
     CANT_CREATE = 4,
     CANT_READ = 5,
     CANT_SEEK = 6,
     CANT_TELL = 7,
     CANT_WRITE = 8,
     CURRENT_DIRECTORY = 9,
     DEVICE_NOT_READY = 10,
     DIFFERENT_DEVICES = 11,
     GENERAL = 12,
     INVALID_ACCESS = 13,
     INVALID_CHARACTER = 14,
     INVALID_DEVICE = 15,
     INVALID_LENGTH = 16,
     INVALID_PARAMETER = 17,
     IS_WILDCARD = 18,
     LOCKING_VIOLATION = 19,
     MISPLACED_CHARACTER = 20,
     NAME_TOO_LONG = 21,
     NOT_EXISTING = 22,
     NOT_EXISTING_PATH = 23,
     NOT_SUPPORTED = 24,
     NO_DIRECTORY = 25,
     NO_FILE = 26,
     OUT_OF_DISK_SPACE = 27,
     OUT_OF_FILE_HANDLES = 28,
     OUT_OF_MEMORY = 29,
     PENDING = 30,
     RECURSIVE = 31,
     UNKNOWN = 32,
     WRITE_PROTECTED = 33,
     WRONG_FORMAT = 34,
     WRONG_VERSION = 35
    };
    published exception InteractiveIOException: ::com::sun::star::task::ClassifiedInteractionRequest {
     ::com::sun::star::ucb::IOErrorCode Code;
    };
   };
   module packages {
    module zip {
     published exception ZipIOException: ::com::sun::star::io::IOException {
     };
    };
   };
   module presentation {
    published enum AnimationEffect {
     NONE = 0,
     FADE_FROM_LEFT = 1,
     FADE_FROM_TOP = 2,
     FADE_FROM_RIGHT = 3,
     FADE_FROM_BOTTOM = 4,
     FADE_TO_CENTER = 5,
     FADE_FROM_CENTER = 6,
     MOVE_FROM_LEFT = 7,
     MOVE_FROM_TOP = 8,
     MOVE_FROM_RIGHT = 9,
     MOVE_FROM_BOTTOM = 10,
     VERTICAL_STRIPES = 11,
     HORIZONTAL_STRIPES = 12,
     CLOCKWISE = 13,
     COUNTERCLOCKWISE = 14,
     FADE_FROM_UPPERLEFT = 15,
     FADE_FROM_UPPERRIGHT = 16,
     FADE_FROM_LOWERLEFT = 17,
     FADE_FROM_LOWERRIGHT = 18,
     CLOSE_VERTICAL = 19,
     CLOSE_HORIZONTAL = 20,
     OPEN_VERTICAL = 21,
     OPEN_HORIZONTAL = 22,
     PATH = 23,
     MOVE_TO_LEFT = 24,
     MOVE_TO_TOP = 25,
     MOVE_TO_RIGHT = 26,
     MOVE_TO_BOTTOM = 27,
     SPIRALIN_LEFT = 28,
     SPIRALIN_RIGHT = 29,
     SPIRALOUT_LEFT = 30,
     SPIRALOUT_RIGHT = 31,
     DISSOLVE = 32,
     WAVYLINE_FROM_LEFT = 33,
     WAVYLINE_FROM_TOP = 34,
     WAVYLINE_FROM_RIGHT = 35,
     WAVYLINE_FROM_BOTTOM = 36,
     RANDOM = 37,
     VERTICAL_LINES = 38,
     HORIZONTAL_LINES = 39,
     LASER_FROM_LEFT = 40,
     LASER_FROM_TOP = 41,
     LASER_FROM_RIGHT = 42,
     LASER_FROM_BOTTOM = 43,
     LASER_FROM_UPPERLEFT = 44,
     LASER_FROM_UPPERRIGHT = 45,
     LASER_FROM_LOWERLEFT = 46,
     LASER_FROM_LOWERRIGHT = 47,
     APPEAR = 48,
     HIDE = 49,
     MOVE_FROM_UPPERLEFT = 50,
     MOVE_FROM_UPPERRIGHT = 51,
     MOVE_FROM_LOWERRIGHT = 52,
     MOVE_FROM_LOWERLEFT = 53,
     MOVE_TO_UPPERLEFT = 54,
     MOVE_TO_UPPERRIGHT = 55,
     MOVE_TO_LOWERRIGHT = 56,
     MOVE_TO_LOWERLEFT = 57,
     MOVE_SHORT_FROM_LEFT = 58,
     MOVE_SHORT_FROM_UPPERLEFT = 59,
     MOVE_SHORT_FROM_TOP = 60,
     MOVE_SHORT_FROM_UPPERRIGHT = 61,
     MOVE_SHORT_FROM_RIGHT = 62,
     MOVE_SHORT_FROM_LOWERRIGHT = 63,
     MOVE_SHORT_FROM_BOTTOM = 64,
     MOVE_SHORT_FROM_LOWERLEFT = 65,
     MOVE_SHORT_TO_LEFT = 66,
     MOVE_SHORT_TO_UPPERLEFT = 67,
     MOVE_SHORT_TO_TOP = 68,
     MOVE_SHORT_TO_UPPERRIGHT = 69,
     MOVE_SHORT_TO_RIGHT = 70,
     MOVE_SHORT_TO_LOWERRIGHT = 71,
     MOVE_SHORT_TO_BOTTOM = 72,
     MOVE_SHORT_TO_LOWERLEFT = 73,
     VERTICAL_CHECKERBOARD = 74,
     HORIZONTAL_CHECKERBOARD = 75,
     HORIZONTAL_ROTATE = 76,
     VERTICAL_ROTATE = 77,
     HORIZONTAL_STRETCH = 78,
     VERTICAL_STRETCH = 79,
     STRETCH_FROM_LEFT = 80,
     STRETCH_FROM_UPPERLEFT = 81,
     STRETCH_FROM_TOP = 82,
     STRETCH_FROM_UPPERRIGHT = 83,
     STRETCH_FROM_RIGHT = 84,
     STRETCH_FROM_LOWERRIGHT = 85,
     STRETCH_FROM_BOTTOM = 86,
     STRETCH_FROM_LOWERLEFT = 87,
     ZOOM_IN = 88,
     ZOOM_IN_SMALL = 89,
     ZOOM_IN_SPIRAL = 90,
     ZOOM_OUT = 91,
     ZOOM_OUT_SMALL = 92,
     ZOOM_OUT_SPIRAL = 93,
     ZOOM_IN_FROM_LEFT = 94,
     ZOOM_IN_FROM_UPPERLEFT = 95,
     ZOOM_IN_FROM_TOP = 96,
     ZOOM_IN_FROM_UPPERRIGHT = 97,
     ZOOM_IN_FROM_RIGHT = 98,
     ZOOM_IN_FROM_LOWERRIGHT = 99,
     ZOOM_IN_FROM_BOTTOM = 100,
     ZOOM_IN_FROM_LOWERLEFT = 101,
     ZOOM_IN_FROM_CENTER = 102,
     ZOOM_OUT_FROM_LEFT = 103,
     ZOOM_OUT_FROM_UPPERLEFT = 104,
     ZOOM_OUT_FROM_TOP = 105,
     ZOOM_OUT_FROM_UPPERRIGHT = 106,
     ZOOM_OUT_FROM_RIGHT = 107,
     ZOOM_OUT_FROM_LOWERRIGHT = 108,
     ZOOM_OUT_FROM_BOTTOM = 109,
     ZOOM_OUT_FROM_LOWERLEFT = 110,
     ZOOM_OUT_FROM_CENTER = 111
    };
    published enum AnimationSpeed {
     SLOW = 0,
     MEDIUM = 1,
     FAST = 2
    };
    published enum ClickAction {
     NONE = 0,
     PREVPAGE = 1,
     NEXTPAGE = 2,
     FIRSTPAGE = 3,
     LASTPAGE = 4,
     BOOKMARK = 5,
     DOCUMENT = 6,
     INVISIBLE = 7,
     SOUND = 8,
     VERB = 9,
     VANISH = 10,
     PROGRAM = 11,
     MACRO = 12,
     STOPPRESENTATION = 13
    };
    published service Shape {
     [property] string Bookmark;
     [property] ::com::sun::star::util::Color DimColor;
     [property] boolean DimHide;
     [property] boolean DimPrevious;
     [property] ::com::sun::star::presentation::AnimationEffect Effect;
     [property] boolean IsEmptyPresentationObject;
     [property, readonly] boolean IsPresentationObject;
     [property] ::com::sun::star::presentation::ClickAction OnClick;
     [property] boolean PlayFull;
     [property] long PresentationOrder;
     [property] string Sound;
     [property] boolean SoundOn;
     [property] ::com::sun::star::presentation::AnimationSpeed Speed;
     [property] ::com::sun::star::presentation::AnimationEffect TextEffect;
     [property] long Verb;
    };
    published service ChartShape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::OLE2Shape;
    };
    published service CustomPresentation {
     interface ::com::sun::star::container::XIndexContainer;
     interface ::com::sun::star::container::XNamed;
    };
    published service CustomPresentationAccess {
     interface ::com::sun::star::container::XNameContainer;
     interface ::com::sun::star::lang::XSingleServiceFactory;
    };
    published service DocumentSettings {
     service ::com::sun::star::document::Settings;
     [optional] service ::com::sun::star::document::HeaderFooterSettings;
     interface ::com::sun::star::beans::XPropertySet;
     [property, optional] boolean IsPrintDrawing;
     [property, optional] boolean IsPrintNotes;
     [property, optional] boolean IsPrintHandout;
     [property, optional] boolean IsPrintOutline;
     [property, optional] boolean IsPrintHiddenPages;
     [property, optional] boolean IsPrintFitPage;
     [property, optional] boolean IsPrintTilePage;
     [property, optional] long PageNumberFormat;
     [property, optional] boolean ParagraphSummation;
    };
    published enum FadeEffect {
     NONE = 0,
     FADE_FROM_LEFT = 1,
     FADE_FROM_TOP = 2,
     FADE_FROM_RIGHT = 3,
     FADE_FROM_BOTTOM = 4,
     FADE_TO_CENTER = 5,
     FADE_FROM_CENTER = 6,
     MOVE_FROM_LEFT = 7,
     MOVE_FROM_TOP = 8,
     MOVE_FROM_RIGHT = 9,
     MOVE_FROM_BOTTOM = 10,
     ROLL_FROM_LEFT = 11,
     ROLL_FROM_TOP = 12,
     ROLL_FROM_RIGHT = 13,
     ROLL_FROM_BOTTOM = 14,
     VERTICAL_STRIPES = 15,
     HORIZONTAL_STRIPES = 16,
     CLOCKWISE = 17,
     COUNTERCLOCKWISE = 18,
     FADE_FROM_UPPERLEFT = 19,
     FADE_FROM_UPPERRIGHT = 20,
     FADE_FROM_LOWERLEFT = 21,
     FADE_FROM_LOWERRIGHT = 22,
     CLOSE_VERTICAL = 23,
     CLOSE_HORIZONTAL = 24,
     OPEN_VERTICAL = 25,
     OPEN_HORIZONTAL = 26,
     SPIRALIN_LEFT = 27,
     SPIRALIN_RIGHT = 28,
     SPIRALOUT_LEFT = 29,
     SPIRALOUT_RIGHT = 30,
     DISSOLVE = 31,
     WAVYLINE_FROM_LEFT = 32,
     WAVYLINE_FROM_TOP = 33,
     WAVYLINE_FROM_RIGHT = 34,
     WAVYLINE_FROM_BOTTOM = 35,
     RANDOM = 36,
     STRETCH_FROM_LEFT = 37,
     STRETCH_FROM_TOP = 38,
     STRETCH_FROM_RIGHT = 39,
     STRETCH_FROM_BOTTOM = 40,
     VERTICAL_LINES = 41,
     HORIZONTAL_LINES = 42,
     MOVE_FROM_UPPERLEFT = 43,
     MOVE_FROM_UPPERRIGHT = 44,
     MOVE_FROM_LOWERRIGHT = 45,
     MOVE_FROM_LOWERLEFT = 46,
     UNCOVER_TO_LEFT = 47,
     UNCOVER_TO_UPPERLEFT = 48,
     UNCOVER_TO_TOP = 49,
     UNCOVER_TO_UPPERRIGHT = 50,
     UNCOVER_TO_RIGHT = 51,
     UNCOVER_TO_LOWERRIGHT = 52,
     UNCOVER_TO_BOTTOM = 53,
     UNCOVER_TO_LOWERLEFT = 54,
     VERTICAL_CHECKERBOARD = 55,
     HORIZONTAL_CHECKERBOARD = 56
    };
    published service DrawPage {
     service ::com::sun::star::drawing::DrawPage;
     service ::com::sun::star::document::LinkTarget;
     [property] long Change;
     [property] long Duration;
     [property, optional] double HighResDuration;
     [property] ::com::sun::star::presentation::FadeEffect Effect;
     [property] short Layout;
     [property] ::com::sun::star::presentation::AnimationSpeed Speed;
     [property, optional] boolean IsHeaderVisible;
     [property, optional] string HeaderText;
     [property, optional] boolean IsFooterVisible;
     [property, optional] string FooterText;
     [property, optional] boolean IsPageNumberVisible;
     [property, optional] boolean IsDateTimeVisible;
     [property, optional] boolean IsDateTimeFixed;
     [property, optional] string DateTimeText;
     [property, optional] long DateTimeFormat;
    };
    published service GraphicObjectShape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::GraphicObjectShape;
    };
    published service HandoutShape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::PageShape;
    };
    published service HandoutView {
     service ::com::sun::star::drawing::DrawingDocumentDrawView;
    };
    published service NotesShape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::TextShape;
    };
    published service NotesView {
     service ::com::sun::star::drawing::DrawingDocumentDrawView;
    };
    published service OLE2Shape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::OLE2Shape;
    };
    published service OutlineView {
     service ::com::sun::star::frame::Controller;
     interface ::com::sun::star::awt::XWindow;
     interface ::com::sun::star::beans::XPropertySet;
     [property, readonly] ::com::sun::star::awt::Rectangle VisibleArea;
    };
    published service OutlinerShape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::TextShape;
    };
    published service PageShape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::PageShape;
    };
    published interface XPresentation {
     interface ::com::sun::star::uno::XInterface;
     void start();
     void end();
     void rehearseTimings();
    };
    published service Presentation {
     interface ::com::sun::star::presentation::XPresentation;
     interface ::com::sun::star::beans::XPropertySet;
     [property] boolean AllowAnimations;
     [property] string CustomShow;
     [property] string FirstPage;
     [property] boolean IsAlwaysOnTop;
     [property] boolean IsAutomatic;
     [property] boolean IsEndless;
     [property] boolean IsFullScreen;
     [property] boolean IsLivePresentation;
     [property] boolean IsMouseVisible;
     [property] long Pause;
     [property] boolean StartWithNavigator;
     [property] boolean UsePen;
    };
    published interface XCustomPresentationSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameContainer getCustomPresentations();
    };
    published interface XPresentationSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::presentation::XPresentation getPresentation();
    };
    published enum PresentationRange {
     PRESENTATIONRANGE_ALL = 0,
     PRESENTATIONRANGE_FROM_PAGE = 1,
     PRESENTATIONRANGE_INDIVIDUAL = 2
    };
    published service PresentationView {
     service ::com::sun::star::frame::Controller;
     interface ::com::sun::star::awt::XWindow;
     interface ::com::sun::star::drawing::XDrawView;
     interface ::com::sun::star::beans::XPropertySet;
     [property] ::com::sun::star::drawing::XDrawPage CurrentPage;
     [property, readonly] ::com::sun::star::awt::Rectangle VisibleArea;
    };
    published service PreviewView {
     service ::com::sun::star::frame::Controller;
     interface ::com::sun::star::awt::XWindow;
     interface ::com::sun::star::drawing::XDrawView;
     interface ::com::sun::star::beans::XPropertySet;
     [property] ::com::sun::star::drawing::XDrawPage CurrentPage;
     [property, readonly] ::com::sun::star::awt::Rectangle VisibleArea;
    };
    published service SlidesView {
     service ::com::sun::star::frame::Controller;
     interface ::com::sun::star::awt::XWindow;
     interface ::com::sun::star::beans::XPropertySet;
     [property, readonly] ::com::sun::star::awt::Rectangle VisibleArea;
    };
    published service SubtitleShape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::TextShape;
    };
    published service TitleTextShape {
     service ::com::sun::star::presentation::Shape;
     service ::com::sun::star::drawing::TextShape;
    };
    published interface XHandoutMasterSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XDrawPage getHandoutMasterPage();
    };
    published interface XPresentationPage {
     interface ::com::sun::star::drawing::XDrawPage;
     ::com::sun::star::drawing::XDrawPage getNotesPage();
    };
   };
   module text {
    published enum TextContentAnchorType {
     AT_PARAGRAPH = 0,
     AS_CHARACTER = 1,
     AT_PAGE = 2,
     AT_FRAME = 3,
     AT_CHARACTER = 4
    };
    published enum WrapTextMode {
     NONE = 0,
     THROUGHT = 1,
     PARALLEL = 2,
     DYNAMIC = 3,
     LEFT = 4,
     RIGHT = 5
    };
    published interface XTextContent {
     interface ::com::sun::star::lang::XComponent;
     void attach([in] ::com::sun::star::text::XTextRange xTextRange) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::text::XTextRange getAnchor();
    };
    published service TextContent {
     interface ::com::sun::star::text::XTextContent;
     [property, optional] ::com::sun::star::text::TextContentAnchorType AnchorType;
     [property, optional, readonly] sequence< ::com::sun::star::text::TextContentAnchorType > AnchorTypes;
     [property, optional] ::com::sun::star::text::WrapTextMode TextWrap;
    };
    published interface XTextField {
     interface ::com::sun::star::text::XTextContent;
     string getPresentation([in] boolean bShowCommand);
    };
    published service TextField {
     service ::com::sun::star::text::TextContent;
     interface ::com::sun::star::text::XTextField;
     [optional] interface ::com::sun::star::beans::XPropertySet;
     [property, optional, readonly] boolean IsFieldUsed;
     [property, optional, readonly] boolean IsFieldDisplayed;
    };
   };
   module table {
    published struct CellAddress {
     short Sheet;
     long Column;
     long Row;
    };
   };
   module sheet {
    published struct FunctionArgument {
     string Name;
     string Description;
     boolean IsOptional;
    };
   };
   module resource {
    published exception MissingResourceException: ::com::sun::star::uno::RuntimeException {
    };
    published interface XResourceBundle;
    published interface XResourceBundleLoader {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::resource::XResourceBundle loadBundle_Default([in] string aBaseName) raises (::com::sun::star::resource::MissingResourceException);
     ::com::sun::star::resource::XResourceBundle loadBundle([in] string abaseName, [in] ::com::sun::star::lang::Locale aLocale) raises (::com::sun::star::resource::MissingResourceException);
    };
    published interface XLocale {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::lang::Locale create([in] string aLanguage, [in] string aCountry, [in] string aVariant);
     ::com::sun::star::lang::Locale getDefault();
     void setDefault([in] ::com::sun::star::lang::Locale newLocale);
     sequence< ::com::sun::star::lang::Locale > getAvailableLocales();
     sequence< string > getISOCountries();
     sequence< string > getISOLanguages();
     sequence< string > getLanguagesForCountry([in] string country);
     string getISO3Language([in] ::com::sun::star::lang::Locale locale) raises (::com::sun::star::resource::MissingResourceException);
     string getISO3Country([in] ::com::sun::star::lang::Locale locale) raises (::com::sun::star::resource::MissingResourceException);
     string getDisplayLanguage_Default([in] ::com::sun::star::lang::Locale locale);
     string getDisplayLanguage([in] ::com::sun::star::lang::Locale locale, [in] ::com::sun::star::lang::Locale inLocale);
     string getDisplayCountry_Default([in] ::com::sun::star::lang::Locale locale);
     string getDisplayCountry([in] ::com::sun::star::lang::Locale locale, [in] ::com::sun::star::lang::Locale inLocale);
     string getDisplayVariant_Default([in] ::com::sun::star::lang::Locale locale);
     string getDisplayVariant([in] ::com::sun::star::lang::Locale locale, [in] ::com::sun::star::lang::Locale inLocale);
     string getDisplayName_Default([in] ::com::sun::star::lang::Locale locale);
     string getDisplayName([in] ::com::sun::star::lang::Locale locale, [in] ::com::sun::star::lang::Locale inLocale);
     boolean equals([in] ::com::sun::star::lang::Locale l1, [in] ::com::sun::star::lang::Locale l2);
    };
    /** @deprecated */ published interface XResourceBundle {
     interface ::com::sun::star::container::XNameAccess;
     [attribute] ::com::sun::star::resource::XResourceBundle Parent;
     ::com::sun::star::lang::Locale getLocale();
     any getDirectElement([in] string key);
    };
   };
   module scanner {
    published enum ScanError {
     ScanErrorNone = 0,
     ScannerNotAvailable = 1,
     ScanFailed = 2,
     ScanInProgress = 3,
     ScanCanceled = 4,
     InvalidContext = 5
    };
    published struct ScannerContext {
     string ScannerName;
     long InternalData;
    };
    published exception ScannerException: ::com::sun::star::uno::Exception {
     ::com::sun::star::scanner::ScanError Error;
    };
    published interface XScannerManager {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::scanner::ScannerContext > getAvailableScanners();
     boolean configureScanner([inout] ::com::sun::star::scanner::ScannerContext scannerContext) raises (::com::sun::star::scanner::ScannerException);
     void startScan([in] ::com::sun::star::scanner::ScannerContext scannerContext, [in] ::com::sun::star::lang::XEventListener listener) raises (::com::sun::star::scanner::ScannerException);
     ::com::sun::star::scanner::ScanError getError([in] ::com::sun::star::scanner::ScannerContext scannerContext) raises (::com::sun::star::scanner::ScannerException);
     ::com::sun::star::awt::XBitmap getBitmap([in] ::com::sun::star::scanner::ScannerContext scannerContext) raises (::com::sun::star::scanner::ScannerException);
    };
    published interface XScannerManager2 {
     interface ::com::sun::star::scanner::XScannerManager;
     boolean configureScannerAndScan([inout] ::com::sun::star::scanner::ScannerContext scannerContext, [in] ::com::sun::star::lang::XEventListener listener) raises (::com::sun::star::scanner::ScannerException);
    };
    published service ScannerManager: ::com::sun::star::scanner::XScannerManager2;
   };
   module script {
    published interface XLibraryContainer {
     interface ::com::sun::star::container::XNameAccess;
     ::com::sun::star::container::XNameContainer createLibrary([in] string Name) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException);
     ::com::sun::star::container::XNameAccess createLibraryLink([in] string Name, [in] string StorageURL, [in] boolean ReadOnly) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException);
     void removeLibrary([in] string Name) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::WrappedTargetException);
     boolean isLibraryLoaded([in] string Name) raises (::com::sun::star::container::NoSuchElementException);
     void loadLibrary([in] string Name) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::WrappedTargetException);
    };
    published interface XLibraryContainer2 {
     interface ::com::sun::star::script::XLibraryContainer;
     boolean isLibraryLink([in] string Name) raises (::com::sun::star::container::NoSuchElementException);
     string getLibraryLinkURL([in] string Name) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException);
     boolean isLibraryReadOnly([in] string Name) raises (::com::sun::star::container::NoSuchElementException);
     void setLibraryReadOnly([in] string Name, [in] boolean bReadOnly) raises (::com::sun::star::container::NoSuchElementException);
     void renameLibrary([in] string Name, [in] string NewName) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::container::ElementExistException);
    };
    published constants ModuleType {
     const long CLASS = 2;
     const long DOCUMENT = 4;
     const long FORM = 3;
     const long NORMAL = 1;
     const long UNKNOWN = 0;
    };
    published interface XLibraryContainer3 {
     interface ::com::sun::star::script::XLibraryContainer2;
     string getOriginalLibraryLinkURL([in] string Name) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException);
    };
    published interface XLibraryContainerPassword {
     interface ::com::sun::star::uno::XInterface;
     boolean isLibraryPasswordProtected([in] string Name) raises (::com::sun::star::container::NoSuchElementException);
     boolean isLibraryPasswordVerified([in] string Name) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException);
     boolean verifyLibraryPassword([in] string Name, [in] string Password) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException);
     void changeLibraryPassword([in] string Name, [in] string OldPassword, [in] string NewPassword) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException);
    };
   };
   module sdbc {
    published interface XMultipleResults {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XResultSet getResultSet() raises (::com::sun::star::sdbc::SQLException);
     long getUpdateCount() raises (::com::sun::star::sdbc::SQLException);
     boolean getMoreResults() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XPreparedBatchExecution {
     interface ::com::sun::star::uno::XInterface;
     void addBatch() raises (::com::sun::star::sdbc::SQLException);
     void clearBatch() raises (::com::sun::star::sdbc::SQLException);
     sequence< long > executeBatch() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XConnection;
    published interface XPreparedStatement {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XResultSet executeQuery() raises (::com::sun::star::sdbc::SQLException);
     long executeUpdate() raises (::com::sun::star::sdbc::SQLException);
     boolean execute() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XConnection getConnection() raises (::com::sun::star::sdbc::SQLException);
    };
    published service PreparedStatement {
     interface ::com::sun::star::sdbc::XCloseable;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::sdbc::XPreparedStatement;
     interface ::com::sun::star::sdbc::XResultSetMetaDataSupplier;
     interface ::com::sun::star::sdbc::XParameters;
     interface ::com::sun::star::sdbc::XWarningsSupplier;
     interface ::com::sun::star::sdbc::XMultipleResults;
     [optional] interface ::com::sun::star::lang::XComponent;
     [optional] interface ::com::sun::star::util::XCancellable;
     [optional] interface ::com::sun::star::sdbc::XPreparedBatchExecution;
     [property] long QueryTimeOut;
     [property] long MaxFieldSize;
     [property] long MaxRows;
     [property] string CursorName;
     [property] long ResultSetConcurrency;
     [property] long ResultSetType;
     [property] long FetchDirection;
     [property] long FetchSize;
    };
   };
   module sdb {
    published service PreparedStatement {
     service ::com::sun::star::sdbc::PreparedStatement;
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
    };
   };
   module sdbc {
    published interface XOutParameters {
     interface ::com::sun::star::uno::XInterface;
     void registerOutParameter([in] long parameterIndex, [in] long sqlType, [in] string typeName) raises (::com::sun::star::sdbc::SQLException);
     void registerNumericOutParameter([in] long parameterIndex, [in] long sqlType, [in] long scale) raises (::com::sun::star::sdbc::SQLException);
    };
    published service CallableStatement {
     service ::com::sun::star::sdbc::PreparedStatement;
     interface ::com::sun::star::sdbc::XRow;
     interface ::com::sun::star::sdbc::XOutParameters;
    };
   };
   module sdb {
    published service CallableStatement {
     service ::com::sun::star::sdbc::CallableStatement;
     service ::com::sun::star::sdb::PreparedStatement;
    };
    published service ColumnSettings {
     interface ::com::sun::star::beans::XPropertySet;
     [property] long FormatKey;
     [property] long Align;
     [property] long Width;
     [property] long Position;
     [property] boolean Hidden;
     [property, optional] ::com::sun::star::beans::XPropertySet ControlModel;
     [property, optional] string HelpText;
     [property, optional] string ControlDefault;
    };
   };
   module sdbcx {
    published interface XDataDescriptorFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet createDataDescriptor();
    };
    published service Column {
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sdbcx::XDataDescriptorFactory;
     [property, readonly] string Name;
     [property, readonly] long Type;
     [property, readonly] string TypeName;
     [property, readonly] long Precision;
     [property, readonly] long Scale;
     [property, readonly] long IsNullable;
     [property, readonly] boolean IsAutoIncrement;
     [property, readonly] boolean IsCurrency;
     [property, optional, readonly] boolean IsRowVersion;
     [property, optional, readonly] string Description;
     [property, optional, readonly] string DefaultValue;
    };
   };
   module sdb {
    published service Column {
     service ::com::sun::star::sdbcx::Column;
     service ::com::sun::star::sdb::ColumnSettings;
    };
   };
   module sdbcx {
    published interface XRename {
     interface ::com::sun::star::uno::XInterface;
     void rename([in] string newName) raises (::com::sun::star::sdbc::SQLException, ::com::sun::star::container::ElementExistException);
    };
   };
   module sdb {
    published constants CommandType {
     const long COMMAND = 2;
     const long QUERY = 1;
     const long TABLE = 0;
    };
    published interface XCommandPreparation {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XPreparedStatement prepareCommand([in] string command, [in] long commandType) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XQueriesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getQueries();
    };
    published interface XSQLQueryComposer;
    published interface XSQLQueryComposerFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdb::XSQLQueryComposer createQueryComposer();
    };
   };
   module sdbc {
    published interface XDatabaseMetaData;
    published interface XStatement;
    published interface XConnection {
     interface ::com::sun::star::sdbc::XCloseable;
     ::com::sun::star::sdbc::XStatement createStatement() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XPreparedStatement prepareStatement([in] string sql) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XPreparedStatement prepareCall([in] string sql) raises (::com::sun::star::sdbc::SQLException);
     string nativeSQL([in] string sql) raises (::com::sun::star::sdbc::SQLException);
     void setAutoCommit([in] boolean autoCommit) raises (::com::sun::star::sdbc::SQLException);
     boolean getAutoCommit() raises (::com::sun::star::sdbc::SQLException);
     void commit() raises (::com::sun::star::sdbc::SQLException);
     void rollback() raises (::com::sun::star::sdbc::SQLException);
     boolean isClosed() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XDatabaseMetaData getMetaData() raises (::com::sun::star::sdbc::SQLException);
     void setReadOnly([in] boolean readOnly) raises (::com::sun::star::sdbc::SQLException);
     boolean isReadOnly() raises (::com::sun::star::sdbc::SQLException);
     void setCatalog([in] string catalog) raises (::com::sun::star::sdbc::SQLException);
     string getCatalog() raises (::com::sun::star::sdbc::SQLException);
     void setTransactionIsolation([in] long level) raises (::com::sun::star::sdbc::SQLException);
     long getTransactionIsolation() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::container::XNameAccess getTypeMap() raises (::com::sun::star::sdbc::SQLException);
     void setTypeMap([in] ::com::sun::star::container::XNameAccess typeMap) raises (::com::sun::star::sdbc::SQLException);
    };
    published service Connection {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::sdbc::XConnection;
     interface ::com::sun::star::sdbc::XWarningsSupplier;
    };
   };
   module sdbcx {
    published interface XGroupsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getGroups();
    };
    published interface XTablesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getTables();
    };
    published interface XUsersSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getUsers();
    };
    published interface XViewsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getViews();
    };
    published service DatabaseDefinition {
     interface ::com::sun::star::sdbcx::XTablesSupplier;
     [optional] interface ::com::sun::star::sdbcx::XViewsSupplier;
     [optional] interface ::com::sun::star::sdbcx::XUsersSupplier;
     [optional] interface ::com::sun::star::sdbcx::XGroupsSupplier;
    };
   };
   module sdb {
    published service Connection {
     service ::com::sun::star::sdbc::Connection;
     service ::com::sun::star::sdbcx::DatabaseDefinition;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::sdb::XCommandPreparation;
     interface ::com::sun::star::sdb::XQueriesSupplier;
     interface ::com::sun::star::sdb::XSQLQueryComposerFactory;
     [optional] interface ::com::sun::star::lang::XMultiServiceFactory;
    };
    published service ContentLoader {
     service ::com::sun::star::frame::FrameLoader;
    };
    published service DataAccessDescriptor {
     [property, optional] string DataSourceName;
     [property, optional] string DatabaseLocation;
     [property, optional] string ConnectionResource;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > ConnectionInfo;
     [property, optional] ::com::sun::star::sdbc::XConnection ActiveConnection;
     [property, optional] string Command;
     [property, optional] long CommandType;
     [property, optional] string Filter;
     [property, optional] string Order;
     [property, optional] string HavingClause;
     [property, optional] string GroupBy;
     [property, optional] boolean EscapeProcessing;
     [property, optional] ::com::sun::star::sdbc::XResultSet ResultSet;
     [property, optional] sequence< any > Selection;
     [property, optional] boolean BookmarkSelection;
     [property, optional] string ColumnName;
     [property, optional] ::com::sun::star::beans::XPropertySet Column;
    };
    published service ResultColumn {
     service ::com::sun::star::sdbcx::Column;
     service ::com::sun::star::sdb::ColumnSettings;
     [property, readonly] boolean IsSearchable;
     [property, readonly] boolean IsSigned;
     [property, readonly] boolean IsCaseSensitive;
     [property, readonly] long DisplaySize;
     [property, readonly] string Label;
     [property, readonly] boolean IsReadOnly;
     [property, readonly] boolean IsWritable;
     [property, readonly] boolean IsDefinitelyWritable;
     [property, readonly] string ServiceName;
     [property, readonly] string TableName;
     [property, readonly] string SchemaName;
     [property, readonly] string CatalogName;
    };
   };
   module sdbc {
    published interface XArray;
    published interface XBlob;
    published interface XClob;
    published interface XRef;
   };
   module sdb {
    published interface XColumn {
     interface ::com::sun::star::uno::XInterface;
     boolean wasNull() raises (::com::sun::star::sdbc::SQLException);
     string getString() raises (::com::sun::star::sdbc::SQLException);
     boolean getBoolean() raises (::com::sun::star::sdbc::SQLException);
     byte getByte() raises (::com::sun::star::sdbc::SQLException);
     short getShort() raises (::com::sun::star::sdbc::SQLException);
     long getInt() raises (::com::sun::star::sdbc::SQLException);
     hyper getLong() raises (::com::sun::star::sdbc::SQLException);
     float getFloat() raises (::com::sun::star::sdbc::SQLException);
     double getDouble() raises (::com::sun::star::sdbc::SQLException);
     sequence< byte > getBytes() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::Date getDate() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::Time getTime() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::DateTime getTimestamp() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::io::XInputStream getBinaryStream() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::io::XInputStream getCharacterStream() raises (::com::sun::star::sdbc::SQLException);
     any getObject([in] ::com::sun::star::container::XNameAccess typeMap) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XRef getRef() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XBlob getBlob() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XClob getClob() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XArray getArray() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XColumnUpdate {
     interface ::com::sun::star::uno::XInterface;
     void updateNull() raises (::com::sun::star::sdbc::SQLException);
     void updateBoolean([in] boolean x) raises (::com::sun::star::sdbc::SQLException);
     void updateByte([in] byte x) raises (::com::sun::star::sdbc::SQLException);
     void updateShort([in] short x) raises (::com::sun::star::sdbc::SQLException);
     void updateInt([in] long x) raises (::com::sun::star::sdbc::SQLException);
     void updateLong([in] hyper x) raises (::com::sun::star::sdbc::SQLException);
     void updateFloat([in] float x) raises (::com::sun::star::sdbc::SQLException);
     void updateDouble([in] double x) raises (::com::sun::star::sdbc::SQLException);
     void updateString([in] string x) raises (::com::sun::star::sdbc::SQLException);
     void updateBytes([in] sequence< byte > x) raises (::com::sun::star::sdbc::SQLException);
     void updateDate([in] ::com::sun::star::util::Date x) raises (::com::sun::star::sdbc::SQLException);
     void updateTime([in] ::com::sun::star::util::Time x) raises (::com::sun::star::sdbc::SQLException);
     void updateTimestamp([in] ::com::sun::star::util::DateTime x) raises (::com::sun::star::sdbc::SQLException);
     void updateBinaryStream([in] ::com::sun::star::io::XInputStream x, [in] long length) raises (::com::sun::star::sdbc::SQLException);
     void updateCharacterStream([in] ::com::sun::star::io::XInputStream x, [in] long length) raises (::com::sun::star::sdbc::SQLException);
     void updateObject([in] any x) raises (::com::sun::star::sdbc::SQLException);
     void updateNumericObject([in] any x, [in] long scale) raises (::com::sun::star::sdbc::SQLException);
    };
    published service DataColumn {
     service ::com::sun::star::sdb::ResultColumn;
     interface ::com::sun::star::sdb::XColumn;
     interface ::com::sun::star::sdb::XColumnUpdate;
     [property, optional] any Value;
     [property, optional, readonly] any OriginalValue;
    };
    published service DataSettings {
     [property] string Filter;
     [property] boolean ApplyFilter;
     [property] string Order;
     [property] ::com::sun::star::awt::FontDescriptor FontDescriptor;
     [property] long RowHeight;
     [property] ::com::sun::star::util::Color TextColor;
     [property, optional] string HavingClause;
     [property, optional] string GroupBy;
    };
    published interface XBookmarksSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getBookmarks();
    };
    published interface XCompletedConnection {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XConnection connectWithCompletion([in] ::com::sun::star::task::XInteractionHandler handler) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XQueryDefinitionsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getQueryDefinitions();
    };
   };
   module sdbc {
    published interface XDataSource {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XConnection getConnection([in] string user, [in] string password) raises (::com::sun::star::sdbc::SQLException);
     void setLoginTimeout([in] long seconds) raises (::com::sun::star::sdbc::SQLException);
     long getLoginTimeout() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XIsolatedConnection {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XConnection getIsolatedConnectionWithCompletion([in] ::com::sun::star::task::XInteractionHandler handler) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XConnection getIsolatedConnection([in] string user, [in] string password) raises (::com::sun::star::sdbc::SQLException);
    };
   };
   module sdb {
    published service DataSource {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::sdb::XCompletedConnection;
     interface ::com::sun::star::sdbc::XIsolatedConnection;
     interface ::com::sun::star::util::XFlushable;
     interface ::com::sun::star::sdb::XQueryDefinitionsSupplier;
     interface ::com::sun::star::sdbc::XDataSource;
     [optional] interface ::com::sun::star::sdb::XBookmarksSupplier;
     [property, readonly] string Name;
     [property] string URL;
     [property] sequence< ::com::sun::star::beans::PropertyValue > Info;
     [property, optional, readonly] ::com::sun::star::beans::XPropertySet Settings;
     [property] string User;
     [property] string Password;
     [property] boolean IsPasswordRequired;
     [property] boolean SuppressVersionColumns;
     [property, readonly] boolean IsReadOnly;
     [property, readonly] ::com::sun::star::util::XNumberFormatsSupplier NumberFormatsSupplier;
     [property] sequence< string > TableFilter;
     [property] sequence< string > TableTypeFilter;
    };
    published service DataSourceBrowser {
     [optional] service ::com::sun::star::form::FormController;
     interface ::com::sun::star::frame::XController;
     interface ::com::sun::star::lang::XInitialization;
     interface ::com::sun::star::frame::XDispatchProvider;
     [optional] interface ::com::sun::star::ui::XContextMenuInterception;
    };
    published interface XDatabaseAccessListener;
    /** @deprecated */ published interface XDatabaseAccess {
     interface ::com::sun::star::sdbc::XDataSource;
     boolean hasConnections();
     ::com::sun::star::sdbc::XConnection getIsolatedConnection([in] string user, [in] string password) raises (::com::sun::star::sdbc::SQLException);
     boolean suspendConnections() raises (::com::sun::star::sdbc::SQLException);
     void addDatabaseAccessListener([in] ::com::sun::star::sdb::XDatabaseAccessListener listener);
     void removeDatabaseAccessListener([in] ::com::sun::star::sdb::XDatabaseAccessListener listener);
    };
    /** @deprecated */ published service DatabaseAccess {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::sdb::XDatabaseAccess;
     [optional] interface ::com::sun::star::sdb::XCompletedConnection;
     [property, readonly] string URL;
     [property] string Title;
     [property] string ConnectURL;
     [property] sequence< ::com::sun::star::beans::PropertyValue > ConnectInfo;
     [property, readonly] boolean IsReadOnly;
     [property] ::com::sun::star::util::XNumberFormatsSupplier NumberFormatsSupplier;
     [property, optional] boolean IsPasswordRequired;
     [property, optional] sequence< string > TableFilter;
     [property, optional] sequence< string > TableTypeFilter;
    };
    /** @deprecated */ published service DatabaseAccessConnection {
     service ::com::sun::star::sdbc::Connection;
     service ::com::sun::star::sdbcx::DatabaseDefinition;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::sdb::XSQLQueryComposerFactory;
     interface ::com::sun::star::sdb::XQueriesSupplier;
    };
   };
   module util {
    published struct AliasProgrammaticPair {
     string Alias;
     string ProgrammaticName;
    };
    published interface XLocalizedAliases {
     interface ::com::sun::star::uno::XInterface;
     void bindAlias([in] string programmaticName, [in] ::com::sun::star::lang::Locale locale, [in] string alias) raises (::com::sun::star::container::ElementExistException);
     void unbindAlias([in] ::com::sun::star::lang::Locale locale, [in] string alias) raises (::com::sun::star::container::NoSuchElementException);
     string lookupAlias([in] ::com::sun::star::lang::Locale locale, [in] string Alias) raises (::com::sun::star::container::NoSuchElementException);
     string lookupProgrammatic([in] ::com::sun::star::lang::Locale locale, [in] string programmatic) raises (::com::sun::star::container::NoSuchElementException);
     void unbindAliases([in] string programmaticName) raises (::com::sun::star::container::NoSuchElementException);
     void rebindAliases([in] string currentProgrammatic, [in] string newProgrammatic) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::container::ElementExistException);
     void renameAlias([in] ::com::sun::star::lang::Locale locale, [in] string oldName, [in] string aNewName) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::container::ElementExistException);
     sequence< ::com::sun::star::util::AliasProgrammaticPair > listAliases([in] ::com::sun::star::lang::Locale locale);
    };
   };
   module sdb {
    /** @deprecated */ published service DatabaseAccessContext {
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::util::XLocalizedAliases;
     interface ::com::sun::star::lang::XLocalizable;
    };
   };
   module ucb {
    published enum RememberAuthentication {
     NO = 0,
     SESSION = 1,
     PERSISTENT = 2
    };
   };
   module sdb {
    /** @deprecated */ published service DatabaseAccessDataSource {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::sdbc::XDataSource;
     [optional] interface ::com::sun::star::sdb::XCompletedConnection;
     [property] string URL;
     [property, optional] ::com::sun::star::ucb::RememberAuthentication PasswordMode;
    };
    published interface XDatabaseRegistrationsListener;
    published interface XDatabaseRegistrations {
     interface ::com::sun::star::uno::XInterface;
     boolean hasRegisteredDatabase([in] string Name) raises (::com::sun::star::lang::IllegalArgumentException);
     sequence< string > getRegistrationNames();
     string getDatabaseLocation([in] string Name) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException);
     void registerDatabaseLocation([in] string Name, [in] string Location) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException);
     void revokeDatabaseLocation([in] string Name) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::IllegalAccessException);
     void changeDatabaseLocation([in] string Name, [in] string NewLocation) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::IllegalAccessException);
     boolean isDatabaseRegistrationReadOnly([in] string Name) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::NoSuchElementException);
     void addDatabaseRegistrationsListener([in] ::com::sun::star::sdb::XDatabaseRegistrationsListener Listener);
     void removeDatabaseRegistrationsListener([in] ::com::sun::star::sdb::XDatabaseRegistrationsListener Listener);
    };
    published interface XDatabaseContext {
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::uno::XNamingService;
     interface ::com::sun::star::container::XContainer;
     interface ::com::sun::star::lang::XSingleServiceFactory;
     interface ::com::sun::star::sdb::XDatabaseRegistrations;
    };
    published service DatabaseContext: ::com::sun::star::sdb::XDatabaseContext;
    /** @deprecated */ published service DatabaseDocument {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::sdbcx::XDataDescriptorFactory;
     interface ::com::sun::star::sdbcx::XRename;
     [property, readonly] string Name;
     [property, readonly] string URL;
    };
   };
   module sdbc {
    published interface XDriverManager {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XConnection getConnection([in] string url) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XConnection getConnectionWithInfo([in] string url, [in] sequence< ::com::sun::star::beans::PropertyValue > info) raises (::com::sun::star::sdbc::SQLException);
     void setLoginTimeout([in] long seconds);
     long getLoginTimeout();
    };
   };
   module sdb {
    /** @deprecated */ published interface XDatabaseEnvironment {
     interface ::com::sun::star::sdbc::XDriverManager;
     ::com::sun::star::sdb::XDatabaseAccess getDatabaseAccess([in] string URL) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdb::XDatabaseAccess createDatabaseAccess([in] string URL, [in] string title) raises (::com::sun::star::sdbc::SQLException);
    };
    /** @deprecated */ published service DatabaseEnvironment {
     interface ::com::sun::star::sdb::XDatabaseEnvironment;
     interface ::com::sun::star::beans::XPropertySet;
     [property, readonly] ::com::sun::star::util::XNumberFormatsSupplier NumberFormatsSupplier;
    };
    published struct DatabaseRegistrationEvent: ::com::sun::star::lang::EventObject {
     string Name;
     string OldLocation;
     string NewLocation;
    };
    published service DatasourceAdministrationDialog {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::ui::dialogs::XExecutableDialog;
     interface ::com::sun::star::lang::XInitialization;
     [property] string Title;
     [property] ::com::sun::star::awt::XWindow ParentWindow;
    };
    published service DefinitionContainer {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XNameContainer;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     [optional] interface ::com::sun::star::util::XRefreshable;
     [optional] interface ::com::sun::star::lang::XSingleServiceFactory;
    };
   };
   module ucb {
    published interface XCommandInfoChangeListener;
    published interface XCommandInfoChangeNotifier {
     interface ::com::sun::star::uno::XInterface;
     void addCommandInfoChangeListener([in] ::com::sun::star::ucb::XCommandInfoChangeListener Listener);
     void removeCommandInfoChangeListener([in] ::com::sun::star::ucb::XCommandInfoChangeListener Listener);
    };
    published struct Command {
     string Name;
     long Handle;
     any Argument;
    };
    published interface XCommandProcessor {
     interface ::com::sun::star::uno::XInterface;
     long createCommandIdentifier();
     any execute([in] ::com::sun::star::ucb::Command aCommand, [in] long CommandId, [in] ::com::sun::star::ucb::XCommandEnvironment Environment) raises (::com::sun::star::uno::Exception, ::com::sun::star::ucb::CommandAbortedException);
     void abort([in] long CommandId);
    };
    published interface XCommandProcessor2 {
     interface ::com::sun::star::ucb::XCommandProcessor;
     void releaseCommandIdentifier([in] long CommandId);
    };
    published interface XContentEventListener;
    published interface XContentIdentifier;
    published interface XContent {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContentIdentifier getIdentifier();
     string getContentType();
     void addContentEventListener([in] ::com::sun::star::ucb::XContentEventListener Listener);
     void removeContentEventListener([in] ::com::sun::star::ucb::XContentEventListener Listener);
    };
    published struct ContentInfo {
     string Type;
     long Attributes;
     sequence< ::com::sun::star::beans::Property > Properties;
    };
    /** @deprecated */ published interface XContentCreator {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::ucb::ContentInfo > queryCreatableContentsInfo();
     ::com::sun::star::ucb::XContent createNewContent([in] ::com::sun::star::ucb::ContentInfo Info);
    };
    published service Content {
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     /** @deprecated */ interface ::com::sun::star::beans::XPropertyContainer;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
     [optional] interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     [optional] interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     /** @deprecated */ [optional] interface ::com::sun::star::ucb::XContentCreator;
     [optional] interface ::com::sun::star::container::XChild;
    };
   };
   module sdb {
    /** @deprecated */ published service Document {
     interface ::com::sun::star::beans::XPropertySet;
     [property, readonly] string Name;
     [property] string DocumentLocation;
    };
    published service ErrorMessageDialog: ::com::sun::star::ui::dialogs::XExecutableDialog {
     create([in] string initialTitle, [in] ::com::sun::star::awt::XWindow parentWindow, [in] any sqlException);
    };
    /** @deprecated */ published service InteractionHandler: ::com::sun::star::task::XInteractionHandler;
    published exception ParametersRequest: ::com::sun::star::task::ClassifiedInteractionRequest {
     ::com::sun::star::container::XIndexAccess Parameters;
     ::com::sun::star::sdbc::XConnection Connection;
    };
    published interface XQueryDefinition {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::lang::XComponent;
    };
    published service Query {
     service ::com::sun::star::sdb::DataSettings;
     interface ::com::sun::star::sdb::XQueryDefinition;
     interface ::com::sun::star::sdbcx::XDataDescriptorFactory;
     interface ::com::sun::star::sdbcx::XRename;
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
    };
    published service QueryDefinition: ::com::sun::star::sdb::XQueryDefinition;
   };
   module sdbcx {
    published service Descriptor {
     interface ::com::sun::star::beans::XPropertySet;
     [property] string Name;
    };
   };
   module sdb {
    published service QueryDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     service ::com::sun::star::sdb::DataSettings;
     interface ::com::sun::star::sdbcx::XDataDescriptorFactory;
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
     [property] string Command;
     [property] boolean EscapeProcessing;
     [property] string UpdateTableName;
     [property] string UpdateCatalogName;
     [property] string UpdateSchemaName;
    };
    published service QueryDesign {
     interface ::com::sun::star::frame::XController;
     interface ::com::sun::star::lang::XInitialization;
     [property, readonly] string ActiveCommand;
     [property, optional, readonly] boolean EscapeProcessing;
    };
    published service RelationDesign {
     interface ::com::sun::star::frame::XController;
     interface ::com::sun::star::lang::XInitialization;
    };
    published constants RowChangeAction {
     const long DELETE = 3;
     const long INSERT = 1;
     const long UPDATE = 2;
    };
    published exception RowSetVetoException: ::com::sun::star::sdbc::SQLException {
    };
   };
   module sdbc {
    published exception SQLWarning: ::com::sun::star::sdbc::SQLException {
    };
   };
   module sdb {
    published exception SQLContext: ::com::sun::star::sdbc::SQLWarning {
     string Details;
    };
    published struct SQLErrorEvent: ::com::sun::star::lang::EventObject {
     any Reason;
    };
    published interface XSQLQueryComposer {
     interface ::com::sun::star::uno::XInterface;
     string getQuery();
     void setQuery([in] string command) raises (::com::sun::star::sdbc::SQLException);
     string getComposedQuery();
     string getFilter();
     sequence< sequence< ::com::sun::star::beans::PropertyValue > > getStructuredFilter();
     string getOrder();
     void appendFilterByColumn([in] ::com::sun::star::beans::XPropertySet column) raises (::com::sun::star::sdbc::SQLException);
     void appendOrderByColumn([in] ::com::sun::star::beans::XPropertySet column, [in] boolean ascending) raises (::com::sun::star::sdbc::SQLException);
     void setFilter([in] string filter) raises (::com::sun::star::sdbc::SQLException);
     void setOrder([in] string order) raises (::com::sun::star::sdbc::SQLException);
    };
    published service SQLQueryComposer {
     interface ::com::sun::star::sdb::XSQLQueryComposer;
     interface ::com::sun::star::sdbcx::XTablesSupplier;
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
    };
   };
   module sdbcx {
    published interface XAlterTable {
     interface ::com::sun::star::uno::XInterface;
     void alterColumnByName([in] string colName, [in] ::com::sun::star::beans::XPropertySet descriptor) raises (::com::sun::star::sdbc::SQLException, ::com::sun::star::container::NoSuchElementException);
     void alterColumnByIndex([in] long index, [in] ::com::sun::star::beans::XPropertySet descriptor) raises (::com::sun::star::sdbc::SQLException, ::com::sun::star::lang::IndexOutOfBoundsException);
    };
    published interface XIndexesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getIndexes();
    };
    published interface XKeysSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getKeys();
    };
    published service Table {
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sdbcx::XDataDescriptorFactory;
     [optional] interface ::com::sun::star::sdbcx::XIndexesSupplier;
     [optional] interface ::com::sun::star::sdbcx::XKeysSupplier;
     [optional] interface ::com::sun::star::sdbcx::XRename;
     [optional] interface ::com::sun::star::sdbcx::XAlterTable;
     [property, readonly] string Name;
     [property, readonly] string CatalogName;
     [property, readonly] string SchemaName;
     [property, readonly] string Description;
     [property, optional, readonly] string Type;
    };
   };
   module sdb {
    published service Table {
     service ::com::sun::star::sdbcx::Table;
     service ::com::sun::star::sdb::DataSettings;
     [property, readonly] long Privileges;
    };
   };
   module sdbcx {
    published service TableDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
     [optional] interface ::com::sun::star::sdbcx::XKeysSupplier;
     [property] string CatalogName;
     [property] string SchemaName;
     [property] string Description;
    };
   };
   module sdb {
    published service TableDescriptor {
     service ::com::sun::star::sdbcx::TableDescriptor;
     service ::com::sun::star::sdb::DataSettings;
    };
    published service TableDesign {
     interface ::com::sun::star::frame::XController;
     interface ::com::sun::star::lang::XInitialization;
    };
    published interface XAlterQuery {
     interface ::com::sun::star::uno::XInterface;
     void alterCommand([in] string command, [in] boolean useEscapeProcessing) raises (::com::sun::star::sdbc::SQLException);
    };
    /** @deprecated */ published interface XDatabaseAccessListener {
     interface ::com::sun::star::lang::XEventListener;
     void connectionChanged([in] ::com::sun::star::lang::EventObject event);
     boolean approveConnectionClosing([in] ::com::sun::star::lang::EventObject event);
     void connectionClosing([in] ::com::sun::star::lang::EventObject event);
    };
    published interface XDatabaseRegistrationsListener {
     interface ::com::sun::star::lang::XEventListener;
     void registeredDatabaseLocation([in] ::com::sun::star::sdb::DatabaseRegistrationEvent Event);
     void revokedDatabaseLocation([in] ::com::sun::star::sdb::DatabaseRegistrationEvent Event);
     void changedDatabaseLocation([in] ::com::sun::star::sdb::DatabaseRegistrationEvent Event);
    };
    published interface XInteractionSupplyParameters {
     interface ::com::sun::star::task::XInteractionContinuation;
     void setParameters([in] sequence< ::com::sun::star::beans::PropertyValue > Values);
    };
    published interface XRowSetApproveListener {
     interface ::com::sun::star::lang::XEventListener;
     boolean approveCursorMove([in] ::com::sun::star::lang::EventObject event);
     boolean approveRowChange([in] ::com::sun::star::sdb::RowChangeEvent event);
     boolean approveRowSetChange([in] ::com::sun::star::lang::EventObject event);
    };
    published interface XRowSetSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XRowSet getRowSet();
     void setRowSet([in] ::com::sun::star::sdbc::XRowSet xDataSource);
    };
    published interface XSQLErrorListener {
     interface ::com::sun::star::lang::XEventListener;
     void errorOccured([in] ::com::sun::star::sdb::SQLErrorEvent aEvent);
    };
   };
   module sdbc {
    published exception BatchUpdateException: ::com::sun::star::sdbc::SQLException {
     sequence< long > UpdateCounts;
    };
    published constants BestRowScope {
     const long SESSION = 2;
     const long TEMPORARY = 0;
     const long TRANSACTION = 1;
    };
    published constants BestRowType {
     const long NOT_PSEUDO = 1;
     const long PSEUDO = 2;
     const long UNKNOWN = 0;
    };
    /** @deprecated */ published constants ChangeAction {
     const long DELETE = 3;
     const long INSERT = 1;
     const long UNDO = 4;
     const long UPDATE = 2;
    };
    /** @deprecated */ published struct ChangeEvent: ::com::sun::star::lang::EventObject {
     long Action;
     long Rows;
    };
    published constants ColumnSearch {
     const long BASIC = 2;
     const long CHAR = 1;
     const long FULL = 3;
     const long NONE = 0;
    };
    published constants ColumnType {
     const long NOT_PSEUDO = 1;
     const long PSEUDO = 2;
     const long UNKNOWN = 0;
    };
    published constants ColumnValue {
     const long NO_NULLS = 0;
     const long NULLABLE = 1;
     const long NULLABLE_UNKNOWN = 2;
    };
    published interface XDriver;
    published interface XDriverAccess {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XDriver getDriverByURL([in] string url);
    };
    published interface XConnectionPool {
     interface ::com::sun::star::sdbc::XDriverManager;
     interface ::com::sun::star::sdbc::XDriverAccess;
    };
    published service ConnectionPool: ::com::sun::star::sdbc::XConnectionPool;
    published service ConnectionProperties {
     [property, optional] string user;
     [property, optional] string password;
    };
    published exception DataTruncation: ::com::sun::star::sdbc::SQLWarning {
     long Index;
     boolean IsParameter;
     boolean DuringRead;
     long DataSize;
     long TransferSize;
    };
    published constants DataType {
     const long ARRAY = 2003;
     const long BIGINT = -5;
     const long BINARY = -2;
     const long BIT = -7;
     const long BLOB = 2004;
     const long BOOLEAN = 16;
     const long CHAR = 1;
     const long CLOB = 2005;
     const long DATE = 91;
     const long DECIMAL = 3;
     const long DISTINCT = 2001;
     const long DOUBLE = 8;
     const long FLOAT = 6;
     const long INTEGER = 4;
     const long LONGVARBINARY = -4;
     const long LONGVARCHAR = -1;
     const long NUMERIC = 2;
     const long OBJECT = 2000;
     const long OTHER = 1111;
     const long REAL = 7;
     const long REF = 2006;
     const long SMALLINT = 5;
     const long SQLNULL = 0;
     const long STRUCT = 2002;
     const long TIME = 92;
     const long TIMESTAMP = 93;
     const long TINYINT = -6;
     const long VARBINARY = -3;
     const long VARCHAR = 12;
    };
    published constants Deferrability {
     const long INITIALLY_DEFERRED = 5;
     const long INITIALLY_IMMEDIATE = 6;
     const long NONE = 7;
    };
    published struct DriverPropertyInfo {
     string Name;
     string Description;
     boolean IsRequired;
     string Value;
     sequence< string > Choices;
    };
    published interface XDriver {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XConnection connect([in] string url, [in] sequence< ::com::sun::star::beans::PropertyValue > info) raises (::com::sun::star::sdbc::SQLException);
     boolean acceptsURL([in] string url) raises (::com::sun::star::sdbc::SQLException);
     sequence< ::com::sun::star::sdbc::DriverPropertyInfo > getPropertyInfo([in] string url, [in] sequence< ::com::sun::star::beans::PropertyValue > info) raises (::com::sun::star::sdbc::SQLException);
     long getMajorVersion();
     long getMinorVersion();
    };
    published service Driver {
     interface ::com::sun::star::sdbc::XDriver;
    };
    published interface XDriverManager2 {
     interface ::com::sun::star::sdbc::XDriverManager;
     interface ::com::sun::star::sdbc::XDriverAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service DriverManager: ::com::sun::star::sdbc::XDriverManager2;
    published constants FetchDirection {
     const long FORWARD = 1000;
     const long REVERSE = 1001;
     const long UNKNOWN = 1002;
    };
    published constants IndexType {
     const short CLUSTERED = 1;
     const short HASHED = 2;
     const short OTHER = 3;
     const short STATISTIC = 0;
    };
    published constants KeyRule {
     const long CASCADE = 0;
     const long NO_ACTION = 3;
     const long RESTRICT = 1;
     const long SET_DEFAULT = 4;
     const long SET_NULL = 2;
    };
    published constants ProcedureColumn {
     const long IN = 1;
     const long INOUT = 2;
     const long OUT = 4;
     const long RESULT = 3;
     const long RETURN = 5;
     const long UNKNOWN = 0;
    };
    published constants ProcedureResult {
     const long NONE = 1;
     const long RETURN = 2;
     const long UNKNOWN = 0;
    };
    published constants ResultSetConcurrency {
     const long READ_ONLY = 1007;
     const long UPDATABLE = 1008;
    };
    published constants ResultSetType {
     const long FORWARD_ONLY = 1003;
     const long SCROLL_INSENSITIVE = 1004;
     const long SCROLL_SENSITIVE = 1005;
    };
    published interface XBatchExecution {
     interface ::com::sun::star::uno::XInterface;
     void addBatch([in] string sql) raises (::com::sun::star::sdbc::SQLException);
     void clearBatch() raises (::com::sun::star::sdbc::SQLException);
     sequence< long > executeBatch() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XStatement {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XResultSet executeQuery([in] string sql) raises (::com::sun::star::sdbc::SQLException);
     long executeUpdate([in] string sql) raises (::com::sun::star::sdbc::SQLException);
     boolean execute([in] string sql) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XConnection getConnection() raises (::com::sun::star::sdbc::SQLException);
    };
    published service Statement {
     interface ::com::sun::star::sdbc::XCloseable;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::sdbc::XStatement;
     interface ::com::sun::star::sdbc::XWarningsSupplier;
     [optional] interface ::com::sun::star::lang::XComponent;
     [optional] interface ::com::sun::star::util::XCancellable;
     [optional] interface ::com::sun::star::sdbc::XBatchExecution;
     [optional] interface ::com::sun::star::sdbc::XMultipleResults;
     [property] long QueryTimeOut;
     [property] long MaxFieldSize;
     [property] long MaxRows;
     [property] string CursorName;
     [property] long ResultSetConcurrency;
     [property] long ResultSetType;
     [property] long FetchDirection;
     [property] long FetchSize;
     [property] boolean EscapeProcessing;
    };
    published constants TransactionIsolation {
     const long NONE = 0;
     const long READ_COMMITTED = 2;
     const long READ_UNCOMMITTED = 1;
     const long REPEATABLE_READ = 4;
     const long SERIALIZABLE = 8;
    };
    published interface XArray {
     interface ::com::sun::star::uno::XInterface;
     string getBaseTypeName() raises (::com::sun::star::sdbc::SQLException);
     long getBaseType() raises (::com::sun::star::sdbc::SQLException);
     sequence< any > getArray([in] ::com::sun::star::container::XNameAccess typeMap) raises (::com::sun::star::sdbc::SQLException);
     sequence< any > getArrayAtIndex([in] long index, [in] long count, [in] ::com::sun::star::container::XNameAccess typeMap) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getResultSet([in] ::com::sun::star::container::XNameAccess typeMap) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getResultSetAtIndex([in] long index, [in] long count, [in] ::com::sun::star::container::XNameAccess typeMap) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XBlob {
     interface ::com::sun::star::uno::XInterface;
     hyper length() raises (::com::sun::star::sdbc::SQLException);
     sequence< byte > getBytes([in] hyper pos, [in] long length) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::io::XInputStream getBinaryStream() raises (::com::sun::star::sdbc::SQLException);
     hyper position([in] sequence< byte > pattern, [in] hyper start) raises (::com::sun::star::sdbc::SQLException);
     hyper positionOfBlob([in] ::com::sun::star::sdbc::XBlob pattern, [in] hyper start) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XClob {
     interface ::com::sun::star::uno::XInterface;
     hyper length() raises (::com::sun::star::sdbc::SQLException);
     string getSubString([in] hyper pos, [in] long length) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::io::XInputStream getCharacterStream() raises (::com::sun::star::sdbc::SQLException);
     hyper position([in] string searchstr, [in] long start) raises (::com::sun::star::sdbc::SQLException);
     hyper positionOfClob([in] ::com::sun::star::sdbc::XClob pattern, [in] hyper start) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XDatabaseMetaData {
     interface ::com::sun::star::uno::XInterface;
     boolean allProceduresAreCallable() raises (::com::sun::star::sdbc::SQLException);
     boolean allTablesAreSelectable() raises (::com::sun::star::sdbc::SQLException);
     string getURL() raises (::com::sun::star::sdbc::SQLException);
     string getUserName() raises (::com::sun::star::sdbc::SQLException);
     boolean isReadOnly() raises (::com::sun::star::sdbc::SQLException);
     boolean nullsAreSortedHigh() raises (::com::sun::star::sdbc::SQLException);
     boolean nullsAreSortedLow() raises (::com::sun::star::sdbc::SQLException);
     boolean nullsAreSortedAtStart() raises (::com::sun::star::sdbc::SQLException);
     boolean nullsAreSortedAtEnd() raises (::com::sun::star::sdbc::SQLException);
     string getDatabaseProductName() raises (::com::sun::star::sdbc::SQLException);
     string getDatabaseProductVersion() raises (::com::sun::star::sdbc::SQLException);
     string getDriverName() raises (::com::sun::star::sdbc::SQLException);
     string getDriverVersion() raises (::com::sun::star::sdbc::SQLException);
     long getDriverMajorVersion();
     long getDriverMinorVersion();
     boolean usesLocalFiles() raises (::com::sun::star::sdbc::SQLException);
     boolean usesLocalFilePerTable() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsMixedCaseIdentifiers() raises (::com::sun::star::sdbc::SQLException);
     boolean storesUpperCaseIdentifiers() raises (::com::sun::star::sdbc::SQLException);
     boolean storesLowerCaseIdentifiers() raises (::com::sun::star::sdbc::SQLException);
     boolean storesMixedCaseIdentifiers() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsMixedCaseQuotedIdentifiers() raises (::com::sun::star::sdbc::SQLException);
     boolean storesUpperCaseQuotedIdentifiers() raises (::com::sun::star::sdbc::SQLException);
     boolean storesLowerCaseQuotedIdentifiers() raises (::com::sun::star::sdbc::SQLException);
     boolean storesMixedCaseQuotedIdentifiers() raises (::com::sun::star::sdbc::SQLException);
     string getIdentifierQuoteString() raises (::com::sun::star::sdbc::SQLException);
     string getSQLKeywords() raises (::com::sun::star::sdbc::SQLException);
     string getNumericFunctions() raises (::com::sun::star::sdbc::SQLException);
     string getStringFunctions() raises (::com::sun::star::sdbc::SQLException);
     string getSystemFunctions() raises (::com::sun::star::sdbc::SQLException);
     string getTimeDateFunctions() raises (::com::sun::star::sdbc::SQLException);
     string getSearchStringEscape() raises (::com::sun::star::sdbc::SQLException);
     string getExtraNameCharacters() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsAlterTableWithAddColumn() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsAlterTableWithDropColumn() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsColumnAliasing() raises (::com::sun::star::sdbc::SQLException);
     boolean nullPlusNonNullIsNull() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsTypeConversion() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsConvert([in] long fromType, [in] long toType) raises (::com::sun::star::sdbc::SQLException);
     boolean supportsTableCorrelationNames() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsDifferentTableCorrelationNames() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsExpressionsInOrderBy() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsOrderByUnrelated() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsGroupBy() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsGroupByUnrelated() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsGroupByBeyondSelect() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsLikeEscapeClause() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsMultipleResultSets() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsMultipleTransactions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsNonNullableColumns() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsMinimumSQLGrammar() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsCoreSQLGrammar() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsExtendedSQLGrammar() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsANSI92EntryLevelSQL() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsANSI92IntermediateSQL() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsANSI92FullSQL() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsIntegrityEnhancementFacility() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsOuterJoins() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsFullOuterJoins() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsLimitedOuterJoins() raises (::com::sun::star::sdbc::SQLException);
     string getSchemaTerm() raises (::com::sun::star::sdbc::SQLException);
     string getProcedureTerm() raises (::com::sun::star::sdbc::SQLException);
     string getCatalogTerm() raises (::com::sun::star::sdbc::SQLException);
     boolean isCatalogAtStart() raises (::com::sun::star::sdbc::SQLException);
     string getCatalogSeparator() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSchemasInDataManipulation() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSchemasInProcedureCalls() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSchemasInTableDefinitions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSchemasInIndexDefinitions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSchemasInPrivilegeDefinitions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsCatalogsInDataManipulation() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsCatalogsInProcedureCalls() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsCatalogsInTableDefinitions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsCatalogsInIndexDefinitions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsCatalogsInPrivilegeDefinitions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsPositionedDelete() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsPositionedUpdate() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSelectForUpdate() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsStoredProcedures() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSubqueriesInComparisons() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSubqueriesInExists() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSubqueriesInIns() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsSubqueriesInQuantifieds() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsCorrelatedSubqueries() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsUnion() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsUnionAll() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsOpenCursorsAcrossCommit() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsOpenCursorsAcrossRollback() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsOpenStatementsAcrossCommit() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsOpenStatementsAcrossRollback() raises (::com::sun::star::sdbc::SQLException);
     long getMaxBinaryLiteralLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxCharLiteralLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxColumnNameLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxColumnsInGroupBy() raises (::com::sun::star::sdbc::SQLException);
     long getMaxColumnsInIndex() raises (::com::sun::star::sdbc::SQLException);
     long getMaxColumnsInOrderBy() raises (::com::sun::star::sdbc::SQLException);
     long getMaxColumnsInSelect() raises (::com::sun::star::sdbc::SQLException);
     long getMaxColumnsInTable() raises (::com::sun::star::sdbc::SQLException);
     long getMaxConnections() raises (::com::sun::star::sdbc::SQLException);
     long getMaxCursorNameLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxIndexLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxSchemaNameLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxProcedureNameLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxCatalogNameLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxRowSize() raises (::com::sun::star::sdbc::SQLException);
     boolean doesMaxRowSizeIncludeBlobs() raises (::com::sun::star::sdbc::SQLException);
     long getMaxStatementLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxStatements() raises (::com::sun::star::sdbc::SQLException);
     long getMaxTableNameLength() raises (::com::sun::star::sdbc::SQLException);
     long getMaxTablesInSelect() raises (::com::sun::star::sdbc::SQLException);
     long getMaxUserNameLength() raises (::com::sun::star::sdbc::SQLException);
     long getDefaultTransactionIsolation() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsTransactions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsTransactionIsolationLevel([in] long level) raises (::com::sun::star::sdbc::SQLException);
     boolean supportsDataDefinitionAndDataManipulationTransactions() raises (::com::sun::star::sdbc::SQLException);
     boolean supportsDataManipulationTransactionsOnly() raises (::com::sun::star::sdbc::SQLException);
     boolean dataDefinitionCausesTransactionCommit() raises (::com::sun::star::sdbc::SQLException);
     boolean dataDefinitionIgnoredInTransactions() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getProcedures([in] any catalog, [in] string schemaPattern, [in] string procedureNamePattern) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getProcedureColumns([in] any catalog, [in] string schemaPattern, [in] string procedureNamePattern, [in] string columnNamePattern) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getTables([in] any catalog, [in] string schemaPattern, [in] string tableNamePattern, [in] sequence< string > types) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getSchemas() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getCatalogs() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getTableTypes() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getColumns([in] any catalog, [in] string schemaPattern, [in] string tableNamePattern, [in] string columnNamePattern) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getColumnPrivileges([in] any catalog, [in] string schema, [in] string table, [in] string columnNamePattern) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getTablePrivileges([in] any catalog, [in] string schemaPattern, [in] string tableNamePattern) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getBestRowIdentifier([in] any catalog, [in] string schema, [in] string table, [in] long scope, [in] boolean nullable) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getVersionColumns([in] any catalog, [in] string schema, [in] string table) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getPrimaryKeys([in] any catalog, [in] string schema, [in] string table) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getImportedKeys([in] any catalog, [in] string schema, [in] string table) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getExportedKeys([in] any catalog, [in] string schema, [in] string table) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getCrossReference([in] any primaryCatalog, [in] string primarySchema, [in] string primaryTable, [in] any foreignCatalog, [in] string foreignSchema, [in] string foreignTable) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getTypeInfo() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getIndexInfo([in] any catalog, [in] string schema, [in] string table, [in] boolean unique, [in] boolean approximate) raises (::com::sun::star::sdbc::SQLException);
     boolean supportsResultSetType([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean supportsResultSetConcurrency([in] long setType, [in] long concurrency) raises (::com::sun::star::sdbc::SQLException);
     boolean ownUpdatesAreVisible([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean ownDeletesAreVisible([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean ownInsertsAreVisible([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean othersUpdatesAreVisible([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean othersDeletesAreVisible([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean othersInsertsAreVisible([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean updatesAreDetected([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean deletesAreDetected([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean insertsAreDetected([in] long setType) raises (::com::sun::star::sdbc::SQLException);
     boolean supportsBatchUpdates() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XResultSet getUDTs([in] any catalog, [in] string schemaPattern, [in] string typeNamePattern, [in] sequence< long > types) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XConnection getConnection() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XGeneratedResultSet {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XResultSet getGeneratedValues() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XPooledConnection {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XConnection getConnection() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XRef {
     interface ::com::sun::star::uno::XInterface;
     string getBaseTypeName() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XResultSetMetaData {
     interface ::com::sun::star::uno::XInterface;
     long getColumnCount() raises (::com::sun::star::sdbc::SQLException);
     boolean isAutoIncrement([in] long column) raises (::com::sun::star::sdbc::SQLException);
     boolean isCaseSensitive([in] long column) raises (::com::sun::star::sdbc::SQLException);
     boolean isSearchable([in] long column) raises (::com::sun::star::sdbc::SQLException);
     boolean isCurrency([in] long column) raises (::com::sun::star::sdbc::SQLException);
     long isNullable([in] long column) raises (::com::sun::star::sdbc::SQLException);
     boolean isSigned([in] long column) raises (::com::sun::star::sdbc::SQLException);
     long getColumnDisplaySize([in] long column) raises (::com::sun::star::sdbc::SQLException);
     string getColumnLabel([in] long column) raises (::com::sun::star::sdbc::SQLException);
     string getColumnName([in] long column) raises (::com::sun::star::sdbc::SQLException);
     string getSchemaName([in] long column) raises (::com::sun::star::sdbc::SQLException);
     long getPrecision([in] long column) raises (::com::sun::star::sdbc::SQLException);
     long getScale([in] long column) raises (::com::sun::star::sdbc::SQLException);
     string getTableName([in] long column) raises (::com::sun::star::sdbc::SQLException);
     string getCatalogName([in] long column) raises (::com::sun::star::sdbc::SQLException);
     long getColumnType([in] long column) raises (::com::sun::star::sdbc::SQLException);
     string getColumnTypeName([in] long column) raises (::com::sun::star::sdbc::SQLException);
     boolean isReadOnly([in] long column) raises (::com::sun::star::sdbc::SQLException);
     boolean isWritable([in] long column) raises (::com::sun::star::sdbc::SQLException);
     boolean isDefinitelyWritable([in] long column) raises (::com::sun::star::sdbc::SQLException);
     string getColumnServiceName([in] long column) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XRowSetListener {
     interface ::com::sun::star::lang::XEventListener;
     void cursorMoved([in] ::com::sun::star::lang::EventObject event);
     /** @deprecated */ void rowChanged([in] ::com::sun::star::lang::EventObject event);
     void rowSetChanged([in] ::com::sun::star::lang::EventObject event);
    };
    published interface XSQLInput;
    published interface XSQLOutput;
    published interface XSQLData {
     interface ::com::sun::star::uno::XInterface;
     string getSQLTypeName() raises (::com::sun::star::sdbc::SQLException);
     void readSQL([in] ::com::sun::star::sdbc::XSQLInput stream, [in] string typeName) raises (::com::sun::star::sdbc::SQLException);
     void writeSQL([in] ::com::sun::star::sdbc::XSQLOutput stream) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XSQLInput {
     interface ::com::sun::star::uno::XInterface;
     string readString() raises (::com::sun::star::sdbc::SQLException);
     boolean readBoolean() raises (::com::sun::star::sdbc::SQLException);
     byte readByte() raises (::com::sun::star::sdbc::SQLException);
     short readShort() raises (::com::sun::star::sdbc::SQLException);
     long readInt() raises (::com::sun::star::sdbc::SQLException);
     hyper readLong() raises (::com::sun::star::sdbc::SQLException);
     float readFloat() raises (::com::sun::star::sdbc::SQLException);
     double readDouble() raises (::com::sun::star::sdbc::SQLException);
     sequence< byte > readBytes() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::Date readDate() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::Time readTime() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::util::DateTime readTimestamp() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::io::XInputStream readBinaryStream() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::io::XInputStream readCharacterStream() raises (::com::sun::star::sdbc::SQLException);
     any readObject() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XRef readRef() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XBlob readBlob() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XClob readClob() raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbc::XArray readArray() raises (::com::sun::star::sdbc::SQLException);
     boolean wasNull() raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XStruct;
    published interface XSQLOutput {
     interface ::com::sun::star::uno::XInterface;
     void writeString([in] string x) raises (::com::sun::star::sdbc::SQLException);
     void writeBoolean([in] boolean x) raises (::com::sun::star::sdbc::SQLException);
     void writeByte([in] byte x) raises (::com::sun::star::sdbc::SQLException);
     void writeShort([in] short x) raises (::com::sun::star::sdbc::SQLException);
     void writeInt([in] long x) raises (::com::sun::star::sdbc::SQLException);
     void writeLong([in] hyper x) raises (::com::sun::star::sdbc::SQLException);
     void writeFloat([in] float x) raises (::com::sun::star::sdbc::SQLException);
     void writeDouble([in] double x) raises (::com::sun::star::sdbc::SQLException);
     void writeBytes([in] sequence< byte > x) raises (::com::sun::star::sdbc::SQLException);
     void writeDate([in] ::com::sun::star::util::Date x) raises (::com::sun::star::sdbc::SQLException);
     void writeTime([in] ::com::sun::star::util::Time x) raises (::com::sun::star::sdbc::SQLException);
     void writeTimestamp([in] ::com::sun::star::util::DateTime x) raises (::com::sun::star::sdbc::SQLException);
     void writeBinaryStream([in] ::com::sun::star::io::XInputStream x) raises (::com::sun::star::sdbc::SQLException);
     void writeCharacterStream([in] ::com::sun::star::io::XInputStream x) raises (::com::sun::star::sdbc::SQLException);
     void writeObject([in] ::com::sun::star::sdbc::XSQLData x) raises (::com::sun::star::sdbc::SQLException);
     void writeRef([in] ::com::sun::star::sdbc::XRef x) raises (::com::sun::star::sdbc::SQLException);
     void writeBlob([in] ::com::sun::star::sdbc::XBlob x) raises (::com::sun::star::sdbc::SQLException);
     void writeClob([in] ::com::sun::star::sdbc::XClob x) raises (::com::sun::star::sdbc::SQLException);
     void writeStruct([in] ::com::sun::star::sdbc::XStruct x) raises (::com::sun::star::sdbc::SQLException);
     void writeArray([in] ::com::sun::star::sdbc::XArray x) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XStruct {
     interface ::com::sun::star::uno::XInterface;
     string getSQLTypeName() raises (::com::sun::star::sdbc::SQLException);
     sequence< any > getAttributes([in] ::com::sun::star::container::XNameAccess typeMap) raises (::com::sun::star::sdbc::SQLException);
    };
   };
   module sdbcx {
    published constants CheckOption {
     const long CASCADE = 2;
     const long LOCAL = 3;
     const long NONE = 0;
    };
    published service ColumnDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     [property] long Type;
     [property] string TypeName;
     [property] long Precision;
     [property] long Scale;
     [property] long IsNullable;
     [property] boolean IsAutoIncrement;
     [property, optional] boolean IsRowVersion;
     [property, optional] string Description;
     [property, optional] string DefaultValue;
     [property, optional] string AutoIncrementCreation;
    };
    published constants CompareBookmark {
     const long EQUAL = 0;
     const long GREATER = 1;
     const long LESS = -1;
     const long NOT_COMPARABLE = 3;
     const long NOT_EQUAL = 2;
    };
    published interface XAppend {
     interface ::com::sun::star::uno::XInterface;
     void appendByDescriptor([in] ::com::sun::star::beans::XPropertySet descriptor) raises (::com::sun::star::sdbc::SQLException, ::com::sun::star::container::ElementExistException);
    };
    published interface XDrop {
     interface ::com::sun::star::uno::XInterface;
     void dropByName([in] string elementName) raises (::com::sun::star::sdbc::SQLException, ::com::sun::star::container::NoSuchElementException);
     void dropByIndex([in] long index) raises (::com::sun::star::sdbc::SQLException, ::com::sun::star::lang::IndexOutOfBoundsException);
    };
    published service Container {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     [optional] interface ::com::sun::star::util::XRefreshable;
     [optional] interface ::com::sun::star::sdbcx::XDataDescriptorFactory;
     [optional] interface ::com::sun::star::sdbcx::XAppend;
     [optional] interface ::com::sun::star::sdbcx::XDrop;
    };
    published interface XCreateCatalog {
     interface ::com::sun::star::uno::XInterface;
     void createCatalog([in] sequence< ::com::sun::star::beans::PropertyValue > info) raises (::com::sun::star::sdbc::SQLException, ::com::sun::star::container::ElementExistException);
    };
    published interface XDataDefinitionSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbcx::XTablesSupplier getDataDefinitionByConnection([in] ::com::sun::star::sdbc::XConnection connection) raises (::com::sun::star::sdbc::SQLException);
     ::com::sun::star::sdbcx::XTablesSupplier getDataDefinitionByURL([in] string url, [in] sequence< ::com::sun::star::beans::PropertyValue > info) raises (::com::sun::star::sdbc::SQLException);
    };
    published interface XDropCatalog {
     interface ::com::sun::star::uno::XInterface;
     void dropCatalog([in] string catalogName, [in] sequence< ::com::sun::star::beans::PropertyValue > info) raises (::com::sun::star::sdbc::SQLException, ::com::sun::star::container::NoSuchElementException);
    };
    published service Driver {
     service ::com::sun::star::sdbc::Driver;
     interface ::com::sun::star::sdbcx::XDataDefinitionSupplier;
     [optional] interface ::com::sun::star::sdbcx::XCreateCatalog;
     [optional] interface ::com::sun::star::sdbcx::XDropCatalog;
    };
    published interface XAuthorizable {
     interface ::com::sun::star::uno::XInterface;
     long getPrivileges([in] string objName, [in] long objType) raises (::com::sun::star::sdbc::SQLException);
     long getGrantablePrivileges([in] string objName, [in] long objType) raises (::com::sun::star::sdbc::SQLException);
     void grantPrivileges([in] string objName, [in] long objType, [in] long objPrivileges) raises (::com::sun::star::sdbc::SQLException);
     void revokePrivileges([in] string objName, [in] long objType, [in] long objPrivileges) raises (::com::sun::star::sdbc::SQLException);
    };
    published service Group {
     interface ::com::sun::star::sdbcx::XUsersSupplier;
     interface ::com::sun::star::sdbcx::XAuthorizable;
     interface ::com::sun::star::beans::XPropertySet;
     [property, readonly] string Name;
    };
    published service GroupDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     [property] string Name;
    };
    published service Index {
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sdbcx::XDataDescriptorFactory;
     [property, readonly] string Name;
     [property, readonly] string Catalog;
     [property, readonly] boolean IsUnique;
     [property, readonly] boolean IsPrimaryKeyIndex;
     [property, readonly] boolean IsClustered;
    };
    published service IndexColumn {
     service ::com::sun::star::sdbcx::Column;
     [property, readonly] boolean IsAscending;
    };
    published service IndexColumnDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     [property] boolean IsAscending;
    };
    published service IndexDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
     [property] string Catalog;
     [property] boolean IsUnique;
     [property] boolean IsClustered;
    };
    published service Key {
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sdbcx::XDataDescriptorFactory;
     [property, readonly] string Name;
     [property, readonly] long Type;
     [property, readonly] string ReferencedTable;
     [property, readonly] long UpdateRule;
     [property, readonly] long DeleteRule;
    };
    published service KeyColumn {
     service ::com::sun::star::sdbcx::Column;
     [property, readonly] string RelatedColumn;
    };
    published service KeyColumnDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     [property] string RelatedColumn;
    };
    published service KeyDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     interface ::com::sun::star::sdbcx::XColumnsSupplier;
     [property] long Type;
     [property] string ReferencedTable;
     [property] long UpdateRule;
     [property] long DeleteRule;
    };
    published constants KeyType {
     const long FOREIGN = 3;
     const long PRIMARY = 1;
     const long UNIQUE = 2;
    };
    published service PreparedStatement {
     service ::com::sun::star::sdbc::PreparedStatement;
     [property] boolean UseBookmarks;
    };
    published constants Privilege {
     const long ALTER = 64;
     const long CREATE = 32;
     const long DELETE = 8;
     const long DROP = 256;
     const long INSERT = 2;
     const long READ = 16;
     const long REFERENCE = 128;
     const long SELECT = 1;
     const long UPDATE = 4;
    };
    published constants PrivilegeObject {
     const long COLUMN = 2;
     const long TABLE = 0;
     const long VIEW = 1;
    };
    published service ReferenceColumn {
     service ::com::sun::star::sdbcx::Column;
     [property, readonly] string ReferencedColumn;
    };
    published service Statement {
     service ::com::sun::star::sdbc::Statement;
     [property] boolean UseBookmarks;
    };
    published interface XUser {
     interface ::com::sun::star::sdbcx::XAuthorizable;
     void changePassword([in] string oldPassword, [in] string newPassword) raises (::com::sun::star::sdbc::SQLException);
    };
    published service User {
     interface ::com::sun::star::sdbcx::XUser;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sdbcx::XGroupsSupplier;
     [property, readonly] string Name;
    };
    published service UserDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     [property] string Password;
    };
    interface XAlterView {
     interface ::com::sun::star::uno::XInterface;
     void alterCommand([in] string NewCommand) raises (::com::sun::star::sdbc::SQLException);
    };
    published service View {
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sdbcx::XRename;
     [optional] interface ::com::sun::star::sdbcx::XAlterView;
     [property, readonly] string Name;
     [property, readonly] string CatalogName;
     [property, readonly] string SchemaName;
     [property, readonly] string Command;
     [property, readonly] long CheckOption;
    };
    published service ViewDescriptor {
     service ::com::sun::star::sdbcx::Descriptor;
     [property] string CatalogName;
     [property] string SchemaName;
     [property] string Command;
     [property] long CheckOption;
    };
   };
   module sheet {
    published interface XSpreadsheet;
    published struct ActivationEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::sheet::XSpreadsheet ActiveSheet;
    };
    published interface XAddIn {
     interface ::com::sun::star::lang::XLocalizable;
     string getProgrammaticFuntionName([in] string aDisplayName);
     string getDisplayFunctionName([in] string aProgrammaticName);
     string getFunctionDescription([in] string aProgrammaticName);
     string getDisplayArgumentName([in] string aProgrammaticFunctionName, [in] long nArgument);
     string getArgumentDescription([in] string aProgrammaticFunctionName, [in] long nArgument);
     string getProgrammaticCategoryName([in] string aProgrammaticFunctionName);
     string getDisplayCategoryName([in] string aProgrammaticFunctionName);
    };
    published struct LocalizedName {
     ::com::sun::star::lang::Locale Locale;
     string Name;
    };
    published interface XCompatibilityNames {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::sheet::LocalizedName > getCompatibilityNames([in] string aProgrammaticName);
    };
    published service AddIn {
     interface ::com::sun::star::lang::XServiceName;
     interface ::com::sun::star::sheet::XAddIn;
     [optional] interface ::com::sun::star::sheet::XCompatibilityNames;
    };
    published enum Border {
     TOP = 0,
     BOTTOM = 1,
     RIGHT = 2,
     LEFT = 3
    };
    published interface XSheetAnnotation {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::CellAddress getPosition();
     string getAuthor();
     string getDate();
     boolean getIsVisible();
     void setIsVisible([in] boolean bIsVisible);
    };
    published interface XSheetAnnotationShapeSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::drawing::XShape getAnnotationShape();
    };
    published service CellAnnotation {
     interface ::com::sun::star::sheet::XSheetAnnotation;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::text::XSimpleText;
     [optional] interface ::com::sun::star::sheet::XSheetAnnotationShapeSupplier;
    };
    published service CellAnnotationShape {
     service ::com::sun::star::drawing::CaptionShape;
    };
    published interface XSheetAnnotations {
     interface ::com::sun::star::container::XIndexAccess;
     void insertNew([in] ::com::sun::star::table::CellAddress aPosition, [in] string aText);
     void removeByIndex([in] long nIndex);
    };
    published service CellAnnotations {
     interface ::com::sun::star::sheet::XSheetAnnotations;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service CellAnnotationsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
   };
   module table {
    published struct CellRangeAddress {
     short Sheet;
     long StartColumn;
     long StartRow;
     long EndColumn;
     long EndRow;
    };
   };
   module sheet {
    published interface XAreaLink {
     interface ::com::sun::star::uno::XInterface;
     string getSourceArea();
     void setSourceArea([in] string aSourceArea);
     ::com::sun::star::table::CellRangeAddress getDestArea();
     void setDestArea([in] ::com::sun::star::table::CellRangeAddress aDestArea);
    };
    published service CellAreaLink {
     interface ::com::sun::star::sheet::XAreaLink;
     interface ::com::sun::star::util::XRefreshable;
     interface ::com::sun::star::beans::XPropertySet;
     [property] string Url;
     [property] string Filter;
     [property] string FilterOptions;
     /** @deprecated */ [property] long RefreshDelay;
     [property, optional] long RefreshPeriod;
    };
    published interface XAreaLinks {
     interface ::com::sun::star::container::XIndexAccess;
     void insertAtPosition([in] ::com::sun::star::table::CellAddress aDestPos, [in] string aFileName, [in] string aSourceArea, [in] string aFilter, [in] string aFilterOptions);
     void removeByIndex([in] long nIndex);
    };
    published service CellAreaLinks {
     interface ::com::sun::star::sheet::XAreaLinks;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service CellAreaLinksEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published enum CellDeleteMode {
     NONE = 0,
     UP = 1,
     LEFT = 2,
     ROWS = 3,
     COLUMNS = 4
    };
    published constants CellFlags {
     const long ANNOTATION = 8;
     const long DATETIME = 2;
     const long EDITATTR = 256;
     const long FORMATTED = 512;
     const long FORMULA = 16;
     const long HARDATTR = 32;
     const long OBJECTS = 128;
     const long STRING = 4;
     const long STYLES = 64;
     const long VALUE = 1;
    };
    published service CellFormatRanges {
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service CellFormatRangesEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published enum CellInsertMode {
     NONE = 0,
     DOWN = 1,
     RIGHT = 2,
     ROWS = 3,
     COLUMNS = 4
    };
    published service Cells {
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service CellsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published enum ConditionOperator {
     NONE = 0,
     EQUAL = 1,
     NOT_EQUAL = 2,
     GREATER = 3,
     GREATER_EQUAL = 4,
     LESS = 5,
     LESS_EQUAL = 6,
     BETWEEN = 7,
     NOT_BETWEEN = 8,
     FORMULA = 9
    };
    published enum GeneralFunction {
     NONE = 0,
     AUTO = 1,
     SUM = 2,
     COUNT = 3,
     AVERAGE = 4,
     MAX = 5,
     MIN = 6,
     PRODUCT = 7,
     COUNTNUMS = 8,
     STDEV = 9,
     STDEVP = 10,
     VAR = 11,
     VARP = 12
    };
    /** @deprecated */ published interface XConsolidationDescriptor {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::GeneralFunction getFunction();
     void setFunction([in] ::com::sun::star::sheet::GeneralFunction nFunction);
     sequence< ::com::sun::star::table::CellRangeAddress > getSources();
     void setSources([in] sequence< ::com::sun::star::table::CellRangeAddress > aSources);
     ::com::sun::star::table::CellAddress getStartOutputPosition();
     void setStartOutputPosition([in] ::com::sun::star::table::CellAddress aStartOutputPosition);
     boolean getUseColumnHeaders();
     void setUseColumnHeaders([in] boolean bUseColumnHeaders);
     boolean getUseRowHeaders();
     void setUseRowHeaders([in] boolean bUseRowHeaders);
     boolean getInsertLinks();
     void setInsertLinks([in] boolean bInsertLinks);
    };
    published service ConsolidationDescriptor {
     interface ::com::sun::star::sheet::XConsolidationDescriptor;
    };
    /** @deprecated */ published interface XDDELink {
     interface ::com::sun::star::uno::XInterface;
     string getApplication();
     string getTopic();
     string getItem();
    };
    published interface XDDELinkResults {
     interface ::com::sun::star::uno::XInterface;
     sequence< sequence< any > > getResults();
     void setResults([in] sequence< sequence< any > > aResults);
    };
    published service DDELink {
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::sheet::XDDELink;
     interface ::com::sun::star::util::XRefreshable;
     [optional] interface ::com::sun::star::sheet::XDDELinkResults;
    };
    published enum DDELinkMode {
     DEFAULT = 0,
     ENGLISH = 1,
     TEXT = 2
    };
    published interface XDDELinks {
     interface ::com::sun::star::container::XNameAccess;
     ::com::sun::star::sheet::XDDELink addDDELink([in] string aApplication, [in] string aTopic, [in] string aItem, [in] ::com::sun::star::sheet::DDELinkMode nMode);
    };
    published service DDELinks {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     [optional] interface ::com::sun::star::sheet::XDDELinks;
    };
    published service DDELinksEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published enum DataImportMode {
     NONE = 0,
     SQL = 1,
     TABLE = 2,
     QUERY = 3
    };
    published interface XDataPilotField;
    published interface XDataPilotDataLayoutFieldSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XDataPilotField getDataLayoutField();
    };
    published interface XSheetFilterDescriptor;
    published interface XDataPilotDescriptor {
     interface ::com::sun::star::container::XNamed;
     string getTag();
     void setTag([in] string aTag);
     ::com::sun::star::table::CellRangeAddress getSourceRange();
     void setSourceRange([in] ::com::sun::star::table::CellRangeAddress aSourceRange);
     ::com::sun::star::sheet::XSheetFilterDescriptor getFilterDescriptor();
     ::com::sun::star::container::XIndexAccess getDataPilotFields();
     ::com::sun::star::container::XIndexAccess getColumnFields();
     ::com::sun::star::container::XIndexAccess getRowFields();
     ::com::sun::star::container::XIndexAccess getPageFields();
     ::com::sun::star::container::XIndexAccess getDataFields();
     ::com::sun::star::container::XIndexAccess getHiddenFields();
    };
    published service DataPilotDescriptor {
     interface ::com::sun::star::sheet::XDataPilotDescriptor;
     [optional] interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sheet::XDataPilotDataLayoutFieldSupplier;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > ImportDescriptor;
     [property, optional] string SourceServiceName;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > ServiceArguments;
     [property, optional] boolean IgnoreEmptyRows;
     [property, optional] boolean RepeatIfEmpty;
     [property, optional] boolean ColumnGrand;
     [property, optional] boolean RowGrand;
     [property, optional] boolean ShowFilterButton;
     [property, optional] boolean DrillDownOnDoubleClick;
     [property, optional] string GrandTotalName;
    };
    published struct DataPilotFieldAutoShowInfo {
     boolean IsEnabled;
     long ShowItemsMode;
     long ItemCount;
     string DataField;
    };
    published interface XDataPilotField;
    published struct DataPilotFieldGroupInfo {
     boolean HasAutoStart;
     boolean HasAutoEnd;
     boolean HasDateValues;
     double Start;
     double End;
     double Step;
     long GroupBy;
     ::com::sun::star::sheet::XDataPilotField SourceField;
     ::com::sun::star::container::XNameAccess Groups;
    };
    published struct DataPilotFieldLayoutInfo {
     long LayoutMode;
     boolean AddEmptyLines;
    };
    published enum DataPilotFieldOrientation {
     HIDDEN = 0,
     COLUMN = 1,
     ROW = 2,
     PAGE = 3,
     DATA = 4
    };
    published struct DataPilotFieldReference {
     long ReferenceType;
     string ReferenceField;
     long ReferenceItemType;
     string ReferenceItemName;
    };
    published struct DataPilotFieldSortInfo {
     string Field;
     boolean IsAscending;
     long Mode;
    };
    published interface XDataPilotField {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getItems();
    };
    published interface XDataPilotFieldGrouping {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XDataPilotField createNameGroup([in] sequence< string > aItems) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::sheet::XDataPilotField createDateGroup([in] ::com::sun::star::sheet::DataPilotFieldGroupInfo aInfo) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service DataPilotField {
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sheet::XDataPilotField;
     [optional] interface ::com::sun::star::sheet::XDataPilotFieldGrouping;
     [property] ::com::sun::star::sheet::DataPilotFieldOrientation Orientation;
     [property] ::com::sun::star::sheet::GeneralFunction Function;
     [property, optional] sequence< ::com::sun::star::sheet::GeneralFunction > Subtotals;
     [property, optional] string SelectedPage;
     [property, optional] boolean UseSelectedPage;
     [property, optional] string UsedHierarchy;
     [property, optional] boolean HasSortInfo;
     [property, optional] ::com::sun::star::sheet::DataPilotFieldSortInfo SortInfo;
     [property, optional] boolean HasLayoutInfo;
     [property, optional] ::com::sun::star::sheet::DataPilotFieldLayoutInfo LayoutInfo;
     [property, optional] boolean HasAutoShowInfo;
     [property, optional] ::com::sun::star::sheet::DataPilotFieldAutoShowInfo AutoShowInfo;
     [property, optional] boolean HasReference;
     [property, optional] ::com::sun::star::sheet::DataPilotFieldReference Reference;
     [property, optional] boolean IsGroupField;
     [property, optional] ::com::sun::star::sheet::DataPilotFieldGroupInfo GroupInfo;
     [property, optional] boolean ShowEmpty;
    };
    published service DataPilotFieldGroup {
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XNameAccess;
     [optional] interface ::com::sun::star::container::XNameContainer;
    };
    published constants DataPilotFieldGroupBy {
     const long DAYS = 8;
     const long HOURS = 4;
     const long MINUTES = 2;
     const long MONTHS = 16;
     const long QUARTERS = 32;
     const long SECONDS = 1;
     const long YEARS = 64;
    };
    published service DataPilotFieldGroupItem {
     interface ::com::sun::star::container::XNamed;
    };
    published service DataPilotFieldGroups {
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XNameAccess;
     [optional] interface ::com::sun::star::container::XNameContainer;
    };
    published service DataPilotFields {
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XNameAccess;
    };
    published service DataPilotFieldsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published enum FilterConnection {
     AND = 0,
     OR = 1
    };
    published enum FilterOperator {
     EMPTY = 0,
     NOT_EMPTY = 1,
     EQUAL = 2,
     NOT_EQUAL = 3,
     GREATER = 4,
     GREATER_EQUAL = 5,
     LESS = 6,
     LESS_EQUAL = 7,
     TOP_VALUES = 8,
     TOP_PERCENT = 9,
     BOTTOM_VALUES = 10,
     BOTTOM_PERCENT = 11
    };
    published struct TableFilterField {
     ::com::sun::star::sheet::FilterConnection Connection;
     long Field;
     ::com::sun::star::sheet::FilterOperator Operator;
     boolean IsNumeric;
     double NumericValue;
     string StringValue;
    };
    published interface XDataPilotTable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::CellRangeAddress getOutputRange();
     void refresh();
    };
    published service DataPilotTable {
     interface ::com::sun::star::sheet::XDataPilotDescriptor;
     interface ::com::sun::star::sheet::XDataPilotTable;
     [optional] interface ::com::sun::star::util::XModifyBroadcaster;
    };
    published interface XDataPilotTables {
     interface ::com::sun::star::container::XNameAccess;
     ::com::sun::star::sheet::XDataPilotDescriptor createDataPilotDescriptor();
     void insertNewByName([in] string aName, [in] ::com::sun::star::table::CellAddress OutputAddress, [in] ::com::sun::star::sheet::XDataPilotDescriptor xDescriptor);
     void removeByName([in] string aName);
    };
    published service DataPilotTables {
     interface ::com::sun::star::sheet::XDataPilotTables;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XIndexAccess;
    };
    published service DataPilotTablesEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published service DatabaseImportDescriptor {
     [property] ::com::sun::star::sheet::DataImportMode SourceType;
     [property] string DatabaseName;
     [property] string SourceObject;
     [property, optional] boolean IsNative;
     [property, optional] string ConnectionResource;
    };
   };
   module table {
    published interface XCellRange;
   };
   module sheet {
    published interface XCellRangeReferrer {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::XCellRange getReferredCells();
    };
    published interface XSheetFilterDescriptor;
    published interface XSubTotalDescriptor;
    published interface XDatabaseRange {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::CellRangeAddress getDataArea();
     void setDataArea([in] ::com::sun::star::table::CellRangeAddress aDataArea);
     sequence< ::com::sun::star::beans::PropertyValue > getSortDescriptor();
     ::com::sun::star::sheet::XSheetFilterDescriptor getFilterDescriptor();
     ::com::sun::star::sheet::XSubTotalDescriptor getSubTotalDescriptor();
     sequence< ::com::sun::star::beans::PropertyValue > getImportDescriptor();
     void refresh();
    };
    published service DatabaseRange {
     interface ::com::sun::star::sheet::XDatabaseRange;
     interface ::com::sun::star::sheet::XCellRangeReferrer;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::container::XNamed;
     [optional] interface ::com::sun::star::util::XRefreshable;
     [property] boolean MoveCells;
     [property] boolean KeepFormats;
     [property] boolean StripData;
     [property, optional] boolean AutoFilter;
     [property, optional] boolean UseFilterCriteriaSource;
     [property, optional] ::com::sun::star::table::CellRangeAddress FilterCriteriaSource;
     [property, optional] long RefreshPeriod;
     [property, optional] boolean FromSelection;
     [property, optional, readonly] long TokenIndex;
    };
    published interface XDatabaseRanges {
     interface ::com::sun::star::container::XNameAccess;
     void addNewByName([in] string aName, [in] ::com::sun::star::table::CellRangeAddress aRange);
     void removeByName([in] string aName);
    };
    published service DatabaseRanges {
     interface ::com::sun::star::sheet::XDatabaseRanges;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XIndexAccess;
    };
    published service DatabaseRangesEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published constants DimensionFlags {
     const long NO_COLUMN_ORIENTATION = 1;
     const long NO_DATA_ORIENTATION = 8;
     const long NO_PAGE_ORIENTATION = 4;
     const long NO_ROW_ORIENTATION = 2;
    };
    published service DocumentSettings {
     service ::com::sun::star::document::Settings;
     interface ::com::sun::star::beans::XPropertySet;
     [property, optional] boolean ShowZeroValues;
     [property, optional] boolean ShowNotes;
     [property, optional] boolean ShowGrid;
     [property, optional] ::com::sun::star::util::Color GridColor;
     [property, optional] boolean ShowPageBreaks;
     [property, optional] boolean HasColumnRowHeaders;
     [property, optional] boolean HasSheetTabs;
     [property, optional] boolean IsOutlineSymbolsSet;
     [property, optional] boolean IsSnapToRaster;
     [property, optional] boolean RasterIsVisible;
     [property, optional] long RasterResolutionX;
     [property, optional] long RasterResolutionY;
     [property, optional] long RasterSubdivisionX;
     [property, optional] long RasterSubdivisionY;
     [property, optional] boolean IsRasterAxisSynchronized;
    };
    published enum FillDateMode {
     FILL_DATE_DAY = 0,
     FILL_DATE_WEEKDAY = 1,
     FILL_DATE_MONTH = 2,
     FILL_DATE_YEAR = 3
    };
    published enum FillDirection {
     TO_BOTTOM = 0,
     TO_RIGHT = 1,
     TO_TOP = 2,
     TO_LEFT = 3
    };
    published enum FillMode {
     SIMPLE = 0,
     LINEAR = 1,
     GROWTH = 2,
     DATE = 3,
     AUTO = 4
    };
    published constants FilterOperator2 {
     const long BEGINS_WITH = 14;
     const long BOTTOM_PERCENT = 11;
     const long BOTTOM_VALUES = 10;
     const long CONTAINS = 12;
     const long DOES_NOT_BEGIN_WITH = 15;
     const long DOES_NOT_CONTAIN = 13;
     const long DOES_NOT_END_WITH = 17;
     const long EMPTY = 0;
     const long ENDS_WITH = 16;
     const long EQUAL = 2;
     const long GREATER = 4;
     const long GREATER_EQUAL = 5;
     const long LESS = 6;
     const long LESS_EQUAL = 7;
     const long NOT_EMPTY = 1;
     const long NOT_EQUAL = 3;
     const long TOP_PERCENT = 9;
     const long TOP_VALUES = 8;
    };
    published constants FormulaResult {
     const long ERROR = 4;
     const long STRING = 2;
     const long VALUE = 1;
    };
    /** @deprecated */ published service SpreadsheetDocumentSettings {
     interface ::com::sun::star::beans::XPropertySet;
     [property] boolean IsIterationEnabled;
     [property] long IterationCount;
     [property] double IterationEpsilon;
     [property] short StandardDecimals;
     [property] ::com::sun::star::util::Date NullDate;
     [property] short DefaultTabStop;
     [property] boolean IgnoreCase;
     [property] boolean CalcAsShown;
     [property] boolean MatchWholeCell;
     [property] boolean SpellOnline;
     [property] boolean LookUpLabels;
     [property] boolean RegularExpressions;
     [property, optional, readonly] ::com::sun::star::i18n::XForbiddenCharacters ForbiddenCharacters;
     [property, optional, readonly] boolean HasDrawPages;
     [property, optional] ::com::sun::star::lang::Locale CharLocale;
     [property, optional] ::com::sun::star::lang::Locale CharLocaleAsian;
     [property, optional] ::com::sun::star::lang::Locale CharLocaleComplex;
     [property, optional] boolean IsLoaded;
     [property, optional] boolean IsUndoEnabled;
     [property, optional] boolean IsAdjustHeightEnabled;
     [property, optional] boolean IsExecuteLinkEnabled;
     [property, optional, readonly] ::com::sun::star::awt::XDevice ReferenceDevice;
    };
    published interface XFunctionAccess {
     interface ::com::sun::star::uno::XInterface;
     any callFunction([in] string aName, [in] sequence< any > aArguments) raises (::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::IllegalArgumentException);
    };
    published service FunctionAccess {
     service ::com::sun::star::sheet::SpreadsheetDocumentSettings;
     interface ::com::sun::star::sheet::XFunctionAccess;
     [property, optional] boolean IsArrayFunction;
    };
    published constants FunctionCategory {
     const long ADDIN = 11;
     const long DATABASE = 1;
     const long DATETIME = 2;
     const long FINANCIAL = 3;
     const long INFORMATION = 4;
     const long LOGICAL = 5;
     const long MATHEMATICAL = 6;
     const long MATRIX = 7;
     const long SPREADSHEET = 9;
     const long STATISTICAL = 8;
     const long TEXT = 10;
    };
    published service FunctionDescription {
     [property, readonly] long Id;
     [property, readonly] long Category;
     [property, readonly] string Name;
     [property, readonly] string Description;
     [property, readonly] sequence< ::com::sun::star::sheet::FunctionArgument > Arguments;
    };
    published service FunctionDescriptionEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published interface XFunctionDescriptions {
     interface ::com::sun::star::container::XIndexAccess;
     sequence< ::com::sun::star::beans::PropertyValue > getById([in] long nId) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service FunctionDescriptions {
     interface ::com::sun::star::sheet::XFunctionDescriptions;
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published interface XGlobalSheetSettings {
     interface ::com::sun::star::uno::XInterface;
     [attribute] boolean MoveSelection;
     [attribute] short MoveDirection;
     [attribute] boolean EnterEdit;
     [attribute] boolean ExtendFormat;
     [attribute] boolean RangeFinder;
     [attribute] boolean ExpandReferences;
     [attribute] boolean MarkHeader;
     [attribute] boolean UseTabCol;
     [attribute] short Metric;
     [attribute] short Scale;
     [attribute] boolean DoAutoComplete;
     [attribute] short StatusBarFunction;
     [attribute] sequence< string > UserLists;
     [attribute] short LinkUpdateMode;
     [attribute] boolean PrintAllSheets;
     [attribute] boolean PrintEmptyPages;
     [attribute] boolean UsePrinterMetrics;
     [attribute] boolean ReplaceCellsWarning;
    };
    published service GlobalSheetSettings: ::com::sun::star::sheet::XGlobalSheetSettings;
    published struct GoalResult {
     double Divergence;
     double Result;
    };
    published interface XHeaderFooterContent {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::text::XText getLeftText();
     ::com::sun::star::text::XText getCenterText();
     ::com::sun::star::text::XText getRightText();
    };
    published service HeaderFooterContent {
     interface ::com::sun::star::sheet::XHeaderFooterContent;
    };
    published interface XLabelRange {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::CellRangeAddress getLabelArea();
     void setLabelArea([in] ::com::sun::star::table::CellRangeAddress aLabelArea);
     ::com::sun::star::table::CellRangeAddress getDataArea();
     void setDataArea([in] ::com::sun::star::table::CellRangeAddress aDataArea);
    };
    published service LabelRange {
     interface ::com::sun::star::sheet::XLabelRange;
    };
    published interface XLabelRanges {
     interface ::com::sun::star::container::XIndexAccess;
     void addNew([in] ::com::sun::star::table::CellRangeAddress aLabelArea, [in] ::com::sun::star::table::CellRangeAddress aDataArea);
     void removeByIndex([in] long nIndex);
    };
    published service LabelRanges {
     interface ::com::sun::star::sheet::XLabelRanges;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service LabelRangesEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published constants MoveDirection {
     const short DOWN = 0;
     const short LEFT = 3;
     const short RIGHT = 1;
     const short UP = 2;
    };
    published interface XNamedRange {
     interface ::com::sun::star::container::XNamed;
     string getContent();
     void setContent([in] string aContent);
     ::com::sun::star::table::CellAddress getReferencePosition();
     void setReferencePosition([in] ::com::sun::star::table::CellAddress aReferencePosition);
     long getType();
     void setType([in] long nType);
    };
    published service NamedRange {
     interface ::com::sun::star::sheet::XNamedRange;
     interface ::com::sun::star::sheet::XCellRangeReferrer;
     [property, optional, readonly] long TokenIndex;
     [property, optional] boolean IsSharedFormula;
    };
    published constants NamedRangeFlag {
     const long COLUMN_HEADER = 4;
     const long FILTER_CRITERIA = 1;
     const long PRINT_AREA = 2;
     const long ROW_HEADER = 8;
    };
    published interface XNamedRanges {
     interface ::com::sun::star::container::XNameAccess;
     void addNewByName([in] string aName, [in] string aContent, [in] ::com::sun::star::table::CellAddress aPosition, [in] long nType);
     void addNewFromTitles([in] ::com::sun::star::table::CellRangeAddress aSource, [in] ::com::sun::star::sheet::Border aBorder);
     void removeByName([in] string aName);
     void outputList([in] ::com::sun::star::table::CellAddress aOutputPosition);
    };
    published service NamedRanges {
     interface ::com::sun::star::sheet::XNamedRanges;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     [optional] interface ::com::sun::star::document::XActionLockable;
    };
    published service NamedRangesEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published enum PasteOperation {
     NONE = 0,
     ADD = 1,
     SUBTRACT = 2,
     MULTIPLY = 3,
     DIVIDE = 4
    };
    published service RangeSelectionArguments {
     [property] string InitialValue;
     [property] string Title;
     [property] boolean CloseOnMouseRelease;
     [property, optional] boolean SingleCellMode;
    };
    published struct RangeSelectionEvent: ::com::sun::star::lang::EventObject {
     string RangeDescriptor;
    };
    published interface XRecentFunctions {
     interface ::com::sun::star::uno::XInterface;
     sequence< long > getRecentFunctionIds();
     void setRecentFunctionIds([in] sequence< long > aRecentFunctionIds);
     long getMaxRecentFunctions();
    };
    published service RecentFunctions: ::com::sun::star::sheet::XRecentFunctions;
    published struct ResultEvent: ::com::sun::star::lang::EventObject {
     any Value;
    };
    published interface XScenario {
     interface ::com::sun::star::uno::XInterface;
     boolean getIsScenario();
     string getScenarioComment();
     void setScenarioComment([in] string aScenarioComment);
     void addRanges([in] sequence< ::com::sun::star::table::CellRangeAddress > aRanges);
     void apply();
    };
    published interface XScenarios {
     interface ::com::sun::star::container::XNameAccess;
     void addNewByName([in] string aName, [in] sequence< ::com::sun::star::table::CellRangeAddress > aRanges, [in] string aComment);
     void removeByName([in] string aName);
    };
    published service Scenarios {
     interface ::com::sun::star::sheet::XScenarios;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XIndexAccess;
    };
    published service ScenariosEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published interface XSheetCellRanges;
    published interface XCellRangesQuery {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XSheetCellRanges queryVisibleCells();
     ::com::sun::star::sheet::XSheetCellRanges queryEmptyCells();
     ::com::sun::star::sheet::XSheetCellRanges queryContentCells([in] short nContentFlags);
     ::com::sun::star::sheet::XSheetCellRanges queryFormulaCells([in] long nResultFlags);
     ::com::sun::star::sheet::XSheetCellRanges queryColumnDifferences([in] ::com::sun::star::table::CellAddress aCompare);
     ::com::sun::star::sheet::XSheetCellRanges queryRowDifferences([in] ::com::sun::star::table::CellAddress aCompare);
     ::com::sun::star::sheet::XSheetCellRanges queryIntersection([in] ::com::sun::star::table::CellRangeAddress aRange);
    };
    published interface XSheetCellRanges;
    published interface XFormulaQuery {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XSheetCellRanges queryDependents([in] boolean bRecursive);
     ::com::sun::star::sheet::XSheetCellRanges queryPrecedents([in] boolean bRecursive);
    };
    published service SheetRangesQuery {
     interface ::com::sun::star::sheet::XCellRangesQuery;
     interface ::com::sun::star::sheet::XFormulaQuery;
    };
    published interface XCellAddressable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::CellAddress getCellAddress();
    };
    published interface XSheetAnnotationAnchor {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XSheetAnnotation getAnnotation();
    };
   };
   module table {
    published enum CellHoriJustify {
     STANDARD = 0,
     LEFT = 1,
     CENTER = 2,
     RIGHT = 3,
     BLOCK = 4,
     REPEAT = 5
    };
    published enum CellOrientation {
     STANDARD = 0,
     TOPBOTTOM = 1,
     BOTTOMTOP = 2,
     STACKED = 3
    };
    published struct TableBorder {
     ::com::sun::star::table::BorderLine TopLine;
     boolean IsTopLineValid;
     ::com::sun::star::table::BorderLine BottomLine;
     boolean IsBottomLineValid;
     ::com::sun::star::table::BorderLine LeftLine;
     boolean IsLeftLineValid;
     ::com::sun::star::table::BorderLine RightLine;
     boolean IsRightLineValid;
     ::com::sun::star::table::BorderLine HorizontalLine;
     boolean IsHorizontalLineValid;
     ::com::sun::star::table::BorderLine VerticalLine;
     boolean IsVerticalLineValid;
     short Distance;
     boolean IsDistanceValid;
    };
    published struct TableBorder2 {
     ::com::sun::star::table::BorderLine2 TopLine;
     boolean IsTopLineValid;
     ::com::sun::star::table::BorderLine2 BottomLine;
     boolean IsBottomLineValid;
     ::com::sun::star::table::BorderLine2 LeftLine;
     boolean IsLeftLineValid;
     ::com::sun::star::table::BorderLine2 RightLine;
     boolean IsRightLineValid;
     ::com::sun::star::table::BorderLine2 HorizontalLine;
     boolean IsHorizontalLineValid;
     ::com::sun::star::table::BorderLine2 VerticalLine;
     boolean IsVerticalLineValid;
     short Distance;
     boolean IsDistanceValid;
    };
   };
   module util {
    published struct CellProtection {
     boolean IsLocked;
     boolean IsFormulaHidden;
     boolean IsHidden;
     boolean IsPrintHidden;
    };
   };
   module table {
    published service CellProperties {
     interface ::com::sun::star::beans::XPropertySet;
     [property, optional] string CellStyle;
     [property] ::com::sun::star::util::Color CellBackColor;
     [property] boolean IsCellBackgroundTransparent;
     [property] ::com::sun::star::table::CellHoriJustify HoriJustify;
     [property] long VertJustify;
     [property] boolean IsTextWrapped;
     [property] short ParaIndent;
     [property] ::com::sun::star::table::CellOrientation Orientation;
     [property] long RotateAngle;
     [property] long RotateReference;
     [property, optional] boolean AsianVerticalMode;
     [property] ::com::sun::star::table::TableBorder TableBorder;
     [property] ::com::sun::star::table::BorderLine TopBorder;
     [property] ::com::sun::star::table::BorderLine BottomBorder;
     [property] ::com::sun::star::table::BorderLine LeftBorder;
     [property] ::com::sun::star::table::BorderLine RightBorder;
     [property] long NumberFormat;
     [property] ::com::sun::star::table::ShadowFormat ShadowFormat;
     [property] ::com::sun::star::util::CellProtection CellProtection;
     [property, optional] ::com::sun::star::container::XNameContainer UserDefinedAttributes;
     [property, optional] ::com::sun::star::table::BorderLine DiagonalTLBR;
     [property, optional] ::com::sun::star::table::BorderLine DiagonalBLTR;
     [property, optional] boolean ShrinkToFit;
     [property, optional] ::com::sun::star::table::TableBorder2 TableBorder2;
     [property, optional] ::com::sun::star::table::BorderLine2 TopBorder2;
     [property, optional] ::com::sun::star::table::BorderLine2 BottomBorder2;
     [property, optional] ::com::sun::star::table::BorderLine2 LeftBorder2;
     [property, optional] ::com::sun::star::table::BorderLine2 RightBorder2;
     [property, optional] ::com::sun::star::table::BorderLine2 DiagonalTLBR2;
     [property, optional] ::com::sun::star::table::BorderLine2 DiagonalBLTR2;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > CellInteropGrabBag;
    };
    published enum CellContentType {
     EMPTY = 0,
     VALUE = 1,
     TEXT = 2,
     FORMULA = 3
    };
    published interface XCell {
     interface ::com::sun::star::uno::XInterface;
     string getFormula();
     void setFormula([in] string aFormula);
     double getValue();
     void setValue([in] double nValue);
     ::com::sun::star::table::CellContentType getType();
     long getError();
    };
    published service Cell {
     service ::com::sun::star::table::CellProperties;
     interface ::com::sun::star::table::XCell;
     interface ::com::sun::star::text::XText;
    };
    published interface XTableColumns;
    published interface XTableRows;
    published interface XColumnRowRange {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::XTableColumns getColumns();
     ::com::sun::star::table::XTableRows getRows();
    };
   };
   module text {
    /** @deprecated */ published interface XRelativeTextContentInsert {
     interface ::com::sun::star::uno::XInterface;
     void insertTextContentBefore([in] ::com::sun::star::text::XTextContent xNewContent, [in] ::com::sun::star::text::XTextContent xSuccessor) raises (::com::sun::star::lang::IllegalArgumentException);
     void insertTextContentAfter([in] ::com::sun::star::text::XTextContent xNewContent, [in] ::com::sun::star::text::XTextContent xPredecessor) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XTextRangeCompare {
     interface ::com::sun::star::uno::XInterface;
     short compareRegionStarts([in] ::com::sun::star::text::XTextRange xR1, [in] ::com::sun::star::text::XTextRange xR2) raises (::com::sun::star::lang::IllegalArgumentException);
     short compareRegionEnds([in] ::com::sun::star::text::XTextRange xR1, [in] ::com::sun::star::text::XTextRange xR2) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XTextRangeMover {
     interface ::com::sun::star::uno::XInterface;
     void moveTextRange([in] ::com::sun::star::text::XTextRange xRange, [in] short nParagraphs);
    };
    published service Text {
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::text::XText;
     [optional] interface ::com::sun::star::text::XTextRangeCompare;
     [optional] interface ::com::sun::star::text::XTextRangeMover;
     /** @deprecated */ [optional] interface ::com::sun::star::text::XRelativeTextContentInsert;
     [property, optional] ::com::sun::star::beans::PropertyValues StartRedline;
     [property, maybevoid, optional] ::com::sun::star::beans::PropertyValues EndRedline;
    };
    published interface XTextFieldsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XEnumerationAccess getTextFields();
     ::com::sun::star::container::XNameAccess getTextFieldMasters();
    };
   };
   module util {
    published interface XIndent {
     interface ::com::sun::star::uno::XInterface;
     void decrementIndent();
     void incrementIndent();
    };
    published interface XSearchDescriptor;
    published interface XSearchable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::util::XSearchDescriptor createSearchDescriptor();
     ::com::sun::star::container::XIndexAccess findAll([in] ::com::sun::star::util::XSearchDescriptor xDesc);
     ::com::sun::star::uno::XInterface findFirst([in] ::com::sun::star::util::XSearchDescriptor xDesc);
     ::com::sun::star::uno::XInterface findNext([in] ::com::sun::star::uno::XInterface xStartAt, [in] ::com::sun::star::util::XSearchDescriptor xDesc);
    };
    published interface XReplaceDescriptor;
    published interface XSearchDescriptor;
    published interface XReplaceable {
     interface ::com::sun::star::util::XSearchable;
     ::com::sun::star::util::XReplaceDescriptor createReplaceDescriptor();
     long replaceAll([in] ::com::sun::star::util::XSearchDescriptor xDesc);
    };
   };
   module sheet {
    published interface XSheetConditionalEntries;
    published service SheetCell {
     service ::com::sun::star::table::Cell;
     service ::com::sun::star::text::Text;
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::CharacterPropertiesAsian;
     service ::com::sun::star::style::CharacterPropertiesComplex;
     service ::com::sun::star::style::ParagraphProperties;
     service ::com::sun::star::sheet::SheetRangesQuery;
     [optional] service ::com::sun::star::style::ParagraphPropertiesAsian;
     [optional] service ::com::sun::star::style::ParagraphPropertiesComplex;
     interface ::com::sun::star::document::XActionLockable;
     interface ::com::sun::star::util::XReplaceable;
     interface ::com::sun::star::util::XIndent;
     interface ::com::sun::star::table::XColumnRowRange;
     interface ::com::sun::star::sheet::XCellAddressable;
     interface ::com::sun::star::sheet::XSheetAnnotationAnchor;
     interface ::com::sun::star::text::XTextFieldsSupplier;
     [optional] interface ::com::sun::star::beans::XTolerantMultiPropertySet;
     [optional] interface ::com::sun::star::util::XModifyBroadcaster;
     [property, readonly] ::com::sun::star::awt::Point Position;
     [property, readonly] ::com::sun::star::awt::Size Size;
     [property, optional] string FormulaLocal;
     [property, readonly] long FormulaResultType;
     [property] ::com::sun::star::sheet::XSheetConditionalEntries ConditionalFormat;
     [property, optional] ::com::sun::star::sheet::XSheetConditionalEntries ConditionalFormatLocal;
     [property] ::com::sun::star::beans::XPropertySet Validation;
     [property, optional] ::com::sun::star::beans::XPropertySet ValidationLocal;
     [property, optional, readonly] string AbsoluteName;
    };
    published interface XArrayFormulaRange {
     interface ::com::sun::star::uno::XInterface;
     string getArrayFormula();
     void setArrayFormula([in] string aFormula);
    };
    published interface XCellFormatRangesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getCellFormatRanges();
    };
    published interface XCellRangeAddressable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::CellRangeAddress getRangeAddress();
    };
    published interface XCellRangeData {
     interface ::com::sun::star::uno::XInterface;
     sequence< sequence< any > > getDataArray();
     void setDataArray([in] sequence< sequence< any > > aArray);
    };
    published interface XCellRangeFormula {
     interface ::com::sun::star::uno::XInterface;
     sequence< sequence< string > > getFormulaArray();
     void setFormulaArray([in] sequence< sequence< string > > aArray);
    };
    published interface XCellSeries {
     interface ::com::sun::star::uno::XInterface;
     void fillSeries([in] ::com::sun::star::sheet::FillDirection nFillDirection, [in] ::com::sun::star::sheet::FillMode nFillMode, [in] ::com::sun::star::sheet::FillDateMode nFillDateMode, [in] double fStep, [in] double fEndValue);
     void fillAuto([in] ::com::sun::star::sheet::FillDirection nFillDirection, [in] long nSourceCount);
    };
    published enum TableOperationMode {
     COLUMN = 0,
     ROW = 1,
     BOTH = 2
    };
    published interface XMultipleOperation {
     interface ::com::sun::star::uno::XInterface;
     void setTableOperation([in] ::com::sun::star::table::CellRangeAddress aFormulaRange, [in] ::com::sun::star::sheet::TableOperationMode nMode, [in] ::com::sun::star::table::CellAddress aColumnCell, [in] ::com::sun::star::table::CellAddress aRowCell);
    };
   };
   module table {
    published interface XCellRange {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::XCell getCellByPosition([in] long nColumn, [in] long nRow) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     ::com::sun::star::table::XCellRange getCellRangeByPosition([in] long nLeft, [in] long nTop, [in] long nRight, [in] long nBottom) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     ::com::sun::star::table::XCellRange getCellRangeByName([in] string aRange);
    };
   };
   module sheet {
    published interface XSpreadsheet;
    published interface XSheetCellRange {
     interface ::com::sun::star::table::XCellRange;
     ::com::sun::star::sheet::XSpreadsheet getSpreadsheet();
    };
    published interface XSheetFilterDescriptor;
    published interface XSheetFilterable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XSheetFilterDescriptor createFilterDescriptor([in] boolean bEmpty);
     void filter([in] ::com::sun::star::sheet::XSheetFilterDescriptor xDescriptor);
    };
    published interface XSheetFilterDescriptor;
    published interface XSheetFilterableEx {
     interface ::com::sun::star::sheet::XSheetFilterable;
     ::com::sun::star::sheet::XSheetFilterDescriptor createFilterDescriptorByObject([in] ::com::sun::star::sheet::XSheetFilterable xObject);
    };
    published interface XSheetOperation {
     interface ::com::sun::star::uno::XInterface;
     double computeFunction([in] ::com::sun::star::sheet::GeneralFunction nFunction) raises (::com::sun::star::uno::Exception);
     void clearContents([in] long nContentFlags);
    };
    published interface XSubTotalDescriptor;
    published interface XSubTotalCalculatable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XSubTotalDescriptor createSubTotalDescriptor([in] boolean bEmpty);
     void applySubTotals([in] ::com::sun::star::sheet::XSubTotalDescriptor xDescriptor, [in] boolean bReplace);
     void removeSubTotals();
    };
    published interface XUniqueCellFormatRangesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getUniqueCellFormatRanges();
    };
   };
   module table {
    published service CellRange {
     service ::com::sun::star::table::CellProperties;
     interface ::com::sun::star::table::XCellRange;
    };
    published interface XAutoFormattable {
     interface ::com::sun::star::uno::XInterface;
     void autoFormat([in] string aName) raises (::com::sun::star::lang::IllegalArgumentException);
    };
   };
   module util {
    published interface XImportable {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::beans::PropertyValue > createImportDescriptor([in] boolean bEmpty);
     void doImport([in] sequence< ::com::sun::star::beans::PropertyValue > aDescriptor);
    };
    published interface XMergeable {
     interface ::com::sun::star::uno::XInterface;
     void merge([in] boolean bMerge);
     boolean getIsMerged();
    };
    published interface XSortable {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::beans::PropertyValue > createSortDescriptor();
     void sort([in] sequence< ::com::sun::star::beans::PropertyValue > xDescriptor);
    };
   };
   module sheet {
    published interface XSheetConditionalEntries;
    published service SheetCellRange {
     service ::com::sun::star::table::CellRange;
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::CharacterPropertiesAsian;
     service ::com::sun::star::style::CharacterPropertiesComplex;
     service ::com::sun::star::style::ParagraphProperties;
     service ::com::sun::star::sheet::SheetRangesQuery;
     interface ::com::sun::star::util::XReplaceable;
     interface ::com::sun::star::util::XMergeable;
     interface ::com::sun::star::util::XIndent;
     interface ::com::sun::star::table::XColumnRowRange;
     interface ::com::sun::star::table::XAutoFormattable;
     interface ::com::sun::star::sheet::XSheetCellRange;
     interface ::com::sun::star::sheet::XCellRangeData;
     interface ::com::sun::star::sheet::XCellRangeAddressable;
     interface ::com::sun::star::sheet::XSheetOperation;
     interface ::com::sun::star::sheet::XCellSeries;
     interface ::com::sun::star::sheet::XArrayFormulaRange;
     interface ::com::sun::star::sheet::XMultipleOperation;
     interface ::com::sun::star::util::XSortable;
     interface ::com::sun::star::util::XImportable;
     interface ::com::sun::star::sheet::XSubTotalCalculatable;
     interface ::com::sun::star::sheet::XSheetFilterableEx;
     interface ::com::sun::star::sheet::XCellFormatRangesSupplier;
     interface ::com::sun::star::sheet::XUniqueCellFormatRangesSupplier;
     interface ::com::sun::star::chart::XChartDataArray;
     [optional] interface ::com::sun::star::sheet::XCellRangeFormula;
     [optional] interface ::com::sun::star::beans::XTolerantMultiPropertySet;
     [optional] interface ::com::sun::star::util::XModifyBroadcaster;
     [property, readonly] ::com::sun::star::awt::Point Position;
     [property, readonly] ::com::sun::star::awt::Size Size;
     [property] ::com::sun::star::sheet::XSheetConditionalEntries ConditionalFormat;
     [property, optional] ::com::sun::star::sheet::XSheetConditionalEntries ConditionalFormatLocal;
     [property] ::com::sun::star::beans::XPropertySet Validation;
     [property, optional] ::com::sun::star::beans::XPropertySet ValidationLocal;
     [property, optional, readonly] string AbsoluteName;
    };
    published interface XSheetCellCursor {
     interface ::com::sun::star::sheet::XSheetCellRange;
     void collapseToCurrentRegion();
     void collapseToCurrentArray();
     void collapseToMergedArea();
     void expandToEntireColumns();
     void expandToEntireRows();
     void collapseToSize([in] long nColumns, [in] long nRows);
    };
    published interface XUsedAreaCursor {
     interface ::com::sun::star::uno::XInterface;
     void gotoStartOfUsedArea([in] boolean bExpand);
     void gotoEndOfUsedArea([in] boolean bExpand);
    };
   };
   module table {
    published interface XCellCursor {
     interface ::com::sun::star::table::XCellRange;
     void gotoStart();
     void gotoEnd();
     void gotoNext();
     void gotoPrevious();
     void gotoOffset([in] long nColumnOffset, [in] long nRowOffset);
    };
    published service CellCursor {
     interface ::com::sun::star::table::XCellCursor;
    };
   };
   module sheet {
    published service SheetCellCursor {
     service ::com::sun::star::table::CellCursor;
     service ::com::sun::star::sheet::SheetCellRange;
     interface ::com::sun::star::sheet::XSheetCellCursor;
     interface ::com::sun::star::sheet::XUsedAreaCursor;
    };
    published interface XSheetCellRanges {
     interface ::com::sun::star::container::XIndexAccess;
     ::com::sun::star::container::XEnumerationAccess getCells();
     string getRangeAddressesAsString();
     sequence< ::com::sun::star::table::CellRangeAddress > getRangeAddresses();
    };
    published interface XSheetCellRangeContainer {
     interface ::com::sun::star::sheet::XSheetCellRanges;
     void addRangeAddress([in] ::com::sun::star::table::CellRangeAddress aCellRangeAddress, [in] boolean bMergeRanges);
     void removeRangeAddress([in] ::com::sun::star::table::CellRangeAddress aCellRangeAddress) raises (::com::sun::star::container::NoSuchElementException);
     void addRangeAddresses([in] sequence< ::com::sun::star::table::CellRangeAddress > aCellRangeAddresses, [in] boolean bMergeRanges);
     void removeRangeAddresses([in] sequence< ::com::sun::star::table::CellRangeAddress > aCellRangeAddresses) raises (::com::sun::star::container::NoSuchElementException);
    };
    published interface XSheetConditionalEntries;
    published service SheetCellRanges {
     service ::com::sun::star::table::CellProperties;
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::CharacterPropertiesAsian;
     service ::com::sun::star::style::CharacterPropertiesComplex;
     service ::com::sun::star::style::ParagraphProperties;
     service ::com::sun::star::sheet::SheetRangesQuery;
     interface ::com::sun::star::util::XReplaceable;
     interface ::com::sun::star::util::XIndent;
     interface ::com::sun::star::sheet::XSheetOperation;
     interface ::com::sun::star::chart::XChartDataArray;
     interface ::com::sun::star::sheet::XSheetCellRangeContainer;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XNameContainer;
     [property] ::com::sun::star::sheet::XSheetConditionalEntries ConditionalFormat;
     [property, optional] ::com::sun::star::sheet::XSheetConditionalEntries ConditionalFormatLocal;
     [property] ::com::sun::star::beans::XPropertySet Validation;
     [property, optional] ::com::sun::star::beans::XPropertySet ValidationLocal;
     [property, optional, readonly] string AbsoluteName;
    };
    published service SheetCellRangesEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published interface XSheetFilterDescriptor {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::sheet::TableFilterField > getFilterFields();
     void setFilterFields([in] sequence< ::com::sun::star::sheet::TableFilterField > aFilterFields);
    };
    published struct TableFilterField2 {
     ::com::sun::star::sheet::FilterConnection Connection;
     long Field;
     long Operator;
     boolean IsNumeric;
     double NumericValue;
     string StringValue;
    };
    published interface XSheetFilterDescriptor2 {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::sheet::TableFilterField2 > getFilterFields2();
     void setFilterFields2([in] sequence< ::com::sun::star::sheet::TableFilterField2 > aFilterFields);
    };
   };
   module table {
    published enum TableOrientation {
     COLUMNS = 0,
     ROWS = 1
    };
   };
   module sheet {
    published service SheetFilterDescriptor {
     interface ::com::sun::star::sheet::XSheetFilterDescriptor;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::sheet::XSheetFilterDescriptor2;
     [property] boolean IsCaseSensitive;
     [property] boolean SkipDuplicates;
     [property] boolean UseRegularExpressions;
     [property] boolean SaveOutputPosition;
     [property] ::com::sun::star::table::TableOrientation Orientation;
     [property] boolean ContainsHeader;
     [property] boolean CopyOutputData;
     [property] ::com::sun::star::table::CellAddress OutputPosition;
     [property, readonly] long MaxFieldCount;
    };
    published service SheetLink {
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::util::XRefreshable;
     interface ::com::sun::star::beans::XPropertySet;
     [property] string Url;
     [property] string Filter;
     [property] string FilterOptions;
    };
    published enum SheetLinkMode {
     NONE = 0,
     NORMAL = 1,
     VALUE = 2
    };
    published service SheetLinks {
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service SheetLinksEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
   };
   module util {
    /** @deprecated */ published service SortDescriptor {
     interface ::com::sun::star::beans::XPropertySet;
     [property] boolean IsCaseSensitive;
     [property, optional] boolean SortAscending;
     [property] boolean SortColumns;
     [property] ::com::sun::star::lang::Locale CollatorLocale;
     [property, optional] string CollatorAlgorithm;
    };
    /** @deprecated */ published enum SortFieldType {
     AUTOMATIC = 0,
     NUMERIC = 1,
     ALPHANUMERIC = 2
    };
    /** @deprecated */ published struct SortField {
     long Field;
     boolean SortAscending;
     ::com::sun::star::util::SortFieldType FieldType;
    };
   };
   module table {
    /** @deprecated */ published service TableSortDescriptor {
     service ::com::sun::star::util::SortDescriptor;
     [property] sequence< ::com::sun::star::util::SortField > SortFields;
     [property, readonly] long MaxFieldCount;
     /** @deprecated */ [property] ::com::sun::star::table::TableOrientation Orientation;
     [property] boolean ContainsHeader;
    };
   };
   module sheet {
    published service SheetSortDescriptor {
     service ::com::sun::star::table::TableSortDescriptor;
     [property] boolean BindFormatsToContent;
     [property] boolean IsUserListEnabled;
     [property] long UserListIndex;
     [property] boolean CopyOutputData;
     [property] ::com::sun::star::table::CellAddress OutputPosition;
    };
   };
   module table {
    published enum TableSortFieldType {
     AUTOMATIC = 0,
     NUMERIC = 1,
     ALPHANUMERIC = 2
    };
    published struct TableSortField {
     long Field;
     boolean IsAscending;
     boolean IsCaseSensitive;
     ::com::sun::star::table::TableSortFieldType FieldType;
     ::com::sun::star::lang::Locale CollatorLocale;
     string CollatorAlgorithm;
    };
   };
   module util {
    published service SortDescriptor2 {
    };
   };
   module table {
    published service TableSortDescriptor2 {
     service ::com::sun::star::util::SortDescriptor2;
     [property] sequence< ::com::sun::star::table::TableSortField > SortFields;
     [property, readonly] long MaxSortFieldsCount;
     [property] boolean IsSortColumns;
    };
   };
   module sheet {
    published service SheetSortDescriptor2 {
     service ::com::sun::star::table::TableSortDescriptor2;
     [property] boolean BindFormatsToContent;
     [property] boolean IsUserListEnabled;
     [property] long UserListIndex;
     [property] boolean CopyOutputData;
     [property] ::com::sun::star::table::CellAddress OutputPosition;
     [property] boolean ContainsHeader;
    };
    published interface XCellRangeMovement {
     interface ::com::sun::star::uno::XInterface;
     void insertCells([in] ::com::sun::star::table::CellRangeAddress aRange, [in] ::com::sun::star::sheet::CellInsertMode nMode);
     void removeRange([in] ::com::sun::star::table::CellRangeAddress aRange, [in] ::com::sun::star::sheet::CellDeleteMode nMode);
     void moveRange([in] ::com::sun::star::table::CellAddress aDestination, [in] ::com::sun::star::table::CellRangeAddress aSource);
     void copyRange([in] ::com::sun::star::table::CellAddress aDestination, [in] ::com::sun::star::table::CellRangeAddress aSource);
    };
    published interface XDataPilotTablesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XDataPilotTables getDataPilotTables();
    };
    published interface XPrintAreas {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::table::CellRangeAddress > getPrintAreas();
     void setPrintAreas([in] sequence< ::com::sun::star::table::CellRangeAddress > aPrintAreas);
     boolean getPrintTitleColumns();
     void setPrintTitleColumns([in] boolean bPrintTitleColumns);
     ::com::sun::star::table::CellRangeAddress getTitleColumns();
     void setTitleColumns([in] ::com::sun::star::table::CellRangeAddress aTitleColumns);
     boolean getPrintTitleRows();
     void setPrintTitleRows([in] boolean bPrintTitleRows);
     ::com::sun::star::table::CellRangeAddress getTitleRows();
     void setTitleRows([in] ::com::sun::star::table::CellRangeAddress aTitleRows);
    };
    published interface XScenariosSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XScenarios getScenarios();
    };
    published interface XSheetAnnotationsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XSheetAnnotations getAnnotations();
    };
    published interface XSheetAuditing {
     interface ::com::sun::star::uno::XInterface;
     boolean hideDependents([in] ::com::sun::star::table::CellAddress aPosition);
     boolean hidePrecedents([in] ::com::sun::star::table::CellAddress aPosition);
     boolean showDependents([in] ::com::sun::star::table::CellAddress aPosition);
     boolean showPrecedents([in] ::com::sun::star::table::CellAddress aPosition);
     boolean showErrors([in] ::com::sun::star::table::CellAddress aPosition);
     boolean showInvalid();
     void clearArrows();
    };
    /** @deprecated */ published interface XSheetLinkable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::SheetLinkMode getLinkMode();
     void setLinkMode([in] ::com::sun::star::sheet::SheetLinkMode nLinkMode);
     string getLinkUrl();
     void setLinkUrl([in] string aLinkUrl);
     string getLinkSheetName();
     void setLinkSheetName([in] string aLinkSheetName);
     void link([in] string aUrl, [in] string aSheetName, [in] string aFilterName, [in] string aFilterOptions, [in] ::com::sun::star::sheet::SheetLinkMode nMode);
    };
    published interface XSheetOutline {
     interface ::com::sun::star::uno::XInterface;
     void group([in] ::com::sun::star::table::CellRangeAddress aRange, [in] ::com::sun::star::table::TableOrientation nOrientation);
     void ungroup([in] ::com::sun::star::table::CellRangeAddress aRange, [in] ::com::sun::star::table::TableOrientation nOrientation);
     void autoOutline([in] ::com::sun::star::table::CellRangeAddress aRange);
     void clearOutline();
     void hideDetail([in] ::com::sun::star::table::CellRangeAddress aRange);
     void showDetail([in] ::com::sun::star::table::CellRangeAddress aRange);
     void showLevel([in] short nLevel, [in] ::com::sun::star::table::TableOrientation nOrientation);
    };
    published struct TablePageBreakData {
     long Position;
     boolean ManualBreak;
    };
    /** @deprecated */ published interface XSheetPageBreak {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::sheet::TablePageBreakData > getColumnPageBreaks();
     sequence< ::com::sun::star::sheet::TablePageBreakData > getRowPageBreaks();
     void removeAllManualPageBreaks();
    };
    published interface XSpreadsheet {
     interface ::com::sun::star::sheet::XSheetCellRange;
     ::com::sun::star::sheet::XSheetCellCursor createCursor();
     ::com::sun::star::sheet::XSheetCellCursor createCursorByRange([in] ::com::sun::star::sheet::XSheetCellRange aRange);
    };
   };
   module table {
    published interface XTableCharts;
    published interface XTableChartsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::XTableCharts getCharts();
    };
   };
   module util {
    published interface XProtectable {
     interface ::com::sun::star::uno::XInterface;
     void protect([in] string aPassword);
     void unprotect([in] string aPassword) raises (::com::sun::star::lang::IllegalArgumentException);
     boolean isProtected();
    };
   };
   module sheet {
    published interface XCalculatable {
     interface ::com::sun::star::uno::XInterface;
     void calculate();
     void calculateAll();
     boolean isAutomaticCalculationEnabled();
     void enableAutomaticCalculation([in] boolean bEnabled);
    };
    /** @deprecated */ published interface XConsolidatable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XConsolidationDescriptor createConsolidationDescriptor([in] boolean bEmpty);
     void consolidate([in] ::com::sun::star::sheet::XConsolidationDescriptor xDescriptor);
    };
    published interface XDocumentAuditing {
     interface ::com::sun::star::uno::XInterface;
     void refreshArrows();
    };
    published interface XGoalSeek {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::GoalResult seekGoal([in] ::com::sun::star::table::CellAddress aFormulaPosition, [in] ::com::sun::star::table::CellAddress aVariablePosition, [in] string aGoalValue);
    };
    published interface XSpreadsheets;
    published interface XSpreadsheetDocument {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XSpreadsheets getSheets();
    };
    published service SpreadsheetDocument {
     service ::com::sun::star::document::OfficeDocument;
     /** @deprecated */ [optional] service ::com::sun::star::sheet::SpreadsheetDocumentSettings;
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::frame::XModel;
     interface ::com::sun::star::document::XActionLockable;
     interface ::com::sun::star::document::XLinkTargetSupplier;
     interface ::com::sun::star::util::XProtectable;
     interface ::com::sun::star::sheet::XSpreadsheetDocument;
     interface ::com::sun::star::sheet::XCalculatable;
     interface ::com::sun::star::sheet::XDocumentAuditing;
     interface ::com::sun::star::sheet::XConsolidatable;
     interface ::com::sun::star::sheet::XGoalSeek;
     interface ::com::sun::star::drawing::XDrawPagesSupplier;
     interface ::com::sun::star::style::XStyleFamiliesSupplier;
     interface ::com::sun::star::util::XNumberFormatsSupplier;
     [property, readonly] ::com::sun::star::sheet::XNamedRanges NamedRanges;
     [property, readonly] ::com::sun::star::sheet::XDatabaseRanges DatabaseRanges;
     [property, readonly] ::com::sun::star::sheet::XLabelRanges ColumnLabelRanges;
     [property, readonly] ::com::sun::star::sheet::XLabelRanges RowLabelRanges;
     [property, readonly] ::com::sun::star::container::XNameAccess SheetLinks;
     [property, readonly] ::com::sun::star::sheet::XAreaLinks AreaLinks;
     [property, readonly] ::com::sun::star::container::XNameAccess DDELinks;
    };
    published service SpreadsheetDrawPage {
     interface ::com::sun::star::drawing::XDrawPage;
     interface ::com::sun::star::drawing::XShapeGrouper;
    };
    published interface XViewPane {
     interface ::com::sun::star::uno::XInterface;
     long getFirstVisibleColumn();
     void setFirstVisibleColumn([in] long nFirstVisibleColumn);
     long getFirstVisibleRow();
     void setFirstVisibleRow([in] long nFirstVisibleRow);
     ::com::sun::star::table::CellRangeAddress getVisibleRange();
    };
    published service SpreadsheetViewPane {
     interface ::com::sun::star::sheet::XViewPane;
     interface ::com::sun::star::sheet::XCellRangeReferrer;
     [optional] interface ::com::sun::star::view::XControlAccess;
    };
    published service SpreadsheetViewSettings {
     interface ::com::sun::star::beans::XPropertySet;
     [property] boolean ShowFormulas;
     [property] boolean ShowZeroValues;
     [property] boolean IsValueHighlightingEnabled;
     [property] boolean ShowNotes;
     [property] boolean HasVerticalScrollBar;
     [property] boolean HasHorizontalScrollBar;
     [property] boolean HasSheetTabs;
     [property] boolean IsOutlineSymbolsSet;
     [property] boolean HasColumnRowHeaders;
     [property] boolean ShowGrid;
     [property] ::com::sun::star::util::Color GridColor;
     [property] boolean ShowHelpLines;
     [property] boolean ShowAnchor;
     [property] boolean ShowPageBreaks;
     [property] short ShowObjects;
     [property] short ShowCharts;
     [property] short ShowDrawing;
     [property] boolean HideSpellMarks;
     [property] short ZoomType;
     [property] short ZoomValue;
    };
    published interface XActivationEventListener;
    published interface XActivationBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addActivationEventListener([in] ::com::sun::star::sheet::XActivationEventListener aListener);
     void removeActivationEventListener([in] ::com::sun::star::sheet::XActivationEventListener aListener);
    };
    published interface XEnhancedMouseClickBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addEnhancedMouseClickHandler([in] ::com::sun::star::awt::XEnhancedMouseClickHandler aListener);
     void removeEnhancedMouseClickHandler([in] ::com::sun::star::awt::XEnhancedMouseClickHandler aListener);
    };
    published interface XRangeSelectionChangeListener;
    published interface XRangeSelectionListener;
    published interface XRangeSelection {
     interface ::com::sun::star::uno::XInterface;
     void startRangeSelection([in] sequence< ::com::sun::star::beans::PropertyValue > aArguments);
     void abortRangeSelection();
     void addRangeSelectionListener([in] ::com::sun::star::sheet::XRangeSelectionListener aListener);
     void removeRangeSelectionListener([in] ::com::sun::star::sheet::XRangeSelectionListener aListener);
     void addRangeSelectionChangeListener([in] ::com::sun::star::sheet::XRangeSelectionChangeListener aListener);
     void removeRangeSelectionChangeListener([in] ::com::sun::star::sheet::XRangeSelectionChangeListener aListener);
    };
    published interface XSpreadsheetView {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::XSpreadsheet getActiveSheet();
     void setActiveSheet([in] ::com::sun::star::sheet::XSpreadsheet xActiveSheet);
    };
    published interface XViewFreezable {
     interface ::com::sun::star::uno::XInterface;
     boolean hasFrozenPanes();
     void freezeAtPosition([in] long nColumns, [in] long nRows);
    };
    /** @deprecated */ published interface XViewSplitable {
     interface ::com::sun::star::uno::XInterface;
     boolean getIsWindowSplit();
     long getSplitHorizontal();
     long getSplitVertical();
     long getSplitColumn();
     long getSplitRow();
     void splitAtPosition([in] long nPixelX, [in] long nPixelY);
    };
    published service SpreadsheetView {
     service ::com::sun::star::frame::Controller;
     service ::com::sun::star::sheet::SpreadsheetViewSettings;
     service ::com::sun::star::sheet::SpreadsheetViewPane;
     interface ::com::sun::star::sheet::XSpreadsheetView;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::view::XSelectionSupplier;
     interface ::com::sun::star::sheet::XViewSplitable;
     interface ::com::sun::star::sheet::XViewFreezable;
     interface ::com::sun::star::sheet::XRangeSelection;
     [optional] interface ::com::sun::star::sheet::XEnhancedMouseClickBroadcaster;
     [optional] interface ::com::sun::star::sheet::XActivationBroadcaster;
    };
    published constants SpreadsheetViewObjectsMode {
     const short HIDE = 1;
     const short SHOW = 0;
    };
    published service SpreadsheetViewPanesEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published interface XCellRangesAccess {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::table::XCell getCellByPosition([in] long nColumn, [in] long nRow, [in] long nSheet) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     ::com::sun::star::table::XCellRange getCellRangeByPosition([in] long nLeft, [in] long nTop, [in] long nRight, [in] long nBottom, [in] long nSheet) raises (::com::sun::star::lang::IndexOutOfBoundsException);
     sequence< ::com::sun::star::table::XCellRange > getCellRangesByName([in] string aRange) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XSpreadsheets {
     interface ::com::sun::star::container::XNameContainer;
     void insertNewByName([in] string aName, [in] short nPosition);
     void moveByName([in] string aName, [in] short nDestination);
     void copyByName([in] string aName, [in] string aCopy, [in] short nDestination);
    };
    published service Spreadsheets {
     interface ::com::sun::star::sheet::XSpreadsheets;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     [optional] interface ::com::sun::star::sheet::XCellRangesAccess;
    };
    published service SpreadsheetsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published constants StatusBarFunction {
     const short AVERAGE = 1;
     const short COUNT = 3;
     const short COUNTNUMS = 2;
     const short MAX = 4;
     const short MIN = 5;
     const short NONE = 0;
     const short SUM = 9;
    };
    published struct SubTotalColumn {
     long Column;
     ::com::sun::star::sheet::GeneralFunction Function;
    };
    published interface XSubTotalDescriptor {
     interface ::com::sun::star::uno::XInterface;
     void addNew([in] sequence< ::com::sun::star::sheet::SubTotalColumn > aSubTotalColumns, [in] long nGroupColumn);
     void clear();
    };
    published service SubTotalDescriptor {
     interface ::com::sun::star::sheet::XSubTotalDescriptor;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::beans::XPropertySet;
     [property] boolean InsertPageBreaks;
     [property] boolean IsCaseSensitive;
     [property] boolean EnableUserSortList;
     [property] long UserSortListIndex;
     [property] boolean BindFormatsToContent;
     [property] boolean EnableSort;
     [property] boolean SortAscending;
     [property, readonly] long MaxFieldCount;
    };
    published interface XSubTotalField {
     interface ::com::sun::star::uno::XInterface;
     long getGroupColumn();
     void setGroupColumn([in] long nGroupColumn);
     sequence< ::com::sun::star::sheet::SubTotalColumn > getSubTotalColumns();
     void setSubTotalColumns([in] sequence< ::com::sun::star::sheet::SubTotalColumn > aSubTotalColumns);
    };
    published service SubTotalField {
     interface ::com::sun::star::sheet::XSubTotalField;
    };
    published service SubTotalFieldsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published service TableAutoFormat {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XNamed;
     [property] boolean IncludeFont;
     [property] boolean IncludeJustify;
     [property] boolean IncludeBorder;
     [property] boolean IncludeBackground;
     [property] boolean IncludeNumberFormat;
     [property] boolean IncludeWidthAndHeight;
    };
    published service TableAutoFormatEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published service TableAutoFormatField {
     interface ::com::sun::star::beans::XPropertySet;
     [property] string CharFontName;
     [property, optional] string CharFontNameAsian;
     [property, optional] string CharFontNameComplex;
     [property] string CharFontStyleName;
     [property, optional] string CharFontStyleNameAsian;
     [property, optional] string CharFontStyleNameComplex;
     [property] string CharFontCharSet;
     [property, optional] string CharFontCharSetAsian;
     [property, optional] string CharFontCharSetComplex;
     [property] string CharFontFamily;
     [property, optional] string CharFontFamilyAsian;
     [property, optional] string CharFontFamilyComplex;
     [property] string CharFontPitch;
     [property, optional] string CharFontPitchAsian;
     [property, optional] string CharFontPitchComplex;
     [property] float CharHeight;
     [property, optional] float CharHeightAsian;
     [property, optional] float CharHeightComplex;
     [property] float CharWeight;
     [property, optional] float CharWeightAsian;
     [property, optional] float CharWeightComplex;
     [property] ::com::sun::star::awt::FontSlant CharPosture;
     [property, optional] ::com::sun::star::awt::FontSlant CharPostureAsian;
     [property, optional] ::com::sun::star::awt::FontSlant CharPostureComplex;
     [property] short CharUnderline;
     [property] boolean CharCrossedOut;
     [property] boolean CharContoured;
     [property] boolean CharShadowed;
     [property] ::com::sun::star::util::Color CharColor;
     [property] ::com::sun::star::util::Color CellBackColor;
     [property] boolean IsCellBackgroundTransparent;
     [property, optional] ::com::sun::star::table::ShadowFormat ShadowFormat;
     [property, optional] ::com::sun::star::table::CellHoriJustify HoriJustify;
     [property, optional] long VertJustify;
     [property, optional] boolean IsTextWrapped;
     [property, optional] ::com::sun::star::table::CellOrientation Orientation;
     [property, optional] long RotateAngle;
     [property, optional] long RotateReference;
     [property, optional] long ParaTopMargin;
     [property, optional] long ParaBottomMargin;
     [property, optional] long ParaLeftMargin;
     [property, optional] long ParaRightMargin;
     [property, optional] ::com::sun::star::table::TableBorder TableBorder;
     [property, optional] ::com::sun::star::table::TableBorder2 TableBorder2;
    };
    published service TableAutoFormats {
     interface ::com::sun::star::container::XNameContainer;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service TableAutoFormatsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
   };
   module style {
    published service CellStyle {
     service ::com::sun::star::style::Style;
    };
   };
   module sheet {
    published service TableCellStyle {
     service ::com::sun::star::table::CellProperties;
     service ::com::sun::star::style::CellStyle;
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::CharacterPropertiesAsian;
     service ::com::sun::star::style::CharacterPropertiesComplex;
     service ::com::sun::star::style::ParagraphProperties;
    };
    published interface XSheetCondition {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sheet::ConditionOperator getOperator();
     void setOperator([in] ::com::sun::star::sheet::ConditionOperator nOperator);
     string getFormula1();
     void setFormula1([in] string aFormula1);
     string getFormula2();
     void setFormula2([in] string aFormula2);
     ::com::sun::star::table::CellAddress getSourcePosition();
     void setSourcePosition([in] ::com::sun::star::table::CellAddress aSourcePosition);
    };
    published interface XSheetConditionalEntry {
     interface ::com::sun::star::uno::XInterface;
     string getStyleName();
     void setStyleName([in] string aStyleName);
    };
    published service TableConditionalEntry {
     interface ::com::sun::star::sheet::XSheetCondition;
     interface ::com::sun::star::sheet::XSheetConditionalEntry;
    };
    published service TableConditionalEntryEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published interface XSheetConditionalEntries {
     interface ::com::sun::star::container::XIndexAccess;
     void addNew([in] sequence< ::com::sun::star::beans::PropertyValue > aConditionalEntry);
     void removeByIndex([in] long nIndex);
     void clear();
    };
    published service TableConditionalFormat {
     interface ::com::sun::star::sheet::XSheetConditionalEntries;
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::container::XIndexAccess;
    };
   };
   module style {
    published enum PageStyleLayout {
     ALL = 0,
     LEFT = 1,
     RIGHT = 2,
     MIRRORED = 3
    };
   };
   module text {
    published interface XTextColumns;
   };
   module style {
    published service PageProperties {
     [property] ::com::sun::star::util::Color BackColor;
     [property] string BackGraphicURL;
     [property] string BackGraphicFilter;
     [property] ::com::sun::star::style::GraphicLocation BackGraphicLocation;
     [property] boolean BackTransparent;
     [property] long LeftMargin;
     [property] long RightMargin;
     [property] long TopMargin;
     [property] long BottomMargin;
     [property] ::com::sun::star::table::BorderLine LeftBorder;
     [property] ::com::sun::star::table::BorderLine RightBorder;
     [property] ::com::sun::star::table::BorderLine TopBorder;
     [property] ::com::sun::star::table::BorderLine BottomBorder;
     [property] long LeftBorderDistance;
     [property] long RightBorderDistance;
     [property] long TopBorderDistance;
     [property] long BottomBorderDistance;
     [property] ::com::sun::star::table::ShadowFormat ShadowFormat;
     [property] boolean IsLandscape;
     [property] short NumberingType;
     [property] ::com::sun::star::style::PageStyleLayout PageStyleLayout;
     [property] string PrinterPaperTray;
     [property, optional] boolean RegisterModeActive;
     [property, optional] string RegisterParagraphStyle;
     [property] ::com::sun::star::awt::Size Size;
     [property] long Width;
     [property] long Height;
     [property, optional] ::com::sun::star::text::XTextColumns TextColumns;
     [property] ::com::sun::star::container::XNameContainer UserDefinedAttributes;
     [property, maybevoid] ::com::sun::star::util::Color HeaderBackColor;
     [property, maybevoid] string HeaderBackGraphicURL;
     [property, maybevoid] string HeaderBackGraphicFilter;
     [property, maybevoid] ::com::sun::star::style::GraphicLocation HeaderBackGraphicLocation;
     [property, maybevoid] long HeaderLeftMargin;
     [property, maybevoid] long HeaderRightMargin;
     [property, maybevoid] boolean HeaderBackTransparent;
     [property, maybevoid] ::com::sun::star::table::BorderLine HeaderLeftBorder;
     [property, maybevoid] ::com::sun::star::table::BorderLine HeaderRightBorder;
     [property, maybevoid] ::com::sun::star::table::BorderLine HeaderTopBorder;
     [property, maybevoid] ::com::sun::star::table::BorderLine HeaderBottomBorder;
     [property, maybevoid] long HeaderLeftBorderDistance;
     [property, maybevoid] long HeaderRightBorderDistance;
     [property, maybevoid] long HeaderTopBorderDistance;
     [property, maybevoid] long HeaderBottomBorderDistance;
     [property, maybevoid] ::com::sun::star::table::ShadowFormat HeaderShadowFormat;
     [property, maybevoid] long HeaderBodyDistance;
     [property, maybevoid] boolean HeaderIsShared;
     [property, maybevoid, optional] boolean FirstIsShared;
     [property, maybevoid] long HeaderHeight;
     [property, maybevoid] boolean HeaderIsDynamicHeight;
     [property] boolean HeaderIsOn;
     [property, maybevoid, optional] ::com::sun::star::text::XText HeaderText;
     [property, maybevoid, optional] ::com::sun::star::text::XText HeaderTextLeft;
     [property, maybevoid, optional] ::com::sun::star::text::XText HeaderTextRight;
     [property, maybevoid] ::com::sun::star::util::Color FooterBackColor;
     [property, maybevoid] string FooterBackGraphicURL;
     [property, maybevoid] string FooterBackGraphicFilter;
     [property, maybevoid] ::com::sun::star::style::GraphicLocation FooterBackGraphicLocation;
     [property, maybevoid] long FooterLeftMargin;
     [property, maybevoid] long FooterRightMargin;
     [property, maybevoid] boolean FooterBackTransparent;
     [property, maybevoid] ::com::sun::star::table::BorderLine FooterLeftBorder;
     [property, maybevoid] ::com::sun::star::table::BorderLine FooterRightBorder;
     [property, maybevoid] ::com::sun::star::table::BorderLine FooterTopBorder;
     [property, maybevoid] ::com::sun::star::table::BorderLine FooterBottomBorder;
     [property, maybevoid] long FooterLeftBorderDistance;
     [property, maybevoid] long FooterRightBorderDistance;
     [property, maybevoid] long FooterTopBorderDistance;
     [property, maybevoid] long FooterBottomBorderDistance;
     [property, maybevoid] ::com::sun::star::table::ShadowFormat FooterShadowFormat;
     [property, maybevoid] long FooterBodyDistance;
     [property, maybevoid] boolean FooterIsDynamicHeight;
     [property, maybevoid] boolean FooterIsShared;
     [property, maybevoid] long FooterHeight;
     [property] boolean FooterIsOn;
     [property, maybevoid, optional] ::com::sun::star::text::XText FooterText;
     [property, maybevoid, optional] ::com::sun::star::text::XText FooterTextLeft;
     [property, maybevoid, optional] ::com::sun::star::text::XText FooterTextRight;
     [property, optional] long FootnoteHeight;
     [property, optional] short FootnoteLineWeight;
     [property, optional] short FootnoteLineStyle;
     [property, optional] ::com::sun::star::util::Color FootnoteLineColor;
     [property, optional] byte FootnoteLineRelativeWidth;
     [property, optional] short FootnoteLineAdjust;
     [property, optional] long FootnoteLineTextDistance;
     [property, optional] long FootnoteLineDistance;
     [property, optional] short WritingMode;
     [property, optional] short GridMode;
     [property, optional] ::com::sun::star::util::Color GridColor;
     [property, optional] short GridLines;
     [property, optional] long GridBaseHeight;
     [property, optional] long GridRubyHeight;
     [property, optional] boolean GridRubyBelow;
     [property, optional] boolean GridPrint;
     [property, optional] boolean GridDisplay;
     [property, maybevoid, optional] boolean HeaderDynamicSpacing;
     [property, maybevoid, optional] boolean FooterDynamicSpacing;
     [property] long BorderDistance;
     [property, maybevoid] long FooterBorderDistance;
     [property, maybevoid] long HeaderBorderDistance;
    };
    published service PageStyle {
     service ::com::sun::star::style::Style;
     service ::com::sun::star::style::PageProperties;
    };
   };
   module sheet {
    published service TablePageStyle {
     service ::com::sun::star::style::PageStyle;
     [property] boolean CenterHorizontally;
     [property] boolean CenterVertically;
     [property] boolean PrintAnnotations;
     [property] boolean PrintGrid;
     [property] boolean PrintHeaders;
     [property] boolean PrintCharts;
     [property] boolean PrintObjects;
     [property] boolean PrintDrawing;
     [property] boolean PrintFormulas;
     [property] boolean PrintZeroValues;
     [property] boolean PrintDownFirst;
     [property] ::com::sun::star::sheet::XHeaderFooterContent LeftPageHeaderContent;
     [property] ::com::sun::star::sheet::XHeaderFooterContent LeftPageFooterContent;
     [property] ::com::sun::star::sheet::XHeaderFooterContent RightPageHeaderContent;
     [property] ::com::sun::star::sheet::XHeaderFooterContent RightPageFooterContent;
     [property] short FirstPageNumber;
     [property] short PageScale;
     [property] short ScaleToPages;
     [property, optional] short ScaleToPagesX;
     [property, optional] short ScaleToPagesY;
    };
    published enum ValidationAlertStyle {
     STOP = 0,
     WARNING = 1,
     INFO = 2,
     MACRO = 3
    };
    published enum ValidationType {
     ANY = 0,
     WHOLE = 1,
     DECIMAL = 2,
     DATE = 3,
     TIME = 4,
     TEXT_LEN = 5,
     LIST = 6,
     CUSTOM = 7
    };
    published service TableValidation {
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::sheet::XSheetCondition;
     [property] ::com::sun::star::sheet::ValidationType Type;
     [property] boolean ShowInputMessage;
     [property] string InputTitle;
     [property] string InputMessage;
     [property] boolean ShowErrorMessage;
     [property] string ErrorTitle;
     [property] string ErrorMessage;
     [property] boolean IgnoreBlankCells;
     [property] ::com::sun::star::sheet::ValidationAlertStyle ErrorAlertStyle;
     [property, optional] short ShowList;
    };
    published service UniqueCellFormatRanges {
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service UniqueCellFormatRangesEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published interface XResultListener;
    published interface XVolatileResult {
     interface ::com::sun::star::uno::XInterface;
     void addResultListener([in] ::com::sun::star::sheet::XResultListener aListener);
     void removeResultListener([in] ::com::sun::star::sheet::XResultListener aListener);
    };
    published service VolatileResult {
     interface ::com::sun::star::sheet::XVolatileResult;
    };
    published interface XActivationEventListener {
     interface ::com::sun::star::lang::XEventListener;
     void activeSpreadsheetChanged([in] ::com::sun::star::sheet::ActivationEvent aEvent);
    };
    /** @deprecated */ published interface XFillAcrossSheet {
     interface ::com::sun::star::uno::XInterface;
     void fillAcrossSheets([in] long nContentFlags);
    };
    published interface XRangeSelectionChangeListener {
     interface ::com::sun::star::lang::XEventListener;
     void descriptorChanged([in] ::com::sun::star::sheet::RangeSelectionEvent aEvent);
    };
    published interface XRangeSelectionListener {
     interface ::com::sun::star::lang::XEventListener;
     void done([in] ::com::sun::star::sheet::RangeSelectionEvent aEvent);
     void aborted([in] ::com::sun::star::sheet::RangeSelectionEvent aEvent);
    };
    published interface XResultListener {
     interface ::com::sun::star::lang::XEventListener;
     void modified([in] ::com::sun::star::sheet::ResultEvent aEvent);
    };
    /** @deprecated */ published interface XSheetPastable {
     interface ::com::sun::star::uno::XInterface;
     void paste([in] ::com::sun::star::table::CellAddress aDestination);
     void pasteFormat([in] ::com::sun::star::table::CellAddress aDestination, [in] string aFormat);
     void pasteCellRange([in] ::com::sun::star::table::CellRangeAddress aDestination, [in] ::com::sun::star::sheet::PasteOperation nOperation, [in] short nContents, [in] boolean bSkipEmpty, [in] boolean bTranspose, [in] boolean bAsLink, [in] ::com::sun::star::sheet::CellInsertMode nInsert);
    };
    /** @deprecated */ published interface XViewPanesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getViewPanes();
    };
   };
   module style {
    published constants CaseMap {
     const short LOWERCASE = 2;
     const short NONE = 0;
     const short SMALLCAPS = 4;
     const short TITLE = 3;
     const short UPPERCASE = 1;
    };
    published service CharacterStyle {
     service ::com::sun::star::style::Style;
     service ::com::sun::star::style::CharacterProperties;
     [property] float CharDiffHeight;
     [property] short CharPropHeight;
     [property] float CharDiffHeightAsian;
     [property] short CharPropHeightAsian;
     [property] float CharDiffHeightComplex;
     [property] short CharPropHeightComplex;
    };
    published constants FootnoteLineStyle {
     const short DASHED = 3;
     const short DOTTED = 2;
     const short NONE = 0;
     const short SOLID = 1;
    };
    published constants LineNumberPosition {
     const short INSIDE = 2;
     const short LEFT = 0;
     const short OUTSIDE = 3;
     const short RIGHT = 1;
    };
    published constants LineSpacingMode {
     const short FIX = 3;
     const short LEADING = 2;
     const short MINIMUM = 1;
     const short PROP = 0;
    };
    published service NumberingAlignment {
     [property] ::com::sun::star::style::HorizontalAlignment Alignment;
     [property] short TextMarginDistance;
     [property] short TextNumberingDistance;
     [property] short Insertion;
    };
    published service NumberingLevel {
     [property] short NumberingType;
     [property] short ParentNumbering;
     [property] string Prefix;
     [property] string Suffix;
     [property] string CharStyleName;
     [property] short BulletId;
     [property] string BulletFontName;
     [property] string GraphicURL;
     [property] short StartWith;
    };
    published service NumberingRule {
     service ::com::sun::star::style::NumberingAlignment;
     service ::com::sun::star::style::NumberingLevel;
    };
    published constants NumberingType {
     const short AIU_FULLWIDTH_JA = 21;
     const short AIU_HALFWIDTH_JA = 22;
     const short ARABIC = 4;
     const short BITMAP = 8;
     const short CHARS_ARABIC = 31;
     const short CHARS_ARABIC_ABJAD = 54;
     const short CHARS_CYRILLIC_LOWER_LETTER_BG = 39;
     const short CHARS_CYRILLIC_LOWER_LETTER_N_BG = 41;
     const short CHARS_CYRILLIC_LOWER_LETTER_N_RU = 45;
     const short CHARS_CYRILLIC_LOWER_LETTER_N_SR = 51;
     const short CHARS_CYRILLIC_LOWER_LETTER_RU = 43;
     const short CHARS_CYRILLIC_LOWER_LETTER_SR = 49;
     const short CHARS_CYRILLIC_UPPER_LETTER_BG = 38;
     const short CHARS_CYRILLIC_UPPER_LETTER_N_BG = 40;
     const short CHARS_CYRILLIC_UPPER_LETTER_N_RU = 44;
     const short CHARS_CYRILLIC_UPPER_LETTER_N_SR = 50;
     const short CHARS_CYRILLIC_UPPER_LETTER_RU = 42;
     const short CHARS_CYRILLIC_UPPER_LETTER_SR = 48;
     const short CHARS_GREEK_LOWER_LETTER = 53;
     const short CHARS_GREEK_UPPER_LETTER = 52;
     const short CHARS_HEBREW = 33;
     const short CHARS_KHMER = 35;
     const short CHARS_LAO = 36;
     const short CHARS_LOWER_LETTER = 1;
     const short CHARS_LOWER_LETTER_N = 10;
     const short CHARS_MYANMAR = 47;
     const short CHARS_NEPALI = 34;
     const short CHARS_PERSIAN = 46;
     const short CHARS_PERSIAN_WORD = 55;
     const short CHARS_THAI = 32;
     const short CHARS_TIBETAN = 37;
     const short CHARS_UPPER_LETTER = 0;
     const short CHARS_UPPER_LETTER_N = 9;
     const short CHAR_SPECIAL = 6;
     const short CIRCLE_NUMBER = 14;
     const short DI_ZI_ZH = 19;
     const short FULLWIDTH_ARABIC = 13;
     const short HANGUL_CIRCLED_JAMO_KO = 29;
     const short HANGUL_CIRCLED_SYLLABLE_KO = 30;
     const short HANGUL_JAMO_KO = 27;
     const short HANGUL_SYLLABLE_KO = 28;
     const short IROHA_FULLWIDTH_JA = 23;
     const short IROHA_HALFWIDTH_JA = 24;
     const short NATIVE_NUMBERING = 12;
     const short NUMBER_HANGUL_KO = 26;
     const short NUMBER_LOWER_ZH = 15;
     const short NUMBER_NONE = 5;
     const short NUMBER_TRADITIONAL_JA = 20;
     const short NUMBER_UPPER_KO = 25;
     const short NUMBER_UPPER_ZH = 16;
     const short NUMBER_UPPER_ZH_TW = 17;
     const short PAGE_DESCRIPTOR = 7;
     const short ROMAN_LOWER = 3;
     const short ROMAN_UPPER = 2;
     const short TIAN_GAN_ZH = 18;
     const short TRANSLITERATION = 11;
    };
   };
   module xml {
    published service ParaUserDefinedAttributesSupplier {
     [property] ::com::sun::star::container::XNameContainer ParaUserDefinedAttributes;
    };
   };
   module style {
    published service ParagraphStyle {
     service ::com::sun::star::style::Style;
     service ::com::sun::star::style::ParagraphProperties;
     [optional] service ::com::sun::star::xml::ParaUserDefinedAttributesSupplier;
     [property] long ParaLeftMarginRelative;
     [property] long ParaRightMarginRelative;
     [property] long ParaTopMarginRelative;
     [property] long ParaBottomMarginRelative;
     [property] short Category;
     [property] float CharDiffHeight;
     [property] short CharPropHeight;
     [property] float CharDiffHeightAsian;
     [property] short CharPropHeightAsian;
     [property] float CharDiffHeightComplex;
     [property] short CharPropHeightComplex;
     [property, optional, readonly] string PageStyleName;
    };
    published constants ParagraphStyleCategory {
     const short CHAPTER = 1;
     const short EXTRA = 4;
     const short HTML = 5;
     const short INDEX = 3;
     const short LIST = 2;
     const short TEXT = 0;
    };
    published service StyleFamilies {
     interface ::com::sun::star::container::XNameAccess;
     [optional] interface ::com::sun::star::container::XIndexAccess;
    };
    published service StyleFamily {
     interface ::com::sun::star::container::XNameAccess;
     [optional] interface ::com::sun::star::container::XNameContainer;
     [optional] interface ::com::sun::star::container::XIndexAccess;
    };
    published interface XStyleLoader {
     interface ::com::sun::star::uno::XInterface;
     void loadStylesFromURL([in] string URL, [in] sequence< ::com::sun::star::beans::PropertyValue > aOptions) raises (::com::sun::star::io::IOException);
     sequence< ::com::sun::star::beans::PropertyValue > getStyleLoaderOptions();
    };
   };
   module svg {
    /** @deprecated */ published interface XSVGPrinter {
     interface ::com::sun::star::uno::XInterface;
     boolean startJob([in] ::com::sun::star::xml::sax::XDocumentHandler aHandler, [in] sequence< byte > aJobSetup, [in] string aJobName, [in] unsigned long nCopies, [in] boolean bCollate);
     void printPage([in] sequence< byte > aPrintPage);
     void endJob();
    };
    /** @deprecated */ published interface XSVGWriter {
     interface ::com::sun::star::uno::XInterface;
     void write([in] ::com::sun::star::xml::sax::XDocumentHandler aHandler, [in] sequence< byte > aMtf);
    };
   };
   module system {
    published interface XSimpleMailClient;
    published interface XSimpleMailClientSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::system::XSimpleMailClient querySimpleMailClient();
    };
    published service SimpleCommandMail: ::com::sun::star::system::XSimpleMailClientSupplier;
    published constants SimpleMailClientFlags {
     const long DEFAULTS = 0;
     const long NO_LOGON_DIALOG = 2;
     const long NO_USER_INTERFACE = 1;
    };
    published service SimpleSystemMail: ::com::sun::star::system::XSimpleMailClientSupplier;
    published exception SystemShellExecuteException: ::com::sun::star::uno::Exception {
     long PosixError;
    };
    published interface XSystemShellExecute {
     interface ::com::sun::star::uno::XInterface;
     void execute([in] string aCommand, [in] string aParameter, [in] long nFlags) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::system::SystemShellExecuteException);
    };
    published service SystemShellExecute: ::com::sun::star::system::XSystemShellExecute;
    published constants SystemShellExecuteFlags {
     const long DEFAULTS = 0;
     const long NO_SYSTEM_ERROR_MESSAGE = 1;
     const long URIS_ONLY = 2;
    };
    published interface XSimpleMailMessage;
    published interface XSimpleMailClient {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::system::XSimpleMailMessage createSimpleMailMessage();
     void sendSimpleMailMessage([in] ::com::sun::star::system::XSimpleMailMessage xSimpleMailMessage, [in] long aFlag) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::Exception);
    };
    published interface XSimpleMailMessage {
     interface ::com::sun::star::uno::XInterface;
     void setRecipient([in] string aRecipient);
     string getRecipient();
     void setCcRecipient([in] sequence< string > aCcRecipient);
     sequence< string > getCcRecipient();
     void setBccRecipient([in] sequence< string > aBccRecipient);
     sequence< string > getBccRecipient();
     void setOriginator([in] string aOriginator);
     string getOriginator();
     void setSubject([in] string aSubject);
     string getSubject();
     void setAttachement([in] sequence< string > aAttachement) raises (::com::sun::star::lang::IllegalArgumentException);
     sequence< string > getAttachement();
    };
   };
   module table {
    published enum CellVertJustify {
     STANDARD = 0,
     TOP = 1,
     CENTER = 2,
     BOTTOM = 3
    };
    published struct TableBorderDistances {
     short TopDistance;
     boolean IsTopDistanceValid;
     short BottomDistance;
     boolean IsBottomDistanceValid;
     short LeftDistance;
     boolean IsLeftDistanceValid;
     short RightDistance;
     boolean IsRightDistanceValid;
    };
    published interface XTableChart {
     interface ::com::sun::star::uno::XInterface;
     boolean getHasColumnHeaders();
     void setHasColumnHeaders([in] boolean bHasColumnHeaders);
     boolean getHasRowHeaders();
     void setHasRowHeaders([in] boolean bHasRowHeaders);
     sequence< ::com::sun::star::table::CellRangeAddress > getRanges();
     void setRanges([in] sequence< ::com::sun::star::table::CellRangeAddress > aRanges);
    };
    published service TableChart {
     interface ::com::sun::star::table::XTableChart;
     interface ::com::sun::star::document::XEmbeddedObjectSupplier;
     interface ::com::sun::star::container::XNamed;
    };
    published interface XTableCharts {
     interface ::com::sun::star::container::XNameAccess;
     void addNewByName([in] string aName, [in] ::com::sun::star::awt::Rectangle aRect, [in] sequence< ::com::sun::star::table::CellRangeAddress > aRanges, [in] boolean bColumnHeaders, [in] boolean bRowHeaders);
     void removeByName([in] string aName);
    };
    published service TableCharts {
     interface ::com::sun::star::table::XTableCharts;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service TableChartsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published service TableColumn {
     interface ::com::sun::star::table::XCellRange;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::container::XNamed;
     [property] long Width;
     [property] boolean OptimalWidth;
     [property] boolean IsVisible;
     [property] boolean IsStartOfNewPage;
    };
    published interface XTableColumns {
     interface ::com::sun::star::container::XIndexAccess;
     void insertByIndex([in] long nIndex, [in] long nCount);
     void removeByIndex([in] long nIndex, [in] long nCount);
    };
    published service TableColumns {
     interface ::com::sun::star::table::XTableColumns;
     interface ::com::sun::star::container::XEnumerationAccess;
     [optional] interface ::com::sun::star::container::XNameAccess;
    };
    published service TableColumnsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published service TableRow {
     interface ::com::sun::star::table::XCellRange;
     interface ::com::sun::star::beans::XPropertySet;
     [property] long Height;
     [property] boolean OptimalHeight;
     [property] boolean IsVisible;
     [property] boolean IsStartOfNewPage;
    };
    published interface XTableRows {
     interface ::com::sun::star::container::XIndexAccess;
     void insertByIndex([in] long nIndex, [in] long nCount);
     void removeByIndex([in] long nIndex, [in] long nCount);
    };
    published service TableRows {
     interface ::com::sun::star::table::XTableRows;
     interface ::com::sun::star::container::XEnumerationAccess;
    };
    published service TableRowsEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
   };
   module task {
    published interface XJobListener;
    published interface XAsyncJob {
     interface ::com::sun::star::uno::XInterface;
     void executeAsync([in] sequence< ::com::sun::star::beans::NamedValue > Arguments, [in] ::com::sun::star::task::XJobListener Listener) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service AsyncJob {
     interface ::com::sun::star::task::XAsyncJob;
     [optional] interface ::com::sun::star::util::XCloseable;
    };
    published enum PasswordRequestMode {
     PASSWORD_CREATE = 0,
     PASSWORD_ENTER = 1,
     PASSWORD_REENTER = 2
    };
    published exception PasswordRequest: ::com::sun::star::task::ClassifiedInteractionRequest {
     ::com::sun::star::task::PasswordRequestMode Mode;
    };
    published exception DocumentMSPasswordRequest: ::com::sun::star::task::PasswordRequest {
     string Name;
    };
    published exception DocumentPasswordRequest: ::com::sun::star::task::PasswordRequest {
     string Name;
    };
    published exception ErrorCodeRequest: ::com::sun::star::uno::Exception {
     long ErrCode;
    };
    published service InteractionHandler: ::com::sun::star::task::XInteractionHandler2 {
     createWithParent([in] ::com::sun::star::awt::XWindow parent);
     createWithParentAndContext([in] ::com::sun::star::awt::XWindow parent, [in] string context);
    };
    published service Job {
     interface ::com::sun::star::task::XJob;
     [optional] interface ::com::sun::star::util::XCloseable;
    };
    published interface XJobExecutor {
     interface ::com::sun::star::uno::XInterface;
     void trigger([in] string Event);
    };
    /** @deprecated */ published service JobExecutor: ::com::sun::star::task::XJobExecutor;
    published exception MasterPasswordRequest: ::com::sun::star::task::PasswordRequest {
    };
    published exception NoMasterException: ::com::sun::star::uno::RuntimeException {
     ::com::sun::star::task::PasswordRequestMode Mode;
    };
    published interface XRestartManager {
     interface ::com::sun::star::uno::XInterface;
     void requestRestart([in] ::com::sun::star::task::XInteractionHandler xInteractionHandler) raises (::com::sun::star::uno::Exception);
     boolean isRestartRequested([in] boolean bInitialized) raises (::com::sun::star::uno::Exception);
    };
    published exception PDFExportException: ::com::sun::star::uno::Exception {
     sequence< long > ErrorCodes;
    };
    published interface XMasterPasswordHandling {
     interface ::com::sun::star::uno::XInterface;
     boolean authorizateWithMasterPassword([in] ::com::sun::star::task::XInteractionHandler xHandler);
     boolean changeMasterPassword([in] ::com::sun::star::task::XInteractionHandler xHandler);
     void removeMasterPassword();
     boolean hasMasterPassword();
     boolean allowPersistentStoring([in] boolean bAllow);
     boolean isPersistentStoringAllowed();
    };
    published interface XMasterPasswordHandling2 {
     interface ::com::sun::star::task::XMasterPasswordHandling;
     boolean useDefaultMasterPassword([in] ::com::sun::star::task::XInteractionHandler xHandler);
     boolean isDefaultMasterPasswordUsed();
    };
    published struct UserRecord {
     string UserName;
     sequence< string > Passwords;
    };
    published struct UrlRecord {
     string Url;
     sequence< ::com::sun::star::task::UserRecord > UserList;
    };
    published interface XPasswordContainer {
     interface ::com::sun::star::uno::XInterface;
     void add([in] string Url, [in] string UserName, [in] sequence< string > Passwords, [in] ::com::sun::star::task::XInteractionHandler Handler);
     void addPersistent([in] string Url, [in] string UserName, [in] sequence< string > Passwords, [in] ::com::sun::star::task::XInteractionHandler Handler);
     ::com::sun::star::task::UrlRecord find([in] string Url, [in] ::com::sun::star::task::XInteractionHandler Handler);
     ::com::sun::star::task::UrlRecord findForName([in] string Url, [in] string UserName, [in] ::com::sun::star::task::XInteractionHandler Handler);
     void remove([in] string Url, [in] string UserName);
     void removePersistent([in] string Url, [in] string UserName);
     void removeAllPersistent();
     sequence< ::com::sun::star::task::UrlRecord > getAllPersistent([in] ::com::sun::star::task::XInteractionHandler Handler);
    };
    published interface XUrlContainer {
     interface ::com::sun::star::uno::XInterface;
     void addUrl([in] string Url, [in] boolean MakePersistent);
     string findUrl([in] string Url);
     void removeUrl([in] string Url);
     sequence< string > getUrls([in] boolean OnlyPersistent);
    };
    published interface XPasswordContainer2 {
     interface ::com::sun::star::task::XPasswordContainer;
     interface ::com::sun::star::task::XMasterPasswordHandling2;
     interface ::com::sun::star::task::XUrlContainer;
    };
    published service PasswordContainer: ::com::sun::star::task::XPasswordContainer2;
    published service PasswordContainerInteractionHandler: ::com::sun::star::task::XInteractionHandler;
    published exception UnsupportedOverwriteRequest: ::com::sun::star::task::ClassifiedInteractionRequest {
     string Name;
    };
    published interface XInteractionApprove {
     interface ::com::sun::star::task::XInteractionContinuation;
    };
    published interface XInteractionDisapprove {
     interface ::com::sun::star::task::XInteractionContinuation;
    };
    published interface XInteractionPassword {
     interface ::com::sun::star::task::XInteractionContinuation;
     void setPassword([in] string aPasswd);
     string getPassword();
    };
    published interface XInteractionPassword2 {
     interface ::com::sun::star::task::XInteractionPassword;
     void setPasswordToModify([in] string aPasswd);
     string getPasswordToModify();
     void setRecommendReadOnly([in] boolean bReadOnly);
     boolean getRecommendReadOnly();
    };
    published interface XJobListener {
     interface ::com::sun::star::lang::XEventListener;
     void jobFinished([in] ::com::sun::star::task::XAsyncJob Job, [in] any Result);
    };
    published interface XStatusIndicator {
     interface ::com::sun::star::uno::XInterface;
     void start([in] string Text, [in] long Range);
     void end();
     void setText([in] string Text);
     void setValue([in] long Value);
     void reset();
    };
    /** @deprecated */ published interface XStatusIndicatorSupplier {
     interface ::com::sun::star::uno::XInterface;
     /** @deprecated */ ::com::sun::star::task::XStatusIndicator getStatusIndicator();
    };
    published singleton theJobExecutor: ::com::sun::star::task::XJobExecutor;
   };
   module text {
    published constants AuthorDisplayFormat {
     const short FIRST_NAME = 2;
     const short FULL = 0;
     const short INITIALS = 3;
     const short LAST_NAME = 1;
    };
    published interface XAutoTextGroup;
    published interface XAutoTextContainer {
     interface ::com::sun::star::container::XNameAccess;
     ::com::sun::star::text::XAutoTextGroup insertNewByName([in] string aGroupName) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException);
     void removeByName([in] string aGroupName) raises (::com::sun::star::container::NoSuchElementException);
    };
    published interface XAutoTextContainer2 {
     interface ::com::sun::star::text::XAutoTextContainer;
     interface ::com::sun::star::container::XIndexAccess;
    };
    published service AutoTextContainer: ::com::sun::star::text::XAutoTextContainer2;
    /** @deprecated */ published interface XAutoTextEntry {
     interface ::com::sun::star::uno::XInterface;
     void applyTo([in] ::com::sun::star::text::XTextRange xRange);
    };
    published service AutoTextEntry {
     interface ::com::sun::star::text::XAutoTextEntry;
     interface ::com::sun::star::text::XText;
    };
    published interface XAutoTextGroup {
     interface ::com::sun::star::container::XNameAccess;
     sequence< string > getTitles();
     void renameByName([in] string aElementName, [in] string aNewElementName, [in] string aNewElementTitle) raises (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException);
     ::com::sun::star::text::XAutoTextEntry insertNewByName([in] string aName, [in] string aTitle, [in] ::com::sun::star::text::XTextRange xTextRange) raises (::com::sun::star::container::ElementExistException);
     void removeByName([in] string aEntryName) raises (::com::sun::star::container::NoSuchElementException);
    };
    published service AutoTextGroup {
     interface ::com::sun::star::text::XAutoTextGroup;
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XNamed;
     [property, readonly] string FilePath;
     [property] string Title;
    };
    published interface XTextFrame;
    published service BaseFrameProperties {
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     [property] short AnchorPageNo;
     [property] ::com::sun::star::text::XTextFrame AnchorFrame;
     [property] ::com::sun::star::util::Color BackColor;
     [property] string BackGraphicURL;
     [property] string BackGraphicFilter;
     [property] ::com::sun::star::style::GraphicLocation BackGraphicLocation;
     [property] ::com::sun::star::table::BorderLine LeftBorder;
     [property] ::com::sun::star::table::BorderLine RightBorder;
     [property] ::com::sun::star::table::BorderLine TopBorder;
     [property] ::com::sun::star::table::BorderLine BottomBorder;
     [property] long BorderDistance;
     [property] long LeftBorderDistance;
     [property] long RightBorderDistance;
     [property] long TopBorderDistance;
     [property] long BottomBorderDistance;
     [property] boolean BackTransparent;
     [property] boolean ContentProtected;
     [property] long LeftMargin;
     [property] long RightMargin;
     [property] long TopMargin;
     [property] long BottomMargin;
     [property] long Height;
     [property] long Width;
     [property] short RelativeHeight;
     [property] short RelativeWidth;
     [property] boolean IsSyncWidthToHeight;
     [property] boolean IsSyncHeightToWidth;
     [property] short HoriOrient;
     [property] long HoriOrientPosition;
     [property] short HoriOrientRelation;
     [property] short VertOrient;
     [property] long VertOrientPosition;
     [property] short VertOrientRelation;
     [property] string HyperLinkURL;
     [property] string HyperLinkTarget;
     [property] string HyperLinkName;
     [property] boolean Opaque;
     [property] boolean PageToggle;
     [property] boolean PositionProtected;
     [property] boolean Print;
     [property] ::com::sun::star::table::ShadowFormat ShadowFormat;
     [property] boolean ServerMap;
     [property] ::com::sun::star::awt::Size Size;
     [property] boolean SizeProtected;
     /** @deprecated */ [property] ::com::sun::star::text::WrapTextMode Surround;
     [property] boolean SurroundAnchorOnly;
     [property, optional] short WrapInfluenceOnPosition;
     [property, maybevoid, optional] ::com::sun::star::awt::Size LayoutSize;
     [property, optional] string Title;
     [property, optional] string Description;
     [property, optional] ::com::sun::star::drawing::FillStyle FillStyle;
     [property, optional] ::com::sun::star::awt::Gradient FillGradient;
     [property, optional] string FillGradientName;
     [property, optional] short ShadowTransparence;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > FrameInteropGrabBag;
     [property, optional] short RelativeHeightRelation;
     [property, optional] short RelativeWidthRelation;
    };
    published service BaseFrame {
     service ::com::sun::star::text::BaseFrameProperties;
     service ::com::sun::star::text::TextContent;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::container::XNamed;
     [optional] interface ::com::sun::star::drawing::XShape;
     [property] string FrameStyleName;
    };
    /** @deprecated */ published interface XDocumentIndex {
     interface ::com::sun::star::text::XTextContent;
     string getServiceName();
     void update();
    };
    published interface XTextColumns;
    published interface XTextSection;
    published service BaseIndex {
     interface ::com::sun::star::text::XDocumentIndex;
     [optional] interface ::com::sun::star::util::XRefreshable;
     [property] string Title;
     [property] boolean IsProtected;
     [property] string ParaStyleHeading;
     [property] string ParaStyleLevel1;
     [property, optional] string ParaStyleLevel2;
     [property, optional] string ParaStyleLevel3;
     [property, optional] string ParaStyleLevel4;
     [property, optional] string ParaStyleLevel5;
     [property, optional] string ParaStyleLevel6;
     [property, optional] string ParaStyleLevel7;
     [property, optional] string ParaStyleLevel8;
     [property, optional] string ParaStyleLevel9;
     [property, optional] string ParaStyleLevel10;
     [property, optional] string ParaStyleSeparator;
     [property] ::com::sun::star::text::XTextColumns TextColumns;
     [property] string BackGraphicURL;
     [property] string BackGraphicFilter;
     [property] ::com::sun::star::style::GraphicLocation BackGraphicLocation;
     [property] ::com::sun::star::util::Color BackColor;
     [property] boolean BackTransparent;
     [property, optional] ::com::sun::star::container::XIndexReplace LevelFormat;
     [property, optional] boolean CreateFromChapter;
     [property] ::com::sun::star::text::XTextSection ContentSection;
     [property] ::com::sun::star::text::XTextSection HeaderSection;
    };
    published service BaseIndexMark {
     service ::com::sun::star::text::TextContent;
     [property] string AlternativeText;
    };
    published service Bibliography {
     service ::com::sun::star::text::BaseIndex;
     [property] ::com::sun::star::lang::Locale Locale;
     [property] string SortAlgorithm;
    };
    published constants BibliographyDataField {
     const short ADDRESS = 2;
     const short ANNOTE = 3;
     const short AUTHOR = 4;
     const short BIBILIOGRAPHIC_TYPE = 1;
     const short BOOKTITLE = 5;
     const short CHAPTER = 6;
     const short CUSTOM1 = 25;
     const short CUSTOM2 = 26;
     const short CUSTOM3 = 27;
     const short CUSTOM4 = 28;
     const short CUSTOM5 = 29;
     const short EDITION = 7;
     const short EDITOR = 8;
     const short HOWPUBLISHED = 9;
     const short IDENTIFIER = 0;
     const short INSTITUTION = 10;
     const short ISBN = 30;
     const short JOURNAL = 11;
     const short MONTH = 12;
     const short NOTE = 13;
     const short NUMBER = 14;
     const short ORGANIZATIONS = 15;
     const short PAGES = 16;
     const short PUBLISHER = 17;
     const short REPORT_TYPE = 21;
     const short SCHOOL = 18;
     const short SERIES = 19;
     const short TITLE = 20;
     const short URL = 24;
     const short VOLUME = 22;
     const short YEAR = 23;
    };
    published constants BibliographyDataType {
     const short ARTICLE = 0;
     const short BOOK = 1;
     const short BOOKLET = 2;
     const short CONFERENCE = 3;
     const short CUSTOM1 = 17;
     const short CUSTOM2 = 18;
     const short CUSTOM3 = 19;
     const short CUSTOM4 = 20;
     const short CUSTOM5 = 21;
     const short EMAIL = 15;
     const short INBOOK = 4;
     const short INCOLLECTION = 5;
     const short INPROCEEDINGS = 6;
     const short JOURNAL = 7;
     const short MANUAL = 8;
     const short MASTERSTHESIS = 9;
     const short MISC = 10;
     const short PHDTHESIS = 11;
     const short PROCEEDINGS = 12;
     const short TECHREPORT = 13;
     const short UNPUBLISHED = 14;
     const short WWW = 16;
    };
    published service Bookmark {
     service ::com::sun::star::text::TextContent;
     interface ::com::sun::star::container::XNamed;
    };
    published service Bookmarks {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XIndexAccess;
    };
    published interface XTextSection;
    published service CellProperties {
     service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::beans::XPropertySet;
     [property] string CellName;
     [property] ::com::sun::star::util::Color BackColor;
     [property] string BackGraphicURL;
     [property] string BackGraphicFilter;
     [property] ::com::sun::star::style::GraphicLocation BackGraphicLocation;
     [property] long NumberFormat;
     [property] boolean BackTransparent;
     [property] ::com::sun::star::table::BorderLine LeftBorder;
     [property] ::com::sun::star::table::BorderLine RightBorder;
     [property] ::com::sun::star::table::BorderLine TopBorder;
     [property] ::com::sun::star::table::BorderLine BottomBorder;
     [property] long LeftBorderDistance;
     [property] long RightBorderDistance;
     [property] long TopBorderDistance;
     [property] long BottomBorderDistance;
     [property, readonly] ::com::sun::star::text::XTextSection TextSection;
     [property] boolean IsProtected;
     [property] short VertOrient;
    };
    published service CellRange {
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::CharacterPropertiesAsian;
     service ::com::sun::star::style::CharacterPropertiesComplex;
     service ::com::sun::star::style::ParagraphProperties;
     [optional] service ::com::sun::star::style::ParagraphPropertiesAsian;
     [optional] service ::com::sun::star::style::ParagraphPropertiesComplex;
     interface ::com::sun::star::table::XCellRange;
     [optional] interface ::com::sun::star::sheet::XCellRangeData;
     [optional] interface ::com::sun::star::chart::XChartDataArray;
     [property] ::com::sun::star::util::Color BackColor;
     [property] string BackGraphicFilter;
     [property] ::com::sun::star::style::GraphicLocation BackGraphicLocation;
     [property] string BackGraphicURL;
     [property] boolean BackTransparent;
     [property] boolean ChartColumnAsLabel;
     [property] boolean ChartRowAsLabel;
     [property] long NumberFormat;
    };
    published interface XTextFrame {
     interface ::com::sun::star::text::XTextContent;
     ::com::sun::star::text::XText getText();
    };
    published service TextFrame {
     service ::com::sun::star::text::BaseFrame;
     interface ::com::sun::star::text::XTextFrame;
     [property] long FrameHeightAbsolute;
     [property] long FrameWidthAbsolute;
     [property] byte FrameWidthPercent;
     [property] byte FrameHeightPercent;
     [property] boolean FrameIsAutomaticHeight;
     [property] short SizeType;
     [property, optional] boolean EditInReadonly;
     [property, optional] short WidthType;
     [property, optional] short WritingMode;
     [property, optional] boolean IsFollowingTextFlow;
     [property, optional] ::com::sun::star::drawing::TextVerticalAdjust TextVerticalAdjust;
    };
    published service ChainedTextFrame {
     service ::com::sun::star::text::TextFrame;
     [property, maybevoid] string ChainNextName;
     [property, maybevoid] string ChainPrevName;
    };
    published constants ChapterFormat {
     const short DIGIT = 4;
     const short NAME = 0;
     const short NAME_NUMBER = 2;
     const short NO_PREFIX_SUFFIX = 3;
     const short NUMBER = 1;
    };
    published service ChapterNumberingRule {
     service ::com::sun::star::style::NumberingRule;
     [property] string HeadingStyleName;
    };
    published constants CharacterCompressionType {
     const short NONE = 0;
     const short PUNCTUATION_AND_KANA = 2;
     const short PUNCTUATION_ONLY = 1;
    };
    published constants ColumnSeparatorStyle {
     const short DASHED = 3;
     const short DOTTED = 2;
     const short NONE = 0;
     const short SOLID = 1;
    };
    published service ContentIndex {
     service ::com::sun::star::text::BaseIndex;
     [property, optional] short Level;
     [property, optional] boolean CreateFromOutline;
     [property, optional] ::com::sun::star::container::XIndexReplace LevelParagraphStyles;
     [property, optional] boolean CreateFromMarks;
    };
    published service ContentIndexMark {
     service ::com::sun::star::text::TextContent;
     service ::com::sun::star::text::BaseIndexMark;
     [property] short Level;
    };
    published constants ControlCharacter {
     const short APPEND_PARAGRAPH = 5;
     const short HARD_HYPHEN = 2;
     const short HARD_SPACE = 4;
     const short LINE_BREAK = 1;
     const short PARAGRAPH_BREAK = 0;
     const short SOFT_HYPHEN = 3;
    };
    /** @deprecated */ published constants DateDisplayFormat {
     const short DDMMMMYYYY = 5;
     const short DDMMMYYYY = 4;
     const short MMDDYY = 2;
     const short MMDDYYYY = 3;
     const short NNDDMMMMYYYY = 6;
     const short NNNNDDMMMMYYYY = 7;
     const short STANDARD_LONG = 1;
     const short STANDARD_SHORT = 0;
    };
    published interface XDefaultNumberingProvider {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::container::XIndexAccess > getDefaultOutlineNumberings([in] ::com::sun::star::lang::Locale aLocale);
     sequence< ::com::sun::star::beans::PropertyValues > getDefaultContinuousNumberingLevels([in] ::com::sun::star::lang::Locale aLocale);
    };
    published service DefaultNumberingProvider: ::com::sun::star::text::XDefaultNumberingProvider;
    published service Defaults {
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::ParagraphProperties;
     [optional] service ::com::sun::star::style::CharacterPropertiesAsian;
     [optional] service ::com::sun::star::style::CharacterPropertiesComplex;
     [optional] service ::com::sun::star::style::ParagraphPropertiesAsian;
     [optional] service ::com::sun::star::style::ParagraphPropertiesComplex;
     interface ::com::sun::star::beans::XPropertySet;
     [property] long TabStopDistance;
    };
    published interface XDependentTextField {
     interface ::com::sun::star::text::XTextField;
     void attachTextFieldMaster([in] ::com::sun::star::beans::XPropertySet xFieldMaster) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::beans::XPropertySet getTextFieldMaster();
    };
    published service DependentTextField {
     service ::com::sun::star::text::TextField;
     interface ::com::sun::star::text::XDependentTextField;
    };
    published interface XDocumentIndexMark;
    published service DocumentIndex {
     service ::com::sun::star::text::BaseIndex;
     [property, optional] boolean UseAlphabeticalSeparators;
     [property, optional] boolean UseKeyAsEntry;
     [property, optional] boolean UseCombinedEntries;
     [property, optional] boolean IsCaseSensitive;
     [property, optional] boolean UsePP;
     [property, optional] boolean UseDash;
     [property, optional] boolean UseUpperCase;
     [property, optional] string MainEntryCharacterStyleName;
     [property, readonly] sequence< ::com::sun::star::text::XDocumentIndexMark > DocumentIndexMarks;
     [property] ::com::sun::star::lang::Locale Locale;
     [property] string SortAlgorithm;
    };
    published service DocumentIndexLevelFormat {
     interface ::com::sun::star::container::XIndexReplace;
    };
    published service DocumentIndexMark {
     service ::com::sun::star::text::TextContent;
     service ::com::sun::star::text::BaseIndexMark;
     [property] string PrimaryKey;
     [property] string SecondaryKey;
     [property] boolean IsMainEntry;
    };
    published service DocumentIndexMarkAsian {
     [property] string TextReading;
     [property] string PrimaryKeyReading;
     [property] string SecondaryKeyReading;
    };
    published service DocumentIndexParagraphStyles {
     interface ::com::sun::star::container::XIndexReplace;
    };
    published service DocumentIndexes {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XIndexAccess;
    };
    published enum NotePrintMode {
     NOT = 0,
     ONLY = 1,
     DOC_END = 2,
     PAGE_END = 3
    };
    published service PrintSettings {
     [property] boolean PrintGraphics;
     [property] boolean PrintTables;
     [property] boolean PrintDrawings;
     [property] boolean PrintLeftPages;
     [property] boolean PrintRightPages;
     [property] boolean PrintControls;
     [property] boolean PrintReversed;
     [property] boolean PrintPaperFromSetup;
     [property] string PrintFaxName;
     [property] ::com::sun::star::text::NotePrintMode PrintAnnotationMode;
     [property] boolean PrintProspect;
     [property] boolean PrintPageBackground;
     [property] boolean PrintBlackFonts;
     [property, optional] boolean PrintEmptyPages;
    };
    published service DocumentSettings {
     service ::com::sun::star::document::Settings;
     [optional] service ::com::sun::star::text::PrintSettings;
     interface ::com::sun::star::beans::XPropertySet;
     [property, optional] boolean ChartAutoUpdate;
     [property, optional] boolean AddParaTableSpacing;
     [property, optional] boolean AddParaTableSpacingAtStart;
     [property, optional] boolean AlignTabStopPosition;
     [property, optional] boolean SaveGlobalDocumentLinks;
     [property, optional] boolean IsLabelDocument;
     [property, optional] boolean UseFormerLineSpacing;
     [property, optional] boolean AddParaSpacingToTableCells;
     [property, optional] boolean UseFormerObjectPositioning;
     [property, optional] boolean ConsiderTextWrapOnObjPos;
     [property, optional] boolean MathBaselineAlignment;
    };
    published constants DocumentStatistic {
     const short CHARS = 3;
     const short PAGES = 0;
     const short PARAS = 1;
     const short WORDS = 2;
    };
    published interface XFootnote {
     interface ::com::sun::star::text::XTextContent;
     string getLabel();
     void setLabel([in] string aLabel);
    };
    published service Footnote {
     interface ::com::sun::star::text::XFootnote;
     interface ::com::sun::star::text::XText;
     [property, optional, readonly] short ReferenceId;
    };
    published service Endnote {
     service ::com::sun::star::text::Footnote;
    };
    published service FootnoteSettings {
     [property] string CharStyleName;
     [property] short NumberingType;
     [property] string PageStyleName;
     [property] string ParaStyleName;
     [property] string Prefix;
     [property] short StartAt;
     [property] string Suffix;
     [property, optional] string BeginNotice;
     [property, optional] string EndNotice;
     [property, optional] short FootnoteCounting;
     [property, optional] boolean PositionEndOfDoc;
     [property, optional] string AnchorCharStyleName;
    };
    published service EndnoteSettings {
     service ::com::sun::star::text::FootnoteSettings;
    };
    published constants FilenameDisplayFormat {
     const short FULL = 0;
     const short NAME = 2;
     const short NAME_AND_EXT = 3;
     const short PATH = 1;
    };
    published constants FontEmphasis {
     const short ACCENT_ABOVE = 4;
     const short ACCENT_BELOW = 14;
     const short CIRCLE_ABOVE = 2;
     const short CIRCLE_BELOW = 12;
     const short DISK_ABOVE = 3;
     const short DISK_BELOW = 13;
     const short DOT_ABOVE = 1;
     const short DOT_BELOW = 11;
     const short NONE = 0;
    };
    published constants FontRelief {
     const short EMBOSSED = 1;
     const short ENGRAVED = 2;
     const short NONE = 0;
    };
    published constants FootnoteNumbering {
     const short PER_CHAPTER = 1;
     const short PER_DOCUMENT = 2;
     const short PER_PAGE = 0;
    };
    published service Footnotes {
     interface ::com::sun::star::container::XIndexAccess;
    };
    published interface XBookmarksSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getBookmarks();
    };
    published interface XChapterNumberingSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexReplace getChapterNumberingRules();
    };
    published interface XDocumentIndexesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getDocumentIndexes();
    };
    published interface XEndnotesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getEndnotes();
     ::com::sun::star::beans::XPropertySet getEndnoteSettings();
    };
    published interface XFootnotesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getFootnotes();
     ::com::sun::star::beans::XPropertySet getFootnoteSettings();
    };
    published interface XPagePrintable {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::beans::PropertyValue > getPagePrintSettings();
     void setPagePrintSettings([in] sequence< ::com::sun::star::beans::PropertyValue > aSettings);
     void printPages([in] sequence< ::com::sun::star::beans::PropertyValue > xOptions) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XReferenceMarksSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getReferenceMarks();
    };
    published interface XTextDocument {
     interface ::com::sun::star::frame::XModel;
     ::com::sun::star::text::XText getText();
     void reformat();
    };
    published interface XTextEmbeddedObjectsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getEmbeddedObjects();
    };
    published interface XTextFramesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getTextFrames();
    };
    published interface XTextGraphicObjectsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getGraphicObjects();
    };
    published interface XTextSectionsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getTextSections();
    };
    published interface XTextTablesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XNameAccess getTextTables();
    };
    published service GenericTextDocument {
     service ::com::sun::star::document::OfficeDocument;
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::text::XTextDocument;
     interface ::com::sun::star::util::XSearchable;
     interface ::com::sun::star::util::XRefreshable;
     [optional] interface ::com::sun::star::text::XFootnotesSupplier;
     [optional] interface ::com::sun::star::text::XEndnotesSupplier;
     [optional] interface ::com::sun::star::util::XReplaceable;
     [optional] interface ::com::sun::star::text::XPagePrintable;
     [optional] interface ::com::sun::star::text::XReferenceMarksSupplier;
     [optional] interface ::com::sun::star::text::XChapterNumberingSupplier;
     [optional] interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::text::XTextGraphicObjectsSupplier;
     [optional] interface ::com::sun::star::text::XTextEmbeddedObjectsSupplier;
     [optional] interface ::com::sun::star::text::XTextTablesSupplier;
     [optional] interface ::com::sun::star::style::XStyleFamiliesSupplier;
     [optional] interface ::com::sun::star::text::XBookmarksSupplier;
     [optional] interface ::com::sun::star::text::XDocumentIndexesSupplier;
     [optional] interface ::com::sun::star::text::XTextFieldsSupplier;
     [optional] interface ::com::sun::star::text::XTextFramesSupplier;
     [optional] interface ::com::sun::star::text::XTextSectionsSupplier;
     [optional] interface ::com::sun::star::util::XNumberFormatsSupplier;
     [property, optional] ::com::sun::star::lang::Locale CharLocale;
     [property, optional, readonly] long CharacterCount;
     [property, optional, readonly] long ParagraphCount;
     [property, optional, readonly] long WordCount;
     [property, optional] string WordSeparator;
     [property, optional] string IndexAutoMarkFileURL;
     [property, optional] boolean RecordChanges;
     [property, optional] short TwoDigitYear;
    };
   };
   module view {
    published interface XPrintSettingsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getPrintSettings();
    };
    published interface XViewSettingsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getViewSettings();
    };
   };
   module text {
    published service GlobalSettings {
     interface ::com::sun::star::view::XPrintSettingsSupplier;
     interface ::com::sun::star::view::XViewSettingsSupplier;
    };
    published constants HoriOrientation {
     const short CENTER = 2;
     const short FULL = 6;
     const short INSIDE = 4;
     const short LEFT = 3;
     const short LEFT_AND_WIDTH = 7;
     const short NONE = 0;
     const short OUTSIDE = 5;
     const short RIGHT = 1;
    };
    published struct HoriOrientationFormat {
     long XPos;
     short HorizontalOrientation;
     short HorizontalRelation;
     boolean PositionToggle;
    };
    published enum HorizontalAdjust {
     LEFT = 0,
     CENTER = 1,
     RIGHT = 2
    };
    published service IllustrationsIndex {
     service ::com::sun::star::text::BaseIndex;
     [property, optional] boolean CreateFromLabels;
     [property, optional] string LabelCategory;
     [property, optional] short LabelDisplayType;
    };
    published exception InvalidTextContentException: ::com::sun::star::uno::Exception {
     ::com::sun::star::text::XTextContent TextContent;
    };
    published constants LabelFollow {
     const short LISTTAB = 0;
     const short NOTHING = 2;
     const short SPACE = 1;
    };
    published service LineNumberingProperties {
     [property] boolean IsOn;
     [property] string CharStyleName;
     [property] boolean CountEmptyLines;
     [property] boolean CountLinesInFrames;
     [property] long Distance;
     [property] short Interval;
     [property] string SeparatorText;
     [property] short SeparatorInterval;
     [property] short NumberPosition;
     [property] short NumberingType;
     [property, optional] boolean RestartAtEachPage;
    };
    published interface XMailMergeListener;
    published interface XMailMergeBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addMailMergeEventListener([in] ::com::sun::star::text::XMailMergeListener xListener);
     void removeMailMergeEventListener([in] ::com::sun::star::text::XMailMergeListener xListener);
    };
    published service MailMerge {
     service ::com::sun::star::sdb::DataAccessDescriptor;
     interface ::com::sun::star::task::XJob;
     interface ::com::sun::star::beans::XPropertySet;
     [optional] interface ::com::sun::star::util::XCancellable;
     [optional] interface ::com::sun::star::text::XMailMergeBroadcaster;
     [property] string DataSourceName;
     [property] long CommandType;
     [property] string Command;
     [property] ::com::sun::star::sdbc::XResultSet ResultSet;
     [property] ::com::sun::star::sdbc::XConnection ActiveConnection;
     [property] sequence< any > Selection;
     [property] boolean EscapeProcessing;
     [property] string Filter;
     [property] string DocumentURL;
     [property, readonly] ::com::sun::star::frame::XModel Model;
     [property] short OutputType;
     [property] boolean SinglePrintJobs;
     [property] string OutputURL;
     [property] boolean FileNameFromColumn;
     [property] string FileNamePrefix;
     [property, optional] string OutServerPassword;
     [property, optional] string InServerPassword;
     [property, optional] string Subject;
     [property, optional] string AddressFromColumn;
     [property, optional] boolean SendAsHTML;
     [property, optional] boolean SendAsAttachment;
     [property, optional] string MailBody;
     [property, optional] string AttachmentName;
     [property, optional] string AttachmentFilter;
     [property, optional] sequence< string > CopiesTo;
     [property, optional] sequence< string > BlindCopiesTo;
     [property, optional] boolean SaveAsSingleFile;
     [property, optional] string SaveFilter;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > PrintOptions;
    };
    published struct MailMergeEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::frame::XModel Model;
    };
    published constants MailMergeType {
     const short FILE = 2;
     const short MAIL = 3;
     const short PRINTER = 1;
     const short SHELL = 4;
    };
    published service NumberingLevel {
     [property] short Adjust;
     [property, optional] short ParentNumbering;
     [property] string Prefix;
     [property] string Suffix;
     [property, optional] string CharStyleName;
     /** @deprecated */ [property, optional] short BulletId;
     [property] string BulletChar;
     [property] string BulletFontName;
     [property, optional] ::com::sun::star::awt::FontDescriptor BulletFont;
     [property] string GraphicURL;
     [property, optional] ::com::sun::star::awt::XBitmap GraphicBitmap;
     [property, optional] ::com::sun::star::awt::Size GraphicSize;
     [property, optional] short VertOrient;
     [property, optional] short StartWith;
     [property] long LeftMargin;
     [property, optional] long SymbolTextDistance;
     [property] long FirstLineOffset;
     [property] short NumberingType;
     [property] string HeadingStyleName;
     [property, optional] string ParagraphStyleName;
     [property, optional] ::com::sun::star::util::Color BulletColor;
     [property, optional] short BulletRelSize;
     [property, optional] short PositionAndSpaceMode;
     [property, optional] short LabelFollowedBy;
     [property, optional] long ListtabStopPosition;
     [property, optional] long FirstLineIndent;
     [property, optional] long IndentAt;
    };
    published service NumberingRules {
     interface ::com::sun::star::container::XIndexReplace;
     [optional] interface ::com::sun::star::beans::XPropertySet;
     [property, optional] boolean IsAbsoluteMargins;
     [property, optional] boolean IsAutomatic;
     [property, optional] boolean IsContinuousNumbering;
     [property, optional, readonly] string Name;
     [property, optional] boolean NumberingIsOutline;
     [property, optional] short NumberingType;
     [property, optional, readonly] string DefaultListId;
    };
    published service NumberingStyle {
     service ::com::sun::star::style::Style;
     service ::com::sun::star::text::NumberingRules;
    };
    published service ObjectIndex {
     service ::com::sun::star::text::BaseIndex;
     [property, optional] boolean CreateFromStarMath;
     [property, optional] boolean CreateFromStarImage;
     [property, optional] boolean CreateFromStarChart;
     [property, optional] boolean CreateFromStarCalc;
     [property, optional] boolean CreateFromStarDraw;
     [property, optional] boolean CreateFromOtherEmbeddedObjects;
    };
    published service PageFootnoteInfo {
     [property] long FootnoteHeight;
     [property] long FootnoteSeparatorLineWidth;
     [property] long FootnoteTopDistance;
     [property] long FootnoteBottomDistance;
     [property] short FootnoteSeparatorLineWidthPercent;
     [property] ::com::sun::star::text::HorizontalAdjust FootnoteSeparatorLineAdjust;
     [property] short FootnoteSeparatorLinePenWidth;
    };
    published enum PageNumberType {
     PREV = 0,
     CURRENT = 1,
     NEXT = 2
    };
    published service PagePrintSettings {
     [property] short PageRows;
     [property] short PageColumns;
     [property] long LeftMargin;
     [property] long RightMargin;
     [property] long TopMargin;
     [property] long BottomMargin;
     [property] long HoriMargin;
     [property] long VertMargin;
     [property] boolean IsLandscape;
    };
    published struct TableColumnSeparator {
     short Position;
     boolean IsVisible;
    };
    published interface XTextTableCursor;
    published interface XTextTable {
     interface ::com::sun::star::text::XTextContent;
     void initialize([in] long nRows, [in] long nColumns);
     ::com::sun::star::table::XTableRows getRows();
     ::com::sun::star::table::XTableColumns getColumns();
     ::com::sun::star::table::XCell getCellByName([in] string aCellName);
     sequence< string > getCellNames();
     ::com::sun::star::text::XTextTableCursor createCursorByCellName([in] string aCellName);
    };
    published service TextTable {
     service ::com::sun::star::text::TextContent;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::text::XTextTable;
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::table::XCellRange;
     interface ::com::sun::star::chart::XChartDataArray;
     interface ::com::sun::star::table::XAutoFormattable;
     interface ::com::sun::star::util::XSortable;
     [optional] interface ::com::sun::star::sheet::XCellRangeData;
     [property] ::com::sun::star::style::BreakType BreakType;
     [property] long LeftMargin;
     [property] long RightMargin;
     [property] short HoriOrient;
     [property] boolean KeepTogether;
     [property] boolean Split;
     [property] short PageNumberOffset;
     [property] string PageDescName;
     [property] short RelativeWidth;
     [property] boolean IsWidthRelative;
     [property] boolean RepeatHeadline;
     [property, optional] long HeaderRowCount;
     [property] ::com::sun::star::table::ShadowFormat ShadowFormat;
     [property] long TopMargin;
     [property] long BottomMargin;
     [property] boolean BackTransparent;
     [property] long Width;
     [property] boolean ChartRowAsLabel;
     [property] boolean ChartColumnAsLabel;
     [property] ::com::sun::star::table::TableBorder TableBorder;
     [property] sequence< ::com::sun::star::text::TableColumnSeparator > TableColumnSeparators;
     [property] short TableColumnRelativeSum;
     [property] ::com::sun::star::util::Color BackColor;
     [property] string BackGraphicURL;
     [property] string BackGraphicFilter;
     [property] ::com::sun::star::style::GraphicLocation BackGraphicLocation;
     [property, optional] boolean CollapsingBorders;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > TableInteropGrabBag;
    };
    published service Paragraph {
     service ::com::sun::star::text::TextContent;
     [optional] service ::com::sun::star::style::ParagraphProperties;
     [optional] service ::com::sun::star::style::ParagraphPropertiesAsian;
     [optional] service ::com::sun::star::style::ParagraphPropertiesComplex;
     [optional] service ::com::sun::star::style::CharacterProperties;
     [optional] service ::com::sun::star::style::CharacterPropertiesAsian;
     [optional] service ::com::sun::star::style::CharacterPropertiesComplex;
     [optional] service ::com::sun::star::text::TextTable;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::beans::XPropertyState;
     interface ::com::sun::star::container::XEnumerationAccess;
     [optional] interface ::com::sun::star::beans::XTolerantMultiPropertySet;
    };
    published service ParagraphEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published constants ParagraphVertAlign {
     const short AUTOMATIC = 0;
     const short BASELINE = 1;
     const short BOTTOM = 4;
     const short CENTER = 3;
     const short TOP = 2;
    };
    published constants PlaceholderType {
     const short GRAPHIC = 3;
     const short OBJECT = 4;
     const short TABLE = 1;
     const short TEXT = 0;
     const short TEXTFRAME = 2;
    };
    published constants PositionAndSpaceMode {
     const short LABEL_ALIGNMENT = 1;
     const short LABEL_WIDTH_AND_POSITION = 0;
    };
    published service TextPortion {
     service ::com::sun::star::text::TextRange;
     [optional] interface ::com::sun::star::container::XContentEnumerationAccess;
     [optional] interface ::com::sun::star::beans::XTolerantMultiPropertySet;
     [property, readonly] string TextPortionType;
     /** @deprecated */ [property, readonly] short ControlCharacter;
     [property, optional, readonly] ::com::sun::star::text::XTextContent Bookmark;
     [property, optional, readonly] ::com::sun::star::text::XTextContent DocumentIndexMark;
     [property, optional, readonly] ::com::sun::star::text::XTextContent ReferenceMark;
     [property, optional, readonly] ::com::sun::star::text::XFootnote Footnote;
     [property, optional, readonly] ::com::sun::star::text::XTextField TextField;
     [property, optional, readonly] ::com::sun::star::text::XTextContent InContentMetadata;
     [property, optional, readonly] boolean IsCollapsed;
     [property, optional, readonly] boolean IsStart;
    };
    published service RedlinePortion {
     service ::com::sun::star::text::TextPortion;
     [property, readonly] string RedlineAuthor;
     [property, readonly] ::com::sun::star::util::DateTime RedlineDateTime;
     [property, readonly] string RedlineComment;
     [property, readonly] string RedlineType;
     [property, readonly] ::com::sun::star::beans::PropertyValues RedlineSuccessorData;
     [property, readonly] string RedlineIdentifier;
     [property, readonly] boolean IsInHeaderFooter;
     [property, readonly] ::com::sun::star::text::XText RedlineText;
     [property, readonly] boolean MergeLastPara;
    };
    published constants ReferenceFieldPart {
     const short CATEGORY_AND_NUMBER = 5;
     const short CHAPTER = 1;
     const short NUMBER = 8;
     const short NUMBER_FULL_CONTEXT = 10;
     const short NUMBER_NO_CONTEXT = 9;
     const short ONLY_CAPTION = 6;
     const short ONLY_SEQUENCE_NUMBER = 7;
     const short PAGE = 0;
     const short PAGE_DESC = 4;
     const short TEXT = 2;
     const short UP_DOWN = 3;
    };
    published constants ReferenceFieldSource {
     const short BOOKMARK = 2;
     const short ENDNOTE = 4;
     const short FOOTNOTE = 3;
     const short REFERENCE_MARK = 0;
     const short SEQUENCE_FIELD = 1;
    };
    published service ReferenceMark {
     interface ::com::sun::star::text::XTextContent;
     interface ::com::sun::star::container::XNamed;
    };
    published service ReferenceMarks {
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XNameAccess;
    };
    published constants RelOrientation {
     const short CHAR = 2;
     const short FRAME = 0;
     const short FRAME_LEFT = 5;
     const short FRAME_RIGHT = 6;
     const short PAGE_FRAME = 7;
     const short PAGE_LEFT = 3;
     const short PAGE_PRINT_AREA = 8;
     const short PAGE_RIGHT = 4;
     const short PRINT_AREA = 1;
     const short TEXT_LINE = 9;
    };
    published enum RubyAdjust {
     LEFT = 0,
     CENTER = 1,
     RIGHT = 2,
     BLOCK = 3,
     INDENT_BLOCK = 4
    };
    published struct SectionFileLink {
     string FileURL;
     string FilterName;
    };
    published constants SetVariableType {
     const short FORMULA = 2;
     const short SEQUENCE = 1;
     const short STRING = 3;
     const short VAR = 0;
    };
    published service Shape {
     service ::com::sun::star::drawing::Shape;
     [property] short AnchorPageNo;
     [property] ::com::sun::star::text::XTextFrame AnchorFrame;
     [property, optional] ::com::sun::star::text::TextContentAnchorType AnchorType;
     [property] short HoriOrient;
     [property] long HoriOrientPosition;
     [property] short HoriOrientRelation;
     [property] short VertOrient;
     [property] long VertOrientPosition;
     [property] short VertOrientRelation;
     [property] long LeftMargin;
     [property] long RightMargin;
     [property] long TopMargin;
     [property] long BottomMargin;
     /** @deprecated */ [property] ::com::sun::star::text::WrapTextMode Surround;
     [property] boolean SurroundAnchorOnly;
     [property] boolean SurroundContour;
     [property] boolean ContourOutside;
     [property] boolean Opaque;
     [property] ::com::sun::star::text::XTextRange TextRange;
     [property, optional] short WrapInfluenceOnPosition;
     [property, optional, readonly] ::com::sun::star::drawing::HomogenMatrix3 TransformationInHoriL2R;
     [property, optional] short PositionLayoutDir;
     [property, optional, readonly] ::com::sun::star::awt::Point StartPositionInHoriL2R;
     [property, optional, readonly] ::com::sun::star::awt::Point EndPositionInHoriL2R;
    };
    published constants SizeType {
     const short FIX = 1;
     const short MIN = 2;
     const short VARIABLE = 0;
    };
    published service TableColumns {
     interface ::com::sun::star::table::XTableColumns;
    };
    published service TableIndex {
     service ::com::sun::star::text::BaseIndex;
     [property, optional] boolean CreateFromLabels;
     [property, optional] string LabelCategory;
     [property, optional] short LabelDisplayType;
    };
    published service TableRows {
     interface ::com::sun::star::table::XTableRows;
    };
    published constants TemplateDisplayFormat {
     const short AREA = 4;
     const short FULL = 0;
     const short NAME = 2;
     const short NAME_AND_EXT = 3;
     const short PATH = 1;
     const short TITLE = 5;
    };
    published struct TextColumn {
     long Width;
     long LeftMargin;
     long RightMargin;
    };
    published typedef sequence< ::com::sun::star::text::TextColumn > TextColumnSequence;
    published interface XTextColumns {
     interface ::com::sun::star::uno::XInterface;
     long getReferenceValue();
     short getColumnCount();
     void setColumnCount([in] short nColumns);
     sequence< ::com::sun::star::text::TextColumn > getColumns();
     void setColumns([in] sequence< ::com::sun::star::text::TextColumn > Columns);
    };
    published service TextColumns {
     interface ::com::sun::star::text::XTextColumns;
     [property, readonly] boolean IsAutomatic;
     [property] long AutomaticDistance;
     [property] long SeparatorLineWidth;
     [property] ::com::sun::star::util::Color SeparatorLineColor;
     [property] long SeparatorLineRelativeHeight;
     [property] ::com::sun::star::style::VerticalAlignment SeparatorLineVerticalAlignment;
     [property] boolean SeparatorLineIsOn;
     [property, optional] short SeparatorLineStyle;
    };
    published service TextContentCollection {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XContainer;
    };
    published interface XTextCursor {
     interface ::com::sun::star::text::XTextRange;
     void collapseToStart();
     void collapseToEnd();
     boolean isCollapsed();
     boolean goLeft([in] short nCount, [in] boolean bExpand);
     boolean goRight([in] short nCount, [in] boolean bExpand);
     void gotoStart([in] boolean bExpand);
     void gotoEnd([in] boolean bExpand);
     void gotoRange([in] ::com::sun::star::text::XTextRange xRange, [in] boolean bExpand);
    };
    published interface XParagraphCursor {
     interface ::com::sun::star::text::XTextCursor;
     boolean isStartOfParagraph();
     boolean isEndOfParagraph();
     boolean gotoStartOfParagraph([in] boolean bExpand);
     boolean gotoEndOfParagraph([in] boolean bExpand);
     boolean gotoNextParagraph([in] boolean bExpand);
     boolean gotoPreviousParagraph([in] boolean bExpand);
    };
    published interface XSentenceCursor {
     interface ::com::sun::star::text::XTextCursor;
     boolean isStartOfSentence();
     boolean isEndOfSentence();
     boolean gotoNextSentence([in] boolean Expand);
     boolean gotoPreviousSentence([in] boolean Expand);
     boolean gotoStartOfSentence([in] boolean Expand);
     boolean gotoEndOfSentence([in] boolean Expand);
    };
    published interface XWordCursor {
     interface ::com::sun::star::text::XTextCursor;
     boolean isStartOfWord();
     boolean isEndOfWord();
     boolean gotoNextWord([in] boolean bExpand);
     boolean gotoPreviousWord([in] boolean bExpand);
     boolean gotoEndOfWord([in] boolean bExpand);
     boolean gotoStartOfWord([in] boolean bExpand);
    };
    published service TextCursor {
     service ::com::sun::star::text::TextRange;
     interface ::com::sun::star::text::XTextCursor;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::beans::XPropertyState;
     interface ::com::sun::star::beans::XMultiPropertyStates;
     [optional] interface ::com::sun::star::text::XWordCursor;
     [optional] interface ::com::sun::star::text::XSentenceCursor;
     [optional] interface ::com::sun::star::text::XParagraphCursor;
     [optional] interface ::com::sun::star::document::XDocumentInsertable;
     [optional] interface ::com::sun::star::util::XSortable;
    };
    published service TextDocument {
     service ::com::sun::star::text::GenericTextDocument;
    };
    published interface XTextViewCursor;
    published interface XTextViewCursorSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::text::XTextViewCursor getViewCursor();
    };
   };
   module view {
    published service OfficeDocumentView {
     interface ::com::sun::star::view::XSelectionSupplier;
     [optional] interface ::com::sun::star::view::XViewSettingsSupplier;
     [optional] interface ::com::sun::star::view::XControlAccess;
    };
   };
   module text {
    published service TextDocumentView {
     service ::com::sun::star::view::OfficeDocumentView;
     interface ::com::sun::star::view::XViewSettingsSupplier;
     interface ::com::sun::star::text::XTextViewCursorSupplier;
     [optional] interface ::com::sun::star::beans::XPropertySet;
     [property, optional, readonly] long PageCount;
     [property, optional, readonly] long LineCount;
     [property, optional] boolean IsConstantSpellcheck;
     [property, optional] boolean IsHideSpellMarks;
    };
    published service TextEmbeddedObject {
     service ::com::sun::star::text::BaseFrame;
     interface ::com::sun::star::document::XEmbeddedObjectSupplier;
     [property] string CLSID;
     [property, maybevoid, readonly] ::com::sun::star::frame::XModel Model;
     [property, maybevoid, readonly] ::com::sun::star::lang::XComponent Component;
    };
    published service TextEmbeddedObjects {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XIndexAccess;
    };
    published service TextFieldEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published service TextFieldMaster {
     [optional] interface ::com::sun::star::beans::XPropertySet;
     [property, optional] string Name;
     [property, readonly] sequence< ::com::sun::star::text::XDependentTextField > DependentTextFields;
     [property, readonly] string InstanceName;
    };
    published service TextFieldMasters {
     interface ::com::sun::star::container::XNameAccess;
    };
    published service TextFields {
     interface ::com::sun::star::container::XEnumerationAccess;
     interface ::com::sun::star::util::XRefreshable;
    };
    published service TextFrames {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XIndexAccess;
     [optional] interface ::com::sun::star::container::XContainer;
    };
    published service TextGraphicObject {
     service ::com::sun::star::text::BaseFrame;
     [property] ::com::sun::star::container::XIndexContainer ImageMap;
     [property] boolean ContentProtected;
     [property] boolean SurroundContour;
     [property] boolean ContourOutside;
     [property, optional] ::com::sun::star::drawing::PointSequenceSequence ContourPolyPolygon;
     [property] ::com::sun::star::text::GraphicCrop GraphicCrop;
     [property] boolean HoriMirroredOnEvenPages;
     [property] boolean HoriMirroredOnOddPages;
     [property] boolean VertMirrored;
     [property] string GraphicURL;
     [property] string GraphicFilter;
     [property] ::com::sun::star::awt::Size ActualSize;
     [property] short AdjustLuminance;
     [property] short AdjustContrast;
     [property] short AdjustRed;
     [property] short AdjustGreen;
     [property] short AdjustBlue;
     [property] double Gamma;
     [property] boolean GraphicIsInverted;
     [property] short Transparency;
     [property] ::com::sun::star::drawing::ColorMode GraphicColorMode;
     [property, optional] ::com::sun::star::graphic::XGraphic Graphic;
    };
    published service TextGraphicObjects {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XIndexAccess;
    };
    published constants TextGridMode {
     const short LINES = 1;
     const short LINES_AND_CHARS = 2;
     const short NONE = 0;
    };
    published interface XPageCursor {
     interface ::com::sun::star::uno::XInterface;
     boolean jumpToFirstPage();
     boolean jumpToLastPage();
     boolean jumpToPage([in] short nPage);
     short getPage();
     boolean jumpToNextPage();
     boolean jumpToPreviousPage();
     boolean jumpToEndOfPage();
     boolean jumpToStartOfPage();
    };
    published service TextLayoutCursor {
     service ::com::sun::star::text::TextCursor;
     interface ::com::sun::star::text::XPageCursor;
    };
    published service TextPageStyle {
     [property] boolean RegisterModeActive;
     [property] string RegisterParagraphStyle;
     [property] ::com::sun::star::text::XTextColumns TextColumns;
     [property] ::com::sun::star::text::XText HeaderText;
     [property] ::com::sun::star::text::XText HeaderTextLeft;
     [property] ::com::sun::star::text::XText HeaderTextRight;
     [property, optional] ::com::sun::star::text::XText HeaderTextFirst;
     [property] ::com::sun::star::text::XText FooterText;
     [property] ::com::sun::star::text::XText FooterTextLeft;
     [property] ::com::sun::star::text::XText FooterTextRight;
     [property, optional] ::com::sun::star::text::XText FooterTextFirst;
     [property] long FootnoteHeight;
     [property] short FootnoteLineWeight;
     [property] ::com::sun::star::util::Color FootnoteLineColor;
     [property] byte FootnoteLineRelativeWidth;
     [property] short FootnoteLineAdjust;
     [property] long FootnoteLineTextDistance;
     [property] long FootnoteLineDistance;
    };
    published service TextPortionEnumeration {
     interface ::com::sun::star::container::XEnumeration;
    };
    published service TextRanges {
     interface ::com::sun::star::container::XIndexAccess;
    };
    published interface XTextSection {
     interface ::com::sun::star::text::XTextContent;
     ::com::sun::star::text::XTextSection getParentSection();
     sequence< ::com::sun::star::text::XTextSection > getChildSections();
    };
    published service TextSection {
     service ::com::sun::star::text::TextContent;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::text::XTextSection;
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::beans::XPropertyState;
     [property] string Condition;
     [property] boolean IsVisible;
     [property] boolean IsProtected;
     [property] ::com::sun::star::text::SectionFileLink FileLink;
     [property] string LinkRegion;
     [property] string DDECommandType;
     [property] string DDECommandFile;
     [property] string DDECommandElement;
     [property] string BackGraphicURL;
     [property] string BackGraphicFilter;
     [property] ::com::sun::star::style::GraphicLocation BackGraphicLocation;
     [property] boolean FootnoteIsCollectAtTextEnd;
     [property] boolean FootnoteIsRestartNumbering;
     [property] short FootnoteRestartNumberingAt;
     [property] boolean FootnoteIsOwnNumbering;
     [property] short FootnoteNumberingType;
     [property] string FootnoteNumberingPrefix;
     [property] string FootnoteNumberingSuffix;
     [property] boolean EndnoteIsCollectAtTextEnd;
     [property] boolean EndnoteIsRestartNumbering;
     [property] short EndnoteRestartNumberingAt;
     [property] boolean EndnoteIsOwnNumbering;
     [property] short EndnoteNumberingType;
     [property] string EndnoteNumberingPrefix;
     [property] string EndnoteNumberingSuffix;
     [property] boolean IsAutomaticUpdate;
     [property] ::com::sun::star::text::XTextColumns TextColumns;
     [property, optional] long SectionLeftMargin;
     [property, optional] long SectionRightMargin;
    };
    published service TextSections {
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XNameAccess;
    };
    /** @deprecated */ published service TextSortDescriptor {
     service ::com::sun::star::util::SortDescriptor;
     [property] char Delimiter;
     [property] boolean IsSortInTable;
     [property] long SortRowOrColumnNo0;
     [property] boolean IsSortNumeric0;
     [property] boolean IsSortAscending0;
     [property] long SortRowOrColumnNo1;
     [property] boolean IsSortNumeric1;
     [property] boolean IsSortAscending1;
     [property] long SortRowOrColumnNo2;
     [property] boolean IsSortNumeric2;
     [property] boolean IsSortAscending2;
    };
    published service TextSortDescriptor2 {
     service ::com::sun::star::table::TableSortDescriptor2;
     [property] boolean IsSortInTable;
     [property] char Delimiter;
    };
    /** @deprecated */ published service TextSortable {
     interface ::com::sun::star::util::XSortable;
    };
    published interface XTextTableCursor {
     interface ::com::sun::star::uno::XInterface;
     string getRangeName();
     boolean gotoCellByName([in] string aCellName, [in] boolean bExpand);
     boolean goLeft([in] short nCount, [in] boolean bExpand);
     boolean goRight([in] short nCount, [in] boolean bExpand);
     boolean goUp([in] short nCount, [in] boolean bExpand);
     boolean goDown([in] short nCount, [in] boolean bExpand);
     void gotoStart([in] boolean bExpand);
     void gotoEnd([in] boolean bExpand);
     boolean mergeRange();
     boolean splitRange([in] short nCount, [in] boolean bHorizontal);
    };
    published service TextTableCursor {
     service ::com::sun::star::style::CharacterProperties;
     service ::com::sun::star::style::CharacterPropertiesAsian;
     service ::com::sun::star::style::CharacterPropertiesComplex;
     service ::com::sun::star::style::ParagraphProperties;
     [optional] service ::com::sun::star::xml::UserDefinedAttributesSupplier;
     interface ::com::sun::star::text::XTextTableCursor;
     interface ::com::sun::star::beans::XPropertySet;
    };
    published service TextTableRow {
     interface ::com::sun::star::beans::XPropertySet;
     [property] ::com::sun::star::util::Color BackColor;
     [property] boolean BackTransparent;
     [property] string BackGraphicURL;
     [property] string BackGraphicFilter;
     [property] ::com::sun::star::style::GraphicLocation BackGraphicLocation;
     [property] sequence< ::com::sun::star::text::TableColumnSeparator > TableColumnSeparators;
     [property] long Height;
     [property] boolean IsAutoHeight;
     [property, maybevoid, optional] boolean IsSplitAllowed;
     [property, optional] sequence< ::com::sun::star::beans::PropertyValue > RowInteropGrabBag;
    };
    published service TextTables {
     interface ::com::sun::star::container::XIndexAccess;
     interface ::com::sun::star::container::XNameAccess;
    };
   };
   module view {
    published interface XScreenCursor {
     interface ::com::sun::star::uno::XInterface;
     boolean screenDown();
     boolean screenUp();
    };
   };
   module text {
    published service TextViewCursor {
     service ::com::sun::star::text::TextLayoutCursor;
     interface ::com::sun::star::view::XScreenCursor;
    };
    /** @deprecated */ published constants TimeDisplayFormat {
     const short HHMM = 1;
     const short HHMMAMPM = 4;
     const short HHMMSS = 2;
     const short HHMMSS00 = 3;
     const short HHMMSS00AMPM = 6;
     const short HHMMSSAMPM = 5;
     const short STANDARD = 0;
    };
    published constants UserDataPart {
     const short CITY = 7;
     const short COMPANY = 0;
     const short COUNTRY = 5;
     const short EMAIL = 13;
     const short FAX = 12;
     const short FIRSTNAME = 1;
     const short NAME = 2;
     const short PHONE_COMPANY = 11;
     const short PHONE_PRIVATE = 10;
     const short POSITION = 9;
     const short SHORTCUT = 3;
     const short STATE = 14;
     const short STREET = 4;
     const short TITLE = 8;
     const short ZIP = 6;
    };
    published interface XDocumentIndexMark;
    published service UserDefinedIndex {
     service ::com::sun::star::text::BaseIndex;
     [property, optional] ::com::sun::star::container::XIndexReplace LevelParagraphStyles;
     [property, optional] boolean CreateFromMarks;
     [property, optional] boolean UseLevelFromSource;
     [property, optional] boolean CreateFromTables;
     [property, optional] boolean CreateFromTextFrames;
     [property, optional] boolean CreateFromGraphicObjects;
     [property, optional] boolean CreateFromEmbeddedObjects;
     [property, readonly] sequence< ::com::sun::star::text::XDocumentIndexMark > DocumentIndexMarks;
    };
    published constants UserFieldFormat {
     const short NUM = 2;
     const short SYSTEM = 0;
     const short TEXT = 1;
    };
    published service UserIndex {
     service ::com::sun::star::text::BaseIndex;
     [property, optional] ::com::sun::star::container::XIndexReplace LevelParagraphStyles;
     [property, optional] boolean CreateFromMarks;
     [property, optional] boolean UseLevelFromSource;
     [property, optional] boolean CreateFromTables;
     [property, optional] boolean CreateFromTextFrames;
     [property, optional] boolean CreateFromGraphicObjects;
     [property, optional] boolean CreateFromEmbeddedObjects;
     [property] string UserIndexName;
    };
    published service UserIndexMark {
     service ::com::sun::star::text::TextContent;
     service ::com::sun::star::text::BaseIndexMark;
     [property] string UserIndexName;
    };
    published constants VertOrientation {
     const short BOTTOM = 3;
     const short CENTER = 2;
     const short CHAR_BOTTOM = 6;
     const short CHAR_CENTER = 5;
     const short CHAR_TOP = 4;
     const short LINE_BOTTOM = 9;
     const short LINE_CENTER = 8;
     const short LINE_TOP = 7;
     const short NONE = 0;
     const short TOP = 1;
    };
    published struct VertOrientationFormat {
     long YPos;
     short VerticalOrientation;
     short VerticalRelation;
    };
    published service ViewSettings {
     interface ::com::sun::star::beans::XPropertySet;
     [property] boolean ShowAnnotations;
     [property] boolean ShowBreaks;
     [property] boolean ShowDrawings;
     [property] boolean ShowFieldCommands;
     [property] boolean ShowFootnoteBackground;
     [property] boolean ShowGraphics;
     [property] boolean ShowHiddenParagraphs;
     [property] boolean ShowHiddenText;
     [property] boolean ShowRulers;
     [property] boolean ShowHoriRuler;
     [property] boolean ShowHoriScrollBar;
     [property] boolean ShowIndexMarkBackground;
     [property] boolean ShowParaBreaks;
     [property] boolean ShowProtectedSpaces;
     [property] boolean ShowSoftHyphens;
     [property] boolean ShowSpaces;
     [property] boolean ShowTableBoundaries;
     [property] boolean ShowTables;
     [property] boolean ShowTabstops;
     [property] boolean ShowTextBoundaries;
     [property] boolean ShowTextFieldBackground;
     [property] boolean ShowVertRuler;
     [property] boolean ShowVertScrollBar;
     [property] boolean SmoothScrolling;
     [property] boolean IsVertRulerRightAligned;
     [property] boolean ShowOnlineLayout;
     [property] short ZoomType;
     [property] short ZoomValue;
     [property, optional] boolean IsExecuteHyperlinks;
     [property, optional] boolean IsRasterVisible;
     [property, optional] boolean IsSnapToRaster;
     [property, optional] long RasterSubdivisionX;
     [property, optional] long RasterSubdivisionY;
     [property, optional] long RasterResolutionX;
     [property, optional] long RasterResolutionY;
     [property, optional] boolean ShowHiddenCharacters;
     [property, optional] boolean ShowNonprintingCharacters;
     [property, optional] long HorizontalRulerMetric;
     [property, optional] long VerticalRulerMetric;
     [property, optional] boolean ShowContentTips;
     [property, optional] boolean ShowScrollBarTips;
    };
    published constants WritingMode2 {
     const short CONTEXT = 4;
     const short LR_TB = 0;
     /** @deprecated */ const short PAGE = 4;
     const short RL_TB = 1;
     const short TB_LR = 3;
     const short TB_RL = 2;
    };
    published interface XBookmarkInsertTool {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::text::XTextContent insertNewBookmark([in] ::com::sun::star::text::XTextRange xTextRange, [in] string aName);
    };
    published interface XDocumentIndexMark {
     interface ::com::sun::star::text::XTextContent;
     string getMarkEntry();
     void setMarkEntry([in] string aIndexEntry);
    };
    published interface XEndnotesSettingsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getEndnotesSettings();
    };
    published interface XFootnotesSettingsSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getFootnotesSettings();
    };
    published interface XLineNumberingProperties {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getLineNumberingProperties();
    };
    published interface XMailMergeListener {
     interface ::com::sun::star::uno::XInterface;
     void notifyMailMergeEvent([in] ::com::sun::star::text::MailMergeEvent aEvent);
    };
    published interface XNumberingFormatter {
     interface ::com::sun::star::uno::XInterface;
     string makeNumberingString([in] sequence< ::com::sun::star::beans::PropertyValue > aProperties, [in] ::com::sun::star::lang::Locale aLocale) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XNumberingRulesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getNumberingRules();
    };
    published interface XNumberingTypeInfo {
     interface ::com::sun::star::uno::XInterface;
     sequence< short > getSupportedNumberingTypes();
     short getNumberingType([in] string NumberingIdentifier);
     boolean hasNumberingType([in] string NumberingIdentifier);
     string getNumberingIdentifier([in] short NumberingType);
    };
    published interface XRedline {
     interface ::com::sun::star::uno::XInterface;
     void makeRedline([in] string RedlineType, [in] ::com::sun::star::beans::PropertyValues RedlineProperties) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    /** @deprecated */ published interface XRelativeTextContentRemove {
     interface ::com::sun::star::uno::XInterface;
     void removeTextContentBefore([in] ::com::sun::star::text::XTextContent xSuccessor) raises (::com::sun::star::lang::IllegalArgumentException);
     void removeTextContentAfter([in] ::com::sun::star::text::XTextContent xPredecessor) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XRubySelection {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::beans::PropertyValues > getRubyList([in] boolean Automatic);
     void setRubyList([in] sequence< ::com::sun::star::beans::PropertyValues > RubyList, [in] boolean Automatic);
    };
    published interface XTextCopy {
     interface ::com::sun::star::uno::XInterface;
     void copyText([in] ::com::sun::star::text::XTextCopy xSource);
    };
    published interface XTextShapesSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::container::XIndexAccess getShapes();
    };
    published interface XTextViewCursor {
     interface ::com::sun::star::text::XTextCursor;
     boolean isVisible();
     void setVisible([in] boolean bVisible);
     ::com::sun::star::awt::Point getPosition();
    };
    module fieldmaster {
     published service Bibliography {
      service ::com::sun::star::text::TextFieldMaster;
      [property] boolean IsNumberEntries;
      [property] boolean IsSortByPosition;
      [property] string BracketBefore;
      [property] string BracketAfter;
      [property] sequence< ::com::sun::star::beans::PropertyValues > SortKeys;
      [property] ::com::sun::star::lang::Locale Locale;
      [property] string SortAlgorithm;
     };
     published service DDE {
      service ::com::sun::star::text::TextFieldMaster;
      [property] string DDECommandElement;
      [property] string DDECommandFile;
      [property] string DDECommandType;
      [property] boolean IsAutomaticUpdate;
      [property, optional] string Content;
     };
     published service Database {
      service ::com::sun::star::text::TextFieldMaster;
      [property] string DataBaseName;
      [property] long CommandType;
      [property] string DataTableName;
      [property] string DataColumnName;
      [property, optional] string DataBaseURL;
      [property, optional] string DataBaseResource;
      [property, optional] string Name;
     };
     published service SetExpression {
      service ::com::sun::star::text::TextFieldMaster;
      [property] byte ChapterNumberingLevel;
      [property] string NumberingSeparator;
      [property] short SubType;
     };
     published service User {
      service ::com::sun::star::text::TextFieldMaster;
      [property] boolean IsExpression;
      [property] double Value;
      [property] string Content;
     };
    };
    module textfield {
     published service Annotation {
      service ::com::sun::star::text::TextField;
      [property] string Author;
      [property, optional] string Initials;
      [property, optional] string Name;
      [property] string Content;
      [property] ::com::sun::star::util::Date Date;
      [property, optional] ::com::sun::star::util::DateTime DateTimeValue;
     };
     published service Author {
      service ::com::sun::star::text::TextField;
      [property, optional] boolean IsFixed;
      [property, optional] string Content;
      [property, optional] short AuthorFormat;
      [property, optional] string CurrentPresentation;
      [property, optional] boolean FullName;
     };
     published service Bibliography {
      service ::com::sun::star::text::DependentTextField;
      [property] sequence< ::com::sun::star::beans::PropertyValue > Fields;
     };
     published service Chapter {
      service ::com::sun::star::text::TextField;
      [property] short ChapterFormat;
      [property] byte Level;
     };
     published service CharacterCount {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
     };
     published service CombinedCharacters {
      service ::com::sun::star::text::TextField;
      [property] string Content;
     };
     published service ConditionalText {
      service ::com::sun::star::text::TextField;
      [property] string TrueContent;
      [property] string FalseContent;
      [property] string Condition;
      [property] boolean IsConditionTrue;
      [property, optional] string CurrentPresentation;
     };
     published service DDE {
      service ::com::sun::star::text::TextField;
     };
     published service Database {
      service ::com::sun::star::text::DependentTextField;
      [property] string Content;
      [property] string CurrentPresentation;
      [property] boolean DataBaseFormat;
      [property] long NumberFormat;
     };
     published service DatabaseName {
      service ::com::sun::star::text::DependentTextField;
      [property] string DataBaseName;
      [property] long DataCommandType;
      [property] string DataTableName;
      [property, optional] string DataBaseURL;
      [property, optional] string DataBaseResource;
     };
     published service DatabaseNextSet {
      service ::com::sun::star::text::DependentTextField;
      [property] string DataBaseName;
      [property] long DataCommandType;
      [property] string DataTableName;
      [property] string Condition;
      [property, optional] string DataBaseURL;
      [property, optional] string DataBaseResource;
     };
     published service DatabaseNumberOfSet {
      service ::com::sun::star::text::DependentTextField;
      [property] string DataBaseName;
      [property] long DataCommandType;
      [property] string DataTableName;
      [property] string Condition;
      [property] long SetNumber;
      [property, optional] string DataBaseURL;
      [property, optional] string DataBaseResource;
     };
     published service DatabaseSetNumber {
      service ::com::sun::star::text::DependentTextField;
      [property] string DataBaseName;
      [property] long DataCommandType;
      [property] string DataTableName;
      [property] short NumberingType;
      [property] long SetNumber;
      [property, optional] string DataBaseURL;
      [property, optional] string DataBaseResource;
     };
     published service DateTime {
      service ::com::sun::star::text::TextField;
      [property, optional] boolean IsFixed;
      [property] boolean IsDate;
      [property, optional] ::com::sun::star::util::DateTime DateTimeValue;
      [property, optional] long NumberFormat;
      /** @deprecated */ [property, optional] short DateTimeFormat;
      [property, optional] long Adjust;
      [property, optional] boolean IsFixedLanguage;
     };
     published service DropDown {
      service ::com::sun::star::text::TextField;
      [property] string Name;
      [property] sequence< string > Items;
      [property] string SelectedItem;
     };
     published service EmbeddedObjectCount {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
     };
     published service ExtendedUser {
      service ::com::sun::star::text::TextField;
      [property] string Content;
      [property] string CurrentPresentation;
      [property] boolean IsFixed;
      [property] short UserDataType;
     };
     published service FileName {
      service ::com::sun::star::text::TextField;
      [property] string CurrentPresentation;
      [property] short FileFormat;
      [property] boolean IsFixed;
     };
     published service GetExpression {
      service ::com::sun::star::text::TextField;
      [property] string Content;
      [property] string CurrentPresentation;
      [property] long NumberFormat;
      [property] boolean IsShowFormula;
      [property] short SubType;
      [property, readonly] double Value;
      [property] short VariableSubtype;
      [property, optional] boolean IsFixedLanguage;
     };
     published service GetReference {
      service ::com::sun::star::text::TextField;
      [property] string CurrentPresentation;
      [property] short ReferenceFieldSource;
      [property] string SourceName;
      [property] short ReferenceFieldPart;
      [property] short SequenceNumber;
     };
     published service GraphicObjectCount {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
     };
     published service HiddenParagraph {
      service ::com::sun::star::text::TextField;
      [property] string Condition;
      [property] boolean IsHidden;
     };
     published service HiddenText {
      service ::com::sun::star::text::TextField;
      [property] string Content;
      [property] string Condition;
      [property] boolean IsHidden;
     };
     published service Input {
      service ::com::sun::star::text::TextField;
      [property, optional] string Content;
      [property, optional] string Hint;
      [property, optional] string Help;
     };
     published service InputUser {
      service ::com::sun::star::text::TextField;
      [property, optional] string Content;
      [property, optional] string Hint;
     };
     published service JumpEdit {
      service ::com::sun::star::text::TextField;
      [property] string Hint;
      [property] string PlaceHolder;
      [property] short PlaceHolderType;
     };
     published service Macro {
      service ::com::sun::star::text::TextField;
      [property] string Hint;
      [property] string MacroName;
      [property] string MacroLibrary;
     };
     published service PageCount {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
     };
     published service PageNumber {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
      [property] short Offset;
      [property] ::com::sun::star::text::PageNumberType SubType;
      [property] string UserText;
     };
     published service ParagraphCount {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
     };
     published service ReferencePageGet {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
     };
     published service ReferencePageSet {
      service ::com::sun::star::text::TextField;
      [property] short Offset;
      [property] boolean NameOn;
     };
     published service Script {
      service ::com::sun::star::text::TextField;
      [property] string Content;
      [property] string ScriptType;
      [property] boolean URLContent;
     };
     published service SetExpression {
      service ::com::sun::star::text::DependentTextField;
      [property] string Content;
      [property] string CurrentPresentation;
      [property] long NumberFormat;
      [property] short NumberingType;
      [property] boolean IsShowFormula;
      [property] string Hint;
      [property] boolean IsInput;
      [property] boolean IsVisible;
      [property] short SequenceValue;
      [property] short SubType;
      [property] double Value;
      [property, readonly] string VariableName;
      [property, optional] boolean IsFixedLanguage;
     };
     published service TableCount {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
     };
     /** @deprecated */ published service TableFormula {
      service ::com::sun::star::text::TextField;
      [property] string Formula;
      [property] string CurrentPresentation;
      [property] boolean IsShowFormula;
      [property] short NumberFormat;
     };
     published service TemplateName {
      service ::com::sun::star::text::TextField;
      [property] short FileFormat;
     };
     published service URL {
      service ::com::sun::star::text::TextField;
      [property] short Format;
      [property] string URL;
      [property] string Representation;
      [property] string TargetFrame;
     };
     published service User {
      service ::com::sun::star::text::DependentTextField;
      [property, optional] boolean IsShowFormula;
      [property, optional] boolean IsVisible;
      [property, optional] long NumberFormat;
      [property, optional] boolean IsFixedLanguage;
     };
     published service WordCount {
      service ::com::sun::star::text::TextField;
      [property] short NumberingType;
     };
     module docinfo {
      published service ChangeAuthor {
       service ::com::sun::star::text::TextField;
       [property] string Author;
       [property] string CurrentPresentation;
       [property, optional] boolean IsFixed;
      };
      published service ChangeDateTime {
       service ::com::sun::star::text::TextField;
       [property] string CurrentPresentation;
       [property, optional] boolean IsFixed;
       [property] boolean IsDate;
       [property] double DateTimeValue;
       [property] long NumberFormat;
       [property, optional] boolean IsFixedLanguage;
      };
      published service CreateAuthor {
       service ::com::sun::star::text::TextField;
       [property] string Author;
       [property] string CurrentPresentation;
       [property, optional] boolean IsFixed;
      };
      published service CreateDateTime {
       service ::com::sun::star::text::TextField;
       [property] string CurrentPresentation;
       [property, optional] boolean IsFixed;
       [property] boolean IsDate;
       [property] double DateTimeValue;
       [property] long NumberFormat;
       [property, optional] boolean IsFixedLanguage;
      };
      published service Custom {
       service ::com::sun::star::text::TextField;
       [property] string Name;
       [property] string CurrentPresentation;
       [property] boolean IsFixed;
      };
      published service Description {
       service ::com::sun::star::text::TextField;
       [property] string Content;
       [property] string CurrentPresentation;
       [property] boolean IsFixed;
      };
      published service EditTime {
       service ::com::sun::star::text::TextField;
       [property] string CurrentPresentation;
       [property, optional] boolean IsFixed;
       [property] double DateTimeValue;
       [property] long NumberFormat;
       [property, optional] boolean IsFixedLanguage;
      };
      published service Keywords {
       service ::com::sun::star::text::TextField;
       [property] string Content;
       [property] string CurrentPresentation;
       [property] boolean IsFixed;
      };
      published service PrintAuthor {
       service ::com::sun::star::text::TextField;
       [property] string Author;
       [property] string CurrentPresentation;
       [property, optional] boolean IsFixed;
      };
      published service PrintDateTime {
       service ::com::sun::star::text::TextField;
       [property] string CurrentPresentation;
       [property, optional] boolean IsFixed;
       [property] boolean IsDate;
       [property] double DateTimeValue;
       [property] long NumberFormat;
       [property, optional] boolean IsFixedLanguage;
      };
      published service Revision {
       service ::com::sun::star::text::TextField;
       [property] string Content;
       [property] string CurrentPresentation;
       [property] boolean IsFixed;
      };
      published service Subject {
       service ::com::sun::star::text::TextField;
       [property] string Content;
       [property] string CurrentPresentation;
       [property] boolean IsFixed;
      };
      published service Title {
       service ::com::sun::star::text::TextField;
       [property] string Content;
       [property] string CurrentPresentation;
       [property] boolean IsFixed;
      };
     };
    };
   };
   module ucb {
    published exception AlreadyInitializedException: ::com::sun::star::uno::Exception {
    };
    published interface XAnyCompare;
    published interface XAnyCompareFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XAnyCompare createAnyCompareByName([in] string PropertyName);
    };
    published service AnyCompareFactory: ::com::sun::star::ucb::XAnyCompareFactory {
     createWithLocale([in] ::com::sun::star::lang::Locale aLocale);
    };
    published exception AuthenticationRequest: ::com::sun::star::task::ClassifiedInteractionRequest {
     string ServerName;
     string Diagnostic;
     boolean HasRealm;
     string Realm;
     boolean HasUserName;
     string UserName;
     boolean HasPassword;
     string Password;
     boolean HasAccount;
     string Account;
    };
    published interface XContentIdentifier;
    published interface XContentAccess {
     interface ::com::sun::star::uno::XInterface;
     string queryContentIdentifierString();
     ::com::sun::star::ucb::XContentIdentifier queryContentIdentifier();
     ::com::sun::star::ucb::XContent queryContent();
    };
    published service ContentResultSet {
     service ::com::sun::star::sdbc::ResultSet;
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::sdbc::XResultSetMetaDataSupplier;
     interface ::com::sun::star::sdbc::XResultSet;
     interface ::com::sun::star::sdbc::XRow;
     interface ::com::sun::star::sdbc::XCloseable;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::ucb::XContentAccess;
     [property, optional] long CursorTravelMode;
     [property, readonly] long RowCount;
     [property, readonly] boolean IsRowCountFinal;
    };
    published service CachedContentResultSet {
     service ::com::sun::star::ucb::ContentResultSet;
     [property] long FetchSize;
     [property] long FetchDirection;
    };
    published interface XContentIdentifierMapping;
    published interface XCachedContentResultSetFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XResultSet createCachedContentResultSet([in] ::com::sun::star::sdbc::XResultSet xSource, [in] ::com::sun::star::ucb::XContentIdentifierMapping xMapping);
    };
    published service CachedContentResultSetFactory: ::com::sun::star::ucb::XCachedContentResultSetFactory;
    published struct FetchResult {
     sequence< any > Rows;
     long StartIndex;
     boolean Orientation;
     short FetchError;
    };
    published interface XFetchProvider {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::FetchResult fetch([in] long nRowStartPosition, [in] long nRowCount, [in] boolean bDirection);
    };
    published interface XFetchProviderForContentAccess {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::FetchResult fetchContentIdentifierStrings([in] long nRowStartPosition, [in] long nRowCount, [in] boolean bDirection);
     ::com::sun::star::ucb::FetchResult fetchContentIdentifiers([in] long nRowStartPosition, [in] long nRowCount, [in] boolean bDirection);
     ::com::sun::star::ucb::FetchResult fetchContents([in] long nRowStartPosition, [in] long nRowCount, [in] boolean bDirection);
    };
    published service CachedContentResultSetStub {
     service ::com::sun::star::ucb::ContentResultSet;
     interface ::com::sun::star::ucb::XFetchProvider;
     interface ::com::sun::star::ucb::XFetchProviderForContentAccess;
    };
    published interface XCachedContentResultSetStubFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::sdbc::XResultSet createCachedContentResultSetStub([in] ::com::sun::star::sdbc::XResultSet xSource);
    };
    published service CachedContentResultSetStubFactory: ::com::sun::star::ucb::XCachedContentResultSetStubFactory;
    published exception ListenerAlreadySetException: ::com::sun::star::uno::Exception {
    };
    published exception ServiceNotFoundException: ::com::sun::star::uno::Exception {
    };
    published interface XDynamicResultSetListener;
    published interface XDynamicResultSet {
     interface ::com::sun::star::lang::XComponent;
     ::com::sun::star::sdbc::XResultSet getStaticResultSet() raises (::com::sun::star::ucb::ListenerAlreadySetException);
     void setListener([in] ::com::sun::star::ucb::XDynamicResultSetListener Listener) raises (::com::sun::star::ucb::ListenerAlreadySetException);
     void connectToCache([in] ::com::sun::star::ucb::XDynamicResultSet Cache) raises (::com::sun::star::ucb::ListenerAlreadySetException, ::com::sun::star::ucb::AlreadyInitializedException, ::com::sun::star::ucb::ServiceNotFoundException);
     short getCapabilities();
    };
    published interface XSourceInitialization {
     interface ::com::sun::star::uno::XInterface;
     void setSource([in] ::com::sun::star::uno::XInterface Source) raises (::com::sun::star::ucb::AlreadyInitializedException);
    };
    published service CachedDynamicResultSet {
     interface ::com::sun::star::ucb::XDynamicResultSet;
     interface ::com::sun::star::ucb::XSourceInitialization;
    };
    published interface XContentIdentifierMapping;
    published interface XCachedDynamicResultSetFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XDynamicResultSet createCachedDynamicResultSet([in] ::com::sun::star::ucb::XDynamicResultSet SourceStub, [in] ::com::sun::star::ucb::XContentIdentifierMapping ContentIdentifierMapping);
    };
    published service CachedDynamicResultSetFactory: ::com::sun::star::ucb::XCachedDynamicResultSetFactory;
    published service CachedDynamicResultSetStub {
     interface ::com::sun::star::ucb::XDynamicResultSet;
     interface ::com::sun::star::ucb::XSourceInitialization;
    };
    published struct NumberedSortingInfo {
     long ColumnIndex;
     boolean Ascending;
    };
    published interface XCachedDynamicResultSetStubFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XDynamicResultSet createCachedDynamicResultSetStub([in] ::com::sun::star::ucb::XDynamicResultSet Source);
     void connectToCache([in] ::com::sun::star::ucb::XDynamicResultSet Source, [in] ::com::sun::star::ucb::XDynamicResultSet TargetCache, [in] sequence< ::com::sun::star::ucb::NumberedSortingInfo > SortingInfo, [in] ::com::sun::star::ucb::XAnyCompareFactory CompareFactory) raises (::com::sun::star::ucb::ListenerAlreadySetException, ::com::sun::star::ucb::AlreadyInitializedException);
    };
    published service CachedDynamicResultSetStubFactory: ::com::sun::star::ucb::XCachedDynamicResultSetStubFactory;
    published exception IllegalIdentifierException: ::com::sun::star::uno::Exception {
    };
    published interface XContentIdentifier;
    published interface XContentProvider {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContent queryContent([in] ::com::sun::star::ucb::XContentIdentifier Identifier) raises (::com::sun::star::ucb::IllegalIdentifierException);
     long compareContentIds([in] ::com::sun::star::ucb::XContentIdentifier Id1, [in] ::com::sun::star::ucb::XContentIdentifier Id2);
    };
    published interface XProgressHandler;
    published service CommandEnvironment: ::com::sun::star::ucb::XCommandEnvironment {
     create([in] ::com::sun::star::task::XInteractionHandler InteractionHandler, [in] ::com::sun::star::ucb::XProgressHandler ProgressHandler);
    };
    published struct CommandInfo {
     string Name;
     long Handle;
     type ArgType;
    };
    published constants CommandInfoChange {
     const long COMMAND_INSERTED = 0;
     const long COMMAND_REMOVED = 1;
    };
    published struct CommandInfoChangeEvent: ::com::sun::star::lang::EventObject {
     string Name;
     long Handle;
     long Reason;
    };
    published constants ConnectionMode {
     const short OFFLINE = 1;
     const short ONLINE = 0;
    };
    published constants ContentAction {
     const long DELETED = 2;
     const long EXCHANGED = 4;
     const long INSERTED = 0;
     const long REMOVED = 1;
     /** @deprecated */ const long SEARCH_MATCHED = 128;
    };
    published interface XContentIdentifier;
    published struct ContentEvent: ::com::sun::star::lang::EventObject {
     long Action;
     ::com::sun::star::ucb::XContent Content;
     ::com::sun::star::ucb::XContentIdentifier Id;
    };
    published constants ContentInfoAttribute {
     const short INSERT_WITH_INPUTSTREAM = 1;
     const short KIND_DOCUMENT = 2;
     const short KIND_FOLDER = 4;
     const short KIND_LINK = 8;
     const short NONE = 0;
    };
    published interface XContentIdentifier;
    published interface XContentIdentifierFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContentIdentifier createContentIdentifier([in] string ContentId);
    };
    published interface XParameterizedContentProvider {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContentProvider registerInstance([in] string Template, [in] string Arguments, [in] boolean ReplaceExisting) raises (::com::sun::star::lang::IllegalArgumentException);
     ::com::sun::star::ucb::XContentProvider deregisterInstance([in] string Template, [in] string Arguments) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service ContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
     [optional] interface ::com::sun::star::ucb::XContentIdentifierFactory;
     [optional] interface ::com::sun::star::ucb::XParameterizedContentProvider;
    };
    published struct ContentProviderInfo {
     ::com::sun::star::ucb::XContentProvider ContentProvider;
     string Scheme;
    };
    published interface XContentProviderSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContentProvider getContentProvider();
    };
    published service ContentProviderProxy {
     interface ::com::sun::star::uno::XInterface;
     interface ::com::sun::star::ucb::XContentProviderSupplier;
     interface ::com::sun::star::ucb::XContentProvider;
     interface ::com::sun::star::ucb::XParameterizedContentProvider;
    };
    published interface XContentProviderFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContentProvider createContentProvider([in] string Service);
    };
    published service ContentProviderProxyFactory: ::com::sun::star::ucb::XContentProviderFactory;
    published constants ContentResultSetCapability {
     const short SORTED = 1;
    };
    /** @deprecated */ published interface XContentTransmitter {
     interface ::com::sun::star::uno::XInterface;
     void transmit([in] string Source, [in] string Destination, [in] long Flags);
    };
    /** @deprecated */ published service ContentTransmitter {
     interface ::com::sun::star::ucb::XContentTransmitter;
    };
    published struct CrossReference {
     string Group;
     long Id;
    };
    published service HierarchyDataSource {
     interface ::com::sun::star::lang::XMultiServiceFactory;
     interface ::com::sun::star::lang::XComponent;
    };
    published service DefaultHierarchyDataSource {
     service ::com::sun::star::ucb::HierarchyDataSource;
    };
    published struct DocumentHeaderField {
     string Name;
     string Value;
    };
    published enum DocumentStoreMode {
     REMOTE = 0,
     LOCAL = 1
    };
    published exception DuplicateCommandIdentifierException: ::com::sun::star::uno::Exception {
    };
    published exception DuplicateProviderException: ::com::sun::star::uno::Exception {
    };
    published service DynamicResultSet {
     interface ::com::sun::star::ucb::XDynamicResultSet;
    };
    /** @deprecated */ published constants Error {
     const long ACCOUNT_SYNTAX = 122977;
     const long BAD_CCMAIL_EXPORT_PASSWORD = 122909;
     const long BAD_INET = 122965;
     const long CCMAIL_EXPORT_ERROR = 122905;
     const long CCMAIL_EXPORT_NOT_TERMINATING = 122957;
     const long CCMAIL_EXPORT_TOO_LONG = 122910;
     const long CNTOUT_NO_FROM = 122890;
     const long CONFIRM_EMPTY_TRASH = 122952;
     const long CONNECT_FAILURE = 122883;
     const long COULD_NOT_INIT_COMPONENT = 122961;
     const long DELETE_ABORTED = 122892;
     const long DO_LOG = 122947;
     const long EMPTY_SERVERNAME = 122963;
     const long EMPTY_USERNAME = 122964;
     const long EXTERNAL_COMMAND_FAILED = 122958;
     const long FILE_EXISTS = 122921;
     const long FILE_NOT_EXISTS = 122922;
     const long FOLDER_EXISTS = 122911;
     const long FOLDER_INVALID = 122896;
     const long FOLDER_NOT_EXISTS = 122912;
     const long FSYS_ACCESS_DENIED = 122926;
     const long FSYS_CACHE_INCONSISTENT = 122940;
     const long FSYS_CANT_ITERATE = 122937;
     const long FSYS_CANT_RESOLVE_CONFLICT = 122936;
     const long FSYS_DELETE = 122944;
     const long FSYS_INSERT_MEDIUM = 122955;
     const long FSYS_INVALID_CHAR = 122924;
     const long FSYS_INVALID_DEVICE = 122925;
     const long FSYS_IS_MARKED = 122945;
     const long FSYS_IS_WILDCARD = 122933;
     const long FSYS_LOCK = 122942;
     const long FSYS_LOCK_VIOLATION = 122927;
     const long FSYS_LOST_ROOT = 122949;
     const long FSYS_MISPLACED_CHAR = 122923;
     const long FSYS_NOT_A_DIRECTORY = 122932;
     const long FSYS_NOT_A_FILE = 122931;
     const long FSYS_NOT_SUPPORTED = 122929;
     const long FSYS_NO_TARGET = 122953;
     const long FSYS_READONLY = 122941;
     const long FSYS_RECURSIVE = 122954;
     const long FSYS_ROOT_DELETE = 122920;
     const long FSYS_UNKNOWN = 122930;
     const long FSYS_UNLOCK = 122943;
     const long FSYS_UPDATE_NEEDED = 122935;
     const long FSYS_VOLUME_FULL = 122928;
     const long FTP_DCONFAILURE = 122901;
     const long FTP_GENERAL_FAILURE = 122946;
     const long FTP_NETWORKERROR = 122898;
     const long FTP_NOTNECESSARYCMD = 122899;
     const long FTP_PROXY = 122950;
     const long FTP_RESOLVERERROR = 122897;
     const long FTP_SERVICEUNAVAILABLE = 122900;
     const long FTP_TRANSFERABORTED = 122902;
     const long HTTP_COOKIE_REQUEST = 122948;
     const long ILLEGAL_CCMAIL_EXPORT_FILE = 122907;
     const long ILLEGAL_MESSAGE_ID = 122914;
     const long IMAP_BAD_SERVER = 122969;
     const long IMAP_BAD_TITLE = 122971;
     const long IMAP_CONNECTION_CLOSED = 122967;
     const long IMAP_NOT_IMAP4 = 122968;
     const long IMAP_SERVER_MSG = 122966;
     const long IS_RESCHEDULED = 122918;
     const long LOGIN_FAILURE_ACCOUNT = 122976;
     const long LOGIN_FAILURE_MAILSEND = 122882;
     const long LOGIN_FAILURE_NEWSSEND = 122881;
     const long LOGIN_FAILURE_RECEIVE = 122880;
     const long MESSAGE_NOT_FOUND = 122908;
     const long MULTIPLE_NOT_SEARCHABLE = 122939;
     const long NONE = 0;
     const long NOTAVAILABLE = 122894;
     const long NOT_HANDLED = 122960;
     const long NO_CCMAIL_EXPORT_FILE = 122906;
     const long NO_DOCINFO = 122956;
     const long NO_VIM_BBOARDLIST = 122913;
     const long NO_VIM_LIBRARY = 122903;
     const long ONE_NOT_SEARCHABLE = 122938;
     const long PASSWORD_SYNTAX = 122973;
     const long QUERY_DELETE = 122893;
     const long QUERY_DELETE_CACHE = 122974;
     const long RENAMED_WRONG_FILE_FORMAT = 122934;
     const long RENAME_FAILED = 122959;
     const long REORGANIZE_FILE_LOCKED = 122970;
     const long REORGANIZE_NO_DISKSPACE = 122975;
     const long SERVERNAME_SYNTAX = 122916;
     const long SERVER_CONNECT_FAILURE = 122972;
     const long SERVER_PORT_SYNTAX = 122915;
     const long SOURCE_SAME_AS_TARGET = 122951;
     const long STORAGE_KILLED = 122887;
     const long STORAGE_READONLY = 122886;
     const long TOO_MANY_GROUPS = 122891;
     const long TRANSFER_URL_NOT_SUPPORTED = 122962;
     const long UCB_OFFLINE = 122884;
     const long UCB_SERVER_ERROR = 122885;
     const long UNSUPPORTED_URL = 122889;
     const long USERNAME_SYNTAX = 122917;
     const long VIM_LIBRARY_CORRUPTED = 122904;
     const long VIM_LIBRARY_ERROR = 122895;
     const long VIM_NO_FAKE_MESSAGE_ID = 122919;
     const long WRONG_FILE_FORMAT = 122888;
    };
    published struct ExportStreamInfo {
     ::com::sun::star::io::XOutputStream Target;
     boolean ForceBodies;
    };
    published service FTPContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XContentCreator;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
    };
    published service FTPContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
    };
    published constants FetchError {
     const short ENDOFDATA = 1;
     const short EXCEPTION = 2;
     const short SUCCESS = 0;
    };
    published service FileContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XContentCreator;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published interface XFileIdentifierConverter {
     interface ::com::sun::star::uno::XInterface;
     long getFileProviderLocality([in] string BaseURL);
     string getFileURLFromSystemPath([in] string BaseURL, [in] string SystemPath);
     string getSystemPathFromFileURL([in] string URL);
    };
    published service FileContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
     interface ::com::sun::star::ucb::XContentIdentifierFactory;
     interface ::com::sun::star::beans::XPropertySet;
     interface ::com::sun::star::ucb::XFileIdentifierConverter;
    };
    published constants FileSystemNotation {
     const long DOS_NOTATION = 2;
     const long MAC_NOTATION = 3;
     const long UNIX_NOTATION = 1;
     const long UNKNOWN_NOTATION = 0;
    };
    published enum FolderListCommand {
     GET = 0,
     GET_SUBSCRIBED = 1,
     SET = 2
    };
    published struct FolderListEntry {
     string Title;
     string ID;
     boolean Subscribed;
     boolean New;
     boolean Removed;
     boolean Purge;
    };
    published struct FolderList {
     ::com::sun::star::ucb::FolderListCommand Command;
     sequence< ::com::sun::star::ucb::FolderListEntry > List;
    };
    published enum TransferCommandOperation {
     COPY = 0,
     MOVE = 1,
     LINK = 2
    };
    published struct GlobalTransferCommandArgument {
     ::com::sun::star::ucb::TransferCommandOperation Operation;
     string SourceURL;
     string TargetURL;
     string NewTitle;
     long NameClash;
    };
    published service HelpContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published service HelpContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
    };
    published service HierarchyContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
    };
    published service HierarchyDataReadAccess {
     interface ::com::sun::star::container::XNameAccess;
     interface ::com::sun::star::container::XHierarchicalNameAccess;
     interface ::com::sun::star::util::XChangesNotifier;
     interface ::com::sun::star::lang::XComponent;
    };
    published service HierarchyDataReadWriteAccess {
     service ::com::sun::star::ucb::HierarchyDataReadAccess;
     interface ::com::sun::star::container::XNameContainer;
     interface ::com::sun::star::lang::XSingleServiceFactory;
     interface ::com::sun::star::util::XChangesBatch;
    };
    published service HierarchyFolderContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::ucb::XContentCreator;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published service HierarchyLinkContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published service HierarchyRootFolderContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::ucb::XContentCreator;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published struct InsertCommandArgument {
     ::com::sun::star::io::XInputStream Data;
     boolean ReplaceExisting;
    };
    published exception InteractiveAppException: ::com::sun::star::task::ClassifiedInteractionRequest {
     unsigned long Code;
    };
    published exception InteractiveAugmentedIOException: ::com::sun::star::ucb::InteractiveIOException {
     sequence< any > Arguments;
    };
    published exception InteractiveBadTransferURLException: ::com::sun::star::uno::Exception {
    };
    /** @deprecated */ published exception InteractiveFileIOException: ::com::sun::star::ucb::InteractiveIOException {
     string FileName;
    };
    published exception InteractiveNetworkException: ::com::sun::star::task::ClassifiedInteractionRequest {
    };
    published exception InteractiveNetworkConnectException: ::com::sun::star::ucb::InteractiveNetworkException {
     string Server;
    };
    published exception InteractiveNetworkGeneralException: ::com::sun::star::ucb::InteractiveNetworkException {
    };
    published exception InteractiveNetworkOffLineException: ::com::sun::star::ucb::InteractiveNetworkException {
    };
    published exception InteractiveNetworkReadException: ::com::sun::star::ucb::InteractiveNetworkException {
     string Diagnostic;
    };
    published exception InteractiveNetworkResolveNameException: ::com::sun::star::ucb::InteractiveNetworkException {
     string Server;
    };
    published exception InteractiveNetworkWriteException: ::com::sun::star::ucb::InteractiveNetworkException {
     string Diagnostic;
    };
    published exception InteractiveWrongMediumException: ::com::sun::star::task::ClassifiedInteractionRequest {
     any Medium;
    };
    published struct Link {
     string Source;
     string Destination;
    };
    published struct ListAction {
     long Position;
     long Count;
     long ListActionType;
     any ActionInfo;
    };
    published constants ListActionType {
     const long CLEARED = 23;
     const long COMPLETED = 27;
     const long INSERTED = 21;
     const long MOVED = 24;
     const long PROPERTIES_CHANGED = 25;
     const long REMOVED = 22;
     const long WELCOME = 20;
    };
    published struct ListEvent: ::com::sun::star::lang::EventObject {
     sequence< ::com::sun::star::ucb::ListAction > Changes;
    };
    published enum LockDepth {
     ZERO = 0,
     ONE = 1,
     INFINITY = 2
    };
    published enum LockScope {
     EXCLUSIVE = 0,
     SHARED = 1
    };
    published enum LockType {
     WRITE = 0
    };
    published struct LockEntry {
     ::com::sun::star::ucb::LockScope Scope;
     ::com::sun::star::ucb::LockType Type;
    };
    published struct Lock: ::com::sun::star::ucb::LockEntry {
     ::com::sun::star::ucb::LockDepth Depth;
     any Owner;
     hyper Timeout;
     sequence< string > LockTokens;
    };
    published exception MissingInputStreamException: ::com::sun::star::uno::Exception {
    };
    published exception MissingPropertiesException: ::com::sun::star::uno::Exception {
     sequence< string > Properties;
    };
    published constants NameClash {
     const long ASK = 4;
     const long ERROR = 0;
     /** @deprecated */ const long KEEP = 3;
     const long OVERWRITE = 1;
     const long RENAME = 2;
    };
    published exception NameClashException: ::com::sun::star::task::ClassifiedInteractionRequest {
     string Name;
    };
    published exception NameClashResolveRequest: ::com::sun::star::task::ClassifiedInteractionRequest {
     string TargetFolderURL;
     string ClashingName;
     string ProposedNewName;
    };
    published service ODMAContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published service ODMAContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
    };
    published struct OpenCommandArgument {
     long Mode;
     long Priority;
     ::com::sun::star::uno::XInterface Sink;
     sequence< ::com::sun::star::beans::Property > Properties;
    };
    published struct OpenCommandArgument2: ::com::sun::star::ucb::OpenCommandArgument {
     sequence< ::com::sun::star::ucb::NumberedSortingInfo > SortingInfo;
    };
    published struct OpenCommandArgument3: ::com::sun::star::ucb::OpenCommandArgument2 {
     sequence< ::com::sun::star::beans::NamedValue > OpeningFlags;
    };
    published constants OpenMode {
     const short ALL = 0;
     const short DOCUMENT = 2;
     const short DOCUMENTS = 3;
     const short DOCUMENT_SHARE_DENY_NONE = 4;
     const short DOCUMENT_SHARE_DENY_WRITE = 5;
     const short FOLDERS = 1;
    };
    published enum OutgoingMessageState {
     WRITTEN = 0,
     PARTIALLY_LOCALLY_SENT = 1,
     COMPLETELY_LOCALLY_SENT = 2,
     RECOVERABLE_LOCAL_ERROR = 3,
     NONRECOVERABLE_LOCAL_ERROR = 4,
     EXTERNAL_ERROR = 5,
     WAITING_CONFIRMATION = 6,
     CONFIRMED = 7
    };
    published service PackageContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
    };
    published service PackageFolderContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::ucb::XContentCreator;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published service PackageStreamContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published interface XPropertySetRegistry;
    published interface XPersistentPropertySet {
     interface ::com::sun::star::beans::XPropertySet;
     ::com::sun::star::ucb::XPropertySetRegistry getRegistry();
     string getKey();
    };
    published service PersistentPropertySet {
     interface ::com::sun::star::ucb::XPersistentPropertySet;
     interface ::com::sun::star::container::XNamed;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertyAccess;
    };
    published struct PostCommandArgument {
     ::com::sun::star::io::XInputStream Source;
     ::com::sun::star::uno::XInterface Sink;
    };
    published struct PostCommandArgument2: ::com::sun::star::ucb::PostCommandArgument {
     string MediaType;
     string Referer;
    };
    published enum Priority {
     HIGHEST = 0,
     HIGH = 1,
     NORMAL = 2,
     LOW = 3,
     LOWEST = 4
    };
    published service PropertiesManager: ::com::sun::star::beans::XPropertySetInfo;
    published interface XPropertySetRegistry {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XPersistentPropertySet openPropertySet([in] string key, [in] boolean create);
     void removePropertySet([in] string key);
    };
    published service PropertySetRegistry {
     interface ::com::sun::star::ucb::XPropertySetRegistry;
     interface ::com::sun::star::container::XNameAccess;
    };
    published enum PropertyValueState {
     UNPROCESSED = 0,
     PROCESSED = 1,
     INVALID_NAME = 2,
     INVALID_TYPE = 3
    };
    published struct PropertyValueInfo: ::com::sun::star::beans::PropertyValue {
     ::com::sun::star::ucb::PropertyValueState ValueState;
    };
    published struct RecipientInfo {
     string ProtocolType;
     ::com::sun::star::ucb::OutgoingMessageState State;
     string To;
     string CC;
     string BCC;
     string Newsgroups;
     string Server;
     string Username;
     string Password;
     string VIMPostOfficePath;
     string ProtocolErrorString;
     long ProtocolErrorNumber;
     long SendTries;
    };
    published service RemoteAccessContentProvider {
     service ::com::sun::star::ucb::ContentProvider;
     interface ::com::sun::star::ucb::XParameterizedContentProvider;
    };
    published interface XRemoteContentProviderDoneListener;
    published interface XRemoteContentProviderAcceptor {
     interface ::com::sun::star::uno::XInterface;
     boolean addRemoteContentProvider([in] string Identifier, [in] ::com::sun::star::lang::XMultiServiceFactory Factory, [in] sequence< string > Templates, [in] ::com::sun::star::ucb::XRemoteContentProviderDoneListener DoneListener);
     boolean removeRemoteContentProvider([in] string Identifier);
    };
    published interface XContentProviderManager;
    /** @deprecated */ published interface XRemoteContentProviderActivator {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContentProviderManager activateRemoteContentProviders();
    };
    published service RemoteContentProviderAcceptor {
     interface ::com::sun::star::ucb::XRemoteContentProviderAcceptor;
     /** @deprecated */ [optional] interface ::com::sun::star::ucb::XRemoteContentProviderActivator;
    };
    published enum RemoteContentProviderChangeAction {
     ADDED = 0,
     REMOVED = 1
    };
    published struct RemoteContentProviderChangeEvent: ::com::sun::star::lang::EventObject {
     string Identifier;
     ::com::sun::star::ucb::RemoteContentProviderChangeAction Action;
    };
    /** @deprecated */ published service RemoteProxyContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
     [optional] interface ::com::sun::star::ucb::XContentIdentifierFactory;
     [optional] interface ::com::sun::star::ucb::XParameterizedContentProvider;
    };
    published exception ResultSetException: ::com::sun::star::sdbc::SQLException {
    };
    published struct RuleTerm {
     string Property;
     any Operand;
     short Operator;
     boolean CaseSensitive;
     boolean RegularExpression;
    };
    published struct Rule {
     sequence< ::com::sun::star::ucb::RuleTerm > Terms;
     string Parameter;
     short Action;
    };
    published constants RuleAction {
     const short COPY = 8;
     const short DELETE = 9;
     const short FORWARD = 11;
     const short HIDE = 2;
     const short LINK = 10;
     const short MARK = 3;
     const short MARKREAD = 5;
     const short MARKUNREAD = 6;
     const short MOVE = 7;
     const short NONE = 0;
     const short SHOW = 1;
     const short UNMARK = 4;
    };
    published constants RuleOperator {
     const short CONTAINS = 1;
     const short CONTAINSNOT = 2;
     const short EQUAL = 5;
     const short GREATEREQUAL = 3;
     const short LESSEQUAL = 4;
     const short NOTEQUAL = 6;
     const short VALUE_FALSE = 8;
     const short VALUE_TRUE = 7;
    };
    published struct RuleSet {
     sequence< ::com::sun::star::ucb::Rule > Rules;
     boolean HandleFolder;
    };
    published struct SearchCriterium {
     sequence< ::com::sun::star::ucb::RuleTerm > Terms;
    };
    published enum SearchRecursion {
     NONE = 0,
     ONE_LEVEL = 1,
     DEEP = 2
    };
    published struct SearchInfo {
     sequence< ::com::sun::star::ucb::SearchCriterium > Criteria;
     ::com::sun::star::ucb::SearchRecursion Recursion;
     boolean IncludeBase;
     boolean RespectFolderViewRestrictions;
     boolean RespectDocViewRestrictions;
     boolean FollowIndirections;
    };
    published struct SearchCommandArgument {
     ::com::sun::star::ucb::SearchInfo Info;
     sequence< ::com::sun::star::beans::Property > Properties;
    };
    published struct SendInfo {
     string ProtocolType;
     string Value;
    };
    published struct SendMediaTypes {
     string ProtocolType;
     sequence< string > Value;
    };
    published interface XSimpleFileAccess {
     interface ::com::sun::star::uno::XInterface;
     void copy([in] string SourceURL, [in] string DestURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     void move([in] string SourceURL, [in] string DestURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     void kill([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     boolean isFolder([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     boolean isReadOnly([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     void setReadOnly([in] string FileURL, [in] boolean bReadOnly) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     void createFolder([in] string NewFolderURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     long getSize([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     string getContentType([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     ::com::sun::star::util::DateTime getDateTimeModified([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     sequence< string > getFolderContents([in] string FolderURL, [in] boolean bIncludeFolders) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     boolean exists([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     ::com::sun::star::io::XInputStream openFileRead([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     ::com::sun::star::io::XOutputStream openFileWrite([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     ::com::sun::star::io::XStream openFileReadWrite([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     void setInteractionHandler([in] ::com::sun::star::task::XInteractionHandler Handler);
    };
    published interface XSimpleFileAccess2 {
     interface ::com::sun::star::ucb::XSimpleFileAccess;
     void writeFile([in] string FileURL, [in] ::com::sun::star::io::XInputStream data) raises (::com::sun::star::uno::Exception);
    };
    published interface XSimpleFileAccess3 {
     interface ::com::sun::star::ucb::XSimpleFileAccess2;
     boolean isHidden([in] string FileURL) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
     void setHidden([in] string FileURL, [in] boolean bHidden) raises (::com::sun::star::ucb::CommandAbortedException, ::com::sun::star::uno::Exception);
    };
    published service SimpleFileAccess: ::com::sun::star::ucb::XSimpleFileAccess3;
    published interface XSortedDynamicResultSetFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XDynamicResultSet createSortedDynamicResultSet([in] ::com::sun::star::ucb::XDynamicResultSet Source, [in] sequence< ::com::sun::star::ucb::NumberedSortingInfo > Info, [in] ::com::sun::star::ucb::XAnyCompareFactory CompareFactory);
    };
    published service SortedDynamicResultSetFactory: ::com::sun::star::ucb::XSortedDynamicResultSetFactory;
    published struct SortingInfo {
     string PropertyName;
     boolean Ascending;
    };
    published interface XPropertySetRegistryFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XPropertySetRegistry createPropertySetRegistry([in] string URL);
    };
    published service Store: ::com::sun::star::ucb::XPropertySetRegistryFactory;
    published enum SynchronizePolicy {
     SERVER_IS_MASTER = 0,
     CLIENT_IS_MASTER = 1,
     NONE_IS_MASTER = 2
    };
    published struct TransferInfo {
     boolean MoveData;
     string SourceURL;
     string NewTitle;
     long NameClash;
    };
    published struct TransferResult {
     string Source;
     string Target;
     any Result;
    };
    published interface XContentProviderManager {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XContentProvider registerContentProvider([in] ::com::sun::star::ucb::XContentProvider Provider, [in] string Scheme, [in] boolean ReplaceExisting) raises (::com::sun::star::ucb::DuplicateProviderException);
     void deregisterContentProvider([in] ::com::sun::star::ucb::XContentProvider Provider, [in] string Scheme);
     sequence< ::com::sun::star::ucb::ContentProviderInfo > queryContentProviders();
     ::com::sun::star::ucb::XContentProvider queryContentProvider([in] string Identifier);
    };
    published interface XUniversalContentBroker {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContentProvider;
     interface ::com::sun::star::ucb::XContentProviderManager;
     interface ::com::sun::star::ucb::XContentIdentifierFactory;
     interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published service UniversalContentBroker: ::com::sun::star::ucb::XUniversalContentBroker {
     create();
    };
    published exception UnsupportedCommandException: ::com::sun::star::uno::Exception {
    };
    published exception UnsupportedDataSinkException: ::com::sun::star::uno::Exception {
     ::com::sun::star::uno::XInterface Sink;
    };
    published exception UnsupportedNameClashException: ::com::sun::star::uno::Exception {
     long NameClash;
    };
    published exception UnsupportedOpenModeException: ::com::sun::star::uno::Exception {
     short Mode;
    };
    published enum VerificationMode {
     ALWAYS = 0,
     ONCE = 1,
     NEVER = 2
    };
    published service WebDAVContentProvider {
     interface ::com::sun::star::ucb::XContentProvider;
    };
    published service WebDAVDocumentContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published service WebDAVFolderContent {
     interface ::com::sun::star::lang::XComponent;
     interface ::com::sun::star::ucb::XContent;
     interface ::com::sun::star::ucb::XCommandProcessor;
     interface ::com::sun::star::beans::XPropertiesChangeNotifier;
     interface ::com::sun::star::beans::XPropertyContainer;
     interface ::com::sun::star::beans::XPropertySetInfoChangeNotifier;
     interface ::com::sun::star::ucb::XCommandInfoChangeNotifier;
     interface ::com::sun::star::container::XChild;
     interface ::com::sun::star::ucb::XContentCreator;
     [optional] interface ::com::sun::star::ucb::XCommandProcessor2;
    };
    published struct WelcomeDynamicResultSetStruct {
     ::com::sun::star::sdbc::XResultSet Old;
     ::com::sun::star::sdbc::XResultSet New;
    };
    published interface XAnyCompare {
     interface ::com::sun::star::uno::XInterface;
     short compare([in] any Any1, [in] any Any2);
    };
    published interface XCommandInfo {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::ucb::CommandInfo > getCommands();
     ::com::sun::star::ucb::CommandInfo getCommandInfoByName([in] string Name) raises (::com::sun::star::ucb::UnsupportedCommandException);
     ::com::sun::star::ucb::CommandInfo getCommandInfoByHandle([in] long Handle) raises (::com::sun::star::ucb::UnsupportedCommandException);
     boolean hasCommandByName([in] string Name);
     boolean hasCommandByHandle([in] long Handle);
    };
    published interface XCommandInfoChangeListener {
     interface ::com::sun::star::lang::XEventListener;
     void commandInfoChange([in] ::com::sun::star::ucb::CommandInfoChangeEvent evt);
    };
    published interface XContentEventListener {
     interface ::com::sun::star::lang::XEventListener;
     void contentEvent([in] ::com::sun::star::ucb::ContentEvent evt);
    };
    published interface XContentIdentifier {
     interface ::com::sun::star::uno::XInterface;
     string getContentIdentifier();
     string getContentProviderScheme();
    };
    published interface XContentIdentifierMapping {
     interface ::com::sun::star::uno::XInterface;
     string mapContentIdentifierString([in] string Source);
     ::com::sun::star::ucb::XContentIdentifier mapContentIdentifier([in] ::com::sun::star::ucb::XContentIdentifier Source);
     ::com::sun::star::ucb::XContent mapContent([in] ::com::sun::star::ucb::XContent Source);
     boolean mapRow([inout] sequence< any > Value);
    };
    /** @deprecated */ published interface XDataContainer {
     interface ::com::sun::star::container::XIndexContainer;
     string getContentType();
     void setContentType([in] string aType);
     sequence< byte > getData();
     void setData([in] sequence< byte > aData);
     /** @deprecated */ string getDataURL();
     /** @deprecated */ void setDataURL([in] string aURL);
    };
    published interface XDynamicResultSetListener {
     interface ::com::sun::star::lang::XEventListener;
     void notify([in] ::com::sun::star::ucb::ListEvent Changes);
    };
    published interface XInteractionHandlerSupplier {
     interface ::com::sun::star::uno::XInterface;
     boolean hasInteractionHandler();
    };
    published interface XInteractionReplaceExistingData {
     interface ::com::sun::star::task::XInteractionContinuation;
    };
    published interface XInteractionSupplyAuthentication {
     interface ::com::sun::star::task::XInteractionContinuation;
     boolean canSetRealm();
     void setRealm([in] string Realm);
     boolean canSetUserName();
     void setUserName([in] string UserName);
     boolean canSetPassword();
     void setPassword([in] string Password);
     sequence< ::com::sun::star::ucb::RememberAuthentication > getRememberPasswordModes([out] ::com::sun::star::ucb::RememberAuthentication Default);
     void setRememberPassword([in] ::com::sun::star::ucb::RememberAuthentication Remember);
     boolean canSetAccount();
     void setAccount([in] string Account);
     sequence< ::com::sun::star::ucb::RememberAuthentication > getRememberAccountModes([out] ::com::sun::star::ucb::RememberAuthentication Default);
     void setRememberAccount([in] ::com::sun::star::ucb::RememberAuthentication Remember);
    };
    published interface XInteractionSupplyName {
     interface ::com::sun::star::task::XInteractionContinuation;
     void setName([in] string Name);
    };
    published interface XProgressHandler {
     interface ::com::sun::star::uno::XInterface;
     void push([in] any Status);
     void update([in] any Status);
     void pop();
    };
    published interface XPropertyMatcher {
     interface ::com::sun::star::uno::XInterface;
     boolean matches([in] ::com::sun::star::ucb::XCommandProcessor Properties, [in] ::com::sun::star::ucb::XCommandEnvironment Environment);
    };
    published interface XPropertyMatcherFactory {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ucb::XPropertyMatcher createPropertyMatcher([in] sequence< ::com::sun::star::ucb::SearchCriterium > Criteria);
    };
    published interface XRecycler {
     interface ::com::sun::star::uno::XInterface;
     void trashContent([in] ::com::sun::star::ucb::XCommandProcessor Properties, [in] ::com::sun::star::ucb::XContentIdentifier Identifier);
    };
    published interface XRemoteContentProviderChangeListener {
     interface ::com::sun::star::lang::XEventListener;
     void remoteContentProviderChange([in] ::com::sun::star::ucb::RemoteContentProviderChangeEvent Event);
    };
    published interface XRemoteContentProviderChangeNotifier {
     interface ::com::sun::star::uno::XInterface;
     void addRemoteContentProviderChangeListener([in] ::com::sun::star::ucb::XRemoteContentProviderChangeListener Listener);
     void removeRemoteContentProviderChangeListener([in] ::com::sun::star::ucb::XRemoteContentProviderChangeListener Listener);
    };
    published interface XRemoteContentProviderConnectionControl {
     interface ::com::sun::star::uno::XInterface;
     void enableConnectionControl([in] ::com::sun::star::ucb::XRemoteContentProviderAcceptor Acceptor, [in] ::com::sun::star::uno::XInterface Token);
    };
    published interface XRemoteContentProviderDistributor {
     interface ::com::sun::star::uno::XInterface;
     boolean connectToRemoteAcceptor([in] string Url, [in] string Identifier) raises (::com::sun::star::connection::NoConnectException, ::com::sun::star::connection::ConnectionSetupException, ::com::sun::star::lang::IllegalArgumentException);
     boolean disconnectFromRemoteAcceptor([in] string Url);
     void disconnectFromAll();
    };
    published interface XRemoteContentProviderDoneListener {
     interface ::com::sun::star::uno::XInterface;
     void doneWithRemoteContentProviders([in] ::com::sun::star::ucb::XRemoteContentProviderAcceptor Acceptor);
    };
    published interface XRemoteContentProviderSupplier {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::lang::XMultiServiceFactory queryRemoteContentProvider([in] string Identifier);
    };
   };
   module ui {
    published service ActionTrigger {
     [property] string Text;
     [property] string CommandURL;
     [property, optional] string HelpURL;
     [property] ::com::sun::star::awt::XBitmap Image;
     [property] ::com::sun::star::container::XIndexContainer SubContainer;
    };
    published service ActionTriggerContainer {
     interface ::com::sun::star::container::XIndexContainer;
     interface ::com::sun::star::lang::XMultiServiceFactory;
     [optional] interface ::com::sun::star::container::XEnumerationAccess;
     [optional] interface ::com::sun::star::container::XContainer;
    };
    published service ActionTriggerSeparator {
     [property, optional] short SeparatorType;
    };
    published constants ActionTriggerSeparatorType {
     const short LINE = 0;
     const short LINEBREAK = 2;
     const short SPACE = 1;
    };
    published struct ContextMenuExecuteEvent {
     ::com::sun::star::awt::XWindow SourceWindow;
     ::com::sun::star::awt::Point ExecutePosition;
     ::com::sun::star::container::XIndexContainer ActionTriggerContainer;
     ::com::sun::star::view::XSelectionSupplier Selection;
    };
    published enum ContextMenuInterceptorAction {
     IGNORED = 0,
     CANCELLED = 1,
     EXECUTE_MODIFIED = 2,
     CONTINUE_MODIFIED = 3
    };
    published interface XContextMenuInterceptor {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::ui::ContextMenuInterceptorAction notifyContextMenuExecute([in] ::com::sun::star::ui::ContextMenuExecuteEvent aEvent);
    };
    module dialogs {
     published constants CommonFilePickerElementIds {
      const short CONTROL_FILEVIEW = 4;
      const short EDIT_FILEURL = 5;
      const short EDIT_FILEURL_LABEL = 7;
      const short LISTBOX_FILTER = 3;
      const short LISTBOX_FILTER_LABEL = 6;
      const short PUSHBUTTON_CANCEL = 2;
      const short PUSHBUTTON_OK = 1;
     };
     published constants ControlActions {
      const short ADD_ITEM = 1;
      const short ADD_ITEMS = 2;
      const short DELETE_ITEM = 3;
      const short DELETE_ITEMS = 4;
      const short GET_HELP_URL = 101;
      const short GET_ITEMS = 6;
      const short GET_SELECTED_ITEM = 7;
      const short GET_SELECTED_ITEM_INDEX = 8;
      const short SET_HELP_URL = 100;
      const short SET_SELECT_ITEM = 5;
     };
     published exception ExecutableDialogException: ::com::sun::star::uno::Exception {
     };
     published constants ExecutableDialogResults {
      const short CANCEL = 0;
      const short OK = 1;
     };
     published constants ExtendedFilePickerElementIds {
      const short CHECKBOX_AUTOEXTENSION = 100;
      const short CHECKBOX_FILTEROPTIONS = 102;
      const short CHECKBOX_LINK = 104;
      const short CHECKBOX_PASSWORD = 101;
      const short CHECKBOX_PREVIEW = 105;
      const short CHECKBOX_READONLY = 103;
      const short CHECKBOX_SELECTION = 110;
      const short LISTBOX_FILTER_SELECTOR = 210;
      const short LISTBOX_IMAGE_TEMPLATE = 109;
      const short LISTBOX_IMAGE_TEMPLATE_LABEL = 209;
      const short LISTBOX_TEMPLATE = 108;
      const short LISTBOX_TEMPLATE_LABEL = 208;
      const short LISTBOX_VERSION = 107;
      const short LISTBOX_VERSION_LABEL = 207;
      const short PUSHBUTTON_PLAY = 106;
     };
     published interface XFilePicker {
      interface ::com::sun::star::ui::dialogs::XExecutableDialog;
      void setMultiSelectionMode([in] boolean bMode);
      void setDefaultName([in] string aName);
      void setDisplayDirectory([in] string aDirectory) raises (::com::sun::star::lang::IllegalArgumentException);
      string getDisplayDirectory();
      sequence< string > getFiles();
     };
     published interface XFilePickerListener;
     published interface XFilePickerNotifier {
      interface ::com::sun::star::uno::XInterface;
      void addFilePickerListener([in] ::com::sun::star::ui::dialogs::XFilePickerListener xListener);
      void removeFilePickerListener([in] ::com::sun::star::ui::dialogs::XFilePickerListener xListener);
     };
     published interface XFilePreview {
      interface ::com::sun::star::uno::XInterface;
      sequence< short > getSupportedImageFormats();
      ::com::sun::star::util::Color getTargetColorDepth();
      long getAvailableWidth();
      long getAvailableHeight();
      void setImage([in] short aImageFormat, [in] any aImage) raises (::com::sun::star::lang::IllegalArgumentException);
      boolean setShowState([in] boolean bShowState);
      boolean getShowState();
     };
     published interface XFilterGroupManager {
      interface ::com::sun::star::uno::XInterface;
      void appendFilterGroup([in] string sGroupTitle, [in] sequence< ::com::sun::star::beans::StringPair > aFilters) raises (::com::sun::star::lang::IllegalArgumentException);
     };
     published interface XFilterManager {
      interface ::com::sun::star::uno::XInterface;
      void appendFilter([in] string aTitle, [in] string aFilter) raises (::com::sun::star::lang::IllegalArgumentException);
      void setCurrentFilter([in] string aTitle) raises (::com::sun::star::lang::IllegalArgumentException);
      string getCurrentFilter();
     };
     published interface XFilePicker2 {
      interface ::com::sun::star::ui::dialogs::XFilePicker;
      sequence< string > getSelectedFiles();
     };
     published interface XFilePicker3 {
      interface ::com::sun::star::ui::dialogs::XFilePicker2;
      interface ::com::sun::star::ui::dialogs::XFilePickerNotifier;
      interface ::com::sun::star::ui::dialogs::XFilterManager;
      interface ::com::sun::star::ui::dialogs::XFilterGroupManager;
      interface ::com::sun::star::util::XCancellable;
      interface ::com::sun::star::lang::XComponent;
      [optional] interface ::com::sun::star::ui::dialogs::XFilePreview;
     };
     published service FilePicker: ::com::sun::star::ui::dialogs::XFilePicker3 {
      createWithMode([in] short Mode);
     };
     published struct FilePickerEvent: ::com::sun::star::lang::EventObject {
      short ElementId;
     };
     published constants FilePreviewImageFormats {
      const short BITMAP = 1;
     };
     published interface XFolderPicker {
      interface ::com::sun::star::ui::dialogs::XExecutableDialog;
      void setDisplayDirectory([in] string aDirectory) raises (::com::sun::star::lang::IllegalArgumentException);
      string getDisplayDirectory();
      string getDirectory();
      void setDescription([in] string aDescription);
     };
     published interface XFolderPicker2 {
      interface ::com::sun::star::ui::dialogs::XFolderPicker;
      interface ::com::sun::star::util::XCancellable;
     };
     published service FolderPicker: ::com::sun::star::ui::dialogs::XFolderPicker2;
     /** @deprecated */ published constants ListboxControlActions {
      const short ADD_ITEM = 1;
      const short ADD_ITEMS = 2;
      const short DELETE_ITEM = 3;
      const short DELETE_ITEMS = 4;
      const short GET_ITEMS = 6;
      const short GET_SELECTED_ITEM = 7;
      const short SET_SELECT_ITEM = 5;
     };
     published constants TemplateDescription {
      const short FILEOPEN_LINK_PREVIEW = 9;
      const short FILEOPEN_LINK_PREVIEW_IMAGE_TEMPLATE = 6;
      const short FILEOPEN_PLAY = 7;
      const short FILEOPEN_READONLY_VERSION = 8;
      const short FILEOPEN_SIMPLE = 0;
      const short FILESAVE_AUTOEXTENSION = 10;
      const short FILESAVE_AUTOEXTENSION_PASSWORD = 2;
      const short FILESAVE_AUTOEXTENSION_PASSWORD_FILTEROPTIONS = 3;
      const short FILESAVE_AUTOEXTENSION_SELECTION = 4;
      const short FILESAVE_AUTOEXTENSION_TEMPLATE = 5;
      const short FILESAVE_SIMPLE = 1;
     };
     published interface XControlAccess {
      interface ::com::sun::star::uno::XInterface;
      void setControlProperty([in] string aControlName, [in] string aControlProperty, [in] any aValue) raises (::com::sun::star::lang::IllegalArgumentException);
      any getControlProperty([in] string aControlName, [in] string aControlProperty) raises (::com::sun::star::lang::IllegalArgumentException);
     };
     published interface XControlInformation {
      interface ::com::sun::star::uno::XInterface;
      sequence< string > getSupportedControls();
      boolean isControlSupported([in] string aControlName);
      sequence< string > getSupportedControlProperties([in] string aControlName) raises (::com::sun::star::lang::IllegalArgumentException);
      boolean isControlPropertySupported([in] string aControlName, [in] string aControlProperty) raises (::com::sun::star::lang::IllegalArgumentException);
     };
     published interface XFilePickerControlAccess {
      interface ::com::sun::star::ui::dialogs::XFilePicker;
      void setValue([in] short ControlId, [in] short aControlAction, [in] any aValue);
      any getValue([in] short aControlId, [in] short aControlAction);
      void setLabel([in] short aControlId, [in] string aLabel);
      string getLabel([in] short aControlId);
      void enableControl([in] short ControlId, [in] boolean bEnable);
     };
     published interface XFilePickerListener {
      interface ::com::sun::star::lang::XEventListener;
      void fileSelectionChanged([in] ::com::sun::star::ui::dialogs::FilePickerEvent aEvent);
      void directoryChanged([in] ::com::sun::star::ui::dialogs::FilePickerEvent aEvent);
      string helpRequested([in] ::com::sun::star::ui::dialogs::FilePickerEvent aEvent);
      void controlStateChanged([in] ::com::sun::star::ui::dialogs::FilePickerEvent aEvent);
      void dialogSizeChanged();
     };
     published service XSLTFilterDialog: ::com::sun::star::ui::dialogs::XExecutableDialog;
    };
   };
   module util {
    published struct AtomClassRequest {
     long atomClass;
     sequence< long > atoms;
    };
    published struct AtomDescription {
     long atom;
     string description;
    };
    published struct ChangesEvent: ::com::sun::star::lang::EventObject {
     any Base;
     ::com::sun::star::util::ChangesSet Changes;
    };
    published enum DataEditorEventType {
     DONE = 0,
     CANCELED = 1
    };
    published struct DataEditorEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::util::DataEditorEventType Type;
    };
    published struct DateTimeRange {
     unsigned long StartNanoSeconds;
     unsigned short StartSeconds;
     unsigned short StartMinutes;
     unsigned short StartHours;
     unsigned short StartDay;
     unsigned short StartMonth;
     short StartYear;
     unsigned long EndNanoSeconds;
     unsigned short EndSeconds;
     unsigned short EndMinutes;
     unsigned short EndHours;
     unsigned short EndDay;
     unsigned short EndMonth;
     short EndYear;
     boolean IsUTC;
    };
    published interface XJobManager {
     interface ::com::sun::star::uno::XInterface;
     void registerJob([in] ::com::sun::star::util::XCancellable Job);
     void releaseJob([in] ::com::sun::star::util::XCancellable Job);
     void cancelAllJobs();
    };
    published typedef short Language;
    published exception MalformedNumberFormatException: ::com::sun::star::uno::Exception {
     long CheckPos;
    };
    published constants MeasureUnit {
     const short APPFONT = 17;
     const short CM = 3;
     const short FOOT = 13;
     const short INCH = 7;
     const short INCH_1000TH = 4;
     const short INCH_100TH = 5;
     const short INCH_10TH = 6;
     const short KM = 11;
     const short M = 10;
     const short MILE = 14;
     const short MM = 2;
     const short MM_100TH = 0;
     const short MM_10TH = 1;
     const short PERCENT = 15;
     const short PICA = 12;
     const short PIXEL = 16;
     const short POINT = 8;
     const short SYSFONT = 18;
     const short TWIP = 9;
    };
    published struct ModeChangeEvent: ::com::sun::star::lang::EventObject {
     string NewMode;
    };
    published exception NotNumericException: ::com::sun::star::uno::Exception {
    };
    published constants NumberFormat {
     const short ALL = 0;
     const short CURRENCY = 8;
     const short DATE = 2;
     const short DATETIME = 6;
     const short DEFINED = 1;
     const short FRACTION = 64;
     const short LOGICAL = 1024;
     const short NUMBER = 16;
     const short PERCENT = 128;
     const short SCIENTIFIC = 32;
     const short TEXT = 256;
     const short TIME = 4;
     const short UNDEFINED = 2048;
    };
    published service NumberFormatProperties {
     [property, readonly] string FormatString;
     [property, readonly] ::com::sun::star::lang::Locale Locale;
     [property, readonly] short Type;
     [property] string Comment;
    };
    published service NumberFormatSettings {
     interface ::com::sun::star::beans::XPropertySet;
     [property] ::com::sun::star::util::Date NullDate;
     [property] short StandardDecimals;
     [property] boolean NoZero;
     [property] short TwoDigitDateStart;
    };
    published interface XNumberFormatTypes {
     interface ::com::sun::star::uno::XInterface;
     long getStandardIndex([in] ::com::sun::star::lang::Locale nLocale);
     long getStandardFormat([in] short nType, [in] ::com::sun::star::lang::Locale nLocale);
     long getFormatIndex([in] short nIndex, [in] ::com::sun::star::lang::Locale nLocale);
     boolean isTypeCompatible([in] short nOldType, [in] short nNewType);
     long getFormatForLocale([in] long nKey, [in] ::com::sun::star::lang::Locale nLocale);
    };
    published interface XNumberFormats {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::beans::XPropertySet getByKey([in] long nKey);
     sequence< long > queryKeys([in] short nType, [in] ::com::sun::star::lang::Locale nLocale, [in] boolean bCreate);
     long queryKey([in] string aFormat, [in] ::com::sun::star::lang::Locale nLocale, [in] boolean bScan);
     long addNew([in] string aFormat, [in] ::com::sun::star::lang::Locale nLocale) raises (::com::sun::star::util::MalformedNumberFormatException);
     long addNewConverted([in] string aFormat, [in] ::com::sun::star::lang::Locale nLocale, [in] ::com::sun::star::lang::Locale nNewLocale) raises (::com::sun::star::util::MalformedNumberFormatException);
     void removeByKey([in] long nKey);
     string generateFormat([in] long nBaseKey, [in] ::com::sun::star::lang::Locale nLocale, [in] boolean bThousands, [in] boolean bRed, [in] short nDecimals, [in] short nLeading);
    };
    published service NumberFormats {
     interface ::com::sun::star::util::XNumberFormats;
     interface ::com::sun::star::util::XNumberFormatTypes;
    };
    published service NumberFormatsSupplier: ::com::sun::star::util::XNumberFormatsSupplier {
     createWithLocale([in] ::com::sun::star::lang::Locale Locale);
     createWithDefaultLocale();
    };
    published interface XNumberFormatPreviewer {
     interface ::com::sun::star::uno::XInterface;
     string convertNumberToPreviewString([in] string aFormat, [in] double fValue, [in] ::com::sun::star::lang::Locale nLocale, [in] boolean bAllowEnglish) raises (::com::sun::star::util::MalformedNumberFormatException);
     ::com::sun::star::util::Color queryPreviewColorForNumber([in] string aFormat, [in] double fValue, [in] ::com::sun::star::lang::Locale nLocale, [in] boolean bAllowEnglish, [in] ::com::sun::star::util::Color aDefaultColor) raises (::com::sun::star::util::MalformedNumberFormatException);
    };
    published interface XNumberFormatter {
     interface ::com::sun::star::uno::XInterface;
     void attachNumberFormatsSupplier([in] ::com::sun::star::util::XNumberFormatsSupplier xSupplier);
     ::com::sun::star::util::XNumberFormatsSupplier getNumberFormatsSupplier();
     long detectNumberFormat([in] long nKey, [in] string aString) raises (::com::sun::star::util::NotNumericException);
     double convertStringToNumber([in] long nKey, [in] string aString) raises (::com::sun::star::util::NotNumericException);
     string convertNumberToString([in] long nKey, [in] double fValue);
     ::com::sun::star::util::Color queryColorForNumber([in] long nKey, [in] double fValue, [in] ::com::sun::star::util::Color aDefaultColor);
     string formatString([in] long nKey, [in] string aString);
     ::com::sun::star::util::Color queryColorForString([in] long nKey, [in] string aString, [in] ::com::sun::star::util::Color aDefaultColor);
     string getInputString([in] long nKey, [in] double fValue);
    };
    published interface XNumberFormatter2 {
     interface ::com::sun::star::util::XNumberFormatter;
     interface ::com::sun::star::util::XNumberFormatPreviewer;
    };
    published service NumberFormatter: ::com::sun::star::util::XNumberFormatter2;
    published interface XOfficeInstallationDirectories {
     interface ::com::sun::star::uno::XInterface;
     string getOfficeInstallationDirectoryURL();
     string getOfficeUserDataDirectoryURL();
     string makeRelocatableURL([in] string URL);
     string makeAbsoluteURL([in] string URL);
    };
    /** @deprecated */ published service OfficeInstallationDirectories {
     interface ::com::sun::star::util::XOfficeInstallationDirectories;
    };
    published interface XPathSettings {
     interface ::com::sun::star::beans::XPropertySet;
     [attribute] string Addin;
     [attribute] string AutoCorrect;
     [attribute] string AutoText;
     [attribute] string Backup;
     [attribute] string Basic;
     [attribute] string Bitmap;
     [attribute] string Config;
     [attribute] string Dictionary;
     [attribute] string Favorite;
     [attribute] string Filter;
     [attribute] string Gallery;
     [attribute] string Graphic;
     [attribute] string Help;
     [attribute] string Linguistic;
     [attribute] string Module;
     [attribute] string Palette;
     [attribute] string Plugin;
     [attribute] string Storage;
     [attribute] string Temp;
     [attribute] string Template;
     [attribute] string UIConfig;
     [attribute] string UserConfig;
     /** @deprecated */ [attribute] string UserDictionary;
     [attribute] string Work;
     [attribute] string BasePathShareLayer;
     [attribute] string BasePathUserLayer;
    };
    /** @deprecated */ published service PathSettings: ::com::sun::star::util::XPathSettings;
    published interface XStringSubstitution {
     interface ::com::sun::star::uno::XInterface;
     string substituteVariables([in] string aText, [in] boolean bSubstRequired) raises (::com::sun::star::container::NoSuchElementException);
     string reSubstituteVariables([in] string aText);
     string getSubstituteVariableValue([in] string variable) raises (::com::sun::star::container::NoSuchElementException);
    };
    published service PathSubstitution: ::com::sun::star::util::XStringSubstitution;
    published interface XSearchDescriptor {
     interface ::com::sun::star::beans::XPropertySet;
     string getSearchString();
     void setSearchString([in] string aString);
    };
    published service SearchDescriptor {
     interface ::com::sun::star::util::XSearchDescriptor;
     interface ::com::sun::star::beans::XPropertySet;
     [property] boolean SearchBackwards;
     [property] boolean SearchCaseSensitive;
     [property] boolean SearchWords;
     [property] boolean SearchRegularExpression;
     [property] boolean SearchStyles;
     [property] boolean SearchSimilarity;
     [property] boolean SearchSimilarityRelax;
     [property] short SearchSimilarityRemove;
     [property] short SearchSimilarityAdd;
     [property] short SearchSimilarityExchange;
    };
    published interface XReplaceDescriptor {
     interface ::com::sun::star::util::XSearchDescriptor;
     string getReplaceString();
     void setReplaceString([in] string aReplaceString);
    };
    published service ReplaceDescriptor {
     service ::com::sun::star::util::SearchDescriptor;
     interface ::com::sun::star::util::XReplaceDescriptor;
    };
    published enum SearchAlgorithms {
     ABSOLUTE = 0,
     REGEXP = 1,
     APPROXIMATE = 2
    };
    published constants SearchFlags {
     /** @deprecated */ const long ALL_IGNORE_CASE = 1;
     const long LEV_RELAXED = 65536;
     const long NORM_WORD_ONLY = 16;
     /** @deprecated */ const long REG_EXTENDED = 256;
     /** @deprecated */ const long REG_NEWLINE = 1024;
     /** @deprecated */ const long REG_NOSUB = 512;
     const long REG_NOT_BEGINOFLINE = 2048;
     const long REG_NOT_ENDOFLINE = 4096;
    };
    published struct SearchOptions {
     ::com::sun::star::util::SearchAlgorithms algorithmType;
     long searchFlag;
     string searchString;
     string replaceString;
     ::com::sun::star::lang::Locale Locale;
     long changedChars;
     long deletedChars;
     long insertedChars;
     long transliterateFlags;
    };
    published struct SearchResult {
     long subRegExpressions;
     sequence< long > startOffset;
     sequence< long > endOffset;
    };
    /** @deprecated */ published service Sortable {
     interface ::com::sun::star::util::XSortable;
    };
    published interface XTextSearch {
     interface ::com::sun::star::uno::XInterface;
     void setOptions([in] ::com::sun::star::util::SearchOptions options);
     ::com::sun::star::util::SearchResult searchForward([in] string searchStr, [in] long startPos, [in] long endPos);
     ::com::sun::star::util::SearchResult searchBackward([in] string searchStr, [in] long startPos, [in] long endPos);
    };
    published service TextSearch: ::com::sun::star::util::XTextSearch;
    published interface XURLTransformer {
     interface ::com::sun::star::uno::XInterface;
     boolean parseStrict([inout] ::com::sun::star::util::URL aURL);
     boolean parseSmart([inout] ::com::sun::star::util::URL aURL, [in] string sSmartProtocol);
     boolean assemble([inout] ::com::sun::star::util::URL aURL);
     string getPresentation([in] ::com::sun::star::util::URL aURL, [in] boolean bWithPassword);
    };
    published service URLTransformer: ::com::sun::star::util::XURLTransformer;
    published interface XStringWidth;
    published interface XStringAbbreviation {
     interface ::com::sun::star::uno::XInterface;
     string abbreviateString([in] ::com::sun::star::util::XStringWidth xStringWidth, [in] long nWidth, [in] string aString);
    };
    published interface XAtomServer {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::util::AtomDescription > getClass([in] long atomClass);
     sequence< sequence< ::com::sun::star::util::AtomDescription > > getClasses([in] sequence< long > atomClasses);
     sequence< string > getAtomDescriptions([in] sequence< ::com::sun::star::util::AtomClassRequest > atoms);
     sequence< ::com::sun::star::util::AtomDescription > getRecentAtoms([in] long atomClass, [in] long atom);
     long getAtom([in] long atomClass, [in] string description, [in] boolean create);
    };
    published interface XChainable {
     interface ::com::sun::star::uno::XInterface;
     ::com::sun::star::util::XChainable getPredecessor();
     ::com::sun::star::util::XChainable getSuccessor();
     void setSuccessor([in] ::com::sun::star::util::XChainable xChainable) raises (::com::sun::star::lang::IllegalArgumentException);
     boolean isChainable([in] ::com::sun::star::util::XChainable xChainable);
    };
    published interface XChangesListener {
     interface ::com::sun::star::lang::XEventListener;
     void changesOccurred([in] ::com::sun::star::util::ChangesEvent Event);
    };
    published interface XChangesSet {
     interface ::com::sun::star::container::XElementAccess;
     sequence< ::com::sun::star::util::ElementChange > getAllChanges();
    };
    published interface XCloseListener {
     interface ::com::sun::star::lang::XEventListener;
     void queryClosing([in] ::com::sun::star::lang::EventObject Source, [in] boolean GetsOwnership) raises (::com::sun::star::util::CloseVetoException);
     void notifyClosing([in] ::com::sun::star::lang::EventObject Source);
    };
    published interface XDataEditorListener;
    published interface XDataEditor {
     interface ::com::sun::star::uno::XInterface;
     void show();
     void setModel([in] ::com::sun::star::uno::XInterface model);
     ::com::sun::star::uno::XInterface getModel();
     void addDataEditorListener([in] ::com::sun::star::util::XDataEditorListener listener);
     void removeDataEditorListener([in] ::com::sun::star::util::XDataEditorListener listener);
    };
    published interface XDataEditorListener {
     interface ::com::sun::star::uno::XInterface;
     void updateDataEditorState([in] ::com::sun::star::util::DataEditorEvent event);
    };
    published interface XFlushListener {
     interface ::com::sun::star::lang::XEventListener;
     void flushed([in] ::com::sun::star::lang::EventObject rEvent);
    };
    published interface XLinkUpdate {
     interface ::com::sun::star::uno::XInterface;
     void updateLinks();
    };
    published interface XModeChangeApproveListener {
     interface ::com::sun::star::lang::XEventListener;
     void approveModeChange([in] ::com::sun::star::util::ModeChangeEvent rSource) raises (::com::sun::star::util::VetoException);
    };
    published interface XModeChangeListener;
    published interface XModeChangeBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addModeChangeListener([in] ::com::sun::star::util::XModeChangeListener rxListener);
     void removeModeChangeListener([in] ::com::sun::star::util::XModeChangeListener rxListener);
     void addModeChangeApproveListener([in] ::com::sun::star::util::XModeChangeApproveListener rxListener) raises (::com::sun::star::lang::NoSupportException);
     void removeModeChangeApproveListener([in] ::com::sun::star::util::XModeChangeApproveListener rxListener) raises (::com::sun::star::lang::NoSupportException);
    };
    published interface XModeChangeListener {
     interface ::com::sun::star::lang::XEventListener;
     void modeChanged([in] ::com::sun::star::util::ModeChangeEvent rSource);
    };
    published interface XModifyListener {
     interface ::com::sun::star::lang::XEventListener;
     void modified([in] ::com::sun::star::lang::EventObject aEvent);
    };
    published interface XPropertyReplace {
     interface ::com::sun::star::util::XReplaceDescriptor;
     boolean getValueSearch();
     void setValueSearch([in] boolean bValueSearch);
     sequence< ::com::sun::star::beans::PropertyValue > getSearchAttributes();
     void setSearchAttributes([in] sequence< ::com::sun::star::beans::PropertyValue > aSearchAttribs) raises (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::lang::IllegalArgumentException);
     sequence< ::com::sun::star::beans::PropertyValue > getReplaceAttributes();
     void setReplaceAttributes([in] sequence< ::com::sun::star::beans::PropertyValue > aSearchAttribs) raises (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XRefreshListener {
     interface ::com::sun::star::lang::XEventListener;
     void refreshed([in] ::com::sun::star::lang::EventObject rEvent);
    };
    published interface XStringWidth {
     interface ::com::sun::star::uno::XInterface;
     long queryStringWidth([in] string aString);
    };
    published interface XUniqueIDFactory {
     interface ::com::sun::star::uno::XInterface;
     string createUniqueID();
    };
    published singleton theOfficeInstallationDirectories: ::com::sun::star::util::XOfficeInstallationDirectories;
    published singleton thePathSettings: ::com::sun::star::util::XPathSettings;
   };
   module view {
    published constants DocumentZoomType {
     const short BY_VALUE = 3;
     const short ENTIRE_PAGE = 2;
     const short OPTIMAL = 0;
     const short PAGE_WIDTH = 1;
     const short PAGE_WIDTH_EXACT = 4;
    };
    published enum PaperFormat {
     A3 = 0,
     A4 = 1,
     A5 = 2,
     B4 = 3,
     B5 = 4,
     LETTER = 5,
     LEGAL = 6,
     TABLOID = 7,
     USER = 8
    };
    published enum PrintableState {
     JOB_STARTED = 0,
     JOB_COMPLETED = 1,
     JOB_SPOOLED = 2,
     JOB_ABORTED = 3,
     JOB_FAILED = 4,
     JOB_SPOOLING_FAILED = 5
    };
    published struct PrintJobEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::view::PrintableState State;
    };
    published service PrintOptions {
     [property] short CopyCount;
     [property] string FileName;
     [property] boolean Collate;
     /** @deprecated */ [property] boolean Sort;
     [property] string Pages;
     [property, optional] boolean Wait;
     [property, optional] short DuplexMode;
     [property, optional] string PrinterName;
    };
    published service PrintSettings {
     [property] boolean PrintBlackFonts;
     [property] boolean PrintControls;
     [property] boolean PrintDrawings;
     [property] boolean PrintGraphics;
     [property] boolean PrintLeftPages;
     [property] boolean PrintRightPages;
     [property] boolean PrintTables;
     [property] boolean PrintReversed;
     [property] boolean PrintProspect;
     [property] boolean PrintPageBackground;
     [property] short PrintAnnotationMode;
    };
    published struct PrintableStateEvent: ::com::sun::star::lang::EventObject {
     ::com::sun::star::view::PrintableState State;
    };
    published service PrinterDescriptor {
     [property] string Name;
     [property] ::com::sun::star::view::PaperOrientation PaperOrientation;
     [property] ::com::sun::star::view::PaperFormat PaperFormat;
     [property] ::com::sun::star::awt::Size PaperSize;
     [property, readonly] boolean IsBusy;
     [property, readonly] boolean CanSetPaperOrientation;
     [property, readonly] boolean CanSetPaperFormat;
     [property, readonly] boolean CanSetPaperSize;
    };
    published service RenderDescriptor {
     [property] ::com::sun::star::awt::Size PageSize;
    };
    published service RenderOptions {
     [property] ::com::sun::star::awt::XDevice RenderDevice;
     [property, optional] boolean IsFirstPage;
     [property, optional] boolean IsLastPage;
     [property, optional] boolean IsSkipEmptyPages;
     [property, optional] string PageRange;
    };
    published service ViewSettings {
     interface ::com::sun::star::beans::XPropertySet;
     [property, optional] boolean ShowHoriRuler;
     [property, optional] boolean ShowHoriScrollBar;
     [property, optional] short ZoomValue;
     [property, optional] boolean ShowVertRuler;
     [property, optional] boolean ShowVertScrollBar;
    };
    published interface XLineCursor {
     interface ::com::sun::star::uno::XInterface;
     boolean isAtStartOfLine();
     boolean isAtEndOfLine();
     void gotoEndOfLine([in] boolean bExpand);
     void gotoStartOfLine([in] boolean bExpand);
    };
    published interface XPrintJob {
     interface ::com::sun::star::uno::XInterface;
     sequence< ::com::sun::star::beans::PropertyValue > getPrintOptions();
     sequence< ::com::sun::star::beans::PropertyValue > getPrinter();
     ::com::sun::star::view::XPrintable getPrintable();
     void cancelJob();
    };
    published interface XPrintJobListener {
     interface ::com::sun::star::lang::XEventListener;
     void printJobEvent([in] ::com::sun::star::view::PrintJobEvent Event);
    };
    published interface XPrintableListener;
    published interface XPrintableBroadcaster {
     interface ::com::sun::star::uno::XInterface;
     void addPrintableListener([in] ::com::sun::star::view::XPrintableListener xListener);
     void removePrintableListener([in] ::com::sun::star::view::XPrintableListener xListener);
    };
    published interface XPrintableListener {
     interface ::com::sun::star::lang::XEventListener;
     void stateChanged([in] ::com::sun::star::view::PrintableStateEvent Event);
    };
    published interface XRenderable {
     interface ::com::sun::star::uno::XInterface;
     long getRendererCount([in] any aSelection, [in] sequence< ::com::sun::star::beans::PropertyValue > xOptions) raises (::com::sun::star::lang::IllegalArgumentException);
     sequence< ::com::sun::star::beans::PropertyValue > getRenderer([in] long nRenderer, [in] any aSelection, [in] sequence< ::com::sun::star::beans::PropertyValue > xOptions) raises (::com::sun::star::lang::IllegalArgumentException);
     void render([in] long nRenderer, [in] any aSelection, [in] sequence< ::com::sun::star::beans::PropertyValue > xOptions) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published interface XViewCursor {
     interface ::com::sun::star::uno::XInterface;
     boolean goDown([in] short nCount, [in] boolean bExpand);
     boolean goUp([in] short nCount, [in] boolean bExpand);
     boolean goLeft([in] short nCount, [in] boolean bExpand);
     boolean goRight([in] short nCount, [in] boolean bExpand);
    };
   };
   module xml {
    published service AttributeContainer {
     interface ::com::sun::star::container::XNameContainer;
    };
    published struct AttributeData {
     string Namespace;
     string Type;
     string Value;
    };
    published interface XExportFilter {
     interface ::com::sun::star::uno::XInterface;
     boolean exporter([in] sequence< ::com::sun::star::beans::PropertyValue > aSourceData, [in] sequence< string > msUserData) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service ExportFilter {
     interface ::com::sun::star::xml::sax::XDocumentHandler;
     interface ::com::sun::star::xml::XExportFilter;
    };
    published interface XImportFilter {
     interface ::com::sun::star::uno::XInterface;
     boolean importer([in] sequence< ::com::sun::star::beans::PropertyValue > aSourceData, [in] ::com::sun::star::xml::sax::XDocumentHandler xDocHandler, [in] sequence< string > msUserData) raises (::com::sun::star::lang::IllegalArgumentException);
    };
    published service ImportFilter {
     interface ::com::sun::star::xml::XImportFilter;
    };
    published service NamespaceContainer {
     interface ::com::sun::star::container::XNameContainer;
    };
    published service TextUserDefinedAttributesSupplier {
     [property] ::com::sun::star::container::XNameContainer TextUserDefinedAttributes;
    };
    published service XMLExportFilter {
     service ::com::sun::star::document::ExportFilter;
    };
    published service XMLImportFilter {
     service ::com::sun::star::document::ImportFilter;
     interface ::com::sun::star::xml::sax::XDocumentHandler;
    };
    module sax {
     published struct InputSource {
      ::com::sun::star::io::XInputStream aInputStream;
      string sEncoding;
      string sPublicId;
      string sSystemId;
     };
     published interface XDTDHandler;
     published interface XEntityResolver;
     published interface XErrorHandler;
     published interface XParser {
      interface ::com::sun::star::uno::XInterface;
      void parseStream([in] ::com::sun::star::xml::sax::InputSource aInputSource) raises (::com::sun::star::xml::sax::SAXException, ::com::sun::star::io::IOException);
      void setDocumentHandler([in] ::com::sun::star::xml::sax::XDocumentHandler xHandler);
      void setErrorHandler([in] ::com::sun::star::xml::sax::XErrorHandler xHandler);
      void setDTDHandler([in] ::com::sun::star::xml::sax::XDTDHandler xHandler);
      void setEntityResolver([in] ::com::sun::star::xml::sax::XEntityResolver xResolver);
      void setLocale([in] ::com::sun::star::lang::Locale locale);
     };
     published service Parser: ::com::sun::star::xml::sax::XParser;
     published exception SAXInvalidCharacterException: ::com::sun::star::xml::sax::SAXException {
     };
     published exception SAXParseException: ::com::sun::star::xml::sax::SAXException {
      string PublicId;
      string SystemId;
      long LineNumber;
      long ColumnNumber;
     };
     published interface XExtendedDocumentHandler {
      interface ::com::sun::star::xml::sax::XDocumentHandler;
      void startCDATA() raises (::com::sun::star::xml::sax::SAXException);
      void endCDATA() raises (::com::sun::star::xml::sax::SAXException);
      void comment([in] string sComment) raises (::com::sun::star::xml::sax::SAXException);
      void allowLineBreak() raises (::com::sun::star::xml::sax::SAXException);
      void unknown([in] string sString) raises (::com::sun::star::xml::sax::SAXException);
     };
     published interface XAttributeList {
      interface ::com::sun::star::uno::XInterface;
      short getLength();
      string getNameByIndex([in] short i);
      string getTypeByIndex([in] short i);
      string getTypeByName([in] string aName);
      string getValueByIndex([in] short i);
      string getValueByName([in] string aName);
     };
     published interface XDTDHandler {
      interface ::com::sun::star::uno::XInterface;
      void notationDecl([in] string sName, [in] string sPublicId, [in] string sSystemId);
      void unparsedEntityDecl([in] string sName, [in] string sPublicId, [in] string sSystemId, [in] string sNotationName);
     };
     published interface XEntityResolver {
      interface ::com::sun::star::uno::XInterface;
      ::com::sun::star::xml::sax::InputSource resolveEntity([in] string sPublicId, [in] string sSystemId);
     };
     published interface XErrorHandler {
      interface ::com::sun::star::uno::XInterface;
      void error([in] any aSAXParseException) raises (::com::sun::star::xml::sax::SAXException);
      void fatalError([in] any aSAXParseException) raises (::com::sun::star::xml::sax::SAXException);
      void warning([in] any aSAXParseException) raises (::com::sun::star::xml::sax::SAXException);
     };
     published interface XLocator {
      interface ::com::sun::star::uno::XInterface;
      long getColumnNumber();
      long getLineNumber();
      string getPublicId();
      string getSystemId();
     };
    };
   };
  };
 };
};
