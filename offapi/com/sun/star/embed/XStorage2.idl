/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_embed_XStorage2_idl__
#define __com_sun_star_embed_XStorage2_idl__

#include <com/sun/star/embed/XStorage.idl>
#include <com/sun/star/beans/NamedValue.idl>



 module com {  module sun {  module star {  module embed {

/** This interface extends the base XStorage interface.
 */
interface XStorage2 : XStorage
{
    /** allows to get access to a child encrypted stream with EncryptionData.

        <p>
        If storage does not allow any encryption this method will always throw
        com::sun::star::packages::NoEncryptionException.
        </p>

        <p>
        In case the stream is open in readonly mode the
        com::sun::star::io::XStream::getOutputStream()
        method will return an empty reference.
        </p>

        @param sStreamName
            the name of the substream that should be open

        @param nOpenMode
            a mode the stream should be open in,
            can be a combination of ElementModes values

        @param aEncryptionData
            this parameter allowes to specify an encryption data to decrypt the
            stream, the encryption data must be correct, otherwise an
            exception will be thrown

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::packages::NoEncryptionException
            the stream is not encrypted

        @throws ::com::sun::star::packages::WrongPasswordException
            the provided encryption data is wrong

        @throws ::com::sun::star::io::IOException
            in case of io errors during stream opening

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions
     */
    ::com::sun::star::io::XStream  openEncryptedStream(
            [in] string sStreamName,
            [in] long nOpenMode,
            [in] sequence< ::com::sun::star::beans::NamedValue > aEncryptionData )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::packages::NoEncryptionException,
                ::com::sun::star::packages::WrongPasswordException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    /** allows to get readonly copy of a child encrypted stream with encryption
        data.

        <p>
        If storage does not allow any encryption this method will always throw
        com::sun::star::packages::NoEncryptionException.
        </p>

        <p>
        The stream is open in readonly mode so the
        com::sun::star::io::XStream::getOutputStream()
        method will return an empty reference.
        </p>

        <p>
        This method allows to specify encryption data for the child stream
        explicitly.
        </p>

        @param sStreamName
            the name of the substream that should be copied

        @param aEncryptionData
            this parameter allowes to specify an encryption data for the
            stream, the encryption data must be correct, otherwise an
            exception will be thrown

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::packages::NoEncryptionException
            the stream is not encrypted

        @throws ::com::sun::star::packages::WrongPasswordException
            the provided encryption data is wrong

        @throws ::com::sun::star::io::IOException
            in case of io errors during stream opening

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions
     */
    ::com::sun::star::io::XStream cloneEncryptedStream(
            [in] string sStreamName,
            [in] sequence< ::com::sun::star::beans::NamedValue > aEncryptionData )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::packages::NoEncryptionException,
                ::com::sun::star::packages::WrongPasswordException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
