/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/**
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_embed_StorageFactory_idl__
#define __com_sun_star_embed_StorageFactory_idl__

#include <com/sun/star/lang/XSingleServiceFactory.idl>



 module com {  module sun {  module star {  module embed {

/** The <type>StorageFactory</type> is a service that allows to create
    a storage based on either stream or URL.

    <p>
    In case
    <method scope="com::sun::star::lang">XSingleServiceFactory::createInstance</method>
    call is used the result storage will be open in read-write mode based
    on an arbitrary medium.
    </p>

    <p>
    In case
    <method scope="com::sun::star::lang">XSingleServiceFactory::createInstanceWithArguments</method>
    call is used a sequence of the following parameters can be used:
    </p>

    <dl>
        <dt>parameter 1</dt>
        <dd>
                  specifies source of the object, it can be a string
                  containing URL, an
                  <type scope="com::sun::star::io">XStream</type>
                  implementation or
                  <type scope="com::sun::star::io">XInputStream</type>;
                  in case of
                  <type scope="com::sun::star::io">XStream</type>
                  implementation
                  the <type scope="com::sun::star::io">XSeekable</type>
                  interface must be supported.
        </dd>

        <dt>parameter 2</dt>
        <dd>
                  specifies mode the storage should be open in, can take
                  values from <type>ElementModes</type> constant set.
        </dd>

        <dt>parameter 3</dt>
        <dd>
                  this parameter represents
                  <type scope="com::sun::star::uno">Any</type>
                  containing a sequence of
                  <type scope="com::sun::star::beans">PropertyValue</type>.<br>
                  The parameter can contain entries from
                  <type scope="com::sun::star::document">MediaDescryptor</type>
                  to transport some document info during the storage
                  initialization, it can be for example
                  <type scope="com::sun::star::task">XInteractionHandler</type>
                  implementation, password for the storage and repair
                  package flag.<br>
                  Additionally the parameter might contain property with the name
                  "StorageFormat" that can take values from
                  <type scope="com::sun::star::embed">StorageFormats</type>.
                  If the property is not provided a storage of package format
                  is created.
        </dd>
    </dl>

    <p>
    The parameters are optional, that means that sequence can be empty or
    contain only first parameter, or first and second one. In case
    no parameters are provided the call works the same way as
    <member scope="com::sun::star::lang">XSingleServiceFactory::createInstance</member>.
    In case only first parameter is provided, the storage is opened in
    readonly mode.
    </p>

    <p>
    The opened root storage can support read access in addition to
    specified one.
    </p>
*/
published service StorageFactory
    : ::com::sun::star::lang::XSingleServiceFactory;


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
