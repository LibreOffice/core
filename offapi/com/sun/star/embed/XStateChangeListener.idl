/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_embed_XStateChangeListener_idl__
#define __com_sun_star_embed_XStateChangeListener_idl__

#include <com/sun/star/lang/XEventListener.idl>

#include <com/sun/star/lang/EventObject.idl>

#include <com/sun/star/embed/WrongStateException.idl>


module com {  module sun {  module star {  module embed {


/** makes it possible to receive events when an embedded object changes it's
    state.
 */
published interface XStateChangeListener: com::sun::star::lang::XEventListener
{
    /** is called just before the object changes state.

        <p>
        Actually the listener can try to complain about state changing, but
        it is up to object to decide whether the state change can be
        prevented. Anyway the possibility to complain must be used very
        carefully.
        </p>

        @param aEvent
            specifies the object that is going to change own state

        @param nOldState
            specifies the old state of the object

        @param nNewState
            specifies the new state of the object

        @throws ::com::sun::star::embed::WrongStateException
            the state change is unexpected by listener
     */
    void changingState( [in] com::sun::star::lang::EventObject aEvent,
                        [in] long nOldState,
                        [in] long nNewState )
        raises( ::com::sun::star::embed::WrongStateException );

    /** is called after the object has changed state.

        @param aEvent
            specifies the object that has changed own state

        @param nOldState
            specifies the old state of the object

        @param nNewState
            specifies the new state of the object
     */
    void stateChanged( [in] com::sun::star::lang::EventObject aEvent,
                        [in] long nOldState,
                        [in] long nNewState );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
