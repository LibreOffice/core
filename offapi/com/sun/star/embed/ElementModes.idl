/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_embed_ElementModes_idl__
#define __com_sun_star_embed_ElementModes_idl__



module com { module sun { module star { module embed {

/** The constant set contains possible modes to open an element.

    <p>
    The modes can be combined by "or" operation.
    <const>ElementModes::READ</const> and <const>ElementModes::WRITE</const>
    are base modes. A result mode must include one of base modes.
    </p>

    @see <type>XStorage</type>
*/
published constants ElementModes
{
    /** specifies opening of an element for reading.
     */
    const long READ = 1;

    /** specifies opening of a seekable element.

        <p>
        This mode is ignored for <type>Storage</type> elements.
        This flag makes sense only in combination with
        <const>ElementModes::READ</const> and/or
        <const>ElementModes::WRITE</const>.
        </p>
     */
    const long SEEKABLE = 2;

    /** specifies opening of a seekable element for reading.

        <p>
        This is just a combination of the previous two values. For storages
        it is the same as <const>ElementModes::READ</const>.
        </p>
     */
    const long SEEKABLEREAD = 3;

    /** specifies opening of an element for writing.
     */
    const long WRITE = 4;

    /** specifies opening of an element for reading and writing.

        <p>
        For a stream element is also specifies that it must be seekable.
        </p>
     */
    const long READWRITE = 7;

    /** lets the document be truncated immediately after opening.

        <p>
        This flag makes sense only in combination with
        <const>ElementModes::WRITE</const>.
        </p>
     */
    const long TRUNCATE = 8;

    /** restricts creation of a new element on opening in case a requested one
        does not exist.

        <p>
        This flag makes sense only in combination with
        <const>ElementModes::WRITE</const>.
        </p>
     */
    const long NOCREATE = 16;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
