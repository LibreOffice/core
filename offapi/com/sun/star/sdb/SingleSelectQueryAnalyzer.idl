/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdb_SingleSelectQueryAnalyzer_idl__
#define __com_sun_star_sdb_SingleSelectQueryAnalyzer_idl__

#include <com/sun/star/sdb/XSingleSelectQueryAnalyzer.idl>

 module com {  module sun {  module star {  module sdbcx {
interface XTablesSupplier;
interface XColumnsSupplier;
};};};};

 module com {  module sun {  module star {  module sdb {

 interface XParametersSupplier;
/** represents a service for analyzing a single select statement.

    <p>
    It hides the complexity of parsing and evaluating a single select statement and provides
    sophisticated methods for accessing a statements filter, group by, having and order
    criteria, as well as the corresponding select columns and tables.
    If supported, it even gives access to the parameters.
    </p>

    @see com::sun::star::sdb::SingleSelectQueryComposer
 */
service SingleSelectQueryAnalyzer
{
    interface XSingleSelectQueryAnalyzer;

    /** access to the selected tables.

        <p>The selected tables are those present in the <code>FROM</code> part
        of a <code>SELECT</code> statement.</p>

        <p>Note that OpenOffice.org since version 2.0.4 also supports queries which are
        based on other queries. For example, given that you have a database containing
        a query named <code>All Orders</code>, the SQL statement <code>SELECT * FROM "All Orders"</code>
        is perfectly valid when used with a SingleSelectQueryAnalyzer.</p>

        <p>In this case, the name container returned by com::sun::star::sdbcx::XTablesSupplier::getTables()
        will in fact not return a Table, but a Query object. Semantically, however,
        this object still acts as a table in the SQL statement.</p>

        @see XSingleSelectQueryAnalyzer::getQueryWithSubstitution
     */
    interface com::sun::star::sdbcx::XTablesSupplier;

    /** access the selected columns.
     */
    interface com::sun::star::sdbcx::XColumnsSupplier;

    /** access to the parameters which are used in the where clause.
     */
    [optional] interface com::sun::star::sdb::XParametersSupplier;
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
