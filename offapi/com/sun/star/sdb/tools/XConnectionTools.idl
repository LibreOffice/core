/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_sdb_tools_XConnectionTools_idl__
#define __com_sun_star_sdb_tools_XConnectionTools_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/sdbc/SQLException.idl>

module com {  module sun {  module star {
    module container {
        interface XNameAccess;
    };
    module lang {
        interface XComponent;
    };
};};};
module com {  module sun {  module star {  module sdb {
    interface XSingleSelectQueryComposer;
    module tools {

interface XTableName;
interface XObjectNames;
interface XDataSourceMetaData;

/** encapsulates various useful functionality around a
    com::sun::star::sdb::Connection

    <p>Most of the functionality provided here is meaningful only relative to
    a given database connection. For instance, for quoting table names, you need
    the meta data instance of the connection. Thus, the entry point for obtaining
    a XConnectionTools instance is the
    com::sun::star::sdb::Connection service.</p>

    <p>Note that nearly all functionality provided by this interface is also
    available by other means, it's only provided here for convenience purposes.</p>

    @since OOo 2.0.4
*/
interface XConnectionTools
{
    /** creates an instance supporting the XTableName interface,
        which can be used to manipulate table names for various purposes.

        <p>The returned object is guaranteed to not be `NULL`.</p>
    */
    XTableName      createTableName();

    /** returns an instance supporting the XObjectNames interface,
        which provides access to functionality around table and query names.

        <p>The returned object is guaranteed to not be `NULL`.</p>
    */
    XObjectNames    getObjectNames();

    /** provides access to the application-level data source meta data
    */
    XDataSourceMetaData
                    getDataSourceMetaData();

    /** get fields for a result set given by a "command descriptor"

        <p>A command descriptor here means:
        <ul><li>a SDB-level connection (com.sun.star.sdb::Connection</li>
            <li>a string specifying the name of an object relative to the connection</li>
            <li>a com.sun.star.sdb::CommandType value specifying the type
                of the object</li>
        </ul>
        </p>

        @param commandType
            the type of the object

        @param command
            the object. This may be a table name, a query name, or an SQL statement, depending on the value
            of _nCommandType

        @param keepFieldsAlive
            If (and only if) CommandType is CommandType.COMMAND, the fields collection which is returned
            by this function here is a temporary object. It is kept alive by another object, which is to be
            created temporarily, too. To ensure that the fields you get are valid as long as you need them,
            the owner which controls their life time is transferred to this parameter upon return.<br/>
            Your fields live as long as this component lives.<br/>
            Additionally, you are encouraged to dispose this component as soon as you don't need the fields anymore.
            It depends on the connection's implementation if this is necessary, but the is no guarantee, so to
            be on the safe side with respect to resource leaks, you should dispose the component.

        @return
            the container of the columns (aka fields) of the object
    */
    ::com::sun::star::container::XNameAccess getFieldsByCommandDescriptor(  [in] long commandType,
                                                                            [in] string command,
                                                                            [out] ::com::sun::star::lang::XComponent  keepFieldsAlive
                                                                            ) raises( com::sun::star::sdbc::SQLException );

    /** get the composer initialized with a command and command type.
        @param commandType
            the type of the object

        @param command
            the object. This may be a table name, a query name, or an SQL statement, depending on the value
            of _nCommandType
        @return
            the composer filled with command and command type.
    */
    ::com::sun::star::sdb::XSingleSelectQueryComposer getComposer([in] long commandType,[in] string command);
};

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
