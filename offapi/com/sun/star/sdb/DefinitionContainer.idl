/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdb_DefinitionContainer_idl__
#define __com_sun_star_sdb_DefinitionContainer_idl__

 module com {  module sun {  module star {  module container {
 published interface XNameAccess;
 published interface XNameContainer;
 published interface XIndexAccess;
 published interface XEnumerationAccess;
};};};};

 module com {  module sun {  module star {  module util {
 published interface XRefreshable;
};};};};
 module com {  module sun {  module star {  module lang {
 published interface XSingleServiceFactory;
};};};};

 module com {  module sun {  module star {  module sdb {


/** describes a container which provides access to database related definitions like
    commands, forms, and reports.

    <p>
    The container supports access to its elements by the elements name or
    by the elements position.
    </p>
    <p>
    Simple enumeration must be supported as well.
    </p>
    <p>
    To reflect the changes with the underlying database, a refresh mechanism
    needs to be supported.
    </p>
 */
published service DefinitionContainer
{
    // gives access to the elements by name.
    interface com::sun::star::container::XNameAccess;

    // allows to insert and remove by name.
    interface com::sun::star::container::XNameContainer;

    // gives access to the elements by index.
    interface com::sun::star::container::XIndexAccess;

    // allows to create an enumeration of the elements.
    interface com::sun::star::container::XEnumerationAccess;


    /** is used to refresh the container, to reflect changes in the underlying database.
     */
    [optional] interface com::sun::star::util::XRefreshable;

    /** can be used to create container elements.
        <p>
        If this interface is supported, the object created using it (e.g., the object returned by
        com.sun.star.lang::XSingleServiceFactory::createInstance()
        ) can be used as container elements.
        </p>
     */
    [optional] interface com::sun::star::lang::XSingleServiceFactory;
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
