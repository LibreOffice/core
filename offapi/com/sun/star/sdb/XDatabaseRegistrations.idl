/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_sdb_XDatabaseRegistrations_idl__
#define __com_sun_star_sdb_XDatabaseRegistrations_idl__

#include <com/sun/star/container/NoSuchElementException.idl>
#include <com/sun/star/container/ElementExistException.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/lang/IllegalAccessException.idl>


module com { module sun { module star { module sdb {

published interface XDatabaseRegistrationsListener;


/** provides access to the application-wide registered databases.

    <p>This interface provides a mere wrapper around the respective configuration data,
    this way hiding the concrete configuration structure from its clients. You should,
    if possible at all, use this interface, instead of modifying or querying the configuration
    data directly.</p>

    @since OOo 3.3
 */
published interface XDatabaseRegistrations
{
    /** determines whether a database is registered under the given name.

        @throws ::com::sun::star::lang::IllegalArgumentException
            if the given name is empty
    */
    boolean hasRegisteredDatabase( [in] string Name )
        raises  (   ::com::sun::star::lang::IllegalArgumentException
                );

    /** returns the names of all registered databases
    */
    sequence< string >
            getRegistrationNames();

    /** returns the location of the database registered under the given name

        @throws ::com::sun::star::lang::IllegalArgumentException
            if the given name is empty

        @throws ::com::sun::star::container::NoSuchElementException
            if there is no database registered under this name
    */
    string  getDatabaseLocation( [in] string Name )
        raises  (   ::com::sun::star::lang::IllegalArgumentException
                ,   ::com::sun::star::container::NoSuchElementException
                );

    /** registers a database, given by location, under a given name

        @throws ::com::sun::star::lang::IllegalArgumentException
            if the given name is empty, or the given location is invalid.

        @throws ::com::sun::star::container::ElementExistException
            if there already is a databases registered under the given name.
    */
    void    registerDatabaseLocation( [in] string Name, [in] string Location )
        raises  (   ::com::sun::star::lang::IllegalArgumentException
                ,   ::com::sun::star::container::ElementExistException
                );

    /** revokes the registration of a database, given by name

        @throws ::com::sun::star::lang::IllegalArgumentException
            if the given name is empty

        @throws ::com::sun::star::container::NoSuchElementException
            if there is no database registered under this name

        @throws ::com::sun::star::lang::IllegalAccessException
            if the registration data for this database is read-only
    */
    void    revokeDatabaseLocation( [in] string Name )
        raises  (   ::com::sun::star::lang::IllegalArgumentException
                ,   ::com::sun::star::container::NoSuchElementException
                ,   ::com::sun::star::lang::IllegalAccessException
                );

    /** changes the location of a given database registration

        @throws ::com::sun::star::lang::IllegalArgumentException
            if the given name is empty, or the given location is invalid.

        @throws ::com::sun::star::container::NoSuchElementException
            if there is no database registered under this name

        @throws ::com::sun::star::lang::IllegalAccessException
            if the registration data for this database is read-only
    */
    void    changeDatabaseLocation( [in] string Name, [in] string NewLocation )
        raises  (   ::com::sun::star::lang::IllegalArgumentException
                ,   ::com::sun::star::container::NoSuchElementException
                ,   ::com::sun::star::lang::IllegalAccessException
                );

    /** determines whether the registration data for a database given by name is
        read-only.

        <p>In this case, attempts to revoke this registration will fail.</p>

        @throws ::com::sun::star::lang::IllegalArgumentException
            if the given name is empty

        @throws ::com::sun::star::container::NoSuchElementException
            if there is no database registered under this name
    */
    boolean isDatabaseRegistrationReadOnly( [in] string Name )
        raises  (   ::com::sun::star::lang::IllegalArgumentException
                ,   ::com::sun::star::container::NoSuchElementException
                );

    /** registers a listener which is notified of changes in the registered databases
    */
    void    addDatabaseRegistrationsListener( [in] XDatabaseRegistrationsListener Listener );

    /** revokes a previously registered listener
    */
    void    removeDatabaseRegistrationsListener( [in] XDatabaseRegistrationsListener Listener );
};


}; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
