/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_resource_XStringResourceWithLocation_idl__
#define __com_sun_star_resource_XStringResourceWithLocation_idl__

#include <com/sun/star/resource/XStringResourcePersistence.idl>


module com { module sun { module star { module resource {

/**
    Extends XStringResourcePersistence by methods to handle an
    associated location.

    @see XStringResourcePersistence.
*/
interface XStringResourceWithLocation: com::sun::star::resource::XStringResourcePersistence
{
    /**
        Stores all string table data to a location and associates this location
        to this instance as if setLocation() was called with this
        location. The modified state will be unmodified after the call.

        @param URL
            the location the string table data should be stored to.
    */
    void storeAsURL( [in] string URL )
        raises( com::sun::star::uno::Exception );


    /**
        Associates a location to the StringResourceWithStorage instance
        which is used on subsequent calls of store().

        @param URL
            the location to be associated to the StringResourceManager

        <p>
        This call has to be used carefully as it removes the location
        previously connected to the StringResourceWithStorage. It may
        force the implementation to reload data from the previous
        location before releasing it. The StringResourceManager will
        be modified after calling this method as the data isn't stored
        to the new location yet. storeAsURL() should
        be preferred as it directly stores the data to the new location
        and afterwards this location is in sync with the resource data.
        </p>

        @throws com::sun::star::lang::IllegalArgumentException
            if an empty string is passed as URL

        @throws com::sun::star::lang::NoSupportException
            if the location is readonly
    */
    void setURL( [in] string URL )
        raises( ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::lang::NoSupportException );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
