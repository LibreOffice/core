/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_resource_XStringResourceWithLocation_idl__
#define __com_sun_star_resource_XStringResourceWithLocation_idl__

#include <com/sun/star/resource/XStringResourcePersistence.idl>



module com { module sun { module star { module resource {

/**
    Extends <type>XStringResourcePersistence</type> by methods to handle an
    associated location.

    @see <type>XStringResourcePersistence</type>.
*/
interface XStringResourceWithLocation: com::sun::star::resource::XStringResourcePersistence
{
    /**
        Stores all string table data to a location and associates this location
        to this instance as if <member>setLocation</member> was called with this
        location. The modified state will be unmodified after the call.

        @param URL
            the location the string table data should be stored to.
    */
    void storeAsURL( [in] string URL )
        raises( com::sun::star::uno::Exception );


    /**
        Associates a location to the StringResourceWithStorage instance
        which is used on subsequent calls of <member>store</member>.

        @param URL
            the location to be associated to the StringResourceManager

        <p>
        This call has to be used carefully as it removes the location
        previously connected to the StringResourceWithStorage. It may
        force the implementation to reload data from the previous
        location before releasing it. The StringResourceManager will
        be modified after calling this method as the data isn't stored
        to the new location yet. <member>storeAsURL</member> should
        be preferred as it directly stores the data to the new location
        and afterwards this location is in sync with the resource data.
        </p>

        @throws <type scope="com::sun::star::lang">IllegalArgumentException</type>
            if an empty string is passed as URL
    */
    void setURL( [in] string URL )
        raises( ::com::sun::star::lang::IllegalArgumentException );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
