/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_resource_XStringResourceWithStorage_idl__
#define __com_sun_star_resource_XStringResourceWithStorage_idl__

#include <com/sun/star/resource/XStringResourcePersistence.idl>



module com { module sun { module star { module resource {

/**
    Extends <type>XStringResourcePersistence</type> by methods to handle an
    associated <type scope="com::sun::star::embed">XStorage</type> instance.

    @see <type>XStringResourcePersistence</type>.
*/
interface XStringResourceWithStorage: com::sun::star::resource::XStringResourcePersistence
{
    /**
        Stores all string table data to a storage and associates this storage
        to this instance as if <member>setStorage</member> was called with
        this storage. The modified state will be unmodified after the call.

        This method can throw all exceptions thrown by the methods of
        <type scope="com::sun::star::embed">XStorage</type>
    */
    void storeAsStorage( [in] ::com::sun::star::embed::XStorage Storage )
        raises( com::sun::star::uno::Exception );


    /**
        Associates a storage to the StringResourceWithStorage instance
        which is used on subsequent calls of <member>store</member>.

        @param Storage
            the storage to be associated to the StringResourceManager

        <p>
        This call has to be used carefully as it removes the storage
        previously connected to the StringResourceWithStorage. It may
        force the implementation to reload data from the previous storage
        before releasing it. The StringResourceManager will be modified
        after calling this method as the data isn't stored to the new
        storage yet. <member>storeAsStorage</member> should be preferred
        as it directly stores the data to the new storage and afterwards
        this storage is in sync with the resource data.
        </p>

        @throws <type scope="com::sun::star::lang">IllegalArgumentException</type>
            if a null interface is passed as Storage
    */
    void setStorage( [in] ::com::sun::star::embed::XStorage Storage )
        raises( ::com::sun::star::lang::IllegalArgumentException );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
