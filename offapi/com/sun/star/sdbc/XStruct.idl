/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdbc_XStruct_idl__
#define __com_sun_star_sdbc_XStruct_idl__

#include <com/sun/star/uno/XInterface.idl>

 module com {  module sun {  module star {  module container {
 published interface XNameAccess;
};};};};

#include <com/sun/star/sdbc/SQLException.idl>

 module com {  module sun {  module star {  module sdbc {


/** is used for the standard mapping for a SQL structured type.


    <p>
    A
    <code>Struct</code>
    object contains a value for each attribute
    of the SQL structured type that it represents.
    By default, an instance of
    <code>Struct</code>
    is valid as long as the
    application has a reference to it.
    </p>
 */
published interface XStruct: com::sun::star::uno::XInterface
{

    /** retrieves the SQL type name of the SQL structured type
        that this
        <code>Struct</code>
        object represents.
        @returns
            the name of the SQL type.
        @throws SQLException
            if a database access error occurs.
     */
    string getSQLTypeName() raises (SQLException);


    /** produces the ordered values of the attributes of the SQL
             structured type that this
             <code>Struct</code>
             object represents.
             <p>
             This method uses the given type map for customizations of the type
             mappings. If there is no entry in the given type map that matches or
             the given type map is
             `NULL`
             , the structured type that this
             <code>Struct</code>
             object represents, the driver uses
             the connection type mapping.
             @param typeMap
                is a map object that contains mappings of SQL type names to
                services. If the
                <code>typeMap</code>is
                `NULL`
                , the type-map
                   associated with the connection for customizations of the type-mappings
                is used.
             @returns
                an array containing the ordered attribute values.
             @throws SQLException
                if a database access error occurs.
     */
    sequence<any> getAttributes([in]com::sun::star::container::XNameAccess typeMap)
        raises (SQLException);
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
