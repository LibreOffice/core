/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdbc_XPreparedBatchExecution_idl__
#define __com_sun_star_sdbc_XPreparedBatchExecution_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/sdbc/SQLException.idl>

 module com {  module sun {  module star {  module sdbc {


/** is used for batch execution on PreparedStatements.


    <p>
    A
    com::sun::star::sdbc::PreparedStatement
    uses one precompiled SQL Statement. In batch execution
    it is possible to set collection of parameter settings, which are executed in
    one batch job.
    </p>
 */
published interface XPreparedBatchExecution: com::sun::star::uno::XInterface
{

    /** adds a set of parameters to the batch.
        @throws SQLException
            if a database access error occurs.
     */
    void addBatch() raises (SQLException);

    /** makes the set of commands in the current batch empty.
        @throws SQLException
            if a database access error occurs.
     */
    void clearBatch() raises (SQLException);

    /** submits a batch of commands to the database for execution.
             @returns
                an array of update counts containing one element for each
                 command in the batch. The array is ordered according to the order in
                which commands were inserted into the batch.
             @throws SQLException
                if a database access error occurs.
     */
    sequence<long> executeBatch() raises (SQLException);
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
