/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdbc_RowSet_idl__
#define __com_sun_star_sdbc_RowSet_idl__

#include <com/sun/star/sdbc/ResultSet.idl>
#include <com/sun/star/sdbc/XColumnLocate.idl>

 module com {  module sun {  module star {  module container {
 published interface XNameAccess;
};};};};

 module com {  module sun {  module star {  module sdbc {

 published interface XRowSet;
 published interface XParameters;


/** is a client side ResultSet, which combines the characteristics of a
    com::sun::star::sdbc::Statement
    and a
    com::sun::star::sdbc::ResultSet.


    <p>
    It acts like a typical bean. Before you use the RowSet, you have to specify a
    set of properties like a DataSource and a Command and other properties known of
    Statement.
    <br/>
    Afterwards, you can populate the RowSet by its execute method to fill the set
    with data.
    </p>
    <p>
    On the one hand, a RowSet can be used as a short cut to retrieve the data of a DataSource.
    You don't have to establish a connection, create a Statement, and then create
    a ResultSet. On the other hand, a row set can be used to implement capabilities for
    a result set, which are not supported by a driver result set, like caching
    strategies or update capabilities.
    </p>
 */
published service RowSet
{
    service com::sun::star::sdbc::ResultSet;

    /** used to execute and to add/remove listeners.

        <p>To refresh the content of a RowSet, use this interface's XRowSet::execute()
        method.</p>
    */
    interface XRowSet;

    // used to set parameters.
    interface XParameters;

    /** allows locating columns whose name is known only.
    */
    interface XColumnLocate;

    /** is the name of a named datasource to use.@see com::sun::star::sdbc:XDataSource
     */
    [property] string DataSourceName;


    /** is the connection URL. Could be used instead of the DataSourceName.
     */
    [property] string URL;


    /** is the command which should be executed.
     */
    [property] string Command;


    /** indicates the transaction isolation level, which should be used for the
        connection.@see com::sun::star::sdbc::TransactionIsolation
     */
    [property] long TransactionIsolation;


    /** is the type map that will be used for the custom mapping of SQL structured types
        and distinct types.
     */
    [property] com::sun::star::container::XNameAccess TypeMap;


    /** returns if escape processing is on or off.
        If escape scanning is on (the default), the driver will do
        escape substitution before sending the SQL to the database.
        This is only evaluated, if the CommandType is COMMAND.
     */
    [property] boolean EscapeProcessing;


    /** retrieves the number of seconds the driver will wait for a Statement
        to execute. If the limit is exceeded, a
        com::sun::star::sdbc::SQLException
        is thrown.
        There is no limitation, if set to zero.
     */
    [property] long QueryTimeOut;


    /** returns the maximum number of bytes allowed for any column value.

        <p>
        This limit is the maximum number of bytes that can be returned
        for any column value. The limit applies only to
        com::sun::star::sdbc::DataType::BINARY
              ,
              com::sun::star::sdbc::DataType::VARBINARY
              ,
              com::sun::star::sdbc::DataType::LONGVARBINARY
              ,
              com::sun::star::sdbc::DataType::CHAR
              ,
              com::sun::star::sdbc::DataType::VARCHAR
              ,
              and
              com::sun::star::sdbc::DataType::LONGVARCHAR
              columns.
        If the limit is exceeded, the excess data is silently discarded.
        <br/>
        There is no limitation, if set to zero.
        </p>
     */
    [property] long MaxFieldSize;


    /** retrieves the maximum number of rows that a ResultSet can contain.
        If the limit is exceeded, the excess rows are silently dropped.
        <br/>
        There is no limitation, if set to zero.
     */
    [property] long MaxRows;


    /** determines the user for whom to open the connection.
     */
    [property] string User;


    /** determines the user for whom to open the connection.
     */
    [property] string Password;


    /** determine the result set type.

        @see com::sun::star::sdbc::ResultSetType
     */
    [property] long ResultSetType;
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
