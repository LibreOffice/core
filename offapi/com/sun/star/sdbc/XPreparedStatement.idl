/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdbc_XPreparedStatement_idl__
#define __com_sun_star_sdbc_XPreparedStatement_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/sdbc/SQLException.idl>

 module com {  module sun {  module star {  module sdbc {

 published interface XConnection;
 published interface XResultSet;


/** provides the possibility of executing a precompiled SQL statement.


    <p>
    A SQL statement is pre-compiled and stored in a PreparedStatement object.
    This object can then be used to efficiently execute this statement multiple
    times.
    </p>
 */
published interface XPreparedStatement: com::sun::star::uno::XInterface
{

    /** executes the SQL query in this
        <code>PreparedStatement</code>
        object and returns the result set generated by the query.
        @returns
            the ResultSet object
        @throws SQLException
            if a database access error occurs.
     */
    XResultSet executeQuery() raises (SQLException);

    /** executes the SQL INSERT, UPDATE or DELETE statement in this
        com::sun::star::sdbc::PreparedStatement
        object.
        <br/>
        In addition, SQL statements that return nothing, such as
        SQL DDL statements, can be executed.
        @returns
            either the row count for INSERT, UPDATE or DELETE statements; or 0 for SQL statements that return nothing
        @throws SQLException
            if a database access error occurs.
     */
    long executeUpdate() raises (SQLException);

    /** executes any kind of SQL statement.


        <p>
        Some prepared statements return multiple results; the execute
        method handles these complex statements as well as the simpler
        form of statements handled by executeQuery and executeUpdate.
        </p>
        @returns
            `TRUE` if successful
        @throws SQLException
            if a database access error occurs.
     */
    boolean execute() raises (SQLException);

    /** returns the
        com::sun::star::sdbc::Connection
        object
        that produced this
        com::sun::star::sdbc::Statement
        object.
        @returns
            the Connection object
        @throws SQLException
            if a database access error occurs.
     */
    XConnection getConnection() raises (SQLException);
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
