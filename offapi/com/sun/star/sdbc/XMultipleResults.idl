/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdbc_XMultipleResults_idl__
#define __com_sun_star_sdbc_XMultipleResults_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/sdbc/SQLException.idl>

 module com {  module sun {  module star {  module sdbc {

 published interface XResultSet;


/** is used for inspecting multiple results produced by the execution of a
    SQL statement.


    <p>
    Under some (uncommon) situations a single SQL statement may return
    multiple result sets and/or update counts.  Normally you can ignore
    this unless you are (1) executing a stored procedure that you know may
    return multiple results or (2) you are dynamically executing an
    unknown SQL string. The methods
    com::sun::star::sdbc::XMultipleResults::getMoreResults()
    ,
    com::sun::star::sdbc::XMultipleResults::getResultSet()
    and
    com::sun::star::sdbc::XMultipleResults::getUpdateCount()
    let you navigate through multiple results.

    </p>
    @see com::sun::star::sdbc::XStatement
     @see com::sun::star::sdbc::XPreparedStatement
 */
published interface XMultipleResults: com::sun::star::uno::XInterface
{

    /** returns the current result as a
        com::sun::star::sdbc::ResultSet
        object.
        This method should be called only once per result.
        @returns
            the ResultSet object
        @throws SQLException
            if a database access error occurs.
     */
    XResultSet getResultSet() raises (SQLException);

    /** returns the current result as an update count.


        <p>
        If the result is a ResultSet or there are no more results, -1
        is returned. This method should be called only once per result.
        </p>
        @returns
            the current result as an update count.
        @throws SQLException
            if a database access error occurs.
     */
    long getUpdateCount() raises (SQLException);

    /** moves to a Statement's next result. It returns `TRUE` if
        this result is a ResultSet.  This method also implicitly
        closes any current ResultSet obtained with getResultSet.

        <p>
        There are no more results when <code>(!getMoreResults() &amp;amp;&amp;amp;
        getUpdateCount() == -1)</code>.

        </p>
        @returns
            `TRUE` if there exists more ResultSet objects
        @throws SQLException
            if a database access error occurs.
     */
    boolean getMoreResults() raises (SQLException);
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
