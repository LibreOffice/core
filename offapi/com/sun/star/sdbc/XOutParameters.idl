/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdbc_XOutParameters_idl__
#define __com_sun_star_sdbc_XOutParameters_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/sdbc/SQLException.idl>

 module com {  module sun {  module star {  module sdbc {


/** is used to register Out-Parameters for stored procedures.


    <p>
    SDBC provides a stored procedure SQL escape that allows stored procedures
    to be called in a standard way for all RDBMSs. This escape syntax has one
    form that includes a result parameter and one that does not. If used, the
    result parameter must be registered as an OUT parameter. The other parameters
    can be used for input, output, or both. Parameters are referred to sequentially,
    by number. The first parameter is 1.
    </p>
 */
published interface XOutParameters: com::sun::star::uno::XInterface
{

    /** registers the designated output parameter.  This version of
        the method
        com::sun::star::sdbc::XOutParameters::registerOutParameter()
        should be used for a user-named or REF output parameter. Examples
        of user-named types include: STRUCT, DISTINCT, OBJECT, and named array
        types.

        <p>
        Before executing a stored procedure call, you must explicitly
        call
        com::sun::star::sdbc::XOutParameters::registerOutParameter()
        to register the type from
        com::sun::star::sdbc::DataType
        for each OUT parameter.
        <br/>
        For a user-named parameter the fully-qualified SQL type name of the
        parameter should also be given, while a REF parameter requires that the
        fully-qualified type name of the referenced type be given.
        An SDBC driver that does not need the type code and type name information
        may ignore it. To be portable, however, applications should always provide
        these values for user-named and REF parameters.
        </p>
        <p>Although it is intended for user-named and REF parameters,
        this method may be used to register a parameter of any SDBC type.
        If the parameter does not have a user-named or REF type, the
        typeName parameter is ignored.
        </p>
        <p>
        <b>Note:</b> When reading the value of an out parameter, you
        must use the
        <code>getXXX</code>
        method whose type XXX corresponds to the
        parameter's registered SQL type.
        </p>
        @param parameterIndex
            the first parameter is 1, the second is 2, ...
        @param sqlType
            the type of the column to register
        @param typeName
            the name of the type
        @throws SQLException
            if a database access error occurs.
     */
    void registerOutParameter([in]long parameterIndex, [in]long sqlType,
                              [in]string typeName)
        raises (SQLException);

    /** registers the OUT parameter in ordinal position
        <code>parameterIndex</code>
        to the SDBC type <code>sqlType</code>. All
        OUT parameters must be registered before a stored procedure is executed.


        <p>
        The SDBC type specified by
        <code>sqlType</code>
        for an OUT parameter determines the type that must be used in the
        <code>get</code>
        method to read the value of that parameter.
        This version of
        com::sun::star::sdbc::XOutParameters::registerOutParameter()
        should be
        used when the parameter is of SDBC type
        com::sun::star::sdbc::DataType::NUMERIC
        or com::sun::star::sdbc::DataType::DECIMAL.
        @param parameterIndex
            the first parameter is 1, the second is 2, ...
        @param sqlType
            the type of the column to register
        @param scale
            the scale of the type
        @throws SQLException
            if a database access error occurs.
        </p>
     */
    void registerNumericOutParameter([in]long parameterIndex, [in]long sqlType,
                                       [in]long scale)
        raises (SQLException);
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
