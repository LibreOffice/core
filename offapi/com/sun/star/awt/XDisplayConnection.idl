/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_awt_XDisplayConnection_idl__
#define __com_sun_star_awt_XDisplayConnection_idl__

#include <com/sun/star/uno/XInterface.idl>


module com { module sun { module star { module awt {

 published interface XEventHandler;


/** This interface should be implemented by toolkits that want to give access
    to their internal message handling loop.
*/
published interface XDisplayConnection: com::sun::star::uno::XInterface
{

    /** registers an event handler.

        @param window
        the platform specific window id. If empty, the handler should be
        registered for all windows.

        @param eventHandler
        the handler to register.

        @param eventMask
        the event mask specifies the events the handler is interested in.
    */
    void addEventHandler( [in] any window, [in] XEventHandler eventHandler, [in] long eventMask );


    /** removes a eventHandler from the handler list.

        @param window
        the platform specific window id the handler should be unregistered for.
        If empty, the handler should be unregistered completely.

        @param eventHandler
        the handler to remove.
    */
    void removeEventHandler( [in] any window, [in] XEventHandler eventHandler );


    /** register an error handler for toolkit specific errors.

        @param errorHandler
        the handler to register.
    */
    void addErrorHandler( [in] XEventHandler errorHandler );


    /** remover an error handler from the handler list.

        @param errorHandler
        the handler to remove.
    */
    void removeErrorHandler( [in] XEventHandler errorHandler );


    /** returns a identifier.

        @returns a unique platform dependent identifier for a display connection.
    */
    any getIdentifier();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
