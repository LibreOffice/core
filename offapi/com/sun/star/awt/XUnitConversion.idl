/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_XUnitConversion_idl__
#define __com_sun_star_awt_XUnitConversion_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/awt/Point.idl>
#include <com/sun/star/awt/Size.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


 module com {  module sun {  module star {  module awt {


/** allows converting between different measurement units

    @since OOo 3.0
 */
interface XUnitConversion: com::sun::star::uno::XInterface
{
    /** converts the given <type>Point</type>, which is specified in pixels, into the given logical unit

        @param Point
            A given <type>Point</type> in a well known type
        @param TargetUnit
            A type from <type scope="com::sun::star::util">MeasureUnit</type> in which the Point will convert to.

        @return
            Returns a new <type>Point</type> in the TargetUnit type format.
     */
    com::sun::star::awt::Point convertPointToLogic( [in] com::sun::star::awt::Point Point, [in] short TargetUnit )
            raises ( com::sun::star::lang::IllegalArgumentException );

    /** converts the given <type>Point</type>, which is specified in the given logical unit, into pixels

        @param Point
            A given Point in the SourceUnit type
        @param SourceUnit
            The type from <type scope="com::sun::star::util">MeasureUnit</type> of the Point.

        @return
            Return a new <type>Point</type> in Pixel type format.
     */
    com::sun::star::awt::Point convertPointToPixel( [in] com::sun::star::awt::Point aPoint, [in] short SourceUnit )
            raises ( com::sun::star::lang::IllegalArgumentException );


    /** converts the given <type>Size</type>, which is specified in pixels, into the given logical unit

        @param aSize
            A given <type>Size</type> in a well known type
        @param TargetUnit
            A type from <type scope="com::sun::star::util">MeasureUnit</type> in which the Size will convert to.

        @return
            Returns a new <type>Size</type> in the TargetUnit type format.
     */
    com::sun::star::awt::Size convertSizeToLogic( [in] com::sun::star::awt::Size aSize, [in] short TargetUnit )
            raises ( com::sun::star::lang::IllegalArgumentException );

    /** converts the given <type>Size</type>, which is specified in the given logical unit, into pixels

        @param Size
            A given <type>Size</type> in a well known type
        @param TargetUnit
            The type from <type scope="com::sun::star::util">MeasureUnit</type> of the Size.

        @return
            Returns a new <type>Size</type> in the TargetUnit type format.
     */
    com::sun::star::awt::Size convertSizeToPixel( [in] com::sun::star::awt::Size aSize, [in] short SourceUnit )
            raises ( com::sun::star::lang::IllegalArgumentException );


};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
