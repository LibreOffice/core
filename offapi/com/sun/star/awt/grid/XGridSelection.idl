/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_grid_XGridSelection_idl__
#define __com_sun_star_awt_grid_XGridSelection_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/awt/grid/XGridSelectionListener.idl>
#include <com/sun/star/view/SelectionType.idl>


module com {  module sun {  module star {  module awt { module grid {


/** This interfaces provides access to the selection of row for <type>UnoControlGrid</type>.
 */
interface XGridSelection
{
    /** Selects all rows.
    */
    void selectAllRows();

    /** selects a given row

        @param RowIndex
            denotes the index of the row to select
    */
    void selectRow( [in] long RowIndex );

    /** Deselects all selected rows.
    */
    void deselectAllRows();

    /** removes the selection for a given row

        @param RowIndex
            denotes the index of the row to deselect
    */
    void deselectRow( [in] long RowIndex );

    /** Returns the indices of all selected rows.
        @returns
            a sequence of indices.
    */
    sequence< long > getSelection();

    /** Returns whether rows are selected.
        @returns
            <true/> if rows are selected otherwise <false/>.
    */
    boolean isSelectionEmpty();

    /** Returns whether a specific row is selected.
        @param
            the index of a row.
        @returns
            <true/> if row are selected otherwise <false/>.
    */
    boolean isSelectedIndex( [in] long index);

    /** Adds a listener for the <type>GridSelectionEvent</type> posted after the grid changes.
        @param listener
            the listener to add.
    */
    void addSelectionListener( [in] XGridSelectionListener  listener);


    /** Removes a listener previously added with <method>addSelectionListener()</method>.
        @param listener
            the listener to remove.
    */
    void removeSelectionListener( [in] XGridSelectionListener listener);


};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
