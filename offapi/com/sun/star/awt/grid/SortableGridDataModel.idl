/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_awt_grid_SortableGridDataModel_idl__
#define __com_sun_star_awt_grid_SortableGridDataModel_idl__

#include <com/sun/star/i18n/XCollator.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com { module sun { module star { module awt { module grid {

interface XSortableMutableGridDataModel;
interface XMutableGridDataModel;


/** provides a default implementation of a XSortableGridData.

    <p>This service must be created with a secondary grid data model, which all actual data requests are delegated to.
    But before providing this data to the service's own clients, it is sorted, according to the sort order defined
    via the <code>XSortableGridData</code> interface.</p>

    <p>The service implementation is able to compare the default scalar types, plus strings.</p>

    <p>For determining the data type of a column which the data should be sorted by, the first non-`VOID` data encountered
    in this column is taken into account. Further read requests to this column will assume that all non-`VOID` data is of
    the same type.</p>

    <p>Consequently, you cannot use this service with data sets containing heterogeneous data in a given column.</p>

    <p>All requests made via the XMutableGridDataModel are delegated to the <code>XMutableGridDataModel</code>
    instance passed in the service constructor.</p>

    <p>Note that changing the data might result in the sort order being destroyed. If you want to ensure
    that the data represented by the model is still sorted after your modifications, you should call
    XSortableGridData::sortByColumn(), again.</p>
 */
service SortableGridDataModel : XSortableMutableGridDataModel
{
    /** creates a new instance of the <code>SortableGridDataModel</code>

        <p>For string comparison, a default ::com::sun::star::i18n::Collator, based on the system's
        locale, will be used.</p>

        @param DelegatorModel
            the data model to which read requests are delegated.
        @throws ::com::sun::star::lang::IllegalArgumentException
            if the given <code>DelegatorModel</code> is `NULL`
    */
    create(
            [in] XMutableGridDataModel DelegatorModel
        )
        raises ( ::com::sun::star::lang::IllegalArgumentException );

    /** creates a new instance of the ScortableDefaultGridDataModel, passing a collator to be used for string comparison.

        @param DelegatorModel
            is the data model to which read requests are delegated
        @param Collator
            is the collator to be used for string comparison
        @throws ::com::sun::star::lang::IllegalArgumentException
            if the given <code>DelegatorModel</code> is `NULL`
    */
    createWithCollator(
            [in] XMutableGridDataModel DelegatorModel,
            [in] ::com::sun::star::i18n::XCollator Collator
        )
        raises ( ::com::sun::star::lang::IllegalArgumentException );
};


}; }; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
