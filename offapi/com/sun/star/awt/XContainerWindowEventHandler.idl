/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_awt_XContainerWindowEventHandler_idl__
#define __com_sun_star_awt_XContainerWindowEventHandler_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/awt/XWindow.idl>
#include <com/sun/star/lang/WrappedTargetException.idl>



module com { module sun { module star { module awt {


/** Handles events fired by windows represented by a
    <type scope="com::sun::star::awt">XWindow</type> interface.
 */
interface XContainerWindowEventHandler : ::com::sun::star::uno::XInterface {


    /** Handles an event generated by a window.

        The implementation must be aware that the EventObject argument contains types
        which it is not prepared to handle. Similarly this applies for the MethodName
        argument. In this case the method should simply return false.

        @param xWindow
            the window instance that generated the event. If used in the scope of
            <type scope="com::sun::star::awt">XContainerWindowProvider</type> this
            is the same window instance that was returned by the createContainerWindow
            method when passing the XContainerWindowEventHandler instance receiving the
            event as handler parameter.

        @param EventObject
            an object describing the event which occurred in the window or anything else that
            provides additional information for the event.
            If the event was caused by the window or any of the controls which it contains
            then the any should contain an object derived from
            <type scope="com::sun::star::lang">EventObject</type>. Typically this would be one
            of the several com::sun::star::awt::*Event types.

        @param MethodName
            the name of the function which is to be called.

        @returns
            true if the event was handled, otherwise false.

        @throws com::sun::star::lang::WrappedTargetException
            if the implementation of the method, which is determined by the argument MethodName,
            throws an exception. This exception is then wrapped into a
            <type scope="com::sun::star::lang">WrappedTargetException</type>.

     */
    boolean callHandlerMethod(
        [in] com::sun::star::awt::XWindow xWindow,
        [in] any EventObject,
        [in] string MethodName)
        raises(com::sun::star::lang::WrappedTargetException);


    /** returns a sequence of supported method names

        @returns
            all method names that will be accepted in calls to callHandlerMethod.
     */
    sequence<string> getSupportedMethodNames();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
