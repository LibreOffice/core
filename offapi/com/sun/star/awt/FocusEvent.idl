/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_FocusEvent_idl__
#define __com_sun_star_awt_FocusEvent_idl__

#include <com/sun/star/lang/EventObject.idl>

#include <com/sun/star/uno/XInterface.idl>



 module com {  module sun {  module star {  module awt {


/** specifies a keyboard focus event.

    <p>There are two levels of focus change events: permanent and temporary.
    Permanent focus change events occur when focus is directly moved
    from one component to another, such as through calls to requestFocus()
    or as the user uses the Tab key to traverse components.
    Temporary focus change events occur when focus is
    gained or lost for a component as the indirect result of another
    operation, such as window deactivation or a scrollbar drag.  In this
    case, the original focus state will automatically be restored once
    that operation is finished, or for the case of window deactivation,
    when the window is reactivated.  Both permanent and temporary focus
    events are delivered using the FOCUS_GAINED and FOCUS_LOST event ids;
    the levels may be distinguished in the event using the isTemporary()
    method.</p>
 */
published struct FocusEvent: com::sun::star::lang::EventObject
{

    /** specifies the reason for the focus change as an arithmetic-or
        combination of <type>FocusChangeReason</type>.

        @see FocusChangeReason
     */
    short FocusFlags;


    /** contains the window which gets the focus on a lose focus event.
     */
    com::sun::star::uno::XInterface NextFocus;


    /** specifies if this focus change event is a temporary change.
     */
    boolean Temporary;

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
