/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_XDockableWindowListener_idl__
#define __com_sun_star_awt_XDockableWindowListener_idl__

#include <com/sun/star/lang/XEventListener.idl>
#include <com/sun/star/awt/DockingData.idl>
#include <com/sun/star/awt/EndDockingEvent.idl>
#include <com/sun/star/awt/DockingEvent.idl>
#include <com/sun/star/awt/EndPopupModeEvent.idl>
#include <com/sun/star/lang/EventObject.idl>


module com {  module sun {  module star {  module awt {


/** makes it possible to receive docking events.
 */
interface XDockableWindowListener: com::sun::star::lang::XEventListener
{

    /** is invoked when the docking procedure starts.
     */
    void startDocking( [in] com::sun::star::awt::DockingEvent e );


    /** is invoked during the docking procedure when the window has been moved.

        on return the DockingData must contain either the old tracking rectangle
        or a changed rectangle if required, additionally it must indicate if
        the window should be docked or floating

        Note: the tracking rectangle indicates to the user where the window would
            be placed if he releases the mouse.

     */
    DockingData docking( [in] com::sun::star::awt::DockingEvent e );


    /** is invoked when the docking procedure ends.
        aWindowRect contains the new position and size of the window
     */
    void endDocking( [in] com::sun::star::awt::EndDockingEvent e );


    /** is invoked when the floating mode is about to be changed between
            floating and docked or vice versa

        if returned FALSE the floating mode will not be changed
     */
    boolean prepareToggleFloatingMode( [in] com::sun::star::lang::EventObject e );


    /** is invoked when the floating mode is changed between
            floating and docked or vice versa
     */
    void toggleFloatingMode( [in] com::sun::star::lang::EventObject e );


    /** is invoked when the window was actively closed
     */
    void closed( [in] com::sun::star::lang::EventObject e );


    /** is invoked when the window currently is in pop-up mode and wants to be undocked
        or closed
     */
    void endPopupMode( [in] com::sun::star::awt::EndPopupModeEvent e );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
