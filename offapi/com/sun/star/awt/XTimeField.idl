/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_awt_XTimeField_idl__
#define __com_sun_star_awt_XTimeField_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/util/Time.idl>



 module com {  module sun {  module star {  module awt {


/** gives access to the value and settings of a time field.
 */
published interface XTimeField: com::sun::star::uno::XInterface
{

    /** sets the time value which is displayed in the time field.
     */
    void setTime( [in] com::sun::star::util::Time Time );


    /** returns the time value which is currently displayed in the time field.
     */
    com::sun::star::util::Time getTime();


    /** sets the minimum time value that can be entered by the user.
     */
    void setMin( [in] com::sun::star::util::Time Time );


    /** returns the currently set minimum time value that can be entered by
        the user.
     */
    com::sun::star::util::Time getMin();


    /** sets the maximum time value that can be entered by the user.
     */
    void setMax( [in] com::sun::star::util::Time Time );


    /** returns the currently set maximum time value that can be entered by
        the user.
     */
    com::sun::star::util::Time getMax();


    /** sets the first value to be set on POS1 key.
     */
    void setFirst( [in] com::sun::star::util::Time Time );


    /** returns the currently set first value which is set on POS1 key.
     */
    com::sun::star::util::Time getFirst();


    /** sets the last value to be set on END key.
     */
    void setLast( [in] com::sun::star::util::Time Time );


    /** returns the currently set last value which is set on END key.
     */
    com::sun::star::util::Time getLast();


    /** sets an empty value for the time.
     */
    void setEmpty();


    /** returns whether currently an empty value is set for the time.
     */
    boolean isEmpty();


    /** determines if the format is checked during user input.
     */
    void setStrictFormat( [in] boolean bStrict );


    /** returns whether the format is currently checked during user input.
     */
    boolean isStrictFormat();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
