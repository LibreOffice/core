/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_awt_XControl_idl__
#define __com_sun_star_awt_XControl_idl__

#include <com/sun/star/lang/XComponent.idl>

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/awt/XToolkit.idl>

#include <com/sun/star/awt/XWindowPeer.idl>

#include <com/sun/star/awt/XControlModel.idl>

#include <com/sun/star/awt/XView.idl>



 module com {  module sun {  module star {  module awt {


/** identifies a control.

    <p>Implementations of this interface are abstract windows.
    The main reason to instantiate this implementation is to show the window
    on the screen. Before the window appears on the screen, the
    XControl::createPeer() method must be called.</p>

    <p>If the implementation of the control does not distinguish
    between model, view and controller, it must allow to set
    a new XGraphics in the view, so that the control can be printed.</p>
 */
published interface XControl: com::sun::star::lang::XComponent
{

    /** sets the context of the control.
     */
    void setContext( [in] com::sun::star::uno::XInterface Context );


    /** gets the context of the control.
     */
    com::sun::star::uno::XInterface getContext();


    /** creates a "child" window on the screen.

        <p>If the parent is NULL, then the desktop window of the toolkit
        is the parent.</p>
     */
    void createPeer( [in] com::sun::star::awt::XToolkit Toolkit,
             [in] com::sun::star::awt::XWindowPeer Parent );


    /** returns the peer which was previously created or set.
     */
    com::sun::star::awt::XWindowPeer getPeer();


    /** sets a model for the control.
     */
    boolean setModel( [in] com::sun::star::awt::XControlModel Model );


    /** returns the model for this control.
     */
    com::sun::star::awt::XControlModel getModel();


    /** returns the view of this control.
     */
    com::sun::star::awt::XView getView();


    /** sets the design mode for use in a design editor.

        <p>Normally the control will be painted directly without a peer.</p>
     */
    void setDesignMode( [in] boolean bOn );


    /** returns `TRUE` if the control is in design mode, `FALSE` otherwise.
     */
    boolean isDesignMode();


    /** returns `TRUE` if the control is transparent, `FALSE` otherwise.
     */
    boolean isTransparent();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
