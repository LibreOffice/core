/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_awt_XUserInputInterception_idl__
#define __com_sun_star_awt_XUserInputInterception_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/awt/XKeyHandler.idl>
#include <com/sun/star/awt/XMouseClickHandler.idl>

module com {  module sun {  module star {  module awt {

/** Interface to add handlers for key and mouse events. A handler is not a passive
   listener, it can even consume the event.

    @since OOo 1.1.2
 */
published interface XUserInputInterception : ::com::sun::star::uno::XInterface
{
    /** Add a new listener that is called on ::com::sun::star::awt::KeyEvent.
        Every listener is
        given the opportunity to consume the event, i.e. prevent the not yet
        called listeners from being called.
        @param xHandler
            If this is a valid reference it is inserted into the list of
            handlers.  It is the task of the caller to not register the
            same handler twice (otherwise that listener will be called
            twice.)
    */
    void addKeyHandler (
        [in] ::com::sun::star::awt::XKeyHandler xHandler);


    /** Remove the specified listener from the list of listeners.
        @param xHandler
            If the reference is empty then nothing will be changed.  If the
            handler has been registered twice (or more) then all references
            will be removed.
    */
    void removeKeyHandler (
        [in] ::com::sun::star::awt::XKeyHandler xHandler);

    /** Add a new listener that is called on ::com::sun::star::awt::MouseEvent.
        Every listener is
        given the opportunity to consume the event, i.e. prevent the not yet
        called listeners from being called.
        @param xHandler
            If this is a valid reference it is inserted into the list of
            handlers.  It is the task of the caller to not register the
            same handler twice (otherwise that listener will be called
            twice.)
    */
    void addMouseClickHandler (
        [in] ::com::sun::star::awt::XMouseClickHandler xHandler);

    /** Remove the specified listener from the list of listeners.
        @param xHandler
            If the reference is empty then nothing will be changed.  If the
            handler has been registered twice (or more) then all references
            will be removed.
    */
    void removeMouseClickHandler (
        [in] ::com::sun::star::awt::XMouseClickHandler xHandler);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
