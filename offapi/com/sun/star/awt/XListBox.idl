/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_awt_XListBox_idl__
#define __com_sun_star_awt_XListBox_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/awt/XItemListener.idl>

#include <com/sun/star/awt/XActionListener.idl>



 module com {  module sun {  module star {  module awt {


/** gives access to the items of a list box and makes it possible to
    register item and action event listeners.
 */
published interface XListBox: com::sun::star::uno::XInterface
{

    /** registers a listener for item events.
     */
    void addItemListener( [in] com::sun::star::awt::XItemListener l );


    /** unregisters a listener for item events.
     */
    void removeItemListener( [in] com::sun::star::awt::XItemListener l );


    /** registers a listener for action events.
     */
    void addActionListener( [in] com::sun::star::awt::XActionListener l );


    /** unregisters a listener for action events.
     */
    void removeActionListener( [in] com::sun::star::awt::XActionListener l );


    /** adds an item at the specified position.
     */
    void addItem( [in] string aItem,
             [in] short nPos );


    /** adds multiple items at the specified position.
     */
    void addItems( [in] sequence<string> aItems,
             [in] short nPos );


    /** removes a number of items at the specified position.
     */
    void removeItems( [in] short nPos,
             [in] short nCount );


    /** returns the number of items in the listbox.
     */
    short getItemCount();


    /** returns the item at the specified position.
     */
    string getItem( [in] short nPos );


    /** returns all items of the list box.
     */
    sequence<string> getItems();


    /** returns the position of the currently selected item.
        When multiple items are selected, the position of the first one is returned.
        When nothing is selected, -1 is returned.
     */
    short getSelectedItemPos();


    /** returns the positions of all currently selected items.
     */
    sequence<short> getSelectedItemsPos();


    /** returns the currently selected item.
        When multiple items are selected, the first one is returned.
        When nothing is selected, an empty string is returned.
     */
    string getSelectedItem();


    /** returns all currently selected items.
     */
    sequence<string> getSelectedItems();


    /** selects/deselects the item at the specified position.
     */
    void selectItemPos( [in] short nPos,
             [in] boolean bSelect );


    /** selects/deselects multiple items at the specified positions.
     */
    void selectItemsPos( [in] sequence<short> aPositions,
             [in] boolean bSelect );


    /** selects/deselects the specified item.
     */
    void selectItem( [in] string aItem,
             [in] boolean bSelect );


    /** returns `TRUE` if multiple items can be selected,
        `FALSE` if only one item can be selected.
     */
    boolean isMutipleMode();


    /** determines if only a single item or multiple items can be selected.
     */
    void setMultipleMode( [in] boolean bMulti );


    /** returns the number of visible lines in drop down mode.
     */
    short getDropDownLineCount();


    /** sets the number of visible lines for drop down mode.
     */
    void setDropDownLineCount( [in] short nLines );


    /** makes the item at the specified position visible by scrolling.
     */
    void makeVisible( [in] short nEntry );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
