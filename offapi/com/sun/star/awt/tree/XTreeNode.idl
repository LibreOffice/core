/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_awt_tree_XTreeNode_idl__
#define __com_sun_star_awt_tree_XTreeNode_idl__

#include <com/sun/star/container/XEnumerationAccess.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>


module com {  module sun {  module star {  module awt { module tree {


/** An instance implementing this interface represents the model data for an entry in a
    XTreeDataModel.
    <p>The TreeControl uses this interface to retrieve the model
    information needed to display a hierarchical outline</p>
    <p>Each XTreeNode in a XTreeDataModel must be unique.
 */
interface XTreeNode
{
    /** Returns the child tree node at <var>Index</var>.

        @throws ::com::sun::star::lang::IndexOutOfBoundsException
            if <var>Index</var> is less than 0 or equal or greater then getChildCount().
    */
    XTreeNode getChildAt( [in] long Index )
        raises( com::sun::star::lang::IndexOutOfBoundsException );

    /** Returns the number of child nodes. */
    long getChildCount();

    /** Returns the parent node of this node. */
    XTreeNode getParent();

    /** Returns the index of <var>Node</var> in this instances children.
        @returns
            The child index of <var>Node</var>,
            or -1 if <var>Node</var>  is no child of this instance.
    */
    long getIndex( [in] XTreeNode Node);

    /** Returns `TRUE` if the children of this node are created on demand.
        <p>A TreeControl will handle a node that returns `TRUE` always
        like a node that has child nodes, even if getChildCount()
        returns 0.</p>

        @see TreeExpansionListener;
    */
    boolean hasChildrenOnDemand();

    /** If not empty, the textual representation of this any is used as the text part of this node.
    */
    any getDisplayValue();

    /** The URL for a graphic that is rendered before the text part of this node.
        <p>If this URL is empty, no graphic is rendered.
    */
    string getNodeGraphicURL();

    /** The URL for a graphic that is rendered to visualize expanded non leaf nodes.
        <p>If <var>URL</var> is empty, XTreeControl::DefaultExpandedGraphicURL is used.
    */
    string getExpandedGraphicURL();

    /** The URL for a graphic that is rendered to visualize collapsed non leaf nodes.
        <p>If <var>URL</var> is empty, XTreeControl::DefaultCollapsedGraphicURL is used.
    */
    string getCollapsedGraphicURL();
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
