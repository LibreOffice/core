/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_awt_tree_XTreeDataModelListener_idl__
#define __com_sun_star_awt_tree_XTreeDataModelListener_idl__

#include <com/sun/star/lang/XEventListener.idl>

#include <com/sun/star/awt/tree/TreeDataModelEvent.idl>



module com {  module sun {  module star {  module awt {  module tree {


/** An instance of this interface is used by the TreeControl to
    get notifications about data model changes.

    <p>Usually you must not implement this interface yourself as it is already handled
    by the TreeControl, but you must notify it correctly if
    you implement the XTreeDataModel yourself</p>.
 */
interface XTreeDataModelListener: com::sun::star::lang::XEventListener
{
    /** Invoked after a node (or a set of siblings) has changed in some way.
        The node(s) have not changed locations in the tree or altered their
        children arrays, but other attributes have changed and may affect
        presentation.

        Example: the name of a file has changed, but it is in the same location in the file system.

        To indicate the root has changed, TreeDataModelEvent::Nodes will contain
        the root node and TreeDataModelEvent::ParentNode will be empty.
    */
    void treeNodesChanged( [in] TreeDataModelEvent Event );

    /** Invoked after nodes have been inserted into the tree.

        Use TreeDataModelEvent::ParentNode to get the parent of the new node(s).
        TreeDataModelEvent::Nodes contains the new node(s).
    */
    void treeNodesInserted( [in] TreeDataModelEvent Event );

    /** Invoked after nodes have been removed from the tree.
        <p>Note that if a subtree is removed from the tree,
        this method may only be invoked once for the root of the removed subtree,
        not once for each individual set of siblings removed.

        Use TreeDataModelEvent::ParentNode to get the former parent of the deleted node(s).
        TreeDataModelEvent::Nodes contains the removed node(s).
    */
    void treeNodesRemoved( [in] TreeDataModelEvent Event );

    /** Invoked after the tree has drastically changed structure from a given node down.

        Use TreeDataModelEvent::ParentNode to get the node which
        structure has changed. TreeDataModelEvent::Nodes is empty.
    */
    void treeStructureChanged( [in] TreeDataModelEvent Event );
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
