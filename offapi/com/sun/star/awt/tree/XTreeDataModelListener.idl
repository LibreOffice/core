/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_tree_XTreeDataModelListener_idl__
#define __com_sun_star_awt_tree_XTreeDataModelListener_idl__

#include <com/sun/star/lang/XEventListener.idl>

#include <com/sun/star/awt/tree/TreeDataModelEvent.idl>



module com {  module sun {  module star {  module awt {  module tree {


/** An instance of this interface is used by the <type>TreeControl</type> to
    get notifications about data model changes.

    <p>Usually you must not implement this interface yourself as it is already handled
    by the <type>TreeControl</type>, but you must notify it correctly if
    you implement the <type>XTreeDataModel</type> yourself</p>.
 */
interface XTreeDataModelListener: com::sun::star::lang::XEventListener
{
    /** Invoked after a node (or a set of siblings) has changed in some way.
        The node(s) have not changed locations in the tree or altered their
        children arrays, but other attributes have changed and may affect
        presentation.

        Example: the name of a file has changed, but it is in the same location in the file system.

        To indicate the root has changed, <member>TreeDataModelEvent::Nodes</member> will contain
        the root node and <member>TreeDataModelEvent::ParentNode</member> will be empty.
    */
    void treeNodesChanged( [in] TreeDataModelEvent Event );

    /** Invoked after nodes have been inserted into the tree.

        Use <member>TreeDataModelEvent::ParentNode</member> to get the parent of the new node(s).
        <member>TreeDataModelEvent::Nodes</member> contains the new node(s).
    */
    void treeNodesInserted( [in] TreeDataModelEvent Event );

    /** Invoked after nodes have been removed from the tree.
        <p>Note that if a subtree is removed from the tree,
        this method may only be invoked once for the root of the removed subtree,
        not once for each individual set of siblings removed.

        Use <member>TreeDataModelEvent::ParentNode</member> to get the former parent of the deleted node(s).
        <member>TreeDataModelEvent::Nodes</member> contains the removed node(s).
    */
    void treeNodesRemoved( [in] TreeDataModelEvent Event );

    /** Invoked after the tree has drastically changed structure from a given node down.

        Use <member>TreeDataModelEvent::ParentNode</member> to get the node which
        structure has changed. <member>TreeDataModelEvent::Nodes</member> is empty.
    */
    void treeStructureChanged( [in] TreeDataModelEvent Event );
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
