/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_awt_XToolkit_idl__
#define __com_sun_star_awt_XToolkit_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/awt/XWindowPeer.idl>

#include <com/sun/star/awt/Rectangle.idl>

#include <com/sun/star/awt/WindowDescriptor.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>

#include <com/sun/star/awt/XDevice.idl>

#include <com/sun/star/awt/XRegion.idl>



 module com {  module sun {  module star {  module awt {


/** specifies a factory interface for the window toolkit.

    <p>This is similar to the abstract window toolkit (AWT) in Java.</p>
 */
published interface XToolkit: com::sun::star::uno::XInterface
{

    /** returns the desktop window.
     */
    com::sun::star::awt::XWindowPeer getDesktopWindow();


    /**
     * For LibreOffice versions < 4.1, this method just returned an empty rectangle.
     * After that, it started returning a valid value.
     *
     * @returns the size and position of the primary display
     */
    com::sun::star::awt::Rectangle getWorkArea();


    /** creates a new window using the given descriptor.
     */
    com::sun::star::awt::XWindowPeer createWindow( [in] com::sun::star::awt::WindowDescriptor Descriptor )
            raises( com::sun::star::lang::IllegalArgumentException );


    /** returns a sequence of windows which are newly created using the
        given descriptors.
     */
    sequence<com::sun::star::awt::XWindowPeer> createWindows(
            [in] sequence<com::sun::star::awt::WindowDescriptor> Descriptors )
        raises( com::sun::star::lang::IllegalArgumentException );


    /** creates a virtual device that is compatible with the screen.
     */
    com::sun::star::awt::XDevice createScreenCompatibleDevice( [in] long Width,
             [in] long Height );


    /** creates a region.
     */
    com::sun::star::awt::XRegion createRegion();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
