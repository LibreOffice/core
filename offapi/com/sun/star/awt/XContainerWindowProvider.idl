/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_awt_XContainerWindowProvider_idl__
#define __com_sun_star_awt_XContainerWindowProvider_idl__

#include <com/sun/star/awt/XWindow.idl>
#include <com/sun/star/awt/XWindowPeer.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com { module sun { module star { module awt {


/** provides container windows implementing the
    com::sun::star::awt::XWindow interface.
 */
interface XContainerWindowProvider : ::com::sun::star::uno::XInterface {


    /** creates a window for the given URL

        @param URL
            is the URL.

        @param WindowType
            Type of Window to be created,
            for future use, not supported yet

        @param xParent
            a valid XWindowPeer reference which is used as a parent.
            This parameter must not be null.

        @param xHandler
            is the interface that will be called to handle the Events that
            are generated by the window (and all controls placed on it) and
            bound to the handler using a vnd.sun.star.UNO URL specifying a
            handler method to be called. Usually this will be done directly
            by the user.

            xHandler can handle events in two different ways:

            1. By supporting the com::sun::star::awt::XContainerWindowEventHandler
            interface. This is a generic interface to accept event notifications.

            2. By providing interfaces that directly implement the handler
            methods to be called. The XContainerWindowProvider implementation then
            will try to access these events using the
            com::sun::star::beans::IntrospectionIntrospection
            service. To make this possible the handler implementation also has to
            support com::sun::star::lang::XTypeProvider.

            If XContainerWindowEventHandler is supported XContainerWindowEventHandler.callHandlerMethod()
            is always called first to handle the event. Only if the event cannot be
            handled by XContainerWindowEventHandler (callHandlerMethod() then has to return
            false) or if XContainerWindowEventHandler is not supported at all the Introspection
            based access will be used.

            The Introspection based access tries to call a method named according to the
            HandlerMethodName specified by a
            <code>vnd.sun.star.UNO:<i>HandlerMethodName</i></code> URL.
            First a method

            void HandlerMethodName( [in] com::sun::star::awt::XWindow xWindow, [in] any aEvent )

            will be searched. The signature is similar to XContainerWindowEventHandler.
            callHandlerMethod except for MethodName itself that isn't needed
            here. For more information about these parameters, see
            com::sun::star::awt::XContainerWindowEventHandler.

            If this method is found, it will be called, otherwise a method

            void HandlerMethodName( void )

            will be searched and called.

        @returns
            a window implementing the com::sun::star::awt::XWindow interface.

        @throws com::sun::star::lang::IllegalArgumentException
            if no window for the given URL is found or if the URL is invalid
            or xParent is null.

        @see com::sun::star::awt::XContainerWindowEventHandler

     */
    com::sun::star::awt::XWindow createContainerWindow
        ( [in] string URL, [in] string WindowType,
          [in] com::sun::star::awt::XWindowPeer xParent,
          [in] com::sun::star::uno::XInterface xHandler )
            raises ( com::sun::star::lang::IllegalArgumentException );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
