/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_script_provider_XScript_idl__
#define __com_sun_star_script_provider_XScript_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/script/CannotConvertException.idl>
#include <com/sun/star/reflection/InvocationTargetException.idl>
#include <com/sun/star/script/provider/ScriptFrameworkErrorException.idl>


module com { module sun { module star { module script { module provider {

/**
    This interface represents an invokable script or UNO function.
*/
interface XScript : ::com::sun::star::uno::XInterface {

    /**
        invoke the script or function represented by the implementing
            object

        @param aParams
            all parameters; pure, out parameters are undefined in sequence,
            i.e., the value has to be ignored by the callee
        @param aOutParamIndex
            out indices, indicating the position of the out or inout
            parameters in the list of arguments to the script
        @param aOutParam
            out parameters<p>
            For example, if the script had the signature<br>
            <code>long foo( [inout] string a, [in] string b, [out] string c )</code>
            <br> the call would look like<br>
            <code>bar.invoke( {"foo", "foo2", "this-is-ignored" }, aOutParamIndex, aOutParam);</code>
            <br> and after the call the out sequences would contain<br>
            @code{.py}
            aOutParamIndex={0,2};
            aOutParam={"string from a", "string from c"};
            @endcode

        @returns
            the value returned from the function being invoked

        @throws ::com::sun::star::reflection::InvocationTargetException
            if and error occurs while attempting to invoke a script the information is captured. If the error or exception is generated by the script itself it is wrapped as either ScriptErrorRaisedException or ScriptExceptionRaisedException or ScriptFrameworkErrorException are wrapped as ScriptFrameworkErrorExceptions.
    */
    any invoke(
        [in] sequence<any> aParams,
        [out] sequence<short> aOutParamIndex,
        [out] sequence<any> aOutParam ) raises(
        ::com::sun::star::script::provider::ScriptFrameworkErrorException ,
        ::com::sun::star::reflection::InvocationTargetException);

};

}; }; }; }; }; // ::com::sun::star::script::provider

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
