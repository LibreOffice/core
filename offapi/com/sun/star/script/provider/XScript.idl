/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_script_provider_XScript_idl__
#define __com_sun_star_script_provider_XScript_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/script/CannotConvertException.idl>
#include <com/sun/star/reflection/InvocationTargetException.idl>
#include <com/sun/star/script/provider/ScriptFrameworkErrorException.idl>


module com { module sun { module star { module script { module provider {

/**
    This interface represents an invokable script or UNO function.
*/
interface XScript : ::com::sun::star::uno::XInterface {

    /**
        invoke the script or function represented by the implementing
            object

        @param aParams
            all parameters; pure, out parameters are undefined in sequence,
            i.e., the value has to be ignored by the callee
        @param aOutParamIndex
            out indices, indicating the position of the out or inout
            parameters in the list of arguments to the script
        @param aOutParam
            out parameters<p>
            For example, if the script had the signature<br>
            <code>long foo( [inout] string a, [in] string b, [out] string c )</code>
            <br> the call would look like<br>
            <code>bar.invoke( {"foo", "foo2", "this-is-ignored" }, aOutParamIndex, aOutParam);</code>
            <br> and after the call the out sequences would contain<br>
            <listing>
            aOutParamIndex={0,2};
            aOutParam={"string from a", "string from c"};
            </listing>

        @returns
            the value returned from the function being invoked

        @throws ::com::sun::star::reflection::InvocationTargetException
            if and error occurs while attempting to invoke a script the information is captured. If the error or exception is generated by the script itself it is wrapped as either ScriptErrorRaisedException or ScriptExceptionRaisedException or ScriptFrameworkErrorException are wrapped as ScriptFrameworkErrorExceptions.
    */
    any invoke(
        [in] sequence<any> aParams,
        [out] sequence<short> aOutParamIndex,
        [out] sequence<any> aOutParam ) raises(
        ::com::sun::star::script::provider::ScriptFrameworkErrorException ,
        ::com::sun::star::reflection::InvocationTargetException);

};

}; }; }; }; }; // ::com::sun::star::script::provider

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
