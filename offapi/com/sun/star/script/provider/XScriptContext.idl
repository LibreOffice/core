/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_script_provider_XScriptContext_idl__
#define __com_sun_star_script_provider_XScriptContext_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/frame/XDesktop.idl>
#include <com/sun/star/frame/XModel.idl>
#include <com/sun/star/uno/XComponentContext.idl>


module com { module sun { module star { module document {
    interface XScriptInvocationContext;
}; }; }; };


module com { module sun { module star { module script { module provider {

/**
    This interface is provided to scripts, and provides a means of access to
    the various interfaces which they might need to perform some action on
    a document. It is required to be passed as the first argument for any
    Java scripts.
*/
interface XScriptContext : ::com::sun::star::uno::XInterface {

    /**
        Obtain the document reference on which the script can operate

        @returns
          com::sun::star::frame::XModel interface
    */
    ::com::sun::star::frame::XModel getDocument();

    /** provides access to the context where the script was invoked

        <p>In some cases, it is possible that scripts, embedded in a document,
        are executed from within a context which is <em>not</em> the document
        itself. In this case, the <code>getInvocationContext</code> member allows
        to access this context.</p>

        <p>Note that the returned context is allowed to be `NULL`, in this case,
        the document as returned by <code>getDocument</code> is the invocation context.</p>

        <p>If the returned context is not `NULL`, its <code>ScriptContainer</code> attribute
        equals the document as returned by <code>XScriptContext::getDocument</code>.</p>

        @since OOo 3.0
    */
    ::com::sun::star::document::XScriptInvocationContext getInvocationContext();

    /**
        Obtain the desktop reference on which the script can operate

        @returns
          com::sun::star::frame::XDesktop interface
    */
    ::com::sun::star::frame::XDesktop getDesktop();

    /**
        Obtain the component context which the script can use to create
        other uno components

        @returns
          com::sun::star::uno::XComponentContext interface
    */
    ::com::sun::star::uno::XComponentContext getComponentContext();


};

}; }; }; }; }; // ::com::sun::star::script::provider

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
