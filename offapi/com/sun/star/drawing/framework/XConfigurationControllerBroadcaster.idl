/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_drawing_framework_XConfigurationControllerBroadcaster_idl__
#define __com_sun_star_drawing_framework_XConfigurationControllerBroadcaster_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/drawing/framework/ConfigurationChangeEvent.idl>

module com { module sun { module star { module drawing { module framework {

interface XConfigurationChangeListener;

/** Manage the set of registered event listeners and the event notification for a configuration
    controller.
    <p>The listeners are called in the order in which they are registered.</p>
*/
interface XConfigurationControllerBroadcaster
{
    /** Add a new listener for configuration changes.
        <p>The listener is notified only for the specified type of
        configuration changes.  When the listener is interested in more than
        one event type this method has to be called multiple times.
        Alternatively it can register as universal listener that will be
        called for all event types.  However, this option is provided
        primarily to support debugging and monitoring.</p>
        @param xListener
            The new listener.
        @param sEventType
            The event type that the listener is interested in.  The set of
            event types is not fixed and there can be no exhaustive
            list. The empty string is a special value in that the listener
            will be called for all types of event.
        @param aUserData
            Arbitrary data that is passed to the listener when it is called
            for the specified event type.  When one listener is registered
            for more than one event type then different user data objects
            may be given as well.  Supplying unique integer values allows
            the listener to use a switch statement to distinguish between
            the different event types.
    */
    void addConfigurationChangeListener (
        [in] XConfigurationChangeListener xListener,
        [in] string sEventType,
        [in] any aUserData);

    /** Remove a listener for configuration changes.
        @param xListener
            The listener that is to be removed.
    */
    void removeConfigurationChangeListener (
        [in] XConfigurationChangeListener xListener);

    /** With this method other objects can send events to all the registered
        listeners.
    */
    void notifyEvent (
        [in] ConfigurationChangeEvent aEvent);
};

}; }; }; }; }; // ::com::sun::star::drawing::framework

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
