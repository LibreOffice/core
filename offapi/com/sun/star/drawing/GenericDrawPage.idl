/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/**
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_drawing_GenericDrawPage_idl__
#define __com_sun_star_drawing_GenericDrawPage_idl__

#include <com/sun/star/drawing/XShapes.idl>

#include <com/sun/star/drawing/XShapeGrouper.idl>

#include <com/sun/star/drawing/XShapeCombiner.idl>

#include <com/sun/star/drawing/XShapeBinder.idl>

#include <com/sun/star/container/XNamed.idl>

#include <com/sun/star/beans/XPropertySet.idl>

#include <com/sun/star/view/PaperOrientation.idl>

#include <com/sun/star/container/XNameContainer.idl>


 module com {  module sun {  module star {  module drawing {


// DocMerge from xml: service com::sun::star::drawing::GenericDrawPage
/** This abstract service is implemented by every page of a
    <type>DrawingDocument</type>.



    @example create and insert a couple of <type>LineShape</type>s:

    <listing>
    xPage = xDoc.DrawPages(0)
    for x% = 0 to 200
    xShape = xProv.createInstance( "com::sun::star::drawing::LineShape" )
    xShape.LineColor = rgb( 255, 0, n%+20 )
    xShape.LineWidth = 20
    xShape.Position = Point( x%, 2*x% )
    xShape.Size = Size( 300-x%, 20 )
    xPage.add( xShape )
    next x%
    </listing>
 */
published service GenericDrawPage
{


    // DocMerge from xml: service com::sun::star::drawing::GenericDrawPage: interface com::sun::star::drawing::XShapes
    /** manages the <type>Shape</type>s of this page.

                <p>It also lets you add new <type>Shape</type>s. The program currently
                requires that these <type>Shape</type>s be created by the factory of
                the document.

                @see    <type>DrawingDocument</type>
     */
    interface com::sun::star::drawing::XShapes;


    // DocMerge from xml: service com::sun::star::drawing::GenericDrawPage: interface com::sun::star::drawing::XShapeGrouper
    /** With this interface you can group/ungroup a collection of
                <type>Shape</type>s.
     */
    interface com::sun::star::drawing::XShapeGrouper;


    // DocMerge from xml: service com::sun::star::drawing::GenericDrawPage: interface com::sun::star::drawing::XShapeCombiner
    /** With this interface you can combine/split a collection of
                <type>Shape</type>s.
     */
    [optional] interface com::sun::star::drawing::XShapeCombiner;


    // DocMerge from xml: service com::sun::star::drawing::GenericDrawPage: interface com::sun::star::drawing::XShapeBinder
    /** With this interface you can bind/unbind a collection of
                <type>Shape</type>s.
     */
    [optional] interface com::sun::star::drawing::XShapeBinder;


    // DocMerge from xml: service com::sun::star::drawing::GenericDrawPage: interface com::sun::star::container::XNamed
    /** Gets or sets the name of this page.

                <p>Duplicated page names inside a document are not allowed.
     */
    [optional] interface com::sun::star::container::XNamed;


    // DocMerge from xml: service com::sun::star::drawing::GenericDrawPage: interface com::sun::star::beans::XPropertySet
    /** gives you access to the properties of this
                <type>DrawPage</type>.
     */
    [optional] interface com::sun::star::beans::XPropertySet;


    // DocMerge from xml: property com::sun::star::drawing::GenericDrawPage::BorderBottom
    /** This is the border at the bottom.
     */
        [optional, property] long BorderBottom;


    // DocMerge from xml: property com::sun::star::drawing::GenericDrawPage::BorderLeft
    /** This is the border at the left.
     */
        [optional, property] long BorderLeft;


    // DocMerge from xml: property com::sun::star::drawing::GenericDrawPage::BorderRight
    /** This is the border at the right.
     */
        [optional, property] long BorderRight;


    // DocMerge from xml: property com::sun::star::drawing::GenericDrawPage::BorderTop
    /** This is the border at the top.
     */
        [optional, property] long BorderTop;


    // DocMerge from xml: property com::sun::star::drawing::GenericDrawPage::Height
    /** This is the height.
     */
        [optional, property] long Height;


    // DocMerge from xml: property com::sun::star::drawing::GenericDrawPage::Width
    /** This is the width.
     */
        [optional, property] long Width;


    // DocMerge from xml: property com::sun::star::drawing::GenericDrawPage::Number
    /** This is the number of this page, starting with 1.
     */
        [optional, readonly, property] short Number;


    // DocMerge from xml: property com::sun::star::drawing::GenericDrawPage::Orientation
    /** This is the orientation of this page.
     */
        [optional, property] com::sun::star::view::PaperOrientation Orientation;


    /** this property stores xml attributes.
        They will be saved to and restored from automatic styles inside xml files.

        @see com::sun::star::xml::AttributeContainer
    */
    [optional, property] com::sun::star::container::XNameContainer UserDefinedAttributes;


    /** this property is true if the averaged background filling colors luminance
        is belove an application specified threshold value. This can be used to
        determine the actual value of an auto color.
    */
    [readonly, optional, property] boolean IsBackgroundDark;


    /** this index access defines a navigation order for the top level shapes
        inside this page.
        By default this is equal to the index access of the slide itself,
        making the z-order the default navigation order for top level shapes.
    */
    [optional, property] com::sun::star::container::XIndexAccess NavigationOrder;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
