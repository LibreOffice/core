/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sheet_AccessibleSpreadsheetDocumentView_idl__
#define __com_sun_star_sheet_AccessibleSpreadsheetDocumentView_idl__

#include <com/sun/star/accessibility/XAccessibleContext.idl>
#include <com/sun/star/accessibility/XAccessibleComponent.idl>
#include <com/sun/star/accessibility/XAccessibleSelection.idl>
#include <com/sun/star/accessibility/XAccessibleEventBroadcaster.idl>


module com {  module sun {  module star {  module sheet {


/** The accessible view of a spreadsheet document

     @since OOo 1.1.2

 */
service AccessibleSpreadsheetDocumentView
{
    /** This interface gives access to any object that is contained in this
        document.

    <ul>
        <li>The parent returned by getAccessibleParent()
            is the window which contains the view of these document.</li>
        <li>The children returned by getAccessibleChild() all
            support the interface XAccessible. Calling
            getAccessibleContext() for these children returns
            an object that supports one of the following services.</li>
        <ul>
            <li>::com::sun::star::sheet::AccessibleSpreadsheet:
                A child where calling getAccessibleChild()
                an object that supports this service is returned for
                the current spreadsheet which is showing in this document
                window. There is everytime one child which supports this
                service, because it is only possible to have one spreadsheet
                in the current document window.</li>
            <li>::com::sun::star::drawing::AccessibleShape:
                A child where calling getAccessibleChild()
                an object that supports this service is returned
                for every shape that is at the current table. These
                objects are children of the
                AccessibleSpreadsheetDocumentView regardless
                whether they are bound to a table or a cell.</li>
            <li>::com::sun::star::text::AccessibleParagraphView:
                A child where calling getAccessibleChild()
                an object that supports this service is returned for
                the current cell in edit mode. This is necessary to
                have an object which allows event listeners. It exists
                only if a cell is in edit mode.</li>
            <li>::com::sun::star::accessibility::AccessibleContext:
                A child where calling getAccessibleChild()
                an object that supports this service is returned for
                the current OLE object in edit mode. It exists
                only if a OLE object is in edit mode.</li>
        </ul>
        <p>The following rules apply to the children order. General it
            represents the paint order. The object in the background came
            first and than all over lying objects. The last painted object
            is also the last child.</p>
        <ul>
            <li>Graphics, embedded objects and shapes appear
                before the other children if they are painted in the
                background. Their order reflects the z order.</li>
            <li>The current table is painted after the background and so it
                comes after all background objects.</li>
            <li>Graphics, embedded objects and shapes appear
                behind any other children except controls if they are
                painted in the foreground. Their order reflects the z order.</li>
            <li>Controls appear behind the other graphic objects. Their order
                reflects the z order.</li>
            <li>The temporary object for the cell or OLE in edit mode (only
                one can exist in the same time) is the last object.</li>
        </ul>
        <li>The description is ???.</li>
        <li>The name is Spreadsheet Document View with a unique number.</li>
        <li>The role is ::com::sun::star::accessibility::AccessibleRole::DOCUMENT_SPREADSHEET</li>
        <li>There are no relations.</li>
        <li>The following states are supported:
            <ul>
                <li>::com::sun::star::accessibility::AccessibleStateType::DEFUNC is always false until the document is
                    closed.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::EDITABLE is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::ENABLED is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::MULTI_LINE makes no sense in on a document and
                    so it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::MULTI_SELECTABLE is always false, because a
                document is not selectable. Only the children are
                selectable. So it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::OPAQUE is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::RESIZABLE is always false, because you can
                    resize the window, but not the document. So it is left out
                    of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SELECTABLE is always false, because a
                    document is not selectable. Only the children are
                    selectable. So it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SELECTED is always false, because a
                    document is not selectable. Only the children are
                    selectable. So it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SHOWING is true if the Bounding Box lies in
                    the Bounding Box of the parent. Otherwise it is false.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::VISIBLE is always true.</li>
            </ul>
        </li>
    </ul>

     */
    interface ::com::sun::star::accessibility::XAccessibleContext;

    /** This interface gives access to the visibility of the document.
    */
    interface ::com::sun::star::accessibility::XAccessibleComponent;

    /** This interface is for selecting the document's children like
          shapes or the whole table.
     */
    interface ::com::sun::star::accessibility::XAccessibleSelection;

    /** This is the interface for listeners */
    interface ::com::sun::star::accessibility::XAccessibleEventBroadcaster;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
