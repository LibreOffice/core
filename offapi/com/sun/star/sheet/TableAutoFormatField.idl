/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_sheet_TableAutoFormatField_idl__
#define __com_sun_star_sheet_TableAutoFormatField_idl__

#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/util/Color.idl>
#include <com/sun/star/lang/Locale.idl>
#include <com/sun/star/awt/FontSlant.idl>
#include <com/sun/star/table/ShadowFormat.idl>
#include <com/sun/star/table/CellHoriJustify.idl>
#include <com/sun/star/table/CellVertJustify.idl>
#include <com/sun/star/table/CellOrientation.idl>
#include <com/sun/star/table/TableBorder.idl>
#include <com/sun/star/table/TableBorder2.idl>


module com {  module sun {  module star {  module sheet {


/** represents a field in an AutoFormat. A field contains all cell
    properties for a specific position in an AutoFormat.
 */
published service TableAutoFormatField
{

//! service com::sun::star::beans::PropertySet;
    /** provides access to the properties.
     */
    interface com::sun::star::beans::XPropertySet;


    /** specifies the name of the western font.
     */
    [property] string CharFontName;

    /** specifies the name of the Asian font.
     */
    [optional, property] string CharFontNameAsian;

    /** specifies the name of the complex font.
     */
    [optional, property] string CharFontNameComplex;


    /** specifies the name of the western font style.
     */
    [property] string CharFontStyleName;

    /** specifies the name of the Asian font style.
     */
    [optional, property] string CharFontStyleNameAsian;

    /** specifies the name of the complex font style.
     */
    [optional, property] string CharFontStyleNameComplex;


    /** contains the value of the character set of the western font.
     */
    [property] string CharFontCharSet;

    /** contains the value of the character set of the Asian font.
     */
    [optional, property] string CharFontCharSetAsian;

    /** contains the value of the character set of the complex font.
     */
    [optional, property] string CharFontCharSetComplex;


    /** contains the value of the western font family.
     */
    [property] string CharFontFamily;

    /** contains the value of the Asian font family.
     */
    [optional, property] string CharFontFamilyAsian;

    /** contains the value of the complex font family.
     */
    [optional, property] string CharFontFamilyComplex;


    /** contains the value of the pitch of the western font.
     */
    [property] string CharFontPitch;

    /** contains the value of the pitch of the Asian font.
     */
    [optional, property] string CharFontPitchAsian;

    /** contains the value of the pitch of the complex font.
     */
    [optional, property] string CharFontPitchComplex;


    /** contains the height of characters of the western font in point.
     */
    [property] float CharHeight;

    /** contains the height of characters of the Asian font in point.
     */
    [optional, property] float CharHeightAsian;

    /** contains the height of characters of the complex font in point.
     */
    [optional, property] float CharHeightComplex;


    /** contains the value for the weight of characters of the western font.
     */
    [property] float CharWeight;

    /** contains the value for the weight of characters of the Asian font.
     */
    [optional, property] float CharWeightAsian;

    /** contains the value for the weight of characters of the complex font.
     */
    [optional, property] float CharWeightComplex;


    /** contains the value of the posture of characters of the western font.
     */
    [property] com::sun::star::awt::FontSlant CharPosture;

    /** contains the value of the posture of characters of the Asian font.
     */
    [optional, property] com::sun::star::awt::FontSlant CharPostureAsian;

    /** contains the value of the posture of characters of the complex font.
     */
    [optional, property] com::sun::star::awt::FontSlant CharPostureComplex;


    /** contains the value for the character underline.
     */
    [property] short CharUnderline;


    /** is `TRUE` if the characters are crossed out.
     */
    [property] boolean CharCrossedOut;


    /** is `TRUE` if the characters are contoured.
     */
    [property] boolean CharContoured;


    /** is `TRUE` if the characters are shadowed.
     */
    [property] boolean CharShadowed;


    /** contains the value of the text color.
     */
    [property] com::sun::star::util::Color CharColor;


    /** contains the cell background color.
     */
    [property] com::sun::star::util::Color CellBackColor;


    /** is `TRUE` if the cell background is transparent.

        <p>In this case the TableAutoFormatField::CellBackColor
        value is not used.</p>
     */
    [property] boolean IsCellBackgroundTransparent;


    /** contains a description of the shadow.
     */
    [optional, property] com::sun::star::table::ShadowFormat ShadowFormat;


    /** specifies the horizontal alignment of the cell contents.
     */
    [optional, property] com::sun::star::table::CellHoriJustify HoriJustify;


    /** specifies the vertical alignment of the cell contents.

        changed from com::sun::star::table::CellVertJustify to long in LibO 3.5

        @see com::sun::star::table::CellVertJustify2
     */
    [optional, property] long VertJustify;


    /** is `TRUE` if text breaks automatically at cell borders.
     */
    [optional, property] boolean IsTextWrapped;


    /** contains the orientation of the cell contents
        (i.e. top-to-bottom or stacked).
     */
    [optional, property] com::sun::star::table::CellOrientation Orientation;


    /** contains the rotation angle of the cell contents.
     */
    [optional, property] long RotateAngle;


    /** contains the reference edge of the cell rotation.

        changed from com::sun::star::table::CellVertJustify to long in LibO 3.5

        @see com::sun::star::table::CellVertJustify2
     */
    [optional, property] long RotateReference;


    /** contains the margin between cell contents and top border
        (in 1/100 mm).
     */
    [optional, property] long ParaTopMargin;


    /** contains the margin between cell contents and bottom border
        (in 1/100 mm).
     */
    [optional, property] long ParaBottomMargin;


    /** contains the margin between cell contents and left border
        (in 1/100 mm).
     */
    [optional, property] long ParaLeftMargin;


    /** contains the margin between cell contents and right border
        (in 1/100 mm).
     */
    [optional, property] long ParaRightMargin;


    /** property containing a description of the cell border.

        @since OOo 1.1.2
     */
    [optional, property] com::sun::star::table::TableBorder TableBorder;


    /** property containing a description of the cell border.
        Preferred over com::sun::star::table::TableBorder
        #TableBorder.

        @since LibreOffice 3.6
     */
    [optional, property] com::sun::star::table::TableBorder2 TableBorder2;
};


}; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
