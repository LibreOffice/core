/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_sheet_XDataPilotTable2_idl__
#define __com_sun_star_sheet_XDataPilotTable2_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/table/CellAddress.idl>
#include <com/sun/star/table/CellRangeAddress.idl>
#include <com/sun/star/sheet/XDataPilotTable.idl>
#include <com/sun/star/sheet/DataPilotOutputRangeType.idl>
#include <com/sun/star/sheet/DataPilotFieldFilter.idl>
#include <com/sun/star/sheet/DataPilotTablePositionData.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>

module com {  module sun {  module star {  module sheet {

/** additional methods to extend com::sun::star::sheet::XDataPilotTable.

   com::sun::star::sheet::XDataPilotTable2 extends the old
   com::sun::star::sheet::XDataPilotTable interface with
   additional methods.

   @see com::sun::star::sheet::XDataPilotTable

   @since OOo 3.0
 */
interface XDataPilotTable2: com::sun::star::sheet::XDataPilotTable
{
    /** When the address of a cell within the result area is given,
        XDataPilotTable2::getDrillDownData() returns its drill-down
        output table that includes only those rows that contribute to the value of
        that cell.

        @param aAddr cell address within the result area of a DataPilot table.

        @returns drill-down output as 2-dimensional sequence, including the header row.

        @see XDataPilotTable2::insertDrillDownSheet()
     */
    sequence< sequence< any > > getDrillDownData( [in] com::sun::star::table::CellAddress aAddr );

    /** Given a cell address, it returns the information about that cell.  The
        type of information returned depends upon whether the cell is within
        the result area or column/row header area.

        @param aAddr address of the cell whose information is to be returned.

        @returns DataPilotTablePositionData which contains the
        position type and the information for that cell position.

        @see com::sun::star::sheet::DataPilotTablePositionData
        @see com::sun::star::sheet::DataPilotTableHeaderData
        @see com::sun::star::sheet::DataPilotTableResultData
     */
    DataPilotTablePositionData getPositionData( [in] com::sun::star::table::CellAddress aAddr );

    /** <p>This method inserts a new sheet to display the drill-down data for a
        specified result cell.  A drill-down data for a result cell consists
        of a subset of rows from the original data source that contribute to
        the value displayed in that cell.</p>

        <p>The new sheet is always inserted to the immediate left of the current
        sheet where the DataPilot table is.  Note that when the drill-down data
        is empty, no new sheet is inserted.</p>

        @param aAddr address of a result cell

        @returns `VOID`
     */
    void insertDrillDownSheet( [in] com::sun::star::table::CellAddress aAddr );

    /** <p>This method returns a different output range of a DataPilot table
        per specified output range type.</p>

        @returns com::sun::star::table::CellRangeAddress depicting
        the range specified.  See DataPilotOutputRangeType for a set
        of possible output range types.

        @see com::sun::star::sheet::DataPilotOutputRangeType
     */
    com::sun::star::table::CellRangeAddress getOutputRangeByType( [in] long nType )
        raises (com::sun::star::lang::IllegalArgumentException);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
