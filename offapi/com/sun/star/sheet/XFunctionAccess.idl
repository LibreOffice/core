/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_sheet_XFunctionAccess_idl__
#define __com_sun_star_sheet_XFunctionAccess_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/container/NoSuchElementException.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com {  module sun {  module star {  module sheet {


/** allows generic access to all spreadsheet functions.

    @see com::sun::star::sheet::FunctionAccess
 */
published interface XFunctionAccess: com::sun::star::uno::XInterface
{

    /** calls a function and returns the result of the call.

        @param aName
        the (programmatic) name of the function.

        @param aArguments
        the arguments for the function call.
        <p>Each element must be of one of the following types:</p>

        <dl>
        <dt>`long` or `double`</dt>
        <dd>for a numeric value.</dd>

        <dt>`string`</dt>
        <dd>for a textual value.</dd>

        <dt>`long[][]` or `double[][]`</dt>
        <dd>for an array of numeric values.</dd>

        <dt>`string[][]`</dt>
        <dd>for an array of textual values.</dd>

        <dt>`any[][]`</dt>
        <dd>for a mixed array, where each element must be of `VOID`,
        `long`, `double` or `string`
        type.</dd>

        <dt>com::sun::star::table::XCellRange</dt>
        <dd>for a SheetCellRange object that contains the
        data.</dd>
        </dl>

        @returns
            the result of the function call.

            <p>Possible types for the result are:</p>

            <dl>
            <dt>`VOID`</dt>
            <dd>if no result is available.</dd>

            <dt>`double`</dt>
            <dd>for a numeric result.</dd>

            <dt>`string`</dt>
            <dd>for a textual result.</dd>

            <dt>`any[][]`</dt>
            <dd>for an array result, containing `double` and
            `string` values.</dd>
            </dl>

        @throws com::sun::star::container::NoSuchElementException
            if the named function does not exist.

        @throws com::sun::star::lang::IllegalArgumentException
            if the function can not be called with these arguments.
     */
    any callFunction( [in] string aName, [in] sequence< any > aArguments )
            raises( com::sun::star::container::NoSuchElementException,
                    com::sun::star::lang::IllegalArgumentException );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
