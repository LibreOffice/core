/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sheet_AccessibleSpreadsheet_idl__
#define __com_sun_star_sheet_AccessibleSpreadsheet_idl__

#include <com/sun/star/accessibility/XAccessibleContext.idl>
#include <com/sun/star/accessibility/XAccessibleComponent.idl>
#include <com/sun/star/accessibility/XAccessibleTable.idl>
#include <com/sun/star/accessibility/XAccessibleSelection.idl>
#include <com/sun/star/accessibility/XAccessibleEventBroadcaster.idl>


module com {  module sun {  module star {  module sheet {


/** The accessible view of a spreadsheet document

     @since OOo 1.1.2
*/
service AccessibleSpreadsheet
{
    /** This interface gives access to any object in the currently visible table
        on the desktop.

    <ul>
        <li>The parent returned by
        ::com::sun::star::accessibility::XAccessibleContext::getAccessibleParent()
            is the accessible spreadsheet document view.</li>
        <li>The children returned by
            ::com::sun::star::accessibility::XAccessibleContext::getAccessibleChild()
            all support the interface XAccessible. Calling
            ::com::sun::star::accessibility::XAccessible::getAccessibleContext()
            for these children
            returns an object that supports the following service.</li>
        <ul>
            <li>::com::sun::star::sheet::AccessibleCell:
                A child where calling
                ::com::sun::star::accessibility::XAccessibleContext::getAccessibleChild()
                an object that supports this service is returned for
                every cell in this table.</li>
        </ul>
        <p>The following rules apply to the children order.</p>
        <ul>
            <li>All the children are cells. The order of this cells is to
            the order on the screen. This means that the first cell is the
            cell in the left top edge of the table and the last one is the
            cell in the right bottom edge of the table. The second is the
            cell in the first row and second column and so on.</li>
        </ul>
        <li>The description is ???.</li>
        <li>The name is the given table name.</li>
        <li>The role is ::com::sun::star::accessibility::AccessibleRole::TABLE
            </li>
        <li>There are relations between the table and the shapes with an anchor
            on this table (not with an anchor on a cell in this table).</li>
        <li>The following states are supported:
            <ul>
                <li>::com::sun::star::accessibility::AccessibleStateType::DEFUNC
                    is always false if the
                    table is not deleted and the document is open, otherwise it
                    is true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::EDITABLE
                    is false if the
                    table is protected, otherwise it is true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::ENABLED
                    is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::MULTI_SELECTABLE
                    is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::OPAQUE
                    is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::RESIZABLE
                    is always false.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SELECTABLE
                    is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SELECTED
                    is true if the complete table (all cells) is selected.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SHOWING
                    is true if the
                    Bounding Box lies in the Bounding Box of the parent.
                    Otherwise it is false.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::VISIBLE
                    is always true.</li>
            </ul>
        </li>
    </ul>
     */
    interface ::com::sun::star::accessibility::XAccessibleContext;

    /** This interface gives access to the visibility of the table.
    */
    interface ::com::sun::star::accessibility::XAccessibleComponent;

    /** This interface gives access to any cell that is at least partially
        visible on the screen. So this interface gives access to the same
        things like the XAccessibleContext interface. Therefore it use more
        usable methods. Also it gives access to some table specific data.
     */
    interface ::com::sun::star::accessibility::XAccessibleTable;

    /** This interface is for selecting the cells.
     */
    interface ::com::sun::star::accessibility::XAccessibleSelection;

    /** This is the interface for listeners */
    interface ::com::sun::star::accessibility::XAccessibleEventBroadcaster;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
