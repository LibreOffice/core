/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_sheet_XCompatibilityNames_idl__
#define __com_sun_star_sheet_XCompatibilityNames_idl__

#include <com/sun/star/sheet/LocalizedName.idl>


module com {  module sun {  module star {  module sheet {


/** gives access to the sequence of compatibility names for an Addin
    function.
 */
published interface XCompatibilityNames: com::sun::star::uno::XInterface
{
    /** returns the compatibility names of the specified function.

        <p>Compatibility names are localized names of AddIn functions that
        are used to import files from other applications.</p>

        <p>If on import a localized function name is read, this list of
        compatibility names is used to find the internal name of the
        function. The current locale may differ from the locale used in
        the imported file, so the method
        XAddIn::getProgrammaticFuntionName() cannot be used
        here.</p>

        <p>The order inside the sequence of compatibility names is used to
        prioritize the names. Initially the first compatibility name of
        each function is compared to the imported name (each function may
        provide a sequence of compatibility names - the first entry of all
        sequences is used). If no entry is equal, the second entry of each
        sequence is used and so on.</p>

        <p>If a locale is not present in the sequence of compatibility names,
        the first entry of the sequence is used. So the method should return
        a sequence which contains first the entry representing the current
        locale.`TRUE`</p>

        @param aProgrammaticName
            is the exact name of a method within its interface.
     */
    sequence< com::sun::star::sheet::LocalizedName >
        getCompatibilityNames( [in] string aProgrammaticName );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
