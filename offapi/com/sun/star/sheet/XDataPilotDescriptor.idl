/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_sheet_XDataPilotDescriptor_idl__
#define __com_sun_star_sheet_XDataPilotDescriptor_idl__

#include <com/sun/star/container/XNamed.idl>
#include <com/sun/star/table/CellRangeAddress.idl>
#include <com/sun/star/sheet/XSheetFilterDescriptor.idl>
#include <com/sun/star/container/XIndexAccess.idl>


module com {  module sun {  module star {  module sheet {


/** provides access to the layout settings of a data pilot table.

    <p>This interface extends the interface
    com::sun::star::container::XNamed which provides
    access to the name of the data pilot table used e.g. in collections.</p>

    @see com::sun::star::sheet::DataPilotDescriptor
    @see com::sun::star::sheet::DataPilotTable
 */
published interface XDataPilotDescriptor: com::sun::star::container::XNamed
{

    /** returns an additional string stored in the data pilot table.
     */
    string getTag();


    /** sets an additional string stored in the data pilot table.
     */
    void setTag( [in] string aTag );


    /** returns the cell range containing the data for the data pilot table.
     */
    com::sun::star::table::CellRangeAddress getSourceRange();


    /** sets the cell range containing the data for the data pilot table.
     */
    void setSourceRange(
            [in] com::sun::star::table::CellRangeAddress aSourceRange );


    /** returns the filter descriptor specifying which data from the
        source cell range are used for the data pilot table.
     */
    com::sun::star::sheet::XSheetFilterDescriptor getFilterDescriptor();


    /** returns the collection of all the data pilot fields.
     */
    com::sun::star::container::XIndexAccess getDataPilotFields();


    /** returns the collection of the data pilot fields used as column fields.

        @see com::sun::star::sheet::DataPilotFields
     */
    com::sun::star::container::XIndexAccess getColumnFields();


    /** returns the collection of the data pilot fields used as row fields.

        @see com::sun::star::sheet::DataPilotFields
     */
    com::sun::star::container::XIndexAccess getRowFields();


    /** returns the collection of the data pilot fields used as page fields.

        @see com::sun::star::sheet::DataPilotFields
     */
    com::sun::star::container::XIndexAccess getPageFields();


    /** returns the collection of the data pilot fields used as data fields.

        @see com::sun::star::sheet::DataPilotFields
     */
    com::sun::star::container::XIndexAccess getDataFields();


    /** returns the collection of the data pilot fields not used as
        column, row, page, or data fields.

        @see com::sun::star::sheet::DataPilotFields
     */
    com::sun::star::container::XIndexAccess getHiddenFields();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
