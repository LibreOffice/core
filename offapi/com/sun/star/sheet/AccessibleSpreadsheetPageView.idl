/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_sheet_AccessibleSpreadsheetPageView_idl__
#define __com_sun_star_sheet_AccessibleSpreadsheetPageView_idl__

#include <com/sun/star/accessibility/XAccessibleContext.idl>
#include <com/sun/star/accessibility/XAccessibleComponent.idl>
#include <com/sun/star/accessibility/XAccessibleEventBroadcaster.idl>


module com {  module sun {  module star {  module sheet {


/** The accessible view of a spreadsheet page preview

     @since OOo 1.1.2

 */
published service AccessibleSpreadsheetPageView
{
    /** This interface gives access to any object that is at least partially
        visible on the screen in the page preview.

    <ul>
        <li>The parent returned by
            <method scope="::com::sun::star::accessibility"
            >XAccessibleContext::getAccessibleParent</method>
            is the window which contains the view of these page preview.</li>
        <li>The children returned by
            <method scope="::com::sun::star::accessibility"
            >XAccessibleContext::getAccessibleChild</method> all
            support the interface XAccessible. Calling
            <method scope="::com::sun::star::accessibility"
            >XAccessibleContext::getAccessibleContext</method> for these children returns
            an object that supports one of the following services.</li>
        <ul>
            <li><type scope="::com::sun::star::sheet"
                >AccessiblePageHeaderFooterAreasView</type>: A child where calling
                <method scope="::com::sun::star::accessibility"
                >XAccessibleContext::getAccessibleChild</method>
                an object that supports this service is returned for
                every header and footer that is at least partially visible.</li>
            <li><type scope="::com::sun::star::table">AccessibleTableView</type>:
                A child where calling
                <method scope="::com::sun::star::accessibility"
                >XAccessibleChild::getAccessibleChild</method>
                an object that supports this service is returned for
                every table fragment that is contained in the document body
                and is at least partially visible. A table fragment is the
                part of a table that is displayed on a certain page.</li>
            <li><type scope="::com::sun::star::drawing">AccessibleShape</type>:
                A child where calling
                <method scope="::com::sun::star::accessibility"
                >XAccessibleContext::getAccessibleChild</method>
                an object that supports this service is returned
                for every shape that is at least partially visible. These
                objects are children of the
                <type>AccessibleSpreadsheetPageView</type> regardless
                whether they are bound to a table or a cell.</li>
            <li><type scope="::com::sun::star::text">AccessibleParagraphView</type>:
                A child where calling
                <method scope="::com::sun::star::accessibility"
                >XAccessibleContext::getAccessibleChild</method>
                an object that supports this service is returned for
                every note (its paragraphs) and its location (which is
                represented as a paragraph with the cell name as content).</li>
        </ul>
        <p>The following rules apply to the children order. General it
            represents the paint order. The object in the background came
            first and than all over lying objects. The last painted object
            is also the last child.</p>
        <ul>
            <li>The logical order of paragraph and table fragments is never
                changed.</li>
            <li>Headers appear immediately before the first table fragment
                of the header's page.</li>
            <li>Footers appear immediately after the last table fragment.</li>
            <li>Shapes appear before any other children if they are painted
                in the background.  Their order reflects the z order.</li>
            <li>Shapes appear behind any other children except controls if
                they are painted in the foreground. Their order reflects the
                z order.</li>
            <li>Controls appear behind any other objects. Their order
                reflects the z order.</li>
        </ul>
        <li>The description is ???.</li>
        <li>The name is Spreadsheet Document Page Preview.</li>
        <li>The role is <const scope="::com::sun::star::accessibility"
            >AccessibleRole::DOCUMENT</const></li>
        <li>There are no relations.</li>
        <li>The following states are supported:
            <ul>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::DEFUNC</const> is always false until
                    the preview is closed.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::EDITABLE</const> is always false,
                    because the document is not editable in the page preview.
                    So it is left out of the list.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::ENABLED</const> is always true.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::MULTILINE</const> makes no sense on a
                    document and so it is left out of the list.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::MULTI_SELECTABLE</const> is always
                    false, because in a page preview a selection is not
                    possible. So it is left out of the list.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::OPAQUE</const> is always true.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::RESIZEABLE</const> is always false,
                    because you can resize the window of the page preview, but
                    not the page preview itself. So it is left out of the
                    list.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::SELECTABLE</const> is always false,
                    because in the page preview is no selection possible. So
                    it is left out of the list.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::SELECTED</const> is always false,
                    because in the page preview is no selection possible. So
                    it is left out of the list.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::SHOWING</const>Is true if the
                    Bounding Box lies in the Bounding Box of the parent.
                    Otherwise it is false.</li>
                <li><const scope="::com::sun::star::accessibility"
                    >AccessibleStateType::VISIBLE</const>Is always true.</li>
            </ul>
        </li>
    </ul>

     */
    interface ::com::sun::star::accessibility::XAccessibleContext;

    /** This interface gives access to the visibility of the document.
    */
    interface ::com::sun::star::accessibility::XAccessibleComponent;

    /** This is the interface for listeners */
    interface ::com::sun::star::accessibility::XAccessibleEventBroadcaster;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
