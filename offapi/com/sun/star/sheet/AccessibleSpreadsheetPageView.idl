/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sheet_AccessibleSpreadsheetPageView_idl__
#define __com_sun_star_sheet_AccessibleSpreadsheetPageView_idl__

#include <com/sun/star/accessibility/XAccessibleContext.idl>
#include <com/sun/star/accessibility/XAccessibleComponent.idl>
#include <com/sun/star/accessibility/XAccessibleEventBroadcaster.idl>


module com {  module sun {  module star {  module sheet {


/** The accessible view of a spreadsheet page preview

     @since OOo 1.1.2

 */
service AccessibleSpreadsheetPageView
{
    /** This interface gives access to any object that is at least partially
        visible on the screen in the page preview.

    <ul>
        <li>The parent returned by
            ::com::sun::star::accessibility::XAccessibleContext::getAccessibleParent()
            is the window which contains the view of these page preview.</li>
        <li>The children returned by
            ::com::sun::star::accessibility::XAccessibleContext::getAccessibleChild()
            all support the interface XAccessible. Calling
            ::com::sun::star::accessibility::XAccessible::getAccessibleContext()
            for these children returns
            an object that supports one of the following services.</li>
        <ul>
            <li>::com::sun::star::sheet::AccessiblePageHeaderFooterAreasView:
                A child where calling
                ::com::sun::star::accessibility::XAccessibleContext::getAccessibleChild()
                an object that supports this service is returned for
                every header and footer that is at least partially visible.</li>
            <li>::com::sun::star::table::AccessibleTableView:
                A child where calling
                ::com::sun::star::accessibility::XAccessibleContext::getAccessibleChild()
                an object that supports this service is returned for
                every table fragment that is contained in the document body
                and is at least partially visible. A table fragment is the
                part of a table that is displayed on a certain page.</li>
            <li>::com::sun::star::drawing::AccessibleShape:
                A child where calling
                ::com::sun::star::accessibility::XAccessibleContext::getAccessibleChild()
                an object that supports this service is returned
                for every shape that is at least partially visible. These
                objects are children of the
                AccessibleSpreadsheetPageView regardless
                whether they are bound to a table or a cell.</li>
            <li>::com::sun::star::text::AccessibleParagraphView:
                A child where calling
                ::com::sun::star::accessibility::XAccessibleContext::getAccessibleChild()
                an object that supports this service is returned for
                every note (its paragraphs) and its location (which is
                represented as a paragraph with the cell name as content).</li>
        </ul>
        <p>The following rules apply to the children order. General it
            represents the paint order. The object in the background came
            first and than all over lying objects. The last painted object
            is also the last child.</p>
        <ul>
            <li>The logical order of paragraph and table fragments is never
                changed.</li>
            <li>Headers appear immediately before the first table fragment
                of the header's page.</li>
            <li>Footers appear immediately after the last table fragment.</li>
            <li>Shapes appear before any other children if they are painted
                in the background.  Their order reflects the z order.</li>
            <li>Shapes appear behind any other children except controls if
                they are painted in the foreground. Their order reflects the
                z order.</li>
            <li>Controls appear behind any other objects. Their order
                reflects the z order.</li>
        </ul>
        <li>The description is ???.</li>
        <li>The name is Spreadsheet Document Page Preview.</li>
        <li>The role is
            ::com::sun::star::accessibility::AccessibleRole::DOCUMENT_SPREADSHEET</li>
        <li>There are no relations.</li>
        <li>The following states are supported:
            <ul>
                <li>::com::sun::star::accessibility::AccessibleStateType::DEFUNC
                    is always false until the preview is closed.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::EDITABLE
                    is always false,
                    because the document is not editable in the page preview.
                    So it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::ENABLED
                    is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::MULTI_LINE
                    makes no sense on a
                    document and so it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::MULTI_SELECTABLE
                    is always false, because in a page preview a selection is
                    not possible. So it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::OPAQUE
                    is always true.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::RESIZABLE
                    is always false,
                    because you can resize the window of the page preview, but
                    not the page preview itself. So it is left out of the
                    list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SELECTABLE
                    is always false,
                    because in the page preview is no selection possible. So
                    it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SELECTED
                    is always false,
                    because in the page preview is no selection possible. So
                    it is left out of the list.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::SHOWING
                    is true if the
                    Bounding Box lies in the Bounding Box of the parent.
                    Otherwise it is false.</li>
                <li>::com::sun::star::accessibility::AccessibleStateType::VISIBLE
                    is always true.</li>
            </ul>
        </li>
    </ul>

     */
    interface ::com::sun::star::accessibility::XAccessibleContext;

    /** This interface gives access to the visibility of the document.
    */
    interface ::com::sun::star::accessibility::XAccessibleComponent;

    /** This is the interface for listeners */
    interface ::com::sun::star::accessibility::XAccessibleEventBroadcaster;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
