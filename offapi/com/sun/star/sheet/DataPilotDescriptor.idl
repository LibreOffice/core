/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_sheet_DataPilotDescriptor_idl__
#define __com_sun_star_sheet_DataPilotDescriptor_idl__

#include <com/sun/star/sheet/XDataPilotDescriptor.idl>
#include <com/sun/star/sheet/XDataPilotDataLayoutFieldSupplier.idl>
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/beans/PropertyValue.idl>


module com { module sun { module star { module sheet {


/** represents the description of the layout of a data pilot table.

    @see com::sun::star::sheet::DataPilotTable
*/
published service DataPilotDescriptor
{

    /** provides access to the layout settings of the data pilot table.
     */
    interface XDataPilotDescriptor;


    /** provides access to the layout settings of the data pilot table.
     */
    [optional] interface com::sun::star::beans::XPropertySet;


    /** Provides access to the DataPilotField used to layout
        multiple data fields.
     */
    [optional] interface XDataPilotDataLayoutFieldSupplier;


    /** specifies parameters to create the data pilot table from a database.

    @see DatabaseImportDescriptor
    @since OOo 3.3

     */
    [optional, property] sequence< com::sun::star::beans::PropertyValue > ImportDescriptor;


    /** specifies the name of a DataPilotSource implementation
        for the data pilot table.

    @since OOo 3.3

     */
    [optional, property] string SourceServiceName;


    /** specifies arguments that are passed to the implementation named by
        #SourceServiceName.

    @since OOo 3.3

     */
    [optional, property] sequence< com::sun::star::beans::PropertyValue > ServiceArguments;


    /** specifies if empty rows in the source data are ignored.
     */
    [optional, property] boolean IgnoreEmptyRows;


    /** specifies if empty category cells in the source data should be treated
        as repetition of the content from the previous row.
     */
    [optional, property] boolean RepeatIfEmpty;


    /** specifies if columns for grand total results are created.
     */
    [optional, property] boolean ColumnGrand;


    /** specifies if rows for grand total results are created.
     */
    [optional, property] boolean RowGrand;


    /** specifies whether the filter button is shown.
     */
    [optional, property] boolean ShowFilterButton;


    /** specifies whether to drill down to details or go into edit mode.
     */
    [optional, property] boolean DrillDownOnDoubleClick;


    /** specifies a label for grand total results.

    @since OOo 3.4
     */
    [optional, property] string GrandTotalName;

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
