/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_auth_XSSOAcceptorContext_idl__
#define __com_sun_star_auth_XSSOAcceptorContext_idl__

#include <com/sun/star/auth/AuthenticationFailedException.idl>
#include <com/sun/star/auth/InvalidArgumentException.idl>
#include <com/sun/star/auth/InvalidContextException.idl>
#include <com/sun/star/auth/InvalidCredentialException.idl>
#include <com/sun/star/auth/XSSOContext.idl>

module com { module sun { module star { module auth {

/** represents an acceptor side security context.
    <P>This context may be used to authenticate a Single Sign-on initiator based
       on a security token sent by the initiator and to generate a token to be
       sent back to the initiator so that it can authenticate the acceptor.

    @since OOo 1.1.2
*/

published interface XSSOAcceptorContext : ::com::sun::star::auth::XSSOContext
{
    /** accepts/authenticates an SSO token sent from the context initiator side.
        <P>
        accept() should be called only once. Subsequent calls produce
        undefined results.

        @param Token
        the SSO token sent by the initiator.

        @returns
        the sequence of bytes to be sent back to the initiator to allow
        authentication of the acceptor side, if mutual authentication is
        supported by the security context. If mutual authentication is not
        supported a zero length sequence is returned.
     */

    sequence< byte >    accept( [in] sequence< byte > Token )
        raises( InvalidArgumentException,
                InvalidCredentialException,
                InvalidContextException,
                AuthenticationFailedException );
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
