/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_report_XReportComponent_idl__
#define __com_sun_star_report_XReportComponent_idl__

#include <com/sun/star/container/XChild.idl>

#include <com/sun/star/lang/XComponent.idl>

#include <com/sun/star/container/XNamed.idl>

#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/util/XCloneable.idl>
#include <com/sun/star/awt/XControlModel.idl>
#include <com/sun/star/drawing/XShape.idl>


 module com {  module sun {  module star {  module report {
 interface XSection;
/** describes a component which may be part of a report.

    @see XReportDefinition
 */
interface XReportComponent
{
    interface com::sun::star::util::XCloneable;
    /** identifies the component as a candidate for being part of a report.
        <p>This interface also provides the access to the component's parent.</p>
     */
    interface com::sun::star::container::XChild;

    /** allows life-time control of report components.
     */
    interface com::sun::star::lang::XComponent;

    interface com::sun::star::drawing::XShape;

    /** gives access to the properties.
    */
    interface com::sun::star::beans::XPropertySet;

    /** the name of the component.
     */
    [attribute,bound] string Name
    {
        set raises ( com::sun::star::beans::PropertyVetoException );
    };

    /** specifies the height of the control.
     */
    [attribute,bound] long Height
    {
        set raises ( com::sun::star::beans::PropertyVetoException );
    };

    /** specifies the horizontal position of the control.
     */
    [attribute,bound] long PositionX;

    /** specifies the vertical position of the control.
     */
    [attribute,bound] long PositionY;

    /** specifies the width of the control.
     */
    [attribute,bound] long Width
    {
        set raises ( com::sun::star::beans::PropertyVetoException );
    };

    /** specifies the border style of the control.

        <pre>
        0: No border
        2: simple border
        </pre>
     */
    [attribute,bound] short ControlBorder
    {
        set raises ( com::sun::star::lang::IllegalArgumentException,com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };


    /** specifies the color of the border, if present

        <p>Not every border style (see Border) may support coloring.
        For instance, usually a border with 3D effect will ignore the BorderColor setting.</p>
     */
    [attribute,bound] long ControlBorderColor
    {
        set raises ( com::sun::star::lang::IllegalArgumentException,com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

    /** Specifies that recurring values are printed.
        If set to `TRUE` then the value will be printed every time. If set to `FALSE` then the value will only be printed once.
        The default value is `TRUE`.
    */
    [attribute,bound] boolean PrintRepeatedValues
    {
        set raises ( com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

        /** is used for subreports and contains the names of columns of the parent report.
    <p> These columns are typically the foreign key fields of the parent report.
    The values of theses columns are used to identify the data for the subreport.
    Each time the parent report changes its current row, the subreport requeries
    it's data based on the values of the master fields.</p>
    <p>If the report is no sub report (e.g. its parent is not a report itself), this
    property is not evaluated.</p>

    */
    [attribute,bound] sequence<string> MasterFields
    {
        set raises ( com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };

    /**is used for subreports and contains the names of the columns of the subreport
    which are related to the master fields of the parent report.
    <p>Entries in this sequence can either denote column names in the sub report,
    or parameter names.<br/>
    For instance, you could base the report on the SQL statement
    <code>SELECT * FROM invoices WHERE cust_ref = :cid</code>, and add <code>cid</code>
    to the DetailFields property. In this case, the parameter will be filled from
    the corresponding master field.<br/>
    Alternatively, you could simply base your report on the table <code>invoices</code>,
    and add the column name <code>cust_ref</code> to the DetailFields. In this case,
    and implicit filter clause <code>WHERE cust_ref = :&lt;new_param_name&gt;</code> will
    be created, and the artificial parameter will be filled from the corresponding
    master field.<br/>
    If a string in this property denotes both a column name and a parameter name, it
    is undefined which way it is interpreted, but implementations of the service are required
    to either decide for the parameter or the column, and proceed as usual.
    </p>
    <p>The columns specified herein typically represent a part of the primary key
    fields or their aliases of the detail report.</p>
    <p>If the report is no sub report (e.g. its parent is not a report itself), this
    property is not evaluated.</p>
    *
    */
    [attribute,bound] sequence<string> DetailFields
    {
        set raises ( com::sun::star::beans::UnknownPropertyException );
        get raises ( com::sun::star::beans::UnknownPropertyException );
    };


    /** Specifies the section where the control belongs to.
        This is a shortcut to get control hierarchy up.
        This value is `NULL` when the control was not inserted in any section.
    */
    [attribute,readonly] com::sun::star::report::XSection Section;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
