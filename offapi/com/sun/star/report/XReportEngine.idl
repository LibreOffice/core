/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_report_XReportEngine_idl__
#define __com_sun_star_report_XReportEngine_idl__

#include <com/sun/star/report/XReportDefinition.idl>
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/util/URL.idl>
#include <com/sun/star/frame/XModel.idl>
#include <com/sun/star/task/XStatusIndicator.idl>
#include <com/sun/star/frame/XFrame.idl>
#include <com/sun/star/sdbc/XConnection.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/lang/DisposedException.idl>
#include <com/sun/star/uno/Exception.idl>

module com {  module sun {  module star {  module report {
/** identifies a XReportEngine which allows the creation of OpenDocument files.

    <p>The following events are supported by the report engine.
        OnPageStarted       Is fired when a new page started.
        OnReportStarted     Is fired when a new report started.
        OnGroupStarted      Is fired when a new group started.
        OnGroupEnded        Is fired when the group ended.
        OnReportEnded       Is fired when the report ended.
        OnPageEnded         Is fired when the page ended.

    @see com::sun::star::document::OfficeDocument
*/

interface XReportEngine
{
    /** allows life-time control of report engine.
     */
    interface com::sun::star::lang::XComponent;

    /** gives access to the properties.
    */
    interface com::sun::star::beans::XPropertySet;

    /** creates a report document.
        @throws com::sun::star::lang::DisposedException
            If the report engine is already disposed.
        @throws com::sun::star::lang::IllegalArgumentException
            If the report definition was not set or is `NULL`.
    */
    com::sun::star::frame::XModel createDocumentModel()
        raises( ::com::sun::star::lang::DisposedException,
                com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::uno::Exception );

    /** creates a report document.
        @param  frame
            The frame must have a controller set. This controller will be set at the model.
        @throws com::sun::star::lang::DisposedException
            If the report engine is already disposed.
        @throws com::sun::star::lang::IllegalArgumentException
            If the report definition was not set or is `NULL`.

        OJ: Has to be discussed if this method is useful.
    */
    com::sun::star::frame::XModel createDocumentAlive([in] com::sun::star::frame::XFrame frame)
        raises( ::com::sun::star::lang::DisposedException,
                com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::uno::Exception );

    /** creates a report document.
        @return
            The URL where the new document is located.
        @throws com::sun::star::lang::DisposedException
            If the report engine is already disposed.
        @throws com::sun::star::lang::IllegalArgumentException
            If the report definition was not set or is `NULL`.
    */
    com::sun::star::util::URL createDocument()
        raises( ::com::sun::star::lang::DisposedException,
                com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::uno::Exception );

    /** allows to interrupt the creation process of the report document.
        @throws com::sun::star::lang::DisposedException
            If the report engine is already disposed.
    */
    void interrupt()
        raises( ::com::sun::star::lang::DisposedException,
                ::com::sun::star::uno::Exception );

    /** specifies the report definition object which is used to create the resulting report.
    */
    [attribute,bound] XReportDefinition ReportDefinition
    {
        set raises (com::sun::star::lang::IllegalArgumentException);
    };

    /** specifies the active connection which is used to create the resulting report.
    */
    [attribute,bound] com::sun::star::sdbc::XConnection ActiveConnection
    {
        set raises (com::sun::star::lang::IllegalArgumentException);
    };

    /** specifies the status indicator which shows the progress of the report generation process.
    */
    [attribute] com::sun::star::task::XStatusIndicator StatusIndicator;

    /** defines the maximum number of rows which should be fetched for the report.
        If the limit is exceeded, the excess rows are silently dropped.
        <br/>
        There is no limitation, if set to zero.
     */
    [attribute,bound] long MaxRows;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
