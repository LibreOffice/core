/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_frame_XDispatchHelper_idl__
#define __com_sun_star_frame_XDispatchHelper_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/frame/XDispatchProvider.idl>
#include <com/sun/star/beans/PropertyValue.idl>


 module com {  module sun {  module star {  module frame {

/** provides an easy way to dispatch functions useful at UI level.

    @see XDispatch

    @since OOo 1.1.2
 */
published interface XDispatchHelper : com::sun::star::uno::XInterface
{
        /** executes the dispatch.

        Listeners are not supported here!

        @param DispatchProvider
             points to the provider, which should be asked for valid dispatch objects

        @param URL
            describes the feature which should be supported by internally used dispatch object

        @param TargetFrameName
            specifies the frame which should be the target for this request

        @param SearchFlags
            optional search parameter for finding the frame if no special
            <var>TargetFrameName</var> was used

        @param Arguments
            optional arguments for this request
            They depend on the real implementation of the dispatch object.

        @return
            A possible result of the executed internal dispatch.
            The information behind this `any` depends on the dispatch!

        @see XDispatch::dispatch()
        */

        any executeDispatch(
                [in] XDispatchProvider DispatchProvider,
                [in] string URL,
                [in] string TargetFrameName,
                [in] long SearchFlags,
                [in] sequence< com::sun::star::beans::PropertyValue > Arguments );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
