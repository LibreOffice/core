/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_SynchronousFrameLoader_idl__
#define __com_sun_star_frame_SynchronousFrameLoader_idl__

#include <com/sun/star/frame/XSynchronousFrameLoader.idl>
#include <com/sun/star/lang/XInitialization.idl>
#include <com/sun/star/container/XNamed.idl>


 module com {  module sun {  module star {  module frame {

/** derivations of this abstract service are used to load components
    into <type>Frame</type>s of the environment

    <p>
    Concrete implementations of this service register, for example,
    for file name extensions or MIME types to load appropriate
    components. The components loaded are at least <type>Controller</type>.
    Instead of service <type>FrameLoader</type> this one use synchronous
    processes to load the component.
    </p>

    @see FrameLoader
 */
published service SynchronousFrameLoader
{
    /** support synchronous loading of component
     */
    interface XSynchronousFrameLoader;

    /** support initialization of loader with its own configuration!

        <p>
        Concrete implementations should use it to get her own configuration data
        directly after creation by the <type>FrameLoaderFactory</type>.
        Otherwise they must use normal configuration API to do so.
        </p>
     */
    [optional] interface com::sun::star::lang::XInitialization;

    /** provides access to the internal name of this frame loader

        <p>
        The internal name is a part of his configuration and will be passed by
        the <type>FrameLoaderFactory</type> after creation
        if optional interface <type scope="com::sun::star::lang">XInitialization</type>
        is supported. Value of function <member scope="com::sun::star::container">XNamed::getName()</member> can be
        used on service <type>FrameLoaderFactory</type> to get further informations about this loader.
        Setting of this name by calling <member scope="com::sun::star::container">XNamed::setName()</member> must be
        forwarded to same factory service. He should decide, if it's allowed or not.
        The reason: prevent code against name ambiguities.
        </p>
     */
     [optional] interface com::sun::star::container::XNamed;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
