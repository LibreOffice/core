/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XDispatchProviderInterception_idl__
#define __com_sun_star_frame_XDispatchProviderInterception_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/frame/XDispatchProviderInterceptor.idl>



 module com {  module sun {  module star {  module frame {

/** makes it possible to register an <type>XDispatchProvider</type> which
    intercepts all requests of <type>XDispatch</type> to this instance.

    <p>
    Note: Nobody can guarantee order of used interceptor objects if more then ones exist.
    Later registered ones will be used at first. But it's possible to increase the chance
    for that by providing the optional interface <type>XInterceptorInfo</type>.
    </p>

    @see XDispatchProvider
    @see XDispatch
    @see XInterceptorInfo
 */
published interface XDispatchProviderInterception: com::sun::star::uno::XInterface
{
    /** registers an <type>XDispatchProviderInterceptor</type>, which will become
        the first interceptor in the chain of registered interceptors.

        @param Interceptor
            the interceptor which wishes to be registered

        @see XDispatchProviderInterception::releaseDispatchProviderInterceptor()
     */
    void registerDispatchProviderInterceptor( [in] XDispatchProviderInterceptor Interceptor );

    /** removes an <type>XDispatchProviderInterceptor</type> which was previously registered

        <p>
        The order of removals is arbitrary. It is not necessary to remove the last
        registered interceptor first.
        </p>

        @param Interceptor
            the interceptor which wishes to be unregistered

        @see XDispatchProviderInterception::registerDispatchProviderInterceptor()
     */
    void releaseDispatchProviderInterceptor( [in] XDispatchProviderInterceptor Interceptor );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
