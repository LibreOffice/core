/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XRecordableDispatch_idl__
#define __com_sun_star_frame_XRecordableDispatch_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/frame/XDispatchRecorder.idl>
#include <com/sun/star/util/URL.idl>


 module com {  module sun {  module star {  module frame {

/** extends an existing <type>XDispatch</type> implementation with functionality
    for dispatch recording

    <p>
    This interface can be implemented as an additional one beside an existing
    <type>XDispatch</type> one to provide record functionality of dispatches.
    Because it's an additional interface the status events are available there
    and not at this interface.
    </p>

    <p>
    But normally this interface mustn't be used directly.
    If a dispatch object is well known and recording was enabled
    on a <type>XDispatchRecorderSupplier</type> it's possible to use method
    <member>XDispatchRecorderSupplier::dispatchAndRecord()</member> of it
    to make dispatch and recording automatically. The interface XRecordableDispatch
    is used transparently there.
    </p>

    @example
    <listing>
        <i>XDispatch</i> xDispatcher = xFrame.queryDispatch(aURL,"",0);
        <i>XRecordableDispatch</i> xRecordable = (<i>XRecordableDispatch</i>)UnoRuntime.queryInterface(
        &nbsp;&nbsp;XRecordableDispatch.class,
        &nbsp;&nbsp;xDispatcher);

        xDispatcher.addStatusListener(this,aURL);

        <b>if</b> (xRecordable!=<b>null</b>)
        &nbsp;&nbsp;xRecordable.dispatchAndRecord(aURL,lArguments,xRecorder);
        else
        &nbsp;&nbsp;xDispatcher.dispatch(aURL,lArguments);
        ...
        xDispatcher.removeStatusListener(this,aURL);
    </listing>

    @see XDispatchRecorderSupplier
    @see XDispatch

    @since OOo 1.1.2
 */
published interface XRecordableDispatch: com::sun::star::uno::XInterface
{
    /** dispatch and record it

        @param URL
            full parsed URL which describe the feature which should be dispatched (executed)

        @param Arguments
            optional arguments for this request
            (see <type scope="com::sun::star::document">MediaDescriptor</type> for details)

        @param Recorder
            object which can be used to record the request
            (available on <member>XDispatchRecorderSupplier::getDispatchRecorder()</member>)
     */
    [oneway] void dispatchAndRecord(
        [in] com::sun::star::util::URL URL,
        [in] sequence<com::sun::star::beans::PropertyValue> Arguments,
        [in] XDispatchRecorder Recorder);
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
