/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_DispatchProvider_idl__
#define __com_sun_star_frame_DispatchProvider_idl__

#include <com/sun/star/frame/XDispatchProvider.idl>
#include <com/sun/star/frame/XDispatchProviderInterception.idl>


module com {  module sun {  module star {  module frame {

/** provides <type>XDispatch</type> objects for certain functions which
    are useful at the UI

    <p>
    Such dispatch objects must be queried explicitly and used for
    queried purposes only. They can handle requests with guaranteed
    notifications (<type>XNotifyingDispatch</type>) or with possible
    (but not guaranteed) notifications (<type>XDispatch</type>).
    </p>

    @see XNotifyingDispatch
    @see XDispatch
    @see XControlNotificationListener
 */
published service DispatchProvider
{
    /** provides handling of dispatches with defined result state

        <p>
        Base interface of <type>XNotifyingDispatch</type> is <type>XDispatch</type>
        and can be called for requests if result isn't necessary for dispatch operation.
        </p>

        @see XDispatch
     */
    interface XDispatchProvider;

    /** provides dispatch interception

        <p>
        It makes it possible to register an <type>XDispatchProvider</type> which
        intercepts all requests of <type>XDispatch</type> to this instance.
        </p>
     */
    [optional] interface XDispatchProviderInterception;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
