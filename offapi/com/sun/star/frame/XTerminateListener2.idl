/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_frame_XTerminateListener2_idl__
#define __com_sun_star_frame_XTerminateListener2_idl__

#include <com/sun/star/frame/XTerminateListener.idl>


 module com {  module sun {  module star {  module frame {

/** extend interface XTerminateListener so a listener will be informed
    in case termination process was canceled by other reasons.
 */
interface XTerminateListener2 : ::com::sun::star::frame::XTerminateListener
{
    /** is called when the master environment (e.g., desktop) was canceled in
        it's terminate request.

        <p>
        Termination can be intercepted by throwing TerminationVetoException.
        But if a listener was queried for termination .. doesn't throw a veto exception ...
        it doesn't know if termination will be real next time.
        Because any other listener can throw those exception too ... and so it can happen
        that after queryTermination() no notifyTermination() will occur. But these listener
        don't know if its allowed to start new processes then.
        Using this optional(!) interface will make it possible to be informed about
        canceled termination requests also.
        </p>

        @param Event
               describe the source of the event (e.g., the desktop)
     */
    void cancelTermination( [in] com::sun::star::lang::EventObject Event );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
