/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_frame_XFrameLoader_idl__
#define __com_sun_star_frame_XFrameLoader_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/frame/XFrame.idl>
#include <com/sun/star/beans/PropertyValue.idl>
#include <com/sun/star/frame/XLoadEventListener.idl>



 module com {  module sun {  module star {  module frame {

/** load components into a frame

    <p>
    It's an asynchronous loading. For synchronous processes use XSynchronousFrameLoader
    instead of this one. The generic load algorithm of the office supports both ones - but preferred
    the synchronous interface.
    </p>

    @see XFrame
 */
published interface XFrameLoader: com::sun::star::uno::XInterface
{
    /** starts the loading of the specified resource into the specified Frame.

        @param Frame
            specifies the loading target

        @param URL
            describes the resource of loading component
            Support of special protocols are implementation details
            and depends from the environment.

        @param Arguments
            optional arguments for loading
            (see com::sun::star::document::MediaDescriptor for further information)

        @param Listener
            this listener will be informed about success

        @see XLoadEventListener
     */
    void load(
        [in] XFrame Frame,
        [in] string URL,
        [in] sequence< com::sun::star::beans::PropertyValue > Arguments,
        [in] XLoadEventListener Listener);

    /** cancels the loading process.

        <p>
        After returning from this call, neither the frame nor the
        load-event-listener specified in XFrameLoader::load() may be called back.
        Because only the owner of this process who called load method
        before can cancel this process. And he doesn't need any notification about that.
        On the other hand - nobody then this owner himself can be registered as an
        XLoadEventListener here.
        </p>
     */
    void cancel();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
