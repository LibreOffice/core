/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XFrameLoader_idl__
#define __com_sun_star_frame_XFrameLoader_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/frame/XFrame.idl>
#include <com/sun/star/beans/PropertyValue.idl>
#include <com/sun/star/frame/XLoadEventListener.idl>



 module com {  module sun {  module star {  module frame {

/** load components into a frame

    <p>
    It's an asynchronous loading. For synchronous processes use <type>XSynchronousFrameLoader</type>
    instead of this one. The generic load algorithm of the office supports both ones - but preferred
    the synchronous interface.
    </p>

    @see XFrame
 */
published interface XFrameLoader: com::sun::star::uno::XInterface
{
    /** starts the loading of the specified resource into the specified <type>Frame</type>.

        @param Frame
            specifies the loading target

        @param URL
            describes the resource of loading component
            Support of special protocols are implementation details
            and depends from the environment.

        @param Arguments
            optional arguments for loading
            (see <type scope="com::sun::star::document">MediaDescriptor</type> for further informations)

        @param Listener
            this listener will be informed about success

        @see XLoadEventListener
     */
    [oneway] void load(
        [in] XFrame Frame,
        [in] string URL,
        [in] sequence< com::sun::star::beans::PropertyValue > Arguments,
        [in] XLoadEventListener Listener);

    /** cancels the loading process.

        <p>
        After returning from this call, neither the frame nor the
        load-event-listener specified in <member>XFrameLoader::load()</member> may be called back.
        Because only the owner of this process who called load method
        before can cancel this process. And he doesn't need any notification about that.
        On the other hand - nobody then this owner himself can be registered as an
        <type>XLoadEventListener</type> here.
        </p>
     */
    [oneway] void cancel();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
