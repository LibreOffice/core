/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_DispatchRecorderSupplier_idl__
#define __com_sun_star_frame_DispatchRecorderSupplier_idl__

#include <com/sun/star/frame/XDispatchRecorderSupplier.idl>


 module com {  module sun {  module star {  module frame {

/** provides a <type>DispatchRecorder</type>

    <p>
    This supplier regulate macro recording of <member>XDispatch::dispatch()</member>
    calls. For that it encapsulates a reference to a <type>DispatchRecorder</type>.
    Such recorder is used internally and can be used externally too.
    A supplier will be available on a <type>Frame</type> if recording was enabled,
    otherwise not. A frame supports a special property for that.
    This modular concept of recorder, supplier and frame makes it possible to
    implement local recording on one frame; global recording by using all currently
    opened frames or only some of them; and so on.
    </p>

    @see DispatchRecorder
    @see Frame
    @since OOo 1.1.2
 */
published service DispatchRecorderSupplier : XDispatchRecorderSupplier;


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
