/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_frame_XDispatchRecorder_idl__
#define __com_sun_star_frame_XDispatchRecorder_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/util/URL.idl>
#include <com/sun/star/beans/PropertyValue.idl>


module com {  module sun {  module star {  module frame {

 published interface XFrame;

/** provides recording functionality of dispatches

    <p>
    With such recorder it will be possible to record requests of type
    XDispatch by using additional interface
    XRecordableDispatch. The result of that will be a
    a script which can be used to start the dispatch at later time again.
    Such recorder objects are available on a XDispatchRecorderSupplier
    which is provided by the Frame service.
    </p>

    @see Frame
    @see XDispatchRecorderSupplier

    @since OOo 1.1.2
 */
published interface XDispatchRecorder: com::sun::star::uno::XInterface
{
    /** initializes the recorder by passing the frame for which all
        macro statements shall be recorded

        @param Frame
            it includes the document on which such requests shall be recorded
    */
    void startRecording( [in] com::sun::star::frame::XFrame Frame );

    /** stops the recording process

        <p>
        Must be called in pairs with XDispatchRecorder::startRecording().
        </p>

        @attention  The recorder uses this method to control the lifetime of its internal
                    used macro buffer. It will be cleared here. So the macro must be fetched
                    before endRecording() is called.

        @see        getRecordedMacro()
    */
    void endRecording();

    /** records a single dispatch call identified by its command URL

        @param URL
            the full parsed command URL

        @param Arguments
            optional arguments for the command URL
            <br>
            (see com::sun::star::document::MediaDescriptor
             for further information)
    */
    void recordDispatch(
        [in] com::sun::star::util::URL URL,
        [in] sequence<com::sun::star::beans::PropertyValue> Arguments);

    /** records a single dispatch call identified by its command URL, but
        comments it out

        <p>
        This way calls that failed on execution can be documented.
        </p>

        @param URL
            the full parsed command URL

        @param Arguments
            optional arguments for the command URL
            <br>
            (see com::sun::star::document::MediaDescriptor
             for further information)
    */
    void recordDispatchAsComment(
        [in] com::sun::star::util::URL URL,
        [in] sequence<com::sun::star::beans::PropertyValue> Arguments);

    /** returns the recorded source code

        <p>
        This method must be used before endRecording() is called!
        Otherwise the macro will be released.
        </p>

        @returns
            the recorded data as a string which can be interpreted as a script
    */
    string getRecordedMacro();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
