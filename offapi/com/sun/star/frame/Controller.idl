/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_frame_Controller_idl__
#define __com_sun_star_frame_Controller_idl__

#include <com/sun/star/frame/XController.idl>
#include <com/sun/star/frame/XDispatchProvider.idl>
#include <com/sun/star/awt/XWindow.idl>
#include <com/sun/star/ui/XContextMenuInterception.idl>
#include <com/sun/star/awt/XUserInputInterception.idl>
#include <com/sun/star/view/XSelectionSupplier.idl>
#include <com/sun/star/datatransfer/XTransferableSupplier.idl>


 module com {  module sun {  module star {  module frame {

/** is an abstract service for a component which offers a deeper integration of
    desktop components than a com::sun::star::awt::XWindow
    can offer

    <p>
    Such components can be loaded into a Frame inside a Desktop
    environment. A controller is a richer component then a pure window, but full featured
    components need a XModel interface too.
    <br>
    (see service com::sun::star::document::OfficeDocument for further information)
    <p>

    @see com::sun::star::document::OfficeDocument
 */
published service Controller
{
    /** with this interface, components viewed in a Frame can serve
        events (by supplying dispatches)
     */
    interface XController;

    /** for certain functions which are useful at the UI

        <p>
        Mostly used by the Frame service, which contains this
        controller object. There will be an interception mechanism for dispatches
        available too.
        </p>

        @see XDispatch
        @see XDispatchProviderInterception
     */
    interface XDispatchProvider;

    /** this interface enables the controller to get interceptors registered that
        change context menus or prevent them from being executed

        <p>
        Don't mix it with XDispatchProviderInterception which
        intercept calls of XDispatch::dispatch().
        </p>
     */
    [optional] interface com::sun::star::ui::XContextMenuInterception;

    /** makes it possible to intercept keyboard and mouse input.
     */
    [optional] interface com::sun::star::awt::XUserInputInterception;

    /** makes it possible to access and change the selection in a view
     */
    [optional] interface com::sun::star::view::XSelectionSupplier;

    /** makes it possible to work with clipboard data
     */
    [optional] interface com::sun::star::datatransfer::XTransferableSupplier;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
