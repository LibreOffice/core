/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_frame_XDispatchRecorderSupplier_idl__
#define __com_sun_star_frame_XDispatchRecorderSupplier_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/frame/XDispatch.idl>
#include <com/sun/star/frame/XDispatchRecorder.idl>


 module com {  module sun {  module star {  module frame {

/** provides access to the record mechanism of dispatches

    <p>
    With a XDispatchRecorder it's possible to record calls
    of XDispatch::dispatch(). The recorded data (may a script)
    can be used to automate recorded dispatch and start it at later time again.
    This supplier provides access to the recorder and supports some functionality
    to work with the macro recording mechanism in an easy manner.
    </p>

    @see XDispatchRecorder
    @since OOo 1.1.2
 */
published interface XDispatchRecorderSupplier: com::sun::star::uno::XInterface
{
    /** set a dispatch recorder on this supplier

        <p>
        Setting of a new recorder make it possible to change recording mode.
        May there can exist different implementations of a recorder (e.g. to
        generate Java, Basic or other formats). Changing between local recording
        inside one Frame or global one by using more than ones can be
        forced too.
        </p>

        @param Recorder
            the new recorder for this supplier
     */
    void setDispatchRecorder( [in] com::sun::star::frame::XDispatchRecorder Recorder );

    /** provides access on the recorder of this supplier

        <p>
        Returned recorder can be used to record dispatches manually or to get
        recorded data for further using e.g. saving. He is internally used too
        due to the method XDispatchRecorderSupplier::dispatchAndRecord().
        </p>

        @returns
            the dispatch recorder of this supplier

        @see XDispatchRecorder
     */
    com::sun::star::frame::XDispatchRecorder getDispatchRecorder();

    /** dispatch given URL and record it if recording is enabled

        <p>
        Parameter <var>Dispatcher</var> is used internally to make the dispatch.
        If recording isn't enabled it will be a normal XDispatch::dispatch()
        call. Otherwise follow algorithm is used:
        <ul>
            <li>If <var>Dispatcher</var> doesn't support the interface
                XRecordableDispatch a normal dispatch() call
                will be made and depend from the result state of that
                the request will be recorded. In this case it's possible
                to record the incoming parameter (<var>URL</var> and
                <var>Arguments</var>) only. Parameters of internal processes
                can't be recorded then and will be lost.
            </li>
            <li>If <var>Dispatcher</var> support the interface
                XRecordableDispatch it will be used
                to dispatch and record all necessary parameters of
                the whole process.
            </li>
        </ul>
        </p>

        @see XRecordableDispatch
     */
    void dispatchAndRecord(
        [in] com::sun::star::util::URL URL,
        [in] sequence<com::sun::star::beans::PropertyValue> Arguments,
        [in] XDispatch Dispatcher);
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
