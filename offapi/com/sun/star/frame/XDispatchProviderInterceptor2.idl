/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_frame_XDispatchProviderInterceptor2_idl__
#define __com_sun_star_frame_XDispatchProviderInterceptor2_idl__

#include <com/sun/star/frame/XDispatchProvider.idl>



 module com {  module sun {  module star {  module frame {

/** makes it possible to intercept request of XDispatch.

    <p>
    Can be registered as an interceptor by using interface XDispatchProviderInterception.
    </p>

    <p>
    Avoids the loaded master/slave terminology.
    </p>

    @see XDispatchProviderInterception
    @see XDispatchProviderInterceptor
 */
published interface XDispatchProviderInterceptor2: XDispatchProvider
{
    /** access to the secondary XDispatchProvider of this interceptor

        @returns
            the secondary of this interceptor

        @see XDispatchProviderInterceptor::setSecondaryDispatchProvider()
     */
    XDispatchProvider getSecondaryDispatchProvider();

    /** sets the secondary XDispatchProvider to which calls to
        XDispatchProvider::queryDispatch() can be forwarded
        under control of this dispatch provider.

        @param NewDispatchProvider
            the new secondary of this interceptor

        @see XDispatchProviderInterceptor::getSecondaryDispatchProvider()
     */
    void setSecondaryDispatchProvider( [in] XDispatchProvider NewDispatchProvider );

    /** access to the primary XDispatchProvider of this interceptor

        @returns
            the primary of this interceptor

        @see XDispatchProviderInterceptor::setPrimaryDispatchProvider()
     */
    XDispatchProvider getPrimaryDispatchProvider();

    /** sets the primary XDispatchProvider, which may forward
        calls to its XDispatchProvider::queryDispatch()
        to this dispatch provider.

        @param NewSupplier
            the primary of this interceptor

        @see XDispatchProviderInterceptor::getPrimaryDispatchProvider()
     */
    void setPrimaryDispatchProvider( [in] XDispatchProvider NewSupplier );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
