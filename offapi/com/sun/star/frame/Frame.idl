/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_Frame_idl__
#define __com_sun_star_frame_Frame_idl__

#include <com/sun/star/frame/XFrame.idl>
#include <com/sun/star/frame/XDispatchProvider.idl>
#include <com/sun/star/frame/XDispatchRecorderSupplier.idl>
#include <com/sun/star/frame/XDispatchProviderInterception.idl>
#include <com/sun/star/frame/XFramesSupplier.idl>
#include <com/sun/star/task/XStatusIndicatorFactory.idl>
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/frame/XDispatchInformationProvider.idl>
#include <com/sun/star/xml/UserDefinedAttributesSupplier.idl>


 module com {  module sun {  module star {  module frame {

/** represents the environment for a desktop component

    <p>
    Frames are the anchors for the office components and they are the component's link
    to the outside world. They create a skeleton for the whole office API infrastructure
    by building frame hierarchies. These hierarchies contains all currently loaded
    documents and make it possible to walk during these trees.
    A special service <type>Desktop</type> can(!) combine different of such trees
    to a global one which life time will be controlled by it.
    </p>

    @see Desktop
 */
published service Frame
{
    /** contains user defined attributes.

        @see    <type scope="com::sun::star::xml">UserDefinedAttributesSupplier</type>
     */
    [optional] service com::sun::star::xml::UserDefinedAttributesSupplier;

    /** allows the component to be loaded and accessed
        within the frame; it is the main connection to the
        environment of the component.
     */
    interface XFrame;

    /** provides access to dispatchers for the frame.

        <p>
        What kind of URLs a frame accepts in the calls to <member>XDispatchProvider::queryDispatch()</member>,
        and how the returned dispatcher handles dispatches is completely implementation dependent
        (though of course the restrictions of <type>XDispatchProvider</type> must be met).
        Frame implementations may (optionally) support special targets in the call to
        <member>XDispatchProvider::queryDispatch()</member>.
        Such special targets are passed as target frame name. They may, in addition,
        require special frame search flags (see <type>FrameSearchFlag</type>), or,
        in opposite, limit the set of allowed flags.<br>
        Common special targets include:
        <ul>
                        <li><b>_blank</b><br> is used to create a new frame when dispatching the URL.</li>
            <li><b>_default</b><br> is used to recycle empty or create a new frame when dispatching the URL.</li>
            <li><b>_self</b><br> forces the frame to dispatch the URL into itself. ("" means the same)</li>
                        <li><b>_parent</b><br> dispatches the URL into the parent frame.</li>
                        <li><b>_top</b><br> dispatches the URL into the top level frame, the frame where this is invoked belongs to.</li>
        </ul>
        </p>

        @see XDispatch
        @see XFrame::findFrame()
    */
    interface XDispatchProvider;

    /** provides information about supported commands

        @since OOo 2.0
    */
    [optional] interface XDispatchInformationProvider;

    /** supports interception mechanism for dispatched URLs

        <p>
        Registered objects can intercept, suppress or reroute dispatched URLs.
        If they support another interface too (<type>XInterceptorInfo</type>)
        it's possible to perform it by directly calling of right interceptor without
        using list of all registered ones.
        </p>
     */
    interface XDispatchProviderInterception;

    /** provides access to sub frames within this frame
     */
    interface XFramesSupplier;

    /** supplies access to <type scope="com::sun::star::task">XStatusIndicator</type> objects
        for the component within the frame to show progresses
     */
    [optional] interface com::sun::star::task::XStatusIndicatorFactory;

    /** if possible it sets/gets the UI title on/from the frame container window

        <p>
        It depends from the type of the frame container window. If it is a system
        task window all will be OK. Otherwise the title can't be set.
        Setting/getting of the pure value of this property must be possible in every
        case. Only showing on the UI can be fail.
        </p>
     */
    [property] string Title;

    /** provides access to the dispatch recorder of the frame

        <p>
        Such recorder can be used to record dispatch requests.
        The supplier contains a dispatch recorder and provide the functionality
        to use it for any dispatch object from outside which supports the interface
        <type>XDispatch</type>. A supplier is available only, if recording was enabled.
        That means: if someone wishes to enable recoding on a frame he must set
        a supplier with a recorder object inside of it. Every user of dispatches
        has to check then if such supplier is available at this frame property.
        If value of this property is <NULL/> he must call <member>XDispatch::dispatch()</member>
        on the original dispatch object. If it's a valid value he must use the supplier
        by calling his method <member>XDispatchRecorderSupplier::dispatchAndRecord()</member>
        with the original dispatch object as argument.
        </p>

        <p>
        Note:<br>
        It's not recommended to cache an already gotten supplier. Because there exist
        no possibility to check for enabled/disabled recording then.
        </p>

    @since OOo 1.1.2
     */
    [optional, property] XDispatchRecorderSupplier RecorderSupplier;

    /** provides access to the <type>LayoutManager</type> of the frame.
    */
    [optional, property] com::sun::star::uno::XInterface LayoutManager;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
