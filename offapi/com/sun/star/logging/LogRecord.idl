/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_logging_LogRecord_idl__
#define __com_sun_star_logging_LogRecord_idl__

#include <com/sun/star/util/DateTime.idl>


module com { module sun { module star { module logging {


/** assembles the complete information about a to-be-logged event

    @see XLogger

    @since OOo 2.3
 */
struct LogRecord
{
    /// specifies the name of the logger at which the record is logged
    string  LoggerName;

    /** specifies the name of the class, in which the record was logged.

        This name might be empty, in case the caller to one of the various
        <code>log</code> methods of XLogger did not specify it.
    */
    string  SourceClassName;

    /** specifies the name of the method, in which the record was logged.

        This name might be empty, in case the caller to one of the various
        <code>log</code> methods of XLogger did not specify it.
    */
    string  SourceMethodName;

    /// specifies the to-be-logged message
    string  Message;

    /// specifies the time at which the event was logged
    ::com::sun::star::util::DateTime
            LogTime;

    /** specifies the number of the log event.

        Subsequent events get assigned increasing sequence numbers by the XLogger
        at which they're logged.
    */
    hyper   SequenceNumber;

    /// specifies the ID of the thread in which the event was logged
    string  ThreadID;

    /** specifies the level of the log event

        @see LogLevel
    */
    long    Level;
};


}; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
