/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_datatransfer_dnd_XDropTargetDragContext_idl__
#define __com_sun_star_datatransfer_dnd_XDropTargetDragContext_idl__

#include <com/sun/star/datatransfer/dnd/InvalidDNDOperationException.idl>
#include <com/sun/star/uno/XInterface.idl>


module com { module sun { module star { module datatransfer { module dnd {

/** This interface is implemented by any drop target context object.

    <p>A drop target context is created whenever the logical cursor associated
    with a Drag and Drop operation moves within the visible geometry of a
    window associated with a drop target. </p>

    <p>The drop target context provides the mechanism for a potential receiver
    of a drop operation to both provide the end user with the appropriate drag
    under feedback and effect the subsequent data transfer, if appropriate. </p>
*/

published interface XDropTargetDragContext: com::sun::star::uno::XInterface
{
    /** Accept the Drag.

        <p>This method should be called from the methods of XDropTargetListener
        <ul>
            <li>XDropTargetListener::dragEnter()</li>
            <li>XDropTargetListener::dragOver()</li>
            <li>XDropTargetListener::dragActionChanged()</li>
        </ul>
        if the implementation wishes to accept the drag operation with the specified
        action.</p>

        @param dragOperation
        The operation accepted by the target.

        @see DNDConstants
        @see DropTargetDragEvent
    */

    void acceptDrag( [in] byte dragOperation );

    /** Reject the drag as a result of examining the available
        com::sun::star::datatransfer::DataFlavor types
        received in the com::sun::star::datatransfer::dnd::XDropTargetListener::dragEnter() method.
    */

    void rejectDrag();
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
