/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_datatransfer_dnd_XDropTarget_idl__
#define __com_sun_star_datatransfer_dnd_XDropTarget_idl__

#include <com/sun/star/datatransfer/XTransferable.idl>
#include <com/sun/star/uno/XInterface.idl>


module com { module sun { module star { module datatransfer { module dnd {

 published interface XDropTargetListener;

/** This interface is implemented by a view or window that supports drop
    operations.

    <p>Differently to Java, the association between view and interface is fixed
    and cannot be changed. Otherwise, the AWT messaging would have to be
    implemented for any window supporting Drag and Drop operations, which would
    be a performance issue.</p>
*/

published interface XDropTarget: com::sun::star::uno::XInterface
{
    /** Add a DropTargetListener.

        <p>The listener will be queried for the XAutoscroll interface
        to see if it supports autoscrolling.</p>

        @param dtl
        The listener to add to the notification list.
    */

    void addDropTargetListener( [in] XDropTargetListener dtl );

    /** Remove a drop target listener.

        @param dtl
        The listener to remove from notification list.
    */

    void removeDropTargetListener( [in] XDropTargetListener dtl );

    /** Indicates either a drop target object is active or not.

        @returns
        A boolean indicating whether or not this drop target object is
        currently active, that is ready to accept drops.
    */

    boolean isActive();

    /** Sets the drop target object active or inactive.

        @param active
        A value of `TRUE` sets the drop target object active.
        <p>A value of `FALSE` sets the drop target object inactive.
    */

    void setActive( [in] boolean active );

    /** Determine the actions supported by a drop target.

        @returns
        The current action or actions supported by this drop target.

        <p>By default this will include all drag and drop actions.</p>

        @see com::sun::star::datatransfer::dnd::DNDConstants
    */

    byte getDefaultActions();

    /** Sets the default acceptable actions for this drop target.

        <p>This method is a way to reduce the number of Drag and Drop events
        by blocking events for actions not supported by this target.</p>
        <p>By default the listener will receive notifications for all actions.</p>

        @param actions
        The actions.

        @see com::sun::star::datatransfer::dnd::DNDConstants
    */
    void setDefaultActions( [in] byte actions );
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
