/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_datatransfer_clipboard_XClipboardManager_idl__
#define __com_sun_star_datatransfer_clipboard_XClipboardManager_idl__

#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/container/ElementExistException.idl>
#include <com/sun/star/container/NoSuchElementException.idl>
#include <com/sun/star/uno/XInterface.idl>


module com { module sun { module star { module datatransfer { module clipboard {

 published interface XClipboard;

/** This interface is used to retrieve, add, or remove clipboard instances.

    @see com::sun::star::datatransfer::clipboard::XClipboard
*/

published interface XClipboardManager: com::sun::star::uno::XInterface
{
    /** Get a clipboard instance by name.

        @returns
        The clipboard object with the specified name.

        @param aName
        The name of clipboard to return. To retrieve the default (system)
        clipboard, pass an empty string.

        @throws com::sun::star::container::NoSuchElementException
        if no clipboard with the specified name exists.
    */
    XClipboard getClipboard( [in] string aName )
        raises ( com::sun::star::container::NoSuchElementException );

    /** Add a clipboard instance to the manager's list.

        @param xClipboard
        The clipboard to add.

        @throws com::sun::star::IllegalArgumentException
        if xClipboard is not a valid clipboard.

        @throws com::sun::star::container::ElementExistsException
        if a clipboard with the name of xClipboard already exists.
    */
    void addClipboard( [in] XClipboard xClipboard )
        raises ( com::sun::star::lang::IllegalArgumentException,
                 com::sun::star::container::ElementExistException );

    /** Removes the clipboard with the specified name from the list.

        @param aName
        The name of the clipboard to remove.
    */
    void removeClipboard( [in] string aName );

    /** Get a list of a managed clipboards.

        @returns
        A sequence of the names of all available clipboards.
     */
    sequence < string > listClipboardNames();
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
