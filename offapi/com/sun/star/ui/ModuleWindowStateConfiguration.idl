/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_ui_ModuleWindowStateConfiguration_idl__
#define __com_sun_star_ui_ModuleWindowStateConfiguration_idl__

#include <com/sun/star/container/XNameContainer.idl>


module com { module sun { module star { module ui {


/** a service which provides window based information about user interface
    elements of a single application module.

    <p>
    Every OpenOffice.org module has an amount of user interface elements that can
    be positioned, resized, closed and their style can be changed. This service
    provides access to the window based information of available user interface
    elements which are part of a single OpenOffice.org module, like Writer or
    Calc.
    </p>

    @since OOo 2.0
*/

service ModuleWindowStateConfiguration
{
    /** provides read/write access to window based information of user interface
        elements which are part of single installed module.

        <p>
        An implementation must provide a com::sun::star::uno::Sequence which
        has com::sun::star::beans::PropertyValue as entries. The following
        entries a defined:
        <ul>
            <li><b>Docked</b><br>a boolean which specifies if the window is docked or not.</li>
            <li><b>DockingArea</b><br>a com::sun::star::ui::DockingArea
            which specifies the docking area where the window is docked.</li>
            <li><b>DockPos</b><br>a com::sun::star::awt::Point which specifies the
            docked position of a window. The X and Y values are interpreted as a row/column number and
            a pixel position for top/bottom docked windows. For left/right docked windows this is</li>
            <li><b>DockSize</b><br>a com::sun::star::awt::Size which specifies
            the docked size of the window. This property is currently not used by the layout manager
            implementation. For future use.</li>
            <li><b>Locked</b><br>a boolean which specifies if the window is locked or not. This property
            is only valid for docked windows</li>
            <li><b>Pos</b><br>a com::sun::star::awt::Point which specifies the
            floating position in pixel of the window.</li>
            <li><b>Size</b><br>a com::sun::star::awt::Size which specifies the
            floating size in pixel of the window.</li>
            <li><b>Style</b><br>a long which specifies the style of the window. A toolbar support the
            following values: 0 = icons, 1 = text, 2 = text+icons.</li>
            <li><b>UIName</b><br>a localized string which specifies the default window title.</li>
        </ul>
        The key to a user interface element is the resource URL which has
        the following syntax "private:resource/$type/$name". For example "private:resource/toolbar/standardbar"
        addresses the standard bar of a module.
        A complete list of all user interface elements is available in the Developers Guide.
        </p>

        @see com::sun::star::frame::ModuleManager
    */

    interface com::sun::star::container::XNameContainer;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
