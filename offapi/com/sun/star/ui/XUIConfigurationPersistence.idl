/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_ui_XUIConfigurationPersistence_idl__
#define __com_sun_star_ui_XUIConfigurationPersistence_idl__

#include <com/sun/star/embed/XStorage.idl>

module com { module sun { module star { module ui {

/** specifies a persistence interface which supports to load/store user
    interface configuration data to a storage and to retrieve information
    about the current state.

    @since OOo 2.0
*/

interface XUIConfigurationPersistence : ::com::sun::star::uno::XInterface
{
    /** reloads the configuration data from the storage and reinitialize
        the user interface configuration manager instance with this data.

        <p>
        It is up to the implementation if it defers the first loading process
        until the first data request using XUIConfigurationManager
        interface.
        </p>
    */
    void reload() raises ( ::com::sun::star::uno::Exception );

    /** stores the configuration data to the storage provided by
        setStorage() from the storage and initialize the
        user interface configuration manager instance with the newly
        data. This call can throw an
        com::sun::star::io::IOException if
        store() cannot store its data into the internal
        storage.
    */
    void store() raises ( ::com::sun::star::uno::Exception );

    /** stores the configuration data to the provided storage, ignoring
        the previously set storage by setStorage(). Can
        be used to make copy of the current user interface configuration
        data to another storage. This call will throw an
        com::sun::star::io::IOException if the provided
        storage is in read-only mode.

        @param Storage
            all configuration data will be stored to this storage.
    */
    void storeToStorage( [in] ::com::sun::star::embed::XStorage Storage ) raises ( ::com::sun::star::uno::Exception );

    /** provides the current modify state of the configuration manager
        instance.

        @return
            `TRUE` if the configuration manager has changed since the
            last store() call. `FALSE` if the configuration
            manager has not been changed.
    */
    boolean isModified();

    /** provides the current read-only state of the user configuration
        manager. Storing a user interface configuration to a read-only storage
        is not possible. A read-only configuration manager instance will also
        not support any changes to its configuration settings.

        @return
            `TRUE` if the configuration manager storage is read-only otherwise
            `FALSE`.
    */
    boolean isReadOnly();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
