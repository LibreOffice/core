/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_ui_XUIConfigurationPersistence_idl__
#define __com_sun_star_ui_XUIConfigurationPersistence_idl__

#include <com/sun/star/embed/XStorage.idl>

module com { module sun { module star { module ui {

/** specifies a persistence interface which supports to load/store user
    interface configuration data to a storage and to retrieve information
    about the current state.

    @since OOo 2.0
*/

interface XUIConfigurationPersistence : ::com::sun::star::uno::XInterface
{
    /** reloads the configuration data from the storage and reinitialize
        the user interface configuration manager instance with this data.

        <p>
        It is up to the implementation if it defers the first loading process
        until the first data request using <type>XUIConfigurationManager</type>
        interface.
        </p>
    */
    void reload() raises ( ::com::sun::star::uno::Exception );

    /** stores the configuration data to the storage provided by
        <member>setStorage</member> from the storage and initialize the
        user interface configuration manager instance with the newly
        data. This call can throw an
        <type scope="com::sun::star::io">IOException</type> if
        <member>store</member> cannot store its data into the internal
        storage.
    */
    void store() raises ( ::com::sun::star::uno::Exception );

    /** stores the configuration data to the provided storage, ignoring
        the previously set storage by <member>setStorage</member>. Can
        be used to make copy of the current user interface configuration
        data to another storage. This call will throw an
        <type scope="com::sun::star::io">IOException</type> if the provided
        storage is in read-only mode.

        @param Storage
            all configuration data will be stored to this storage.
    */
    void storeToStorage( [in] ::com::sun::star::embed::XStorage Storage ) raises ( ::com::sun::star::uno::Exception );

    /** provides the current modify state of the configuration manager
        instance.

        @return
            <TRUE/> if the configuration manager has changed since the
            last <member>store</member> call. <FALSE/> if the configuration
            manager has not been changed.
    */
    boolean isModified();

    /** provides the current read-only state of the user configuration
        manager. Storing a user interface configuration to a read-only storage
        is not possible. A read-only configuration manager instance will also
        not support any changes to its configuration settings.

        @return
            <TRUE/> if the configuration manager storage is read-only otherwise
            <FALSE/>.
    */
    boolean isReadOnly();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
