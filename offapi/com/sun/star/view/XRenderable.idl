/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_view_XRenderable_idl__
#define __com_sun_star_view_XRenderable_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/beans/PropertyValue.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>


module com {  module sun {  module star {  module view {


/** represents something that can be rendered.

    @since OOo 1.1.2
 */
published interface XRenderable : com::sun::star::uno::XInterface
{

    /** @returns
            the count of renderers (based on paper count of a document, for example).

        <p> If a selection is given, the count has to be calculated
            based on this selection. The other methods of this interface
            will rely on this value if called.

        <p> If the selection contains a valid XModel interface,
            it is assumed that the whole document should be rendered.
            If the selection is empty, nothing should be rendered.

        @see RenderOptions
     */
    long getRendererCount( [in] any aSelection, [in] sequence<com::sun::star::beans::PropertyValue> xOptions )
            raises( com::sun::star::lang::IllegalArgumentException );


    /** @returns
            a descriptor of the specific renderer.

        <p> returns the specific renderer properties based on the given selection.

        <p> If the selection contains a valid XModel interface,
            it is assumed that the whole document should be rendered.
            If the selection is empty, nothing should be rendered.

        @see RenderDescriptor
        @see RenderOptions
     */
    sequence<com::sun::star::beans::PropertyValue> getRenderer( [in] long nRenderer, [in] any aSelection, [in] sequence<com::sun::star::beans::PropertyValue> xOptions )
            raises( com::sun::star::lang::IllegalArgumentException );


    /** renders the object.

        <p> renders the object with the specific renderer based on the given selection.

        <p> If the selection contains a valid XModel interface,
            it is assumed that the whole document should be rendered.
            If the selection is empty, nothing should be rendered.

        @see RenderOptions
     */
    void render( [in] long nRenderer, [in] any aSelection, [in] sequence<com::sun::star::beans::PropertyValue> xOptions )
            raises( com::sun::star::lang::IllegalArgumentException );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
