/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_view_XFormLayerAccess_idl__
#define __com_sun_star_view_XFormLayerAccess_idl__

#include <com/sun/star/view/XControlAccess.idl>
#include <com/sun/star/form/XForm.idl>
#include <com/sun/star/form/runtime/XFormController.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com { module sun { module star { module view {


/** provides access to the form layer elements in a view

    @since OOo 2.3
 */
interface XFormLayerAccess
{
    /// provides access to form controls contained in the view
    interface XControlAccess;

    /** returns the com::sun::star::form::FormController
        instance which operates on a given form.

        <p>A form controller is a component which controls the user interaction
        with the form layer, as long as the form is not in design mode.</p>

        @return
            the requested form controller, or `NULL` if the view's
            form layer is currently in design mode. Note that the returned
            instance becomes non-functional as soon as the form layer is switched
            to design mode.

        @see isDesignMode
        @see setDesignMode
        @see ::com::sun::star::form::runtime::FormController
        @see ::com::sun::star::form::runtime::FormOperations
    */
    ::com::sun::star::form::runtime::XFormController
        getFormController(
            [in] ::com::sun::star::form::XForm Form
        );

    /** determines whether the view's form layer is currently in design
        or alive mode

        <p><em>Note</em>: This is a convenience method. In the user interface,
        the design mode is coupled with the <code>.uno:SwitchControlDesignMode</code>
        feature (see com::sun::star::frame::XDispatchProvider),
        and asking for the current mode is the same as asking for the state of this
        feature.</p>
    */
    boolean isFormDesignMode();

    /** determines whether the view's form layer is currently in design
        or alive mode

        <p><em>Note</em>: This is a convenience method. In the user interface,
        the design mode is coupled with the <code>.uno:SwitchControlDesignMode</code>
        feature (see com::sun::star::frame::XDispatchProvider),
        and changing the current mode is the same as dispatching this feature URL.</p>
    */
    void    setFormDesignMode( [in] boolean DesignMode );
};


}; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
