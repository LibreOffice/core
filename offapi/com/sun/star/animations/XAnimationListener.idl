/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_animations_XAnimationListener_idl__
#define __com_sun_star_animations_XAnimationListener_idl__

#include <com/sun/star/lang/XEventListener.idl>
#include <com/sun/star/animations/XAnimationNode.idl>


 module com {  module sun {  module star {  module animations {


/** makes it possible to register listeners, which are called whenever
    an animation event occurs.

    @since OOo 3.0
 */
interface XAnimationListener : ::com::sun::star::lang::XEventListener
{
    /** This event is raised when the element local timeline begins to play.
        <p>It will be raised each time the element begins the active duration (i.e. when it restarts, but not when it repeats).</p>
        <p>It may be raised both in the course of normal (i.e. scheduled or interactive) timeline play, as well as in the
        case that the element was begun with an interface method.</p>

        @param Node
            The node that begins to play.
    */
    void beginEvent( [in] XAnimationNode Node );

    /** This event is raised at the active end of the element.
        <p>Note that this event is not raised at the simple end of each repeat.</p>
        <p>This event may be raised both in the course of normal (i.e. scheduled or interactive) timeline play, as well as in the
        case that the element was ended with a DOM method.</p>

        @param Node
            The node that stops playing.
    */
    void endEvent( [in] XAnimationNode Node );

    /** This event is raised when the element local timeline repeats.
        <p>It will be raised each time the element repeats, after the first iteration.</p>
        <p>Associated with the repeat event is an integer that indicates which repeat iteration is
        beginning.

        @param Node
            The node that repeats.

        @param Repeat
            The value is a 0-based integer, but the repeat event is not raised for the first iteration and so the observed values will be >= 1.
    */
    void repeat( [in] XAnimationNode Node, [in] long Repeat );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
