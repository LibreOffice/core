/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_configuration_SetUpdate_idl__
#define __com_sun_star_configuration_SetUpdate_idl__

#include <com/sun/star/configuration/SetAccess.idl>
#include <com/sun/star/configuration/SimpleSetUpdate.idl>


module com { module sun { module star { module configuration {

/** provides write access to a dynamic homogeneous set of values or nested
 trees within a hierarchy.

 <p>Allows adding and removing elements.
 Helps creates new elements to be added.
 </p>

 <p>This service extends SetAccess to support
 modifying the container.
 </p>

 <p>Any child and descendant objects support modifying access as well,
 unless they represent a read-only tree element (as indicated by
 com::sun::star::beans::PropertyAttribute::READONLY).
 </p>
*/
published service SetUpdate
{
/** is the basic service providing read access to a <em>set</em> within the
 hierarchy.
*/
    service SetAccess;

/** is the basic service providing modifying access to a
 not necessarily hierarchical <em>set</em>.

 <p>Changes can be observed by registering a listener with interface
 com::sun::star::container::XContainer.
 </p>

 <p>If the elements of this set are of object type, new elements are constructed
 to match the tree structure prescribed by the element template of this set, when
 using interfaces com::sun::star::lang::XSingleServiceFactory
 and (if supported) com::sun::star::lang::XMultiServiceFactory.
 </p>

 <p>Objects that are removed from a set can be reinserted into any set supporting
 the same template within the same hierarchy. Even under a different name.
 </p>

 <p>Implementations that support insertion of objects that weren't obtained
 from within the hierarchy must reject elements that don't have the correct
 structure as described by the template, even if the object returns the
 correct template name from XTemplateInstance::getTemplateName().
 </p>

 <p>Other ways in which an element may be moved among or within compatible sets
 include com::sun::star::container::XChild::setParent()
 and com::sun::star::container::XNamed::setName(), if
 the element implements them.
 </p>

 @see com::sun::star::configuration::SetElement
*/
    service SimpleSetUpdate;

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
