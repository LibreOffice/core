/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_configuration_backend_XSingleLayerStratum_idl__
#define __com_sun_star_configuration_backend_XSingleLayerStratum_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/configuration/backend/XLayer.idl>
#include <com/sun/star/configuration/backend/XUpdatableLayer.idl>
#include <com/sun/star/configuration/backend/BackendAccessException.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/lang/NoSupportException.idl>


module com { module sun { module star { module configuration { module backend {


/**
  Handles access to a stratum consisting of a single layer
  in a configuration data repository

  <p> The interface provides timestamp-checking capabilities
     for efficient caching.
  </p>

  @see com::sun::star::util::XTimeStamped
  @see com::sun::star::configuration::backend::XSchemaSupplier
  @see com::sun::star::configuration::backend::XMultiLayerStratum

  @since OOo 1.1.2
*/
published interface XSingleLayerStratum : ::com::sun::star::uno::XInterface
{

    /**
        retrieves the layer data for a component, if newer than indicated.

        <p> A timestamp can be provided, which is used to indicate
            a point in time. The layer should be returned only if is modified
            since that time.
        </p>

        @param aComponent
                The name of the component to access.

        @param aTimestamp
                a timestamp for the layer.

                <p> An empty timestamp indicates, that the layer should be
                    retrieved irrespective of its modification time.
                </p>
                <p> The format and meaning of a timestamp depends on
                    the implementation. Timestamps can be obtained using
                    com::sun::star::util::XTimeStamped::getTimestamp().
                </p>

      @returns
                a Layer object providing access to the layer data,
                `NULL` if the layer is newer than indicated by the timestamp.

      @throws   com::sun::star::lang::IllegalArgumentException
                if the component identifier is invalid or
                if the timestamp is invalid.

      @throws   com::sun::star::configuration::backend::BackendAccessException
                if an error occurs while accessing the data.

      @see com::sun::star::util::XTimeStamped
    */
    XLayer getLayer([in] string aComponent,
                    [in] string aTimestamp)
        raises (BackendAccessException,
                com::sun::star::lang::IllegalArgumentException) ;


    /**
        retrieves a writable representation of the layer for a component.

        @param aComponent
                The name of the component to access.

        @return
                an UpdatableLayer object providing
                write access to the layer

        @throws   com::sun::star::lang::IllegalArgumentException
                if the component identifier is invalid.

        @throws   com::sun::star::lang::NoSupportException
                if the implementation does not support updates.

        @throws   com::sun::star::configuration::backend::BackendAccessException
                if an error occurs while accessing the data.
     */
    XUpdatableLayer getUpdatableLayer([in] string aComponent)
        raises (BackendAccessException,
                com::sun::star::lang::NoSupportException,
                com::sun::star::lang::IllegalArgumentException) ;

} ;


} ; } ; } ; } ; } ;

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
