/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_configuration_GroupAccess_idl__
#define __com_sun_star_configuration_GroupAccess_idl__

#include <com/sun/star/configuration/HierarchyAccess.idl>
#include <com/sun/star/configuration/PropertyHierarchy.idl>
#include <com/sun/star/beans/XPropertyState.idl>
#include <com/sun/star/beans/XMultiPropertyStates.idl>


module com { module sun { module star { module configuration {

/** provides access to a predefined heterogeneous group of values and nested
 trees as part of a hierarchy.

 <p>Provides access to, and information about, its children and descendants
 viewed either as properties or as contained elements.
 </p>

 <p><em>Groups</em> are static collections within the hierarchy.</p>

 <p>The number and names of contained elements are fixed in advance
 and each child may have a different type.
 </p>

 <p>This service subsumes two alternate ways of accessing child and descendent
 elements. These strongly overlap, supporting the basic identity
 <code>xGroup.getPropertyValue( aName ) == xGroup.getByName( aName )</code>.
 </p>

 @see com::sun::star::configuration::GroupElement
    Child objects of this service generally implement service GroupElement.

 @see com::sun::star::configuration::SetAccess
    A complementary service providing for dynamic homogeneous sets of elements.

*/
published service GroupAccess
{
/** is the basic service for accessing child and descendent nodes using
 a view of the tree as a container of values and structuring elements.
*/
    service HierarchyAccess;

/** is the basic service for accessing child and descendent nodes using
 a view of the tree as a hierarchy of properties and subproperties.

 <p>This view is meaningful only for a static fragment of the hierarchy
 Object's properties may change, but not which properties they have.
 Therefore, dynamic elements of the hierarchy (see <type>SetAccess</type>)
 do not implement service <type>PropertyHierarchy</type>.
 </p>

 <p>If such elements occur as properties or subproperties of an implementation,
 it is not specified whether direct subproperty access using
 <type scope="com::sun::star::beans">XHierarchicalPropertySet</type> or
 <type scope="com::sun::star::beans">XMultiHierarchicalPropertySet</type> can
 be used to access descendants of such elements.
 </p>

 <p>Similarly, information about such descendants may not be available from
 the <type scope="com::sun::star::beans">XHierarchicalPropertySetInfo</type>
 the implementation provides.
 </p>

 <p>If an implementation is part of a <em>read-only</em> view of the hierarchy,
 all properties and subproperties will be reported as having attribute
 <const scope="com::sun::star::beans">PropertyAttribute::READONLY</const> set,
 and attempts to change property values will fail.
 </p>
*/
    service PropertyHierarchy;

/** provides access to the state of child elements of an implementation. [optional]

 <p>This interface should be present, if the hierarchy supports default values
 for simple (non-object) properties and the group contains such properties.
 </p>

 <p>For properties that are objects themselves, the semantic documented for
 service <type>HierarchyAccess</type> applies.
 </p>
 */
    [optional] interface com::sun::star::beans::XPropertyState;

/** provides access to the states of multiple child elements of
 an implementation. [optional]

 <p>This interface should be present, if the hierarchy supports default values
 for simple (non-object) properties and the group contains such properties.
 </p>

 <p>For properties that are objects themselves, the semantic documented for
 service <type>HierarchyAccess</type> applies.
 </p>
*/
    [optional] interface com::sun::star::beans::XMultiPropertyStates;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
