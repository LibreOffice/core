/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef com_sun_star_chart2_XDataInterpreter_idl
#define com_sun_star_chart2_XDataInterpreter_idl

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/PropertyValue.idl>
#include <com/sun/star/chart2/InterpretedData.idl>
#include <com/sun/star/chart2/data/XDataSource.idl>
#include <com/sun/star/chart2/XDataSeries.idl>

module com
{
module sun
{
module star
{
module chart2
{

/** offers tooling to interpret different data sources in a structural
    and chart-type-dependent way.
 */
interface XDataInterpreter  : ::com::sun::star::uno::XInterface
{
    /** Interprets the given data.

        @param xSource
            the data source.

        @param aArguments
            Arguments that tell the template how to slice the given
            range.  The properties should be defined in a separate
            service.

            <p>For standard parameters that may be used, see the
            service StandardDiagramCreationParameters.
            </p>

        @param aSeriesToReUse
            use all the data series given here for the result before
            creating new ones.
     */
    InterpretedData interpretDataSource(
        [in] com::sun::star::chart2::data::XDataSource xSource,
        [in] sequence< com::sun::star::beans::PropertyValue > aArguments,
        [in] sequence< XDataSeries > aSeriesToReUse );

    /** Re-interprets the data given in <code>aInterpretedData</code>
        while keeping the number of data series and the categories.
     */
    InterpretedData reinterpretDataSeries( [in] InterpretedData aInterpretedData );

    /** parses the given data and states, if a
        reinterpretDataSeries() call can be done
        without data loss.

        @return
            `TRUE`, if the data given in
            <code>aInterpretedData</code> has a similar structure than
            the one required is used as output of the data interpreter.
     */
    boolean isDataCompatible( [in] InterpretedData aInterpretedData );

    /** Try to reverse the operation done in
        interpretDataSource().

        <p>In case <code>aInterpretedData</code> is the result of
        interpretDataSource()( <code>xSource</code> ),
        the result of this method should be <code>xSource</code>.</p>
     */
    com::sun::star::chart2::data::XDataSource mergeInterpretedData( [in] InterpretedData aInterpretedData );
};

} ; // chart2
} ; // com
} ; // sun
} ; // star


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
