/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef com_sun_star_chart2_data_XDataReceiver_idl
#define com_sun_star_chart2_data_XDataReceiver_idl

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/chart2/data/XDataProvider.idl>
#include <com/sun/star/chart2/data/XRangeHighlighter.idl>
#include <com/sun/star/beans/PropertyValue.idl>
#include <com/sun/star/util/XNumberFormatsSupplier.idl>

module com
{
module sun
{
module star
{
module chart2
{
module data
{

interface XDataReceiver : ::com::sun::star::uno::XInterface
{
    /** attaches a component that provides data for the document.

        <p>The previously set data provider will be released.</p>

        @param xProvider
              The new DataProvider.  If it is an empty reference, the
              ChartDocument will have no data.
     */
    void attachDataProvider( [in] XDataProvider xProvider );

    void setArguments( [in] sequence< com::sun::star::beans::PropertyValue > aArguments )
        raises( com::sun::star::lang::IllegalArgumentException );

    /** returns a list of all range strings for which data has been
        requested by the most recently attached data provider, and
        which is still used.

        <p>This list may be used by the data provider to swap charts
        out of memory, but still get informed by changes of ranges
        while the chart is not loaded.</p>
        @return a list of used range strings.
     */
    sequence< string > getUsedRangeRepresentations();

    /** Returns the data requested by the most recently attached data
        provider, that is still used.
     */
    XDataSource getUsedData();

    /** attaches an XNumberFormatsSupplier to this
        XDataReceiver.

        <p>The given number formats will be used for display purposes.</p>
     */
    void attachNumberFormatsSupplier( [in] com::sun::star::util::XNumberFormatsSupplier xSupplier );

    /** Returns a component at which a view representing the data of
        the attached data provider may listen for highlighting the
        data ranges used by the currently selected objects in the data
        receiver component.

        <p>This is typically used by a spreadsheet to highlight the
        ranges used by the currently selected object in a chart.</p>

        <p>The range highlighter is optional, i.e., this method may
        return an empty object.</p>
     */
    XRangeHighlighter getRangeHighlighter();
};

} ; // data
} ; // chart2
} ; // com
} ; // sun
} ; // star

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
