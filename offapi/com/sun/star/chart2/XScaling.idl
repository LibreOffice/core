/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef com_sun_star_chart2_XScaling_idl
#define com_sun_star_chart2_XScaling_idl

#include <com/sun/star/uno/XInterface.idl>


module com {  module sun {  module star {  module chart2 {


interface XScaling : ::com::sun::star::uno::XInterface
{
    /**
     * Given a numeric value, return the scaled value that conforms
     * to a predefined scaling rule.  For instance, for linear
     * scaling, given a x value, the method may return a y value as
     * defined by y = Ax + B for predefined values of A and B.
     *
     * @param value input value from which to calculate the scaled
     *              value.
     *
     * @return scaled value based on a predefined scaling rule.
     */
    double doScaling( [in] double value );

    /**
     * Get an interface object that conforms to a scaling rule that
     * is the reverse of the original scaling rule.
     *
     * @return internface object that represents the reversed
     *         scaling rule.
     */
    com::sun::star::chart2::XScaling getInverseScaling();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
