/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef com_sun_star_chart2_XDiagram_idl
#define com_sun_star_chart2_XDiagram_idl

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/beans/PropertyValue.idl>
#include <com/sun/star/chart2/XLegend.idl>
#include <com/sun/star/chart2/XColorScheme.idl>
#include <com/sun/star/chart2/data/XDataSource.idl>
#include <com/sun/star/chart2/data/XLabeledDataSequence.idl>

module com
{
module sun
{
module star
{
module chart2
{

interface XDiagram : ::com::sun::star::uno::XInterface
{
    /** returns the property set that determines the visual appearance
        of the wall.

        <p>The wall is the area behind the union of all
        coordinate systems used in a diagram.</p>
     */
    com::sun::star::beans::XPropertySet getWall();

    /** returns the property set that determines the visual appearance
        of the floor if any.

        <p>The floor is the bottom of a 3D diagram.
        For a 2D diagram NULL is returned.</p>
     */
    com::sun::star::beans::XPropertySet getFloor();

    /** returns the legend, which may represent data series and other
        information about a diagram in a separate box.
     */
    XLegend getLegend();

    /** sets a new legend.
     */
    void setLegend( [in] XLegend xLegend );

    /** returns an XColorScheme that defines the default
        colors for data series (or data points) in the diagram.
     */
    XColorScheme   getDefaultColorScheme();

    /** sets an XColorScheme that defines the default
        colors for data series (or data points) in the diagram.
     */
    void setDefaultColorScheme( [in] XColorScheme xColorScheme );

    /** sets new data to the diagram.

        @param xDataSource
            This data source will be interpreted in a chart-type
            specific way and the DataSeries found in
            <code>xDiagram</code> will be adapted to the new data.
            Missing data series will be created and unused ones will
            be deleted.

        @param aArguments
            Arguments tells how to slice the given data.

            <p>For standard parameters that may be used, see the
            service StandardDiagramCreationParameters.
            </p>
     */
    void setDiagramData( [in] com::sun::star::chart2::data::XDataSource xDataSource,
        [in] sequence< com::sun::star::beans::PropertyValue > aArguments );
};

} ; // chart2
} ; // com
} ; // sun
} ; // star

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
