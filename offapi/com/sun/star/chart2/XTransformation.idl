/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef com_sun_star_chart2_XTransformation_idl
#define com_sun_star_chart2_XTransformation_idl

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>

module com
{
module sun
{
module star
{
module chart2
{

    // NOTES

    //... provide help for creating the right transformation
    // ... access to source and destination coordinate system ?

/** allows the transformation of numeric values from one
    coordinate-system into an other.  Values may be transformed using
    any mapping.
 */
interface XTransformation : ::com::sun::star::uno::XInterface
{
    /** transforms the given input data tuple, given in the source
        coordinate system, according to the internal transformation
        rules, into a tuple of transformed coordinates in the
        destination coordinate system.

        <p>Note that both coordinate systems may have different
        dimensions, e.g., if a transformation does simply a projection
        into a lower-dimensional space.</p>

        @param aValues a source tuple of data that is to be
               transformed.  The length of this sequence must be
               equivalent to the dimension of the source coordinate
               system.

        @return the transformed data tuple.  The length of this
                sequence is equal to the dimension of the output
                coordinate system.

        @throws ::com::sun::star::lang::IllegalArgumentException
               if the dimension of the input vector is not equal to the
               dimension given in getSourceDimension().
     */
    sequence< double > transform( [in] sequence< double > aValues )
        raises( ::com::sun::star::lang::IllegalArgumentException );

    /** the dimension of the input coordinate sequence that is to be
        transformed by the transform() method.
     */
    long getSourceDimension();

    /** the dimension of the output coordinate sequence that is the
        result of the transform() method.
     */
    long getTargetDimension();
};

} ; // chart2
} ; // com
} ; // sun
} ; // star


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
