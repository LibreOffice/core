/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef com_sun_star_chart2_XTransformation_idl
#define com_sun_star_chart2_XTransformation_idl

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>

module com
{
module sun
{
module star
{
module chart2
{

    // NOTES

    //... provide help for creating the right transformation
    // ... access to source and destination coordinate system ?

/** allows the transformation of numeric values from one
    coordinate-system into an other.  Values may be transformed using
    any mapping.
 */
interface XTransformation : ::com::sun::star::uno::XInterface
{
    /** transforms the given input data tuple, given in the source
        coordinate system, according to the internal transformation
        rules, into a tuple of transformed coordinates in the
        destination coordinate system.

        <p>Note that both coordinate systems may have different
        dimensions, e.g., if a transformation does simply a projection
        into a lower-dimensional space.</p>

        @param aValues a source tuple of data that is to be
               transformed.  The length of this sequence must be
               equivalent to the dimension of the source coordinate
               system.

        @return the transformed data tuple.  The length of this
                sequence is equal to the dimension of the output
                coordinate system.

        @throws ::com::sun::star::lang::IllegalArgumentException
               if the dimension of the input vector is not equal to the
               dimension given in <member>getSourceDimension</member>.
     */
    sequence< double > transform( [in] sequence< double > aValues )
        raises( ::com::sun::star::lang::IllegalArgumentException );

    /** the dimension of the input coordinate sequence that is to be
        transformed by the <member>transform</member> method.
     */
    long getSourceDimension();

    /** the dimension of the output coordinate sequence that is the
        result of the <member>transform</member> method.
     */
    long getTargetDimension();
};

} ; // chart2
} ; // com
} ; // sun
} ; // star


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
