/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_scanner_XScannerManager_idl__
#define __com_sun_star_scanner_XScannerManager_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/scanner/ScannerContext.idl>
#include <com/sun/star/scanner/ScannerException.idl>
#include <com/sun/star/lang/XEventListener.idl>
#include <com/sun/star/scanner/ScanError.idl>
#include <com/sun/star/awt/XBitmap.idl>



module com { module sun { module star { module scanner {

/**
*/
published interface XScannerManager: com::sun::star::uno::XInterface
{
    // DOCUMENTATION CHANGED FOR XScannerManager::getAvailableScanners
    /** returns all available scanner devices
     */
    sequence<com::sun::star::scanner::ScannerContext> getAvailableScanners();

    /** produce some kind of User Interface to let the user have a preview,
        configure the scan area, etc., it
        returns FALSE if user cancelled this process
    */
    boolean configureScanner( [inout] com::sun::star::scanner::ScannerContext scanner_context )
            raises( com::sun::star::scanner::ScannerException );

    /**start the scanning process
        listener will be called when scan is complete
        the EventObject of the disposing call will contain
        the ScannerManager if the scan was successful,
        an empty interface otherwise
    */
    void startScan( [in] com::sun::star::scanner::ScannerContext scanner_context,
             [in] com::sun::star::lang::XEventListener listener )
            raises( com::sun::star::scanner::ScannerException );

    /**get the state of scanning after completion of scan
    */
    com::sun::star::scanner::ScanError getError( [in] com::sun::star::scanner::ScannerContext scanner_context )
            raises( com::sun::star::scanner::ScannerException );

    /**get the image after completion of scan
    */
    com::sun::star::awt::XBitmap getBitmap( [in] com::sun::star::scanner::ScannerContext scanner_context )
            raises( com::sun::star::scanner::ScannerException );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
