/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_ucb_OpenCommandArgument_idl__
#define __com_sun_star_ucb_OpenCommandArgument_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/Property.idl>


module com { module sun { module star { module ucb {

/** The argument for commands like "open", "update", and "synchronize".

    @see XCommandProcessor
*/
published struct OpenCommandArgument
{
    /** A mode.

        <p>The value can be one of the <type>OpenMode</type> constants.
    */
    long Mode;

    /** The command's priority, in the range <code>0</code> (highest) to
        <code>65535</code> (lowest).
    */
    long Priority;

    /** The data sink to write the contents into (supporting either
        <type scope="com::sun::star::io">XActiveDataSink</type>,
        <type scope="com::sun::star::io">XOutputStream</type> or
        <type scope="com::sun::star::io">XActiveDataStreamer</type>).

        <p>XActiveDataSink and XOutputStream give the caller read-only
        access to the contents. XActiveDataStreamer offers both read and
        write access to the contents.

        <p>If an XActiveDataSink is supplied, the implementation of the command
        needs to provide an implementation of an object implementing the
        interface <type scope="com::sun::star::io">XInputStream</type>. It is
        highly recommended that this object also implements the interface
        <type scope="com::sun::star::io">XSeekable</type>, if this can be done
        without wasting resources (i.e. allocating huge memory buffers).
        The implementation object has to be supplied to the data sink.
    */
    com::sun::star::uno::XInterface Sink;

    /** The properties, for that the values shall be provided by the
        <type>DynamicResultSet</type> returned by the command).
    */
    sequence< com::sun::star::beans::Property > Properties;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
