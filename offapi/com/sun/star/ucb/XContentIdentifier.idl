/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_ucb_XContentIdentifier_idl__
#define __com_sun_star_ucb_XContentIdentifier_idl__

#include <com/sun/star/uno/XInterface.idl>



module com { module sun { module star { module ucb {

/** An identifier for contents.

     @version  1.0
     @author   Kai Sommerfeld
     @see      XContent
*/
published interface XContentIdentifier: com::sun::star::uno::XInterface
{
    /** returns the content identifier string.

        @returns
        the content identifier string. This must be a valid URI
        (Uniform Resource Identifier, see RFC 2396). This string
        is required. If a content provider "implements" some
        existent URI scheme (e.g., a content provider offering
        access to a file system would implement the "file" scheme,
        and a content provider offering access to IMAP servers
        would implement the "imap" scheme), the content identifier
        strings should use that scheme. If on the other hand a
        content provider offers access to content for which no
        appropriate URI scheme exists, a vendor-specific URL scheme
        starting with "vnd." must be created (see the Internet Draft
        draft-king-vnd-urlscheme-00.txt).
    */
    string getContentIdentifier();

    /** returns the content provider scheme string.

          <p>This string will   be calculated from the content identifier string
        and must be lower-cased(!). It is the "scheme" the content provider is
        registered for. In example, a provider for FTP contents will use
        ftp-URLs as content identifiers. The content provider scheme for all
        contents provided by that provider will be "ftp".
        </p>

        @returns
        the content provider scheme string.
    */
    string getContentProviderScheme();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
