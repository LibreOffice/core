/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_ucb_XInteractionSupplyAuthentication_idl__
#define __com_sun_star_ucb_XInteractionSupplyAuthentication_idl__

#include <com/sun/star/task/XInteractionContinuation.idl>
#include <com/sun/star/ucb/RememberAuthentication.idl>



module com { module sun { module star { module ucb {

/** An interaction continuation handing back some authentication data.

    <p> This continuation is typically used in conjunction with
    AuthenticationRequest. </p>
*/
published interface XInteractionSupplyAuthentication: com::sun::star::task::XInteractionContinuation
{
    /** Specifies if a new "realm" value can be handed back.
    */
    boolean canSetRealm();

    /** Set a new "realm" value to hand back.

        <p>This method should be called before
        com::sun::star::task::XInteractionContinuation::select(),
        and should only be called if
        XInteractionSupplyAuthentication::canSetRealm() returned
        `TRUE`.</p>
    */
    void setRealm( [in] string Realm );

    /** Specifies if a "user name" value can be handed back.
    */
    boolean canSetUserName();

    /** Set a new "user name" value to hand back.

        <p>This method should be called before
        com::sun::star::task::XInteractionContinuation::select(),
        and should only be called if
        XInteractionSupplyAuthentication::canSetUserName()
        returned `TRUE`.</p>
    */
    void setUserName( [in] string UserName );

    /** Specifies if a "password" value can be handed back.
    */
    boolean canSetPassword();

    /** Set a new "password" value to hand back.

        <p>This method should be called before
        com::sun::star::task::XInteractionContinuation::select(),
        and should only be called if
        XInteractionSupplyAuthentication::canSetPassword()
        returned `TRUE`.</p>
    */
    void setPassword( [in] string Password );

    /** Specifies the available modes of how long to remember the password.

        @param Default
        Returns the default mode (to be initially displayed to the user).

        @returns
        A sequence of available modes to hand back.  Each individual mode
        should appear at most once in the sequence.  If the sequence is empty,
        a new mode cannot be handed back.
    */
    sequence<com::sun::star::ucb::RememberAuthentication> getRememberPasswordModes( [out] com::sun::star::ucb::RememberAuthentication Default );

    /** Set a new mode of how long to remember the password.

        <p>This method should be called before
        com::sun::star::task::XInteractionContinuation::select(),
        and should only be called if
        XInteractionSupplyAuthentication::setPassword()
        is also called.</p>

        @param Remember
        The mode to hand back, should be contained in the sequence returned by
        XInteractionSupplyAuthentication::getRememberPasswordModes().
    */
    void setRememberPassword( [in] com::sun::star::ucb::RememberAuthentication Remember );

    /** Specifies if an "account" value can be handed back.
    */
    boolean canSetAccount();

    /** Set a new "account" value to hand back.

        <p>This method should be called before
        com::sun::star::task::XInteractionContinuation::select(),
        and should only be called if
        XInteractionSupplyAuthentication::canSetAccount()
        returned `TRUE`.</p>

    */
    void setAccount( [in] string Account );

    /** Specifies the available modes of how long to remember the account.

        @param Default  Returns the default mode (to be initially displayed to
        the user).

        @returns  A sequence of available modes to hand back.  Each individual
        mode should appear at most once in the sequence.  If the sequence is
        empty, a new mode cannot be handed back.
     */
    sequence<com::sun::star::ucb::RememberAuthentication> getRememberAccountModes( [out] com::sun::star::ucb::RememberAuthentication Default );

    /** Set a new mode of how long to remember the account.

        <p>This method should be called before
        com::sun::star::task::XInteractionContinuation::select(),
        and should only be called if
        XInteractionSupplyAuthentication::setAccount()
        is also called.</p>

        @param Remember  The mode to hand back, should be contained in the
        sequence returned by
        XInteractionSupplyAuthentication::getRememberAccountModes().
    */
    void setRememberAccount( [in] com::sun::star::ucb::RememberAuthentication Remember );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
