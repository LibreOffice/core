/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_ucb_XRemoteContentProviderAcceptor_idl__
#define __com_sun_star_ucb_XRemoteContentProviderAcceptor_idl__

#include <com/sun/star/lang/XMultiServiceFactory.idl>
#include <com/sun/star/uno/XInterface.idl>



module com { module sun { module star { module ucb {

 published interface XRemoteContentProviderDoneListener;

/** Accept remote content providers that want to make themselves known to the
    local process.

    @version 1.0
    @author Stephan Bergmann
*/
published interface XRemoteContentProviderAcceptor: com::sun::star::uno::XInterface
{
    /** Add a remote content provider.

        @param Identifier  An arbitrary identifier uniquely identifying the
        remote content provider.

        @param Factory  A factory through which the remote content provider's
        UniversalContentBroker service can be instantiated.

        @param Templates  A sequence of URL templates the remote content
        provider is willing to handle.

        @param DoneListener  If not null, the implementation of this interface
        can---through this callback---tell the calling side that the
        implementation no longer needs the remote content provider.  (And the
        calling side should call
        XRemoteContentProviderAcceptor::removeRemoteContentProvider()
        then.)

        To enable connection control, it is recommended that this argument
        also implements the interface
        XRemoteContentProviderConnectionControl.

        @return  true if the remote content provider has successfully been
        added.
    */
    boolean
    addRemoteContentProvider([in] string Identifier,
                             [in] com::sun::star::lang::XMultiServiceFactory
                                     Factory,
                             [in] sequence< string > Templates,
                             [in] XRemoteContentProviderDoneListener
                                      DoneListener);

    /** Remove a remote content provider.

        @param Identifier  An arbitrary identifier uniquely identifying the
        remote content provider.

        @return  true if the remote content provider has successfully been
        removed.
    */
    boolean
    removeRemoteContentProvider([in] string Identifier);
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
