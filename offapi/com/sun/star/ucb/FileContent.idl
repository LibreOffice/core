/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_ucb_FileContent_idl__
#define __com_sun_star_ucb_FileContent_idl__

#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/ucb/XContent.idl>
#include <com/sun/star/ucb/XCommandProcessor.idl>
#include <com/sun/star/ucb/XCommandProcessor2.idl>
#include <com/sun/star/ucb/XContentCreator.idl>
#include <com/sun/star/beans/XPropertiesChangeNotifier.idl>
#include <com/sun/star/beans/XPropertyContainer.idl>
#include <com/sun/star/beans/XPropertySetInfoChangeNotifier.idl>
#include <com/sun/star/ucb/XCommandInfoChangeNotifier.idl>
#include <com/sun/star/container/XChild.idl>


module com { module sun { module star { module ucb {

/** A File Content represents either a directory or a file in the local file
    system.

    <p>Whether a content represents a folder or a file can be determined by
    inspecting its property <b>IsFolder</b> or <b>IsDocument</b>.

    @see com::sun::star::ucb::FileContentProvider
*/
published service FileContent
{
    /** This interface is implemented according to the specification of
        service Content.
     */
    interface com::sun::star::lang::XComponent;

    /** This interface is implemented according to the specification of
        service Content.
     */
    interface com::sun::star::ucb::XContent;

    /** This interface is implemented according to the specification of
        service Content.

        <p>An object representing a directory in the file system is able
        to create a new object, which in turn can become the representation
        of a physical file/directory being contained in the initial directory.
        The precise way is the following:

        <p>

        <ol>
        <li>
        Let the parent folder create a new content by calling
        XContentCreator::createNewContent() on it. The content
        type to use for new directories is
        "application/vnd.sun.staroffice.fsys-folder". To create a new file
        use the type "application/vnd.sun.staroffice.fsys-file".
        As return value you get a new file content object.
        </li>
        <li>
        Set a title at the new object by letting it execute
        the command "setPropertyValues", which sets at least the property
        "Title" to a non-empty value ).
        </li>
        <li>
        Let the new object ( not the parent! ) execute the command "insert".
        This will create the corresponding physical file or directory.
        For files, you need to supply the implementation of
        an com::sun::star::io::XInputStream with the
        command's parameters, that provides access to the stream data.
        </li>
        </ol>

        </p>
     */
    interface com::sun::star::ucb::XContentCreator;

    /** This interface is implemented according to the specification of
        service Content.

        <p>

        <b>Supported Commands</b>

        <ul>
        <li>
        getCommandInfo
        </li>
        <li>
        getPropertySetInfo
        </li>
        <li>
        getPropertyValues
        </li>
        <li>
        setPropertyValues
        </li>
        <li>
        insert ( makes a newly created document persistent )
        </li>
        <li>
        delete
        </li>
        <li>
        open
        </li>
        <li>
        transfer
        </li>
        </ul>

        <b>Supported Properties</b>
        <ul>
        <li>
        string ContentType ( read-only, either
        "application/vnd.sun.staroffice.fsys-folder" or
        "application/vnd.sun.staroffice.fsys-file" )
        </li>
        <li>
        boolean IsDocument ( read-only, always `TRUE` for files, always
        `FALSE` for directories )
        </li>
        <li>
        boolean IsFolder ( read-only ), always `FALSE` for files, always
        `TRUE` for directories )
        </li>
        <li>
        com::sun::star::util::DateTime DateModified ( read-only )
        </li>
        <li>
        boolean IsReadOnly ( read-only attribute )
        </li>
        <li>
        hyper Size ( file size )
        </li>
        <li>
        string Title ( file name )
        </li>
        <li>
        boolean IsVolume ( read-only )
        </li>
        <li>
        boolean IsRemoveable ( read-only )
        </li>
        <li>
        boolean IsRemote ( read-only )
        </li>
        <li>
        boolean IsCompactDisc ( read-only )
        </li>
        <li>
        boolean IsFloppy ( read-only )
        </li>
        <li>
        boolean IsHidden ( read-only )
        </li>
        </ul>

        </p>
     */
    interface com::sun::star::ucb::XCommandProcessor;

    /** is an enhanced version of XCommandProcessor that has an
        additional method for releasing command identifiers obtained via
        XCommandProcessor::createCommandIdentifier() to avoid
        resource leaks. For a detailed description of the problem refer to
        XCommandProcessor2::releaseCommandIdentifier().

        <p>Where many existing Content implementations do not
        (yet), every new implementation should support this interface.
     */
    [optional] interface com::sun::star::ucb::XCommandProcessor2;

    /** This interface is implemented according to the specification of
        service Content.
     */
    interface com::sun::star::beans::XPropertiesChangeNotifier;

    /** This interface is implemented according to the specification of
        service Content.
     */
    interface com::sun::star::beans::XPropertyContainer;

    /** This interface is implemented according to the specification of
        service Content.
     */
    interface com::sun::star::beans::XPropertySetInfoChangeNotifier;

    /** This interface is implemented according to the specification of
        service Content.
     */
    interface com::sun::star::ucb::XCommandInfoChangeNotifier;

    /** This interface is implemented according to the specification of
        service Content.
     */
    interface com::sun::star::container::XChild;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
