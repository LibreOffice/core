/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_ucb_TransferInfo_idl__
#define __com_sun_star_ucb_TransferInfo_idl__



module com { module sun { module star { module ucb {

/** contains information needed to transfer objects from one location to another.

    <p>The transfer command is always called on the target folder. For a
    details description of the transfer command refer to the documentation
    of service Content.
*/
published struct TransferInfo
{
    /** contains the flags describing whether the data shall be moved
        instead of copied.
    */
    boolean MoveData;

    /** contains the URL of the source of the action (e.g. the URL of a
        file to move).
    */
    string SourceURL;

    /** contains the title of the transferred object, if it is different
        from the original one.

        <p>If this field is filled, for example, a file will be renamed
        while it is being transferred.</p>
    */
    string NewTitle;

    /** describes how to act in case of title clashes while transferring
        the data.

        <p>A title clash for instance occurs, if a file named "foo.txt" is
        to be transferred to a folder already containing another file named
        "foo.txt".

        <p>The value can be one of the NameClash constants.

        <p>Implementations that are not able to detect whether there is a
        clashing resource may ignore NameClash::ERROR and
        NameClash::RENAME always write the new data.
    */
    long NameClash;

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
