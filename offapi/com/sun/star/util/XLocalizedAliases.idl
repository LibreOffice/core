/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_util_XLocalizedAliases_idl__
#define __com_sun_star_util_XLocalizedAliases_idl__

#include <com/sun/star/lang/Locale.idl>

#include <com/sun/star/container/NoSuchElementException.idl>

#include <com/sun/star/container/ElementExistException.idl>

#include <com/sun/star/util/AliasProgrammaticPair.idl>

module com {  module sun {  module star {  module util {


/** is the interface for binding programmatic names to aliases. Aliases
    can be provided in several locales for the same programmatic name.
 */
published interface XLocalizedAliases: com::sun::star::uno::XInterface
{

    /** registers an alias for a programmatic name.
     */
    void bindAlias([in]string programmaticName,
                   [in]com::sun::star::lang::Locale locale,
                    [in]string alias)
        raises (com::sun::star::container::ElementExistException);
    /** revokes an alias for a programmatic name.
     */
    void unbindAlias([in]com::sun::star::lang::Locale locale,
                     [in]string alias)
        raises (com::sun::star::container::NoSuchElementException);
    /** retrieves a registered programmatic name identified by an alias.
     */
    string lookupAlias([in]com::sun::star::lang::Locale locale,
                         [in]string Alias)
        raises (com::sun::star::container::NoSuchElementException);
    /** retrieves a given alias for a programmatic name.
     */
    string lookupProgrammatic([in]com::sun::star::lang::Locale locale,
                                [in]string programmatic)
        raises (com::sun::star::container::NoSuchElementException);
    /** removes all aliases for a programmatic name.
     */
    void unbindAliases([in]string programmaticName)
        raises (com::sun::star::container::NoSuchElementException);
    /** rebinds all aliases registered to a given URL to a new one.
     */
    void rebindAliases([in]string currentProgrammatic,
                        [in]string newProgrammatic)
        raises (com::sun::star::container::NoSuchElementException,
                com::sun::star::container::ElementExistException);
    /** renames an alias for a programmatic name.
     */
    void renameAlias([in]com::sun::star::lang::Locale locale,
                     [in]string oldName,
                     [in]string aNewName)
        raises (com::sun::star::container::NoSuchElementException,
                com::sun::star::container::ElementExistException);
    /** retrieves a list of all registered aliases for a certain language.

         @param locale
            specifies the locale scope.

         @returns
            a sequence of registered pair of alias and programmatic name.
     */
    sequence<AliasProgrammaticPair> listAliases([in]com::sun::star::lang::Locale locale);
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
