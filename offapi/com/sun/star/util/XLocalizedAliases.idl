/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_util_XLocalizedAliases_idl__
#define __com_sun_star_util_XLocalizedAliases_idl__

#include <com/sun/star/lang/Locale.idl>

#include <com/sun/star/container/NoSuchElementException.idl>

#include <com/sun/star/container/ElementExistException.idl>

#include <com/sun/star/util/AliasProgrammaticPair.idl>

module com {  module sun {  module star {  module util {


/** is the interface for binding programmatic names to aliases. Aliases
    can be provided in several locales for the same programmatic name.
 */
published interface XLocalizedAliases: com::sun::star::uno::XInterface
{

    /** registers an alias for a programmatic name.
     */
    void bindAlias([in]string programmaticName,
                   [in]com::sun::star::lang::Locale locale,
                    [in]string alias)
        raises (com::sun::star::container::ElementExistException);
    /** revokes an alias for a programmatic name.
     */
    void unbindAlias([in]com::sun::star::lang::Locale locale,
                     [in]string alias)
        raises (com::sun::star::container::NoSuchElementException);
    /** retrieves a registered programmatic name identified by an alias.
     */
    string lookupAlias([in]com::sun::star::lang::Locale locale,
                         [in]string Alias)
        raises (com::sun::star::container::NoSuchElementException);
    /** retrieves a given alias for a programmatic name.
     */
    string lookupProgrammatic([in]com::sun::star::lang::Locale locale,
                                [in]string programmatic)
        raises (com::sun::star::container::NoSuchElementException);
    /** removes all aliases for a programmatic name.
     */
    void unbindAliases([in]string programmaticName)
        raises (com::sun::star::container::NoSuchElementException);
    /** rebinds all aliases registered to a given URL to a new one.
     */
    void rebindAliases([in]string currentProgrammatic,
                        [in]string newProgrammatic)
        raises (com::sun::star::container::NoSuchElementException,
                com::sun::star::container::ElementExistException);
    /** renames an alias for a programmatic name.
     */
    void renameAlias([in]com::sun::star::lang::Locale locale,
                     [in]string oldName,
                     [in]string aNewName)
        raises (com::sun::star::container::NoSuchElementException,
                com::sun::star::container::ElementExistException);
    /** retrieves a list of all registered aliases for a certain language.

         @param locale
            specifies the locale scope.

         @returns
            a sequence of registered pair of alias and programmatic name.
     */
    sequence<AliasProgrammaticPair> listAliases([in]com::sun::star::lang::Locale locale);
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
