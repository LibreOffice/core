/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_util_XNumberFormatter_idl__
#define __com_sun_star_util_XNumberFormatter_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/util/Color.idl>
#include <com/sun/star/util/XNumberFormatsSupplier.idl>

#include <com/sun/star/util/NotNumericException.idl>



 module com {  module sun {  module star {  module util {


/** represents a number formatter.
 */
published interface XNumberFormatter: com::sun::star::uno::XInterface
{

    /** attaches an XNumberFormatsSupplier to this
        NumberFormatter.

        <p>This NumberFormatter will only use the NumberFormats
        specified in the attached XNumberFormatsSupplier. Without an attached
        XNumberFormatsSupplier, no formatting is possible.</p>
     */
    void attachNumberFormatsSupplier( [in] com::sun::star::util::XNumberFormatsSupplier xSupplier );


    /** @returns
                the attached XNumberFormatsSupplier.
     */
    com::sun::star::util::XNumberFormatsSupplier getNumberFormatsSupplier();


    /** detects the number format in a string which contains a formatted number.
     */
    long detectNumberFormat( [in] long nKey,
             [in] string aString )
            raises( com::sun::star::util::NotNumericException );


    /** converts a string which contains a formatted number into a number.

        <p>If this is a text format, the string will not be converted.</p>
     */
    double convertStringToNumber( [in] long nKey,
             [in] string aString )
            raises( com::sun::star::util::NotNumericException );


    /** converts a number into a string.
     */
    string convertNumberToString( [in] long nKey,
             [in] double fValue );


    /** @returns
                the color which is specified for the given value in the number format,
                which is otherwise the value of <var>aDefaultColor</var>.
     */
    com::sun::star::util::Color queryColorForNumber( [in] long nKey,
             [in] double fValue,
             [in] com::sun::star::util::Color aDefaultColor );


    /** converts a string into another string.
     */
    string formatString( [in] long nKey,
             [in] string aString );


    /** @returns
                the color which is specified for the given string in the number format,
                which is otherwise the value of <var>aDefaultColor</var>.
     */
    com::sun::star::util::Color queryColorForString( [in] long nKey,
             [in] string aString,
             [in] com::sun::star::util::Color aDefaultColor );


    /** converts a number into a string with the specified format.

        <p>This string can always be converted back to a number using the same
        format.
        </p>
     */
    string getInputString( [in] long nKey,
             [in] double fValue );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
