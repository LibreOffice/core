/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_util_XBroadcaster_idl__
#define __com_sun_star_util_XBroadcaster_idl__

#include <com/sun/star/uno/XInterface.idl>


module com {  module sun {  module star {  module util {


/** allows to control notification behavior of a broadcaster.

    @since OOo 3.0
 */
interface XBroadcaster: com::sun::star::uno::XInterface
{
    /** suspends broadcasts to the registered listeners.

        <p>
        The calls to XBroadcaster::lockBroadcasts() and
        XBroadcaster::unlockBroadcasts() may be
        nested and even overlapping, but they must be in pairs. While
        there is at least one lock remaining, no broadcasts are
        sent to registered listeners.
        </p>
     */
    void lockBroadcasts();

    /** resumes the broadcasts which were suspended by
        XBroadcaster::lockBroadcasts().

        <p>
        The calls to XBroadcaster::lockBroadcasts() and
        XBroadcaster::unlockBroadcasts() may be
        nested and even overlapping, but they must be in pairs. While
        there is at least one lock remaining, no broadcasts are
        sent to registered listeners.
        </p>

        <p> Pending broadcasts will be sent immediately after the last
        call to XBroadcaster::lockBroadcasts() is matched
        by a call to XBroadcaster::unlockBroadcasts().
        An implementation can decide to broadcast all pending notification in
        order or batch them in single broadcasts.
        </p>
    */
    void unlockBroadcasts();
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
