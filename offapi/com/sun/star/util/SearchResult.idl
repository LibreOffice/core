/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_lang_SearchResult_idl__
#define __com_sun_star_lang_SearchResult_idl__



module com { module sun { module star { module util {


published  struct SearchResult  {
    /** Number of subexpressions,
    if it is 0, then no match found; this value is 1 for ABSOLUTE and APPROXIMATE match.
    The start and endOffset are always dependent on the search direction.
    For example:
    if you search "X" in the text "-X-" the offset are:
        for forward:     start = 1, end = 2
        for backward:   start = 2, end = 1
    Forward, the startOffset is inclusive, the endOffset exclusive.
    Backward, the startOffset is exclusive, the endOffset inclusive.

    For regular expressions it can be greater than 1.
    If the value is 1, startoffset[0] and endoffset[0] points to the matching sub string
    if value is > 1, still startoffset[0] and endoffset[0] points to the matching substring for whole regular expression
    startoffset[i] and endoffset[i] points to the matching substring of i th matching substring.
    */
    long subRegExpressions;
    sequence<long> startOffset;        // inclusive
    sequence<long> endOffset;          // exclusive
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
