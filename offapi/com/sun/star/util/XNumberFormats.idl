/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_util_XNumberFormats_idl__
#define __com_sun_star_util_XNumberFormats_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/beans/XPropertySet.idl>

#include <com/sun/star/lang/Locale.idl>

#include <com/sun/star/util/MalformedNumberFormatException.idl>



 module com {  module sun {  module star {  module util {


/** provides access to multiple <type>NumberFormat</type>s.
 */
published interface XNumberFormats: com::sun::star::uno::XInterface
{

    /** @returns
                    a readonly <type>NumberFormatProperties</type>.
     */
    com::sun::star::beans::XPropertySet getByKey( [in] long nKey );


    /** @returns
                    a sequence of the keys of all number formats with the specified type and language.

                @param  nType
                        the type of number formats to return. Must be one of the
                        <type>NumberFormat</type> constants.

                @param  nLanguage
                        the language of number formats to return.

                @param  bCreate
                        <TRUE/>: create new entries if no formats for the selected language exist<BR>
                        <FALSE/>: return an empty list if no formats for the selected language exist
     */
    sequence<long> queryKeys( [in] short nType,
             [in] com::sun::star::lang::Locale nLocale,
             [in] boolean bCreate );


    /** finds a number format by its format string and returns its key.
     */
    long queryKey( [in] string aFormat,
             [in] com::sun::star::lang::Locale nLocale,
             [in] boolean bScan );


    /** adds a new number format to the list, using a format string.
     */
    long addNew( [in] string aFormat,
             [in] com::sun::star::lang::Locale nLocale )
            raises( com::sun::star::util::MalformedNumberFormatException );


    /** adds a new number format to the list, using a format
        string in a different locale than the desired locale of the
        resulting number format.
     */
    long addNewConverted( [in] string aFormat,
             [in] com::sun::star::lang::Locale nLocale,
             [in] com::sun::star::lang::Locale nNewLocale )
            raises( com::sun::star::util::MalformedNumberFormatException );


    /** removes a number format from the list.
     */
    void removeByKey( [in] long nKey );


    /** generates a format string from several parameters without
        creating an actual number format.
     */
    string generateFormat( [in] long nBaseKey,
             [in] com::sun::star::lang::Locale nLocale,
             [in] boolean bThousands,
             [in] boolean bRed,
             [in] short nDecimals,
             [in] short nLeading );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
