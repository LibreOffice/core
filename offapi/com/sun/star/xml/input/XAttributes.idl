/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_xml_input_XAttributes_idl__
#define __com_sun_star_xml_input_XAttributes_idl__

#include <com/sun/star/uno/XInterface.idl>


module com { module sun { module star { module xml { module input {

/** An element's attributes

    @internal
*/
interface XAttributes : com::sun::star::uno::XInterface
{
    /** Gets the number of attributes.

        @return
                number of attributes
    */
    long getLength();

    /** Gets attribute index passing a QName.

        @param qName
               QName
        @return
                attribute index or -1, if not found
    */
    long getIndexByQName( [in] string qName );

    /** Gets attribute index passing a namespace uid and a local name.

        @param uid
               namespace uid
        @param localName
               local name
        @return
                attribute index or -1, if not found
    */
    long getIndexByUidName( [in] long uid, [in] string localName );

    /** Gets the QName of an attribute.

        @param nIndex
               index
        @return
                QName of attribute or empty string, if invalid index
    */
    string getQNameByIndex( [in] long nIndex );

    /** Gets the namespace uid of an attribute.

        @param nIndex
               index
        @return
                namespace uid of attribute or -1, if invalid index
    */
    long getUidByIndex( [in] long nIndex );

    /** Gets the local name of an attribute.

        @param nIndex
               index
        @return
                local name of attribute or empty string, if invalid index
    */
    string getLocalNameByIndex( [in] long nIndex );

    /** Gets the value of an attribute.

        @param nIndex
               index
        @return
                value string or empty string, if invalid index
    */
    string getValueByIndex( [in] long nIndex );

    /** For convenience: Gets the value of an attribute passing uid, local name.

        @param uid
               namespace uid
        @param localName
               local name
        @return
                value string or empty string, if invalid uid/local name
    */
    string getValueByUidName( [in] long uid, [in] string localName );

    /** Gets the type of an attribute, if possible.

        @param nIndex
               index
        @return
                type of attribute (if possible, else empty string)
    */
    string getTypeByIndex( [in] long nIndex );
};

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
