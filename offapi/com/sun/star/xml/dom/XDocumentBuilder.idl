/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_xml_dom_XDocumentBuilder_idl__
#define __com_sun_star_xml_dom_XDocumentBuilder_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/xml/dom/XDocumentType.idl>
#include <com/sun/star/xml/dom/XDOMImplementation.idl>
#include <com/sun/star/io/XInputStream.idl>
#include <com/sun/star/xml/sax/SAXException.idl>
#include <com/sun/star/xml/sax/XErrorHandler.idl>
#include <com/sun/star/xml/sax/XEntityResolver.idl>


#include <com/sun/star/io/IOException.idl>

module com { module sun { module star { module xml { module dom {

interface XInputStream;

/**
Builds a new dom tree
*/
interface XDocumentBuilder : com::sun::star::uno::XInterface
{

    /**
    Obtain an instance of a DOMImplementation object.
    */
    XDOMImplementation getDOMImplementation();

    /**
    Indicates whether or not this parser is configured to understand
    namespaces.
    */
    boolean isNamespaceAware();

    /**
    Indicates whether or not this parser is configured to validate XML
    documents.
    */
    boolean isValidating();

    /**
    Obtain a new instance of a DOM Document object to build a DOM tree
    with.
    */
    XDocument newDocument();

    /**
    Parse the content of the given InputStream as an XML document and
    return a new DOM Document object.
    */
    XDocument parse([in] com::sun::star::io::XInputStream is)
            raises( com::sun::star::xml::sax::SAXException,
                    com::sun::star::io::IOException );

    /**
    Parse the content of the given URI as an XML document and return
    a new DOM Document object.
    */
    XDocument parseURI([in] string uri)
            raises( com::sun::star::xml::sax::SAXException,
                    com::sun::star::io::IOException );

    /**
    Specify the EntityResolver to be used to resolve entities present
    in the XML document to be parsed.
    */
    void setEntityResolver([in] com::sun::star::xml::sax::XEntityResolver er);

    /**
    Specify the ErrorHandler to be used to report errors present in
    the XML document to be parsed.
    */
    void setErrorHandler([in] com::sun::star::xml::sax::XErrorHandler eh);

};

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
