/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_xml_dom_XDocument_idl__
#define __com_sun_star_xml_dom_XDocument_idl__

#include <com/sun/star/xml/dom/XNode.idl>
#include <com/sun/star/xml/dom/XAttr.idl>
#include <com/sun/star/xml/dom/XCDATASection.idl>
#include <com/sun/star/xml/dom/XComment.idl>
#include <com/sun/star/xml/dom/XDocumentFragment.idl>
#include <com/sun/star/xml/dom/XEntityReference.idl>
#include <com/sun/star/xml/dom/XProcessingInstruction.idl>
#include <com/sun/star/xml/dom/XDocumentType.idl>
#include <com/sun/star/xml/dom/XDOMImplementation.idl>

module com { module sun { module star { module xml { module dom {

interface XDocument: XNode
{
    /**
    Creates an Attr of the given name.
    Throws:
    DOMException - INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character.
    */
    XAttr createAttribute([in] string name) raises (DOMException);

    /**
    Creates an attribute of the given qualified name and namespace URI.
    Throws:
    DOMException - INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal
                      character, per the XML 1.0 specification .
                   NAMESPACE_ERR: Raised if the qualifiedName is malformed per the Namespaces in XML
                      specification, if the qualifiedName has a prefix and the namespaceURI is null, if
                      the qualifiedName has a prefix that is "xml" and the namespaceURI is different from
                      " http://www.w3.org/XML/1998/namespace", or if the qualifiedName, or its prefix, is
                      "xmlns" and the namespaceURI is different from " http://www.w3.org/2000/xmlns/".
                   NOT_SUPPORTED_ERR: Always thrown if the current document does not support the "XML"
                      feature, since namespaces were defined by XML.
    */
    XAttr createAttributeNS([in] string namespaceURI, [in] string qualifiedName) raises (DOMException);

    /**
    Creates a CDATASection node whose value is the specified string.
    Throws:
    DOMException - NOT_SUPPORTED_ERR: Raised if this document is an HTML document.
    */
    XCDATASection createCDATASection([in] string data) raises (DOMException);

    /**
    Creates a Comment node given the specified string.
    */
    XComment createComment([in] string data);

    /**
    Creates an empty DocumentFragment object.
    */
    XDocumentFragment createDocumentFragment();


    /**
    Creates an element of the type specified.
    Throws:
    DOMException - INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character.
    */
    XElement createElement([in] string tagName) raises (DOMException);


    /**
    Creates an element of the given qualified name and namespace URI.
    Throws:
    DOMException - INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an
                      illegal character, per the XML 1.0 specification .
                   NAMESPACE_ERR: Raised if the qualifiedName is malformed per the Namespaces in
                      XML specification, if the qualifiedName has a prefix and the namespaceURI is
                      null, or if the qualifiedName has a prefix that is "xml" and the namespaceURI
                      is different from " http://www.w3.org/XML/1998/namespace" .
                   NOT_SUPPORTED_ERR: Always thrown if the current document does not support the
                      "XML" feature, since namespaces were defined by XML.
    */
    XElement createElementNS([in] string namespaceURI, [in] string qualifiedName) raises (DOMException);

    /**
   Throws:
    DOMException - NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported.
    Creates an EntityReference object.
    Throws:
    DOMException - INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character.
    NOT_SUPPORTED_ERR: Raised if this document is an HTML document.
    */
    XEntityReference createEntityReference([in] string name) raises (DOMException);

    /**
    Creates a ProcessingInstruction node given the specified name and
    data strings.
    Throws:
    DOMException - INVALID_CHARACTER_ERR: Raised if the specified target contains an illegal character.
    NOT_SUPPORTED_ERR: Raised if this document is an HTML document.
    */
    XProcessingInstruction createProcessingInstruction(
    [in] string target, [in] string data) raises (DOMException);

    /**
    Creates a Text node given the specified string.
    */
    XText createTextNode([in] string data);

    /**
    The Document Type Declaration (see DocumentType) associated with this
    document.
    */
    XDocumentType getDoctype();

    /**
    This is a convenience attribute that allows direct access to the child
    node that is the root element of the document.
    */
    XElement getDocumentElement();

    /**
    Returns the Element whose ID is given by elementId.
    */
    XElement getElementById([in] string elementId);

    /**
    Returns a NodeList of all the Elements with a given tag name in the
    order in which they are encountered in a preorder traversal of the
    Document tree.
    */
    XNodeList getElementsByTagName([in] string tagname);

    /**
    Returns a NodeList of all the Elements with a given local name and
    namespace URI in the order in which they are encountered in a preorder
    traversal of the Document tree.
    */
    XNodeList getElementsByTagNameNS([in] string namespaceURI, [in] string localName);

    /**
    The DOMImplementation object that handles this document.
    */
    XDOMImplementation getImplementation();

    /**
    Imports a node from another document to this document.
    Throws:
    DOMException - NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported.
    */
    XNode importNode([in] XNode importedNode, [in] boolean deep) raises (DOMException);
};
};};};};};

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
