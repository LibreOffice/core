/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_xml_sax_XFastTokenHandler_idl__
#define __com_sun_star_xml_sax_XFastTokenHandler_idl__

#include <com/sun/star/uno/XInterface.idl>


module com {  module sun {  module star {  module xml {  module sax {


/** interface to translate XML strings to integer tokens.

    <p>An instance of this interface can be registered at a <type>XFastParser</type>.
    It should be able to translate all XML names (element local names,
    attribute local names and constant attribute values) to integer tokens.

    A token value must be greater or equal to zero and less than
    <const>FastToken::NAMESPACE</const>. If a string identifier is not known
    to this instance, <const>FastToken::DONTKNOW</const> is returned.
 */
interface XFastTokenHandler: com::sun::star::uno::XInterface
{

    /** returns a integer token for the given string identifier.

        @returns
            a unique integer token for the given String or <const>FastToken::DONTKNOW</const>
            if the identifier is not known to this instance.
    */
    long getToken( [in] string Identifier );


    /** returns a string identifier for the given integer token.
    */
    string getIdentifier( [in] long Token );


    /** returns a integer token for the given string

        @param Identifier
            the string given as a byte sequence encoded in UTF-8

        @returns
            a unique integer token for the given String or <const>FastToken::DONTKNOW</const>
            if the identifier is not known to this instance.
    */
    long getTokenFromUTF8( [in] sequence< byte > Identifier );


    /** returns a identifier for the given integer token as a byte
          sequence encoded in UTF-8.
    */
    sequence< byte > getUTF8Identifier( [in] long Token );
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
