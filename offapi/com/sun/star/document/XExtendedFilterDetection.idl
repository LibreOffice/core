/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_document_XExtendedFilterDetection_idl__
#define __com_sun_star_document_XExtendedFilterDetection_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/PropertyValue.idl>


module com { module sun { module star { module document {

/** provides a "deep" filter detection

    <p>
    A "deep" filter detection means looking into the document stream to detect
    the format of it. Services of type <type>ExtendedTypeDetection</type> must support this
    interface to be called from generic load mechanism of the office for that.
    </p>

    @see DetectService
    @see TypeDetection
    @see FilterFactory
 */
published interface XExtendedFilterDetection: com::sun::star::uno::XInterface
{
    /** controls agreement of a "flat" <type>TypeDetection</type>
        with given URL or arguments

        <p>
        Registered services in configuration, which support this interface for different mime types,
        will be called automatically to look into the document stream and decide which format it represent.
        Add the collected information about detected documents in given <type>MediaDescriptor</type>
        <var>Descriptor</var>. The decision must be returned as any valid type name (which specifies
        the detected format) or an empty value for unknown formats.
        </p>

        @param Descriptor
            represent a <type>MediaDescriptor</type> which can be used to get/set informations
            about the detected document

        @returns
            an internal type name if format was detected successfully
            <br>
            or an empty value for an unknown document format.
     */
    string detect( [inout] sequence< com::sun::star::beans::PropertyValue > Descriptor );

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
