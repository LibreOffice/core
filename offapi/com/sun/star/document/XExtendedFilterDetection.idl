/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_document_XExtendedFilterDetection_idl__
#define __com_sun_star_document_XExtendedFilterDetection_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/PropertyValue.idl>


module com { module sun { module star { module document {

/** provides a "deep" filter detection

    <p>
    A "deep" filter detection means looking into the document stream to detect
    the format of it. Services of type ExtendedTypeDetection must support this
    interface to be called from generic load mechanism of the office for that.
    </p>

    @see DetectService
    @see TypeDetection
    @see FilterFactory
 */
published interface XExtendedFilterDetection: com::sun::star::uno::XInterface
{
    /** controls agreement of a "flat" TypeDetection
        with given URL or arguments

        <p>
        Registered services in configuration, which support this interface for different mime types,
        will be called automatically to look into the document stream and decide which format it represent.
        Add the collected information about detected documents in given MediaDescriptor
        <var>Descriptor</var>. The decision must be returned as any valid type name (which specifies
        the detected format) or an empty value for unknown formats.
        </p>

        @param Descriptor
            represent a MediaDescriptor which can be used to get/set information
            about the detected document

        @returns
            an internal type name if format was detected successfully
            <br>
            or an empty value for an unknown document format.
     */
    string detect( [inout] sequence< com::sun::star::beans::PropertyValue > Descriptor );

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
