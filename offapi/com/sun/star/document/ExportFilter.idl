/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_document_ExportFilter_idl__
#define __com_sun_star_document_ExportFilter_idl__

#include <com/sun/star/document/XExporter.idl>
#include <com/sun/star/document/XFilter.idl>
#include <com/sun/star/lang/XInitialization.idl>
#include <com/sun/star/container/XNamed.idl>


module com { module sun { module star { module document {

/** filter for exports

    <p>
    Such filters can be used for exporting a content.
    Of course it's possible to combine it with the service ImportFilter
    if import functionality should be available at same implementation too.
    </p>

    @see ImportFilter
 */
published service ExportFilter
{
    /** set source(!) document for this filter

        <p>
        The document must be used as the source for following filter operation.
        Any content from there will be exported to another format.
        </p>
     */
    interface XExporter;

    /** filter interface

        <p>
        It's used to filter a document at saving time.
        The source document should be already set by using another interface
        XExporter which is supported by this service too.
        </p>

        <p>
        Tip:<br>
        If same implementation provides the service ImportFilter too,
        code must distinguish between filtering from a source document (for export) or
        filtering to a target document (for import). This can be recognized by saving
        state of used interfaces XExporter or XImporter!
        Otherwise it's not clear which action is required here.
         </p>
     */
    interface XFilter;

    /** support initialization of filter with its own configuration

        <p>
        A filter object must be created by global service FilterFactory.
        If filter supports this optional interface, he will be initialized by the factory directly
        after creation. The factory will pass the following information to this new instance:
            <ul>
                <li>first item will be a set of configuration data of the filter</li>
                <li>after that will follow may given optional parameters of call
                    com::sun::star::lang::XMultiServiceFactory::createInstanceWithArguments()
                    of service FilterFactory.
                </li>
            </ul>
        See description of service FilterFactory::XNameContainer for a description of
        possible configuration data.
        </p>
     */
    [optional] interface com::sun::star::lang::XInitialization;

    /** provides access to the internal name of this filter

        <p>
        This internal filter name can be used on service FilterFactory
        to get further information about it (e.g. his registration for mime types or extensions etc.)
        It's important that returned string is the "internal name" of the filter which must be
        unambiguous against all other registered filters in current installation.
        </p>
        <p>
        <strong>Attention!</strong><br>
        Supported method setName() should be ignored or forwarded to the FilterFactory.
        It's not allowed to set it directly to the configuration. Because it depends
        from real implementation of the FilterFactory if it will be allowed or not!
         </p>
     */
    [optional] interface com::sun::star::container::XNamed;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
