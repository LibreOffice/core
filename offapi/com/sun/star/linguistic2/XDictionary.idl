/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_linguistic2_XDictionary_idl__
#define __com_sun_star_linguistic2_XDictionary_idl__

#include <com/sun/star/container/XNamed.idl>
#include <com/sun/star/lang/Locale.idl>
#include <com/sun/star/linguistic2/DictionaryType.idl>
#include <com/sun/star/linguistic2/XDictionaryEntry.idl>
#include <com/sun/star/linguistic2/XDictionaryEventListener.idl>


module com { module sun { module star { module linguistic2 {

/** This interfaces enables the object to access personal dictionaries.

    <P>Personal dictionaries are used to supply additional
    information for spell checking and hyphenation (see
    com::sun::star::linguistic2::XDictionaryEntry).
    Only active dictionaries with an appropriate language are used
    for that purpose.
    The entries of an active, positive dictionary are words that are
    required to be recognized as correct during the spell checking
    process. Additionally, they will be used for hyphenation.
    Entries of a negative dictionary are required to be recognized
    as negative words, for example, words that should not be used, during
    SPELLCHECK. An entry in a negative dictionary may supply a
    proposal for a word to be used instead of the one being used.</P>

    @see    com::sun::star::linguistic2::XDictionaryEvent
    @see    com::sun::star::container::XNamed
*/
published interface XDictionary : com::sun::star::container::XNamed
{
    /** returns the type of the dictionary.

        @returns
            the type of the dictionary.

        @see    com::sun::star::linguistic2::DictionaryType
    */
    com::sun::star::linguistic2::DictionaryType getDictionaryType();

    /** specifies whether the dictionary should be used or not .

        @param  bActivate
            `TRUE` if the dictionary should be used, `FALSE` otherwise.

    */
    void setActive( [in] boolean bActivate );

    /**
        @returns
            `TRUE` if the dictionary is active, `FALSE` otherwise.
    */
    boolean isActive();

    /**
        @returns
               the number of entries in the dictionary.
    */
    long getCount();

    /**
         @returns
             the language of the dictionary.

        @see    com::sun::star::lang::Locale
    */
    com::sun::star::lang::Locale getLocale();

    /** is used to set the language of the dictionary.

         @param aLocale
            the new language of the dictionary.

        @see    com::sun::star::lang::Locale
    */
    void setLocale( [in] com::sun::star::lang::Locale aLocale );

    /** searches for an entry that matches the given word.

        @returns
            the reference to the entry found. If no entry was found,
            it is NULL.

        @param  aWord
            the word to be looked for.

        @see    com::sun::star::linguistic2::XDictionaryEntry
    */
    com::sun::star::linguistic2::XDictionaryEntry getEntry( [in] string aWord );

    /** is used to add an entry to the dictionary.

        <P>If an entry already exists, the dictionary remains unchanged
         and `FALSE` will be returned.</P>

        <P>In positive dictionaries only positive entries
        can be made, and in negative ones only negative entries.</P>

        @param  xDicEntry
            the entry to be added.

        @returns
            `TRUE` if the entry was successfully added `FALSE` otherwise.

        @see    com::sun::star::linguistic2::XDictionaryEntry
        @see    com::sun::star::linguistic2::DictionaryType
    */
    boolean addEntry(
        [in] com::sun::star::linguistic2::XDictionaryEntry xDicEntry );

    /** is used to make an entry in the dictionary.

        <P>If an entry already exists, the dictionary remains unchanged
         and `FALSE` will be returned.</P>

        <P>In positive dictionaries only positive entries
        can be made, and in negative ones only negative entries.</P>

        @param  aWord
            the word to be added.

        @param  bIsNegative
            specifies whether the entry will be a negative one or not.

        @param  aRplcText
            in the case of a negative entry, this is the replacement text to
            be used when replacing aWord. Otherwise, it is undefined.

        @returns
            `TRUE` if the entry was successfully added, `FALSE` otherwise.

        @see    com::sun::star::linguistic2::DictionaryType
    */
    boolean add(
            [in] string aWord,
            [in] boolean bIsNegative,
            [in] string aRplcText );

    /** removes an entry from the dictionary.

        @param  aWord
            the word matching the entry to be removed.

        @returns
            `TRUE` if the entry was successfully removed, `FALSE`
            otherwise (especially if the entry was not found).
    */
    boolean remove( [in] string aWord );

    /**
        @returns
             `TRUE` if the dictionary is full and no further
            entry can be made, `FALSE` otherwise.
    */
    boolean isFull();

    /**
        <p>This function should no longer be used since with the expansion of the
        maximum number of allowed entries the result may become unreasonable large!</p>

         @returns
             a sequence with all the entries of the dictionary.

        @see    com::sun::star::linguistic2::XDictionaryEntry
        @see    com::sun::star::linguistic2::XSearchableDictionary
        @deprecated
    */

    sequence<com::sun::star::linguistic2::XDictionaryEntry> getEntries();

    /** removes all entries from the dictionary.
    */
    void clear();

    /** adds an entry to the list of dictionary event listeners.

        <P>On dictionary events, each entry in the listener list will
         be notified via a call to
        com::sun::star::linguistic2::XDictionaryEventListener::processDictionaryEvent().</P>

        @param  xListener
            the entry to be made, that is, the object that wants notifications.

        @returns
            `TRUE` if the entry was successfully made, `FALSE` otherwise.
            If com::sun::star::lang::XEventListener::disposing() was called before,
            it will always fail.

        @see    com::sun::star::linguistic2::XDictionary::removeDictionaryEventListener()
        @see    com::sun::star::linguistic2::XDictionaryEventListener
    */
    boolean addDictionaryEventListener(
        [in] com::sun::star::linguistic2::XDictionaryEventListener xListener );

    /** removes an entry from the list of dictionary event listeners.

        @param  xListener
            the reference to the listening object to be removed.

        @returns
            `TRUE` if the object to be removed was found and removed,
            `FALSE` if the object was not found in the list.

        @see    com::sun::star::linguistic2::XDictionary::addDictionaryEventListener()
        @see    com::sun::star::linguistic2::XDictionaryEventListener
    */
    boolean removeDictionaryEventListener(
        [in] com::sun::star::linguistic2::XDictionaryEventListener xListener );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
