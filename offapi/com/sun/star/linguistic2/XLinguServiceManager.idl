/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_linguistic2_XLinguServiceManager_idl__
#define __com_sun_star_linguistic2_XLinguServiceManager_idl__


#include <com/sun/star/linguistic2/XSpellChecker.idl>
#include <com/sun/star/linguistic2/XHyphenator.idl>
#include <com/sun/star/linguistic2/XThesaurus.idl>
#include <com/sun/star/lang/XEventListener.idl>


module com { module sun { module star { module linguistic2 {

/** the basic interface to be used to access linguistic functionality.

    <P>This interface is used to access spell checker, hyphenator, and
    thesaurus functionality.
    Additionally, it can query what implementations of those services are
    available (for specific languages or in general).
    It can select and query which of those implementations should
    be used for a specific language.</P>

    <P>
    For spell checking and thesaurus, the order in the list defines the order
    of creation/usage of those services.
    That is, if the first spell checker implementation does not recognize
    the given word as correct, the second service implementation for that
    language is created and gets queried. If that one fails, the third one
    gets created and queried and so on.
    This chain stops if an implementation reports the word as correct or the
    end of the list is reached, in which case the word is reported as incorrect.
    </P>

    <P> For the thesaurus, the behavior is the same when no meaning was found.
    </P>

    @see    com::sun::star::linguistic2::SpellChecker
    @see    com::sun::star::linguistic2::Hyphenator
    @see    com::sun::star::linguistic2::Thesaurus
*/
published interface XLinguServiceManager : com::sun::star::uno::XInterface
{
    /**
        @returns
            the com::sun::star::linguistic2::XSpellChecker
            interface to be used for spell checking.
    */
    com::sun::star::linguistic2::XSpellChecker  getSpellChecker();

    /**
        @returns
            the com::sun::star::linguistic2::XHyphenator
            interface to be used for hyphenation.
    */
    com::sun::star::linguistic2::XHyphenator    getHyphenator();

    /**
        @returns
            the com::sun::star::linguistic2::XThesaurus
            interface to be used for thesaurus functionality.
    */
    com::sun::star::linguistic2::XThesaurus     getThesaurus();

    /** adds a listener to the list of event listeners.

        <P>The listeners may support one or both of
        com::sun::star::linguistic2::XDictionaryEventListener
        and
        com::sun::star::linguistic2::XLinguServiceEventListener
        interfaces.
        </P>

        @returns
            `TRUE` if the listener was successfully added, `FALSE` otherwise.

        @param xListener
            the listener to be added.
    */
    boolean     addLinguServiceManagerListener(
        [in] com::sun::star::lang::XEventListener xListener );

    /** removes a listener from the list of event listeners.

        @returns
            `TRUE` if the listener was successfully removed, `FALSE` otherwise.

        @param xListener
            the listener to be removed.
    */
    boolean     removeLinguServiceManagerListener(
        [in] com::sun::star::lang::XEventListener xListener );

    /**
        @returns
            the list of implementation names of the available services.

        @param aServiceName
            the name of the service requesting the list of available
            implementations.

        @param aLocale
            the language used to query the list of available implementations.
    */
    sequence< string >  getAvailableServices(
        [in] string                         aServiceName,
        [in] com::sun::star::lang::Locale   aLocale );

    /** sets the list of service implementations to be used for a
        given service and language.

        @param aServiceName
            the name of the service to set the list of implementations
            to be used.

        @param aLocale
            the language to set the list.

        @param aServiceImplNames
            the name of the service to set the list.
    */
    void                setConfiguredServices(
        [in] string                         aServiceName,
        [in] com::sun::star::lang::Locale   aLocale,
        [in] sequence< string >             aServiceImplNames );

    /** queries the list of service implementations to be used for a
        given service and language.

        @returns
            the list of implementation names of the services to be used.

        @param aServiceName
            the name of the service to get queried.

        @param aLocale
            the language to get queried.
    */
    sequence< string >  getConfiguredServices(
        [in] string                         aServiceName,
        [in] com::sun::star::lang::Locale   aLocale );

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
