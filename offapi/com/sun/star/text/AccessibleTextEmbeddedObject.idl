/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_text_AccessibleTextEmbeddedObjectView_idl__
#define __com_sun_star_text_AccessibleTextEmbeddedObjectView_idl__

#include <com/sun/star/accessibility/XAccessibleContext.idl>
#include <com/sun/star/accessibility/XAccessibleComponent.idl>
#include <com/sun/star/accessibility/XAccessibleImage.idl>
#include <com/sun/star/accessibility/XAccessibleEventBroadcaster.idl>




module com {  module sun {  module star {  module text {


/** The accessible view of an inactive embedded object. If an embedded
    object gets active, the active document gets an accessible object
    tree of its own. This tree is not a subtree of the object that supports
    this service but of the document service itself. The tree exist only
    until the object is deactivated.

     @since OOo 1.1.2
 */
published service AccessibleTextEmbeddedObject
{
    /** This interface comprises the basic accessibility of embedded objects.

        <ul>
            <li>The parent returned by
                <method scope="::com::sun::star::accessibility"
                >XAccessibleContext::getAccessibleParent</method> is the
                accessible view of a paragraph if the embedded object is
                bound as character, and the accessible view of the document
                (or of a page in the page preview) in any other case.
            <li>There are no children returned by
                <method scope="::com::sun::star::accessibility"
                >XAccessibleContext::getAccessibleChild</method>. See above.
            <li>The role is <const scope="::com::sun::star::accessibility"
                >AccessibleRole::EMBEDDED_OBJECT</const>
            <li>The name is the one assigned to the object in the text
                document. This means that it is not internationalized.
            <li>The description is the one assigned to the object in the text
                document. This means that it is not internationalized. If no
                description has been set, the description equals the name.
            <li>There are no relations.
            <li>The following states might be contained in the state set
                returned by <method scope="::com::sun::star::accessibility"
                >XAccessibleContext::getAccessibleStateSet</method>:
                <ul>
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::DEFUNC</const> (indicates that
                        the document window has been closed or the graphic
                        is not existing any longer)
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::EDITABLE</const>
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::ENABLED</const> (always
                        contained)
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::OPAQUE</const>
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::SELECTABLE</const>
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::SELECTED</const>
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::FOCUSABLE</const>
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::FOCUSED</const>
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::SHOWING</const>
                    <li><const scope="::com::sun::star::accessibility"
                        >AccessibleStateType::VISIBLE</const>
                </ul>
            <li>The locale is the one the text document itself.
        </ul>

    */
    interface ::com::sun::star::accessibility::XAccessibleContext;

    /** This interface describes the graphical representation of an
          embedded object.
    */
    interface ::com::sun::star::accessibility::XAccessibleComponent;

    /** This interface gives access to the object's size and its description.
    */
    interface ::com::sun::star::accessibility::XAccessibleImage;

    /** This is the interface for listeners
    */
    interface ::com::sun::star::accessibility::XAccessibleEventBroadcaster;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
