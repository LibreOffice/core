/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_text_AccessiblePageView_idl__
#define __com_sun_star_text_AccessiblePageView_idl__

#include <com/sun/star/accessibility/XAccessibleContext.idl>
#include <com/sun/star/accessibility/XAccessibleComponent.idl>
#include <com/sun/star/accessibility/XAccessibleEventBroadcaster.idl>



module com {  module sun {  module star {  module text {


/** The accessible view of pages.


     @since OOo 1.1.2
 */
service AccessiblePageView
{
    /** This interface gives access to any page that is visible in the
          page preview of a text document.

        <ul>
            <li>The parent returned by
                ::com::sun::star::accessibility::XAccessibleContext::getAccessibleParent()
                is the accessible page preview of a text document.  That is, the
                object returned by
                ::com::sun::star::accessibility::XAccessible::getAccessibleContext()
                supports
                ::com::sun::star::text::AccessibleTextDocumentPageView.
            <li>The children returned by
                ::com::sun::star::accessibility::XAccessibleContext::getAccessibleChild()
                all support the interface XAccessible. Calling
                ::com::sun::star::accessibility::XAccessible::getAccessibleContext()
                for these children returns an object that supports one of the
                following services.
                <ul>
                    <li>::com::sun::star::text::AccessibleHeaderFooterView:
                        A child of this kind is returned for every header
                        and footer that is contained in the page.
                    <li>::com::sun::star::text::AccessibleFootnoteView:
                        A child of this kind is returned for every footnote
                        that is contained in the page.
                    <li>::com::sun::star::text::AccessibleEndnoteView:
                        A child of this kind is returned for every endnote
                        that is contained in the page.
                    <li>::com::sun::star::text::AccessibleParagraphView:
                        A child of this kind is returned for every paragraph
                        fragment that is contained in the page.
                        A paragraph fragment is the part of a paragraph that
                        is displayed on a certain page.
                    <li>::com::sun::star::table::AccessibleTableView:
                        A child of this kind is returned for every table
                        fragment that is contained in the page.
                        A table fragment is the part of a table that is
                        displayed on a certain page.
                    <li>::com::sun::star::text::AccessibleTextFrameView:
                        A child of this kind is returned for every text
                        frame that is contained in the page. These objects
                        are children of the AccessiblePageView
                        regardless whether they are bound to the page, a
                        paragraph, a frame, or a character. The only
                        exception are text frames that are bound as
                        character.  They are children of the paragraph they
                        are contained in.
                    <li>::com::sun::star::text::AccessibleTextGraphicObject:
                        A child of this kind is returned for every graphic that
                        is contained in the page. These objects are
                        children of the AccessiblePageView
                        regardless whether they are bound to a page, paragraph,
                        a frame or a character. The only exception
                        are text frames that are bound as character. They are
                        children of the paragraph they are contained in.
                    <li>::com::sun::star::text::AccessibleTextEmbeddedObject:
                        A child of this kind is returned for every embedded
                        object that is contained in the page.
                        These objects are children of the
                        AccessibleTextDocumentView regardless
                        whether they are bound to a page, a paragraph, a frame,
                        or a character.  They are children of the paragraph they
                        are contained in.
                    <li>::com::sun::star::drawing::AccessibleShape:
                        A child of this kind (or one of its derived
                        interfaces) is returned for every shape that is
                        contained in the page. These objects are children of
                        the AccessibleTextDocumentView
                        regardless whether they are bound to a page, a
                        paragraph, a frame or a character.
                </ul>
                <p>The following rules apply to the children order:
                <ul>
                    <li>The logical order of paragraph and table fragments is
                        never changed.
                    <li>Headers appear immediately before the first paragraph or
                        table fragment of the header's page.
                    <li>Footnotes appear immediately after the last paragraph or
                        table fragment of the footnote's page. The logical order
                        of footnotes isn't changed.
                    <li>Endnotes appear immediately after the last footnote of
                        the endnote's page or after the last paragraph or
                        table fragment of this page if there are no footnotes.
                        The logical order of endnotes isn't changed.
                    <li>Footers appear immediately after the last endnote,
                        footnote, paragraph or table fragment of the footer's
                        page.
                    <li>Text frames, graphics, embedded objects and shapes that
                        are painted in the background appear before any other
                        children. Their order reflects the z order.
                    <li>Text frames, graphics, embedded objects and shapes
                        that are painted in the foreground appear behind any
                           other children. Their order reflects the z order,
                        with the exception of controls that appear really last,
                        but also keep the z order.
                </ul>
            <li>The role is
                ::com::sun::star::accessibility::AccessibleRole::PANEL
            <li>The name is "page" (or the equivalent term
                in application's language) with a number appended.
            <li>The description is "page" (or the equivalent term
                in application's language) with the page number or
                character appended in the format that is specified in the
                page style.
            <li>There are no relations.</li>
            <li>The following states might be contained in the state set
                returned by
                ::com::sun::star::accessibility::XAccessibleContext::getAccessibleStateSet():
                <ul>
                    <li>::com::sun::star::accessibility::AccessibleStateType::DEFUNC
                        (indicates that
                        the document window has been closed or the endnote
                        is not existing any longer)</li>
                    <li>::com::sun::star::accessibility::AccessibleStateType::ENABLED
                        (always contained)</li>
                    <li>::com::sun::star::accessibility::AccessibleStateType::OPAQUE
                    <li>::com::sun::star::accessibility::AccessibleStateType::FOCUSABLE
                    <li>::com::sun::star::accessibility::AccessibleStateType::FOCUSED
                    <li>::com::sun::star::accessibility::AccessibleStateType::SHOWING
                    <li>::com::sun::star::accessibility::AccessibleStateType::VISIBLE
                </ul>
            <li>The locale is the application's locale.
        </ul>

     */
    interface ::com::sun::star::accessibility::XAccessibleContext;

    /** This interface describes the graphical representation of a
          endnote.
     */
    interface ::com::sun::star::accessibility::XAccessibleComponent;

    /** This is the interface for listeners */
    interface ::com::sun::star::accessibility::XAccessibleEventBroadcaster;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
