/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_accessibility_XAccessibleContext_idl__
#define __com_sun_star_accessibility_XAccessibleContext_idl__

#include <com/sun/star/accessibility/IllegalAccessibleComponentStateException.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#include <com/sun/star/beans/XPropertyChangeListener.idl>
#include <com/sun/star/lang/Locale.idl>

module com { module sun { module star { module accessibility {

 interface XAccessible;
 interface XAccessibleRelationSet;
 interface XAccessibleSelection;
 interface XAccessibleStateSet;

/** Implement this interface for exposing various aspects of a class's
    content.

    <p>This interface serves two purposes: On the one hand it gives access
    to the tree structure in which all accessible objects are
    organized. Each node in this tree supports this interface.  On the other
    hand it gives access to objects that expose the represented content.
    That are role, state, name, description, and relations to other objects.
    Take an OK button of a dialog as an example.  Its role is
    AccessibleRole::BUTTON, its name is "OK", and its description
    is something like "Accepts all changes made in the dialog".</p>

    @since OOo 1.1.2
*/
interface XAccessibleContext : ::com::sun::star::uno::XInterface
{
    /** Return the number of children.

        <p>Returns the number of accessible children of the object.</p>

        @return
            The returned value is non-negative.
    */
    long getAccessibleChildCount();

    /** Returns the i-th child of this object.

        <p>The order in which the children are enumerated is implementation
        dependent.</p>

        @param i
            The index may have any value.  If it is outside the range from 0
            to n-1, with n being the number of children as returned by
            XAccessibleContext::getAccessibleChild() an empty
            reference is returned.
        @return
            If the object has an i-th child the returned value is a
            reference to that child.  Otherwise an empty reference is
            returned.
        @throws ::com::sun::star::lang::IndexOutOfBoundsException
            If no child with the given index exists then an
            ::com::sun::star::lang::IndexOutOfBoundsException
            exception is thrown.
    */
    XAccessible getAccessibleChild ([in] long i)
        raises (::com::sun::star::lang::IndexOutOfBoundsException);

    /** Returns the parent of this object.

        <p>This function may be called for every node, including the root
        node, of the accessible tree.</p>

        @return
            The returned reference points to a valid object for all but the
            root node.  If called for the root node an empty reference is
            returned.
    */
    XAccessible getAccessibleParent ();

    /** Returns the index of this object in its accessible parent.

        <p>If you call getAccessibeChild on the object's parent with the
        index returned by this function you get a reference to this
        object.</p>

        @return
           The returned index is zero based.
    */
    long getAccessibleIndexInParent ();

    /** Returns the role of this object.

        <p>The role is a generic description of an objects function.  The
        relation between role and name is similar to the relation between
        class and object.</p>

        @return
            The returned value is a role defined in the enumeration
            AccessibleRole.

        @see AccessibleRole
            for a list of the available roles.
    */
    short getAccessibleRole ();

    /** Returns the object's description.

        <p>Returns the object's localized description.  The description should
        complement the more generic descriptions given by an object's role
        and name.</p>

        @return
            The returned string is the object's localized description.
    */
    string getAccessibleDescription ();

    /** Return the object's localized name.

        <p>See XAccessibleContext::getAccessibleRole()'s
        documentation for the relation between an object's name and role.
        Names should be unique, at least between children of the same
        parent, although the uniqueness is neither enforced nor used inside
        the API.</p>

        @return
            The returned string is the object's localized name.
    */
    string  getAccessibleName ();

    /** Returns the set of relations defined for this object.

        <p>The returned set of relations is a copy of this object's relation
        set: changing the returned object does not change this object's
        relations.</p>

        <p>There are two ways to represent an empty list of relations:
        Return an empty reference or return a valid object that contains an
        empty list.

        @return
           The returned value is either an empty reference or a reference to
           a valid object that represents a copy of the objects list of
           relations.
    */
    XAccessibleRelationSet getAccessibleRelationSet ();

    /** Returns the set of states that are currently active for this
        object.

        <p>The returned state set is a copy: Changing the returned state set
        will not be reflected by changing the object's set of states.  See
        the documentation of XAccessibleStateSet for a
        description of the individual states.</p>

        @return
            A reference to this object's state set or an empty reference if
            states are not supported.

        @see XAccessibleStateSet
    */
    XAccessibleStateSet getAccessibleStateSet ();

    /** Returns the locale of the component.

        <p>This locale is used for example to determine the language to use
        for the name and description texts.</p>

        @return
            If this object does not have a locale, the locale of its parent
            is returned.  If it does not have (yet) a parent it throws the
            exception IllegalAccessibleComponentStateException.

        @throws IllegalAccessibleComponentStateException
            when this object does not (yet) have a parent.
    */
    ::com::sun::star::lang::Locale getLocale ()
        raises (IllegalAccessibleComponentStateException);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
