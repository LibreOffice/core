/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_XParametricPolyPolygon2D_idl__
#define __com_sun_star_rendering_XParametricPolyPolygon2D_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/geometry/RealPoint2D.idl>
#include <com/sun/star/rendering/XPolyPolygon2D.idl>
#include <com/sun/star/rendering/XColorSpace.idl>

module com { module sun { module star { module rendering {

/** Interface to a dynamic poly-polygon generator, that generates
    poly-polygons depending on a given parameter value.<p>

    The returned poly-polygon should normally be contained in the
    [0,1]x[0,1] rectangle. At least that is the dimension expected at
    other places. e.g. <type>Texture</type>.
 */
interface XParametricPolyPolygon2D : ::com::sun::star::uno::XInterface
{
    /** Query the polygonal outline at the specified value.

        The returned outline should be clipped to the [0,1]x[0,1]
        rectangle.

        @param t
        Parameter value in the range [0,1]. During painting, this
        range is swept through starting from 0. When using such a
        parametric poly-polygon for gradients, the area covered by the
        returned XPolyPolygon2D should be monotonically decreasing
        with t (unless singularities in e.g. the resulting gradient
        are desired).
     */
    XPolyPolygon2D              getOutline( [in] double t )
        raises (com::sun::star::lang::IllegalArgumentException);


    /** Query the color value for the polygonal area at the specified
        parameter value.

        @param t
        Parameter value in the range [0,1]. During painting, this
        range is swept through starting from 0.
     */
    sequence<ColorComponent>    getColor( [in] double t )
        raises (com::sun::star::lang::IllegalArgumentException);


    /** Query the color for a dedicated point in the plane.

        @param point
        The permissible parameter range for point is [0,1]x[0,1]
     */
    sequence<ColorComponent>    getPointColor( [in] ::com::sun::star::geometry::RealPoint2D point )
        raises (com::sun::star::lang::IllegalArgumentException);


    /** Query the color space employed by this object

        @return the color space the colors generated by this object
        are to be interpreted in.
     */
    XColorSpace                 getColorSpace();

};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
