/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_ViewState_idl__
#define __com_sun_star_rendering_ViewState_idl__

#include <com/sun/star/geometry/AffineMatrix2D.idl>

module com { module sun { module star { module rendering {

interface XPolyPolygon2D;

/** This structure contains information considered the view state.<p>

    This structure contains information considered the view state,
    i.e. the invariant setup used when painting a whole view of
    something.<p>

    @since OOo 2.0
 */
struct ViewState
{
    /** The affine transform associated with the view.<p>

        This member is used to transform coordinates of draw
        operations from user space to screen space.<p>
     */
    ::com::sun::star::geometry::AffineMatrix2D  AffineTransform;


    /** The clipping area associated with the view.<p>

        This clipping is interpreted in the view coordinate systems,
        i.e. subject to the view transform before mapping to the
        device coordinate space.<p>

        Specifying an empty interface denotes no clipping,
        i.e. everything rendered to the canvas will be visible
        (subject to device-dependent constraints, of
        course). Specifying an empty XPolyPolygon2D, i.e. a
        poly-polygon containing zero polygons, or an XPolyPolygon2D
        with any number of empty sub-polygons, denotes the NULL
        clip. That means, nothing rendered to the canvas will be
        visible.<p>
     */
    XPolyPolygon2D                                      Clip;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
