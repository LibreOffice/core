/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_rendering_ViewState_idl__
#define __com_sun_star_rendering_ViewState_idl__

#include <com/sun/star/geometry/AffineMatrix2D.idl>

module com { module sun { module star { module rendering {

interface XPolyPolygon2D;

/** This structure contains information considered the view state.<p>

    This structure contains information considered the view state,
    i.e. the invariant setup used when painting a whole view of
    something.<p>

    @since OOo 2.0
 */
struct ViewState
{
    /** The affine transform associated with the view.<p>

        This member is used to transform coordinates of draw
        operations from user space to screen space.<p>
     */
    ::com::sun::star::geometry::AffineMatrix2D  AffineTransform;


    /** The clipping area associated with the view.<p>

        This clipping is interpreted in the view coordinate systems,
        i.e. subject to the view transform before mapping to the
        device coordinate space.<p>

        Specifying an empty interface denotes no clipping,
        i.e. everything rendered to the canvas will be visible
        (subject to device-dependent constraints, of
        course). Specifying an empty XPolyPolygon2D, i.e. a
        poly-polygon containing zero polygons, or an XPolyPolygon2D
        with any number of empty sub-polygons, denotes the NULL
        clip. That means, nothing rendered to the canvas will be
        visible.<p>
     */
    XPolyPolygon2D                                      Clip;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
