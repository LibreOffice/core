/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_XLinePolyPolygon2D_idl__
#define __com_sun_star_rendering_XLinePolyPolygon2D_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#include <com/sun/star/geometry/RealPoint2D.idl>
#include <com/sun/star/rendering/XPolyPolygon2D.idl>

module com { module sun { module star { module rendering {

/** Specialized interface for a 2D poly-polygon containing only straight line segments.

    @since OOo 2.0
 */
interface XLinePolyPolygon2D : XPolyPolygon2D
{
    /** Query subset of this poly-polygon, starting at the given
        polygon and the given point within that polygon, and
        containing the specified number of polygons and points in the
        last polygon.

        @param nPolygonIndex
        The index number of the polygon to start with extracting
        points. Set to 0 to start with the first polygon.

        @param nNumberOfPolygons
        The number of polygons, starting with nPolygonIndex, to
        extract points from. Set to -1 to extract all polygons,
        starting with nPolygonIndex (i.e. a total of
        getNumberOfPolygons() - nPolygonIndex polygons is extracted).

        @param nPointIndex
        The index of the point within the first polygon (that with the
        index number nPolygonIndex) to start extraction with. Set to 0
        to start with the first point in this polygon.

        @param nNumberOfPoints
        The number of points in the last polygon of the extraction
        sequence, to be extracted. Set to -1 to extract all points
        from the last polygon.
     */
    sequence< sequence< ::com::sun::star::geometry::RealPoint2D > > getPoints( [in] long nPolygonIndex, [in] long nNumberOfPolygons, [in] long nPointIndex, [in] long nNumberOfPoints )
        raises (com::sun::star::lang::IndexOutOfBoundsException);


    /** Set the specified sequence of points to the poly-polygon.

        This method can either set the whole poly-polygon to the new
        data, or insert the points at the given index

        @param nPolygonIndex
        The index of the polygon to start point insertion with. This
        index must be in the range [0,numPolygons], and the insertion
        will take place <em>before</em> this position (i.e. when
        specifying 0 here, the given point sequence will precede all
        existing polygons already within the poly-polygon). To append
        to a poly-polygon, call setPoints() with
        <member>XLinePolyPolygon2D::getNumberOfPolygons()</member>
        as the polygon index. If nPolygonIndex is -1, the given
        sequence of points <em>replaces</em> the poly-polygon content,
        such that after this method completes, it contains exactly the
        specified point data.

        @throws <type>com::sun::star::lang::IndexOutOfBoundsException</type>
        if one of the given values exceed the permissible range.
     */
    void setPoints( [in] sequence< sequence< ::com::sun::star::geometry::RealPoint2D > > points, [in] long nPolygonIndex )
        raises (com::sun::star::lang::IndexOutOfBoundsException);


    /** Get a single point from the poly-polygon
     */
    ::com::sun::star::geometry::RealPoint2D getPoint( [in] long nPolygonIndex, [in] long nPointIndex )
        raises (com::sun::star::lang::IndexOutOfBoundsException);


    /** Set a single point on the poly-polygon. The remaining points of
        the poly-polygon will not be changed by this method.
     */
    void setPoint( [in] ::com::sun::star::geometry::RealPoint2D point, [in] long nPolygonIndex, [in] long nPointIndex )
        raises (com::sun::star::lang::IndexOutOfBoundsException);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
