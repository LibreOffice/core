/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_rendering_XBitmap_idl__
#define __com_sun_star_rendering_XBitmap_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/geometry/IntegerSize2D.idl>
#include <com/sun/star/geometry/RealSize2D.idl>
#include <com/sun/star/rendering/VolatileContentDestroyedException.idl>

module com { module sun { module star { module rendering {

/** This is a generic interface to a bitmap.<p>

    This interface contains the generic functionality to be used on
    every XCanvas bitmap object. More format-specific
    methods can be found at the XIntegerBitmap,
    XIeeeDoubleBitmap, XIeeeFloatBitmap and
    XHalfFloatBitmap interfaces.<p>

    @since OOo 2.0
 */
interface XBitmap : ::com::sun::star::uno::XInterface
{
    /** Query the size of the bitmap.<p>

        This method queries the bitmap size in pixel.<p>

        @return the bitmap size in pixel.
      */
    ::com::sun::star::geometry::IntegerSize2D   getSize();


    /** Query transparency status of the bitmap.<p>

        The method checks, whether the bitmap contains any alpha
        information. The same information is also available at the
        XColorSpace associated with this bitmap, though
        much easier to access here (the color space then has a
        component flagged
        ColorComponentTag::ALPHA).<p>

        @return `TRUE`, if the bitmap has alpha data, or `FALSE` if
        not.
      */
    boolean                                     hasAlpha();


    /** Query a scaled copy of the original bitmap.

        @param newSize
        Requested size of the new bitmap. Both of the two size
        components must be greater than zero.

        @param beFast
        When set to true, this parameter advises getScaledBitmap to
        use the fastest available algorithm to scale the bitmap, which
        might cause visible artifacts.

        @returns the new scaled bitmap.

        @throws com::sun::star::lang::IllegalArgumentException
        if the size components are outside the specified range.

        @throws VolatileContentDestroyedException
        if the contents of a volatile bitmap have been destroyed, and
        thus cannot be read to generate the scaled bitmap.
     */
    XBitmap                         getScaledBitmap( [in] ::com::sun::star::geometry::RealSize2D newSize, [in] boolean beFast )
        raises (com::sun::star::lang::IllegalArgumentException,
                VolatileContentDestroyedException);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
