/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_rendering_XBitmapPalette_idl__
#define __com_sun_star_rendering_XBitmapPalette_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#include <com/sun/star/rendering/XColorSpace.idl>


module com { module sun { module star { module rendering {

/** Interface to access the palette of a color-indexed bitmap.

    @since OOo 2.0
 */
interface XBitmapPalette : ::com::sun::star::uno::XInterface
{
    /** Request the number of palette entries available.

        @return the number of entries in this palette.
     */
    long getNumberOfEntries();


    /** Request the color for the given palette entry.

        @param entry
        Output parameter for the color components at the given palette
        entry.

        @param nIndex
        The index of the palette entry to be retrieved. Valid range is
        [0,getNumberOfEntries()-1].

        @return `TRUE`, if the given palette entry should be displayed
        opaque, and `FALSE` if the entry should be displayed
        transparent. This is sometimes used for so-called mask
        transparency, by flagging certain palette entries to be fully
        transparent when displaying the bitmap.

        @throws com::sun::star::lang::IndexOutOfBoundsException
        if the index is smaller than zero or larger than
        XBitmapPalette::getNumberOfEntries()-1.
     */
    boolean getIndex( [out] sequence<ColorComponent> entry, [in] long nIndex )
        raises (com::sun::star::lang::IndexOutOfBoundsException);


    /** Set the color for the given palette entry.

        @param color
        Sequence of device color values in the associated bitmap's
        device color format.

        @param transparency
        When `TRUE`, the specified palette entry is displayed as
        opaque color. When `FALSE`, the given entry displays as fully
        transparent during output.

        @param nIndex
        The index of the palette entry to be changed. Valid range is
        [0,getNumberOfEntries()-1].

        @return whether the palette entry was changed. For read-only
        entries, this method always returns `FALSE`.

        @throws com::sun::star::lang::IndexOutOfBoundsException
        if the index is smaller than zero or larger than
        XBitmapPalette::getNumberOfEntries()-1.

        @throws com::sun::star::lang::IllegalArgumentException
        if the given sequence of color components does not match the
        associated bitmap's device color format.
     */
    boolean setIndex( [in] sequence<ColorComponent> color, [in] boolean transparency, [in] long nIndex )
        raises (com::sun::star::lang::IndexOutOfBoundsException,
                com::sun::star::lang::IllegalArgumentException);


    /** Query associated color space.<p>

        @return the color space that is associated with this palette.
     */
    XColorSpace getColorSpace( );
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
