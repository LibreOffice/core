/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_XIntegerReadOnlyBitmap_idl__
#define __com_sun_star_rendering_XIntegerReadOnlyBitmap_idl__

#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#include <com/sun/star/geometry/IntegerPoint2D.idl>
#include <com/sun/star/geometry/IntegerRectangle2D.idl>
#include <com/sun/star/rendering/IntegerBitmapLayout.idl>
#include <com/sun/star/rendering/XBitmap.idl>
#include <com/sun/star/rendering/VolatileContentDestroyedException.idl>


module com { module sun { module star { module rendering {

interface XBitmapPalette;

/** This is a specialized interface for bitmaps having integer color
    channels. In contrast to <type>XIntegerBitmap</type>, this
    interface only permits read-only access.<p>

    Use this interface for e.g. bitmaps that are calculated
    on-the-fly, or that are pure functional, and thus cannot be
    modified.<p>

    If you get passed an instance of
    <type>XIntegerReadOnlyBitmap</type> that also supports the
    <type>XVolatileBitmap</type> interface, things become a bit more
    complicated. When reading data, one has to check for both
    <type>VolatileContentDestroyedException</type> and mismatching
    <type>IntegerBitmapLayout</type> return values. If either of them
    occurs, the whole bitmap read operation should be repeated, if you
    need consistent information.<p>
 */
interface XIntegerReadOnlyBitmap : XBitmap
{
    /** Query the raw data of this bitmap.<p>

        Query the raw data of this bitmap, in the format as defined by
        getMemoryLayout(). With the given rectangle, a subset of the
        whole bitmap can be queried. If the internal data format's
        pixel are not integer multiples of bytes (i.e. if one pixel
        occupies less than a byte), the leftover content of the bytes
        at the right of each scanline is filled with zeros. The
        details of the scanline padding are to be retrieved from the
        passed bitmap layout.<p>

        Note that the bitmap memory layout might change over time for
        volatile bitmaps.<p>

        @param bitmapLayout
        The memory layout the returned data is in. Note that the color
        space returned therein needs to always match the current color
        space as would have been returned by getMemoryLayout(). This
        is necessary to ensure correct operation under changing
        <type>XVolatileBitmap</type>.

        @param rect
        A rectangle, within the bounds of the bitmap, to retrieve the
        consent from.

        @throws <type>VolatileContentDestroyedException</type>
        if the bitmap is volatile, and the content has been destroyed by the system.

        @throws <type>com::sun::star::lang::IndexOutOfBoundsException</type>
        if parts of the given rectangle are outside the permissible
        bitmap area.
     */
    sequence<byte>      getData( [out] IntegerBitmapLayout bitmapLayout, [in] ::com::sun::star::geometry::IntegerRectangle2D rect )
        raises (com::sun::star::lang::IndexOutOfBoundsException,
                VolatileContentDestroyedException);


    /** Get a single pixel of the bitmap, returning its color
        value.<p>

        If the internal data format's pixel are not integer multiples
        of bytes (i.e. if one pixel occupies less than a byte - the
        case of more than one byte per pixel is not specified), the
        color value is returned in the least significant bits of the
        single byte returned as the color. The details of the returned
        pixel data are to be retrieved from the passed bitmap layout.<p>

        Note that the bitmap memory layout might change for volatile
        bitmaps.<p>

        @param bitmapLayout
        The memory layout the returned data is in. Note that the color
        space returned therein needs to always match the current color
        space as would have been returned by getMemoryLayout(). This
        is necessary to ensure correct operation under changing
        <type>XVolatileBitmap</type>.

        @param pos
        A position, within the bounds of the bitmap, to retrieve the
        color from.

        @throws <type>VolatileContentDestroyedException</type>
        if the bitmap is volatile, and the content has been destroyed by the system.

        @throws <type>com::sun::star::lang::IndexOutOfBoundsException</type>
        if the given position is outside the permissible bitmap area.
     */
    sequence<byte>      getPixel( [out] IntegerBitmapLayout bitmapLayout, [in] ::com::sun::star::geometry::IntegerPoint2D pos )
        raises (com::sun::star::lang::IndexOutOfBoundsException,
                VolatileContentDestroyedException);


    /** Query the memory layout for this bitmap.<p>

        Please note that for volatile bitmaps, the memory layout might
        change between subsequent calls.<p>
     */
    IntegerBitmapLayout getMemoryLayout();
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
