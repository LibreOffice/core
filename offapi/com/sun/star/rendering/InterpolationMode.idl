/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_rendering_InterpolationMode_idl__
#define __com_sun_star_rendering_InterpolationMode_idl__

module com { module sun { module star { module rendering {

/** These constants specify the interpolation type for animation
    frames.<p>

    With this constants, one specifies the way of interpolation that
    takes place between two consecutive frames of a discrete animation
    sequence.

    @since OOo 2.0
 */
constants InterpolationMode
{
    /** Perform a nearest neighbor interpolation.<p>

        That is, when interpolating between two values v0 and v1,
        positioned at t0 and t1, take the one which has the closest t
        coordinate.<p>
     */
    const byte NEAREST_NEIGHBOR=1;


    /** Perform a linear interpolation.<p>

        That is, when interpolating at position t between two values
        v0 and v1, positioned at t0 and t1, take the sum of v0
        weighted with (t-t0) and v1 weighted with (t1-t).<p>
     */
    const byte LINEAR=2;


    /** Perform a cubic interpolation.<p>

        That is, when interpolating at position t, take the four
        closest data points v0, v1, v2, and v3, fit a cubic curve
        through them, and take the interpolated value from this cubic
        curve.<p>
     */
    const byte CUBIC=3;


    /** Perform a cubic Bezier spline interpolation.<p>

        That is, when interpolating at position t, take the three
        closest data points v0, v1, and v2, fit a cubic Bezier spline
        through them, and take the interpolated value from this cubic
        curve.<p>
     */
    const byte BEZIERSPLINE3=4;


    /** Perform a quadric Bezier spline interpolation.<p>

        That is, when interpolating at position t, take the four
        closest data points v0, v1, v2, and v3, fit a quadric Bezier
        spline through them, and take the interpolated value from this
        quadric curve.<p>
     */
    const byte BEZIERSPLINE4=5;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
