/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_rendering_ColorComponentTag_idl__
#define __com_sun_star_rendering_ColorComponentTag_idl__

module com { module sun { module star { module rendering {

/** A collection of tags for the individual components of a color.<p>

    Color components usually correspond to physical attributes like the
    amount of red colorant contained in an output color. This constant
    field enumerates the most common ones.

    @since OOo 2.3
 */
constants ColorComponentTag
{
    /// Unspecified device color value
    const byte DEVICE=0;

    /// Red colorant from RGB color space
    const byte RGB_RED=1;

    /// Green colorant from RGB color space
    const byte RGB_GREEN=2;

    /// Blue colorant from RGB color space
    const byte RGB_BLUE=3;

    /// Cyan colorant from CMYK color space
    const byte CMYK_CYAN=4;

    /// Magenta colorant from CMYK color space
    const byte CMYK_MAGENTA=5;

    /// Yellow colorant from CMYK color space
    const byte CMYK_YELLOW=6;

    /// Black colorant from CMYK color space
    const byte CMYK_BLACK=7;

    /// Orange colorant from hexachrome color space
    const byte CMYKOG_ORANGE=8;

    /// Green colorant from hexachrome color space
    const byte CMYKOG_GREEN=9;

    /// Arbitrary extra spot color, e.g. Pantone
    const byte SPOT=10;

    /// Index into palette
    const byte INDEX=11;

    /// Alpha channel
    const byte ALPHA=12;

    /// Grey value. Used for monochrome color spaces
    const byte GREY=13;

    /** Premultiplied alpha channel<p>

       Note that this alpha format actually influences the other color
       components, in that their values are pre-multiplied with the
       alpha value.<p>
     */
    const byte PREMULTIPLIED_ALPHA=14;

    /// CieXYZ X value
    const byte CIEXYZ_X=15;

    /// CieXYZ Y value
    const byte CIEXYZ_Y=16;

    /// CieXYZ Z value
    const byte CIEXYZ_Z=17;

    /// CieLab L value
    const byte CIELAB_L=18;

    /// CieLab a value
    const byte CIELAB_A=19;

    /// CieLab b value
    const byte CIELAB_B=20;

    /// HSV H value
    const byte HSV_H=21;

    /// HSV S value
    const byte HSV_S=22;

    /// HSV V value
    const byte HSV_V=23;

    /// HSL H value
    const byte HSL_H=24;

    /// HSL S value
    const byte HSL_S=25;

    /// HSL L value
    const byte HSL_L=26;

    /// YCbCr Y value
    const byte YCBCR_Y=27;

    /// YCbCr Cb value
    const byte YCBCR_CB=28;

    /// YCbCr Cr value
    const byte YCBCR_CR=29;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
