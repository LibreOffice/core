/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_geometry_EllipticalArc_idl__
#define __com_sun_star_geometry_EllipticalArc_idl__

#include <com/sun/star/geometry/RealPoint2D.idl>

module com {  module sun {  module star {  module geometry {

/** This structure specifies an arbitrary elliptical arc.<p>

    This structure contains all parameters necessary to specify
    arbitrary elliptical arcs. The parameters are modeled closely
    after the <a href="http://www.w3c.org">SVG</a> specification.<p>

    As with the parameters below, there are mostly four different
    ellipses arcs (two different ellipses, on which four different
    arcs connect start and end point) which satisfy the given set of
    constrains. Thus, there are two flags indicating which one of those
    ellipses should be taken.<p>

    @since OOo 2.0
 */
struct EllipticalArc
{
    /// Start point of the arc.
    RealPoint2D StartPosition;


    /// End point of the arc.
    RealPoint2D EndPosition;


    /// Main radius in x direction of the ellipse this arc is part of.
    double  RadiusX;


    /// Main radius in y direction of the ellipse this arc is part of.
    double  RadiusY;


    /** Rotation angle of the x axis of the ellipse relative to the x
        axis of the reference coordinate system.
     */
    double  XAxisRotation;


    /** If <TRUE/>, and there's a choice, take the longer one of two arcs
        connecting start and end point.
     */
    boolean IsLargeArc;


    /** If <TRUE/>, and there's a choice, take the arc that goes
        clock-wise from start to end point.
     */
    boolean IsClockwiseSweep;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
