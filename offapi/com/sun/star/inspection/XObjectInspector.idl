/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_inspection_XObjectInspector_idl__
#define __com_sun_star_inspection_XObjectInspector_idl__

#include <com/sun/star/frame/XController.idl>
#include <com/sun/star/frame/XDispatchProvider.idl>
#include <com/sun/star/util/VetoException.idl>

module com {  module sun {  module star {  module inspection {

interface XObjectInspectorModel;
interface XObjectInspectorUI;

/** describes the main interface of an ObjectInspector.

    @see ObjectInspector

    @since OOo 2.0.3
*/
interface XObjectInspector
{
    /** allows to plug the inspector into an com::sun::star::frame::XFrame

        <p>The com::sun::star::frame::XController::setModel() method
        accepts only XObjectInspectorModels, and will return `FALSE` if the
        to-be-attached model is not `NULL`, but does not support this interface.</p>

        <p>If you do not want to support a full-blown com::sun::star::frame::XModel,
        use the #InspectorModel attribute instead.</p>

        <p>The com::sun::star::frame::XController::getViewData() and
        com::sun::star::frame::XController::restoreViewData() exchange
        string values, which describes as much of the current view state as possible.</p>
    */
    interface com::sun::star::frame::XController;

    /** allows to intercept functionality

        <p>This interface is inherited from the com::sun::star::frame::Controller
        service, currently, there is no functionality to intercept at an XObjectInspector.</p>
    */
    interface com::sun::star::frame::XDispatchProvider;

    /** provides access to the current model of the inspector

        <p>The model is mainly responsible for providing the property handlers. Additionally,
        it can provide user interface names and help URLs for property categories.</p>

        <p>Note that there are two ways of setting or retrieving the current model: You can either
        use com::sun::star::frame::XModel::setModel(), or, if you do not want
        or need to implement the full-blown com::sun::star::frame::XModel interface,
        you can use this property directly. Both approaches are semantically equivalent.</p>

        <p>If a new model is set at the inspector, the complete UI will be rebuilt to reflect
        the change, using the new property handlers provided by the new model.</p>
    */
    [attribute] XObjectInspectorModel InspectorModel;

    /** provides access to the user interface of the object inspector.

        <p>This interface can be used to access and manipulate various aspects of
        the user interface. For instance, you can enable and disable certain
        property controls (or parts thereof), or register observers for all property
        controls.</p>

        @since OOo 2.2
    */
    [attribute, readonly] XObjectInspectorUI InspectorUI;

    /** inspects a new collection of one or more objects.

        <p>If the sequence is empty, the UI of the ObjectInspector will be
        cleared.</p>

        <p>If the sequence contains more than one object, the XObjectInspector
        will create a complete set of property handlers (as indicated by
        XObjectInspectorModel::HandlerFactories) for <em>every</em> of
        the objects, and compose their output.</p>

        @throws com::sun::star::util::VetoException
            if the inspector cannot switch to another object set. This typically happens if
            one of the active XPropertyHandler's raised a non-modal user interface,
            and vetoed suspension of this UI.

        @see XPropertyHandler::isComposable
        @see XPropertyHandler::onInteractivePropertySelection
        @see XPropertyHandler::suspend
    */
    void inspect( [in] sequence< com::sun::star::uno::XInterface > Objects )
        raises (com::sun::star::util::VetoException);
};


}; }; }; };

#endif


/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
