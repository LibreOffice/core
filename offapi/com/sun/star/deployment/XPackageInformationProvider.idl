/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_deployment_XPackageInformationProvider_idl__
#define __com_sun_star_deployment_XPackageInformationProvider_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/uno/Exception.idl>

module com { module sun { module star { module deployment {

/** Objects implementing this interface provide an URL to the root of
    an installed package.

    @since OOo 2.3
*/
interface XPackageInformationProvider
{
    /** get Package information for a specific extension.

        @param extensionId
               the unique identifier of an extension. The service looks for
               an installed package with the given id and returns the URL to
               the root of the package. If the service can not find a matching
               package, an empty string will be returned.
    */
    string getPackageLocation( [in] string extensionId );

    /** check if there are updates available for an extension.

        @param extensionId
               the unique identifier of an extension. When the extensionId is empty,
               the service looks checks all installed extensions for a newer version,
               otherwise the service looks for updates for an installed package with
               the given id.
       If the service finds an update for an extension, a sequence containing the name
            and the version will be returned for each extension which has an update.
       If the service can not find a matching package, an empty sequence is returned.
    */
    sequence< sequence< string > > isUpdateAvailable( [in] string extensionId );

    /** returns a list of all installed extension with their version.
    */
    sequence< sequence< string > > getExtensionList();
};

}; }; }; };
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
