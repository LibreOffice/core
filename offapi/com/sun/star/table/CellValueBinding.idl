/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_table_CellValueBinding_idl__
#define __com_sun_star_table_CellValueBinding_idl__

#include <com/sun/star/form/binding/ValueBinding.idl>
#include <com/sun/star/table/CellAddress.idl>
#include <com/sun/star/lang/XInitialization.idl>


module com {  module sun {  module star {  module table {


/** defines the binding to a single cell in a table document

    <p>Read/Write access to the cell represented by this component is supported,
    as well as active broadcasting of value changes.</p>

    <p>The binding supports exchanging <em>double</em> values, <em>string</em>
    values.</p>

    <p>The component cannot be instantiated at a global service factory, instead
    it's usually provided by a document instance.</p>

    @see com::sun::star::document::OfficeDocument
*/
service CellValueBinding
{
    /** ensures the basic functionality for binding to a value
    */
    service com::sun::star::form::binding::ValueBinding;

    /** specifies the cell within a document whose value is reflected
        by the binding.
    */
    [property, bound, readonly] com::sun::star::table::CellAddress  BoundCell;

    /** allows notifications of changes in the content of the underlying cell.

        <p>Note that this interface is already optionally allowed in the
        underlying service (<type scope="com::sun::star::form::binding">ValueBinding</type>),
        but it loses it's optionality here.</p>
    */
    interface com::sun::star::util::XModifyBroadcaster;

    /** allows setting initial, creation-time properties of the component

        <p>This interface is used to initialize the component after creation. It has
        to be used exactly once in the life time of the component, every second call
        to <member scope"com::sun::star::lang">XInitialization::initialize</member>
        will throw an exception.</p>

        <p>The arguments passed to the <member scope"com::sun::star::lang">XInitialization::initialize</member>
        method must be instances of <type scope="com::sun::star::beans">NamedValue</type>, where
        the <member scope"com::sun::star::beans">NamedValue::Name</member> denotes the type of information
        to initialize, and the <member scope"com::sun::star::beans">NamedValue::Value</member>
        the initial value.</p>

        <p>The following aspects of the components can be initialized:<br/>
            <ul><li><b>BoundCell</b><br/>
                specifies the address of the cell to bind this instance to. Must be a
                <type scope="com::sun::star::table">CellAddress</type> instance.</li>
            </ul>
        </p>
    */
    interface com::sun::star::lang::XInitialization;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
