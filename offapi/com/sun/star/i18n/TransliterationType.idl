/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_i18n_TransliterationType_idl__
#define __com_sun_star_i18n_TransliterationType_idl__


module com {  module sun {  module star {  module i18n {


/**
    Bitmask transliteration types used with
    XTransliteration::getType() and
    XTransliteration::getAvailableModules() methods.

    <p> Non-IGNORE type modules provide
    XTransliteration::transliterate(). <br/>
    IGNORE type modules provide
    XTransliteration::equals() and
    XTransliteration::transliterateRange(). </p>
 */

published constants TransliterationType
{
    const short NONE               = 0;

    /** A transliteration module is ONE_TO_ONE if and only if it's
        mapping between characters is one to one like a-z to A-Z.
        Transliteration modules of this type can be used as choice in
        regular expressions based search/replace. */
    const short ONE_TO_ONE         = 1;

    /** A transliteration module can have attribute NUMERIC if it
        transliterates numbers in different languages like Chinese
        numbers to Arabic numbers and vice versa. This mapping need not
        be one to one, it should be primarily used by number formatting
        and parsing methods. */
    const short NUMERIC            = 2;

    /** A transliteration module is ONE_TO_ONE_NUMERIC if it offers
        both one to one mapping and handles number also. */
    const short ONE_TO_ONE_NUMERIC = 3;

    /** With a transliteration IGNORE case, the regular
        expression A-Z can be transformed to a-z, for example. */
    const short IGNORE             = 4;

    /** If the transliteration is cascaded (uses more than one
        algorithm). */
    const short CASCADE            = 8;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
