/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_i18n_TransliterationType_idl__
#define __com_sun_star_i18n_TransliterationType_idl__


module com {  module sun {  module star {  module i18n {


/**
    Bitmask transliteration types used with
    <member>XTransliteration::getType()</member> and
    <member>XTransliteration::getAvailableModules()</member> methods.

    <p> Non-IGNORE type modules provide
    <member>XTransliteration::transliterate()</member>. <br/>
    IGNORE type modules provide
    <member>XTransliteration::equals()</member> and
    <member>XTransliteration::transliterateRange()</member>. </p>
 */

published constants TransliterationType
{
    const short NONE               = 0;

    /** A transliteration module is ONE_TO_ONE if and only if it's
        mapping between characters is one to one like a-z to A-Z.
        Transliteration modules of this type can be used as choice in
        regular expressions based search/replace. */
    const short ONE_TO_ONE         = 1;

    /** A transliteration module can have attribute NUMERIC if it
        transliterates numbers in different languages like Chinese
        numbers to Arabic numbers and vice versa. This mapping need not
        be one to one, it should be primarily used by number formatting
        and parsing methods. */
    const short NUMERIC            = 2;

    /** A transliteration module is ONE_TO_ONE_NUMERIC if it offers
        both one to one mapping and handles number also. */
    const short ONE_TO_ONE_NUMERIC = 3;

    /** With a transliteration IGNORE case, the regular
        expression A-Z can be transformed to a-z, for example. */
    const short IGNORE             = 4;

    /** If the transliteration is cascaded (uses more than one
        algorithm). */
    const short CASCADE            = 8;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
