/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_i18n_XTextConversion_idl__
#define __com_sun_star_i18n_XTextConversion_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/Locale.idl>
#include <com/sun/star/i18n/TextConversionResult.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/lang/NoSupportException.idl>



module com {  module sun {  module star {  module i18n {


/** Method to convert text from one type to another

     @since OOo 1.1.2
*/
published interface XTextConversion : ::com::sun::star::uno::XInterface
{
    /** Method to search dictionaries for the conversion candidates.

        @param aText
            Text string to be converted.
        @param nStartPos
            The start position in aText for the conversion
        @param nLength
            The length of the portion in aText for the conversion
        @param aLocal
            Locale the conversion is referring to.
        @param nTextConversionType
            One of <type>TextConversionType</type> values.
        @param nTextConversionOptions
            Combination of <type>TextConversionOption</type> values.
        @returns
            <type>TextConversionResult</type>

        @throws NoSupportException
            when <var>nConversionDictionaryType</var> is not known by the implementation,
            or when the locale is not supported.
    */
    TextConversionResult getConversions(
            [in] string aText,
            [in] long nStartPos,
            [in] long nLength,
            [in] ::com::sun::star::lang::Locale aLocale,
            [in] short nTextConversionType,
            [in] long nTextConversionOptions )
        raises( com::sun::star::lang::IllegalArgumentException,
                com::sun::star::lang::NoSupportException );

    /** Method to search dictionaries for the conversion candidate, if there
        are multiple candidates, it will return first one. This is for the
        conversion in non-interactive mode.

        @param aText
            Text string to be converted.
        @param nStartPos
            The start position in aText for the conversion
        @param nLength
            The length of the portion in aText for the conversion
        @param aLocal
            Locale the conversion is referring to.
        @param nTextConversionType
            One of <type>TextConversionType</type> values.
        @param nTextConversionOptions
            Combination of <type>TextConversionOption</type> values.
        @returns
            Converted text

        @throws NoSupportException
            when <var>nConversionDictionaryType</var> is not known by the implementation,
            or when the locale is not supported.
    */
    string getConversion(
            [in] string aText,
            [in] long nStartPos,
            [in] long nLength,
            [in] ::com::sun::star::lang::Locale aLocale,
            [in] short nTextConversionType,
            [in] long nTextConversionOptions )
        raises( com::sun::star::lang::IllegalArgumentException,
                com::sun::star::lang::NoSupportException );

    /** Method to query if the conversion type should be interactive or
        non-interactive mode.

        @param aLocal
            Locale the conversion is referring to.
        @param nTextConversionType
            One of <type>TextConversionType</type> values.
        @param nTextConversionOptions
            Combination of <type>TextConversionOption</type> values.
        @returns
            <TRUE/> if the entry is a valid entry for the dictionary
            <FALSE/> otherwise.

        @throws NoSupportException
            when <var>nConversionDictionaryType</var> is not known by the implementation,
            or when the locale is not supported.
    */
    boolean interactiveConversion(
            [in] ::com::sun::star::lang::Locale aLocale,
            [in] short nTextConversionType,
            [in] long nTextConversionOptions )
        raises( com::sun::star::lang::IllegalArgumentException,
                com::sun::star::lang::NoSupportException );
};



}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
