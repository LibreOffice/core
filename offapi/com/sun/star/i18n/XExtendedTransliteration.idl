/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_i18n_XExtendedTransliteration_idl__
#define __com_sun_star_i18n_XExtendedTransliteration_idl__

#include <com/sun/star/i18n/XTransliteration.idl>
#include <com/sun/star/i18n/MultipleCharsOutputException.idl>


module com { module sun { module star { module i18n {



/**
    This interface provides character conversions like case folding or
    Hiragana to Katakana.

    <p> It is derived from
    ::com::sun::star::i18n::XTransliteration and provides
    additional functionality for character to character and
    string to string without offset parameter transliteration. These
    should be used for performance reason if their full-blown
    counterparts aren't needed.  </p>

     @since OOo 1.1.2
 */
published interface XExtendedTransliteration : ::com::sun::star::i18n::XTransliteration
{
    /** Transliterate a substring. The functionality is the same as
        ::com::sun::star::i18n::XTransliteration::transliterate()
        but omits the offset parameter to improve performance.

        @param aStr
            The input string.

        @param nStartPos
            Start position within aStr from where transliteration starts.

        @param nCount
            Number of code points to be transliterated.

     */
    string  transliterateString2String( [in] string aStr,
            [in] long nStartPos, [in] long nCount );


    /** Transliterate a character to a string.

        @param cChar
            The input character.
     */
    string  transliterateChar2String( [in] char cChar );

    /** Transliterate a character to a character.

        <p> If the output contains multiple characters, for example when
        transliterating German sharp "s" (the one that looks like a
        Greek Beta) to upper case "SS", MultipleCharsOutputException
        will be thrown, the caller must catch the exception and then
        call
        XTransliteration::transliterateChar2String() to
        obtain the correct result. </p>

        @param cChar
            The input character.
     */
    char    transliterateChar2Char( [in] char cChar )
                raises( MultipleCharsOutputException );

};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
