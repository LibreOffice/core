/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_form_runtime_XFilterControllerListener_idl__
#define __com_sun_star_form_runtime_XFilterControllerListener_idl__

#include <com/sun/star/lang/XEventListener.idl>
#include <com/sun/star/form/runtime/FilterEvent.idl>


module com { module sun { module star { module form { module runtime {


/** is implemented by components listening for events fired by an XFilterController.

    @since OOo 3.3
*/
interface XFilterControllerListener : ::com::sun::star::lang::XEventListener
{
    /** is fired when a single <em>predicate expression</em> of the filter represented by the filter
        controller changed.

        <p>FilterEvent::DisjunctiveTerm is the index of the <em>disjunctive term</em> in which the
        expression changed. This usually equals XFilterController::ActiveTerm.</p>

        <p>FilterEvent::FilterComponent denotes the index of the filter component whose
        <em>predicate expression</em> changed.</p>

        <p>FilterEvent::PredicateExpression is the new <em>predicate expressions</em>.</p>
    */
    void    predicateExpressionChanged( [in] FilterEvent Event );

    /** is fired when a <em>disjunctive term</em> was removed from the filter of the filter controller.

        <p>FilterEvent::DisjunctiveTerm is the index of the <em>disjunctive term</em> which was
        removed.</p>

        <p>FilterEvent::FilterComponent and FilterEvent::PredicateExpression are not
        used for this event type.</p>
    */
    void    disjunctiveTermRemoved( [in] FilterEvent Event );

    /** is fired when a <em>disjunctive term</em> was added to the filter of the filter controller.

        <p>FilterEvent::DisjunctiveTerm is the index of the <em>disjunctive term</em> which was
        added.</p>

        <p>FilterEvent::FilterComponent and FilterEvent::PredicateExpression are not
        used for this event type.</p>
    */
    void    disjunctiveTermAdded( [in] FilterEvent Event );
};


}; }; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
