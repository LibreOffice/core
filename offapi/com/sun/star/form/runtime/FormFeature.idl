/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_form_runtime_FormFeature_idl__
#define __com_sun_star_form_runtime_FormFeature_idl__


module com { module sun { module star { module form { module runtime {


/** specifies the operations on a user interface form, as supported by the
    XFormOperations interface.

    @since OOo 2.2
*/
constants FormFeature
{
    /** moves the form to a record given by absolute position.

        <p>This operation cannot be executed without arguments. When executing it (i.e.
        when calling com::sun::star::form::runtime::XFormOperations::executeWithArguments()),
        you need to specify a parameter named <em>Position</em> of type <code>long</code>, which
        denotes the position to move the form to.</p>
    */
    const short MoveAbsolute        = 1;

    /** determines the number of total records in the form,
        including the potentially active insertion row.

        <p>This is not strictly an operation you can do on a form, but rather a
        state you can retrieve (and display to the user) using the XFormOperations's
        respective methods.</p>

        <p>The state obtained here is a string, not a number. This is because in an UI
        form, the fact that the current record count is not yet known (since not all
        records have been visited, yet) is indicated by an asterisk (<code>*</code>) besides
        the record count.</p>
    */
    const short TotalRecords        = 2;

    /// moves the form to the first record
    const short MoveToFirst         = 3;

    /// moves the form to the record before the current record, if there is any
    const short MoveToPrevious      = 4;

    /// moves the form to the record after the current record, if there is any
    const short MoveToNext          = 5;

    /// moves the form to the last record
    const short MoveToLast          = 6;

    /// moves the form to the insertion row, if privileges allow
    const short MoveToInsertRow     = 7;

    /** saves all changes in the form's current record, including changes in the current
        control which had not yet been committed to the form
    */
    const short SaveRecordChanges   = 8;

    /** reverts all changes in the form's current record, including changes in the current
        control which had not yet been committed to the form
    */
    const short UndoRecordChanges   = 9;

    /** deletes the current record, while honoring any registered
        com::sun::star::form::XConfirmDeleteListeners
    */
    const short DeleteRecord        = 10;

    /// reloads the form content
    const short ReloadForm          = 11;

    /// sorts the form ascending by the field which the active form control is bound to.
    const short SortAscending       = 12;

    /// sorts the form descending by the field which the active form control is bound to.
    const short SortDescending      = 13;

    /// opens a dialog which allows the user to interactively specify a form sorting order
    const short InteractiveSort     = 14;

    /** adds a filter to the form, which is defined by the active form control and its
        current value

        <p>For instance, if the currently active form control is bound to a table field
        named <code>Price</code>, and currently has a value of <code>100</code>, then invoking
        the <code>AutoFilter</code> operation will put an additional filter <code>Price = 100</code>
        on the form.</p>
    */
    const short AutoFilter          = 15;

    /// opens a dialog which allows the user to interactively specify a form filter
    const short InteractiveFilter   = 16;

    /** toggles the com::sun::star::sdb::RowSet::ApplyFilter property
        of a the form.
    */
    const short ToggleApplyFilter   = 17;

    /** removes all filter and sort criteria put on the form.

        <p>Note that this does not apply to criteria which are part of the form's
        data source. That is, if you bind the form to the SQL command <code>SELECT * FROM
        Articles WHERE Price &gt; 100</code>, then the <code>Price &gt; 100</code> filter
        will not be removed.</p>

        <p>Effectively, this operation resets the com::sun::star::sdb::RowSet::Filter
        and com::sun::star::sdb::RowSet::Order properties of the form.</p>
    */
    const short RemoveFilterAndSort = 18;

    /** refreshes the current control

        <p>Basically, this means calling XRefreshable::refresh on the current control, if it supports
        this interface.</p>

        @since OOo 3.1
    */
    const short RefreshCurrentControl = 19;
};


}; }; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
