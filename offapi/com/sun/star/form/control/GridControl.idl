/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_form_control_GridControl_idl__
#define __com_sun_star_form_control_GridControl_idl__

#include <com/sun/star/awt/UnoControl.idl>
#include <com/sun/star/form/XGrid.idl>
#include <com/sun/star/form/XBoundComponent.idl>
#include <com/sun/star/form/XGridFieldDataSupplier.idl>
#include <com/sun/star/util/XModifyBroadcaster.idl>
#include <com/sun/star/util/XModeSelector.idl>
#include <com/sun/star/container/XIndexAccess.idl>
#include <com/sun/star/container/XEnumerationAccess.idl>
#include <com/sun/star/container/XContainer.idl>
#include <com/sun/star/frame/XDispatchProviderInterception.idl>
#include <com/sun/star/view/XSelectionSupplier.idl>


module com {  module sun {  module star {  module form {

published interface XGridControl;

module control {


/** describes a table-like control for displaying data.

    <p>The model of the control has to support the com::sun::star::form::component::GridControl
    service.</p>

    @see com::sun::star::awt::UnoControl
    @see com::sun::star::awt::UnoControlModel
*/
published service GridControl
{
    service com::sun::star::awt::UnoControl;

    /** allows committing the content of the active cell of the control.
    */
    interface com::sun::star::form::XBoundComponent;

    /** allows access to the active cell within the grid.

        <p>Only the column position can be modified using this interface, as the row position within
        a table control bound to a data source is given implicitly (by the cursor position of the data source).</p>
    */
    interface com::sun::star::form::XGrid;

    [optional] interface com::sun::star::form::XGridControl;

    /** used to broadcast modifications made by the user (within the active cell)
    */
    interface com::sun::star::util::XModifyBroadcaster;

    /** allows access to the field data of the grid's current row in different formats
    */
    [optional] interface com::sun::star::form::XGridFieldDataSupplier;

    /** allows access to objects wrapping a single column
    */
    interface com::sun::star::container::XIndexAccess;

    /** allows creation of an enumeration for the column objects
    */
    interface com::sun::star::container::XEnumerationAccess;

    /** is used to switch the operating modes of the control.

        <p>Besides the normal operation mode (which is used to display the database form's data) the control may
        for instance support a filter mode.</p>
    */
    [optional] interface com::sun::star::util::XModeSelector;

    /** used to control the selection of rows in the grid control.

        <p>The selection used with the methods com::sun::star::view::XSelectionSupplier::getSelection()
        and com::sun::star::view::XSelectionSupplier::select() is a sequence of Any's.<br/>
        Here the elements of the Sequence are the bookmarks (in the com::sun::star::sdb::RowSet)
        of the (to-be-) selected rows.</p>
    */
    [optional] interface com::sun::star::view::XSelectionSupplier;

    /** allows external components to register dispatchers for some common form actions.

        <p>A grid control can contain own UI elements for traveling within the database form it belongs to (This
        concept seems to make sense, as a grid control - in opposite to other data aware controls - displays
        not only one record at a time, but a larger number of records of the database form.)<br/>
        With the help of this interface, external components which wish to handle such travelings themselves can
        register interceptors for the actions in question.</p>

        <p>Usual URLs to use include
            <dl>
                <dt>.uno:FormSlots/moveToFirst</dt><dd> move the cursor to the first record</dd>
                <dt>.uno:FormSlots/moveToPrev</dt><dd> move the cursor to the previous record</dd>
                <dt>.uno:FormSlots/moveToNext</dt><dd> move the cursor to the next record</dd>
                <dt>.uno:FormSlots/moveToLast</dt><dd> move the cursor to the last record</dd>
                <dt>.uno:FormSlots/moveToNew</dt><dd> move the cursor to the (one and only) <em>new</em> record</dd>
                <dt>.uno:FormSlots/undoRecord</dt><dd> undo the changes done so far in the current record</dd>
            </dl>
        </p>

        <p>A concrete implementation of this service may offer more or less URLs, but if it offers some of the URLs
        above, it must stick to the meanings defined above.</p>
    */
    [optional] interface com::sun::star::frame::XDispatchProviderInterception;
};


}; }; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
