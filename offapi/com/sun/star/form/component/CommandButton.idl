/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_form_component_CommandButton_idl__
#define __com_sun_star_form_component_CommandButton_idl__

#include <com/sun/star/form/FormControlModel.idl>
#include <com/sun/star/awt/UnoControlButtonModel.idl>
#include <com/sun/star/form/XImageProducerSupplier.idl>
#include <com/sun/star/form/XApproveActionBroadcaster.idl>
#include <com/sun/star/form/FormButtonType.idl>
#include <com/sun/star/form/XReset.idl>



 module com {  module sun {  module star {  module form {  module component {


/** specifies the control model for a clickable button which is part of a form
    component hierarchy.

    @see ImageButton
 */
published service CommandButton
{
    service com::sun::star::awt::UnoControlButtonModel;

    service com::sun::star::form::FormControlModel;

    /** supplies the image producer when the button is to display an image.

        <p>If the com::sun::star::awt::UnoControlButtonModel::ImageURL points to the location of an
        image to be displayed on the button, this interface can be used to retrieve an image
        producer, which itself will supply the image.</p>

        <p>Usually, a control belonging to the model will use this interface to obtain the
        image to be painted</p>
     */
    interface com::sun::star::form::XImageProducerSupplier;


    /** describes the action to be executed by the button when pressed.
     */
    [property] com::sun::star::form::FormButtonType ButtonType;

    /** describes the frame, where to open the document specified by the TargetURL.

        <p>This property is evaluated if the button is of type URL.</p>

        <p>As always, there is a number of target names which have a special meaning, and force
        a special com::sun::star::frame::Frame to be used.</p>
     */
    [property] string TargetFrame;

    /** specifies the URL, which should be opened if the button was clicked.

        <p>This property is evaluated if the button is of type URL.</p>

        @see com::sun::star::form::FormButtonType
     */
    [property] string TargetURL;

    /** specifies the default toggle state for the button, used when it is reset.

        <p>This property is meaningful only when com::sun::star::awt::UnoControlButtonModel::Toggle
        is `TRUE`. In this case, the <code>DefaultState</code> controls to which <code>State</code> the button will
        be reset.</p>

        <p>For a given implementation of the interface, if this (optional) property is present, then also the optional
        interface com::sun::star::form::XReset must be present.</p>
    */
    [optional, property] boolean DefaultState;

    /** allows resetting the button

        <p>This property is meaningful only when com::sun::star::awt::UnoControlButtonModel::Toggle
        is `TRUE`. In this case, the <code>DefaultState</code> controls to which <code>State</code> the button will
        be reset, when com::sun::star::form::XReset::reset() is invoked.</p>

        <p>For a given implementation of the interface, if this (optional) interface is present, then also the optional
        property #DefaultState must be present.</p>
    */
    [optional] interface ::com::sun::star::form::XReset;
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
