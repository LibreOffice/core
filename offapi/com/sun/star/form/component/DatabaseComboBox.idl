/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_form_component_DatabaseComboBox_idl__
#define __com_sun_star_form_component_DatabaseComboBox_idl__

#include <com/sun/star/form/component/ComboBox.idl>

#include <com/sun/star/form/DataAwareControlModel.idl>

#include <com/sun/star/form/ListSourceType.idl>



 module com {  module sun {  module star {  module form {  module component {


/** This service specifies a combo box which is data-aware, and can be bound to a database field.

    <p>Like most other data aware controls, such a combo box will display the actual content
    of the field it is bound to. In addition, as a combo box contains a list where the user
    can choose items to fill into the control, this list can be filled with different data from
    a database, too.</p>
 */
published service DatabaseComboBox
{
    service com::sun::star::form::component::ComboBox;

    service com::sun::star::form::DataAwareControlModel;


    /** determines if an empty text should be treated as a <NULL/> value.

        <p>When the user enters text into a combo box, and after this, the control
        content is to be committed into the database field the control is bound to,
        a decision must be made how to deal with empty strings.<br/>
        This is controlled by <member>ConvertEmptyToNull</member>.</p>

        <p>If the property is set to <TRUE/>, and an empty text is to be commited, this is
        converted into <NULL/>, else it is written as empty string.</p>
     */
    [property] boolean ConvertEmptyToNull;

    /** describes the source of items in the combo box's list.

        <p>The concrete meaning of this property depends on the value of <member>ListSourceType</member></p>
     */
    [property] string ListSource;

    /** specifies the kind of list source.

        <p>Note: A value of <member scope="com::sun::star::form">ListSourceType::VALUELIST</member>
        is not valid for a combo box. It won't be rejected when setting it, but controls will usually ignore it
        and leave the list empty.</p>
     */
    [property] com::sun::star::form::ListSourceType ListSourceType;
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
