/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_form_validation_XValidatableFormComponent_idl__
#define __com_sun_star_form_validation_XValidatableFormComponent_idl__

#include <com/sun/star/form/validation/XValidatable.idl>
#include <com/sun/star/lang/NoSupportException.idl>
#include <com/sun/star/lang/NullPointerException.idl>


module com {  module sun {  module star {  module form { module validation {

interface XFormComponentValidityListener;


/** is a convenience interface for accessing several aspects of a form component
    which supports validation.

    <p>A validatable form component has two aspects which other parties might
    be interested in:
    <ul>
        <li>The pure validity flag: Whatever the user enters in the component, this is
        either valid (relative to the active validator), or invalid.</li>
        <li>The current value: Even if the validity flag does not change with the user
        input (e.g. because the user replaces one invalid value with another invalid
        value), observers might be interested in the current value, for example to
        include it in a feedback message to the user.</li>
    </ul>
    </p>

    <p>An <type>XValidatableFormComponent</type> allows to easily access both of these aspects.</p>

    <p>Note that all of the information provided at this interface can also obtained by other means,
    but much more inconveniently.</p>

    @see XValidatable
    @see XValidator
*/
interface XValidatableFormComponent : XValidatable
{
    /** determines whether the current value of the component passed the validity test
        at the validator.

        <p>Calling this is equal to calling <member>XValidator::isValid</member> with
        the current value (see <member>getCurrentValue</member>) of the component, where
        the validator is obtained via <member>XValidatable::getValidator</member>.</p>

        <p>If no validator has been set (<member>XValidatable::setValidator</member>), this method
        returns true.</p>
    */
    boolean isValid();

    /** retrieves the current value of the component.

        <p>The type of the current value, as well as it's semantics, depend on the service
        implementing this interface.</p>

        <p>Again, this is a convenience method. For example, for a <type scope="com::sun::star::form::component">FormattedField</type>,
        calling this method is equivalent to retrieving the
        <member scope="com::sun::star::awt">UnoControlFormattedFieldModel::EffectiveValue</member>.</p>

        <p>If no validator has been set (<member>XValidatable::setValidator</member>), the value returned
        here is defined by the service implementing this interface.</p>
    */
    any getCurrentValue();

    /** registers the given listener.

        <p><type>XFormComponentValidityListener</type>s are called whenever <em>any</em> of the aspects
        of the validatable form component (the validity flag, or the value) changed.</p>

        @throws <type scope="com::sun::star::lang">NullPointerException</type>
            if the given listener is <NULL/>
    */
    void    addFormComponentValidityListener( [in] XFormComponentValidityListener Listener )
                raises( com::sun::star::lang::NullPointerException );

    /** registers the given listener.

        @throws <type scope="com::sun::star::lang">NullPointerException</type>
            if the given listener is <NULL/>
    */
    void    removeFormComponentValidityListener( [in] XFormComponentValidityListener Listener )
                raises( com::sun::star::lang::NullPointerException );
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
