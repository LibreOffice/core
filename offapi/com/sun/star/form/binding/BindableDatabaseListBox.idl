/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_form_binding_BindableDatabaseListBox_idl__
#define __com_sun_star_form_binding_BindableDatabaseListBox_idl__

#include <com/sun/star/form/component/DatabaseListBox.idl>
#include <com/sun/star/form/binding/BindableDataAwareControlModel.idl>


module com {  module sun {  module star {  module form {  module binding {

/** This service specifies a list box model which is data-aware and thus can be bound to a
    database field, and additionally supports binding to arbitrary external values.

    <p>There are six possible ways that a BindableDatabaseListBox exchanges
    values with an external binding. If a new binding
    is set at a BindableDatabaseListBox, the types from the following list are
    tried in descending order: The first type supported by the binding is used for data exchange.
    <ol>
        <li><em>sequences of `any`s</em>:
            The elements in the sequence will represent
            the values the selected entries of the list box
            (taken from ValueList or read from BoundColumn).
            In other words, the SelectedValues property.</li>
        <li><em>`any` value</em>:
            The value will represent the value of the selected entry
            (taken from ValueList or read from BoundColumn).
            If more than one entry is selected,
            `NULL` will be transferred.
            In other words, the SelectedValue property.</li>
        <li><em>sequences of long integers</em>: When used, the integers in the sequence will represent
            the indexes of the selected entries of the list box.</li>
        <li><em>long integer value</em>: When used, the value will represent the index of the selected entry.
            If no entry is selected, -1 will be transferred. If more than one entry is selected, `NULL`
            will be transferred.</li>
        <li><em>sequences of strings</em>: When used, the strings in the sequence present the texts
            of the selected entries of the list box.</li>
        <li><em>string values</em>: When used. the value will represent the text of the selected entry.
            If no entry is selected, an empty string will be transferred. If more than one entry is selected,
            `NULL` will be transferred.</li>
    </ol></p>

    @see com::sun::star::form::binding::XValueBinding::supportsType
 */
service BindableDatabaseListBox
{
    service com::sun::star::form::component::DatabaseListBox;

    /** specifies the interaction between an internal binding to a database column,
        and an external value binding.</p>
    */
    service com::sun::star::form::binding::BindableDataAwareControlModel;

};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
