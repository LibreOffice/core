/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_form_binding_XValueBinding_idl__
#define __com_sun_star_form_binding_XValueBinding_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/NoSupportException.idl>
#include <com/sun/star/form/binding/IncompatibleTypesException.idl>
#include <com/sun/star/form/binding/InvalidBindingStateException.idl>


module com {  module sun {  module star {  module form { module binding {


/** specifies a binding to a value which can be read and written.
*/
interface XValueBinding : com::sun::star::uno::XInterface
{
    /** determines the types which are supported by this binding for value exchange

        @see supportsType
    */
    sequence< type >
            getSupportedValueTypes( );

    /** determines whether a given type is supported by this binding for value exchange

        <p>Calling this method is equal to calling getSupportedValueTypes(),
        and looking up the given type in the resulting type sequence.</p>

        @see getSupportedValueTypes
    */
    boolean supportsType( [in] type aType );

    /** retrieves the current value

        @throws IncompatibleTypesException
            if the requested value type is not supported by the binding
        @see getSupportedValueTypes
        @see supportsType
    */
    any     getValue( [in] type aType )
                raises( IncompatibleTypesException );

    /** sets the current value

        @throws IncompatibleTypesException
            if the given value type is not supported by the binding
        @throws InvalidBindingStateException
            if the value currently cannot be changed, since the binding is not
            fully operational. Possible reasons for this include the binding being
            readonly, or the target of the binding not being present.
        @throws com::sun::star::lang::NoSupportException
            if the binding in general does not support write access to its binding

        @see getSupportedValueTypes
        @see supportsType
        @see ValueBinding
    */
    void    setValue( [in] any aValue )
                raises( IncompatibleTypesException, InvalidBindingStateException, com::sun::star::lang::NoSupportException );
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
