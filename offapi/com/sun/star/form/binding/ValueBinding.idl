/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_form_binding_ValueBinding_idl__
#define __com_sun_star_form_binding_ValueBinding_idl__

#include <com/sun/star/form/binding/XValueBinding.idl>
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/util/XModifyBroadcaster.idl>


module com {  module sun {  module star {  module form { module binding {


/** defines a component which allows access to a single value

    <p>Read/Write access to the value represented by this component is supported,
    as well as (optionally) active broadcasting of value changes</p>
*/
service ValueBinding
{
    /** determines whether the value is currently readonly

        <p>For instance, you could imagine a <type>ValueBinding</type> which
        represents a cell in a spreadsheet document, and whose value is readonly
        as long as the spreadsheet is locked.</p>

        <p>As long as this property is <TRUE/>, the value binding should throw
        a <type>InvalidBindingStateException</type> when its
        <member>XValueBinding::setValue</member> method is invoked.</p>
    */
    [optional, property, bound, readonly]  boolean  ReadOnly;

    /** determines the relevance of the value represented by the binding

        <p>In a more complex scenario, where different form controls are bound to different
        values, which all are part of a larger data structure, some of the items in this
        data structure may not be relevant currently. This is indicated by the
        <member>Relevant</member> property being <FALSE/>.</p>

        <p><type>XBindableValue</type>s which are bound to this binding may or may not
        react in certain ways on the (ir)relevance of their bound value.</p>

        <p>One possible reaction could be that user interface elements which are associated
        with the <type>XBindableValue</type> are disabled as long as <member>Relevant</member>
        is <FALSE/>.</p>
    */
    [optional, property, bound, readonly]  boolean  Relevant;

    /** allows access to the properties of the binding
    */
    [optional] interface   com::sun::star::beans::XPropertySet;

    /** allows read and write access to the value represented by this binding
    */
    interface XValueBinding;

    /** allows other components to be notified when the value represented
        by the <type>ValueBinding</type> instance changes.

        <p>This interface is optional, since a binding may not support
        actively notifying changes in it's value. Note, however, that in case
        this interface is not supported, the bound component cannot react
        on value changes, and will thus override any values which are
        set by an instance other than itself.</p>
    */
    [optional] interface com::sun::star::util::XModifyBroadcaster;

    /** allows life time control for the component

        <p>An <type>ValueBinding</type> may be known to one ore more components
        supporting the <type>XBindableValue</type> interface, which all work with
        this binding. However, they will not <em>own</em> the <type>ValueBinding</type>.
        The ownership is with another instance, which may also decide to obsolete
        the <type>ValueBinding</type> for whatever reasons (e.g. because the data model
        which the binding reflected died). For this reason, a <type>ValueBinding</type>
        must offer a possibility to be obsoleted by it's owner, and to notify this
        obsoleteness to other interested parties, such as <type>XBindableValue</type>s.</p>
    */
    interface com::sun::star::lang::XComponent;
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
