/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_form_binding_ValueBinding_idl__
#define __com_sun_star_form_binding_ValueBinding_idl__

#include <com/sun/star/form/binding/XValueBinding.idl>
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/util/XModifyBroadcaster.idl>


module com {  module sun {  module star {  module form { module binding {


/** defines a component which allows access to a single value

    <p>Read/Write access to the value represented by this component is supported,
    as well as (optionally) active broadcasting of value changes</p>
*/
service ValueBinding
{
    /** determines whether the value is currently readonly

        <p>For instance, you could imagine a ValueBinding which
        represents a cell in a spreadsheet document, and whose value is readonly
        as long as the spreadsheet is locked.</p>

        <p>As long as this property is `TRUE`, the value binding should throw
        a InvalidBindingStateException when its
        XValueBinding::setValue() method is invoked.</p>
    */
    [optional, property, bound, readonly]  boolean  ReadOnly;

    /** determines the relevance of the value represented by the binding

        <p>In a more complex scenario, where different form controls are bound to different
        values, which all are part of a larger data structure, some of the items in this
        data structure may not be relevant currently. This is indicated by the
        #Relevant property being `FALSE`.</p>

        <p>XBindableValues which are bound to this binding may or may not
        react in certain ways on the (ir)relevance of their bound value.</p>

        <p>One possible reaction could be that user interface elements which are associated
        with the XBindableValue are disabled as long as #Relevant
        is `FALSE`.</p>
    */
    [optional, property, bound, readonly]  boolean  Relevant;

    /** allows access to the properties of the binding
    */
    [optional] interface   com::sun::star::beans::XPropertySet;

    /** allows read and write access to the value represented by this binding
    */
    interface XValueBinding;

    /** allows other components to be notified when the value represented
        by the ValueBinding instance changes.

        <p>This interface is optional, since a binding may not support
        actively notifying changes in its value. Note, however, that in case
        this interface is not supported, the bound component cannot react
        on value changes, and will thus override any values which are
        set by an instance other than itself.</p>
    */
    [optional] interface com::sun::star::util::XModifyBroadcaster;

    /** allows life time control for the component

        <p>An ValueBinding may be known to one ore more components
        supporting the XBindableValue interface, which all work with
        this binding. However, they will not <em>own</em> the ValueBinding.
        The ownership is with another instance, which may also decide to obsolete
        the ValueBinding for whatever reasons (e.g. because the data model
        which the binding reflected died). For this reason, a ValueBinding
        must offer a possibility to be obsoleted by its owner, and to notify this
        obsoleteness to other interested parties, such as XBindableValues.</p>
    */
    interface com::sun::star::lang::XComponent;
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
