/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_form_binding_XListEntrySource_idl__
#define __com_sun_star_form_binding_XListEntrySource_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/NullPointerException.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>


module com {  module sun {  module star {  module form { module binding {

interface XListEntryListener;


/** specifies a source of string list entries

    <p>The interface supports foreign components which actively retrieve list entries,
    as well as components which want to passively being notified of changes in the list.</p>

    @see XListEntrySink
*/
interface XListEntrySource : com::sun::star::uno::XInterface
{
    /** retrieves the number of entries in the list
    */
    long    getListEntryCount( );

    /** provides access to a single list entry

        @throws <type scope="com::sun::star::lang">IndexOutOfBoundsException</type>
            if the given position does not denote a valid index in the list

        @see getListEntryCount
    */
    string  getListEntry( [in] long Position )
                raises( com::sun::star::lang::IndexOutOfBoundsException );

    /** provides access to the entirety of all list entries
    */
    sequence< string >
            getAllListEntries( );

    /** adds a listener which will be notified about changes in the list
        reflected by the component.

        @throws <type scope="com::sun::star::lang">NullPointerException</type>
            if the given listener is <NULL/>
    */
    void    addListEntryListener( [in] XListEntryListener Listener )
                raises( com::sun::star::lang::NullPointerException );

    /** revokes the given listener from the list of components which will
        be notified about changes in the entry list.

        @throws <type scope="com::sun::star::lang">NullPointerException</type>
            if the given listener is <NULL/>
    */
    void    removeListEntryListener( [in] XListEntryListener Listener )
                raises( com::sun::star::lang::NullPointerException );
};


}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
