/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_form_FormComponents_idl__
#define __com_sun_star_form_FormComponents_idl__

#include <com/sun/star/container/XNameContainer.idl>
#include <com/sun/star/container/XIndexContainer.idl>
#include <com/sun/star/container/XEnumerationAccess.idl>
#include <com/sun/star/container/XContainer.idl>
#include <com/sun/star/script/XEventAttacherManager.idl>


 module com {  module sun {  module star {  module form {


/** specifies the capabilities of a collection of <type>FormComponent</type>s.

    <p>The collection must provide the possibility of adding and removing
    components by name and by index. The name of a component is not
    necessarily unique, so the collection must be able to handle duplicate
    entry names.</p>

    @see FormComponent
 */
published service FormComponents
{
    /** allows to register listeners to be notified of changes in the container.
    */
    interface com::sun::star::container::XContainer;

    /** allows to add/remove elements by name.
    */
    interface com::sun::star::container::XNameContainer;

    /** gives access to the elements by index.
    */
    interface com::sun::star::container::XIndexContainer;

    /** creates an enumeration of the elements.
    */
    interface com::sun::star::container::XEnumerationAccess;

    /** This interface has to be implemented to supply the scripting environment
        for the contained components.

        <p>The interface allows managing of scripts associated with dependent components, accessed by index.
        However, as a client of the <type>FormComponents</type> service, there's no need to bother with
        the container aspect of the <type scope="com::sun::star::script">XEventAttacherManager</type>
        directly. A <type>FormComponents</type> container will automatically synchronize the elements
        you put into it with the scripting information obtained at the
        <type scope="com::sun::star::script">XEventAttacherManager</type> interface.</p>

        <p>For instance, at any time you can obtain the events associated with the <code>n</code><super>th</super>
        element in the form components by calling
        <member scope="com::sun::star::script">XEventAttacherManager::getScriptEvents</member>
        with parameter <code>n</code>. In particular, this invariant is always met, even after you
        inserted/removed elements into/from the container.</p>
     */
    interface com::sun::star::script::XEventAttacherManager;
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
