/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_form_XLoadListener_idl__
#define __com_sun_star_form_XLoadListener_idl__

#include <com/sun/star/lang/XEventListener.idl>

#include <com/sun/star/lang/EventObject.idl>



 module com {  module sun {  module star {  module form {


/** receives load-related events from a loadable object.

    <p>The interface is typically implemented by data-bound components,
    which want to listen to the data source that contains their database
    form.</p>

    @see com::sun::star::form::XLoadable
    @see DataAwareControlModel
 */
published interface XLoadListener: com::sun::star::lang::XEventListener
{

    /** is invoked when the object has successfully connected to a datasource.

        @param aEvent
            the event happened.
     */
    [oneway] void loaded( [in] com::sun::star::lang::EventObject aEvent );


    /** is invoked when the object is about to be unloaded.
        <p>Components may use this to stop any other event processing related to
        the event source before the object is unloaded.</p>

        @param aEvent
            the event happened.
     */
    [oneway] void unloading( [in] com::sun::star::lang::EventObject aEvent );


    /** is invoked after the object has disconnected from a datasource.

        @param aEvent
            the event happened.
     */
    [oneway] void unloaded( [in] com::sun::star::lang::EventObject aEvent );


    /** is invoked when the object is about to be reloaded.

        <p>Components may use this to stop any other event processing related
        to the event source until they get the reloaded event.</p>

        @param aEvent
            the event happened.
     */
    [oneway] void reloading( [in] com::sun::star::lang::EventObject aEvent );


    /** is invoked when the object has been reloaded.

        @param aEvent
            the event happened.
     */
    [oneway] void reloaded( [in] com::sun::star::lang::EventObject aEvent );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
