/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_form_XLoadListener_idl__
#define __com_sun_star_form_XLoadListener_idl__

#include <com/sun/star/lang/XEventListener.idl>

#include <com/sun/star/lang/EventObject.idl>



 module com {  module sun {  module star {  module form {


/** receives load-related events from a loadable object.

    <p>The interface is typically implemented by data-bound components,
    which want to listen to the data source that contains their database
    form.</p>

    @see com::sun::star::form::XLoadable
    @see DataAwareControlModel
 */
published interface XLoadListener: com::sun::star::lang::XEventListener
{

    /** is invoked when the object has successfully connected to a datasource.

        @param aEvent
            the event happened.
     */
    void loaded( [in] com::sun::star::lang::EventObject aEvent );


    /** is invoked when the object is about to be unloaded.
        <p>Components may use this to stop any other event processing related to
        the event source before the object is unloaded.</p>

        @param aEvent
            the event happened.
     */
    void unloading( [in] com::sun::star::lang::EventObject aEvent );


    /** is invoked after the object has disconnected from a datasource.

        @param aEvent
            the event happened.
     */
    void unloaded( [in] com::sun::star::lang::EventObject aEvent );


    /** is invoked when the object is about to be reloaded.

        <p>Components may use this to stop any other event processing related
        to the event source until they get the reloaded event.</p>

        @param aEvent
            the event happened.
     */
    void reloading( [in] com::sun::star::lang::EventObject aEvent );


    /** is invoked when the object has been reloaded.

        @param aEvent
            the event happened.
     */
    void reloaded( [in] com::sun::star::lang::EventObject aEvent );
};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
