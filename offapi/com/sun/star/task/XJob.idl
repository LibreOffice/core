/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_task_XJob_idl__
#define __com_sun_star_task_XJob_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/NamedValue.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com {  module sun {  module star {  module task {

/** specifies a job which is to be executed synchronously

    <p>
    Instead of XAsyncJob the implementation of this interface
    will be executed synchronously every time. That means: they can be sure that the
    current stack context will be blocked till this job finish it's work.
    </p>

    @see XAsyncJob
*/
published interface XJob : com::sun::star::uno::XInterface
{
    /** executes the job synchronously

        @param Arguments
            are arguments for executing the job. Their semantics is completely implementation dependent. Usually,
            a concrete implementation of a job specifies in its service descriptions which parameters are allowed
            (or expected). This values are persistent by the configuration of theJobExecutor
            which use this synchronous job. It's possible to write it back by use special protocol
            in return value.

        @return
            the result of the job. The concrete semantics is service-dependent.
            But it should be possible to
            <ul>
                <li>deregister the job</li>
                <li>let him registered although execution was successfully(!)</li>
                <li>make some job specific data persistent inside the job configuration which
                    is provided by the executor.</li>
            </ul>

        @throws com::sun::star::lang::IllegalArgumentException
            if some of given arguments doesn't fill out the service specification or
            was corrupt so the service couldn't work correctly

        @throws com::sun::star::uno::Exception
            to notify the executor about failed operation; otherwise the return value
            indicates a successful finishing.
    */
    any execute(
        [in] sequence< com::sun::star::beans::NamedValue > Arguments )
            raises( com::sun::star::lang::IllegalArgumentException ,
                    com::sun::star::uno::Exception                 );
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
