/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_task_XJobListener_idl__
#define __com_sun_star_task_XJobListener_idl__

#include <com/sun/star/lang/XEventListener.idl>


module com {  module sun {  module star {  module task {

 published interface XAsyncJob;

/** listener on finish states of asynchronous job execution
 */
published interface XJobListener : com::sun::star::lang::XEventListener
{
    /** indicates that the job is done

        @param Job
            identifies the asynchronous job so that theJobExecutor
            can differ between more than ones.

        @param Result
            should be the same like for the synchronous mode on XJob::execute().
            It provides information about success or failure of job execution. It's possible too,
            to use special protocol (which depends from real implementation) between
            theJobExecutor and a real job. So it can be possible to:

            <ul>
                <li>deregister the job</li>
                <li>let him registered although execution was successfully(!)</li>
                <li>make some job specific data persistent inside the job configuration which
                    is provided by the executor.</li>
            </ul>
    */
    void jobFinished(
        [in] XAsyncJob Job,
        [in] any Result);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
