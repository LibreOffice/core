/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_task_XMasterPasswordHandling_idl__
#define __com_sun_star_task_XMasterPasswordHandling_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/task/XInteractionHandler.idl>



module com { module sun { module star { module task {

/** allows to change the master password, or let it be requested and checked.
*/
published interface XMasterPasswordHandling : com::sun::star::uno::XInterface
{
    /** allows to check the user authorization.

        <p>
        This call let the master password be requested from user using the
        provided interaction handler.
        </p>

        <p>
        The call will use the standard interaction handler service
        <type>InteractionHandler</type> if no handler is provided.
        </p>

    */
    boolean authorizateWithMasterPassword( [in] XInteractionHandler xHandler );

    /** allows to change the master password.

        <p>
        If there is still no master password, the user will be asked to provide
        the new one.
        </p>

        <p>
        The call will use the standard interaction handler service
        <type>InteractionHandler</type> if no handler is provided.
        </p>
    */
    boolean changeMasterPassword( [in] XInteractionHandler xHandler );

    /** let the master password and all the related stored passwords be
        removed.
    */
    void removeMasterPassword();

    /** allows to detect whether there is already a master password
    */
    boolean hasMasterPassword();

    /** allows to specify whether persistent storing of passwords is allowed

        <p>
        After the storing is forbidden the master password and all the stored
        passwords are removed.
        </p>
    */
    boolean allowPersistentStoring( [in] boolean bAllow );

    /** allows to detect whether persistent storing of passwords is allowed
    */
    boolean isPersistentStoringAllowed();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
