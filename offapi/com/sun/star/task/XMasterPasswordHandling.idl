/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_task_XMasterPasswordHandling_idl__
#define __com_sun_star_task_XMasterPasswordHandling_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/task/XInteractionHandler.idl>



module com { module sun { module star { module task {

/** allows to change the master password, or let it be requested and checked.
*/
published interface XMasterPasswordHandling : com::sun::star::uno::XInterface
{
    /** allows to check the user authorization.

        <p>
        This call let the master password be requested from user using the
        provided interaction handler.
        </p>

        <p>
        The call will use the standard interaction handler service
        InteractionHandler if no handler is provided.
        </p>

    */
    boolean authorizateWithMasterPassword( [in] XInteractionHandler xHandler );

    /** allows to change the master password.

        <p>
        If there is still no master password, the user will be asked to provide
        the new one.
        </p>

        <p>
        The call will use the standard interaction handler service
        InteractionHandler if no handler is provided.
        </p>
    */
    boolean changeMasterPassword( [in] XInteractionHandler xHandler );

    /** let the master password and all the related stored passwords be
        removed.
    */
    void removeMasterPassword();

    /** allows to detect whether there is already a master password
    */
    boolean hasMasterPassword();

    /** allows to specify whether persistent storing of passwords is allowed

        <p>
        After the storing is forbidden the master password and all the stored
        passwords are removed.
        </p>
    */
    boolean allowPersistentStoring( [in] boolean bAllow );

    /** allows to detect whether persistent storing of passwords is allowed
    */
    boolean isPersistentStoringAllowed();

};


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
