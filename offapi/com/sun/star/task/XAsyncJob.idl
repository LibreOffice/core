/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef __com_sun_star_task_XAsyncJob_idl__
#define __com_sun_star_task_XAsyncJob_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/NamedValue.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com {  module sun {  module star {  module task {

 published interface XJobListener;

/** specifies a job which must be executed asynchronously

    <p>
    Instead of XJob the implementation of this interface
    must be aware, that execution can be made real asynchronous (e.g. by using
    threads). Because the environment wish to have creation and using of threads
    under control, it's not allowed for a real job implementation to use such mechanism
    by itself. The outside code decide, if it's possible and how it can be made
    asynchronous. In some special cases it can be, that asynchronous jobs will be executed
    synchronously.
    </p>

    @see XJob
*/
published interface XAsyncJob : com::sun::star::uno::XInterface
{
    /** executes the job asynchronously

        @param Arguments
            are arguments for executing the job. Their semantics is completely implementation dependent. Usually,
            a concrete implementation of a job specifies in its service descriptions which parameters are allowed
            (or expected). This values are persistent by the configuration of theJobExecutor
            which use this asynchronous job. It's possible to write it back by called listener
            function XJobListener::jobFinished().

        @param Listener
            specifies a listener which should be notified on events. May be `NULL`.

        @throws com::sun::star::lang::IllegalArgumentException
            if some of given arguments doesn't fill out the service specification or
            was corrupt so the service couldn't work correctly
    */
   void executeAsync(
        [in] sequence< com::sun::star::beans::NamedValue > Arguments,
        [in] XJobListener Listener)
            raises( com::sun::star::lang::IllegalArgumentException );
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
