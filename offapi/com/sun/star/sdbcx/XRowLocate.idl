/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbcx_XRowLocate_idl__
#define __com_sun_star_sdbcx_XRowLocate_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/sdbc/SQLException.idl>

 module com {  module sun {  module star {  module sdbcx {


/** is used to identify rows within a result set and to find rows by a bookmark.


    <p>
    Bookmarks are only valid in the scope of the current result set and
    are not interchangeable between result sets. A bookmark could be a complex data
    structure, so it could not be compared in a safe way. Because of that, a provider
    has to implement the compare method for bookmarks.
    </p>
 */
published interface XRowLocate: com::sun::star::uno::XInterface
{

    /** returns the bookmark of the current row of a result set.
        @returns
            the current bookmark
        @throws com::sun::star::sdbc::SQLException
            if a database access error occurs.
     */
    any getBookmark() raises (com::sun::star::sdbc::SQLException);

    /** moves the cursor to the row identified by an valid bookmark.

        <p>
        If the bookmark could not be located, a result set will be positioned
        after the last record.
        <br/>
        If the bookmark is invalid, or not generated by the current result set, then
        the behavior is not defined, even an abnormal termination is possible.
        </p>
        @param bookmark
            the bookmark where to move
        @returns
            <TRUE/> if successful
        @throws com::sun::star::sdbc::SQLException
            if a database access error occurs.
     */
    boolean moveToBookmark([in]any bookmark) raises (com::sun::star::sdbc::SQLException);

    /** moves the cursor a relative number of rows, either positive or negative
        starting at a given bookmark position.


        <p>
        If the bookmark could not be located, a result set will be positioned
        after the last record.
        <br/>
        If the bookmark is invalid, or not generated by the current result set, then
        the behavior is not defined, even an abnormal termination is possible.
        </p>
        @param bookmark
            the bookmark where to move
        @param rows
            count of rows move relative to the bookmark
        @returns
            <TRUE/> if successful
        @throws com::sun::star::sdbc::SQLException
            if a database access error occurs.
     */
    boolean moveRelativeToBookmark([in]any bookmark, [in]long rows)
        raises (com::sun::star::sdbc::SQLException);

    /** compares two bookmarks and returns an indication of their relative values.

        <p>
        The bookmarks must apply to the same ResultSet. You cannot reliably
        compare bookmarks from different ResultSets, even if they were created from
        the same source or statement.
        <br/>
        A bookmark that is not valid, or incorrectly formed, will cause an exception.
        </p>
        @param first
            the first bookmark
        @param second
            the second bookmark
        @returns
            a value of <type scope="com::sun::star::sdbcx">CompareBookmark</type>
        @throws com::sun::star::sdbc::SQLException
            if a database access error occurs.

        @see com::sun::star::sdbcx::CompareBookmark

     */
    long compareBookmarks([in]any first, [in]any second)
        raises (com::sun::star::sdbc::SQLException);

    /** determines whether the bookmarks of a result set are ordered or not.
        @returns
            <TRUE/> if so
        @throws com::sun::star::sdbc::SQLException
            if a database access error occurs.
        @see com::sun::star::sdbcx::CompareBookmark
     */
    boolean hasOrderedBookmarks() raises (com::sun::star::sdbc::SQLException);

    /** returns the hash value for a specified bookmark.
        @param bookmark
            the bookmark to hash
        @returns
            the hashed value
        @throws com::sun::star::sdbc::SQLException
            if a database access error occurs.
     */
    long hashBookmark([in]any bookmark) raises (com::sun::star::sdbc::SQLException);
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
