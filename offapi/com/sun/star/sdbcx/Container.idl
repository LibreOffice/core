/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */
#ifndef __com_sun_star_sdbcx_Container_idl__
#define __com_sun_star_sdbcx_Container_idl__

 module com {  module sun {  module star {  module container {
 published interface XNameAccess;
 published interface XIndexAccess;
 published interface XEnumerationAccess;
};};};};

 module com {  module sun {  module star {  module util {
 published interface XRefreshable;
};};};};

 module com {  module sun {  module star {  module sdbcx {

 published interface XDataDescriptorFactory;
 published interface XAppend;
 published interface XDrop;


/** describes every container which is used for data definition. Each
    container must support access to its elements by the element's name or
    by the element's position.

    <p>
    Simple enumeration must be supported as well.
    </p>
    <p>
    To reflect the changes with the underlying database, a refresh mechanism
    needs to be supported.
    </p>
    <p>
    A container may support the possibility to add new elements or to drop
    existing elements. Additions are always done by descriptors which define the
    properties of the new element.
    </p>
 */
published service Container
{
    // gives access to the elements by name.
    interface com::sun::star::container::XNameAccess;

    // gives access to the elements by index.
    interface com::sun::star::container::XIndexAccess;

    // used to create an enumeration of the elements.
    interface com::sun::star::container::XEnumerationAccess;


    /** is optional for implementation. Used to reflect changes.
     */
    [optional] interface com::sun::star::util::XRefreshable;

    /** optional for implementation. Allows to create descriptor elements which then could be used to append new elements.
     */
    [optional] interface XDataDescriptorFactory;

    /** optional for implementation, provides the possibility of adding
                a new element to the container.
     */
    [optional] interface XAppend;

    /** optional for implementation, provides the possibility of dropping
                an element from the container.
     */
    [optional] interface XDrop;
};


}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
