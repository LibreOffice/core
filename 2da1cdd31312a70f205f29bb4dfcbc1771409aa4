{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "81aec80c_66c756a4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-15T07:32:44Z",
      "side": 1,
      "message": "Just noting that in code like\n\n  SharedString s1(...);\n  SharedString s2(...);\n  s2 \u003d std::move(s1);\n  ... // Here s1 has the old value of s2\n\nthe new behavior is that s1 may be not empty after the move. This might be unimportant, and indeed the rule of thumb is to not rely on a variable state after the move.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 41
      },
      "revId": "2da1cdd31312a70f205f29bb4dfcbc1771409aa4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51b9419f_a13f5bc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-06-15T07:41:03Z",
      "side": 1,
      "message": "Is this based on some real need, or just on looking at the code? I tried this when making the function inline, and this only simplifies the C++ code, but the generated code is actually worse (IIRC resize() of mdds_vector creates an additional loop that runs destructors on all the original null strings).\n\n",
      "revId": "2da1cdd31312a70f205f29bb4dfcbc1771409aa4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f26a59f_383e0537",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-15T07:44:51Z",
      "side": 1,
      "message": "Oh, changing a logic to create a loop with destructors based on some different pointer operations here? I am very surprised.",
      "revId": "2da1cdd31312a70f205f29bb4dfcbc1771409aa4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b94c2f5c_154ea77d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-06-15T08:06:48Z",
      "side": 1,
      "message": "I\u0027m possibly not remembering it exactly. But the point is that if you\u0027re going to destroy something, it\u0027s faster to destroy it outright rather than move it somewhere and destroy it later. If you google it you\u0027ll find posts on how implementing std::move() using std:swap() is generally a pessimisation.",
      "parentUuid": "6f26a59f_383e0537",
      "revId": "2da1cdd31312a70f205f29bb4dfcbc1771409aa4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a59c00c_943a53af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-06-15T08:11:41Z",
      "side": 1,
      "message": "Likely http://www.vollmann.ch/en/blog/implementing-move-assignment-variations-in-c++.html and the like.",
      "revId": "2da1cdd31312a70f205f29bb4dfcbc1771409aa4",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}