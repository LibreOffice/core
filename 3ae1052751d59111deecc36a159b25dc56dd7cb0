{
  "comments": [
    {
      "key": {
        "uuid": "bf659307_7c184a74",
        "filename": "editeng/source/editeng/editobj.cxx",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1001501
      },
      "writtenOn": "2019-08-27T08:31:38Z",
      "side": 1,
      "message": "Could use\n\n std::equal(maCharAttribs.cbegin(), maCharAttribs.cend(),\n            rCompare.maCharAttribs.cbegin(), rCompare.maCharAttribs.cend(), ...)\n\nand drop manual size comparison.",
      "revId": "3ae1052751d59111deecc36a159b25dc56dd7cb0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_dc14f650",
        "filename": "editeng/source/editeng/editobj.cxx",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2019-08-27T17:15:27Z",
      "side": 1,
      "message": "The algorithm std::equal has no way to check that the third iterator we provide is always valid as long as it is incremented with the first iterator, so it\u0027s the developper\u0027s responsability to check that the two containers have the same number of elements.\n\nIf the second container had less elements than container1, std::equal would make the program crash.",
      "parentUuid": "bf659307_7c184a74",
      "revId": "3ae1052751d59111deecc36a159b25dc56dd7cb0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_3700ab01",
        "filename": "editeng/source/editeng/editobj.cxx",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1001501
      },
      "writtenOn": "2019-08-27T17:41:24Z",
      "side": 1,
      "message": "std::equal(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2) compares ranges [first1, last1) and [first2, last2).\nMoreover, size mismatch is detected without looking at any elements, see Complexity section in https://en.cppreference.com/w/cpp/algorithm/equal, near \"However, if InputIt1 and InputIt2...\"",
      "parentUuid": "bf659307_dc14f650",
      "revId": "3ae1052751d59111deecc36a159b25dc56dd7cb0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_d70e0f31",
        "filename": "editeng/source/editeng/editobj.cxx",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2019-08-27T17:49:13Z",
      "side": 1,
      "message": "Right, but this is true only for versions 5 and 7 because last2 is provided.\nHere I use version 3.\nI could change the implementation to use version 7. Is it what you want?",
      "parentUuid": "bf659307_3700ab01",
      "revId": "3ae1052751d59111deecc36a159b25dc56dd7cb0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_97189775",
        "filename": "editeng/source/editeng/editobj.cxx",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1001501
      },
      "writtenOn": "2019-08-27T17:52:18Z",
      "side": 1,
      "message": "Yes, I\u0027ve written that in first comment.",
      "parentUuid": "bf659307_d70e0f31",
      "revId": "3ae1052751d59111deecc36a159b25dc56dd7cb0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_572c3f98",
        "filename": "editeng/source/editeng/editobj.cxx",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1002127
      },
      "writtenOn": "2019-08-27T17:55:10Z",
      "side": 1,
      "message": "Ok sorry, I didn\u0027t understand. I do it right now.",
      "parentUuid": "bf659307_97189775",
      "revId": "3ae1052751d59111deecc36a159b25dc56dd7cb0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}