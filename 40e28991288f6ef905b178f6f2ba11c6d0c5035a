{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8e4097c_d6b25e6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-14T10:17:47Z",
      "side": 1,
      "message": "* I don\u0027t think such special-purpose functions would belong into include/rtl/[u]string.hxx.\n\n* I think the CPPUNIT_ASSERT family of macros has multiple shortcomings, just one of them being the issue of constructing message arguments from variable content.  Another common nuisance is that the expected and actual value arguments need to be of the exact same type.  Maybe it would make more sense to switch to our own set of macros that addresses all the shortcomings.",
      "revId": "40e28991288f6ef905b178f6f2ba11c6d0c5035a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68eb3319_4ebb269c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-12-14T10:24:33Z",
      "side": 1,
      "message": "Thanks for the review!\n\nYou -1\u0027d it; does it mean that you see a way to *improve* it? Or is it just a polite -2 - if so, please do that, and I\u0027m OK with it ðŸ˜Š - or do you only see wrong the placement of the functions? (I don\u0027t see why, but maybe you have a suggestion?)\n\nThe multiple shortcomings of the the macros is (1) orthogonal to this change, and (2) may be only not using provided machinery: see struct assertion_traits definition and documentation in cppunit\u0027s \u003ccppunit/TestAssert.h\u003e. We may (and are expected to) provide specializations, if we want more freedom.",
      "parentUuid": "c8e4097c_d6b25e6a",
      "revId": "40e28991288f6ef905b178f6f2ba11c6d0c5035a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e9d99d7_dd95df87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-12-14T10:31:36Z",
      "side": 1,
      "message": "\u003e see struct assertion_traits\n\nOr maybe better assertEquals/assertLess/... there.",
      "parentUuid": "68eb3319_4ebb269c",
      "revId": "40e28991288f6ef905b178f6f2ba11c6d0c5035a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ab1cac7_1d6bef13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-12-14T10:34:17Z",
      "side": 1,
      "message": "I was thinking along the lines of a family of macros that would use the same \u003c\u003c magic as SAL_WARN et al, which would break the orthogonality of the two topics, hence just -1 rather than -2.",
      "parentUuid": "68eb3319_4ebb269c",
      "revId": "40e28991288f6ef905b178f6f2ba11c6d0c5035a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}