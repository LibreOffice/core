{
  "comments": [
    {
      "key": {
        "uuid": "1a430d35_78bb0c73",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 2
      },
      "lineNbr": 8836,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2017-09-05T18:44:59Z",
      "side": 1,
      "message": "Asking because I don\u0027t know: does SEARCHB() in Excel really support Wildcards? In ODFF it\u0027s defined without HOST-USE-REGULAR-EXPRESSIONS or HOST-USE-WILDCARDS properties.",
      "range": {
        "startLine": 8836,
        "startChar": 55,
        "endLine": 8836,
        "endChar": 71
      },
      "revId": "28d74eaa9f0d613713b7f1ba153bfc76ca87a8b2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_9b0c3244",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 2
      },
      "lineNbr": 8836,
      "author": {
        "id": 1000057
      },
      "writtenOn": "2017-09-06T13:50:32Z",
      "side": 1,
      "message": "As ODFF 6.7.8 (SEARCHB) says under semantics \u0027As SEARCH, but using byte positions\u0027 and ODFF 6.20.20 (SEARCH) says under semantics \u0027The values returned may vary depending upon the HOST-USE-REGULAR-EXPRESSIONS or HOST-USE-WILDCARDS properties. (3.4)\u0027 I simply used ScSearch as a starting point and made sure that all unit test calls for SEARCH give the same result with SEARCHB.\n\nSo I tested with regular expressions, but not with wildcards, as SEARCH does not work well in Calc with them:\nSEARCH( \"f?ce\"; \"LibreOffice\"; 1 ) returns 10 (8 expected),\nSEARCH( \"f.ce\"; \"Libreoffice\"; 1 ) returns 8 as expected.\nWith Excel it is the other way round:\nSEARCH( \"f?ce\"; \"LibreOffice\"; 1 ) returns 8 as expected),\nSEARCH( \"f.ce\"; \"Libreoffice\"; 1 ) returns 10 (8 expected.\nSEARCHB is the same as SEARCH in both Calc and Excel.\n\nI have no idea how to (dis)able regexpr/wildcards in Calc or Excel.\n\nNow you know what I did and why, and that Excel supports wildcards.",
      "parentUuid": "1a430d35_78bb0c73",
      "range": {
        "startLine": 8836,
        "startChar": 55,
        "endLine": 8836,
        "endChar": 71
      },
      "revId": "28d74eaa9f0d613713b7f1ba153bfc76ca87a8b2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_91afb3e2",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 2
      },
      "lineNbr": 8836,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2017-09-07T10:47:00Z",
      "side": 1,
      "message": "LibreOffice\n \u003e SEARCH( \"f?ce\"; \"LibreOffice\"; 1 ) returns 10 (8 expected),\n \u003e SEARCH( \"f.ce\"; \"Libreoffice\"; 1 ) returns 8 as expected.\n\nThen you tested with regex enabled instead of wildcards. For \"f?ce\" that means there may be an \u0027f\u0027 or not, followed by \"ce\"; using minimal match 10 is correct.\n\nFor wildcards enabled the results are\n \u003dSEARCH( \"f?ce\", \"Libreoffice\", 1 ) returns 8\n \u003dSEARCH( \"f.ce\", \"Libreoffice\", 1 ) returns #VALUE!\n\nExcel\n \u003e SEARCH( \"f.ce\"; \"Libreoffice\"; 1 ) returns 10 (8 expected. \n\nExcel doesn\u0027t support regex and AFAIK the \u0027.\u0027 dot does not have any special meaning in wildcards. Actually the result should be error (likely #VALUE! as well).",
      "parentUuid": "1a430d35_9b0c3244",
      "range": {
        "startLine": 8836,
        "startChar": 55,
        "endLine": 8836,
        "endChar": 71
      },
      "revId": "28d74eaa9f0d613713b7f1ba153bfc76ca87a8b2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_31eeff22",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 2
      },
      "lineNbr": 8836,
      "author": {
        "id": 1000057
      },
      "writtenOn": "2017-09-07T11:14:53Z",
      "side": 1,
      "message": "When I use (in bash) grep a?n filename, with \u0027tan\u0027 in the file, it does not show..\n\nI must admit that I do not know how to enable/disable regex or wildcards in a document. I used sc/qa/unit/data/functions/text/fods/search.fods and modified/renamed it.\nThat\u0027s why I didn\u0027t test wildcards and why wildcards aren\u0027t tested for SEARCH either.\n\nThat Excel doesn\u0027t support regex is no surprise.",
      "parentUuid": "1a430d35_91afb3e2",
      "range": {
        "startLine": 8836,
        "startChar": 55,
        "endLine": 8836,
        "endChar": 71
      },
      "revId": "28d74eaa9f0d613713b7f1ba153bfc76ca87a8b2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a430d35_313c3f93",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 2
      },
      "lineNbr": 8836,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2017-09-07T11:57:27Z",
      "side": 1,
      "message": "The settings are under Tools -\u003e Options -\u003e Calc -\u003e Calculate, the radio buttons. In new installations the default is wildcards enabled because that is Excel compatible. It may be you have a profile carried over that still has regexp enabled. When loading an Excel document it\u0027s set to wildcards, in ODF it depends on the document setting.\n\nFor the grep command to support extended regexp you need to pass the -E option, so\n\n grep -E \u0027a?n\u0027 filename\n\nNote also the single quotes, so the shell doesn\u0027t expand the ? in case there\u0027s a matching file name, eg. \"abn\".\n\nIn non-extended (basic) regexp for grep, some meta-characters lose their special meaning (man grep). You could also precede them with a backslash when not using -E, so this would be the same:\n\n grep \u0027a\\?n\u0027 filename",
      "parentUuid": "1a430d35_31eeff22",
      "range": {
        "startLine": 8836,
        "startChar": 55,
        "endLine": 8836,
        "endChar": 71
      },
      "revId": "28d74eaa9f0d613713b7f1ba153bfc76ca87a8b2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}