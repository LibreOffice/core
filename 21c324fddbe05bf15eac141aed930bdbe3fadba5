{
  "comments": [
    {
      "key": {
        "uuid": "6de6705e_b2606c58",
        "filename": "basic/source/comp/dim.cxx",
        "patchSetId": 4
      },
      "lineNbr": 999,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-08-06T14:29:53Z",
      "side": 1,
      "message": "I believe that we don\u0027t need to omit type char for variant - or else we will always get the string default.",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec784cdc_775db2be",
        "filename": "basic/source/comp/dim.cxx",
        "patchSetId": 4
      },
      "lineNbr": 999,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-08-06T14:43:06Z",
      "side": 1,
      "message": "Yes this was the old commit and I didn\u0027t drop the comment for the fast pseudo draft.",
      "parentUuid": "6de6705e_b2606c58",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8b590cc_0616e8ca",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-08-06T14:29:53Z",
      "side": 1,
      "message": "And in all cases where you add a type character, you need to increase size by 2, to include the null and the type character",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bf577ee_7403d3ba",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-08-06T14:43:06Z",
      "side": 1,
      "message": "But won\u0027t the buffer be initialized with nulls? So the string in the case of 15 will look like, since size will return 2:\nbuff[0] \u003d \u00271\u0027\nbuff[1] \u003d \u00275\u0027\nbuff[2] \u003d \u0027\\0\u0027\nbuff[3] \u003d \u0027b\u0027\nbuff[4] \u003d \u0027\\0\u0027\n\nBut I have to check if the size is smaller than the buffer\u0027s size. Should we increase the buffer? What should we do if the buffer is to small for the type character?",
      "parentUuid": "d8b590cc_0616e8ca",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ce39684_9a08ae06",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-08-06T14:51:41Z",
      "side": 1,
      "message": "\u003e But won\u0027t the buffer be initialized with nulls?\n\nof course. And the layout you show will definitely be correct. Yet, I don\u0027t see how it contradicts to what I write. snprintf returns 2; but you need to know how much to save to OUString - i.e., how logn should be std::string_view to include two more characters (\\0 and b) after the \"15\"; and you increase the size here, knowing that you add the character (and in unlikely case when you don\u0027t need to add a type character, you don\u0027t increase the size).\n\nI don\u0027t think that we need a longer buffer. The RTL_STR_MAX_VALUEOF* in include/rtl/ustring.hxx have max of 64 (for int64) - but that is for 64-bit number (which we don\u0027t have here), and for base-2 representation. For 32-bit number, the longest string is 32-character; and even that is for base-2 case (which we also don\u0027t use here), and that would be enough. For double, the max length is 25...",
      "parentUuid": "3bf577ee_7403d3ba",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ab891a8_5750af01",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-08-06T14:29:53Z",
      "side": 1,
      "message": "Here move the type character after the null, too",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f42c252b_5914d23e",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-08-06T14:43:06Z",
      "side": 1,
      "message": "Yes, this was just for a very very fast draft. I will amend the commit, when I have decided for a possible solution ðŸ˜Š",
      "parentUuid": "1ab891a8_5750af01",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5001eb64_19b151a3",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-08-06T14:29:53Z",
      "side": 1,
      "message": "And here you need to get the size, even though you don\u0027t add type characters - but in fact, I suppose that adding # would be reasonable here, too",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7683bceb_1be0db51",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-08-06T14:43:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5001eb64_19b151a3",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c7a5019_3c232192",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-08-06T14:29:53Z",
      "side": 1,
      "message": "And here we would need to use\n\n  OUString::createFromAscii( std::string_view(buf, size) )\n\nso that the string_view contains the length, and makes the null embed into the resulting OUString. Otherwise, it will scan for null, and drop the type character",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67a5a304_b245082b",
        "filename": "basic/source/comp/symtbl.cxx",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2021-08-06T14:43:06Z",
      "side": 1,
      "message": "Thanks for the advice and help! I did not know how to save such a string.",
      "parentUuid": "5c7a5019_3c232192",
      "revId": "21c324fddbe05bf15eac141aed930bdbe3fadba5",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}