{
  "comments": [
    {
      "key": {
        "uuid": "df87a7cf_1de2afd6",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-04-10T15:59:00Z",
      "side": 1,
      "message": "I wouldn\u0027t get too carried away with all this clean up.  Every sane derived class would treat pT as a const member (which it arguably should have been to begin with), I don\u0027t see much value in adding this assert.",
      "revId": "87248fefb0dcc4464c36a11a63ffaf5b1a640592",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_5dd7d7ee",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2019-04-10T16:04:17Z",
      "side": 1,
      "message": "This is less about sanity, but more about a programmers mistake. It doesn\u0027t change anything and can potentially catch a bug, which should never happen, but eventually will.\n\nWe could say the same about all the access to the protected values in all these templates.",
      "parentUuid": "df87a7cf_1de2afd6",
      "revId": "87248fefb0dcc4464c36a11a63ffaf5b1a640592",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df87a7cf_7d3e5b2a",
        "filename": "include/osl/mutex.hxx",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-04-10T16:16:05Z",
      "side": 1,
      "message": "\"It [...] can potentially catch a bug, which should never happen, but eventually will.\"\n\n...and I argued that a programmer error causing violation of that condition is IMO too unlikely to warrant adding an assert here.",
      "parentUuid": "df87a7cf_5dd7d7ee",
      "revId": "87248fefb0dcc4464c36a11a63ffaf5b1a640592",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}