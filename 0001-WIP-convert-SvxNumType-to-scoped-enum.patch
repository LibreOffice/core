From 5d9c82da8715d0afab2e487066da53c8afaa03f0 Mon Sep 17 00:00:00 2001
From: Noel Grandin <noel.grandin@collabora.co.uk>
Date: Mon, 6 Mar 2017 16:14:17 +0200
Subject: [PATCH] WIP convert SvxNumType to scoped enum

Change-Id: Icb65344e2c46d2d3b2bfa92c9180459e3b97fe69
---
 cui/source/inc/numpages.hxx                        |   4 +-
 cui/source/tabpages/numpages.cxx                   |  66 ++++++------
 cui/source/tabpages/page.cxx                       |   4 +-
 .../accessibility/AccessibleEditableTextPara.cxx   |   6 +-
 .../source/accessibility/AccessibleImageBullet.cxx |   2 +-
 editeng/source/editeng/editdbg.cxx                 |   4 +-
 editeng/source/items/numitem.cxx                   |  26 ++---
 editeng/source/outliner/outliner.cxx               |  28 ++---
 editeng/source/outliner/outlvw.cxx                 |  10 +-
 editeng/source/uno/unoedprx.cxx                    |  12 +--
 editeng/source/uno/unonrule.cxx                    |   4 +-
 filter/source/msfilter/svdfppt.cxx                 |  94 ++++++++---------
 filter/source/svg/svgexport.cxx                    |  30 +++---
 filter/source/svg/svgfilter.hxx                    |  20 ++--
 include/editeng/numitem.hxx                        |   8 +-
 include/editeng/outliner.hxx                       |   4 +-
 include/editeng/svxenum.hxx                        | 116 ++++++++++-----------
 include/svx/SvxNumOptionsTabPageHelper.hxx         |   2 +-
 include/svx/nbdtmg.hxx                             |   2 +-
 oox/source/export/drawingml.cxx                    |  20 ++--
 reportdesign/source/core/sdr/RptModel.cxx          |   2 +-
 sc/source/core/tool/editutil.cxx                   |   2 +-
 sc/source/filter/starcalc/scflt.cxx                |   2 +-
 sd/source/core/drawdoc.cxx                         |   2 +-
 sd/source/core/drawdoc4.cxx                        |  12 +--
 sd/source/core/sdpage.cxx                          |   2 +-
 sd/source/core/stlpool.cxx                         |   6 +-
 sd/source/filter/eppt/epptso.cxx                   |  32 +++---
 sd/source/filter/eppt/pptx-stylesheet.cxx          |   2 +-
 sd/source/filter/eppt/pptx-text.cxx                |  62 +++++------
 sd/source/filter/eppt/text.hxx                     |   2 +-
 sd/source/ui/func/bulmaper.cxx                     |   6 +-
 sd/source/ui/view/drtxtob1.cxx                     |   6 +-
 sd/source/ui/view/drviewsf.cxx                     |   4 +-
 svx/source/dialog/numberingtype.src                |  22 ++--
 svx/source/items/pageitem.cxx                      |  12 +--
 svx/source/sidebar/nbdtmg.cxx                      |  22 ++--
 svx/source/svdraw/svdmodel.cxx                     |   2 +-
 svx/source/unodraw/UnoGraphicExporter.cxx          |  10 +-
 sw/inc/expfld.hxx                                  |  26 ++---
 sw/inc/fldbas.hxx                                  |   2 +-
 sw/inc/fmtftntx.hxx                                |   2 +-
 sw/inc/ndtxt.hxx                                   |   4 +-
 sw/qa/extras/uiwriter/uiwriter.cxx                 |   6 +-
 sw/source/core/access/accframe.cxx                 |   4 +-
 sw/source/core/doc/DocumentStylePoolManager.cxx    |  24 ++---
 sw/source/core/doc/dbgoutsw.cxx                    |  14 +--
 sw/source/core/doc/docftn.cxx                      |   4 +-
 sw/source/core/doc/doclay.cxx                      |   4 +-
 sw/source/core/doc/docnum.cxx                      |   2 +-
 sw/source/core/doc/number.cxx                      |  20 ++--
 sw/source/core/edit/autofmt.cxx                    |  18 ++--
 sw/source/core/edit/edattr.cxx                     |   4 +-
 sw/source/core/fields/chpfld.cxx                   |   2 +-
 sw/source/core/fields/docufld.cxx                  |  32 +++---
 sw/source/core/fields/expfld.cxx                   |  18 ++--
 sw/source/core/fields/fldbas.cxx                   |  10 +-
 sw/source/core/layout/atrfrm.cxx                   |   6 +-
 sw/source/core/text/txtfld.cxx                     |   6 +-
 sw/source/core/txtnode/ndtxt.cxx                   |   4 +-
 sw/source/core/unocore/unosett.cxx                 |   8 +-
 sw/source/filter/html/htmlfld.cxx                  |  32 +++---
 sw/source/filter/html/htmlfldw.cxx                 |  22 ++--
 sw/source/filter/html/htmlftn.cxx                  |   4 +-
 sw/source/filter/html/htmlnumreader.cxx            |  22 ++--
 sw/source/filter/html/htmlnumwriter.cxx            |  22 ++--
 sw/source/filter/html/svxcss1.cxx                  |  16 +--
 sw/source/filter/writer/writer.cxx                 |   4 +-
 sw/source/filter/ww8/docxattributeoutput.cxx       |  44 ++++----
 sw/source/filter/ww8/rtfattributeoutput.cxx        |  64 ++++++------
 sw/source/filter/ww8/rtfexport.cxx                 |  30 +++---
 sw/source/filter/ww8/wrtw8num.cxx                  |  58 +++++------
 sw/source/filter/ww8/wrtww8.cxx                    |   2 +-
 sw/source/filter/ww8/ww8atr.cxx                    |  36 +++----
 sw/source/filter/ww8/ww8par.cxx                    |  18 ++--
 sw/source/filter/ww8/ww8par2.cxx                   |  44 ++++----
 sw/source/filter/ww8/ww8par3.cxx                   |  56 +++++-----
 sw/source/filter/ww8/ww8par5.cxx                   |  20 ++--
 sw/source/filter/ww8/ww8par6.cxx                   |   6 +-
 sw/source/ui/config/optload.cxx                    |  16 +--
 sw/source/ui/fldui/flddb.cxx                       |   2 +-
 sw/source/ui/fldui/flddok.cxx                      |   8 +-
 sw/source/ui/fldui/fldvar.cxx                      |   2 +-
 sw/source/ui/frmdlg/cption.cxx                     |  16 +--
 sw/source/ui/misc/outline.cxx                      |  14 +--
 sw/source/uibase/app/appenv.cxx                    |   2 +-
 sw/source/uibase/app/applab.cxx                    |   2 +-
 sw/source/uibase/config/caption.cxx                |   2 +-
 sw/source/uibase/fldui/fldmgr.cxx                  |  42 ++++----
 sw/source/uibase/misc/numberingtypelistbox.cxx     |   2 +-
 sw/source/uibase/shells/textfld.cxx                |   4 +-
 sw/source/uibase/shells/txtnum.cxx                 |   6 +-
 sw/source/uibase/wrtsh/wrtsh1.cxx                  |  18 ++--
 93 files changed, 763 insertions(+), 765 deletions(-)

diff --git a/cui/source/inc/numpages.hxx b/cui/source/inc/numpages.hxx
index bb30cbd..40e27721 100644
--- a/cui/source/inc/numpages.hxx
+++ b/cui/source/inc/numpages.hxx
@@ -73,7 +73,7 @@ struct SvxNumSettings_Impl
     OUString   sBulletChar;
     OUString   sBulletFont;
     SvxNumSettings_Impl() :
-        nNumberType(SVX_NUM_CHARS_UPPER_LETTER),
+        nNumberType(SvxNumType::CHARS_UPPER_LETTER),
         nParentNumbering(0)
         {}
 };
@@ -315,7 +315,7 @@ class SvxNumOptionsTabPage : public SfxTabPage
         1 - Bullet;
         2 - Bitmap; */
     void                SwitchNumberType( sal_uInt8 nType, bool bBmp = false );
-    void                CheckForStartValue_Impl(sal_uInt16 nNumberingType);
+    void                CheckForStartValue_Impl(SvxNumType nNumberingType);
 
         DECL_LINK( NumberTypeSelectHdl_Impl, ListBox&, void );
         DECL_LINK( LevelHdl_Impl, ListBox&, void );
diff --git a/cui/source/tabpages/numpages.cxx b/cui/source/tabpages/numpages.cxx
index 7ebc6d1..d1b2e3b 100644
--- a/cui/source/tabpages/numpages.cxx
+++ b/cui/source/tabpages/numpages.cxx
@@ -498,7 +498,7 @@ IMPL_LINK_NOARG(SvxBulletPickTabPage, NumSelectHdl_Impl, ValueSet*, void)
             if(nActNumLvl & nMask)
             {
                 SvxNumberFormat aFmt(pActNum->GetLevel(i));
-                aFmt.SetNumberingType( SVX_NUM_CHAR_SPECIAL );
+                aFmt.SetNumberingType( SvxNumType::CHAR_SPECIAL );
                 // #i93908# clear suffix for bullet lists
                 aFmt.SetPrefix( OUString() );
                 aFmt.SetSuffix( OUString() );
@@ -706,7 +706,7 @@ IMPL_LINK_NOARG(SvxNumPickTabPage, NumSelectHdl_Impl, ValueSet*, void)
             SvxNumberFormat aFmt(pActNum->GetLevel(i));
             aFmt.SetNumberingType( pLevelSettings->nNumberType );
             sal_uInt16 nUpperLevelOrChar = (sal_uInt16)pLevelSettings->nParentNumbering;
-            if(aFmt.GetNumberingType() == SVX_NUM_CHAR_SPECIAL)
+            if(aFmt.GetNumberingType() == SvxNumType::CHAR_SPECIAL)
             {
                 // #i93908# clear suffix for bullet lists
                 aFmt.SetPrefix(OUString());
@@ -949,7 +949,7 @@ IMPL_LINK_NOARG(SvxBitmapPickTabPage, NumSelectHdl_Impl, ValueSet*, void)
         sal_uInt16 nIdx = m_pExamplesVS->GetSelectItemId() - 1;
 
         sal_uInt16 nMask = 1;
-        SvxNumType nSetNumberingType = SVX_NUM_BITMAP;
+        SvxNumType nSetNumberingType = SvxNumType::BITMAP;
         for(sal_uInt16 i = 0; i < pActNum->GetLevelCount(); i++)
         {
             if(nActNumLvl & nMask)
@@ -1187,9 +1187,9 @@ SvxNumOptionsTabPage::SvxNumOptionsTabPage(vcl::Window* pParent,
 
     // Get advanced numbering types from the component.
     // Watch out for the ugly
-    // 136 == 0x88 == SVX_NUM_BITMAP|0x80 == SVX_NUM_BITMAP|LINK_TOKEN
+    // 136 == 0x88 == SvxNumType::BITMAP|0x80 == SvxNumType::BITMAP|LINK_TOKEN
     // to not remove that.
-    SvxNumOptionsTabPageHelper::GetI18nNumbering( *m_pFmtLB, (SVX_NUM_BITMAP | LINK_TOKEN));
+    SvxNumOptionsTabPageHelper::GetI18nNumbering( *m_pFmtLB, ((int)SvxNumType::BITMAP | LINK_TOKEN));
 }
 
 SvxNumOptionsTabPage::~SvxNumOptionsTabPage()
@@ -1400,7 +1400,7 @@ void    SvxNumOptionsTabPage::Reset( const SfxItemSet* rSet )
     m_pAllLevelsFrame->Show(bContinuous);
 
     // again misusage: in Draw there is numeration only until the bitmap
-    // without SVX_NUM_NUMBER_NONE
+    // without SvxNumType::NUMBER_NONE
     //remove types that are unsupported by Draw/Impress
     if(!bContinuous)
     {
@@ -1408,23 +1408,22 @@ void    SvxNumOptionsTabPage::Reset( const SfxItemSet* rSet )
         for(sal_Int32 i = nFmtCount; i; i--)
         {
             sal_uInt16 nEntryData = (sal_uInt16)reinterpret_cast<sal_uLong>(m_pFmtLB->GetEntryData(i - 1));
-            if(/*SVX_NUM_NUMBER_NONE == nEntryData ||*/
-                ((SVX_NUM_BITMAP|LINK_TOKEN) ==  nEntryData))
+            if(/*SvxNumType::NUMBER_NONE == nEntryData ||*/
+                (((int)SvxNumType::BITMAP|LINK_TOKEN) ==  nEntryData))
                 m_pFmtLB->RemoveEntry(i - 1);
         }
     }
     //one must be enabled
     if(!pActNum->IsFeatureSupported(SvxNumRuleFlags::ENABLE_LINKED_BMP))
     {
-        sal_IntPtr nData = SVX_NUM_BITMAP|LINK_TOKEN;
+        sal_IntPtr nData = (int)SvxNumType::BITMAP|LINK_TOKEN;
         sal_Int32 nPos = m_pFmtLB->GetEntryPos(reinterpret_cast<void*>(nData));
         if(LISTBOX_ENTRY_NOTFOUND != nPos)
             m_pFmtLB->RemoveEntry(nPos);
     }
     else if(!pActNum->IsFeatureSupported(SvxNumRuleFlags::ENABLE_EMBEDDED_BMP))
     {
-        sal_IntPtr nData = SVX_NUM_BITMAP;
-        sal_Int32 nPos = m_pFmtLB->GetEntryPos(reinterpret_cast<void*>(nData));
+        sal_Int32 nPos = m_pFmtLB->GetEntryPos(reinterpret_cast<void*>(SvxNumType::BITMAP));
         if(LISTBOX_ENTRY_NOTFOUND != nPos)
             m_pFmtLB->RemoveEntry(nPos);
     }
@@ -1447,8 +1446,8 @@ void    SvxNumOptionsTabPage::Reset( const SfxItemSet* rSet )
         sal_Int32 nFmtCount = m_pFmtLB->GetEntryCount();
         for(sal_Int32 i = nFmtCount; i; i--)
         {
-            sal_uInt16 nEntryData = (sal_uInt16)reinterpret_cast<sal_uLong>(m_pFmtLB->GetEntryData(i - 1));
-            if( /*nEntryData >= SVX_NUM_CHARS_UPPER_LETTER &&*/  nEntryData <= SVX_NUM_NUMBER_NONE)
+            SvxNumType nEntryData = (SvxNumType)reinterpret_cast<sal_uLong>(m_pFmtLB->GetEntryData(i - 1));
+            if( /*nEntryData >= SvxNumType::CHARS_UPPER_LETTER &&*/  nEntryData <= SvxNumType::NUMBER_NONE)
                 m_pFmtLB->RemoveEntry(i - 1);
         }
     }
@@ -1489,8 +1488,8 @@ void SvxNumOptionsTabPage::InitControls()
         if(nActNumLvl & nMask)
         {
             aNumFmtArr[i] = &pActNum->GetLevel(i);
-            bShowBullet &= aNumFmtArr[i]->GetNumberingType() == SVX_NUM_CHAR_SPECIAL;
-            bShowBitmap &= (aNumFmtArr[i]->GetNumberingType()&(~LINK_TOKEN)) == SVX_NUM_BITMAP;
+            bShowBullet &= aNumFmtArr[i]->GetNumberingType() == SvxNumType::CHAR_SPECIAL;
+            bShowBitmap &= ((int)aNumFmtArr[i]->GetNumberingType()&(~LINK_TOKEN)) == (int)SvxNumType::BITMAP;
             if(SAL_MAX_UINT16 == nLvl)
             {
                 nLvl = i;
@@ -1524,12 +1523,12 @@ void SvxNumOptionsTabPage::InitControls()
     }
     SwitchNumberType(bShowBullet ? 1 : bShowBitmap ? 2 : 0);
 
-    sal_uInt16 nNumberingType;
+    SvxNumType nNumberingType;
     if (nLvl != SAL_MAX_UINT16)
         nNumberingType = aNumFmtArr[nLvl]->GetNumberingType();
     else
     {
-        nNumberingType = SVX_NUM_NUMBER_NONE;
+        nNumberingType = SvxNumType::NUMBER_NONE;
         bAllLevel = false;
         bSameAdjust = false;
         bSameBulRelSize = false;
@@ -1564,8 +1563,7 @@ void SvxNumOptionsTabPage::InitControls()
 
     if(bSameType)
     {
-        sal_uInt16 nLBData = nNumberingType;
-        m_pFmtLB->SelectEntryPos(m_pFmtLB->GetEntryPos( reinterpret_cast<void*>(sal::static_int_cast<sal_uIntPtr>( nLBData ) )));
+        m_pFmtLB->SelectEntryPos(m_pFmtLB->GetEntryPos( reinterpret_cast<void*>(sal::static_int_cast<sal_uIntPtr>( nNumberingType ) )));
     }
     else
         m_pFmtLB->SetNoSelection();
@@ -1786,8 +1784,8 @@ IMPL_LINK( SvxNumOptionsTabPage, NumberTypeSelectHdl_Impl, ListBox&, rBox, void
             // PAGEDESC does not exist
             SvxNumType nNumType = (SvxNumType)reinterpret_cast<sal_uLong>(rBox.GetSelectEntryData());
             aNumFmt.SetNumberingType(nNumType);
-            sal_uInt16 nNumberingType = aNumFmt.GetNumberingType();
-            if(SVX_NUM_BITMAP == (nNumberingType&(~LINK_TOKEN)))
+            SvxNumType nNumberingType = aNumFmt.GetNumberingType();
+            if((int)SvxNumType::BITMAP == ((int)nNumberingType&(~LINK_TOKEN)))
             {
                 bBmp |= nullptr != aNumFmt.GetBrush();
                 aNumFmt.SetIncludeUpperLevels( 0 );
@@ -1799,7 +1797,7 @@ IMPL_LINK( SvxNumOptionsTabPage, NumberTypeSelectHdl_Impl, ListBox&, rBox, void
                 SwitchNumberType(SHOW_BITMAP, bBmp );
                 bShowOrient = true;
             }
-            else if( SVX_NUM_CHAR_SPECIAL == nNumberingType )
+            else if( SvxNumType::CHAR_SPECIAL == nNumberingType )
             {
                 aNumFmt.SetIncludeUpperLevels( 0 );
                 aNumFmt.SetSuffix( "" );
@@ -1853,12 +1851,12 @@ IMPL_LINK( SvxNumOptionsTabPage, NumberTypeSelectHdl_Impl, ListBox&, rBox, void
     }
 }
 
-void SvxNumOptionsTabPage::CheckForStartValue_Impl(sal_uInt16 nNumberingType)
+void SvxNumOptionsTabPage::CheckForStartValue_Impl(SvxNumType nNumberingType)
 {
     bool bIsNull = m_pStartED->GetValue() == 0;
-    bool bNoZeroAllowed = nNumberingType < SVX_NUM_ARABIC ||
-                        SVX_NUM_CHARS_UPPER_LETTER_N == nNumberingType ||
-                        SVX_NUM_CHARS_LOWER_LETTER_N == nNumberingType;
+    bool bNoZeroAllowed = nNumberingType < SvxNumType::ARABIC ||
+                        SvxNumType::CHARS_UPPER_LETTER_N == nNumberingType ||
+                        SvxNumType::CHARS_LOWER_LETTER_N == nNumberingType;
     m_pStartED->SetMin(bNoZeroAllowed ? 1 : 0);
     if(bIsNull && bNoZeroAllowed)
         m_pStartED->GetModifyHdl().Call(*m_pStartED);
@@ -1875,7 +1873,7 @@ IMPL_LINK( SvxNumOptionsTabPage, OrientHdl_Impl, ListBox&, rBox, void )
         if(nActNumLvl & nMask)
         {
             SvxNumberFormat aNumFmt(pActNum->GetLevel(i));
-            if(SVX_NUM_BITMAP == (aNumFmt.GetNumberingType()&(~LINK_TOKEN)))
+            if((int)SvxNumType::BITMAP == ((int)aNumFmt.GetNumberingType()&(~LINK_TOKEN)))
             {
                 const SvxBrushItem* pBrushItem =  aNumFmt.GetBrush();
                 const Size& rSize = aNumFmt.GetGraphicSize();
@@ -1897,7 +1895,7 @@ IMPL_LINK( SvxNumOptionsTabPage, SameLevelHdl_Impl, Button*, pBox, void )
     for(sal_uInt16 i = 0; i < pActNum->GetLevelCount(); i++)
     {
         SvxNumberFormat aNumFmt(pActNum->GetLevel(i));
-        if(aNumFmt.GetNumberingType() != SVX_NUM_NUMBER_NONE)
+        if(aNumFmt.GetNumberingType() != SvxNumType::NUMBER_NONE)
         {
             bRepaint = true;
             break;
@@ -2154,7 +2152,7 @@ IMPL_LINK( SvxNumOptionsTabPage, SizeHdl_Impl, Edit&, rField, void)
         if(nActNumLvl & nMask)
         {
             SvxNumberFormat aNumFmt(pActNum->GetLevel(i));
-            if(SVX_NUM_BITMAP == (aNumFmt.GetNumberingType()&(~LINK_TOKEN)))
+            if((int)SvxNumType::BITMAP == ((int)aNumFmt.GetNumberingType()&(~LINK_TOKEN)))
             {
                 Size aSize(aNumFmt.GetGraphicSize() );
                 Size aSaveSize(aSize);
@@ -2227,7 +2225,7 @@ IMPL_LINK_NOARG(SvxNumOptionsTabPage, CharFmtHdl_Impl, ListBox&, void)
                 aNumFmt.SetCharFormatName("");
             else
             {
-                if(SVX_NUM_BITMAP != (aNumFmt.GetNumberingType()&(~LINK_TOKEN)))
+                if((int)SvxNumType::BITMAP != ((int)aNumFmt.GetNumberingType()&(~LINK_TOKEN)))
                     aNumFmt.SetCharFormatName(sEntry);
             }
             pActNum->SetLevel(i, aNumFmt);
@@ -2450,11 +2448,11 @@ void SvxNumberingPreview::Paint(vcl::RenderContext& rRenderContext, const Rectan
                 }
 
                 sal_uInt16 nBulletWidth = 0;
-                if (SVX_NUM_BITMAP == (rFmt.GetNumberingType() &(~LINK_TOKEN)))
+                if ((int)SvxNumType::BITMAP == ((int)rFmt.GetNumberingType() &(~LINK_TOKEN)))
                 {
                     nBulletWidth = rFmt.IsShowSymbol() ? lcl_DrawGraphic(pVDev.get(), rFmt, nNumberXPos, nYStart, nWidthRelation) : 0;
                 }
-                else if (SVX_NUM_CHAR_SPECIAL == rFmt.GetNumberingType())
+                else if (SvxNumType::CHAR_SPECIAL == rFmt.GetNumberingType())
                 {
                     nBulletWidth =  rFmt.IsShowSymbol() ? lcl_DrawBullet(pVDev.get(), rFmt, nNumberXPos, nYStart, aStdFont.GetFontSize()) : 0;
                 }
@@ -2568,7 +2566,7 @@ void SvxNumberingPreview::Paint(vcl::RenderContext& rRenderContext, const Rectan
                 nXStart /= 2;
                 nXStart += 2;
                 sal_uInt16 nTextOffset = 2 * nXStep;
-                if (SVX_NUM_BITMAP == (rFmt.GetNumberingType()&(~LINK_TOKEN)))
+                if ((int)SvxNumType::BITMAP == ((int)rFmt.GetNumberingType()&(~LINK_TOKEN)))
                 {
                     if (rFmt.IsShowSymbol())
                     {
@@ -2576,7 +2574,7 @@ void SvxNumberingPreview::Paint(vcl::RenderContext& rRenderContext, const Rectan
                         nTextOffset = nTextOffset + nXStep;
                     }
                 }
-                else if (SVX_NUM_CHAR_SPECIAL == rFmt.GetNumberingType())
+                else if (SvxNumType::CHAR_SPECIAL == rFmt.GetNumberingType())
                 {
                     if (rFmt.IsShowSymbol())
                     {
diff --git a/cui/source/tabpages/page.cxx b/cui/source/tabpages/page.cxx
index 81b367b..0548a70 100644
--- a/cui/source/tabpages/page.cxx
+++ b/cui/source/tabpages/page.cxx
@@ -466,7 +466,7 @@ void SvxPageDescPage::Reset( const SfxItemSet* rSet )
     }
 
     // general page data
-    SvxNumType eNumType = SVX_NUM_ARABIC;
+    SvxNumType eNumType = SvxNumType::ARABIC;
     bLandscape = ( mpDefPrinter->GetOrientation() == Orientation::Landscape );
     SvxPageUsage nUse = SvxPageUsage::All;
     pItem = GetItem( *rSet, SID_ATTR_PAGE );
@@ -487,7 +487,7 @@ void SvxPageDescPage::Reset( const SfxItemSet* rSet )
     //adjust numeration type of the page style
     //Get the Position of the saved NumType
     for(int i=0; i<m_pNumberFormatBox->GetEntryCount(); i++)
-        if(eNumType == (sal_uInt16)reinterpret_cast<sal_uLong>(m_pNumberFormatBox->GetEntryData(i)))
+        if(eNumType == (SvxNumType)reinterpret_cast<sal_uLong>(m_pNumberFormatBox->GetEntryData(i)))
         {
             m_pNumberFormatBox->SelectEntryPos( i );
             break;
diff --git a/editeng/source/accessibility/AccessibleEditableTextPara.cxx b/editeng/source/accessibility/AccessibleEditableTextPara.cxx
index 50bb53b..81152ea 100644
--- a/editeng/source/accessibility/AccessibleEditableTextPara.cxx
+++ b/editeng/source/accessibility/AccessibleEditableTextPara.cxx
@@ -1027,7 +1027,7 @@ namespace accessibility
 
             if( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
                 aBulletInfo.bVisible &&
-                aBulletInfo.nType == SVX_NUM_BITMAP )
+                aBulletInfo.nType == SvxNumType::BITMAP )
             {
                 Rectangle aRect = aBulletInfo.aBounds;
 
@@ -1167,7 +1167,7 @@ namespace accessibility
             EBulletInfo aBulletInfo = GetTextForwarder().GetBulletInfo(GetParagraphIndex());
             if( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
                 aBulletInfo.bVisible &&
-                aBulletInfo.nType != SVX_NUM_BITMAP )
+                aBulletInfo.nType != SvxNumType::BITMAP )
             {
                 sal_Int32 nBulletLen = aBulletInfo.aText.getLength();
                 if( aSelection.nEndPos - nBulletLen >= 0 )
@@ -1258,7 +1258,7 @@ namespace accessibility
             beans::PropertyValue &rRes = pRes[nRes];
             rRes.Name = "NumberingPrefix";
             OUString numStr;
-            if (aBulletInfo.nType != SVX_NUM_CHAR_SPECIAL && aBulletInfo.nType != SVX_NUM_BITMAP)
+            if (aBulletInfo.nType != SvxNumType::CHAR_SPECIAL && aBulletInfo.nType != SvxNumType::BITMAP)
                 numStr = aBulletInfo.aText;
             rRes.Value <<= numStr;
             rRes.Handle = -1;
diff --git a/editeng/source/accessibility/AccessibleImageBullet.cxx b/editeng/source/accessibility/AccessibleImageBullet.cxx
index 89385d1..0488a27 100644
--- a/editeng/source/accessibility/AccessibleImageBullet.cxx
+++ b/editeng/source/accessibility/AccessibleImageBullet.cxx
@@ -246,7 +246,7 @@ namespace accessibility
 
         if( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
             aBulletInfo.bVisible &&
-            aBulletInfo.nType == SVX_NUM_BITMAP )
+            aBulletInfo.nType == SvxNumType::BITMAP )
         {
             Rectangle aRect = aBulletInfo.aBounds;
 
diff --git a/editeng/source/editeng/editdbg.cxx b/editeng/source/editeng/editdbg.cxx
index c5c87a9..60b4509 100644
--- a/editeng/source/editeng/editdbg.cxx
+++ b/editeng/source/editeng/editdbg.cxx
@@ -91,9 +91,9 @@ OString DbgOutItem(const SfxItemPool& rPool, const SfxPoolItem& rItem)
                     aDebStr.append(',');
                     aDebStr.append(static_cast<sal_Int32>(pFmt->GetAbsLSpace()));
                     aDebStr.append(',');
-                    if ( pFmt->GetNumberingType() == SVX_NUM_BITMAP )
+                    if ( pFmt->GetNumberingType() == SvxNumType::BITMAP )
                         aDebStr.append("Bitmap");
-                    else if( pFmt->GetNumberingType() != SVX_NUM_CHAR_SPECIAL )
+                    else if( pFmt->GetNumberingType() != SvxNumType::CHAR_SPECIAL )
                         aDebStr.append("Number");
                     else
                     {
diff --git a/editeng/source/items/numitem.cxx b/editeng/source/items/numitem.cxx
index 54eef3e..861a3d2 100644
--- a/editeng/source/items/numitem.cxx
+++ b/editeng/source/items/numitem.cxx
@@ -116,13 +116,13 @@ OUString SvxNumberType::GetNumStr( sal_uLong nNo, const css::lang::Locale& rLoca
     {
         switch(nNumType)
         {
-            case NumberingType::CHAR_SPECIAL:
-            case NumberingType::BITMAP:
+            case SvxNumType::CHAR_SPECIAL:
+            case SvxNumType::BITMAP:
             break;
             default:
                 {
                     // '0' allowed for ARABIC numberings
-                    if(NumberingType::ARABIC == nNumType && 0 == nNo )
+                    if(SvxNumType::ARABIC == nNumType && 0 == nNo )
                         return OUString('0');
                     else
                     {
@@ -254,7 +254,7 @@ void SvxNumberFormat::Store(SvStream &rStream, FontToSubsFontConverter pConverte
 
     rStream.WriteUInt16( NUMITEM_VERSION_04 );
 
-    rStream.WriteUInt16( GetNumberingType() );
+    rStream.WriteUInt16( (sal_uInt16)GetNumberingType() );
     rStream.WriteUInt16( eNumAdjust );
     rStream.WriteUInt16( nInclUpperLevels );
     rStream.WriteUInt16( nStart );
@@ -565,7 +565,7 @@ SvxNumRule::SvxNumRule( SvxNumRuleFlags nFeatures,
     {
         if(i < nLevels)
         {
-            aFmts[i] = new SvxNumberFormat(SVX_NUM_CHARS_UPPER_LETTER);
+            aFmts[i] = new SvxNumberFormat(SvxNumType::CHARS_UPPER_LETTER);
             // It is a distinction between writer and draw
             if(nFeatures & SvxNumRuleFlags::CONTINUOUS)
             {
@@ -769,8 +769,8 @@ const SvxNumberFormat&  SvxNumRule::GetLevel(sal_uInt16 nLevel)const
 {
     if(!pStdNumFmt)
     {
-        pStdNumFmt = new SvxNumberFormat(SVX_NUM_ARABIC);
-         pStdOutlineNumFmt = new SvxNumberFormat(SVX_NUM_NUMBER_NONE);
+        pStdNumFmt = new SvxNumberFormat(SvxNumType::ARABIC);
+         pStdOutlineNumFmt = new SvxNumberFormat(SvxNumType::NUMBER_NONE);
     }
 
     DBG_ASSERT(nLevel < SVX_MAX_NUM, "Wrong Level" );
@@ -825,7 +825,7 @@ OUString SvxNumRule::MakeNumString( const SvxNodeNum& rNum ) const
     if( SVX_NO_NUM > rNum.GetLevel() && !( SVX_NO_NUMLEVEL & rNum.GetLevel() ) )
     {
         const SvxNumberFormat& rMyNFmt = GetLevel( rNum.GetLevel() );
-        if( SVX_NUM_NUMBER_NONE != rMyNFmt.GetNumberingType() )
+        if( SvxNumType::NUMBER_NONE != rMyNFmt.GetNumberingType() )
         {
             sal_uInt8 i = rNum.GetLevel();
 
@@ -845,7 +845,7 @@ OUString SvxNumRule::MakeNumString( const SvxNodeNum& rNum ) const
             for( ; i <= rNum.GetLevel(); ++i )
             {
                 const SvxNumberFormat& rNFmt = GetLevel( i );
-                if( SVX_NUM_NUMBER_NONE == rNFmt.GetNumberingType() )
+                if( SvxNumType::NUMBER_NONE == rNFmt.GetNumberingType() )
                 {
                     continue;
                 }
@@ -853,7 +853,7 @@ OUString SvxNumRule::MakeNumString( const SvxNodeNum& rNum ) const
                 bool bDot = true;
                 if( rNum.GetLevelVal()[ i ] )
                 {
-                    if(SVX_NUM_BITMAP != rNFmt.GetNumberingType())
+                    if(SvxNumType::BITMAP != rNFmt.GetNumberingType())
                         aStr += rNFmt.GetNumStr( rNum.GetLevelVal()[ i ], aLocale );
                     else
                         bDot = false;
@@ -877,7 +877,7 @@ void SvxNumRule::UnLinkGraphics()
     {
         SvxNumberFormat aFmt(GetLevel(i));
         const SvxBrushItem* pBrush = aFmt.GetBrush();
-        if(SVX_NUM_BITMAP == aFmt.GetNumberingType())
+        if(SvxNumType::BITMAP == aFmt.GetNumberingType())
         {
             const Graphic* pGraphic = nullptr;
             if(pBrush &&
@@ -891,8 +891,8 @@ void SvxNumRule::UnLinkGraphics()
                 aFmt.SetGraphicBrush( &aTempItem, &aFmt.GetGraphicSize(), &eOrient );
             }
         }
-        else if((SVX_NUM_BITMAP|LINK_TOKEN) == (int)aFmt.GetNumberingType())
-            aFmt.SetNumberingType(SVX_NUM_BITMAP);
+        else if(((int)SvxNumType::BITMAP|LINK_TOKEN) == (int)aFmt.GetNumberingType())
+            aFmt.SetNumberingType(SvxNumType::BITMAP);
         SetLevel(i, aFmt);
     }
 }
diff --git a/editeng/source/outliner/outliner.cxx b/editeng/source/outliner/outliner.cxx
index 41564f4..e0b33e0 100644
--- a/editeng/source/outliner/outliner.cxx
+++ b/editeng/source/outliner/outliner.cxx
@@ -335,7 +335,7 @@ sal_Int32 Outliner::GetBulletsNumberingStatus(
             // At least, exists one paragraph that has no Bullets/Numbering.
             break;
         }
-        else if ((pFmt->GetNumberingType() == SVX_NUM_BITMAP) || (pFmt->GetNumberingType() == SVX_NUM_CHAR_SPECIAL))
+        else if ((pFmt->GetNumberingType() == SvxNumType::BITMAP) || (pFmt->GetNumberingType() == SvxNumType::CHAR_SPECIAL))
         {
             // Having Bullets in this paragraph.
             nBulletsCount++;
@@ -814,7 +814,7 @@ bool Outliner::Collapse( Paragraph* pPara )
 vcl::Font Outliner::ImpCalcBulletFont( sal_Int32 nPara ) const
 {
     const SvxNumberFormat* pFmt = GetNumberFormat( nPara );
-    DBG_ASSERT( pFmt && ( pFmt->GetNumberingType() != SVX_NUM_BITMAP ) && ( pFmt->GetNumberingType() != SVX_NUM_NUMBER_NONE ), "ImpCalcBulletFont: Missing or BitmapBullet!" );
+    DBG_ASSERT( pFmt && ( pFmt->GetNumberingType() != SvxNumType::BITMAP ) && ( pFmt->GetNumberingType() != SvxNumType::NUMBER_NONE ), "ImpCalcBulletFont: Missing or BitmapBullet!" );
 
     vcl::Font aStdFont;
     if ( !pEditEngine->IsFlatMode() )
@@ -829,7 +829,7 @@ vcl::Font Outliner::ImpCalcBulletFont( sal_Int32 nPara ) const
 
     vcl::Font aBulletFont;
     const vcl::Font *pSourceFont = nullptr;
-    if ( pFmt->GetNumberingType() == SVX_NUM_CHAR_SPECIAL )
+    if ( pFmt->GetNumberingType() == SvxNumType::CHAR_SPECIAL )
     {
         pSourceFont = pFmt->GetBulletFont();
     }
@@ -903,13 +903,13 @@ void Outliner::PaintBullet( sal_Int32 nPara, const Point& rStartPos,
 
         Paragraph* pPara = pParaList->GetParagraph( nPara );
         const SvxNumberFormat* pFmt = GetNumberFormat( nPara );
-        if ( pFmt && ( pFmt->GetNumberingType() != SVX_NUM_NUMBER_NONE ) )
+        if ( pFmt && ( pFmt->GetNumberingType() != SvxNumType::NUMBER_NONE ) )
         {
-            if( pFmt->GetNumberingType() != SVX_NUM_BITMAP )
+            if( pFmt->GetNumberingType() != SvxNumType::BITMAP )
             {
                 vcl::Font aBulletFont( ImpCalcBulletFont( nPara ) );
                 // Use baseline
-                bool bSymbol = pFmt->GetNumberingType() == SVX_NUM_CHAR_SPECIAL;
+                bool bSymbol = pFmt->GetNumberingType() == SvxNumType::CHAR_SPECIAL;
                 aBulletFont.SetAlignment( bSymbol ? ALIGN_BOTTOM : ALIGN_BASELINE );
                 vcl::Font aOldFont = pOutDev->GetFont();
                 pOutDev->SetFont( aBulletFont );
@@ -1417,11 +1417,11 @@ Size Outliner::ImplGetBulletSize( sal_Int32 nPara )
         const SvxNumberFormat* pFmt = GetNumberFormat( nPara );
         DBG_ASSERT( pFmt, "ImplGetBulletSize - no Bullet!" );
 
-        if ( pFmt->GetNumberingType() == SVX_NUM_NUMBER_NONE )
+        if ( pFmt->GetNumberingType() == SvxNumType::NUMBER_NONE )
         {
             pPara->aBulSize = Size( 0, 0 );
         }
-        else if( pFmt->GetNumberingType() != SVX_NUM_BITMAP )
+        else if( pFmt->GetNumberingType() != SvxNumType::BITMAP )
         {
             OUString aBulletText = ImplGetBulletText( nPara );
             OutputDevice* pRefDev = pEditEngine->GetRefDevice();
@@ -1551,7 +1551,7 @@ Rectangle Outliner::ImpCalcBulletArea( sal_Int32 nPara, bool bAdjust, bool bRetu
                             + aInfos.nFirstLineTextHeight / 2
                             - aBulletSize.Height() / 2;
             // may prefer to print out on the baseline ...
-            if( ( pFmt->GetNumberingType() != SVX_NUM_NUMBER_NONE ) && ( pFmt->GetNumberingType() != SVX_NUM_BITMAP ) && ( pFmt->GetNumberingType() != SVX_NUM_CHAR_SPECIAL ) )
+            if( ( pFmt->GetNumberingType() != SvxNumType::NUMBER_NONE ) && ( pFmt->GetNumberingType() != SvxNumType::BITMAP ) && ( pFmt->GetNumberingType() != SvxNumType::CHAR_SPECIAL ) )
             {
                 vcl::Font aBulletFont( ImpCalcBulletFont( nPara ) );
                 if ( aBulletFont.GetCharSet() != RTL_TEXTENCODING_SYMBOL )
@@ -1618,11 +1618,11 @@ EBulletInfo Outliner::GetBulletInfo( sal_Int32 nPara )
     aInfo.bVisible = ImplHasNumberFormat( nPara );
 
     const SvxNumberFormat* pFmt = GetNumberFormat( nPara );
-    aInfo.nType = pFmt ? pFmt->GetNumberingType() : 0;
+    aInfo.nType = pFmt ? pFmt->GetNumberingType() : SvxNumType::CHARS_UPPER_LETTER;
 
     if( pFmt )
     {
-        if( pFmt->GetNumberingType() != SVX_NUM_BITMAP )
+        if( pFmt->GetNumberingType() != SvxNumType::BITMAP )
         {
             aInfo.aText = ImplGetBulletText( nPara );
 
@@ -1846,14 +1846,14 @@ void Outliner::ImplCalcBulletText( sal_Int32 nPara, bool bRecalcLevel, bool bRec
     {
         OUString aBulletText;
         const SvxNumberFormat* pFmt = GetNumberFormat( nPara );
-        if( pFmt && ( pFmt->GetNumberingType() != SVX_NUM_BITMAP ) )
+        if( pFmt && ( pFmt->GetNumberingType() != SvxNumType::BITMAP ) )
         {
             aBulletText += pFmt->GetPrefix();
-            if( pFmt->GetNumberingType() == SVX_NUM_CHAR_SPECIAL )
+            if( pFmt->GetNumberingType() == SvxNumType::CHAR_SPECIAL )
             {
                 aBulletText += OUStringLiteral1(pFmt->GetBulletChar());
             }
-            else if( pFmt->GetNumberingType() != SVX_NUM_NUMBER_NONE )
+            else if( pFmt->GetNumberingType() != SvxNumType::NUMBER_NONE )
             {
                 aBulletText += pFmt->GetNumStr( ImplGetNumbering( nPara, pFmt ) );
             }
diff --git a/editeng/source/outliner/outlvw.cxx b/editeng/source/outliner/outlvw.cxx
index a08eb17..644e658 100644
--- a/editeng/source/outliner/outlvw.cxx
+++ b/editeng/source/outliner/outlvw.cxx
@@ -872,8 +872,8 @@ void OutlinerView::ToggleBullets()
                 {
                     const SvxNumberFormat* pFmt = pOwner ->GetNumberFormat( nPara );
                     if ( !pFmt
-                         || ( pFmt->GetNumberingType() != SVX_NUM_BITMAP
-                              && pFmt->GetNumberingType() != SVX_NUM_CHAR_SPECIAL ) )
+                         || ( pFmt->GetNumberingType() != SvxNumType::BITMAP
+                              && pFmt->GetNumberingType() != SvxNumType::CHAR_SPECIAL ) )
                     {
                         SfxItemSet aAttrs( pOwner->GetParaAttribs( nPara ) );
                         SvxNumRule aNewNumRule( *pDefaultBulletNumRule );
@@ -1033,15 +1033,15 @@ void OutlinerView::ApplyBulletsNumbering(
                     }
                     else
                     {
-                        sal_Int16 nNumType = pFmt->GetNumberingType();
+                        SvxNumType nNumType = pFmt->GetNumberingType();
                         if ( bHandleBullets
-                             && nNumType != SVX_NUM_BITMAP && nNumType != SVX_NUM_CHAR_SPECIAL)
+                             && nNumType != SvxNumType::BITMAP && nNumType != SvxNumType::CHAR_SPECIAL)
                         {
                             // Set to Normal bullet, old bullet type is Numbering bullet.
                             bApplyNumRule = true;
                         }
                         else if ( !bHandleBullets
-                                  && (nNumType == SVX_NUM_BITMAP || nNumType == SVX_NUM_CHAR_SPECIAL))
+                                  && (nNumType == SvxNumType::BITMAP || nNumType == SvxNumType::CHAR_SPECIAL))
                         {
                             // Set to Numbering bullet, old bullet type is Normal bullet.
                             bApplyNumRule = true;
diff --git a/editeng/source/uno/unoedprx.cxx b/editeng/source/uno/unoedprx.cxx
index 363ed42..e02f16a 100644
--- a/editeng/source/uno/unoedprx.cxx
+++ b/editeng/source/uno/unoedprx.cxx
@@ -189,7 +189,7 @@ void SvxAccessibleTextIndex::SetEEIndex( sal_uInt16 nEEIndex, const SvxTextForwa
     // any text bullets?
     if( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
         aBulletInfo.bVisible &&
-        aBulletInfo.nType != SVX_NUM_BITMAP )
+        aBulletInfo.nType != SvxNumType::BITMAP )
     {
         mnIndex += aBulletInfo.aText.getLength();
     }
@@ -237,7 +237,7 @@ void SvxAccessibleTextIndex::SetIndex( sal_Int32 nIndex, const SvxTextForwarder&
     // any text bullets?
     if( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
         aBulletInfo.bVisible &&
-        aBulletInfo.nType != SVX_NUM_BITMAP )
+        aBulletInfo.nType != SvxNumType::BITMAP )
     {
         sal_Int32 nBulletLen = aBulletInfo.aText.getLength();
 
@@ -759,7 +759,7 @@ Rectangle SvxAccessibleTextAdapter::GetParaBounds( sal_Int32 nPara ) const
 
     if( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
         aBulletInfo.bVisible &&
-        aBulletInfo.nType != SVX_NUM_BITMAP )
+        aBulletInfo.nType != SvxNumType::BITMAP )
     {
         // include bullet in para bounding box
         Rectangle aRect( mpTextForwarder->GetParaBounds( nPara ) );
@@ -806,7 +806,7 @@ bool SvxAccessibleTextAdapter::GetIndexAtPoint( const Point& rPoint, sal_Int32&
     // any text bullets?
     if( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
         aBulletInfo.bVisible &&
-        aBulletInfo.nType != SVX_NUM_BITMAP )
+        aBulletInfo.nType != SvxNumType::BITMAP )
     {
         if( aBulletInfo.aBounds.IsInside( rPoint) )
         {
@@ -1069,7 +1069,7 @@ bool SvxAccessibleTextAdapter::HaveImageBullet( sal_Int32 nPara ) const
 
     return ( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
             aBulletInfo.bVisible &&
-            aBulletInfo.nType == SVX_NUM_BITMAP );
+            aBulletInfo.nType == SvxNumType::BITMAP );
 }
 
 bool SvxAccessibleTextAdapter::HaveTextBullet( sal_Int32 nPara ) const
@@ -1078,7 +1078,7 @@ bool SvxAccessibleTextAdapter::HaveTextBullet( sal_Int32 nPara ) const
 
     return ( aBulletInfo.nParagraph != EE_PARA_NOT_FOUND &&
             aBulletInfo.bVisible &&
-            aBulletInfo.nType != SVX_NUM_BITMAP );
+            aBulletInfo.nType != SvxNumType::BITMAP );
 }
 
 bool SvxAccessibleTextAdapter::IsEditable( const ESelection& rSel )
diff --git a/editeng/source/uno/unonrule.cxx b/editeng/source/uno/unonrule.cxx
index 07a7703..1026252 100644
--- a/editeng/source/uno/unonrule.cxx
+++ b/editeng/source/uno/unonrule.cxx
@@ -201,7 +201,7 @@ Sequence<beans::PropertyValue> SvxUnoNumberingRules::getNumberingRuleByIndex(sal
         pArray[nIdx++] = aSuffixProp;
     }
 
-    if(SVX_NUM_CHAR_SPECIAL == rFmt.GetNumberingType())
+    if(SvxNumType::CHAR_SPECIAL == rFmt.GetNumberingType())
     {
         sal_Unicode nCode = rFmt.GetBulletChar();
         OUString aStr( &nCode, 1 );
@@ -452,7 +452,7 @@ void SvxUnoNumberingRules::setNumberingRuleByIndex(const Sequence<beans::Propert
     }
 
     // check that we always have a brush item for bitmap numbering
-    if( aFmt.GetNumberingType() == SVX_NUM_BITMAP )
+    if( aFmt.GetNumberingType() == SvxNumType::BITMAP )
     {
         if( nullptr == aFmt.GetBrush() )
         {
diff --git a/filter/source/msfilter/svdfppt.cxx b/filter/source/msfilter/svdfppt.cxx
index 9b94137..2d67876 100644
--- a/filter/source/msfilter/svdfppt.cxx
+++ b/filter/source/msfilter/svdfppt.cxx
@@ -3441,7 +3441,7 @@ bool PPTNumberFormatCreator::ImplGetExtNumberFormat( SdrPowerPointImport& rManag
             Size aPrefSize( aGraphic.GetPrefSize() );
             sal_uInt32 nWidth = ( nHeight * aPrefSize.Width() ) / aPrefSize.Height();
             rNumberFormat.SetGraphicSize( Size( nWidth, nHeight ) );
-            rNumberFormat.SetNumberingType ( SVX_NUM_BITMAP );
+            rNumberFormat.SetNumberingType ( SvxNumType::BITMAP );
         }
     }
     else if ( nHasAnm )
@@ -3451,112 +3451,112 @@ bool PPTNumberFormatCreator::ImplGetExtNumberFormat( SdrPowerPointImport& rManag
             default :
             case 0 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_CHARS_LOWER_LETTER );
+                rNumberFormat.SetNumberingType( SvxNumType::CHARS_LOWER_LETTER );
                 rNumberFormat.SetSuffix( "." );
             }
             break;
             case 1 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_CHARS_UPPER_LETTER );
+                rNumberFormat.SetNumberingType( SvxNumType::CHARS_UPPER_LETTER );
                 rNumberFormat.SetSuffix( "." );
             }
             break;
             case 2 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ARABIC );
+                rNumberFormat.SetNumberingType( SvxNumType::ARABIC );
                 rNumberFormat.SetSuffix( ")" );
             }
             break;
             case 3 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ARABIC );
+                rNumberFormat.SetNumberingType( SvxNumType::ARABIC );
                 rNumberFormat.SetSuffix( "." );
             }
             break;
             case 4 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ROMAN_LOWER );
+                rNumberFormat.SetNumberingType( SvxNumType::ROMAN_LOWER );
                 rNumberFormat.SetSuffix( ")" );
                 rNumberFormat.SetPrefix( "(" );
             }
             break;
             case 5 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ROMAN_LOWER );
+                rNumberFormat.SetNumberingType( SvxNumType::ROMAN_LOWER );
                 rNumberFormat.SetSuffix( ")" );
             }
             break;
             case 6 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ROMAN_LOWER );
+                rNumberFormat.SetNumberingType( SvxNumType::ROMAN_LOWER );
                 rNumberFormat.SetSuffix( "." );
             }
             break;
             case 7 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ROMAN_UPPER );
+                rNumberFormat.SetNumberingType( SvxNumType::ROMAN_UPPER );
                 rNumberFormat.SetSuffix( "." );
             }
             break;
             case 8 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_CHARS_LOWER_LETTER );
+                rNumberFormat.SetNumberingType( SvxNumType::CHARS_LOWER_LETTER );
                 rNumberFormat.SetSuffix( ")" );
                 rNumberFormat.SetPrefix( "(" );
             }
             break;
             case 9 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_CHARS_LOWER_LETTER );
+                rNumberFormat.SetNumberingType( SvxNumType::CHARS_LOWER_LETTER );
                 rNumberFormat.SetSuffix( ")" );
             }
             break;
             case 10 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_CHARS_UPPER_LETTER );
+                rNumberFormat.SetNumberingType( SvxNumType::CHARS_UPPER_LETTER );
                 rNumberFormat.SetSuffix( ")" );
                 rNumberFormat.SetPrefix( "(" );
             }
             break;
             case 11 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_CHARS_UPPER_LETTER );
+                rNumberFormat.SetNumberingType( SvxNumType::CHARS_UPPER_LETTER );
                 rNumberFormat.SetSuffix( ")" );
             }
             break;
             case 12 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ARABIC );
+                rNumberFormat.SetNumberingType( SvxNumType::ARABIC );
                 rNumberFormat.SetSuffix( ")" );
                 rNumberFormat.SetPrefix( "(" );
             }
             break;
             case 13 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ARABIC );
+                rNumberFormat.SetNumberingType( SvxNumType::ARABIC );
             }
             break;
             case 14 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ROMAN_UPPER );
+                rNumberFormat.SetNumberingType( SvxNumType::ROMAN_UPPER );
                 rNumberFormat.SetSuffix( ")" );
                 rNumberFormat.SetPrefix( "(" );
             }
             break;
             case 15 :
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_ROMAN_UPPER );
+                rNumberFormat.SetNumberingType( SvxNumType::ROMAN_UPPER );
                 rNumberFormat.SetSuffix( ")" );
             }
             break;
             case 16: // Simplified Chinese.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_NUMBER_UPPER_ZH );
+                rNumberFormat.SetNumberingType( SvxNumType::NUMBER_UPPER_ZH );
             }
             break;
             case 17: // Simplified Chinese with single-byte period.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_NUMBER_UPPER_ZH );
+                rNumberFormat.SetNumberingType( SvxNumType::NUMBER_UPPER_ZH );
                 rNumberFormat.SetSuffix( "." );
             }
             break;
@@ -3564,45 +3564,45 @@ bool PPTNumberFormatCreator::ImplGetExtNumberFormat( SdrPowerPointImport& rManag
             case 19: // Wingdings white circle numbers.
             case 20: // Wingdings black circle numbers.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_CIRCLE_NUMBER );
+                rNumberFormat.SetNumberingType( SvxNumType::CIRCLE_NUMBER );
             }
             break;
             case 21: // Traditional Chinese.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_NUMBER_UPPER_ZH_TW );
+                rNumberFormat.SetNumberingType( SvxNumType::NUMBER_UPPER_ZH_TW );
             }
             break;
             case 22: // Traditional Chinese with single-byte period.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_NUMBER_UPPER_ZH_TW );
+                rNumberFormat.SetNumberingType( SvxNumType::NUMBER_UPPER_ZH_TW );
                 rNumberFormat.SetSuffix( "." );
             }
             break;
             case 26: // Japanese/Korean.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_NUMBER_LOWER_ZH );
+                rNumberFormat.SetNumberingType( SvxNumType::NUMBER_LOWER_ZH );
             }
             break;
             case 27: // Japanese/Korean with single-byte period.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_NUMBER_LOWER_ZH );
+                rNumberFormat.SetNumberingType( SvxNumType::NUMBER_LOWER_ZH );
                 rNumberFormat.SetSuffix( "." );
             }
             break;
             case 28: // Double-byte Arabic numbers.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_FULL_WIDTH_ARABIC );
+                rNumberFormat.SetNumberingType( SvxNumType::FULLWIDTH_ARABIC );
             }
             break;
             case 29: // Double-byte Arabic numbers with double-byte period.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_FULL_WIDTH_ARABIC );
+                rNumberFormat.SetNumberingType( SvxNumType::FULLWIDTH_ARABIC );
                 rNumberFormat.SetSuffix( OUString( sal_Unicode(0xff0e) ) );
             }
             break;
             case 38: // Japanese with double-byte period.
             {
-                rNumberFormat.SetNumberingType( SVX_NUM_NUMBER_LOWER_ZH ); // No such type. Instead with Lower Chinese Number
+                rNumberFormat.SetNumberingType( SvxNumType::NUMBER_LOWER_ZH ); // No such type. Instead with Lower Chinese Number
                 rNumberFormat.SetSuffix( OUString( sal_Unicode(0xff0e) ) );
             }
             break;
@@ -3637,18 +3637,18 @@ void PPTNumberFormatCreator::GetNumberFormat( SdrPowerPointImport& rManager, Svx
 
     boost::optional< sal_Int16 > oStartNumbering;
     ImplGetExtNumberFormat( rManager, rNumberFormat, nLevel, nInstance, TSS_Type::Unknown, oStartNumbering, rCharLevel.mnFontHeight, nullptr );
-    if ( ( rNumberFormat.GetNumberingType() != SVX_NUM_BITMAP ) && ( nBulletHeight > 0x7fff ) )
+    if ( ( rNumberFormat.GetNumberingType() != SvxNumType::BITMAP ) && ( nBulletHeight > 0x7fff ) )
         nBulletHeight = rCharLevel.mnFontHeight ? ((-((sal_Int16)nBulletHeight)) * 100 ) / rCharLevel.mnFontHeight : 100;
     ImplGetNumberFormat( rManager, rNumberFormat, nLevel );
     switch ( rNumberFormat.GetNumberingType() )
     {
-        case SVX_NUM_CHARS_UPPER_LETTER :
-        case SVX_NUM_CHARS_LOWER_LETTER :
-        case SVX_NUM_ROMAN_UPPER :
-        case SVX_NUM_ROMAN_LOWER :
-        case SVX_NUM_ARABIC :
-        case SVX_NUM_CHARS_UPPER_LETTER_N :
-        case SVX_NUM_CHARS_LOWER_LETTER_N :
+        case SvxNumType::CHARS_UPPER_LETTER :
+        case SvxNumType::CHARS_LOWER_LETTER :
+        case SvxNumType::ROMAN_UPPER :
+        case SvxNumType::ROMAN_LOWER :
+        case SvxNumType::ARABIC :
+        case SvxNumType::CHARS_UPPER_LETTER_N :
+        case SvxNumType::CHARS_LOWER_LETTER_N :
         {
             sal_uInt32 nFont = rCharLevel.mnFont;
             PptFontEntityAtom* pFontEnityAtom = rManager.GetFontEnityAtom( nFont );
@@ -3680,7 +3680,7 @@ bool PPTNumberFormatCreator::GetNumberFormat( SdrPowerPointImport& rManager, Svx
     nHardCount += pParaObj->GetAttrib( PPT_ParaAttr_BulletOfs, nBulletOfs, nDestinationInstance ) ? 1 : 0;
 
     if ( nIsBullet )
-        rNumberFormat.SetNumberingType( SVX_NUM_CHAR_SPECIAL );
+        rNumberFormat.SetNumberingType( SvxNumType::CHAR_SPECIAL );
 
     sal_uInt32 nFontHeight = 24;
     PPTPortionObj* pPtr = pParaObj->First();
@@ -3690,7 +3690,7 @@ bool PPTNumberFormatCreator::GetNumberFormat( SdrPowerPointImport& rManager, Svx
         nHardCount += ImplGetExtNumberFormat( rManager, rNumberFormat, pParaObj->pParaSet->mnDepth,
                                                     pParaObj->mnInstance, nDestinationInstance, rStartNumbering, nFontHeight, pParaObj ) ? 1 : 0;
 
-    if ( rNumberFormat.GetNumberingType() != SVX_NUM_BITMAP )
+    if ( rNumberFormat.GetNumberingType() != SvxNumType::BITMAP )
         pParaObj->UpdateBulletRelSize( nBulletHeight );
     if ( nHardCount )
         ImplGetNumberFormat( rManager, rNumberFormat, pParaObj->pParaSet->mnDepth );
@@ -3699,13 +3699,13 @@ bool PPTNumberFormatCreator::GetNumberFormat( SdrPowerPointImport& rManager, Svx
     {
         switch ( rNumberFormat.GetNumberingType() )
         {
-            case SVX_NUM_CHARS_UPPER_LETTER :
-            case SVX_NUM_CHARS_LOWER_LETTER :
-            case SVX_NUM_ROMAN_UPPER :
-            case SVX_NUM_ROMAN_LOWER :
-            case SVX_NUM_ARABIC :
-            case SVX_NUM_CHARS_UPPER_LETTER_N :
-            case SVX_NUM_CHARS_LOWER_LETTER_N :
+            case SvxNumType::CHARS_UPPER_LETTER :
+            case SvxNumType::CHARS_LOWER_LETTER :
+            case SvxNumType::ROMAN_UPPER :
+            case SvxNumType::ROMAN_LOWER :
+            case SvxNumType::ARABIC :
+            case SvxNumType::CHARS_UPPER_LETTER_N :
+            case SvxNumType::CHARS_LOWER_LETTER_N :
             {
                 if ( pPtr )
                 {
@@ -4368,7 +4368,7 @@ PPTStyleSheet::PPTStyleSheet( const DffRecordHeader& rSlideHd, SvStream& rIn, Sd
         {
             const PPTParaLevel& rParaLevel = mpParaSheet[ i ]->maParaLevel[ nCount ];
             const PPTCharLevel& rCharLevel = mpCharSheet[ i ]->maCharLevel[ nCount ];
-            SvxNumberFormat aNumberFormat( SVX_NUM_CHAR_SPECIAL );
+            SvxNumberFormat aNumberFormat( SvxNumType::CHAR_SPECIAL );
             aNumberFormat.SetBulletChar( ' ' );
             GetNumberFormat( rManager, aNumberFormat, nCount, rParaLevel, rCharLevel, i );
             aRule.SetLevel( nDepth++, aNumberFormat );
@@ -6170,10 +6170,10 @@ void PPTParagraphObj::ApplyTo( SfxItemSet& rSet,  boost::optional< sal_Int16 >&
         SvxNumBulletItem* pNumBulletItem = mrStyleSheet.mpNumBulletItem[ nInstance ];
         if ( pNumBulletItem )
         {
-            SvxNumberFormat aNumberFormat( SVX_NUM_NUMBER_NONE );
+            SvxNumberFormat aNumberFormat( SvxNumType::NUMBER_NONE );
             if ( GetNumberFormat( rManager, aNumberFormat, this, nDestinationInstance, rStartNumbering ) )
             {
-                if ( aNumberFormat.GetNumberingType() == SVX_NUM_NUMBER_NONE )
+                if ( aNumberFormat.GetNumberingType() == SvxNumType::NUMBER_NONE )
                 {
                     aNumberFormat.SetAbsLSpace( 0 );
                     aNumberFormat.SetFirstLineOffset( 0 );
diff --git a/filter/source/svg/svgexport.cxx b/filter/source/svg/svgexport.cxx
index 21e4da0..5ae3203 100644
--- a/filter/source/svg/svgexport.cxx
+++ b/filter/source/svg/svgexport.cxx
@@ -909,9 +909,9 @@ void SVGFilter::implGenerateMetaData()
         }
 
         // Add a (global) Page Numbering Type attribute for the document
-        // NOTE: at present pSdrModel->GetPageNumType() returns always css::style::NumberingType::ARABIC
+        // NOTE: at present pSdrModel->GetPageNumType() returns always SvxNumType::ARABIC
         // so the following code fragment is pretty useless
-        sal_Int32 nPageNumberingType = css::style::NumberingType::ARABIC;
+        SvxNumType nPageNumberingType = SvxNumType::ARABIC;
         SvxDrawPage* pSvxDrawPage = SvxDrawPage::getImplementation( mSelectedPages[0] );
         if( pSvxDrawPage )
         {
@@ -922,24 +922,24 @@ void SVGFilter::implGenerateMetaData()
             // That is used by CalcFieldHdl method.
             mVisiblePagePropSet.nPageNumberingType = nPageNumberingType;
         }
-        if( nPageNumberingType != css::style::NumberingType::NUMBER_NONE )
+        if( nPageNumberingType != SvxNumType::NUMBER_NONE )
         {
             OUString sNumberingType;
             switch( nPageNumberingType )
             {
-                case css::style::NumberingType::CHARS_UPPER_LETTER:
+                case SvxNumType::CHARS_UPPER_LETTER:
                     sNumberingType = "alpha-upper";
                     break;
-                case css::style::NumberingType::CHARS_LOWER_LETTER:
+                case SvxNumType::CHARS_LOWER_LETTER:
                     sNumberingType = "alpha-lower";
                     break;
-                case css::style::NumberingType::ROMAN_UPPER:
+                case SvxNumType::ROMAN_UPPER:
                     sNumberingType = "roman-upper";
                     break;
-                case css::style::NumberingType::ROMAN_LOWER:
+                case SvxNumType::ROMAN_LOWER:
                     sNumberingType = "roman-lower";
                     break;
-                case css::style::NumberingType::ARABIC:
+                case SvxNumType::ARABIC:
                     // arabic numbering type is the default, so we do not append any attribute for it
                 default:
                     // in case the numbering type is not handled we fall back on arabic numbering
@@ -1009,7 +1009,7 @@ void SVGFilter::implGenerateMetaData()
 
                             //  Page Number Field
                             xPropSet->getPropertyValue( "IsPageNumberVisible" )  >>= bPageNumberVisibility;
-                            bPageNumberVisibility = bPageNumberVisibility && ( nPageNumberingType != css::style::NumberingType::NUMBER_NONE );
+                            bPageNumberVisibility = bPageNumberVisibility && ( nPageNumberingType != SvxNumType::NUMBER_NONE );
                             if( bPageNumberVisibility ) // visibility default value: 'hidden'
                             {
                                 mpSVGExport->AddAttribute( XML_NAMESPACE_NONE, NSPREFIX "page-number-visibility", "visible" );
@@ -1355,7 +1355,7 @@ void SVGFilter::implGetPagePropSet( const Reference< XDrawPage > & rxPage )
     mVisiblePagePropSet.bIsDateTimeFieldVisible             = true;
     mVisiblePagePropSet.bIsDateTimeFieldFixed               = true;
     mVisiblePagePropSet.nDateTimeFormat                     = SVXDATEFORMAT_B;
-    mVisiblePagePropSet.nPageNumberingType                  = css::style::NumberingType::ARABIC;
+    mVisiblePagePropSet.nPageNumberingType                  = SvxNumType::ARABIC;
 
     //  We collect info on master page elements visibility, and placeholder text shape content.
     Reference< XPropertySet > xPropSet( rxPage, UNO_QUERY );
@@ -2250,20 +2250,20 @@ IMPL_LINK( SVGFilter, CalcFieldHdl, EditFieldInfo*, pInfo, void )
             {
                 switch( mVisiblePagePropSet.nPageNumberingType )
                 {
-                    case css::style::NumberingType::CHARS_UPPER_LETTER:
+                    case SvxNumType::CHARS_UPPER_LETTER:
                         aRepresentation += "QWERTYUIOPASDFGHJKLZXCVBNM";
                         break;
-                    case css::style::NumberingType::CHARS_LOWER_LETTER:
+                    case SvxNumType::CHARS_LOWER_LETTER:
                         aRepresentation += "qwertyuiopasdfghjklzxcvbnm";
                         break;
-                    case css::style::NumberingType::ROMAN_UPPER:
+                    case SvxNumType::ROMAN_UPPER:
                         aRepresentation += "IVXLCDM";
                         break;
-                    case css::style::NumberingType::ROMAN_LOWER:
+                    case SvxNumType::ROMAN_LOWER:
                         aRepresentation += "ivxlcdm";
                         break;
                     // arabic numbering type is the default
-                    case css::style::NumberingType::ARABIC:
+                    case SvxNumType::ARABIC:
                     // in case the numbering type is not handled we fall back on arabic numbering
                     default:
                         aRepresentation += "0123456789";
diff --git a/filter/source/svg/svgfilter.hxx b/filter/source/svg/svgfilter.hxx
index 10574b2..d66b7e7 100644
--- a/filter/source/svg/svgfilter.hxx
+++ b/filter/source/svg/svgfilter.hxx
@@ -140,16 +140,16 @@ public:
 
 struct PagePropertySet
 {
-    bool               bIsBackgroundVisible;
-    bool               bAreBackgroundObjectsVisible;
-    bool               bIsPageNumberFieldVisible;
-    bool               bIsDateTimeFieldVisible;
-    bool               bIsFooterFieldVisible;
-    bool               bIsHeaderFieldVisible;
-    sal_Int32              nPageNumberingType;
-    bool               bIsDateTimeFieldFixed;
-    sal_Int16              nPageNumber;
-    sal_Int32              nDateTimeFormat;
+    bool            bIsBackgroundVisible;
+    bool            bAreBackgroundObjectsVisible;
+    bool            bIsPageNumberFieldVisible;
+    bool            bIsDateTimeFieldVisible;
+    bool            bIsFooterFieldVisible;
+    bool            bIsHeaderFieldVisible;
+    SvxNumType      nPageNumberingType;
+    bool            bIsDateTimeFieldFixed;
+    sal_Int16       nPageNumber;
+    sal_Int32       nDateTimeFormat;
     OUString        sDateTimeText;
     OUString        sFooterText;
     OUString        sHeaderText;
diff --git a/include/editeng/numitem.hxx b/include/editeng/numitem.hxx
index a417029..e23783f 100644
--- a/include/editeng/numitem.hxx
+++ b/include/editeng/numitem.hxx
@@ -59,7 +59,7 @@ class EDITENG_DLLPUBLIC SvxNumberType
     bool            bShowSymbol;        // Also show Symbol ?
 
 public:
-    explicit SvxNumberType(SvxNumType nType = SVX_NUM_ARABIC);
+    explicit SvxNumberType(SvxNumType nType = SvxNumType::ARABIC);
     SvxNumberType(const SvxNumberType& rType);
     ~SvxNumberType();
 
@@ -74,9 +74,9 @@ public:
 
     bool            IsTextFormat() const
                     {
-                        return css::style::NumberingType::NUMBER_NONE != nNumType &&
-                               css::style::NumberingType::CHAR_SPECIAL != nNumType &&
-                               css::style::NumberingType::BITMAP != nNumType;
+                        return SvxNumType::NUMBER_NONE != nNumType &&
+                               SvxNumType::CHAR_SPECIAL != nNumType &&
+                               SvxNumType::BITMAP != nNumType;
                     }
 };
 
diff --git a/include/editeng/outliner.hxx b/include/editeng/outliner.hxx
index 034de47..3a17679 100644
--- a/include/editeng/outliner.hxx
+++ b/include/editeng/outliner.hxx
@@ -555,14 +555,14 @@ public:
 struct EBulletInfo
 {
     bool        bVisible;
-    sal_uInt16  nType;          // see SvxNumberType
+    SvxNumType  nType;
     OUString    aText;
     SvxFont     aFont;
     Graphic     aGraphic;
     sal_Int32   nParagraph;
     Rectangle   aBounds;
 
-    EBulletInfo() : bVisible( false ), nType( 0 ), nParagraph( EE_PARA_NOT_FOUND ) {}
+    EBulletInfo() : bVisible( false ), nType( SvxNumType::CHARS_UPPER_LETTER ), nParagraph( EE_PARA_NOT_FOUND ) {}
 };
 
 enum class OutlinerMode {
diff --git a/include/editeng/svxenum.hxx b/include/editeng/svxenum.hxx
index 670c360..0880f15 100644
--- a/include/editeng/svxenum.hxx
+++ b/include/editeng/svxenum.hxx
@@ -149,65 +149,65 @@ enum class SvxSpellArea
 /**
  * these must match the values in css::style::NumberingType
  */
-enum SvxNumType : sal_Int16
+enum class SvxNumType : sal_Int16
 {
-    SVX_NUM_CHARS_UPPER_LETTER    = css::style::NumberingType::CHARS_UPPER_LETTER,    // Counts from a-z, aa - az, ba - bz, ...
-    SVX_NUM_CHARS_LOWER_LETTER    = css::style::NumberingType::CHARS_LOWER_LETTER,
-    SVX_NUM_ROMAN_UPPER           = css::style::NumberingType::ROMAN_UPPER,
-    SVX_NUM_ROMAN_LOWER           = css::style::NumberingType::ROMAN_LOWER,
-    SVX_NUM_ARABIC                = css::style::NumberingType::ARABIC,
-    SVX_NUM_NUMBER_NONE           = css::style::NumberingType::NUMBER_NONE,
-    SVX_NUM_CHAR_SPECIAL          = css::style::NumberingType::CHAR_SPECIAL,          // Bullet
-    SVX_NUM_PAGEDESC              = css::style::NumberingType::PAGE_DESCRIPTOR,       // Numbering from the page template
-    SVX_NUM_BITMAP                = css::style::NumberingType::BITMAP,
-    SVX_NUM_CHARS_UPPER_LETTER_N  = css::style::NumberingType::CHARS_UPPER_LETTER_N,  // Counts from  a-z, aa-zz, aaa-zzz
-    SVX_NUM_CHARS_LOWER_LETTER_N  = css::style::NumberingType::CHARS_LOWER_LETTER_N,
-    SVX_NUM_TRANSLITERATION       = css::style::NumberingType::TRANSLITERATION,
-    SVX_NUM_NATIVE_NUMBERING      = css::style::NumberingType::NATIVE_NUMBERING,
-    SVX_NUM_FULL_WIDTH_ARABIC     = css::style::NumberingType::FULLWIDTH_ARABIC,
-    SVX_NUM_CIRCLE_NUMBER         = css::style::NumberingType::CIRCLE_NUMBER,
-    SVX_NUM_NUMBER_LOWER_ZH       = css::style::NumberingType::NUMBER_LOWER_ZH,
-    SVX_NUM_NUMBER_UPPER_ZH       = css::style::NumberingType::NUMBER_UPPER_ZH,
-    SVX_NUM_NUMBER_UPPER_ZH_TW    = css::style::NumberingType::NUMBER_UPPER_ZH_TW,
-    SVX_NUM_TIAN_GAN_ZH           = css::style::NumberingType::TIAN_GAN_ZH,
-    SVX_NUM_DI_ZI_ZH              = css::style::NumberingType::DI_ZI_ZH,
-    SVX_NUM_NUMBER_TRADITIONAL_JA = css::style::NumberingType::NUMBER_TRADITIONAL_JA,
-    SVX_NUM_AIU_FULLWIDTH_JA      = css::style::NumberingType::AIU_FULLWIDTH_JA,
-    SVX_NUM_AIU_HALFWIDTH_JA      = css::style::NumberingType::AIU_HALFWIDTH_JA,
-    SVX_NUM_IROHA_FULLWIDTH_JA    = css::style::NumberingType::IROHA_FULLWIDTH_JA,
-    SVX_NUM_IROHA_HALFWIDTH_JA    = css::style::NumberingType::IROHA_HALFWIDTH_JA,
-    SVX_NUM_NUMBER_UPPER_KO       = css::style::NumberingType::NUMBER_UPPER_KO,
-    SVX_NUM_NUMBER_HANGUL_KO      = css::style::NumberingType::NUMBER_HANGUL_KO,
-    SVX_NUM_HANGUL_JAMO_KO        = css::style::NumberingType::HANGUL_JAMO_KO,
-    SVX_NUM_HANGUL_SYLLABLE_KO    = css::style::NumberingType::HANGUL_SYLLABLE_KO,
-    SVX_NUM_HANGUL_CIRCLED_JAMO_KO = css::style::NumberingType::HANGUL_CIRCLED_JAMO_KO,
-    SVX_NUM_HANGUL_CIRCLED_SYLLABLE_KO = css::style::NumberingType::HANGUL_CIRCLED_SYLLABLE_KO,
-    SVX_NUM_CHARS_ARABIC          = css::style::NumberingType::CHARS_ARABIC,
-    SVX_NUM_CHARS_THAI            = css::style::NumberingType::CHARS_THAI,
-    SVX_NUM_CHARS_HEBREW          = css::style::NumberingType::CHARS_HEBREW,
-    SVX_NUM_CHARS_NEPALI          = css::style::NumberingType::CHARS_NEPALI,
-    SVX_NUM_CHARS_KHMER           = css::style::NumberingType::CHARS_KHMER,
-    SVX_NUM_CHARS_LAO             = css::style::NumberingType::CHARS_LAO,
-    SVX_NUM_CHARS_TIBETAN         = css::style::NumberingType::CHARS_TIBETAN,
-    SVX_NUM_CHARS_CYRILLIC_UPPER_LETTER_BG = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_BG,
-    SVX_NUM_CHARS_CYRILLIC_LOWER_LETTER_BG = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_BG,
-    SVX_NUM_CHARS_CYRILLIC_UPPER_LETTER_N_BG = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_N_BG,
-    SVX_NUM_CHARS_CYRILLIC_LOWER_LETTER_N_BG = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_N_BG,
-    SVX_NUM_CHARS_CYRILLIC_UPPER_LETTER_RU = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_RU,
-    SVX_NUM_CHARS_CYRILLIC_LOWER_LETTER_RU = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_RU,
-    SVX_NUM_CHARS_CYRILLIC_UPPER_LETTER_N_RU = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_N_RU,
-    SVX_NUM_CHARS_CYRILLIC_LOWER_LETTER_N_RU = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_N_RU,
-    SVX_NUM_CHARS_PERSIAN         = css::style::NumberingType::CHARS_PERSIAN,
-    SVX_NUM_CHARS_MYANMAR         = css::style::NumberingType::CHARS_MYANMAR,
-    SVX_NUM_CHARS_CYRILLIC_UPPER_LETTER_SR = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_SR,
-    SVX_NUM_CHARS_CYRILLIC_LOWER_LETTER_SR = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_SR,
-    SVX_NUM_CHARS_CYRILLIC_UPPER_LETTER_N_SR = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_N_SR,
-    SVX_NUM_CHARS_CYRILLIC_LOWER_LETTER_N_SR = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_N_SR,
-    SVX_NUM_CHARS_GREEK_UPPER_LETTER = css::style::NumberingType::CHARS_GREEK_UPPER_LETTER,
-    SVX_NUM_CHARS_GREEK_LOWER_LETTER = css::style::NumberingType::CHARS_GREEK_LOWER_LETTER,
-    SVX_NUM_CHARS_ARABIC_ABJAD    = css::style::NumberingType::CHARS_ARABIC_ABJAD,
-    SVX_NUM_CHARS_PERSIAN_WORD    = css::style::NumberingType::CHARS_PERSIAN_WORD,
-    SVX_NUM_NUMBER_HEBREW         = css::style::NumberingType::NUMBER_HEBREW
+    CHARS_UPPER_LETTER               = css::style::NumberingType::CHARS_UPPER_LETTER,    // Counts from a-z, aa - az, ba - bz, ...
+    CHARS_LOWER_LETTER               = css::style::NumberingType::CHARS_LOWER_LETTER,
+    ROMAN_UPPER                      = css::style::NumberingType::ROMAN_UPPER,
+    ROMAN_LOWER                      = css::style::NumberingType::ROMAN_LOWER,
+    ARABIC                           = css::style::NumberingType::ARABIC,
+    NUMBER_NONE                      = css::style::NumberingType::NUMBER_NONE,
+    CHAR_SPECIAL                     = css::style::NumberingType::CHAR_SPECIAL,          // Bullet
+    PAGE_DESCRIPTOR                  = css::style::NumberingType::PAGE_DESCRIPTOR,       // Numbering from the page template
+    BITMAP                           = css::style::NumberingType::BITMAP,
+    CHARS_UPPER_LETTER_N             = css::style::NumberingType::CHARS_UPPER_LETTER_N,  // Counts from  a-z, aa-zz, aaa-zzz
+    CHARS_LOWER_LETTER_N             = css::style::NumberingType::CHARS_LOWER_LETTER_N,
+    TRANSLITERATION                  = css::style::NumberingType::TRANSLITERATION,
+    NATIVE_NUMBERING                 = css::style::NumberingType::NATIVE_NUMBERING,
+    FULLWIDTH_ARABIC                 = css::style::NumberingType::FULLWIDTH_ARABIC,
+    CIRCLE_NUMBER                    = css::style::NumberingType::CIRCLE_NUMBER,
+    NUMBER_LOWER_ZH                  = css::style::NumberingType::NUMBER_LOWER_ZH,
+    NUMBER_UPPER_ZH                  = css::style::NumberingType::NUMBER_UPPER_ZH,
+    NUMBER_UPPER_ZH_TW               = css::style::NumberingType::NUMBER_UPPER_ZH_TW,
+    TIAN_GAN_ZH                      = css::style::NumberingType::TIAN_GAN_ZH,
+    DI_ZI_ZH                         = css::style::NumberingType::DI_ZI_ZH,
+    NUMBER_TRADITIONAL_JA            = css::style::NumberingType::NUMBER_TRADITIONAL_JA,
+    AIU_FULLWIDTH_JA                 = css::style::NumberingType::AIU_FULLWIDTH_JA,
+    AIU_HALFWIDTH_JA                 = css::style::NumberingType::AIU_HALFWIDTH_JA,
+    IROHA_FULLWIDTH_JA               = css::style::NumberingType::IROHA_FULLWIDTH_JA,
+    IROHA_HALFWIDTH_JA               = css::style::NumberingType::IROHA_HALFWIDTH_JA,
+    NUMBER_UPPER_KO                  = css::style::NumberingType::NUMBER_UPPER_KO,
+    NUMBER_HANGUL_KO                 = css::style::NumberingType::NUMBER_HANGUL_KO,
+    HANGUL_JAMO_KO                   = css::style::NumberingType::HANGUL_JAMO_KO,
+    HANGUL_SYLLABLE_KO               = css::style::NumberingType::HANGUL_SYLLABLE_KO,
+    HANGUL_CIRCLED_JAMO_KO           = css::style::NumberingType::HANGUL_CIRCLED_JAMO_KO,
+    HANGUL_CIRCLED_SYLLABLE_KO       = css::style::NumberingType::HANGUL_CIRCLED_SYLLABLE_KO,
+    CHARS_ARABIC                     = css::style::NumberingType::CHARS_ARABIC,
+    CHARS_THAI                       = css::style::NumberingType::CHARS_THAI,
+    CHARS_HEBREW                     = css::style::NumberingType::CHARS_HEBREW,
+    CHARS_NEPALI                     = css::style::NumberingType::CHARS_NEPALI,
+    CHARS_KHMER                      = css::style::NumberingType::CHARS_KHMER,
+    CHARS_LAO                        = css::style::NumberingType::CHARS_LAO,
+    CHARS_TIBETAN                    = css::style::NumberingType::CHARS_TIBETAN,
+    CHARS_CYRILLIC_UPPER_LETTER_BG   = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_BG,
+    CHARS_CYRILLIC_LOWER_LETTER_BG   = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_BG,
+    CHARS_CYRILLIC_UPPER_LETTER_N_BG = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_N_BG,
+    CHARS_CYRILLIC_LOWER_LETTER_N_BG = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_N_BG,
+    CHARS_CYRILLIC_UPPER_LETTER_RU   = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_RU,
+    CHARS_CYRILLIC_LOWER_LETTER_RU   = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_RU,
+    CHARS_CYRILLIC_UPPER_LETTER_N_RU = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_N_RU,
+    CHARS_CYRILLIC_LOWER_LETTER_N_RU = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_N_RU,
+    CHARS_PERSIAN                    = css::style::NumberingType::CHARS_PERSIAN,
+    CHARS_MYANMAR                    = css::style::NumberingType::CHARS_MYANMAR,
+    CHARS_CYRILLIC_UPPER_LETTER_SR   = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_SR,
+    CHARS_CYRILLIC_LOWER_LETTER_SR   = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_SR,
+    CHARS_CYRILLIC_UPPER_LETTER_N_SR = css::style::NumberingType::CHARS_CYRILLIC_UPPER_LETTER_N_SR,
+    CHARS_CYRILLIC_LOWER_LETTER_N_SR = css::style::NumberingType::CHARS_CYRILLIC_LOWER_LETTER_N_SR,
+    CHARS_GREEK_UPPER_LETTER         = css::style::NumberingType::CHARS_GREEK_UPPER_LETTER,
+    CHARS_GREEK_LOWER_LETTER         = css::style::NumberingType::CHARS_GREEK_LOWER_LETTER,
+    CHARS_ARABIC_ABJAD               = css::style::NumberingType::CHARS_ARABIC_ABJAD,
+    CHARS_PERSIAN_WORD               = css::style::NumberingType::CHARS_PERSIAN_WORD,
+    NUMBER_HEBREW                    = css::style::NumberingType::NUMBER_HEBREW
 };
 
 #endif
diff --git a/include/svx/SvxNumOptionsTabPageHelper.hxx b/include/svx/SvxNumOptionsTabPageHelper.hxx
index 89fd68d..9dbd265 100644
--- a/include/svx/SvxNumOptionsTabPageHelper.hxx
+++ b/include/svx/SvxNumOptionsTabPageHelper.hxx
@@ -41,7 +41,7 @@ public:
 
         @param nDoNotRemove
             A value that shall not be removed, i.e. the ugly 0x88
-            (SVX_NUM_BITMAP|0x80)
+            (SvxNumType::BITMAP|0x80)
             Pass ::std::numeric_limits<sal_uInt16>::max() if there is no such
             restriction.
     */
diff --git a/include/svx/nbdtmg.hxx b/include/svx/nbdtmg.hxx
index 992bd83..ba39cc0 100644
--- a/include/svx/nbdtmg.hxx
+++ b/include/svx/nbdtmg.hxx
@@ -59,7 +59,7 @@ class  SVX_DLLPUBLIC NumSettings_Impl
 
     public:
         NumSettings_Impl()
-            : nNumberType(SVX_NUM_CHARS_UPPER_LETTER)
+            : nNumberType(SvxNumType::CHARS_UPPER_LETTER)
             , nParentNumbering(0)
             , eLabelFollowedBy(SvxNumberFormat::NOTHING)
             , nTabValue (0)
diff --git a/oox/source/export/drawingml.cxx b/oox/source/export/drawingml.cxx
index ce48bdd..e4afba4 100644
--- a/oox/source/export/drawingml.cxx
+++ b/oox/source/export/drawingml.cxx
@@ -1690,21 +1690,21 @@ OUString GetAutoNumType(SvxNumType nNumberingType, bool bSDot, bool bPBehind, bo
 
     switch( nNumberingType )
     {
-        case SVX_NUM_CHARS_UPPER_LETTER_N :
-        case SVX_NUM_CHARS_UPPER_LETTER :
+        case SvxNumType::CHARS_UPPER_LETTER_N :
+        case SvxNumType::CHARS_UPPER_LETTER :
             return "alphaUc" + sPrefixSuffix;
 
-        case SVX_NUM_CHARS_LOWER_LETTER_N :
-        case SVX_NUM_CHARS_LOWER_LETTER :
+        case SvxNumType::CHARS_LOWER_LETTER_N :
+        case SvxNumType::CHARS_LOWER_LETTER :
             return "alphaLc" + sPrefixSuffix;
 
-        case SVX_NUM_ROMAN_UPPER :
+        case SvxNumType::ROMAN_UPPER :
             return "romanUc" + sPrefixSuffix;
 
-        case SVX_NUM_ROMAN_LOWER :
+        case SvxNumType::ROMAN_LOWER :
             return "romanLc" + sPrefixSuffix;
 
-        case SVX_NUM_ARABIC :
+        case SvxNumType::ARABIC :
         {
             if (sPrefixSuffix.isEmpty())
                 return OUString("arabicPlain");
@@ -1740,7 +1740,7 @@ void DrawingML::WriteParagraphNumbering( const Reference< XPropertySet >& rXProp
 
     const PropertyValue* pPropValue = aPropertySequence.getArray();
 
-    SvxNumType nNumberingType = SVX_NUM_NUMBER_NONE;
+    SvxNumType nNumberingType = SvxNumType::NUMBER_NONE;
     bool bSDot = false;
     bool bPBehind = false;
     bool bPBoth = false;
@@ -1821,7 +1821,7 @@ void DrawingML::WriteParagraphNumbering( const Reference< XPropertySet >& rXProp
         }
     }
 
-    if (nNumberingType == SVX_NUM_NUMBER_NONE)
+    if (nNumberingType == SvxNumType::NUMBER_NONE)
         return;
 
     if( !aGraphicURL.isEmpty() )
@@ -1850,7 +1850,7 @@ void DrawingML::WriteParagraphNumbering( const Reference< XPropertySet >& rXProp
                                    XML_val, IS( std::max( (sal_Int32)25000, std::min( (sal_Int32)400000, 1000*( (sal_Int32)nBulletRelSize ) ) ) ), FSEND );
         if( bHasFontDesc )
         {
-            if ( SVX_NUM_CHAR_SPECIAL == nNumberingType )
+            if ( SvxNumType::CHAR_SPECIAL == nNumberingType )
                 aBulletChar = SubstituteBullet( aBulletChar, aFontDesc );
             mpFS->singleElementNS( XML_a, XML_buFont,
                                    XML_typeface, aFontDesc.Name.toUtf8().getStr(),
diff --git a/reportdesign/source/core/sdr/RptModel.cxx b/reportdesign/source/core/sdr/RptModel.cxx
index 2f13ee7..e16fb6e 100644
--- a/reportdesign/source/core/sdr/RptModel.cxx
+++ b/reportdesign/source/core/sdr/RptModel.cxx
@@ -122,7 +122,7 @@ SvxNumType OReportModel::GetPageNumType() const
     uno::Reference< report::XReportDefinition > xReportDefinition( getReportDefinition() );
     if ( xReportDefinition.is() )
         return (SvxNumType) getStyleProperty<sal_Int16>(xReportDefinition,PROPERTY_NUMBERINGTYPE);
-    return SVX_NUM_ARABIC;
+    return SvxNumType::ARABIC;
 }
 
 
diff --git a/sc/source/core/tool/editutil.cxx b/sc/source/core/tool/editutil.cxx
index 37dc4e5..57e6352 100644
--- a/sc/source/core/tool/editutil.cxx
+++ b/sc/source/core/tool/editutil.cxx
@@ -787,7 +787,7 @@ ScHeaderFieldData::ScHeaderFieldData()
         aTime( tools::Time::EMPTY )
 {
     nPageNo = nTotalPages = 0;
-    eNumType = SVX_NUM_ARABIC;
+    eNumType = SvxNumType::ARABIC;
 }
 
 ScHeaderEditEngine::ScHeaderEditEngine( SfxItemPool* pEnginePoolP )
diff --git a/sc/source/filter/starcalc/scflt.cxx b/sc/source/filter/starcalc/scflt.cxx
index e167882..0f54731 100644
--- a/sc/source/filter/starcalc/scflt.cxx
+++ b/sc/source/filter/starcalc/scflt.cxx
@@ -861,7 +861,7 @@ void Sc10PageCollection::PutToDoc( ScDocument* pDoc )
         SvxPageItem aPageItem(ATTR_PAGE);
         aPageItem.SetPageUsage( SvxPageUsage::All );
         aPageItem.SetLandscape( pPage->Orientation != 1 );
-        aPageItem.SetNumType( SVX_NUM_ARABIC );
+        aPageItem.SetNumType( SvxNumType::ARABIC );
         pSet->Put(aPageItem);
 
         pSet->Put(SvxLRSpaceItem( pPage->Left, pPage->Right, 0,0, ATTR_LRSPACE ));
diff --git a/sd/source/core/drawdoc.cxx b/sd/source/core/drawdoc.cxx
index 3a4a86e..04e7487 100644
--- a/sd/source/core/drawdoc.cxx
+++ b/sd/source/core/drawdoc.cxx
@@ -168,7 +168,7 @@ SdDrawDocument::SdDrawDocument(DocumentType eType, SfxObjectShell* pDrDocSh)
 , meLanguage( LANGUAGE_SYSTEM )
 , meLanguageCJK( LANGUAGE_SYSTEM )
 , meLanguageCTL( LANGUAGE_SYSTEM )
-, mePageNumType(SVX_NUM_ARABIC)
+, mePageNumType(SvxNumType::ARABIC)
 , mbAllocDocSh(false)
 , meDocType(eType)
 , mpCharClass(nullptr)
diff --git a/sd/source/core/drawdoc4.cxx b/sd/source/core/drawdoc4.cxx
index 306f339..0f69278 100644
--- a/sd/source/core/drawdoc4.cxx
+++ b/sd/source/core/drawdoc4.cxx
@@ -1036,19 +1036,19 @@ OUString SdDrawDocument::CreatePageNumValue(sal_uInt16 nNum) const
 
     switch (mePageNumType)
     {
-        case css::style::NumberingType::CHARS_UPPER_LETTER:
+        case SvxNumType::CHARS_UPPER_LETTER:
             aPageNumValue += OUStringLiteral1( (nNum - 1) % 26 + 'A' );
             break;
-        case css::style::NumberingType::CHARS_LOWER_LETTER:
+        case SvxNumType::CHARS_LOWER_LETTER:
             aPageNumValue += OUStringLiteral1( (nNum - 1) % 26 + 'a' );
             break;
-        case css::style::NumberingType::ROMAN_UPPER:
+        case SvxNumType::ROMAN_UPPER:
             bUpper = true;
             SAL_FALLTHROUGH;
-        case css::style::NumberingType::ROMAN_LOWER:
+        case SvxNumType::ROMAN_LOWER:
             aPageNumValue += SvxNumberFormat::CreateRomanString(nNum, bUpper);
             break;
-        case css::style::NumberingType::NUMBER_NONE:
+        case SvxNumType::NUMBER_NONE:
             aPageNumValue = " ";
             break;
         default:
@@ -1204,7 +1204,7 @@ void SdDrawDocument::SetTextDefaults() const
     pItemPool->SetPoolDefaultItem( aBulletItem );
 
     // New BulletItem
-    SvxNumberFormat aNumberFormat(SVX_NUM_CHAR_SPECIAL);
+    SvxNumberFormat aNumberFormat(SvxNumType::CHAR_SPECIAL);
     aNumberFormat.SetBulletFont(&aBulletFont);
     aNumberFormat.SetBulletChar( 0x25CF );  // StarBats: 0xF000 + 34
     aNumberFormat.SetBulletRelSize(45);
diff --git a/sd/source/core/sdpage.cxx b/sd/source/core/sdpage.cxx
index 70326ea..e29c407 100644
--- a/sd/source/core/sdpage.cxx
+++ b/sd/source/core/sdpage.cxx
@@ -2546,7 +2546,7 @@ const OUString& SdPage::GetName() const
 
             aCreatedPageName = SD_RESSTR(STR_PAGE);
             aCreatedPageName += " ";
-            if( GetModel()->GetPageNumType() == css::style::NumberingType::NUMBER_NONE )
+            if( GetModel()->GetPageNumType() == SvxNumType::NUMBER_NONE )
             {
                 // if the document has number none as a formatting
                 // for page numbers we still default to arabic numbering
diff --git a/sd/source/core/stlpool.cxx b/sd/source/core/stlpool.cxx
index 29afb37..dc14033 100644
--- a/sd/source/core/stlpool.cxx
+++ b/sd/source/core/stlpool.cxx
@@ -1091,7 +1091,7 @@ void SdStyleSheetPool::PutNumBulletItem( SfxStyleSheetBase* pSheet,
         case HID_STANDARD_STYLESHEET_NAME :
         {
             // Standard template
-            SvxNumberFormat aNumberFormat(SVX_NUM_CHAR_SPECIAL);
+            SvxNumberFormat aNumberFormat(SvxNumType::CHAR_SPECIAL);
             aNumberFormat.SetBulletFont(&rBulletFont);
             aNumberFormat.SetBulletChar( 0x25CF ); // StarBats: 0xF000 + 34
             aNumberFormat.SetBulletRelSize(45);
@@ -1131,7 +1131,7 @@ void SdStyleSheetPool::PutNumBulletItem( SfxStyleSheetBase* pSheet,
                 for(sal_uInt16 i=0; i < aNumRule.GetLevelCount(); i++)
                 {
                     SvxNumberFormat aFrmt( pDefaultRule->GetLevel(i) );
-                    aFrmt.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+                    aFrmt.SetNumberingType(SvxNumType::CHAR_SPECIAL);
                     // #i93908# clear suffix for bullet lists
                     aFrmt.SetPrefix(OUString());
                     aFrmt.SetSuffix(OUString());
@@ -1151,7 +1151,7 @@ void SdStyleSheetPool::PutNumBulletItem( SfxStyleSheetBase* pSheet,
         case HID_PSEUDOSHEET_OUTLINE + 1 :
         {
             // Outline template
-            SvxNumberFormat aNumberFormat(SVX_NUM_CHAR_SPECIAL);
+            SvxNumberFormat aNumberFormat(SvxNumType::CHAR_SPECIAL);
             aNumberFormat.SetBulletColor(Color(COL_AUTO));
             aNumberFormat.SetStart(1);
             aNumberFormat.SetNumAdjust(SVX_ADJUST_LEFT);
diff --git a/sd/source/filter/eppt/epptso.cxx b/sd/source/filter/eppt/epptso.cxx
index 0dc8903..875abca 100644
--- a/sd/source/filter/eppt/epptso.cxx
+++ b/sd/source/filter/eppt/epptso.cxx
@@ -1330,7 +1330,7 @@ void PPTWriter::ImplWriteTextStyleAtom( SvStream& rOut, int nTextInstance, sal_u
                     if ( pBulletPara->bExtendedBulletsUsed )
                     {
                         nBulletFlags = 0x800000;
-                        if ( pBulletPara->nNumberingType != SVX_NUM_BITMAP )
+                        if ( pBulletPara->nNumberingType != SvxNumType::BITMAP )
                             nBulletFlags = 0x3000000;
                     }
                     rExtBuStr.WriteUInt32( nBulletFlags );
@@ -1341,26 +1341,26 @@ void PPTWriter::ImplWriteTextStyleAtom( SvStream& rOut, int nTextInstance, sal_u
                     {
                         switch( pBulletPara->nNumberingType )
                         {
-                            case SVX_NUM_NUMBER_NONE :
-                            case SVX_NUM_CHAR_SPECIAL :
+                            case SvxNumType::NUMBER_NONE :
+                            case SvxNumType::CHAR_SPECIAL :
                                 nNumberingType = 0;
                             break;
-                            case SVX_NUM_CHARS_UPPER_LETTER :
-                            case SVX_NUM_CHARS_UPPER_LETTER_N :
-                            case SVX_NUM_CHARS_LOWER_LETTER :
-                            case SVX_NUM_CHARS_LOWER_LETTER_N :
-                            case SVX_NUM_ROMAN_UPPER :
-                            case SVX_NUM_ROMAN_LOWER :
-                            case SVX_NUM_ARABIC :
-                            case SVX_NUM_NUMBER_UPPER_ZH:
-                            case SVX_NUM_CIRCLE_NUMBER:
-                            case SVX_NUM_NUMBER_UPPER_ZH_TW:
-                            case SVX_NUM_NUMBER_LOWER_ZH:
-                            case SVX_NUM_FULL_WIDTH_ARABIC:
+                            case SvxNumType::CHARS_UPPER_LETTER :
+                            case SvxNumType::CHARS_UPPER_LETTER_N :
+                            case SvxNumType::CHARS_LOWER_LETTER :
+                            case SvxNumType::CHARS_LOWER_LETTER_N :
+                            case SvxNumType::ROMAN_UPPER :
+                            case SvxNumType::ROMAN_LOWER :
+                            case SvxNumType::ARABIC :
+                            case SvxNumType::NUMBER_UPPER_ZH:
+                            case SvxNumType::CIRCLE_NUMBER:
+                            case SvxNumType::NUMBER_UPPER_ZH_TW:
+                            case SvxNumType::NUMBER_LOWER_ZH:
+                            case SvxNumType::FULLWIDTH_ARABIC:
                                 nNumberingType = pBulletPara->nMappedNumType;
                             break;
 
-                            case SVX_NUM_BITMAP :
+                            case SvxNumType::BITMAP :
                                 nNumberingType = 0;
                             break;
                             default: break;
diff --git a/sd/source/filter/eppt/pptx-stylesheet.cxx b/sd/source/filter/eppt/pptx-stylesheet.cxx
index eb0327a..0e5b1d17 100644
--- a/sd/source/filter/eppt/pptx-stylesheet.cxx
+++ b/sd/source/filter/eppt/pptx-stylesheet.cxx
@@ -329,7 +329,7 @@ void PPTExParaSheet::Write( SvStream& rSt, PptEscherEx*, sal_uInt16 nLev, bool,
                 .WriteUInt16( 5 );              // depth
         }
         sal_uInt16 nBulletId = rLev.mnBulletId;
-        if ( rLev.mnNumberingType != SVX_NUM_BITMAP )
+        if ( rLev.mnNumberingType != SvxNumType::BITMAP )
             nBulletId = 0xffff;
         rOut.WriteUInt32( 0x03800000 )
             .WriteUInt16( nBulletId )
diff --git a/sd/source/filter/eppt/pptx-text.cxx b/sd/source/filter/eppt/pptx-text.cxx
index 58fb320..c4c28a5 100644
--- a/sd/source/filter/eppt/pptx-text.cxx
+++ b/sd/source/filter/eppt/pptx-text.cxx
@@ -765,7 +765,7 @@ void ParagraphObj::ImplClear()
 
 void ParagraphObj::CalculateGraphicBulletSize( sal_uInt16 nFontHeight )
 {
-    if ( ( nNumberingType == SVX_NUM_BITMAP ) && ( nBulletId != 0xffff ) )
+    if ( ( nNumberingType == SvxNumType::BITMAP ) && ( nBulletId != 0xffff ) )
     {
         // calculate the bulletrealsize for this grafik
         if ( aBuGraSize.Width() && aBuGraSize.Height() )
@@ -908,7 +908,7 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                     }
                     else
                     {
-                        nNumberingType = SVX_NUM_NUMBER_NONE;
+                        nNumberingType = SvxNumType::NUMBER_NONE;
                     }
                 }
 
@@ -916,9 +916,9 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
 
                 switch( nNumberingType )
                 {
-                    case SVX_NUM_NUMBER_NONE : nParaFlags |= 0xf; break;
+                    case SvxNumType::NUMBER_NONE : nParaFlags |= 0xf; break;
 
-                    case SVX_NUM_CHAR_SPECIAL :                           // Bullet
+                    case SvxNumType::CHAR_SPECIAL :                           // Bullet
                     {
                         if ( IsStarSymbol(aFontDesc.Name) )
                         {
@@ -934,22 +934,22 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
 
                         SAL_FALLTHROUGH;
                     }
-                    case SVX_NUM_CHARS_UPPER_LETTER :       // count from a-z, aa - az, ba - bz, ...
-                    case SVX_NUM_CHARS_LOWER_LETTER :
-                    case SVX_NUM_ROMAN_UPPER :
-                    case SVX_NUM_ROMAN_LOWER :
-                    case SVX_NUM_ARABIC :
-                    case SVX_NUM_PAGEDESC :                 // numbering from the page template
-                    case SVX_NUM_BITMAP :
-                    case SVX_NUM_CHARS_UPPER_LETTER_N :     // count from a-z, aa-zz, aaa-zzz
-                    case SVX_NUM_CHARS_LOWER_LETTER_N :
-                    case SVX_NUM_NUMBER_UPPER_ZH:
-                    case SVX_NUM_CIRCLE_NUMBER:
-                    case SVX_NUM_NUMBER_UPPER_ZH_TW:
-                    case SVX_NUM_NUMBER_LOWER_ZH:
-                    case SVX_NUM_FULL_WIDTH_ARABIC:
+                    case SvxNumType::CHARS_UPPER_LETTER :       // count from a-z, aa - az, ba - bz, ...
+                    case SvxNumType::CHARS_LOWER_LETTER :
+                    case SvxNumType::ROMAN_UPPER :
+                    case SvxNumType::ROMAN_LOWER :
+                    case SvxNumType::ARABIC :
+                    case SvxNumType::PAGE_DESCRIPTOR :                 // numbering from the page template
+                    case SvxNumType::BITMAP :
+                    case SvxNumType::CHARS_UPPER_LETTER_N :     // count from a-z, aa-zz, aaa-zzz
+                    case SvxNumType::CHARS_LOWER_LETTER_N :
+                    case SvxNumType::NUMBER_UPPER_ZH:
+                    case SvxNumType::CIRCLE_NUMBER:
+                    case SvxNumType::NUMBER_UPPER_ZH_TW:
+                    case SvxNumType::NUMBER_LOWER_ZH:
+                    case SvxNumType::FULLWIDTH_ARABIC:
                     {
-                        if ( nNumberingType != SVX_NUM_CHAR_SPECIAL )
+                        if ( nNumberingType != SvxNumType::CHAR_SPECIAL )
                         {
                             bExtendedBulletsUsed = true;
                             if ( nNumberingDepth & 1 )
@@ -961,8 +961,8 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
 
                             switch( nNumberingType )
                             {
-                                case SVX_NUM_CHARS_UPPER_LETTER :
-                                case SVX_NUM_CHARS_UPPER_LETTER_N :
+                                case SvxNumType::CHARS_UPPER_LETTER :
+                                case SvxNumType::CHARS_UPPER_LETTER_N :
                                 {
                                     if ( sSuffix == ")" )
                                     {
@@ -975,8 +975,8 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                                         nMappedNumType = 0x10001;       // A.
                                 }
                                 break;
-                                case SVX_NUM_CHARS_LOWER_LETTER :
-                                case SVX_NUM_CHARS_LOWER_LETTER_N :
+                                case SvxNumType::CHARS_LOWER_LETTER :
+                                case SvxNumType::CHARS_LOWER_LETTER_N :
                                 {
                                     if ( sSuffix == ")" )
                                     {
@@ -989,7 +989,7 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                                         nMappedNumType = 0x00001;       // a.
                                 }
                                 break;
-                                case SVX_NUM_ROMAN_UPPER :
+                                case SvxNumType::ROMAN_UPPER :
                                 {
                                     if ( sSuffix == ")" )
                                     {
@@ -1002,7 +1002,7 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                                         nMappedNumType = 0x70001;       // I.
                                 }
                                 break;
-                                case SVX_NUM_ROMAN_LOWER :
+                                case SvxNumType::ROMAN_LOWER :
                                 {
                                     if ( sSuffix == ")" )
                                     {
@@ -1015,7 +1015,7 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                                         nMappedNumType = 0x60001;       // i.
                                 }
                                 break;
-                                case SVX_NUM_ARABIC :
+                                case SvxNumType::ARABIC :
                                 {
                                     if ( sSuffix == ")" )
                                     {
@@ -1033,7 +1033,7 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                                     }
                                 }
                                 break;
-                                case SVX_NUM_NUMBER_UPPER_ZH :
+                                case SvxNumType::NUMBER_UPPER_ZH :
                                 {
                                     if ( !sSuffix.isEmpty() )
                                         nMappedNumType = 0x110001;   // Simplified Chinese with single-byte period.
@@ -1041,12 +1041,12 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                                         nMappedNumType = 0x100001;   // Simplified Chinese.
                                 }
                                 break;
-                                case SVX_NUM_CIRCLE_NUMBER :
+                                case SvxNumType::CIRCLE_NUMBER :
                                 {
                                     nMappedNumType = 0x120001;   // Double byte circle numbers.
                                 }
                                 break;
-                                case SVX_NUM_NUMBER_UPPER_ZH_TW :
+                                case SvxNumType::NUMBER_UPPER_ZH_TW :
                                 {
                                     if ( !sSuffix.isEmpty() )
                                         nMappedNumType = 0x160001;   // Traditional Chinese with single-byte period.
@@ -1054,7 +1054,7 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                                         nMappedNumType = 0x150001;   // Traditional Chinese.
                                 }
                                 break;
-                                case SVX_NUM_NUMBER_LOWER_ZH :
+                                case SvxNumType::NUMBER_LOWER_ZH :
                                 {
                                     if ( sSuffix == OUStringLiteral1(0xff0e) )
                                         nMappedNumType = 0x260001;   // Japanese with double-byte period.
@@ -1064,7 +1064,7 @@ void ParagraphObj::ImplGetNumberingLevel( PPTExBulletProvider* pBuProv, sal_Int1
                                         nMappedNumType = 0x1A0001;   // Japanese/Korean.
                                 }
                                 break;
-                                case SVX_NUM_FULL_WIDTH_ARABIC :
+                                case SvxNumType::FULLWIDTH_ARABIC :
                                 {
                                     if ( !sSuffix.isEmpty() )
                                         nMappedNumType = 0x1D0001;   // Double-byte Arabic numbers with double-byte period.
diff --git a/sd/source/filter/eppt/text.hxx b/sd/source/filter/eppt/text.hxx
index d215a80..7241a50 100644
--- a/sd/source/filter/eppt/text.hxx
+++ b/sd/source/filter/eppt/text.hxx
@@ -66,7 +66,7 @@ struct SOParagraph
         : bExtendedParameters(false)
         , nParaFlags(0)
         , nBulletFlags(0)
-        , nNumberingType(SVX_NUM_NUMBER_NONE)
+        , nNumberingType(SvxNumType::NUMBER_NONE)
         , nHorzAdjust(0)
         , nBulletColor(0)
         , nBulletOfs(0)
diff --git a/sd/source/ui/func/bulmaper.cxx b/sd/source/ui/func/bulmaper.cxx
index 3f9615a..89d713e 100644
--- a/sd/source/ui/func/bulmaper.cxx
+++ b/sd/source/ui/func/bulmaper.cxx
@@ -51,8 +51,8 @@ void SdBulletMapper::MapFontsInNumRule( SvxNumRule& aNumRule, const SfxItemSet&
         const SvxNumberFormat& rSrcLevel = aNumRule.GetLevel(nLevel);
         SvxNumberFormat aNewLevel( rSrcLevel );
 
-        if(rSrcLevel.GetNumberingType() != css::style::NumberingType::CHAR_SPECIAL &&
-           rSrcLevel.GetNumberingType() != css::style::NumberingType::NUMBER_NONE )
+        if(rSrcLevel.GetNumberingType() != SvxNumType::CHAR_SPECIAL &&
+           rSrcLevel.GetNumberingType() != SvxNumType::NUMBER_NONE )
         {
             // if enumeration instead bullet is chosen, adjust bullet font to template font
 
@@ -100,7 +100,7 @@ void SdBulletMapper::MapFontsInNumRule( SvxNumRule& aNumRule, const SfxItemSet&
             aNewLevel.SetBulletFont(&aMyFont);
             aNumRule.SetLevel(nLevel, aNewLevel );
         }
-        else if( rSrcLevel.GetNumberingType() == css::style::NumberingType::CHAR_SPECIAL )
+        else if( rSrcLevel.GetNumberingType() == SvxNumType::CHAR_SPECIAL )
         {
             aNewLevel.SetPrefix("");
             aNewLevel.SetSuffix("");
diff --git a/sd/source/ui/view/drtxtob1.cxx b/sd/source/ui/view/drtxtob1.cxx
index 00d2434..99b7627 100644
--- a/sd/source/ui/view/drtxtob1.cxx
+++ b/sd/source/ui/view/drtxtob1.cxx
@@ -363,14 +363,14 @@ void TextObjectBar::Execute( SfxRequest &rReq )
                                 sal_uInt16 nLevel = pOL->GetDepth(nPara);
                                 SvxNumberFormat aFmt(aNewRule.GetLevel(nLevel));
 
-                                if (aFmt.GetNumberingType() == SVX_NUM_NUMBER_NONE)
+                                if (aFmt.GetNumberingType() == SvxNumType::NUMBER_NONE)
                                 {
-                                    aFmt.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+                                    aFmt.SetNumberingType(SvxNumType::CHAR_SPECIAL);
                                     SdStyleSheetPool::setDefaultOutlineNumberFormatBulletAndIndent(nLevel, aFmt);
                                 }
                                 else
                                 {
-                                    aFmt.SetNumberingType(SVX_NUM_NUMBER_NONE);
+                                    aFmt.SetNumberingType(SvxNumType::NUMBER_NONE);
                                     aFmt.SetAbsLSpace(0);
                                     aFmt.SetFirstLineOffset(0);
                                 }
diff --git a/sd/source/ui/view/drviewsf.cxx b/sd/source/ui/view/drviewsf.cxx
index 0a7c7e0..9fbab1b 100644
--- a/sd/source/ui/view/drviewsf.cxx
+++ b/sd/source/ui/view/drviewsf.cxx
@@ -605,8 +605,8 @@ void DrawViewShell::GetAttrState( SfxItemSet& rSet )
                             bool bBullets = false;
                             switch(pNumFmt->GetNumberingType())
                             {
-                                case SVX_NUM_CHAR_SPECIAL:
-                                case SVX_NUM_BITMAP:
+                                case SvxNumType::CHAR_SPECIAL:
+                                case SvxNumType::BITMAP:
                                     bBullets = true;
                                     break;
 
diff --git a/svx/source/dialog/numberingtype.src b/svx/source/dialog/numberingtype.src
index eac9caf..03b81b5 100644
--- a/svx/source/dialog/numberingtype.src
+++ b/svx/source/dialog/numberingtype.src
@@ -23,17 +23,17 @@ StringArray RID_SVXSTRARY_NUMBERINGTYPE
 {
     ItemList [ en-US ] =
     {
-        < "None" ;                                  5/*SVX_NUM_NUMBER_NONE         */; > ;
-        < "Bullet" ;                                6/*SVX_NUM_CHAR_SPECIAL        */; > ;
-        < "Graphics" ;                              8/*SVX_NUM_BITMAP              */; > ;
-        < "Linked graphics" ;                     136/*SVX_NUM_BITMAP|0x80         */; > ;
-        < "1, 2, 3, ..." ;                          4/*SVX_NUM_ARABIC              */; > ;
-        < "A, B, C, ..." ;                          0/*SVX_NUM_CHARS_UPPER_LETTER  */; > ;
-        < "a, b, c, ..." ;                          1/*SVX_NUM_CHARS_LOWER_LETTER  */; > ;
-        < "I, II, III, ..." ;                       2/*SVX_NUM_ROMAN_UPPER         */; > ;
-        < "i, ii, iii, ..." ;                       3/*SVX_NUM_ROMAN_LOWER         */; > ;
-        < "A, .., AA, .., AAA, ..." ;               9/*SVX_NUM_CHARS_UPPER_LETTER_N*/; > ;
-        < "a, .., aa, .., aaa, ..." ;               10/*SVX_NUM_CHARS_LOWER_LETTER_N*/; > ;
+        < "None" ;                                  5/*SvxNumType::NUMBER_NONE         */; > ;
+        < "Bullet" ;                                6/*SvxNumType::CHAR_SPECIAL        */; > ;
+        < "Graphics" ;                              8/*SvxNumType::BITMAP              */; > ;
+        < "Linked graphics" ;                     136/*SvxNumType::BITMAP|0x80         */; > ;
+        < "1, 2, 3, ..." ;                          4/*SvxNumType::ARABIC              */; > ;
+        < "A, B, C, ..." ;                          0/*SvxNumType::CHARS_UPPER_LETTER  */; > ;
+        < "a, b, c, ..." ;                          1/*SvxNumType::CHARS_LOWER_LETTER  */; > ;
+        < "I, II, III, ..." ;                       2/*SvxNumType::ROMAN_UPPER         */; > ;
+        < "i, ii, iii, ..." ;                       3/*SvxNumType::ROMAN_LOWER         */; > ;
+        < "A, .., AA, .., AAA, ..." ;               9/*SvxNumType::CHARS_UPPER_LETTER_N*/; > ;
+        < "a, .., aa, .., aaa, ..." ;               10/*SvxNumType::CHARS_LOWER_LETTER_N*/; > ;
         < "Native Numbering" ;                      12 /*NATIVE_NUMBERING                   */; > ;
         < "А, Б, .., Аа, Аб, ... (Bulgarian)" ;     38 /*CHARS_CYRILLIC_UPPER_LETTER_BG     */; > ;
         < "а, б, .., аа, аб, ... (Bulgarian)" ;     39 /*CHARS_CYRILLIC_LOWER_LETTER_BG     */; > ;
diff --git a/svx/source/items/pageitem.cxx b/svx/source/items/pageitem.cxx
index 2796103..9248dbf 100644
--- a/svx/source/items/pageitem.cxx
+++ b/svx/source/items/pageitem.cxx
@@ -37,7 +37,7 @@ SfxPoolItem* SvxPageItem::CreateDefault() { return new   SvxPageItem(0);}
 
 SvxPageItem::SvxPageItem( const sal_uInt16 nId ) : SfxPoolItem( nId ),
 
-    eNumType    ( SVX_NUM_ARABIC ),
+    eNumType    ( SvxNumType::ARABIC ),
     bLandscape  ( false ),
     eUse        ( SvxPageUsage::All )
 {
@@ -102,8 +102,8 @@ bool SvxPageItem::GetPresentation
             {
                 rText = aDescName + cpDelimTmp;
             }
-            DBG_ASSERT( eNumType <= css::style::NumberingType::NUMBER_NONE, "enum overflow" );
-            rText += SVX_RESSTR(RID_SVXITEMS_PAGE_NUM_BEGIN + eNumType) + cpDelimTmp;
+            DBG_ASSERT( eNumType <= SvxNumType::NUMBER_NONE, "enum overflow" );
+            rText += SVX_RESSTR(RID_SVXITEMS_PAGE_NUM_BEGIN + (int)eNumType) + cpDelimTmp;
             if ( bLandscape )
                 rText += SVX_RESSTR(RID_SVXITEMS_PAGE_LAND_TRUE);
             else
@@ -122,8 +122,8 @@ bool SvxPageItem::GetPresentation
             {
                 rText += aDescName + cpDelimTmp;
             }
-            DBG_ASSERT( eNumType <= css::style::NumberingType::NUMBER_NONE, "enum overflow" );
-            rText += SVX_RESSTR(RID_SVXITEMS_PAGE_NUM_BEGIN + eNumType) + cpDelimTmp;
+            DBG_ASSERT( eNumType <= SvxNumType::NUMBER_NONE, "enum overflow" );
+            rText += SVX_RESSTR(RID_SVXITEMS_PAGE_NUM_BEGIN + (int)eNumType) + cpDelimTmp;
             if ( bLandscape )
                 rText += SVX_RESSTR(RID_SVXITEMS_PAGE_LAND_TRUE);
             else
@@ -245,7 +245,7 @@ SvStream& SvxPageItem::Store( SvStream &rStrm, sal_uInt16 /*nItemVersion*/ ) con
     // UNICODE: rStrm << aDescName;
     rStrm.WriteUniOrByteString(aDescName, rStrm.GetStreamCharSet());
 
-    rStrm.WriteUChar( eNumType ).WriteBool( bLandscape ).WriteUInt16( (sal_uInt16)eUse );
+    rStrm.WriteUChar( (sal_uInt8)eNumType ).WriteBool( bLandscape ).WriteUInt16( (sal_uInt16)eUse );
     return rStrm;
 }
 
diff --git a/svx/source/sidebar/nbdtmg.cxx b/svx/source/sidebar/nbdtmg.cxx
index b753deb..2d73669 100644
--- a/svx/source/sidebar/nbdtmg.cxx
+++ b/svx/source/sidebar/nbdtmg.cxx
@@ -409,7 +409,7 @@ void BulletsTypeMgr::ApplyNumRule(SvxNumRule& aNum, sal_uInt16 nIndex, sal_uInt1
         if(mLevel & nMask)
         {
             SvxNumberFormat aFmt(aNum.GetLevel(i));
-            aFmt.SetNumberingType( SVX_NUM_CHAR_SPECIAL );
+            aFmt.SetNumberingType( SvxNumType::CHAR_SPECIAL );
             aFmt.SetBulletFont(&rActBulletFont);
             aFmt.SetBulletChar(cChar );
             aFmt.SetCharFormatName(sBulletCharFormatName);
@@ -518,13 +518,13 @@ sal_uInt16 NumberingTypeMgr::GetNBOIndexForNumRule(SvxNumRule& aNum,sal_uInt16 m
     //sal_Unicode cSuffix = rtl::OUString(aFmt.GetSuffix())[0];
     OUString sPrefix = aFmt.GetPrefix();
     OUString sLclSuffix = aFmt.GetSuffix();
-    sal_Int16 eNumType = aFmt.GetNumberingType();
+    SvxNumType eNumType = aFmt.GetNumberingType();
 
     sal_uInt16 nCount = pNumberSettingsArr->size();
     for(sal_uInt16 i = nFromIndex; i < nCount; ++i)
     {
         NumberSettings_Impl* _pSet = (*pNumberSettingsArr)[i].get();
-        sal_Int16 eNType = _pSet->pNumSetting->nNumberType;
+        SvxNumType eNType = _pSet->pNumSetting->nNumberType;
         OUString sLocalPrefix = _pSet->pNumSetting->sPrefix;
         OUString sLocalSuffix = _pSet->pNumSetting->sSuffix;
         if (sPrefix == sLocalPrefix &&
@@ -711,13 +711,13 @@ sal_uInt16 OutlineTypeMgr::GetNBOIndexForNumRule(SvxNumRule& aNum,sal_uInt16 /*m
         for (sal_uInt16 iLevel=0;iLevel < nCount;iLevel++)
         {
             NumSettings_Impl* _pSet = (*pItemArr->pNumSettingsArr)[iLevel].get();
-            sal_Int16 eNType = _pSet->nNumberType;
+            SvxNumType eNType = _pSet->nNumberType;
 
             SvxNumberFormat aFmt(aNum.GetLevel(iLevel));
             OUString sPrefix = aFmt.GetPrefix();
             OUString sLclSuffix = aFmt.GetSuffix();
-                sal_Int16 eNumType = aFmt.GetNumberingType();
-                if( eNumType == SVX_NUM_CHAR_SPECIAL)
+            SvxNumType eNumType = aFmt.GetNumberingType();
+            if( eNumType == SvxNumType::CHAR_SPECIAL)
             {
                 sal_Unicode cChar = aFmt.GetBulletChar();
                 sal_Unicode ccChar = _pSet->sBulletChar[0];
@@ -731,7 +731,7 @@ sal_uInt16 OutlineTypeMgr::GetNBOIndexForNumRule(SvxNumRule& aNum,sal_uInt16 /*m
                     bNotMatch = true;
                     break;
                 }
-                }else if ((eNumType&(~LINK_TOKEN)) == SVX_NUM_BITMAP ) {
+                }else if (((int)eNumType&(~LINK_TOKEN)) == (int)SvxNumType::BITMAP ) {
                         const SvxBrushItem* pBrsh1 = aFmt.GetBrush();
                         const SvxBrushItem* pBrsh2 = _pSet->pBrushItem;
                         bool bIsMatch = false;
@@ -795,7 +795,7 @@ void OutlineTypeMgr::RelplaceNumRule(SvxNumRule& aNum, sal_uInt16 nIndex, sal_uI
         _pSet->nNumAlignAt = aFmt.GetFirstLineIndent();
         _pSet->nNumIndentAt = aFmt.GetIndentAt();
 
-        if( eNumType == SVX_NUM_CHAR_SPECIAL)
+        if( eNumType == SvxNumType::CHAR_SPECIAL)
         {
             sal_Unicode cChar = aFmt.GetBulletChar();
             OUString sChar(cChar);
@@ -804,7 +804,7 @@ void OutlineTypeMgr::RelplaceNumRule(SvxNumRule& aNum, sal_uInt16 nIndex, sal_uI
                 _pSet->sBulletFont = rtl::OUString(aFmt.GetBulletFont()->GetFamilyName());
             _pSet->nNumberType = eNumType;
             pItemArr->bIsCustomized = true;
-        }else if ((eNumType&(~LINK_TOKEN)) == SVX_NUM_BITMAP ) {
+        }else if (((int)eNumType&(~LINK_TOKEN)) == (int)SvxNumType::BITMAP ) {
             if (_pSet->pBrushItem) {
                 delete (_pSet->pBrushItem);
                 _pSet->pBrushItem=nullptr;
@@ -867,7 +867,7 @@ void OutlineTypeMgr::ApplyNumRule(SvxNumRule& aNum, sal_uInt16 nIndex, sal_uInt1
         if (pLevelSettings->nNumberType !=aFmt.GetNumberingType()) isResetSize=true;
         aFmt.SetNumberingType( pLevelSettings->nNumberType );
         sal_uInt16 nUpperLevelOrChar = (sal_uInt16)pLevelSettings->nParentNumbering;
-        if(aFmt.GetNumberingType() == SVX_NUM_CHAR_SPECIAL)
+        if(aFmt.GetNumberingType() == SvxNumType::CHAR_SPECIAL)
         {
             if( pLevelSettings->sBulletFont.getLength() &&
                 pLevelSettings->sBulletFont.compareTo(rActBulletFont.GetFamilyName()))
@@ -917,7 +917,7 @@ void OutlineTypeMgr::ApplyNumRule(SvxNumRule& aNum, sal_uInt16 nIndex, sal_uInt1
             aFmt.SetBulletChar(cChar);
             aFmt.SetCharFormatName( sBulletCharFormatName );
             if (isResetSize) aFmt.SetBulletRelSize(45);
-        }else if ((aFmt.GetNumberingType()&(~LINK_TOKEN)) == SVX_NUM_BITMAP ) {
+        }else if (((int)aFmt.GetNumberingType()&(~LINK_TOKEN)) == (int)SvxNumType::BITMAP ) {
             if (pLevelSettings->pBrushItem) {
                     const Graphic* pGrf = pLevelSettings->pBrushItem->GetGraphic();
                     Size aSize = pLevelSettings->aSize;
diff --git a/svx/source/svdraw/svdmodel.cxx b/svx/source/svdraw/svdmodel.cxx
index 7bb15c8..6378761 100644
--- a/svx/source/svdraw/svdmodel.cxx
+++ b/svx/source/svdraw/svdmodel.cxx
@@ -1942,7 +1942,7 @@ void SdrModel::disposeOutliner( SdrOutliner* pOutliner )
 
 SvxNumType SdrModel::GetPageNumType() const
 {
-    return SVX_NUM_ARABIC;
+    return SvxNumType::ARABIC;
 }
 
 void SdrModel::ReadUserDataSequenceValue(const css::beans::PropertyValue* pValue)
diff --git a/svx/source/unodraw/UnoGraphicExporter.cxx b/svx/source/unodraw/UnoGraphicExporter.cxx
index fb5d9c7..f4e2abe 100644
--- a/svx/source/unodraw/UnoGraphicExporter.cxx
+++ b/svx/source/unodraw/UnoGraphicExporter.cxx
@@ -345,19 +345,19 @@ IMPL_LINK(GraphicExporter, CalcFieldValueHdl, EditFieldInfo*, pInfo, void)
 
                 switch(mpDoc->GetPageNumType())
                 {
-                    case css::style::NumberingType::CHARS_UPPER_LETTER:
+                    case SvxNumType::CHARS_UPPER_LETTER:
                         aPageNumValue += OUStringLiteral1( (mnPageNumber - 1) % 26 + 'A' );
                         break;
-                    case css::style::NumberingType::CHARS_LOWER_LETTER:
+                    case SvxNumType::CHARS_LOWER_LETTER:
                         aPageNumValue += OUStringLiteral1( (mnPageNumber - 1) % 26 + 'a' );
                         break;
-                    case css::style::NumberingType::ROMAN_UPPER:
+                    case SvxNumType::ROMAN_UPPER:
                         bUpper = true;
                         SAL_FALLTHROUGH;
-                    case css::style::NumberingType::ROMAN_LOWER:
+                    case SvxNumType::ROMAN_LOWER:
                         aPageNumValue += SvxNumberFormat::CreateRomanString(mnPageNumber, bUpper);
                         break;
-                    case css::style::NumberingType::NUMBER_NONE:
+                    case SvxNumType::NUMBER_NONE:
                         aPageNumValue = " ";
                         break;
                     default:
diff --git a/sw/inc/expfld.hxx b/sw/inc/expfld.hxx
index 51cf4f6..58b991c 100644
--- a/sw/inc/expfld.hxx
+++ b/sw/inc/expfld.hxx
@@ -162,10 +162,10 @@ public:
     inline void             SetType(sal_uInt16 nTyp);
     inline sal_uInt16       GetType() const;
 
-    void                    SetSeqFormat(sal_uLong nFormat);
-    sal_uLong               GetSeqFormat();
+    void                    SetSeqFormat(SvxNumType nFormat);
+    SvxNumType              GetSeqFormat();
 
-    bool                IsDeleted() const       { return bDeleted; }
+    bool                    IsDeleted() const       { return bDeleted; }
     void                    SetDeleted( bool b )    { bDeleted = b; }
 
     /// Overlay, because set-field takes care for its being updated by itself.
@@ -216,10 +216,10 @@ class SW_DLLPUBLIC SwSetExpField : public SwFormulaField
     virtual SwField*            Copy() const override;
 
 public:
-    SwSetExpField(SwSetExpFieldType*, const OUString& rFormel, sal_uLong nFormat = 0);
+    SwSetExpField(SwSetExpFieldType*, const OUString& rFormel, SvxNumType nFormat = SvxNumType::CHARS_UPPER_LETTER);
 
-    void SetFormatField(SwFormatField & rFormatField);
-    SwFormatField* GetFormatField() { return mpFormatField;}
+    void                        SetFormatField(SwFormatField & rFormatField);
+    SwFormatField*              GetFormatField() { return mpFormatField;}
 
     virtual void                SetValue( const double& rVal ) override;
 
@@ -235,23 +235,23 @@ public:
 
     virtual OUString            GetFieldName() const override;
 
-    virtual sal_uInt16              GetSubType() const override;
+    virtual sal_uInt16          GetSubType() const override;
     virtual void                SetSubType(sal_uInt16 nType) override;
 
     inline bool                 IsSequenceField() const;
 
     /// Logical number, sequence fields.
-    void                 SetSeqNumber( sal_uInt16 n )    { nSeqNo = n; }
-    sal_uInt16           GetSeqNumber() const        { return nSeqNo; }
+    void                        SetSeqNumber( sal_uInt16 n )    { nSeqNo = n; }
+    sal_uInt16                  GetSeqNumber() const        { return nSeqNo; }
 
     /// Query name only.
-    virtual OUString       GetPar1()   const override;
+    virtual OUString            GetPar1()   const override;
 
     /// Query formula.
-    virtual OUString       GetPar2()   const override;
+    virtual OUString            GetPar2()   const override;
     virtual void                SetPar2(const OUString& rStr) override;
-    virtual bool        QueryValue( css::uno::Any& rVal, sal_uInt16 nWhich ) const override;
-    virtual bool        PutValue( const css::uno::Any& rVal, sal_uInt16 nWhich ) override;
+    virtual bool                QueryValue( css::uno::Any& rVal, sal_uInt16 nWhich ) const override;
+    virtual bool                PutValue( const css::uno::Any& rVal, sal_uInt16 nWhich ) override;
 };
 
 inline const OUString& SwSetExpField::GetExpStr() const
diff --git a/sw/inc/fldbas.hxx b/sw/inc/fldbas.hxx
index ed52054..6514336 100644
--- a/sw/inc/fldbas.hxx
+++ b/sw/inc/fldbas.hxx
@@ -448,7 +448,7 @@ private:
     OUString m_sFormula;
 
 protected:
-    SwFormulaField( SwValueFieldType* pFieldType, sal_uInt32 nFormat, const double fVal = 0.0 );
+    SwFormulaField( SwValueFieldType* pFieldType, SvxNumType nFormat, const double fVal = 0.0 );
     SwFormulaField( const SwFormulaField& rField );
 
 public:
diff --git a/sw/inc/fmtftntx.hxx b/sw/inc/fmtftntx.hxx
index 2e928ea..b5f5003 100644
--- a/sw/inc/fmtftntx.hxx
+++ b/sw/inc/fmtftntx.hxx
@@ -100,7 +100,7 @@ public:
     SwFormatEndAtTextEnd( SwFootnoteEndPosEnum ePos = FTNEND_ATPGORDOCEND )
         : SwFormatFootnoteEndAtTextEnd( RES_END_AT_TXTEND, ePos )
     {
-        SetNumType( SVX_NUM_ROMAN_LOWER );
+        SetNumType( SvxNumType::ROMAN_LOWER );
     }
 
     virtual SfxPoolItem* Clone( SfxItemPool *pPool = nullptr ) const override;
diff --git a/sw/inc/ndtxt.hxx b/sw/inc/ndtxt.hxx
index 384782b..cc54d4f 100644
--- a/sw/inc/ndtxt.hxx
+++ b/sw/inc/ndtxt.hxx
@@ -522,7 +522,7 @@ public:
         numbering rule and has not a hidden SwNodeNum.
 
         ATTENTION: Returns true even if the SwNumFormat has type
-        SVX_NUM_NUMBER_NONE.
+        SvxNumType::NUMBER_NONE.
 
         @retval true      This node is numbered.
         @retval false     else
@@ -611,7 +611,7 @@ public:
        Returns if the paragraph has a visible numbering or bullet.
        This includes all kinds of numbering/bullet/outlines.
        Note: This function returns false, if the numbering format is
-       SVX_NUM_NUMBER_NONE or if the numbering/bullet has been deleted.
+       SvxNumType::NUMBER_NONE or if the numbering/bullet has been deleted.
 
        @return     true if the paragraph has a visible numbering/bullet/outline
      */
diff --git a/sw/qa/extras/uiwriter/uiwriter.cxx b/sw/qa/extras/uiwriter/uiwriter.cxx
index 213b51a..003e0cf 100644
--- a/sw/qa/extras/uiwriter/uiwriter.cxx
+++ b/sw/qa/extras/uiwriter/uiwriter.cxx
@@ -2328,7 +2328,7 @@ void SwUiWriterTest::testTdf63553()
     SwPaM* pCursor = pDoc->GetEditShell()->GetCursor();
     //inserting sequence field 1
     SwSetExpFieldType* pSeqType = static_cast<SwSetExpFieldType*>(pWrtShell->GetFieldType(RES_SETEXPFLD, "Illustration"));
-    SwSetExpField aSetField1(pSeqType, "", SVX_NUM_ARABIC);
+    SwSetExpField aSetField1(pSeqType, "", SvxNumType::ARABIC);
     pWrtShell->Insert(aSetField1);
     SwGetRefFieldType* pRefType = static_cast<SwGetRefFieldType*>(pWrtShell->GetFieldType(0, RES_GETREFFLD));
     //moving cursor to the starting of document
@@ -2340,7 +2340,7 @@ void SwUiWriterTest::testTdf63553()
     //moving the cursor
     pCursor->Move(fnMoveForward);
     //inserting sequence field 2
-    SwSetExpField aSetField2(pSeqType, "", SVX_NUM_ARABIC);
+    SwSetExpField aSetField2(pSeqType, "", SvxNumType::ARABIC);
     pWrtShell->Insert(aSetField2);
     //moving the cursor
     pWrtShell->SttDoc();
@@ -2353,7 +2353,7 @@ void SwUiWriterTest::testTdf63553()
     pCursor->Move(fnMoveForward);
     pCursor->Move(fnMoveForward);
     //inserting sequence field 3
-    SwSetExpField aSetField3(pSeqType, "", SVX_NUM_ARABIC);
+    SwSetExpField aSetField3(pSeqType, "", SvxNumType::ARABIC);
     pWrtShell->Insert(aSetField3);
     pWrtShell->SttDoc();
     pCursor->Move(fnMoveForward);
diff --git a/sw/source/core/access/accframe.cxx b/sw/source/core/access/accframe.cxx
index 6133af4..efb4122 100644
--- a/sw/source/core/access/accframe.cxx
+++ b/sw/source/core/access/accframe.cxx
@@ -435,8 +435,8 @@ OUString SwAccessibleFrame::GetFormattedPageNumber() const
     sal_uInt16 nPageNum = GetFrame()->GetVirtPageNum();
     SvxNumType nFormat = GetFrame()->FindPageFrame()->GetPageDesc()
                               ->GetNumType().GetNumberingType();
-    if( SVX_NUM_NUMBER_NONE == nFormat )
-        nFormat = SVX_NUM_ARABIC;
+    if( SvxNumType::NUMBER_NONE == nFormat )
+        nFormat = SvxNumType::ARABIC;
 
     OUString sRet( FormatNumber( nPageNum, nFormat ) );
     return sRet;
diff --git a/sw/source/core/doc/DocumentStylePoolManager.cxx b/sw/source/core/doc/DocumentStylePoolManager.cxx
index c5d8fa0..75f694f 100644
--- a/sw/source/core/doc/DocumentStylePoolManager.cxx
+++ b/sw/source/core/doc/DocumentStylePoolManager.cxx
@@ -1597,7 +1597,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
         {
             SwNumFormat aFormat;
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_ARABIC);
+            aFormat.SetNumberingType(SvxNumType::ARABIC);
             aFormat.SetCharFormat( pNumCFormat );
             aFormat.SetStart( 1 );
             aFormat.SetIncludeUpperLevels( 1 );
@@ -1650,7 +1650,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
             SwNumFormat aFormat;
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_ARABIC);
+            aFormat.SetNumberingType(SvxNumType::ARABIC);
             aFormat.SetCharFormat( pNumCFormat );
             aFormat.SetIncludeUpperLevels( 1 );
 
@@ -1684,7 +1684,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
             SwNumFormat aFormat;
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_ARABIC);
+            aFormat.SetNumberingType(SvxNumType::ARABIC);
             aFormat.SetCharFormat( pNumCFormat );
             aFormat.SetIncludeUpperLevels( 1 );
 
@@ -1723,7 +1723,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
             SwNumFormat aFormat;
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_ROMAN_UPPER);
+            aFormat.SetNumberingType(SvxNumType::ROMAN_UPPER);
             aFormat.SetCharFormat( pNumCFormat );
             aFormat.SetIncludeUpperLevels( 1 );
             aFormat.SetSuffix( "." );
@@ -1777,7 +1777,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
             SwNumFormat aFormat;
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_ARABIC);
+            aFormat.SetNumberingType(SvxNumType::ARABIC);
             aFormat.SetStart( 1 );
             aFormat.SetIncludeUpperLevels( 1 );
             aFormat.SetSuffix( "." );
@@ -1819,7 +1819,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
 
             pNewRule->Set( 1, aFormat );
 
-            aFormat.SetNumberingType(SVX_NUM_CHARS_LOWER_LETTER);
+            aFormat.SetNumberingType(SvxNumType::CHARS_LOWER_LETTER);
             aFormat.SetSuffix(OUString(static_cast<sal_Unicode>(')')));
             aFormat.SetIncludeUpperLevels( 1 );
             aFormat.SetStart( 3 );
@@ -1838,7 +1838,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
 
             pNewRule->Set( 2, aFormat );
 
-            aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+            aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
             aFormat.SetCharFormat( pBullCFormat );
             aFormat.SetBulletFont(  &numfunc::GetDefBulletFont() );
             aFormat.SetBulletChar( cBulletChar );
@@ -1880,7 +1880,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
             SwNumFormat aFormat;
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+            aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
             aFormat.SetCharFormat( pBullCFormat );
             aFormat.SetStart( 1 );
             aFormat.SetIncludeUpperLevels( 1 );
@@ -1925,7 +1925,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
             SwNumFormat aFormat;
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+            aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
             aFormat.SetCharFormat( pBullCFormat );
             aFormat.SetStart( 1 );
             aFormat.SetIncludeUpperLevels( 1 );
@@ -1971,7 +1971,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
 
-            aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+            aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
             aFormat.SetCharFormat( pBullCFormat );
             aFormat.SetStart( 1 );
             aFormat.SetIncludeUpperLevels( 1 );
@@ -2013,7 +2013,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
             SwNumFormat aFormat;
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+            aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
             aFormat.SetCharFormat( pBullCFormat );
             aFormat.SetStart( 1 );
             aFormat.SetIncludeUpperLevels( 1 );
@@ -2065,7 +2065,7 @@ SwNumRule* DocumentStylePoolManager::GetNumRuleFromPool( sal_uInt16 nId )
             SwNumFormat aFormat;
 
             aFormat.SetPositionAndSpaceMode( eNumberFormatPositionAndSpaceMode );
-            aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+            aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
             aFormat.SetCharFormat( pBullCFormat );
             aFormat.SetStart( 1 );
             aFormat.SetIncludeUpperLevels( 1 );
diff --git a/sw/source/core/doc/dbgoutsw.cxx b/sw/source/core/doc/dbgoutsw.cxx
index 79c0b97..cba713c 100644
--- a/sw/source/core/doc/dbgoutsw.cxx
+++ b/sw/source/core/doc/dbgoutsw.cxx
@@ -468,33 +468,33 @@ static const OUString lcl_AnchoredFrames(const SwNode & rNode)
     return aResult;
 }
 
-static OUString lcl_dbg_out_NumType(sal_Int16 nType)
+static OUString lcl_dbg_out_NumType(SvxNumType nType)
 {
     OUString aTmpStr;
 
     switch (nType)
     {
-    case SVX_NUM_NUMBER_NONE:
+    case SvxNumType::NUMBER_NONE:
         aTmpStr += " NONE";
 
         break;
-    case SVX_NUM_CHARS_UPPER_LETTER:
+    case SvxNumType::CHARS_UPPER_LETTER:
         aTmpStr += " CHARS_UPPER_LETTER";
 
         break;
-    case SVX_NUM_CHARS_LOWER_LETTER:
+    case SvxNumType::CHARS_LOWER_LETTER:
         aTmpStr += " CHARS_LOWER_LETTER";
 
         break;
-    case SVX_NUM_ROMAN_UPPER:
+    case SvxNumType::ROMAN_UPPER:
         aTmpStr += " ROMAN_UPPER";
 
         break;
-    case SVX_NUM_ROMAN_LOWER:
+    case SvxNumType::ROMAN_LOWER:
         aTmpStr += " ROMAN_LOWER";
 
         break;
-    case SVX_NUM_ARABIC:
+    case SvxNumType::ARABIC:
         aTmpStr += " ARABIC";
 
         break;
diff --git a/sw/source/core/doc/docftn.cxx b/sw/source/core/doc/docftn.cxx
index d2896ac..77dac04 100644
--- a/sw/source/core/doc/docftn.cxx
+++ b/sw/source/core/doc/docftn.cxx
@@ -114,7 +114,7 @@ SwEndNoteInfo::SwEndNoteInfo() :
     m_bEndNote( true ),
     nFootnoteOffset( 0 )
 {
-    aFormat.SetNumberingType(SVX_NUM_ROMAN_LOWER);
+    aFormat.SetNumberingType(SvxNumType::ROMAN_LOWER);
 }
 
 SwPageDesc *SwEndNoteInfo::GetPageDesc( SwDoc &rDoc ) const
@@ -244,7 +244,7 @@ SwFootnoteInfo::SwFootnoteInfo() :
     ePos( FTNPOS_PAGE ),
     eNum( FTNNUM_DOC )
 {
-    aFormat.SetNumberingType(SVX_NUM_ARABIC);
+    aFormat.SetNumberingType(SvxNumType::ARABIC);
     m_bEndNote = false;
 }
 
diff --git a/sw/source/core/doc/doclay.cxx b/sw/source/core/doc/doclay.cxx
index 38b9f87..1097997 100644
--- a/sw/source/core/doc/doclay.cxx
+++ b/sw/source/core/doc/doclay.cxx
@@ -910,7 +910,7 @@ lcl_InsertLabel(SwDoc & rDoc, SwTextFormatColls *const pTextFormatCollTable,
         // Insert field
         if(pType)
         {
-            SwSetExpField aField( static_cast<SwSetExpFieldType*>(pType), OUString(), SVX_NUM_ARABIC);
+            SwSetExpField aField( static_cast<SwSetExpFieldType*>(pType), OUString(), SvxNumType::ARABIC);
             if( bOrderNumberingFirst )
                 nIdx = 0;
             SwFormatField aFormat( aField );
@@ -1202,7 +1202,7 @@ lcl_InsertDrawLabel( SwDoc & rDoc, SwTextFormatColls *const pTextFormatCollTable
         // insert field
         if ( pType )
         {
-            SwSetExpField aField( static_cast<SwSetExpFieldType*>(pType), OUString(), SVX_NUM_ARABIC );
+            SwSetExpField aField( static_cast<SwSetExpFieldType*>(pType), OUString(), SvxNumType::ARABIC );
             if( bOrderNumberingFirst )
                 nIdx = 0;
             SwFormatField aFormat( aField );
diff --git a/sw/source/core/doc/docnum.cxx b/sw/source/core/doc/docnum.cxx
index 89a8a25..c32cd9f 100644
--- a/sw/source/core/doc/docnum.cxx
+++ b/sw/source/core/doc/docnum.cxx
@@ -769,7 +769,7 @@ static void lcl_ChgNumRule( SwDoc& rDoc, const SwNumRule& rRule )
         {
             nChgFormatLevel |= nMask;
         }
-        else if ( SVX_NUM_NUMBER_NONE > rNewFormat.GetNumberingType()
+        else if ( SvxNumType::NUMBER_NONE > rNewFormat.GetNumberingType()
                   && 1 < rNewFormat.GetIncludeUpperLevels()
                   && 0 != ( nChgFormatLevel & GetUpperLvlChg( n, rNewFormat.GetIncludeUpperLevels(), nMask ) ) )
         {
diff --git a/sw/source/core/doc/number.cxx b/sw/source/core/doc/number.cxx
index 782c8c4..b6935d5 100644
--- a/sw/source/core/doc/number.cxx
+++ b/sw/source/core/doc/number.cxx
@@ -176,7 +176,7 @@ static void lcl_SetRuleChgd( SwTextNode& rNd, sal_uInt8 nLevel )
 }
 
 SwNumFormat::SwNumFormat() :
-    SvxNumberFormat(SVX_NUM_ARABIC),
+    SvxNumberFormat(SvxNumType::ARABIC),
     SwClient( nullptr ),
     m_pVertOrient(new SwFormatVertOrient( 0, text::VertOrientation::NONE))
     ,m_cGrfBulletCP(USHRT_MAX)//For i120928,record the cp info of graphic within bullet
@@ -239,8 +239,8 @@ bool SwNumFormat::IsItemize() const
 
     switch(GetNumberingType())
     {
-    case SVX_NUM_CHAR_SPECIAL:
-    case SVX_NUM_BITMAP:
+    case SvxNumType::CHAR_SPECIAL:
+    case SvxNumType::BITMAP:
         bResult = true;
 
         break;
@@ -421,7 +421,7 @@ SwNumRule::SwNumRule( const OUString& rNm,
         for( n = 0; n < MAXLEVEL; ++n )
         {
             pFormat = new SwNumFormat;
-            pFormat->SetNumberingType(SVX_NUM_NUMBER_NONE);
+            pFormat->SetNumberingType(SvxNumType::NUMBER_NONE);
             pFormat->SetIncludeUpperLevels( MAXLEVEL );
             pFormat->SetStart( 1 );
             pFormat->SetCharTextDistance( lOutlineMinTextDistance );
@@ -432,7 +432,7 @@ SwNumRule::SwNumRule( const OUString& rNm,
         for( n = 0; n < MAXLEVEL; ++n )
         {
             pFormat = new SwNumFormat;
-            pFormat->SetNumberingType(SVX_NUM_NUMBER_NONE);
+            pFormat->SetNumberingType(SvxNumType::NUMBER_NONE);
             pFormat->SetIncludeUpperLevels( MAXLEVEL );
             pFormat->SetStart( 1 );
             pFormat->SetPositionAndSpaceMode( SvxNumberFormat::LABEL_ALIGNMENT );
@@ -639,7 +639,7 @@ OUString SwNumRule::MakeNumString( const SwNumberTree::tNumberVector & rNumVecto
 
             if( !IsContinusNum() &&
                 // - do not include upper levels, if level isn't numbered.
-                rMyNFormat.GetNumberingType() != SVX_NUM_NUMBER_NONE &&
+                rMyNFormat.GetNumberingType() != SvxNumType::NUMBER_NONE &&
                 rMyNFormat.GetIncludeUpperLevels() )  // Just the own level?
             {
                 sal_uInt8 n = rMyNFormat.GetIncludeUpperLevels();
@@ -655,7 +655,7 @@ OUString SwNumRule::MakeNumString( const SwNumberTree::tNumberVector & rNumVecto
             for( ; i <= nLevel; ++i )
             {
                 const SwNumFormat& rNFormat = Get( i );
-                if( SVX_NUM_NUMBER_NONE == rNFormat.GetNumberingType() )
+                if( SvxNumType::NUMBER_NONE == rNFormat.GetNumberingType() )
                 {
                     // Should 1.1.1 --> 2. NoNum --> 1..1 or 1.1 ??
                     //                 if( i != rNum.nMyLevel )
@@ -679,8 +679,8 @@ OUString SwNumRule::MakeNumString( const SwNumberTree::tNumberVector & rNumVecto
             // The type doesn't have any number, so don't append
             // the post-/prefix string
             if( bInclStrings && !bOnlyArabic &&
-                SVX_NUM_CHAR_SPECIAL != rMyNFormat.GetNumberingType() &&
-                SVX_NUM_BITMAP != rMyNFormat.GetNumberingType() )
+                SvxNumType::CHAR_SPECIAL != rMyNFormat.GetNumberingType() &&
+                SvxNumType::BITMAP != rMyNFormat.GetNumberingType() )
             {
                 const OUString& sPrefix = rMyNFormat.GetPrefix();
                 const OUString& sSuffix = rMyNFormat.GetSuffix();
@@ -724,7 +724,7 @@ OUString SwNumRule::MakeRefNumString( const SwNodeNum& rNodeNum,
 
                 SwNumFormat aFormat( Get( static_cast<sal_uInt16>(nListLevel) ) );
                 bMakeNumStringForPhantom = aFormat.IsEnumeration() &&
-                                           SVX_NUM_NUMBER_NONE != aFormat.GetNumberingType();
+                                           SvxNumType::NUMBER_NONE != aFormat.GetNumberingType();
 
             }
             if ( bMakeNumStringForPhantom ||
diff --git a/sw/source/core/edit/autofmt.cxx b/sw/source/core/edit/autofmt.cxx
index 168a083..2bf12f6 100644
--- a/sw/source/core/edit/autofmt.cxx
+++ b/sw/source/core/edit/autofmt.cxx
@@ -764,12 +764,12 @@ sal_uInt16 SwAutoFormat::GetDigitLevel( const SwTextNode& rNd, sal_Int32& rPos,
                 }
 
                 if( pNumTypes )
-                    *pNumTypes += OUStringLiteral1('0' + SVX_NUM_ARABIC);
+                    *pNumTypes += OUStringLiteral1('0' + (int)SvxNumType::ARABIC);
 
                 eScan = eScan | CHG;
             }
             else if( pNumTypes && !(eScan & DIGIT) )
-                *pNumTypes += OUStringLiteral1('0' + SVX_NUM_ARABIC);
+                *pNumTypes += OUStringLiteral1('0' + (int)SvxNumType::ARABIC);
 
             eScan &= ~DELIM;        // remove Delim
             if( 0 != (eScan & ~CHG) && DIGIT != (eScan & ~CHG))
@@ -803,23 +803,23 @@ sal_uInt16 SwAutoFormat::GetDigitLevel( const SwTextNode& rNd, sal_Int32& rPos,
             {
                 if( bIsUpper )
                 {
-                    cNumTyp = '0' + SVX_NUM_ROMAN_UPPER;
+                    cNumTyp = '0' + (int)SvxNumType::ROMAN_UPPER;
                     eTmpScan = UPPER_ROMAN;
                 }
                 else
                 {
-                    cNumTyp = '0' + SVX_NUM_ROMAN_LOWER;
+                    cNumTyp = '0' + (int)SvxNumType::ROMAN_LOWER;
                     eTmpScan = LOWER_ROMAN;
                 }
             }
             else if( bIsUpper )
             {
-                cNumTyp = '0' + SVX_NUM_CHARS_UPPER_LETTER;
+                cNumTyp = '0' + (int)SvxNumType::CHARS_UPPER_LETTER;
                 eTmpScan = UPPER_ALPHA;
             }
             else
             {
-                cNumTyp = '0' + SVX_NUM_CHARS_LOWER_LETTER;
+                cNumTyp = '0' + (int)SvxNumType::CHARS_LOWER_LETTER;
                 eTmpScan = LOWER_ALPHA;
             }
 
@@ -835,12 +835,12 @@ sal_uInt16 SwAutoFormat::GetDigitLevel( const SwTextNode& rNd, sal_Int32& rPos,
                 if( UPPER_ALPHA == eTmpScan )
                 {
                     eTmpScan = UPPER_ROMAN;
-                    c += SVX_NUM_ROMAN_UPPER;
+                    c += (int)SvxNumType::ROMAN_UPPER;
                 }
                 else
                 {
                     eTmpScan = LOWER_ROMAN;
-                    c += SVX_NUM_ROMAN_LOWER;
+                    c += (int)SvxNumType::ROMAN_LOWER;
                 }
 
                 ( eScan &= ~(UPPER_ALPHA|LOWER_ALPHA)) |= eTmpScan;
@@ -1465,7 +1465,7 @@ void SwAutoFormat::BuildEnum( sal_uInt16 nLvl, sal_uInt16 nDigitLevel )
                         SwNumFormat aFormat( aRule.Get( n ) );
                         aFormat.SetBulletFont( pBullFnt );
                         aFormat.SetBulletChar( cBullChar );
-                        aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+                        aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
                         // #i93908# clear suffix for bullet lists
                         aFormat.SetPrefix(OUString());
                         aFormat.SetSuffix(OUString());
diff --git a/sw/source/core/edit/edattr.cxx b/sw/source/core/edit/edattr.cxx
index 19e7439..61b6f99 100644
--- a/sw/source/core/edit/edattr.cxx
+++ b/sw/source/core/edit/edattr.cxx
@@ -581,9 +581,9 @@ static bool lcl_IsNoEndTextAttrAtPos( const SwTextNode& rTNd, sal_Int32 nPos,
                     nListLevel = MAXLEVEL - 1;
 
                 const SwNumFormat &rNumFormat = pNumRule->Get( static_cast<sal_uInt16>(nListLevel) );
-                if( SVX_NUM_BITMAP != rNumFormat.GetNumberingType() )
+                if( SvxNumType::BITMAP != rNumFormat.GetNumberingType() )
                 {
-                    if ( SVX_NUM_CHAR_SPECIAL == rNumFormat.GetNumberingType() )
+                    if ( SvxNumType::CHAR_SPECIAL == rNumFormat.GetNumberingType() )
                         sExp = OUString(rNumFormat.GetBulletChar());
                     else
                         sExp = rTNd.GetNumString();
diff --git a/sw/source/core/fields/chpfld.cxx b/sw/source/core/fields/chpfld.cxx
index f7cf4ea..20c6999 100644
--- a/sw/source/core/fields/chpfld.cxx
+++ b/sw/source/core/fields/chpfld.cxx
@@ -143,7 +143,7 @@ void SwChapterField::ChangeExpansion(const SwTextNode &rTextNd, bool bSrchNum)
 
                     if( nPrevLvl < nLevel )
                         nLevel = nPrevLvl;
-                    else if( SVX_NUM_NUMBER_NONE != pDoc->GetOutlineNumRule()
+                    else if( SvxNumType::NUMBER_NONE != pDoc->GetOutlineNumRule()
                             ->Get( nLevel ).GetNumberingType() )
                     {
                         pTextNd = pONd;
diff --git a/sw/source/core/fields/docufld.cxx b/sw/source/core/fields/docufld.cxx
index 912a810..709ddd9 100644
--- a/sw/source/core/fields/docufld.cxx
+++ b/sw/source/core/fields/docufld.cxx
@@ -98,7 +98,7 @@ using namespace nsSwDocInfoSubType;
 
 SwPageNumberFieldType::SwPageNumberFieldType()
     : SwFieldType( RES_PAGENUMBERFLD ),
-    nNumberingType( SVX_NUM_ARABIC ),
+    nNumberingType( SvxNumType::ARABIC ),
     bVirtuell( false )
 {
 }
@@ -107,13 +107,13 @@ OUString SwPageNumberFieldType::Expand( SvxNumType nFormat, short nOff,
          sal_uInt16 const nPageNumber, sal_uInt16 const nMaxPage,
          const OUString& rUserStr ) const
 {
-    SvxNumType nTmpFormat = (SVX_NUM_PAGEDESC == nFormat) ? nNumberingType : nFormat;
+    SvxNumType nTmpFormat = (SvxNumType::PAGE_DESCRIPTOR == nFormat) ? nNumberingType : nFormat;
     int const nTmp = nPageNumber + nOff;
 
-    if (0 > nTmp || SVX_NUM_NUMBER_NONE == nTmpFormat || (!bVirtuell && nTmp > nMaxPage))
+    if (0 > nTmp || SvxNumType::NUMBER_NONE == nTmpFormat || (!bVirtuell && nTmp > nMaxPage))
         return OUString();
 
-    if( SVX_NUM_CHAR_SPECIAL == nTmpFormat )
+    if( SvxNumType::CHAR_SPECIAL == nTmpFormat )
         return rUserStr;
 
     return FormatNumber( nTmp, nTmpFormat );
@@ -273,7 +273,7 @@ bool SwPageNumberField::PutValue( const uno::Any& rAny, sal_uInt16 nWhichId )
         rAny >>= nSet;
 
         // TODO: woher kommen die defines?
-        if(nSet <= SVX_NUM_PAGEDESC )
+        if(nSet <= (sal_Int16)SvxNumType::PAGE_DESCRIPTOR )
             SetFormat(nSet);
         else {
         }
@@ -715,7 +715,7 @@ bool SwTemplNameField::PutValue( const uno::Any& rAny, sal_uInt16 nWhichId )
 }
 
 SwDocStatFieldType::SwDocStatFieldType(SwDoc* pDocument)
-    : SwFieldType( RES_DOCSTATFLD ), nNumberingType( SVX_NUM_ARABIC )
+    : SwFieldType( RES_DOCSTATFLD ), nNumberingType( SvxNumType::ARABIC )
 {
     pDoc = pDocument;
 }
@@ -736,7 +736,7 @@ OUString SwDocStatFieldType::Expand(sal_uInt16 nSubType, SvxNumType nFormat) con
             if( pDoc->getIDocumentLayoutAccess().GetCurrentLayout() )
                 ((SwDocStat &)rDStat).nPage = pDoc->getIDocumentLayoutAccess().GetCurrentLayout()->GetPageNum();
             nVal = rDStat.nPage;
-            if( SVX_NUM_PAGEDESC == nFormat )
+            if( SvxNumType::PAGE_DESCRIPTOR == nFormat )
                 nFormat = nNumberingType;
             break;
         default:
@@ -789,7 +789,7 @@ void SwDocStatField::SetSubType(sal_uInt16 nSub)
 
 void SwDocStatField::ChangeExpansion( const SwFrame* pFrame )
 {
-    if( DS_PAGE == nSubType && SVX_NUM_PAGEDESC == GetFormat() )
+    if( DS_PAGE == nSubType && SvxNumType::PAGE_DESCRIPTOR == (SvxNumType)GetFormat() )
         static_cast<SwDocStatFieldType*>(GetTyp())->SetNumFormat(
                 pFrame->FindPageFrame()->GetPageDesc()->GetNumType().GetNumberingType() );
 }
@@ -817,9 +817,9 @@ bool SwDocStatField::PutValue( const uno::Any& rAny, sal_uInt16 nWhichId )
         {
             sal_Int16 nSet = 0;
             rAny >>= nSet;
-            if(nSet <= SVX_NUM_CHARS_LOWER_LETTER_N &&
-                nSet != SVX_NUM_CHAR_SPECIAL &&
-                    nSet != SVX_NUM_BITMAP)
+            if(nSet <= (int)SvxNumType::CHARS_LOWER_LETTER_N &&
+                nSet != (int)SvxNumType::CHAR_SPECIAL &&
+                    nSet != (int)SvxNumType::BITMAP)
             {
                 SetFormat(nSet);
                 bRet = true;
@@ -2053,7 +2053,7 @@ bool SwRefPageSetField::PutValue( const uno::Any& rAny, sal_uInt16 nWhichId )
 // relative page numbers - query field
 
 SwRefPageGetFieldType::SwRefPageGetFieldType( SwDoc* pDc )
-    : SwFieldType( RES_REFPAGEGETFLD ), pDoc( pDc ), nNumberingType( SVX_NUM_ARABIC )
+    : SwFieldType( RES_REFPAGEGETFLD ), pDoc( pDc ), nNumberingType( SvxNumType::ARABIC )
 {
 }
 
@@ -2165,9 +2165,9 @@ void SwRefPageGetFieldType::UpdateField( SwTextField* pTextField,
                             pRefFrame->FindPageFrame()->GetPhyPageNum() + 1
                         : 1;
 
-                SvxNumType nTmpFormat = SVX_NUM_PAGEDESC == (SvxNumType)pGetField->GetFormat()
+                SvxNumType nTmpFormat = SvxNumType::PAGE_DESCRIPTOR == (SvxNumType)pGetField->GetFormat()
                         ? ( !pPgFrame
-                                ? SVX_NUM_ARABIC
+                                ? SvxNumType::ARABIC
                                 : pPgFrame->GetPageDesc()->GetNumType().GetNumberingType() )
                         : (SvxNumType)pGetField->GetFormat();
                 const short nPageNum = std::max<short>(0, pSetField->GetOffset() + nDiff);
@@ -2249,7 +2249,7 @@ void SwRefPageGetField::ChangeExpansion( const SwFrame* pFrame,
                             pRefFrame->FindPageFrame()->GetPhyPageNum() + 1;
 
         SwRefPageGetField* pGetField = const_cast<SwRefPageGetField*>(static_cast<const SwRefPageGetField*>(pField->GetFormatField().GetField()));
-        SvxNumType nTmpFormat = SVX_NUM_PAGEDESC == pGetField->GetFormat()
+        SvxNumType nTmpFormat = SvxNumType::PAGE_DESCRIPTOR == pGetField->GetFormat()
                             ? pPgFrame->GetPageDesc()->GetNumType().GetNumberingType()
                             : (SvxNumType)pGetField->GetFormat();
         const short nPageNum = std::max<short>(0, pSetField->GetOffset() + nDiff);
@@ -2281,7 +2281,7 @@ bool SwRefPageGetField::PutValue( const uno::Any& rAny, sal_uInt16 nWhichId )
         {
             sal_Int16 nSet = 0;
             rAny >>= nSet;
-            if(nSet <= SVX_NUM_PAGEDESC )
+            if(nSet <= SvxNumType::PAGE_DESCRIPTOR )
                 SetFormat(nSet);
             else {
             }
diff --git a/sw/source/core/fields/expfld.cxx b/sw/source/core/fields/expfld.cxx
index 1f1e688..88b59f1 100644
--- a/sw/source/core/fields/expfld.cxx
+++ b/sw/source/core/fields/expfld.cxx
@@ -278,7 +278,7 @@ void SwGetExpFieldType::Modify( const SfxPoolItem*, const SfxPoolItem* pNew )
 }
 
 SwGetExpField::SwGetExpField(SwGetExpFieldType* pTyp, const OUString& rFormel,
-                            sal_uInt16 nSub, sal_uLong nFormat)
+                            sal_uInt16 nSub, SvxNumType nFormat)
     : SwFormulaField( pTyp, nFormat, 0.0 ),
     bIsInBodyText( true ),
     nSubType(nSub),
@@ -517,20 +517,20 @@ void SwSetExpFieldType::Modify( const SfxPoolItem*, const SfxPoolItem* )
     return;     // do not expand further
 }
 
-void SwSetExpFieldType::SetSeqFormat(sal_uLong nFormat)
+void SwSetExpFieldType::SetSeqFormat(SvxNumType nFormat)
 {
     SwIterator<SwFormatField,SwFieldType> aIter(*this);
     for( SwFormatField* pFormatField = aIter.First(); pFormatField; pFormatField = aIter.Next() )
-        pFormatField->GetField()->ChangeFormat( nFormat );
+        pFormatField->GetField()->ChangeFormat( (sal_uInt32)nFormat );
 }
 
-sal_uLong SwSetExpFieldType::GetSeqFormat()
+SvxNumType SwSetExpFieldType::GetSeqFormat()
 {
     if( !HasWriterListeners() )
-        return SVX_NUM_ARABIC;
+        return SvxNumType::ARABIC;
 
     const SwField *pField = SwIterator<SwFormatField,SwSetExpFieldType>(*this).First()->GetField();
-    return pField->GetFormat();
+    return (SvxNumType)pField->GetFormat();
 }
 
 void SwSetExpFieldType::SetSeqRefNo( SwSetExpField& rField )
@@ -773,9 +773,9 @@ bool SwSeqFieldList::SeekEntry( const SeqFieldLstElem& rNew, size_t* pP ) const
 }
 
 SwSetExpField::SwSetExpField(SwSetExpFieldType* pTyp, const OUString& rFormel,
-                                        sal_uLong nFormat)
-    : SwFormulaField( pTyp, nFormat, 0.0 ), nSeqNo( USHRT_MAX ),
-    nSubType(0)
+                                        SvxNumType nFormat)
+    : SwFormulaField( pTyp, nFormat, 0.0 ), nSeqNo( USHRT_MAX )
+    , nSubType(0)
     , mpFormatField(nullptr)
 {
     SetFormula(rFormel);
diff --git a/sw/source/core/fields/fldbas.cxx b/sw/source/core/fields/fldbas.cxx
index 69233a9..cc6be37 100644
--- a/sw/source/core/fields/fldbas.cxx
+++ b/sw/source/core/fields/fldbas.cxx
@@ -433,11 +433,11 @@ SwField * SwField::CopyField() const
 /// expand numbering
 OUString FormatNumber(sal_uInt32 nNum, SvxNumType nFormat)
 {
-    if(SVX_NUM_PAGEDESC == nFormat)
+    if(SvxNumType::PAGE_DESCRIPTOR == nFormat)
         return  OUString::number( nNum );
     SvxNumberType aNumber;
 
-    OSL_ENSURE(nFormat != SVX_NUM_NUMBER_NONE, "wrong number format" );
+    OSL_ENSURE(nFormat != SvxNumType::NUMBER_NONE, "wrong number format" );
 
     aNumber.SetNumberingType(nFormat);
     return aNumber.GetNumStr(nNum);
@@ -535,9 +535,9 @@ OUString SwValueFieldType::DoubleToString( const double &rVal,
                                     pFormatter->GetDecSep(), true );
 }
 
-SwValueField::SwValueField( SwValueFieldType* pFieldType, sal_uInt32 nFormat,
+SwValueField::SwValueField( SwValueFieldType* pFieldType, SvxNumType nFormat,
                             sal_uInt16 nLng, const double fVal )
-    : SwField(pFieldType, nFormat, nLng)
+    : SwField(pFieldType, (sal_uInt32)nFormat, nLng)
     , m_fValue(fVal)
 {
 }
@@ -660,7 +660,7 @@ void SwValueField::SetValue( const double& rVal )
     m_fValue = rVal;
 }
 
-SwFormulaField::SwFormulaField( SwValueFieldType* pFieldType, sal_uInt32 nFormat, const double fVal)
+SwFormulaField::SwFormulaField( SwValueFieldType* pFieldType, SvxNumType nFormat, const double fVal)
     : SwValueField(pFieldType, nFormat, LANGUAGE_SYSTEM, fVal)
 {
 }
diff --git a/sw/source/core/layout/atrfrm.cxx b/sw/source/core/layout/atrfrm.cxx
index 496dda2..d293f38 100644
--- a/sw/source/core/layout/atrfrm.cxx
+++ b/sw/source/core/layout/atrfrm.cxx
@@ -1981,9 +1981,9 @@ bool SwFormatFootnoteEndAtTextEnd::PutValue( const uno::Any& rVal, sal_uInt8 nMe
             sal_Int16 nVal = 0;
             rVal >>= nVal;
             if(nVal >= 0 &&
-                (nVal <= SVX_NUM_ARABIC ||
-                    SVX_NUM_CHARS_UPPER_LETTER_N == nVal ||
-                        SVX_NUM_CHARS_LOWER_LETTER_N == nVal ))
+                (nVal <= (int)SvxNumType::ARABIC ||
+                    (int)SvxNumType::CHARS_UPPER_LETTER_N == nVal ||
+                    (int)SvxNumType::CHARS_LOWER_LETTER_N == nVal ))
                 aFormat.SetNumberingType((SvxNumType)nVal);
             else
                 bRet = false;
diff --git a/sw/source/core/text/txtfld.cxx b/sw/source/core/text/txtfld.cxx
index 1d5ecd2..77a2fde 100644
--- a/sw/source/core/text/txtfld.cxx
+++ b/sw/source/core/text/txtfld.cxx
@@ -160,7 +160,7 @@ SwExpandPortion *SwTextFormatter::NewFieldPortion( SwTextFormatInfo &rInf,
                 sal_uInt16 nVirtNum = pFrame->GetVirtPageNum();
                 sal_uInt16 nNumPages = pTmpRootFrame->GetPageNum();
                 SvxNumType nNumFormat = (SvxNumType)-1;
-                if(SVX_NUM_PAGEDESC == pField->GetFormat())
+                if(SvxNumType::PAGE_DESCRIPTOR == pField->GetFormat())
                     nNumFormat = pFrame->FindPageFrame()->GetPageDesc()->GetNumType().GetNumberingType();
                 static_cast<SwPageNumberField*>(pField)
                     ->ChangeExpansion(nVirtNum, nNumPages);
@@ -476,7 +476,7 @@ SwNumberPortion *SwTextFormatter::NewNumberPortion( SwTextFormatInfo &rInf ) con
         const sal_uInt16 nMinDist = bLabelAlignmentPosAndSpaceModeActive
                                 ? 0 : rNumFormat.GetCharTextDistance();
 
-        if( SVX_NUM_BITMAP == rNumFormat.GetNumberingType() )
+        if( SvxNumType::BITMAP == rNumFormat.GetNumberingType() )
         {
             pRet = new SwGrfNumPortion( const_cast<SwTextFrame*>(GetTextFrame()),
                                         pTextNd->GetLabelFollowedBy(),
@@ -501,7 +501,7 @@ SwNumberPortion *SwTextFormatter::NewNumberPortion( SwTextFormatInfo &rInf ) con
                                     nullptr;
             const IDocumentSettingAccess* pIDSA = pTextNd->getIDocumentSettingAccess();
 
-            if( SVX_NUM_CHAR_SPECIAL == rNumFormat.GetNumberingType() )
+            if( SvxNumType::CHAR_SPECIAL == rNumFormat.GetNumberingType() )
             {
                 const vcl::Font *pFormatFnt = rNumFormat.GetBulletFont();
 
diff --git a/sw/source/core/txtnode/ndtxt.cxx b/sw/source/core/txtnode/ndtxt.cxx
index dbca147..7978a2e 100644
--- a/sw/source/core/txtnode/ndtxt.cxx
+++ b/sw/source/core/txtnode/ndtxt.cxx
@@ -2683,7 +2683,7 @@ bool SwTextNode::HasNumber() const
 
         // #i40041#
         bResult = aFormat.IsEnumeration() &&
-            SVX_NUM_NUMBER_NONE != aFormat.GetNumberingType();
+            SvxNumType::NUMBER_NONE != aFormat.GetNumberingType();
     }
 
     return bResult;
@@ -3782,7 +3782,7 @@ bool SwTextNode::HasVisibleNumberingOrBullet() const
         // Correction of #newlistlevelattrs#:
         // The numbering type has to be checked for bullet lists.
         const SwNumFormat& rFormat = pRule->Get( lcl_BoundListLevel(GetActualListLevel()) );
-        return SVX_NUM_NUMBER_NONE != rFormat.GetNumberingType() ||
+        return SvxNumType::NUMBER_NONE != rFormat.GetNumberingType() ||
                !pRule->MakeNumString( *(GetNum()) ).isEmpty();
     }
 
diff --git a/sw/source/core/unocore/unosett.cxx b/sw/source/core/unocore/unosett.cxx
index b7892a0..9378a94 100644
--- a/sw/source/core/unocore/unosett.cxx
+++ b/sw/source/core/unocore/unosett.cxx
@@ -324,8 +324,8 @@ void SwXFootnoteProperties::setPropertyValue(const OUString& rPropertyName, cons
                     sal_Int16 nTmp = 0;
                     aValue >>= nTmp;
                     if(nTmp >= 0 &&
-                        (nTmp <= SVX_NUM_ARABIC ||
-                            nTmp > SVX_NUM_BITMAP))
+                        (nTmp <= SvxNumType::ARABIC ||
+                            nTmp > SvxNumType::BITMAP))
                         aFootnoteInfo.aFormat.SetNumberingType((SvxNumType)nTmp);
                     else
                         throw lang::IllegalArgumentException();
@@ -1418,7 +1418,7 @@ uno::Sequence<beans::PropertyValue> SwXNumberingRules::GetPropertiesForNumFormat
 
     if(!bChapterNum)
     {
-        if(SVX_NUM_CHAR_SPECIAL == rFormat.GetNumberingType())
+        if(SvxNumType::CHAR_SPECIAL == rFormat.GetNumberingType())
         {
             //BulletId
             nINT16 = rFormat.GetBulletChar();
@@ -1442,7 +1442,7 @@ uno::Sequence<beans::PropertyValue> SwXNumberingRules::GetPropertiesForNumFormat
                 aPropertyValues.push_back(comphelper::makePropertyValue(UNO_NAME_BULLET_FONT, aDesc));
             }
         }
-        if(SVX_NUM_BITMAP == rFormat.GetNumberingType())
+        if(SvxNumType::BITMAP == rFormat.GetNumberingType())
         {
             //GraphicURL
             const SvxBrushItem* pBrush = rFormat.GetBrush();
diff --git a/sw/source/filter/html/htmlfld.cxx b/sw/source/filter/html/htmlfld.cxx
index 2dfdb21..f1ab615 100644
--- a/sw/source/filter/html/htmlfld.cxx
+++ b/sw/source/filter/html/htmlfld.cxx
@@ -89,16 +89,16 @@ static HTMLNumFormatTableEntry aHTMLTimeFieldFormatTable[] =
 
 static HTMLOptionEnum<SvxNumType> aHTMLPageNumFieldFormatTable[] =
 {
-    { OOO_STRING_SW_HTML_FF_uletter,     SVX_NUM_CHARS_UPPER_LETTER },
-    { OOO_STRING_SW_HTML_FF_lletter,     SVX_NUM_CHARS_LOWER_LETTER },
-    { OOO_STRING_SW_HTML_FF_uroman,      SVX_NUM_ROMAN_UPPER },
-    { OOO_STRING_SW_HTML_FF_lroman,      SVX_NUM_ROMAN_LOWER },
-    { OOO_STRING_SW_HTML_FF_arabic,      SVX_NUM_ARABIC },
-    { OOO_STRING_SW_HTML_FF_none,        SVX_NUM_NUMBER_NONE },
-    { OOO_STRING_SW_HTML_FF_char,        SVX_NUM_CHAR_SPECIAL },
-    { OOO_STRING_SW_HTML_FF_page,        SVX_NUM_PAGEDESC },
-    { OOO_STRING_SW_HTML_FF_ulettern,    SVX_NUM_CHARS_UPPER_LETTER_N },
-    { OOO_STRING_SW_HTML_FF_llettern,    SVX_NUM_CHARS_LOWER_LETTER_N },
+    { OOO_STRING_SW_HTML_FF_uletter,     SvxNumType::CHARS_UPPER_LETTER },
+    { OOO_STRING_SW_HTML_FF_lletter,     SvxNumType::CHARS_LOWER_LETTER },
+    { OOO_STRING_SW_HTML_FF_uroman,      SvxNumType::ROMAN_UPPER },
+    { OOO_STRING_SW_HTML_FF_lroman,      SvxNumType::ROMAN_LOWER },
+    { OOO_STRING_SW_HTML_FF_arabic,      SvxNumType::ARABIC },
+    { OOO_STRING_SW_HTML_FF_none,        SvxNumType::NUMBER_NONE },
+    { OOO_STRING_SW_HTML_FF_char,        SvxNumType::CHAR_SPECIAL },
+    { OOO_STRING_SW_HTML_FF_page,        SvxNumType::PAGE_DESCRIPTOR },
+    { OOO_STRING_SW_HTML_FF_ulettern,    SvxNumType::CHARS_UPPER_LETTER_N },
+    { OOO_STRING_SW_HTML_FF_llettern,    SvxNumType::CHARS_LOWER_LETTER_N },
     { nullptr,                           (SvxNumType)0 }
 };
 
@@ -405,25 +405,25 @@ void SwHTMLParser::NewField()
             SwPageNumSubType nSub;
             if( pSubOption->GetEnum( nSub, aHTMLPageNumFieldSubTable ) )
             {
-                SvxNumType nFormat = SVX_NUM_PAGEDESC;
+                SvxNumType nFormat = SvxNumType::PAGE_DESCRIPTOR;
                 if( pFormatOption )
                     pFormatOption->GetEnum( nFormat, aHTMLPageNumFieldFormatTable );
 
                 short nOff = 0;
 
-                if( nFormat!=SVX_NUM_CHAR_SPECIAL && !aValue.isEmpty() )
+                if( nFormat!=SvxNumType::CHAR_SPECIAL && !aValue.isEmpty() )
                     nOff = (short)aValue.toInt32();
                 else if( nSub == PG_NEXT  )
                     nOff = 1;
                 else if( nSub == PG_PREV  )
                     nOff = -1;
 
-                if( nFormat==SVX_NUM_CHAR_SPECIAL &&
+                if( nFormat==SvxNumType::CHAR_SPECIAL &&
                     nSub==PG_RANDOM )
-                    nFormat = SVX_NUM_PAGEDESC;
+                    nFormat = SvxNumType::PAGE_DESCRIPTOR;
 
                 pNewField = new SwPageNumberField(static_cast<SwPageNumberFieldType*>(pType), nSub, nFormat, nOff);
-                if (nFormat == SVX_NUM_CHAR_SPECIAL)
+                if (nFormat == SvxNumType::CHAR_SPECIAL)
                     static_cast<SwPageNumberField *>(pNewField)->SetUserString(aValue);
             }
         }
@@ -485,7 +485,7 @@ void SwHTMLParser::NewField()
             SwDocStatSubType nSub;
             if( pSubOption->GetEnum( nSub, aHTMLDocStatFieldSubTable ) )
             {
-                SvxNumType nFormat = SVX_NUM_ARABIC;
+                SvxNumType nFormat = SvxNumType::ARABIC;
                 if( pFormatOption )
                     pFormatOption->GetEnum( nFormat, aHTMLPageNumFieldFormatTable );
                 pNewField = new SwDocStatField(static_cast<SwDocStatFieldType*>(pType), nSub, nFormat);
diff --git a/sw/source/filter/html/htmlfldw.cxx b/sw/source/filter/html/htmlfldw.cxx
index 0ee31b9..a377e0f 100644
--- a/sw/source/filter/html/htmlfldw.cxx
+++ b/sw/source/filter/html/htmlfldw.cxx
@@ -43,16 +43,16 @@ const sal_Char *SwHTMLWriter::GetNumFormat( sal_uInt16 nFormat )
 
     switch( (SvxNumType)nFormat )
     {
-    case SVX_NUM_CHARS_UPPER_LETTER:    pFormatStr = OOO_STRING_SW_HTML_FF_uletter;    break;
-    case SVX_NUM_CHARS_LOWER_LETTER:    pFormatStr = OOO_STRING_SW_HTML_FF_lletter;    break;
-    case SVX_NUM_ROMAN_UPPER:           pFormatStr = OOO_STRING_SW_HTML_FF_uroman;         break;
-    case SVX_NUM_ROMAN_LOWER:           pFormatStr = OOO_STRING_SW_HTML_FF_lroman;         break;
-    case SVX_NUM_ARABIC:                pFormatStr = OOO_STRING_SW_HTML_FF_arabic;     break;
-    case SVX_NUM_NUMBER_NONE:           pFormatStr = OOO_STRING_SW_HTML_FF_none;       break;
-    case SVX_NUM_CHAR_SPECIAL:          pFormatStr = OOO_STRING_SW_HTML_FF_char;       break;
-    case SVX_NUM_PAGEDESC:              pFormatStr = OOO_STRING_SW_HTML_FF_page;       break;
-    case SVX_NUM_CHARS_UPPER_LETTER_N:  pFormatStr = OOO_STRING_SW_HTML_FF_ulettern;   break;
-    case SVX_NUM_CHARS_LOWER_LETTER_N:  pFormatStr = OOO_STRING_SW_HTML_FF_llettern;   break;
+    case SvxNumType::CHARS_UPPER_LETTER:    pFormatStr = OOO_STRING_SW_HTML_FF_uletter;    break;
+    case SvxNumType::CHARS_LOWER_LETTER:    pFormatStr = OOO_STRING_SW_HTML_FF_lletter;    break;
+    case SvxNumType::ROMAN_UPPER:           pFormatStr = OOO_STRING_SW_HTML_FF_uroman;         break;
+    case SvxNumType::ROMAN_LOWER:           pFormatStr = OOO_STRING_SW_HTML_FF_lroman;         break;
+    case SvxNumType::ARABIC:                pFormatStr = OOO_STRING_SW_HTML_FF_arabic;     break;
+    case SvxNumType::NUMBER_NONE:           pFormatStr = OOO_STRING_SW_HTML_FF_none;       break;
+    case SvxNumType::CHAR_SPECIAL:          pFormatStr = OOO_STRING_SW_HTML_FF_char;       break;
+    case SvxNumType::PAGE_DESCRIPTOR:              pFormatStr = OOO_STRING_SW_HTML_FF_page;       break;
+    case SvxNumType::CHARS_UPPER_LETTER_N:  pFormatStr = OOO_STRING_SW_HTML_FF_ulettern;   break;
+    case SvxNumType::CHARS_LOWER_LETTER_N:  pFormatStr = OOO_STRING_SW_HTML_FF_llettern;   break;
     default:
         ;
     }
@@ -141,7 +141,7 @@ static Writer& OutHTML_SwField( Writer& rWrt, const SwField* pField,
                 OSL_ENSURE( pSubStr, "ubekannter Subtyp fuer SwPageNumberField" );
                 pFormatStr = SwHTMLWriter::GetNumFormat( static_cast< sal_uInt16 >(nFormat) );
 
-                if( (SvxNumType)nFormat==SVX_NUM_CHAR_SPECIAL )
+                if( (SvxNumType)nFormat==SvxNumType::CHAR_SPECIAL )
                 {
                     aValue = static_cast<const SwPageNumberField *>(pField)->GetUserString();
                 }
diff --git a/sw/source/filter/html/htmlftn.cxx b/sw/source/filter/html/htmlftn.cxx
index a3b66b8..5edc9c2 100644
--- a/sw/source/filter/html/htmlftn.cxx
+++ b/sw/source/filter/html/htmlftn.cxx
@@ -98,7 +98,7 @@ sal_Int32 lcl_html_getEndNoteInfo( SwEndNoteInfo& rInfo,
         switch( nPart )
         {
         case 0:
-            rInfo.aFormat.SetNumberingType( bEndNote ? SVX_NUM_ROMAN_LOWER : SVX_NUM_ARABIC );
+            rInfo.aFormat.SetNumberingType( bEndNote ? SvxNumType::ROMAN_LOWER : SvxNumType::ARABIC );
             if( !aPart.isEmpty() )
                 rInfo.aFormat.SetNumberingType(SwHTMLParser::GetNumType( aPart,
                                                              rInfo.aFormat.GetNumberingType() ));
@@ -484,7 +484,7 @@ static int lcl_html_fillEndNoteInfo( const SwEndNoteInfo& rInfo,
 {
     int nParts = 0;
     sal_Int16 eFormat = rInfo.aFormat.GetNumberingType();
-    if( (bEndNote ? SVX_NUM_ROMAN_LOWER : SVX_NUM_ARABIC) != eFormat )
+    if( (bEndNote ? SvxNumType::ROMAN_LOWER : SvxNumType::ARABIC) != eFormat )
     {
         const sal_Char *pStr = SwHTMLWriter::GetNumFormat( eFormat );
         if( pStr )
diff --git a/sw/source/filter/html/htmlnumreader.cxx b/sw/source/filter/html/htmlnumreader.cxx
index 6704369..a5fe8c1 100644
--- a/sw/source/filter/html/htmlnumreader.cxx
+++ b/sw/source/filter/html/htmlnumreader.cxx
@@ -87,7 +87,7 @@ void SwHTMLParser::NewNumBulList( int nToken )
         sal_uInt16 nChrFormatPoolId = 0;
         if( HTML_ORDERLIST_ON == nToken )
         {
-            aNumFormat.SetNumberingType(SVX_NUM_ARABIC);
+            aNumFormat.SetNumberingType(SvxNumType::ARABIC);
             nChrFormatPoolId = RES_POOLCHR_NUM_LEVEL;
         }
         else
@@ -99,7 +99,7 @@ void SwHTMLParser::NewNumBulList( int nToken )
             {
                 aNumFormat.SetBulletFont( &numfunc::GetDefBulletFont() );
             }
-            aNumFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+            aNumFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
             aNumFormat.SetBulletChar( cBulletChar );
             nChrFormatPoolId = RES_POOLCHR_BUL_LEVEL;
         }
@@ -148,10 +148,10 @@ void SwHTMLParser::NewNumBulList( int nToken )
                     bChangeNumFormat = true;
                     switch( rOption.GetString()[0] )
                     {
-                    case 'A':   aNumFormat.SetNumberingType(SVX_NUM_CHARS_UPPER_LETTER); break;
-                    case 'a':   aNumFormat.SetNumberingType(SVX_NUM_CHARS_LOWER_LETTER); break;
-                    case 'I':   aNumFormat.SetNumberingType(SVX_NUM_ROMAN_UPPER);        break;
-                    case 'i':   aNumFormat.SetNumberingType(SVX_NUM_ROMAN_LOWER);        break;
+                    case 'A':   aNumFormat.SetNumberingType(SvxNumType::CHARS_UPPER_LETTER); break;
+                    case 'a':   aNumFormat.SetNumberingType(SvxNumType::CHARS_LOWER_LETTER); break;
+                    case 'I':   aNumFormat.SetNumberingType(SvxNumType::ROMAN_UPPER);        break;
+                    case 'i':   aNumFormat.SetNumberingType(SvxNumType::ROMAN_LOWER);        break;
                     default:    bChangeNumFormat = false;
                     }
                     break;
@@ -213,7 +213,7 @@ void SwHTMLParser::NewNumBulList( int nToken )
     if( !aBulletSrc.isEmpty() )
     {
         // A bullet list with graphics
-        aNumFormat.SetNumberingType(SVX_NUM_BITMAP);
+        aNumFormat.SetNumberingType(SvxNumType::BITMAP);
 
         // Create the graphic as a brush
         SvxBrushItem aBrushItem( RES_BACKGROUND );
@@ -374,9 +374,9 @@ void SwHTMLParser::EndNumBulList( int nToken )
                 else if( pRefNumFormat )
                 {
                     SwNumFormat aNumFormat( rInfo.GetNumRule()->Get(i) );
-                    aNumFormat.SetNumberingType(pRefNumFormat->GetNumberingType() != SVX_NUM_BITMAP
-                                                ? pRefNumFormat->GetNumberingType() : SVX_NUM_CHAR_SPECIAL);
-                    if( SVX_NUM_CHAR_SPECIAL == aNumFormat.GetNumberingType() )
+                    aNumFormat.SetNumberingType(pRefNumFormat->GetNumberingType() != SvxNumType::BITMAP
+                                                ? pRefNumFormat->GetNumberingType() : SvxNumType::CHAR_SPECIAL);
+                    if( SvxNumType::CHAR_SPECIAL == aNumFormat.GetNumberingType() )
                     {
                         // #i63395# - Only apply user defined default bullet font
                         if ( numfunc::IsDefBulletFontUserDefined() )
@@ -487,7 +487,7 @@ void SwHTMLParser::NewNumBulListItem( int nToken )
         {
             aNumFormat.SetBulletFont( &numfunc::GetDefBulletFont() );
         }
-        aNumFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+        aNumFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
         aNumFormat.SetBulletChar( cBulletChar );   // das Bulletzeichen !!
         aNumFormat.SetCharFormat( m_pCSS1Parser->GetCharFormatFromPool(RES_POOLCHR_BUL_LEVEL) );
         aNumFormat.SetFirstLineOffset( HTML_NUMBUL_INDENT );
diff --git a/sw/source/filter/html/htmlnumwriter.cxx b/sw/source/filter/html/htmlnumwriter.cxx
index 9042b5a..21c4f73 100644
--- a/sw/source/filter/html/htmlnumwriter.cxx
+++ b/sw/source/filter/html/htmlnumwriter.cxx
@@ -113,7 +113,7 @@ Writer& OutHTML_NumBulListStart( SwHTMLWriter& rWrt,
             // The rule has been applied before
             sal_Int16 eType = rInfo.GetNumRule()
                 ->Get( rInfo.GetDepth()-1 ).GetNumberingType();
-            if( SVX_NUM_CHAR_SPECIAL != eType && SVX_NUM_BITMAP != eType )
+            if( SvxNumType::CHAR_SPECIAL != eType && SvxNumType::BITMAP != eType )
             {
                 // If it's a numbering rule, the current number should be
                 // exported as start value, but only if there are no nodes
@@ -187,7 +187,7 @@ Writer& OutHTML_NumBulListStart( SwHTMLWriter& rWrt,
         OString sOut = "<";
         const SwNumFormat& rNumFormat = rInfo.GetNumRule()->Get( i );
         sal_Int16 eType = rNumFormat.GetNumberingType();
-        if( SVX_NUM_CHAR_SPECIAL == eType )
+        if( SvxNumType::CHAR_SPECIAL == eType )
         {
             // Aufzaehlungs-Liste: <OL>
             sOut += OString(OOO_STRING_SVTOOLS_HTML_unorderlist);
@@ -212,7 +212,7 @@ Writer& OutHTML_NumBulListStart( SwHTMLWriter& rWrt,
                 sOut += " " OOO_STRING_SVTOOLS_HTML_O_type "=\"" + OString(pStr) + "\"";
             }
         }
-        else if( SVX_NUM_BITMAP == eType )
+        else if( SvxNumType::BITMAP == eType )
         {
             // Unordered list: <UL>
             sOut += OString(OOO_STRING_SVTOOLS_HTML_unorderlist);
@@ -231,18 +231,18 @@ Writer& OutHTML_NumBulListStart( SwHTMLWriter& rWrt,
             sal_Char cType = 0;
             switch( eType )
             {
-                case SVX_NUM_CHARS_UPPER_LETTER:
-                case SVX_NUM_CHARS_UPPER_LETTER_N:
+                case SvxNumType::CHARS_UPPER_LETTER:
+                case SvxNumType::CHARS_UPPER_LETTER_N:
                     cType = 'A';
                     break;
-                case SVX_NUM_CHARS_LOWER_LETTER:
-                case SVX_NUM_CHARS_LOWER_LETTER_N:
+                case SvxNumType::CHARS_LOWER_LETTER:
+                case SvxNumType::CHARS_LOWER_LETTER_N:
                     cType = 'a';
                     break;
-                case SVX_NUM_ROMAN_UPPER:
+                case SvxNumType::ROMAN_UPPER:
                     cType = 'I';
                     break;
-                case SVX_NUM_ROMAN_LOWER:
+                case SvxNumType::ROMAN_LOWER:
                     cType = 'i';
                     break;
             }
@@ -270,7 +270,7 @@ Writer& OutHTML_NumBulListStart( SwHTMLWriter& rWrt,
             }
         }
 
-        if (!sOut.isEmpty() && SVX_NUM_BITMAP != eType)  // second condition to avoid adding extra ul, already done before.
+        if (!sOut.isEmpty() && SvxNumType::BITMAP != eType)  // second condition to avoid adding extra ul, already done before.
             rWrt.Strm().WriteOString( sOut );
 
         if( rWrt.m_bCfgOutStyles )
@@ -311,7 +311,7 @@ Writer& OutHTML_NumBulListEnd( SwHTMLWriter& rWrt,
         // es wird also eine Liste angefangen oder beendet:
         sal_Int16 eType = rInfo.GetNumRule()->Get( i-1 ).GetNumberingType();
         const sal_Char *pStr;
-        if( SVX_NUM_CHAR_SPECIAL == eType || SVX_NUM_BITMAP == eType)
+        if( SvxNumType::CHAR_SPECIAL == eType || SvxNumType::BITMAP == eType)
             pStr = OOO_STRING_SVTOOLS_HTML_unorderlist;
         else
             pStr = OOO_STRING_SVTOOLS_HTML_orderlist;
diff --git a/sw/source/filter/html/svxcss1.cxx b/sw/source/filter/html/svxcss1.cxx
index 9d2d625..cf4ae30 100644
--- a/sw/source/filter/html/svxcss1.cxx
+++ b/sw/source/filter/html/svxcss1.cxx
@@ -218,13 +218,13 @@ static CSS1PropertyEnum const aPageBreakTable[] =
 
 static CSS1PropertyEnum const aNumberStyleTable[] =
 {
-    { "decimal",          SVX_NUM_ARABIC              },
-    { "lower-alpha",      SVX_NUM_CHARS_LOWER_LETTER  },
-    { "lower-latin",      SVX_NUM_CHARS_LOWER_LETTER  },
-    { "lower-roman",      SVX_NUM_ROMAN_LOWER         },
-    { "upper-alpha",      SVX_NUM_CHARS_UPPER_LETTER  },
-    { "upper-latin",      SVX_NUM_CHARS_UPPER_LETTER  },
-    { "upper-roman",      SVX_NUM_ROMAN_UPPER         },
+    { "decimal",          SvxNumType::ARABIC              },
+    { "lower-alpha",      SvxNumType::CHARS_LOWER_LETTER  },
+    { "lower-latin",      SvxNumType::CHARS_LOWER_LETTER  },
+    { "lower-roman",      SvxNumType::ROMAN_LOWER         },
+    { "upper-alpha",      SvxNumType::CHARS_UPPER_LETTER  },
+    { "upper-latin",      SvxNumType::CHARS_UPPER_LETTER  },
+    { "upper-roman",      SvxNumType::ROMAN_UPPER         },
     { nullptr,            0                           }
 };
 
@@ -433,7 +433,7 @@ void SvxCSS1PropertyInfo::Clear()
     m_nTopBorderDistance = m_nBottomBorderDistance =
     m_nLeftBorderDistance = m_nRightBorderDistance = USHRT_MAX;
 
-    m_nNumberingType = SVX_NUM_CHARS_UPPER_LETTER;
+    m_nNumberingType = SvxNumType::CHARS_UPPER_LETTER;
     m_cBulletChar = ' ';
 
     m_nColumnCount = 0;
diff --git a/sw/source/filter/writer/writer.cxx b/sw/source/filter/writer/writer.cxx
index 6e3ba3d..010e73b 100644
--- a/sw/source/filter/writer/writer.cxx
+++ b/sw/source/filter/writer/writer.cxx
@@ -366,8 +366,8 @@ void Writer::PutNumFormatFontsInAttrPool()
     for( size_t nGet = rListTable.size(); nGet; )
         if( SwDoc::IsUsed( *(pRule = rListTable[ --nGet ] )))
             for( sal_uInt8 nLvl = 0; nLvl < MAXLEVEL; ++nLvl )
-                if( SVX_NUM_CHAR_SPECIAL == (pFormat = &pRule->Get( nLvl ))->GetNumberingType() ||
-                    SVX_NUM_BITMAP == pFormat->GetNumberingType() )
+                if( SvxNumType::CHAR_SPECIAL == (pFormat = &pRule->Get( nLvl ))->GetNumberingType() ||
+                    SvxNumType::BITMAP == pFormat->GetNumberingType() )
                 {
                     if( nullptr == ( pFont = pFormat->GetBulletFont() ) )
                         pFont = pDefFont;
diff --git a/sw/source/filter/ww8/docxattributeoutput.cxx b/sw/source/filter/ww8/docxattributeoutput.cxx
index 7b9da4c..fe6c2f2 100644
--- a/sw/source/filter/ww8/docxattributeoutput.cxx
+++ b/sw/source/filter/ww8/docxattributeoutput.cxx
@@ -5656,17 +5656,17 @@ static OString impl_NumberingType( sal_uInt16 nNumberingType )
 
     switch ( nNumberingType )
     {
-        case SVX_NUM_CHARS_UPPER_LETTER:
-        case SVX_NUM_CHARS_UPPER_LETTER_N:  aType = "upperLetter"; break;
-        case SVX_NUM_CHARS_LOWER_LETTER:
-        case SVX_NUM_CHARS_LOWER_LETTER_N:  aType = "lowerLetter"; break;
-        case SVX_NUM_ROMAN_UPPER:           aType = "upperRoman";  break;
-        case SVX_NUM_ROMAN_LOWER:           aType = "lowerRoman";  break;
+        case SvxNumType::CHARS_UPPER_LETTER:
+        case SvxNumType::CHARS_UPPER_LETTER_N:  aType = "upperLetter"; break;
+        case SvxNumType::CHARS_LOWER_LETTER:
+        case SvxNumType::CHARS_LOWER_LETTER_N:  aType = "lowerLetter"; break;
+        case SvxNumType::ROMAN_UPPER:           aType = "upperRoman";  break;
+        case SvxNumType::ROMAN_LOWER:           aType = "lowerRoman";  break;
 
-        case SVX_NUM_ARABIC:                aType = "decimal";     break;
+        case SvxNumType::ARABIC:                aType = "decimal";     break;
 
-        case SVX_NUM_BITMAP:
-        case SVX_NUM_CHAR_SPECIAL:          aType = "bullet";      break;
+        case SvxNumType::BITMAP:
+        case SvxNumType::CHAR_SPECIAL:          aType = "bullet";      break;
         case style::NumberingType::CHARS_HEBREW: aType = "hebrew1"; break;
 
         default:                            aType = "none";        break;
@@ -6133,7 +6133,7 @@ void DocxAttributeOutput::NumberingLevel( sal_uInt8 nLevel,
         aBuffer.append( pPrev, pIt - pPrev );
 
     // If bullet char is empty, set lvlText as empty
-    if ( rNumberingString == OUStringLiteral1(0) && nNumberingType == SVX_NUM_CHAR_SPECIAL )
+    if ( rNumberingString == OUStringLiteral1(0) && nNumberingType == SvxNumType::CHAR_SPECIAL )
     {
         m_pSerializer->singleElementNS( XML_w, XML_lvlText, FSNS( XML_w, XML_val ), "", FSEND );
     }
@@ -6148,7 +6148,7 @@ void DocxAttributeOutput::NumberingLevel( sal_uInt8 nLevel,
     }
 
     // bullet
-    if (nNumberingType == SVX_NUM_BITMAP && pBrush)
+    if (nNumberingType == SvxNumType::BITMAP && pBrush)
     {
         int nIndex = m_rExport.GetGrfIndex(*pBrush);
         if (nIndex != -1)
@@ -6979,31 +6979,31 @@ void DocxAttributeOutput::WriteFootnoteEndnotePr( ::sax_fastparser::FSHelperPtr
     const char* fmt = nullptr;
     switch( info.aFormat.GetNumberingType())
     {
-        case SVX_NUM_CHARS_UPPER_LETTER_N: // fall through, map to upper letters
-        case SVX_NUM_CHARS_UPPER_LETTER:
+        case SvxNumType::CHARS_UPPER_LETTER_N: // fall through, map to upper letters
+        case SvxNumType::CHARS_UPPER_LETTER:
             fmt = "upperLetter";
             break;
-        case SVX_NUM_CHARS_LOWER_LETTER_N: // fall through, map to lower letters
-        case SVX_NUM_CHARS_LOWER_LETTER:
+        case SvxNumType::CHARS_LOWER_LETTER_N: // fall through, map to lower letters
+        case SvxNumType::CHARS_LOWER_LETTER:
             fmt = "lowerLetter";
             break;
-        case SVX_NUM_ROMAN_UPPER:
+        case SvxNumType::ROMAN_UPPER:
             fmt = "upperRoman";
             break;
-        case SVX_NUM_ROMAN_LOWER:
+        case SvxNumType::ROMAN_LOWER:
             fmt = "lowerRoman";
             break;
-        case SVX_NUM_ARABIC:
+        case SvxNumType::ARABIC:
             fmt = "decimal";
             break;
-        case SVX_NUM_NUMBER_NONE:
+        case SvxNumType::NUMBER_NONE:
             fmt = "none";
             break;
-        case SVX_NUM_CHAR_SPECIAL:
+        case SvxNumType::CHAR_SPECIAL:
             fmt = "bullet";
             break;
-        case SVX_NUM_PAGEDESC:
-        case SVX_NUM_BITMAP:
+        case SvxNumType::PAGE_DESCRIPTOR:
+        case SvxNumType::BITMAP:
         default:
             break; // no format
     }
diff --git a/sw/source/filter/ww8/rtfattributeoutput.cxx b/sw/source/filter/ww8/rtfattributeoutput.cxx
index 5cb920d..cc29037 100644
--- a/sw/source/filter/ww8/rtfattributeoutput.cxx
+++ b/sw/source/filter/ww8/rtfattributeoutput.cxx
@@ -1292,22 +1292,22 @@ void RtfAttributeOutput::SectionPageNumbering(sal_uInt16 nNumType, const ::boost
     const char* pStr = nullptr;
     switch (nNumType)
     {
-    case SVX_NUM_CHARS_UPPER_LETTER:
-    case SVX_NUM_CHARS_UPPER_LETTER_N:
+    case SvxNumType::CHARS_UPPER_LETTER:
+    case SvxNumType::CHARS_UPPER_LETTER_N:
         pStr = OOO_STRING_SVTOOLS_RTF_PGNUCLTR;
         break;
-    case SVX_NUM_CHARS_LOWER_LETTER:
-    case SVX_NUM_CHARS_LOWER_LETTER_N:
+    case SvxNumType::CHARS_LOWER_LETTER:
+    case SvxNumType::CHARS_LOWER_LETTER_N:
         pStr = OOO_STRING_SVTOOLS_RTF_PGNLCLTR;
         break;
-    case SVX_NUM_ROMAN_UPPER:
+    case SvxNumType::ROMAN_UPPER:
         pStr = OOO_STRING_SVTOOLS_RTF_PGNUCRM;
         break;
-    case SVX_NUM_ROMAN_LOWER:
+    case SvxNumType::ROMAN_LOWER:
         pStr = OOO_STRING_SVTOOLS_RTF_PGNLCRM;
         break;
 
-    case SVX_NUM_ARABIC:
+    case SvxNumType::ARABIC:
         pStr = OOO_STRING_SVTOOLS_RTF_PGNDEC;
         break;
     }
@@ -1393,27 +1393,27 @@ void RtfAttributeOutput::NumberingLevel(sal_uInt8 nLevel,
     sal_uInt16 nVal = 0;
     switch (nNumberingType)
     {
-    case SVX_NUM_ROMAN_UPPER:
+    case SvxNumType::ROMAN_UPPER:
         nVal = 1;
         break;
-    case SVX_NUM_ROMAN_LOWER:
+    case SvxNumType::ROMAN_LOWER:
         nVal = 2;
         break;
-    case SVX_NUM_CHARS_UPPER_LETTER:
-    case SVX_NUM_CHARS_UPPER_LETTER_N:
+    case SvxNumType::CHARS_UPPER_LETTER:
+    case SvxNumType::CHARS_UPPER_LETTER_N:
         nVal = 3;
         break;
-    case SVX_NUM_CHARS_LOWER_LETTER:
-    case SVX_NUM_CHARS_LOWER_LETTER_N:
+    case SvxNumType::CHARS_LOWER_LETTER:
+    case SvxNumType::CHARS_LOWER_LETTER_N:
         nVal = 4;
         break;
-    case SVX_NUM_FULL_WIDTH_ARABIC:
+    case SvxNumType::FULLWIDTH_ARABIC:
         nVal=14;
         break;
-    case SVX_NUM_CIRCLE_NUMBER:
+    case SvxNumType::CIRCLE_NUMBER:
         nVal=18;
         break;
-    case SVX_NUM_NUMBER_LOWER_ZH:
+    case SvxNumType::NUMBER_LOWER_ZH:
         nVal=35;
         if (pOutSet)
         {
@@ -1424,31 +1424,31 @@ void RtfAttributeOutput::NumberingLevel(sal_uInt8 nLevel,
             }
         }
         break;
-    case SVX_NUM_NUMBER_UPPER_ZH:
+    case SvxNumType::NUMBER_UPPER_ZH:
         nVal=38;
         break;
-    case SVX_NUM_NUMBER_UPPER_ZH_TW:
+    case SvxNumType::NUMBER_UPPER_ZH_TW:
         nVal=34;
         break;
-    case SVX_NUM_TIAN_GAN_ZH:
+    case SvxNumType::TIAN_GAN_ZH:
         nVal=30;
         break;
-    case SVX_NUM_DI_ZI_ZH:
+    case SvxNumType::DI_ZI_ZH:
         nVal=31;
         break;
-    case SVX_NUM_NUMBER_TRADITIONAL_JA:
+    case SvxNumType::NUMBER_TRADITIONAL_JA:
         nVal=16;
         break;
-    case SVX_NUM_AIU_FULLWIDTH_JA:
+    case SvxNumType::AIU_FULLWIDTH_JA:
         nVal=20;
         break;
-    case SVX_NUM_AIU_HALFWIDTH_JA:
+    case SvxNumType::AIU_HALFWIDTH_JA:
         nVal=12;
         break;
-    case SVX_NUM_IROHA_FULLWIDTH_JA:
+    case SvxNumType::IROHA_FULLWIDTH_JA:
         nVal=21;
         break;
-    case SVX_NUM_IROHA_HALFWIDTH_JA:
+    case SvxNumType::IROHA_HALFWIDTH_JA:
         nVal=13;
         break;
     case style::NumberingType::HANGUL_SYLLABLE_KO:
@@ -1470,11 +1470,11 @@ void RtfAttributeOutput::NumberingLevel(sal_uInt8 nLevel,
         nVal = 44;
         break;
 
-    case SVX_NUM_BITMAP:
-    case SVX_NUM_CHAR_SPECIAL:
+    case SvxNumType::BITMAP:
+    case SvxNumType::CHAR_SPECIAL:
         nVal = 23;
         break;
-    case SVX_NUM_NUMBER_NONE:
+    case SvxNumType::NUMBER_NONE:
         nVal = 255;
         break;
     }
@@ -1497,7 +1497,7 @@ void RtfAttributeOutput::NumberingLevel(sal_uInt8 nLevel,
     m_rExport.OutULong(nVal);
 
     // bullet
-    if (nNumberingType == SVX_NUM_BITMAP && pBrush)
+    if (nNumberingType == SvxNumType::BITMAP && pBrush)
     {
         int nIndex = m_rExport.GetGrfIndex(*pBrush);
         if (nIndex != -1)
@@ -1516,8 +1516,8 @@ void RtfAttributeOutput::NumberingLevel(sal_uInt8 nLevel,
     // leveltext group
     m_rExport.Strm().WriteChar('{').WriteCharPtr(OOO_STRING_SVTOOLS_RTF_LEVELTEXT).WriteChar(' ');
 
-    if (SVX_NUM_CHAR_SPECIAL == nNumberingType ||
-            SVX_NUM_BITMAP == nNumberingType)
+    if (SvxNumType::CHAR_SPECIAL == nNumberingType ||
+            SvxNumType::BITMAP == nNumberingType)
     {
         m_rExport.Strm().WriteCharPtr("\\'01");
         sal_Unicode cChar = rNumberingString[0];
@@ -2838,7 +2838,7 @@ void RtfAttributeOutput::ParaNumRule_Impl(const SwTextNode* pTextNd, sal_Int32 n
 
         {
             OUString sText;
-            if (SVX_NUM_CHAR_SPECIAL == pFormat->GetNumberingType() || SVX_NUM_BITMAP == pFormat->GetNumberingType())
+            if (SvxNumType::CHAR_SPECIAL == pFormat->GetNumberingType() || SvxNumType::BITMAP == pFormat->GetNumberingType())
                 sText = OUString(pFormat->GetBulletChar());
             else
                 sText = pTextNd->GetNumString();
diff --git a/sw/source/filter/ww8/rtfexport.cxx b/sw/source/filter/ww8/rtfexport.cxx
index 9b08e35..9ff701d 100644
--- a/sw/source/filter/ww8/rtfexport.cxx
+++ b/sw/source/filter/ww8/rtfexport.cxx
@@ -186,7 +186,7 @@ static bool IsExportNumRule(const SwNumRule& rRule)
     for (nLvl = 0; nLvl < nEnd; ++nLvl)
     {
         const SwNumFormat* pNFormat = &rRule.Get(nLvl);
-        if (SVX_NUM_NUMBER_NONE != pNFormat->GetNumberingType() ||
+        if (SvxNumType::NUMBER_NONE != pNFormat->GetNumberingType() ||
                 !pNFormat->GetPrefix().isEmpty() ||
                 (!pNFormat->GetSuffix().isEmpty() && pNFormat->GetSuffix() != "."))
             break;
@@ -808,21 +808,21 @@ void RtfExport::ExportDocument_Impl()
 
         switch (rFootnoteInfo.aFormat.GetNumberingType())
         {
-        case SVX_NUM_CHARS_LOWER_LETTER:
-        case SVX_NUM_CHARS_LOWER_LETTER_N:
+        case SvxNumType::CHARS_LOWER_LETTER:
+        case SvxNumType::CHARS_LOWER_LETTER_N:
             pOut = OOO_STRING_SVTOOLS_RTF_FTNNALC;
             break;
-        case SVX_NUM_CHARS_UPPER_LETTER:
-        case SVX_NUM_CHARS_UPPER_LETTER_N:
+        case SvxNumType::CHARS_UPPER_LETTER:
+        case SvxNumType::CHARS_UPPER_LETTER_N:
             pOut = OOO_STRING_SVTOOLS_RTF_FTNNAUC;
             break;
-        case SVX_NUM_ROMAN_LOWER:
+        case SvxNumType::ROMAN_LOWER:
             pOut = OOO_STRING_SVTOOLS_RTF_FTNNRLC;
             break;
-        case SVX_NUM_ROMAN_UPPER:
+        case SvxNumType::ROMAN_UPPER:
             pOut = OOO_STRING_SVTOOLS_RTF_FTNNRUC;
             break;
-        case SVX_NUM_CHAR_SPECIAL:
+        case SvxNumType::CHAR_SPECIAL:
             pOut = OOO_STRING_SVTOOLS_RTF_FTNNCHI;
             break;
         default:
@@ -839,21 +839,21 @@ void RtfExport::ExportDocument_Impl()
 
         switch (rEndNoteInfo.aFormat.GetNumberingType())
         {
-        case SVX_NUM_CHARS_LOWER_LETTER:
-        case SVX_NUM_CHARS_LOWER_LETTER_N:
+        case SvxNumType::CHARS_LOWER_LETTER:
+        case SvxNumType::CHARS_LOWER_LETTER_N:
             pOut = OOO_STRING_SVTOOLS_RTF_AFTNNALC;
             break;
-        case SVX_NUM_CHARS_UPPER_LETTER:
-        case SVX_NUM_CHARS_UPPER_LETTER_N:
+        case SvxNumType::CHARS_UPPER_LETTER:
+        case SvxNumType::CHARS_UPPER_LETTER_N:
             pOut = OOO_STRING_SVTOOLS_RTF_AFTNNAUC;
             break;
-        case SVX_NUM_ROMAN_LOWER:
+        case SvxNumType::ROMAN_LOWER:
             pOut = OOO_STRING_SVTOOLS_RTF_AFTNNRLC;
             break;
-        case SVX_NUM_ROMAN_UPPER:
+        case SvxNumType::ROMAN_UPPER:
             pOut = OOO_STRING_SVTOOLS_RTF_AFTNNRUC;
             break;
-        case SVX_NUM_CHAR_SPECIAL:
+        case SvxNumType::CHAR_SPECIAL:
             pOut = OOO_STRING_SVTOOLS_RTF_AFTNNCHI;
             break;
         default:
diff --git a/sw/source/filter/ww8/wrtw8num.cxx b/sw/source/filter/ww8/wrtw8num.cxx
index d4d1843..5b3ce1e 100644
--- a/sw/source/filter/ww8/wrtw8num.cxx
+++ b/sw/source/filter/ww8/wrtw8num.cxx
@@ -190,18 +190,18 @@ static sal_uInt8 GetLevelNFC(  sal_uInt16 eNumType, const SfxItemSet *pOutSet)
     sal_uInt8 nRet = 0;
     switch( eNumType )
     {
-    case SVX_NUM_CHARS_UPPER_LETTER:
-    case SVX_NUM_CHARS_UPPER_LETTER_N:  nRet = 3;       break;
-    case SVX_NUM_CHARS_LOWER_LETTER:
-    case SVX_NUM_CHARS_LOWER_LETTER_N:  nRet = 4;       break;
-    case SVX_NUM_ROMAN_UPPER:           nRet = 1;       break;
-    case SVX_NUM_ROMAN_LOWER:           nRet = 2;       break;
-
-    case SVX_NUM_BITMAP:
-    case SVX_NUM_CHAR_SPECIAL:         nRet = 23;      break;
-    case SVX_NUM_FULL_WIDTH_ARABIC: nRet = 14; break;
-    case SVX_NUM_CIRCLE_NUMBER: nRet = 18;break;
-    case SVX_NUM_NUMBER_LOWER_ZH:
+    case SvxNumType::CHARS_UPPER_LETTER:
+    case SvxNumType::CHARS_UPPER_LETTER_N:  nRet = 3;       break;
+    case SvxNumType::CHARS_LOWER_LETTER:
+    case SvxNumType::CHARS_LOWER_LETTER_N:  nRet = 4;       break;
+    case SvxNumType::ROMAN_UPPER:           nRet = 1;       break;
+    case SvxNumType::ROMAN_LOWER:           nRet = 2;       break;
+
+    case SvxNumType::BITMAP:
+    case SvxNumType::CHAR_SPECIAL:         nRet = 23;      break;
+    case SvxNumType::FULLWIDTH_ARABIC: nRet = 14; break;
+    case SvxNumType::CIRCLE_NUMBER: nRet = 18;break;
+    case SvxNumType::NUMBER_LOWER_ZH:
         nRet = 35;
         if ( pOutSet ) {
             const SvxLanguageItem rLang = static_cast<const SvxLanguageItem&>( pOutSet->Get( RES_CHRATR_CJK_LANGUAGE) );
@@ -211,22 +211,22 @@ static sal_uInt8 GetLevelNFC(  sal_uInt16 eNumType, const SfxItemSet *pOutSet)
             }
         }
         break;
-    case SVX_NUM_NUMBER_UPPER_ZH: nRet = 38; break;
-    case SVX_NUM_NUMBER_UPPER_ZH_TW: nRet = 34;break;
-    case SVX_NUM_TIAN_GAN_ZH: nRet = 30; break;
-    case SVX_NUM_DI_ZI_ZH: nRet = 31; break;
-    case SVX_NUM_NUMBER_TRADITIONAL_JA: nRet = 16; break;
-    case SVX_NUM_AIU_FULLWIDTH_JA: nRet = 20; break;
-    case SVX_NUM_AIU_HALFWIDTH_JA: nRet = 12; break;
-    case SVX_NUM_IROHA_FULLWIDTH_JA: nRet = 21; break;
-    case SVX_NUM_IROHA_HALFWIDTH_JA: nRet = 13; break;
+    case SvxNumType::NUMBER_UPPER_ZH: nRet = 38; break;
+    case SvxNumType::NUMBER_UPPER_ZH_TW: nRet = 34;break;
+    case SvxNumType::TIAN_GAN_ZH: nRet = 30; break;
+    case SvxNumType::DI_ZI_ZH: nRet = 31; break;
+    case SvxNumType::NUMBER_TRADITIONAL_JA: nRet = 16; break;
+    case SvxNumType::AIU_FULLWIDTH_JA: nRet = 20; break;
+    case SvxNumType::AIU_HALFWIDTH_JA: nRet = 12; break;
+    case SvxNumType::IROHA_FULLWIDTH_JA: nRet = 21; break;
+    case SvxNumType::IROHA_HALFWIDTH_JA: nRet = 13; break;
     case style::NumberingType::HANGUL_SYLLABLE_KO: nRet = 24; break;// ganada
     case style::NumberingType::HANGUL_JAMO_KO: nRet = 25; break;// chosung
     case style::NumberingType::HANGUL_CIRCLED_SYLLABLE_KO: nRet = 24; break;
     case style::NumberingType::HANGUL_CIRCLED_JAMO_KO: nRet = 25; break;
     case style::NumberingType::NUMBER_HANGUL_KO: nRet = 41; break;
     case style::NumberingType::NUMBER_UPPER_KO: nRet = 44; break;
-    case SVX_NUM_NUMBER_NONE:           nRet = 0xff;    break;
+    case SvxNumType::NUMBER_NONE:           nRet = 0xff;    break;
     }
     return nRet;
 }
@@ -298,7 +298,7 @@ void WW8AttributeOutput::NumberingLevel( sal_uInt8 /*nLevel*/,
 
         m_rWW8Export.OutputItemSet( *pOutSet, false, true, i18n::ScriptType::LATIN, m_rWW8Export.m_bExportModeRTF );
         //For i120928,achieve graphic's index of bullet from the bullet bookmark
-        if (SVX_NUM_BITMAP == nNumberingType && pBrush)
+        if (SvxNumType::BITMAP == nNumberingType && pBrush)
         {
             int nIndex = m_rWW8Export.GetGrfIndex(*pBrush);
             if ( nIndex != -1 )
@@ -382,13 +382,13 @@ void MSWordExportBase::AbstractNumberingDefinitions()
                     case SvxNumberFormat::LISTTAB:
                     {
             // 0 (tab) unless there would be no content before the tab, in which case 2 (nothing)
-            nFollow = (SVX_NUM_NUMBER_NONE != rFormat.GetNumberingType()) ? 0 : 2;
+            nFollow = (SvxNumType::NUMBER_NONE != rFormat.GetNumberingType()) ? 0 : 2;
                     }
                     break;
                     case SvxNumberFormat::SPACE:
                     {
             // 1 (space) unless there would be no content before the space in which case 2 (nothing)
-            nFollow = (SVX_NUM_NUMBER_NONE != rFormat.GetNumberingType()) ? 1 : 2;
+            nFollow = (SvxNumType::NUMBER_NONE != rFormat.GetNumberingType()) ? 1 : 2;
                     }
                     break;
                     case SvxNumberFormat::NOTHING:
@@ -411,8 +411,8 @@ void MSWordExportBase::AbstractNumberingDefinitions()
             const vcl::Font* pBulletFont=nullptr;
             rtl_TextEncoding eChrSet=0;
             FontFamily eFamily=FAMILY_DECORATIVE;
-            if( SVX_NUM_CHAR_SPECIAL == rFormat.GetNumberingType() ||
-                SVX_NUM_BITMAP == rFormat.GetNumberingType() )
+            if( SvxNumType::CHAR_SPECIAL == rFormat.GetNumberingType() ||
+                SvxNumType::BITMAP == rFormat.GetNumberingType() )
             {
                 sNumStr = OUString(rFormat.GetBulletChar());
                 bWriteBullet = true;
@@ -443,7 +443,7 @@ void MSWordExportBase::AbstractNumberingDefinitions()
             }
             else
             {
-                if (SVX_NUM_NUMBER_NONE != rFormat.GetNumberingType())
+                if (SvxNumType::NUMBER_NONE != rFormat.GetNumberingType())
                 {
                     sal_uInt8* pLvlPos = aNumLvlPos;
                     // the numbering string has to be restrict
@@ -534,7 +534,7 @@ void MSWordExportBase::AbstractNumberingDefinitions()
                     pPseudoFont, pOutSet,
                     nIndentAt, nFirstLineIndex, nListTabPos,
                     sNumStr,
-                    rFormat.GetNumberingType()==SVX_NUM_BITMAP ? rFormat.GetBrush():nullptr);
+                    rFormat.GetNumberingType()==SvxNumType::BITMAP ? rFormat.GetBrush():nullptr);
 
             delete pPseudoFont;
         }
diff --git a/sw/source/filter/ww8/wrtww8.cxx b/sw/source/filter/ww8/wrtww8.cxx
index e3f5e1e..abf7e0b 100644
--- a/sw/source/filter/ww8/wrtww8.cxx
+++ b/sw/source/filter/ww8/wrtww8.cxx
@@ -1542,7 +1542,7 @@ int MSWordExportBase::CollectGrfsOfBullets()
             for (sal_uInt16 nLvl = 0; nLvl < nLevels; ++nLvl)
             {
                 const SwNumFormat &rFormat = rRule.Get(nLvl);
-                if (SVX_NUM_BITMAP != rFormat.GetNumberingType())
+                if (SvxNumType::BITMAP != rFormat.GetNumberingType())
                 {
                     continue;
                 }
diff --git a/sw/source/filter/ww8/ww8atr.cxx b/sw/source/filter/ww8/ww8atr.cxx
index d0fad8f..e24e9ca 100644
--- a/sw/source/filter/ww8/ww8atr.cxx
+++ b/sw/source/filter/ww8/ww8atr.cxx
@@ -649,18 +649,18 @@ sal_uInt8 WW8Export::GetNumId( sal_uInt16 eNumType )
     sal_uInt8 nRet = 0;
     switch( eNumType )
     {
-    case SVX_NUM_CHARS_UPPER_LETTER:
-    case SVX_NUM_CHARS_UPPER_LETTER_N:  nRet = 3;       break;
-    case SVX_NUM_CHARS_LOWER_LETTER:
-    case SVX_NUM_CHARS_LOWER_LETTER_N:  nRet = 4;       break;
-    case SVX_NUM_ROMAN_UPPER:           nRet = 1;       break;
-    case SVX_NUM_ROMAN_LOWER:           nRet = 2;       break;
+    case SvxNumType::CHARS_UPPER_LETTER:
+    case SvxNumType::CHARS_UPPER_LETTER_N:  nRet = 3;       break;
+    case SvxNumType::CHARS_LOWER_LETTER:
+    case SvxNumType::CHARS_LOWER_LETTER_N:  nRet = 4;       break;
+    case SvxNumType::ROMAN_UPPER:           nRet = 1;       break;
+    case SvxNumType::ROMAN_LOWER:           nRet = 2;       break;
 
-    case SVX_NUM_BITMAP:
-    case SVX_NUM_CHAR_SPECIAL:          nRet = 23;      break;
+    case SvxNumType::BITMAP:
+    case SvxNumType::CHAR_SPECIAL:          nRet = 23;      break;
 
     // nix, macht WW undokumentiert auch so
-    case SVX_NUM_NUMBER_NONE:           nRet = 0xff;    break;
+    case SvxNumType::NUMBER_NONE:           nRet = 0xff;    break;
     }
     return nRet;
 }
@@ -2318,28 +2318,28 @@ void AttributeOutputBase::GetNumberPara( OUString& rStr, const SwField& rField )
 {
     switch(rField.GetFormat())
     {
-        case SVX_NUM_CHARS_UPPER_LETTER:
-        case SVX_NUM_CHARS_UPPER_LETTER_N:
+        case SvxNumType::CHARS_UPPER_LETTER:
+        case SvxNumType::CHARS_UPPER_LETTER_N:
             rStr += "\\* ALPHABETIC ";
             break;
-        case SVX_NUM_CHARS_LOWER_LETTER:
-        case SVX_NUM_CHARS_LOWER_LETTER_N:
+        case SvxNumType::CHARS_LOWER_LETTER:
+        case SvxNumType::CHARS_LOWER_LETTER_N:
             rStr += "\\* alphabetic ";
             break;
-        case SVX_NUM_ROMAN_UPPER:
+        case SvxNumType::ROMAN_UPPER:
             rStr += "\\* ROMAN ";
             break;
-        case SVX_NUM_ROMAN_LOWER:
+        case SvxNumType::ROMAN_LOWER:
             rStr += "\\* roman ";
             break;
         default:
-            OSL_ENSURE(rField.GetFormat() == SVX_NUM_ARABIC,
+            OSL_ENSURE(rField.GetFormat() == SvxNumType::ARABIC,
                 "Unknown numbering type exported as default of Arabic\n");
             SAL_FALLTHROUGH;
-        case SVX_NUM_ARABIC:
+        case SvxNumType::ARABIC:
             rStr += "\\* ARABIC ";
             break;
-        case SVX_NUM_PAGEDESC:
+        case SvxNumType::PAGE_DESCRIPTOR:
             //Nothing, use word's default
             break;
     }
diff --git a/sw/source/filter/ww8/ww8par.cxx b/sw/source/filter/ww8/ww8par.cxx
index 8b9e4e2..4f81712 100644
--- a/sw/source/filter/ww8/ww8par.cxx
+++ b/sw/source/filter/ww8/ww8par.cxx
@@ -3516,7 +3516,7 @@ bool SwWW8ImplReader::ReadChar(long nPosCp, long nCpOfs)
                 // Page number
                 SwPageNumberField aField(
                     static_cast<SwPageNumberFieldType*>(m_rDoc.getIDocumentFieldsAccess().GetSysFieldType(
-                    RES_PAGENUMBERFLD )), PG_RANDOM, SVX_NUM_ARABIC);
+                    RES_PAGENUMBERFLD )), PG_RANDOM, SvxNumType::ARABIC);
                 m_rDoc.getIDocumentContentOperations().InsertPoolItem(*m_pPaM, SwFormatField(aField));
             }
             break;
@@ -5051,12 +5051,12 @@ sal_uLong SwWW8ImplReader::CoreLoad(WW8Glossary *pGloss)
 
     static const SvxNumType eNumTA[16] =
     {
-        SVX_NUM_ARABIC, SVX_NUM_ROMAN_UPPER, SVX_NUM_ROMAN_LOWER,
-        SVX_NUM_CHARS_UPPER_LETTER_N, SVX_NUM_CHARS_LOWER_LETTER_N,
-        SVX_NUM_ARABIC, SVX_NUM_ARABIC, SVX_NUM_ARABIC,
-        SVX_NUM_ARABIC, SVX_NUM_ARABIC, SVX_NUM_ARABIC,
-        SVX_NUM_ARABIC, SVX_NUM_ARABIC, SVX_NUM_ARABIC,
-        SVX_NUM_ARABIC, SVX_NUM_ARABIC
+        SvxNumType::ARABIC, SvxNumType::ROMAN_UPPER, SvxNumType::ROMAN_LOWER,
+        SvxNumType::CHARS_UPPER_LETTER_N, SvxNumType::CHARS_LOWER_LETTER_N,
+        SvxNumType::ARABIC, SvxNumType::ARABIC, SvxNumType::ARABIC,
+        SvxNumType::ARABIC, SvxNumType::ARABIC, SvxNumType::ARABIC,
+        SvxNumType::ARABIC, SvxNumType::ARABIC, SvxNumType::ARABIC,
+        SvxNumType::ARABIC, SvxNumType::ARABIC
     };
 
     if (m_pSBase->AreThereFootnotes())
@@ -5344,7 +5344,7 @@ sal_uLong SwWW8ImplReader::CoreLoad(WW8Glossary *pGloss)
                             SwNumFormat aNumFormat(pRule->Get(j));
                             const sal_Int16 nType = aNumFormat.GetNumberingType();
                             const sal_uInt16 nGrfBulletCP = aNumFormat.GetGrfBulletCP();
-                            if ( nType == SVX_NUM_BITMAP
+                            if ( nType == SvxNumType::BITMAP
                                  && vecBulletGrf.size() > nGrfBulletCP
                                  && vecBulletGrf[nGrfBulletCP] != nullptr )
                             {
@@ -5361,7 +5361,7 @@ sal_uLong SwWW8ImplReader::CoreLoad(WW8Glossary *pGloss)
                                 }
                                 else
                                 {
-                                    aNumFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+                                    aNumFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
                                     aNumFormat.SetBulletChar(0x2190);
                                 }
                                 pRule->Set( j, aNumFormat );
diff --git a/sw/source/filter/ww8/ww8par2.cxx b/sw/source/filter/ww8/ww8par2.cxx
index 6b424a4..535ee28 100644
--- a/sw/source/filter/ww8/ww8par2.cxx
+++ b/sw/source/filter/ww8/ww8par2.cxx
@@ -614,41 +614,41 @@ ApoTestResults SwWW8ImplReader::TestApo(int nCellLevel, bool bTableRowEnd,
 
 static void SetBaseAnlv(SwNumFormat &rNum, WW8_ANLV const &rAV, sal_uInt8 nSwLevel )
 {
-    static const SvxNumType eNumA[8] = { SVX_NUM_ARABIC, SVX_NUM_ROMAN_UPPER, SVX_NUM_ROMAN_LOWER,
-        SVX_NUM_CHARS_UPPER_LETTER_N, SVX_NUM_CHARS_LOWER_LETTER_N, SVX_NUM_ARABIC,
-        SVX_NUM_ARABIC, SVX_NUM_ARABIC };
+    static const SvxNumType eNumA[8] = { SvxNumType::ARABIC, SvxNumType::ROMAN_UPPER, SvxNumType::ROMAN_LOWER,
+        SvxNumType::CHARS_UPPER_LETTER_N, SvxNumType::CHARS_LOWER_LETTER_N, SvxNumType::ARABIC,
+        SvxNumType::ARABIC, SvxNumType::ARABIC };
 
     static const SvxAdjust eAdjA[4] = { SVX_ADJUST_LEFT,
         SVX_ADJUST_RIGHT, SVX_ADJUST_LEFT, SVX_ADJUST_LEFT };
     if (rAV.nfc < 8) {
         rNum.SetNumberingType( eNumA[ rAV.nfc ] );
     } else {
-        SvxNumType nType = SVX_NUM_ARABIC;
+        SvxNumType nType = SvxNumType::ARABIC;
         switch( rAV.nfc ) {
         case 14:
-        case 19:nType = SVX_NUM_FULL_WIDTH_ARABIC; break;
-        case 30:nType = SVX_NUM_TIAN_GAN_ZH; break;
-        case 31:nType = SVX_NUM_DI_ZI_ZH; break;
+        case 19:nType = SvxNumType::FULLWIDTH_ARABIC; break;
+        case 30:nType = SvxNumType::TIAN_GAN_ZH; break;
+        case 31:nType = SvxNumType::DI_ZI_ZH; break;
         case 35:
         case 36:
         case 37:
-        case 39:nType = SVX_NUM_NUMBER_LOWER_ZH; break;
-        case 34:nType = SVX_NUM_NUMBER_UPPER_ZH_TW; break;
-        case 38:nType = SVX_NUM_NUMBER_UPPER_ZH; break;
+        case 39:nType = SvxNumType::NUMBER_LOWER_ZH; break;
+        case 34:nType = SvxNumType::NUMBER_UPPER_ZH_TW; break;
+        case 38:nType = SvxNumType::NUMBER_UPPER_ZH; break;
         case 10:
-        case 11:nType = SVX_NUM_NUMBER_TRADITIONAL_JA; break;
-        case 20:nType = SVX_NUM_AIU_FULLWIDTH_JA; break;
-        case 12:nType = SVX_NUM_AIU_HALFWIDTH_JA; break;
-        case 21:nType = SVX_NUM_IROHA_FULLWIDTH_JA; break;
-        case 13:nType = SVX_NUM_IROHA_HALFWIDTH_JA; break;
-        case 24:nType = SVX_NUM_HANGUL_SYLLABLE_KO; break;
-        case 25:nType = SVX_NUM_HANGUL_JAMO_KO; break;
-        case 41:nType = SVX_NUM_NUMBER_HANGUL_KO; break;
+        case 11:nType = SvxNumType::NUMBER_TRADITIONAL_JA; break;
+        case 20:nType = SvxNumType::AIU_FULLWIDTH_JA; break;
+        case 12:nType = SvxNumType::AIU_HALFWIDTH_JA; break;
+        case 21:nType = SvxNumType::IROHA_FULLWIDTH_JA; break;
+        case 13:nType = SvxNumType::IROHA_HALFWIDTH_JA; break;
+        case 24:nType = SvxNumType::HANGUL_SYLLABLE_KO; break;
+        case 25:nType = SvxNumType::HANGUL_JAMO_KO; break;
+        case 41:nType = SvxNumType::NUMBER_HANGUL_KO; break;
         //case 42:
         //case 43:
-        case 44:nType = SVX_NUM_NUMBER_UPPER_KO; break;
+        case 44:nType = SvxNumType::NUMBER_UPPER_KO; break;
         default:
-            nType= SVX_NUM_ARABIC;break;
+            nType= SvxNumType::ARABIC;break;
         }
         rNum.SetNumberingType( nType );
     }
@@ -702,7 +702,7 @@ void SwWW8ImplReader::SetAnlvStrings(SwNumFormat &rNum, WW8_ANLV const &rAV,
     if( bOutline )
     {                             // outline
         if( !rNum.GetIncludeUpperLevels()                          // there are  <= 1 number to show
-            || rNum.GetNumberingType() == SVX_NUM_NUMBER_NONE )    // or this level has none
+            || rNum.GetNumberingType() == SvxNumType::NUMBER_NONE )    // or this level has none
         {
                                                 // if self defined digits
             bInsert = true;                     // then apply character
@@ -735,7 +735,7 @@ void SwWW8ImplReader::SetAnlvStrings(SwNumFormat &rNum, WW8_ANLV const &rAV,
                 aFont.SetFamily( eFamily );
 
                 aFont.SetCharSet( eCharSet );
-                rNum.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+                rNum.SetNumberingType(SvxNumType::CHAR_SPECIAL);
 
                 rNum.SetBulletFont( &aFont );
 
diff --git a/sw/source/filter/ww8/ww8par3.cxx b/sw/source/filter/ww8/ww8par3.cxx
index 9cd3387..250ef83 100644
--- a/sw/source/filter/ww8/ww8par3.cxx
+++ b/sw/source/filter/ww8/ww8par3.cxx
@@ -510,7 +510,7 @@ bool WW8ListManager::ReadLVL(SwNumFormat& rNumFormat, SfxItemSet*& rpItemSet,
 {
     sal_uInt8       aBits1(0);
     sal_uInt16      nStartNo(0);        // Start-Nr. fuer den Writer
-    SvxNumType      nType(SVX_NUM_ARABIC);
+    SvxNumType      nType(SvxNumType::ARABIC);
     SvxAdjust       eAdj;               // Ausrichtung (Links/rechts/zent.)
     sal_Unicode     cBullet(0x2190);    // default safe bullet
 
@@ -723,64 +723,64 @@ bool WW8ListManager::ReadLVL(SwNumFormat& rNumFormat, SfxItemSet*& rpItemSet,
     switch( aLVL.nNFC )
     {
         case 0:
-            nType = SVX_NUM_ARABIC;
+            nType = SvxNumType::ARABIC;
             break;
         case 1:
-            nType = SVX_NUM_ROMAN_UPPER;
+            nType = SvxNumType::ROMAN_UPPER;
             break;
         case 2:
-            nType = SVX_NUM_ROMAN_LOWER;
+            nType = SvxNumType::ROMAN_LOWER;
             break;
         case 3:
-            nType = SVX_NUM_CHARS_UPPER_LETTER_N;
+            nType = SvxNumType::CHARS_UPPER_LETTER_N;
             break;
         case 4:
-            nType = SVX_NUM_CHARS_LOWER_LETTER_N;
+            nType = SvxNumType::CHARS_LOWER_LETTER_N;
             break;
         case 5:
             // eigentlich: ORDINAL
-            nType = SVX_NUM_ARABIC;
+            nType = SvxNumType::ARABIC;
             break;
         case 23:
-            nType = SVX_NUM_CHAR_SPECIAL;
+            nType = SvxNumType::CHAR_SPECIAL;
             //For i120928,type info
             if (bIsPicBullet)
             {
-                nType = SVX_NUM_BITMAP;
+                nType = SvxNumType::BITMAP;
             }
 
             break;
         case 255:
-            nType = SVX_NUM_NUMBER_NONE;
+            nType = SvxNumType::NUMBER_NONE;
             break;
         case 14:
-        case 19:nType = SVX_NUM_FULL_WIDTH_ARABIC; break;
-        case 30:nType = SVX_NUM_TIAN_GAN_ZH; break;
-        case 31:nType = SVX_NUM_DI_ZI_ZH; break;
+        case 19:nType = SvxNumType::FULLWIDTH_ARABIC; break;
+        case 30:nType = SvxNumType::TIAN_GAN_ZH; break;
+        case 31:nType = SvxNumType::DI_ZI_ZH; break;
         case 35:
         case 36:
         case 37:
-        case 39:nType = SVX_NUM_NUMBER_LOWER_ZH; break;
-        case 34:nType = SVX_NUM_NUMBER_UPPER_ZH_TW; break;
-        case 38:nType = SVX_NUM_NUMBER_UPPER_ZH; break;
+        case 39:nType = SvxNumType::NUMBER_LOWER_ZH; break;
+        case 34:nType = SvxNumType::NUMBER_UPPER_ZH_TW; break;
+        case 38:nType = SvxNumType::NUMBER_UPPER_ZH; break;
         case 10:
-        case 11:nType = SVX_NUM_NUMBER_TRADITIONAL_JA; break;
-        case 20:nType = SVX_NUM_AIU_FULLWIDTH_JA; break;
-        case 12:nType = SVX_NUM_AIU_HALFWIDTH_JA; break;
-        case 21:nType = SVX_NUM_IROHA_FULLWIDTH_JA; break;
-        case 13:nType = SVX_NUM_IROHA_HALFWIDTH_JA; break;
-        case 24:nType = SVX_NUM_HANGUL_SYLLABLE_KO; break;
-        case 25:nType = SVX_NUM_HANGUL_JAMO_KO; break;
-        case 41:nType = SVX_NUM_NUMBER_HANGUL_KO; break;
+        case 11:nType = SvxNumType::NUMBER_TRADITIONAL_JA; break;
+        case 20:nType = SvxNumType::AIU_FULLWIDTH_JA; break;
+        case 12:nType = SvxNumType::AIU_HALFWIDTH_JA; break;
+        case 21:nType = SvxNumType::IROHA_FULLWIDTH_JA; break;
+        case 13:nType = SvxNumType::IROHA_HALFWIDTH_JA; break;
+        case 24:nType = SvxNumType::HANGUL_SYLLABLE_KO; break;
+        case 25:nType = SvxNumType::HANGUL_JAMO_KO; break;
+        case 41:nType = SvxNumType::NUMBER_HANGUL_KO; break;
         //case 42:
         //case 43:
-        case 44:nType = SVX_NUM_NUMBER_UPPER_KO; break;
+        case 44:nType = SvxNumType::NUMBER_UPPER_KO; break;
         default:
-                nType= SVX_NUM_ARABIC; break;
+                nType= SvxNumType::ARABIC; break;
     }
 
     //If a number level is not going to be used, then record this fact
-    if (SVX_NUM_NUMBER_NONE == nType)
+    if (SvxNumType::NUMBER_NONE == nType)
         rNotReallyThere[nLevel] = true;
 
     /*
@@ -1078,7 +1078,7 @@ void WW8ListManager::AdjustLVL( sal_uInt8 nLevel, SwNumRule& rNumRule,
 
     // ggfs. Bullet Font an das NumFormat haengen
 
-    if( SVX_NUM_CHAR_SPECIAL == aNumFormat.GetNumberingType() )
+    if( SvxNumType::CHAR_SPECIAL == aNumFormat.GetNumberingType() )
     {
         SwCharFormat* pFormat = aNumFormat.GetCharFormat();
         vcl::Font aFont;
diff --git a/sw/source/filter/ww8/ww8par5.cxx b/sw/source/filter/ww8/ww8par5.cxx
index 4e0dfc6..5cf5c99 100644
--- a/sw/source/filter/ww8/ww8par5.cxx
+++ b/sw/source/filter/ww8/ww8par5.cxx
@@ -364,21 +364,21 @@ OUString FindPara( const OUString& rStr, sal_Unicode cToken, sal_Unicode cToken2
 static SvxNumType GetNumTypeFromName(const OUString& rStr,
     bool bAllowPageDesc = false)
 {
-    SvxNumType eTyp = bAllowPageDesc ? SVX_NUM_PAGEDESC : SVX_NUM_ARABIC;
+    SvxNumType eTyp = bAllowPageDesc ? SvxNumType::PAGE_DESCRIPTOR : SvxNumType::ARABIC;
     if( rStr.startsWithIgnoreAsciiCase( "Arabi" ) )  // Arabisch, Arabic
-        eTyp = SVX_NUM_ARABIC;
+        eTyp = SvxNumType::ARABIC;
     else if( rStr.startsWith( "misch" ) )    // r"omisch
-        eTyp = SVX_NUM_ROMAN_LOWER;
+        eTyp = SvxNumType::ROMAN_LOWER;
     else if( rStr.startsWith( "MISCH" ) )    // R"OMISCH
-        eTyp = SVX_NUM_ROMAN_UPPER;
+        eTyp = SvxNumType::ROMAN_UPPER;
     else if( rStr.startsWithIgnoreAsciiCase( "alphabeti" ) )// alphabetisch, alphabetic
         eTyp =  ( rStr[0] == 'A' )
-                ? SVX_NUM_CHARS_UPPER_LETTER_N
-                : SVX_NUM_CHARS_LOWER_LETTER_N;
+                ? SvxNumType::CHARS_UPPER_LETTER_N
+                : SvxNumType::CHARS_LOWER_LETTER_N;
     else if( rStr.startsWithIgnoreAsciiCase( "roman" ) )  // us
         eTyp =  ( rStr[0] == 'R' )
-                ? SVX_NUM_ROMAN_UPPER
-                : SVX_NUM_ROMAN_LOWER;
+                ? SvxNumType::ROMAN_UPPER
+                : SvxNumType::ROMAN_LOWER;
     return eTyp;
 }
 
@@ -1391,7 +1391,7 @@ eF_ResT SwWW8ImplReader::Read_F_Seq( WW8FieldDesc*, OUString& rStr )
     bool bFormat    = false;
     bool bCountOn   = true;
     OUString sStart;
-    SvxNumType eNumFormat = SVX_NUM_ARABIC;
+    SvxNumType eNumFormat = SvxNumType::ARABIC;
     WW8ReadFieldParams aReadParam( rStr );
     for (;;)
     {
@@ -3274,7 +3274,7 @@ eF_ResT SwWW8ImplReader::Read_F_Tox( WW8FieldDesc* pF, OUString& rStr )
                                 {
                                     sal_uInt16 nStyleLevel = rSI.mnWW8OutlineLevel;
                                     const SwNumFormat& rFormat = rSI.GetOutlineNumrule()->Get( nStyleLevel );
-                                    if ( SVX_NUM_NUMBER_NONE != rFormat.GetNumberingType() )
+                                    if ( SvxNumType::NUMBER_NONE != rFormat.GetNumberingType() )
                                     {
                                         ++nStyleLevel;
 
diff --git a/sw/source/filter/ww8/ww8par6.cxx b/sw/source/filter/ww8/ww8par6.cxx
index 5a59b80..145f3899 100644
--- a/sw/source/filter/ww8/ww8par6.cxx
+++ b/sw/source/filter/ww8/ww8par6.cxx
@@ -728,7 +728,7 @@ void SwWW8ImplReader::HandleLineNumbering(const wwSection &rSection)
             aInfo.SetCountBlankLines(true);
             aInfo.SetCountInFlys(false);
             aInfo.SetPos( LINENUMBER_POS_LEFT );
-            SvxNumberType aNumType; // this sets SVX_NUM_ARABIC per default
+            SvxNumberType aNumType; // this sets SvxNumType::ARABIC per default
             aInfo.SetNumType( aNumType );
 
             m_rDoc.SetLineNumberInfo( aInfo );
@@ -773,8 +773,8 @@ void wwSectionManager::SetNumberingType(const wwSection &rNewSection,
     // save page number format
     static const SvxNumType aNumTyp[5] =
     {
-        SVX_NUM_ARABIC, SVX_NUM_ROMAN_UPPER, SVX_NUM_ROMAN_LOWER,
-        SVX_NUM_CHARS_UPPER_LETTER_N, SVX_NUM_CHARS_LOWER_LETTER_N
+        SvxNumType::ARABIC, SvxNumType::ROMAN_UPPER, SvxNumType::ROMAN_LOWER,
+        SvxNumType::CHARS_UPPER_LETTER_N, SvxNumType::CHARS_LOWER_LETTER_N
     };
 
     SvxNumberType aType;
diff --git a/sw/source/ui/config/optload.cxx b/sw/source/ui/config/optload.cxx
index 4953740..dfd6af7 100644
--- a/sw/source/ui/config/optload.cxx
+++ b/sw/source/ui/config/optload.cxx
@@ -472,7 +472,7 @@ SwCaptionOptPage::SwCaptionOptPage(vcl::Window* pParent, const SfxItemSet& rSet)
     SwWrtShell* pSh = ::GetActiveWrtShell();
 
     // m_pFormatBox
-    sal_uInt16 nSelFormat = SVX_NUM_ARABIC;
+    sal_uInt16 nSelFormat = SvxNumType::ARABIC;
     if (pSh)
     {
         for ( auto i = pMgr->GetFieldTypeCount(); i; )
@@ -868,7 +868,7 @@ void SwCaptionOptPage::InvalidatePreview()
         // number
         const sal_uInt16 nNumFormat = (sal_uInt16)reinterpret_cast<sal_uLong>(m_pFormatBox->GetEntryData(
                                         m_pFormatBox->GetSelectEntryPos() ));
-        if( SVX_NUM_NUMBER_NONE != nNumFormat )
+        if( SvxNumType::NUMBER_NONE != nNumFormat )
         {
             //#i61007# order of captions
             if( !bOrderNumberingFirst )
@@ -898,12 +898,12 @@ void SwCaptionOptPage::InvalidatePreview()
 
             switch( nNumFormat )
             {
-                case SVX_NUM_CHARS_UPPER_LETTER:    aStr += "A"; break;
-                case SVX_NUM_CHARS_UPPER_LETTER_N:  aStr += "A"; break;
-                case SVX_NUM_CHARS_LOWER_LETTER:    aStr += "a"; break;
-                case SVX_NUM_CHARS_LOWER_LETTER_N:  aStr += "a"; break;
-                case SVX_NUM_ROMAN_UPPER:           aStr += "I"; break;
-                case SVX_NUM_ROMAN_LOWER:           aStr += "i"; break;
+                case SvxNumType::CHARS_UPPER_LETTER:    aStr += "A"; break;
+                case SvxNumType::CHARS_UPPER_LETTER_N:  aStr += "A"; break;
+                case SvxNumType::CHARS_LOWER_LETTER:    aStr += "a"; break;
+                case SvxNumType::CHARS_LOWER_LETTER_N:  aStr += "a"; break;
+                case SvxNumType::ROMAN_UPPER:           aStr += "I"; break;
+                case SvxNumType::ROMAN_LOWER:           aStr += "i"; break;
                 //case ARABIC:
                 default:                    aStr += "1"; break;
             }
diff --git a/sw/source/ui/fldui/flddb.cxx b/sw/source/ui/fldui/flddb.cxx
index fe76911..5321b1c 100644
--- a/sw/source/ui/fldui/flddb.cxx
+++ b/sw/source/ui/fldui/flddb.cxx
@@ -137,7 +137,7 @@ void SwFieldDBPage::Reset(const SfxItemSet*)
         const sal_Int32 nEntryPos = m_pFormatLB->InsertEntry(GetFieldMgr().GetFormatStr(TYP_DBSETNUMBERFLD, i));
         const sal_uInt16 nFormatId = GetFieldMgr().GetFormatId( TYP_DBSETNUMBERFLD, i );
         m_pFormatLB->SetEntryData( nEntryPos, reinterpret_cast<void*>(nFormatId) );
-        if( SVX_NUM_ARABIC == nFormatId )
+        if( SvxNumType::ARABIC == nFormatId )
             m_pFormatLB->SelectEntryPos( nEntryPos );
     }
 
diff --git a/sw/source/ui/fldui/flddok.cxx b/sw/source/ui/fldui/flddok.cxx
index df89661..422d71f 100644
--- a/sw/source/ui/fldui/flddok.cxx
+++ b/sw/source/ui/fldui/flddok.cxx
@@ -365,7 +365,7 @@ IMPL_LINK_NOARG(SwFieldDokPage, TypeHdl, ListBox&, void)
                     const sal_uInt16 nTmp = (sal_uInt16)reinterpret_cast<sal_uLong>(m_pFormatLB->GetEntryData(
                                             m_pFormatLB->GetSelectEntryPos() ));
 
-                    if(SVX_NUM_CHAR_SPECIAL != nTmp)
+                    if(SvxNumType::CHAR_SPECIAL != nTmp)
                     {
                         sal_Int32 nOff = GetCurField()->GetPar2().toInt32();
                         if( TYP_NEXTPAGEFLD == nTypeId && 1 != nOff )
@@ -476,7 +476,7 @@ IMPL_LINK_NOARG(SwFieldDokPage, SubTypeHdl, ListBox&, void)
 
     case TYP_PREVPAGEFLD:
     case TYP_NEXTPAGEFLD:
-        nTextRes = SVX_NUM_CHAR_SPECIAL == (sal_uInt16)reinterpret_cast<sal_uLong>(m_pFormatLB->GetEntryData(
+        nTextRes = SvxNumType::CHAR_SPECIAL == (sal_uInt16)reinterpret_cast<sal_uLong>(m_pFormatLB->GetEntryData(
                                         m_pFormatLB->GetSelectEntryPos() ))
                         ? STR_VALUE : STR_OFFSET;
         break;
@@ -544,7 +544,7 @@ IMPL_LINK_NOARG(SwFieldDokPage, FormatHdl, ListBox&, void)
         sal_uInt16 nTmp = (sal_uInt16)reinterpret_cast<sal_uLong>(m_pFormatLB->GetEntryData(
                                         m_pFormatLB->GetSelectEntryPos() ));
         const OUString sOldText( m_pValueFT->GetText() );
-        const OUString sNewText( SW_RES( SVX_NUM_CHAR_SPECIAL == nTmp  ? STR_VALUE
+        const OUString sNewText( SW_RES( SvxNumType::CHAR_SPECIAL == nTmp  ? STR_VALUE
                                                          : STR_OFFSET ));
 
         if( sOldText != sNewText )
@@ -616,7 +616,7 @@ bool SwFieldDokPage::FillItemSet(SfxItemSet* )
         case TYP_PAGENUMBERFLD:
         case TYP_GETREFPAGEFLD:
         {
-            if( SVX_NUM_CHAR_SPECIAL != nFormat &&
+            if( SvxNumType::CHAR_SPECIAL != nFormat &&
                 (TYP_PREVPAGEFLD == nTypeId || TYP_NEXTPAGEFLD == nTypeId))
             {
                 sal_Int32 nVal = m_pValueED->GetText().toInt32();
diff --git a/sw/source/ui/fldui/fldvar.cxx b/sw/source/ui/fldui/fldvar.cxx
index 3c3cbac..fc8804f 100644
--- a/sw/source/ui/fldui/fldvar.cxx
+++ b/sw/source/ui/fldui/fldvar.cxx
@@ -1215,7 +1215,7 @@ bool SwFieldVarPage::FillItemSet(SfxItemSet* )
             break;
         }
         case TYP_GETREFPAGEFLD:
-            if( SVX_NUM_CHAR_SPECIAL == nFormat )
+            if( SvxNumType::CHAR_SPECIAL == nFormat )
                 aVal = m_pValueED->GetText();
             break;
     }
diff --git a/sw/source/ui/frmdlg/cption.cxx b/sw/source/ui/frmdlg/cption.cxx
index ae9cf89..841eaf3 100644
--- a/sw/source/ui/frmdlg/cption.cxx
+++ b/sw/source/ui/frmdlg/cption.cxx
@@ -203,7 +203,7 @@ SwCaptionDialog::SwCaptionDialog( vcl::Window *pParent, SwView &rV ) :
     }
 
     // aFormatBox
-    sal_uInt16 nSelFormat = SVX_NUM_ARABIC;
+    sal_uInt16 nSelFormat = SvxNumType::ARABIC;
     nCount = pMgr->GetFieldTypeCount();
     for ( size_t i = nCount; i; )
     {
@@ -350,7 +350,7 @@ void SwCaptionDialog::DrawSample()
     if( !bNone )
     {
         const sal_uInt16 nNumFormat = (sal_uInt16)reinterpret_cast<sal_uIntPtr>(m_pFormatBox->GetSelectEntryData());
-        if( SVX_NUM_NUMBER_NONE != nNumFormat )
+        if( SvxNumType::NUMBER_NONE != nNumFormat )
         {
             // category
             //#i61007# order of captions
@@ -377,12 +377,12 @@ void SwCaptionDialog::DrawSample()
 
             switch( nNumFormat )
             {
-            case SVX_NUM_CHARS_UPPER_LETTER:    aStr += "A"; break;
-            case SVX_NUM_CHARS_UPPER_LETTER_N:  aStr += "A"; break;
-            case SVX_NUM_CHARS_LOWER_LETTER:    aStr += "a"; break;
-            case SVX_NUM_CHARS_LOWER_LETTER_N:  aStr += "a"; break;
-            case SVX_NUM_ROMAN_UPPER:           aStr += "I"; break;
-            case SVX_NUM_ROMAN_LOWER:           aStr += "i"; break;
+            case SvxNumType::CHARS_UPPER_LETTER:    aStr += "A"; break;
+            case SvxNumType::CHARS_UPPER_LETTER_N:  aStr += "A"; break;
+            case SvxNumType::CHARS_LOWER_LETTER:    aStr += "a"; break;
+            case SvxNumType::CHARS_LOWER_LETTER_N:  aStr += "a"; break;
+            case SvxNumType::ROMAN_UPPER:           aStr += "I"; break;
+            case SvxNumType::ROMAN_LOWER:           aStr += "i"; break;
             default:                    aStr += "1"; break;
             }
             //#i61007# order of captions
diff --git a/sw/source/ui/misc/outline.cxx b/sw/source/ui/misc/outline.cxx
index 75393ae..7b51e86 100644
--- a/sw/source/ui/misc/outline.cxx
+++ b/sw/source/ui/misc/outline.cxx
@@ -857,9 +857,9 @@ VclPtr<SfxTabPage> SwOutlineSettingsTabPage::Create( vcl::Window* pParent,
 void SwOutlineSettingsTabPage::CheckForStartValue_Impl(sal_uInt16 nNumberingType)
 {
     bool bIsNull = m_pStartEdit->GetValue() == 0;
-    bool bNoZeroAllowed = nNumberingType < SVX_NUM_ARABIC ||
-                        SVX_NUM_CHARS_UPPER_LETTER_N == nNumberingType ||
-                        SVX_NUM_CHARS_LOWER_LETTER_N == nNumberingType;
+    bool bNoZeroAllowed = nNumberingType < SvxNumType::ARABIC ||
+                        SvxNumType::CHARS_UPPER_LETTER_N == nNumberingType ||
+                        SvxNumType::CHARS_LOWER_LETTER_N == nNumberingType;
     m_pStartEdit->SetMin(bNoZeroAllowed ? 1 : 0);
     if(bIsNull && bNoZeroAllowed)
         m_pStartEdit->GetModifyHdl().Call(*m_pStartEdit);
@@ -982,12 +982,12 @@ void NumberingPreview::Paint(vcl::RenderContext& rRenderContext, const Rectangle
                 }
 
                 long nBulletWidth = 0;
-                if (SVX_NUM_BITMAP == rFormat.GetNumberingType())
+                if (SvxNumType::BITMAP == rFormat.GetNumberingType())
                 {
                     nBulletWidth = lcl_DrawGraphic(pVDev.get(), rFormat, nNumberXPos,
                                                    nYStart, nWidthRelation);
                 }
-                else if (SVX_NUM_CHAR_SPECIAL == rFormat.GetNumberingType())
+                else if (SvxNumType::CHAR_SPECIAL == rFormat.GetNumberingType())
                 {
                     nBulletWidth = lcl_DrawBullet(pVDev.get(), rFormat, nNumberXPos,
                                                   nYStart, aStdFont.GetFontSize());
@@ -1074,12 +1074,12 @@ void NumberingPreview::Paint(vcl::RenderContext& rRenderContext, const Rectangle
                 nXStart /= 2;
                 nXStart += 2;
                 long nTextOffset;
-                if (SVX_NUM_BITMAP == rFormat.GetNumberingType())
+                if (SvxNumType::BITMAP == rFormat.GetNumberingType())
                 {
                     lcl_DrawGraphic(pVDev.get(), rFormat, nXStart, nYStart, nWidthRelation);
                     nTextOffset = nLineHeight + nXStep;
                 }
-                else if (SVX_NUM_CHAR_SPECIAL == rFormat.GetNumberingType())
+                else if (SvxNumType::CHAR_SPECIAL == rFormat.GetNumberingType())
                 {
                     nTextOffset =  lcl_DrawBullet(pVDev.get(), rFormat, nXStart, nYStart, aStdFont.GetFontSize());
                     nTextOffset += nXStep;
diff --git a/sw/source/uibase/app/appenv.cxx b/sw/source/uibase/app/appenv.cxx
index 286ddc4..67fdefd 100644
--- a/sw/source/uibase/app/appenv.cxx
+++ b/sw/source/uibase/app/appenv.cxx
@@ -394,7 +394,7 @@ void SwModule::InsertEnv( SfxRequest& rReq )
 
         // Set type of page numbering
         SvxNumberType aType;
-        aType.SetNumberingType(SVX_NUM_NUMBER_NONE);
+        aType.SetNumberingType(SvxNumType::NUMBER_NONE);
         pDesc->SetNumType(aType);
 
         // Followup template
diff --git a/sw/source/uibase/app/applab.cxx b/sw/source/uibase/app/applab.cxx
index 94973d6..96f456a 100644
--- a/sw/source/uibase/app/applab.cxx
+++ b/sw/source/uibase/app/applab.cxx
@@ -264,7 +264,7 @@ void SwModule::InsertLab(SfxRequest& rReq, bool bLabel)
             rFormat.SetFormatAttr( SwFormatFrameSize( ATT_FIX_SIZE, lPgWidth, lPgHeight ));
             // Numbering type
             SvxNumberType aType;
-            aType.SetNumberingType(SVX_NUM_NUMBER_NONE);
+            aType.SetNumberingType(SvxNumType::NUMBER_NONE);
             aDesc.SetNumType( aType );
 
             // Followup template
diff --git a/sw/source/uibase/config/caption.cxx b/sw/source/uibase/config/caption.cxx
index ab56dbc..acff26c 100644
--- a/sw/source/uibase/config/caption.cxx
+++ b/sw/source/uibase/config/caption.cxx
@@ -25,7 +25,7 @@
 InsCaptionOpt::InsCaptionOpt(const SwCapObjType eType, const SvGlobalName* pOleId) :
     bUseCaption(false),
     eObjType(eType),
-    nNumType(SVX_NUM_ARABIC),
+    nNumType(SvxNumType::ARABIC),
     sNumberSeparator((". ")),
     nPos(1),
     nLevel(0),
diff --git a/sw/source/uibase/fldui/fldmgr.cxx b/sw/source/uibase/fldui/fldmgr.cxx
index f8b17da..c60eb78 100644
--- a/sw/source/uibase/fldui/fldmgr.cxx
+++ b/sw/source/uibase/fldui/fldmgr.cxx
@@ -309,7 +309,7 @@ SwField* SwFieldMgr::GetCurField()
         case TYP_NEXTPAGEFLD:
         case TYP_PREVPAGEFLD:
         case TYP_GETREFPAGEFLD:
-            if( nCurFormat == SVX_NUM_PAGEDESC )
+            if( nCurFormat == SvxNumType::PAGE_DESCRIPTOR )
                 nCurFormat -= 2;
             break;
     }
@@ -658,15 +658,15 @@ sal_uInt16 SwFieldMgr::GetFormatId(sal_uInt16 nTypeId, sal_uLong nFormatId) cons
         {
             switch( nBegin + nFormatId )
             {
-            case FMT_NUM_ABC:               nId = SVX_NUM_CHARS_UPPER_LETTER;   break;
-            case FMT_NUM_SABC:              nId = SVX_NUM_CHARS_LOWER_LETTER;   break;
-            case FMT_NUM_ROMAN:             nId = SVX_NUM_ROMAN_UPPER;          break;
-            case FMT_NUM_SROMAN:            nId = SVX_NUM_ROMAN_LOWER;          break;
-            case FMT_NUM_ARABIC:            nId = SVX_NUM_ARABIC;               break;
-            case FMT_NUM_PAGEDESC:          nId = SVX_NUM_PAGEDESC;             break;
-            case FMT_NUM_PAGESPECIAL:       nId = SVX_NUM_CHAR_SPECIAL;         break;
-            case FMT_NUM_ABC_N:             nId = SVX_NUM_CHARS_UPPER_LETTER_N; break;
-            case FMT_NUM_SABC_N:            nId = SVX_NUM_CHARS_LOWER_LETTER_N; break;
+            case FMT_NUM_ABC:               nId = SvxNumType::CHARS_UPPER_LETTER;   break;
+            case FMT_NUM_SABC:              nId = SvxNumType::CHARS_LOWER_LETTER;   break;
+            case FMT_NUM_ROMAN:             nId = SvxNumType::ROMAN_UPPER;          break;
+            case FMT_NUM_SROMAN:            nId = SvxNumType::ROMAN_LOWER;          break;
+            case FMT_NUM_ARABIC:            nId = SvxNumType::ARABIC;               break;
+            case FMT_NUM_PAGEDESC:          nId = SvxNumType::PAGE_DESCRIPTOR;             break;
+            case FMT_NUM_PAGESPECIAL:       nId = SvxNumType::CHAR_SPECIAL;         break;
+            case FMT_NUM_ABC_N:             nId = SvxNumType::CHARS_UPPER_LETTER_N; break;
+            case FMT_NUM_SABC_N:            nId = SvxNumType::CHARS_LOWER_LETTER_N; break;
             }
         }
         else if(xNumberingInfo.is())
@@ -859,7 +859,7 @@ bool SwFieldMgr::InsertField(
 
             if(rData.m_nTypeId == TYP_NEXTPAGEFLD)
             {
-                if( SVX_NUM_CHAR_SPECIAL == nFormatId )
+                if( SvxNumType::CHAR_SPECIAL == nFormatId )
                     nOff = 1;
                 else
                     nOff += 1;
@@ -867,7 +867,7 @@ bool SwFieldMgr::InsertField(
             }
             else if(rData.m_nTypeId == TYP_PREVPAGEFLD)
             {
-                if( SVX_NUM_CHAR_SPECIAL == nFormatId )
+                if( SvxNumType::CHAR_SPECIAL == nFormatId )
                     nOff = -1;
                 else
                     nOff -= 1;
@@ -880,7 +880,7 @@ bool SwFieldMgr::InsertField(
                 static_cast<SwPageNumberFieldType*>( pCurShell->GetFieldType(0, RES_PAGENUMBERFLD) );
             pField = new SwPageNumberField(pTyp, nSubType, nFormatId, nOff);
 
-            if( SVX_NUM_CHAR_SPECIAL == nFormatId &&
+            if( SvxNumType::CHAR_SPECIAL == nFormatId &&
                 ( PG_PREV == nSubType || PG_NEXT == nSubType ) )
                 static_cast<SwPageNumberField*>(pField)->SetUserString( rData.m_sPar2 );
             break;
@@ -1421,15 +1421,15 @@ void SwFieldMgr::UpdateCurField(sal_uLong nFormat,
             break;
 
         case TYP_NEXTPAGEFLD:
-            if( SVX_NUM_CHAR_SPECIAL == nFormat )
+            if( SvxNumType::CHAR_SPECIAL == nFormat )
             {
                 static_cast<SwPageNumberField*>(pCurField)->SetUserString( sPar2 );
                 sPar2 = "1";
             }
             else
             {
-                if( nFormat + 2 == SVX_NUM_PAGEDESC )
-                    nFormat = SVX_NUM_PAGEDESC;
+                if( nFormat + 2 == SvxNumType::PAGE_DESCRIPTOR )
+                    nFormat = SvxNumType::PAGE_DESCRIPTOR;
                 short nOff = (short)sPar2.toInt32();
                 nOff += 1;
                 sPar2 = OUString::number(nOff);
@@ -1437,15 +1437,15 @@ void SwFieldMgr::UpdateCurField(sal_uLong nFormat,
             break;
 
         case TYP_PREVPAGEFLD:
-            if( SVX_NUM_CHAR_SPECIAL == nFormat )
+            if( SvxNumType::CHAR_SPECIAL == nFormat )
             {
                 static_cast<SwPageNumberField*>(pCurField)->SetUserString( sPar2 );
                 sPar2 = "-1";
             }
             else
             {
-                if( nFormat + 2 == SVX_NUM_PAGEDESC )
-                    nFormat = SVX_NUM_PAGEDESC;
+                if( nFormat + 2 == SvxNumType::PAGE_DESCRIPTOR )
+                    nFormat = SvxNumType::PAGE_DESCRIPTOR;
                 short nOff = (short)sPar2.toInt32();
                 nOff -= 1;
                 sPar2 = OUString::number(nOff);
@@ -1454,8 +1454,8 @@ void SwFieldMgr::UpdateCurField(sal_uLong nFormat,
 
         case TYP_PAGENUMBERFLD:
         case TYP_GETREFPAGEFLD:
-            if( nFormat + 2 == SVX_NUM_PAGEDESC )
-                nFormat = SVX_NUM_PAGEDESC;
+            if( nFormat + 2 == SvxNumType::PAGE_DESCRIPTOR )
+                nFormat = SvxNumType::PAGE_DESCRIPTOR;
             break;
 
         case TYP_GETREFFLD:
diff --git a/sw/source/uibase/misc/numberingtypelistbox.cxx b/sw/source/uibase/misc/numberingtypelistbox.cxx
index d66ac3e..8105b5b 100644
--- a/sw/source/uibase/misc/numberingtypelistbox.cxx
+++ b/sw/source/uibase/misc/numberingtypelistbox.cxx
@@ -167,7 +167,7 @@ void SwNumberingTypeListBox::Reload(SwInsertNumTypes nTypeFlags)
 
 SvxNumType   SwNumberingTypeListBox::GetSelectedNumberingType()
 {
-    SvxNumType nRet = SVX_NUM_CHARS_UPPER_LETTER;
+    SvxNumType nRet = SvxNumType::CHARS_UPPER_LETTER;
     sal_Int32 nSelPos = GetSelectEntryPos();
     if(LISTBOX_ENTRY_NOTFOUND != nSelPos)
         nRet = (SvxNumType)reinterpret_cast<sal_uLong>(GetEntryData(nSelPos));
diff --git a/sw/source/uibase/shells/textfld.cxx b/sw/source/uibase/shells/textfld.cxx
index bf94094..fbc95fc 100644
--- a/sw/source/uibase/shells/textfld.cxx
+++ b/sw/source/uibase/shells/textfld.cxx
@@ -664,14 +664,14 @@ void SwTextShell::ExecField(SfxRequest &rReq)
                 goto FIELD_INSERT;
             case FN_INSERT_FLD_PGNUMBER:
                 nInsertType = TYP_PAGENUMBERFLD;
-                nInsertFormat = SVX_NUM_PAGEDESC; // Like page template
+                nInsertFormat = SvxNumType::PAGE_DESCRIPTOR; // Like page template
                 bIsText = false;
                 goto FIELD_INSERT;
             case FN_INSERT_FLD_PGCOUNT :
                 nInsertType = TYP_DOCSTATFLD;
                 nInsertSubType = 0;
                 bIsText = false;
-                nInsertFormat = SVX_NUM_PAGEDESC;
+                nInsertFormat = SvxNumType::PAGE_DESCRIPTOR;
                 goto FIELD_INSERT;
             case FN_INSERT_FLD_TOPIC   :
                 nInsertType = TYP_DOCINFOFLD;
diff --git a/sw/source/uibase/shells/txtnum.cxx b/sw/source/uibase/shells/txtnum.cxx
index c8add14..188db76 100644
--- a/sw/source/uibase/shells/txtnum.cxx
+++ b/sw/source/uibase/shells/txtnum.cxx
@@ -120,15 +120,15 @@ void SwTextShell::ExecEnterNum(SfxRequest &rReq)
         {
             SvxNumRule aRule = pNumRuleAtCurrentSelection->MakeSvxNumRule();
 
-            //convert type of linked bitmaps from SVX_NUM_BITMAP to (SVX_NUM_BITMAP|LINK_TOKEN)
+            //convert type of linked bitmaps from SvxNumType::BITMAP to (SvxNumType::BITMAP|LINK_TOKEN)
             for ( sal_uInt16 i = 0; i < aRule.GetLevelCount(); i++ )
             {
                 SvxNumberFormat aFormat( aRule.GetLevel( i ) );
-                if ( SVX_NUM_BITMAP == aFormat.GetNumberingType() )
+                if ( SvxNumType::BITMAP == aFormat.GetNumberingType() )
                 {
                     const SvxBrushItem* pBrush = aFormat.GetBrush();
                     if(pBrush && !pBrush->GetGraphicLink().isEmpty())
-                        aFormat.SetNumberingType(SvxNumType(SVX_NUM_BITMAP|LINK_TOKEN));
+                        aFormat.SetNumberingType(SvxNumType(SvxNumType::BITMAP|LINK_TOKEN));
                     aRule.SetLevel(i, aFormat, aRule.Get(i) != nullptr);
                 }
             }
diff --git a/sw/source/uibase/wrtsh/wrtsh1.cxx b/sw/source/uibase/wrtsh/wrtsh1.cxx
index 9bf3403..dbe2fa1 100644
--- a/sw/source/uibase/wrtsh/wrtsh1.cxx
+++ b/sw/source/uibase/wrtsh/wrtsh1.cxx
@@ -1041,7 +1041,7 @@ void SwWrtShell::NumOrBulletOn(bool bNum)
                             "<SwWrtShell::NumOrBulletOn(..)> - paragraph style with outline rule, but no outline level" );
                     if ( pColl->IsAssignedToListLevelOfOutlineStyle() &&
                          pCollRule->Get( static_cast<sal_uInt16>(nActivateOutlineLvl) ).GetNumberingType()
-                            == SVX_NUM_NUMBER_NONE )
+                            == SvxNumType::NUMBER_NONE )
                     {
                         // activate outline numbering
                         bActivateOutlineRule = true;
@@ -1068,7 +1068,7 @@ void SwWrtShell::NumOrBulletOn(bool bNum)
                 // has already a numbering format set.
                 nActivateOutlineLvl = pColl->GetAssignedOutlineStyleLevel();
                 if ( pCollRule->Get( static_cast<sal_uInt16>(nActivateOutlineLvl) ).GetNumberingType()
-                                == SVX_NUM_NUMBER_NONE )
+                                == SvxNumType::NUMBER_NONE )
                 {
                     // activate outline numbering, because from the precondition
                     // it's known, that <SwEdit::HasNumber()> == false
@@ -1089,7 +1089,7 @@ void SwWrtShell::NumOrBulletOn(bool bNum)
                         "<SwWrtShell::NumOrBulletOn(..)> - paragraph style with outline rule, but no outline level" );
                 if ( pColl->IsAssignedToListLevelOfOutlineStyle() &&
                      pCollRule->Get( static_cast<sal_uInt16>(nActivateOutlineLvl) ).GetNumberingType()
-                        == SVX_NUM_NUMBER_NONE )
+                        == SvxNumType::NUMBER_NONE )
                 {
                     // activate outline numbering
                     bActivateOutlineRule = true;
@@ -1155,7 +1155,7 @@ void SwWrtShell::NumOrBulletOn(bool bNum)
                 SwNumFormat aFormat(aNumRule.Get(static_cast<sal_uInt16>(nLevel)));
 
                 if (bNum)
-                    aFormat.SetNumberingType(SVX_NUM_ARABIC);
+                    aFormat.SetNumberingType(SvxNumType::ARABIC);
                 else
                 {
                     // #i63395# Only apply user defined default bullet font
@@ -1165,7 +1165,7 @@ void SwWrtShell::NumOrBulletOn(bool bNum)
                         aFormat.SetBulletFont( pFnt );
                     }
                     aFormat.SetBulletChar( numfunc::GetBulletChar(static_cast<sal_uInt8>(nLevel)));
-                    aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+                    aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
                     // #i93908# clear suffix for bullet lists
                     aFormat.SetPrefix(OUString());
                     aFormat.SetSuffix(OUString());
@@ -1223,7 +1223,7 @@ void SwWrtShell::NumOrBulletOn(bool bNum)
                     aFormat.SetBulletFont( pFnt );
                 }
                 aFormat.SetBulletChar( numfunc::GetBulletChar(nLvl) );
-                aFormat.SetNumberingType(SVX_NUM_CHAR_SPECIAL);
+                aFormat.SetNumberingType(SvxNumType::CHAR_SPECIAL);
                 // #i93908# clear suffix for bullet lists
                 aFormat.SetPrefix(OUString());
                 aFormat.SetSuffix(OUString());
@@ -1324,7 +1324,7 @@ void SwWrtShell::NumOrBulletOff()
 
                 SwNumFormat aFormat(aNumRule.Get(static_cast<sal_uInt16>(nLevel)));
 
-                aFormat.SetNumberingType(SVX_NUM_NUMBER_NONE);
+                aFormat.SetNumberingType(SvxNumType::NUMBER_NONE);
                 aNumRule.Set(nLevel, aFormat);
 
                 // no start or continuation of a list - the outline style is only changed.
@@ -1416,7 +1416,7 @@ SelectionType SwWrtShell::GetSelectionType() const
     if ( IsTableMode() )
         nCnt |= (nsSelectionType::SEL_TBL | nsSelectionType::SEL_TBL_CELLS);
 
-    // Do not pop up numbering toolbar, if the text node has a numbering of type SVX_NUM_NUMBER_NONE.
+    // Do not pop up numbering toolbar, if the text node has a numbering of type SvxNumType::NUMBER_NONE.
     const SwNumRule* pNumRule = GetNumRuleAtCurrCursorPos();
     if ( pNumRule )
     {
@@ -1434,7 +1434,7 @@ SelectionType SwWrtShell::GetSelectionType() const
                 nLevel = MAXLEVEL - 1;
 
             const SwNumFormat& rFormat = pNumRule->Get(nLevel);
-            if ( SVX_NUM_NUMBER_NONE != rFormat.GetNumberingType() )
+            if ( SvxNumType::NUMBER_NONE != rFormat.GetNumberingType() )
                 nCnt |= nsSelectionType::SEL_NUM;
         }
     }
-- 
2.7.4

