{
  "comments": [
    {
      "key": {
        "uuid": "d5d57df4_8bc3f79f",
        "filename": "include/rtl/ustring.hxx",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-09-11T08:06:29Z",
      "side": 1,
      "message": "Is this necessary/desirable for a consteval thing?",
      "range": {
        "startLine": 105,
        "startChar": 71,
        "endLine": 105,
        "endChar": 78
      },
      "revId": "60fe2a2efb0257547e57a21ad4684db55e3c6537",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "206c66e1_2d91701a",
        "filename": "include/rtl/ustring.hxx",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-09-11T08:16:14Z",
      "side": 1,
      "message": "I\u0027m not sure I understand your question.  For C++17, `buffer` needs to be explicitly initialized here, even if all elements will be written to by the ctor.  For C++20, that requirement has been dropped (see the referenced \u003chttps://wg21.link/p1331r2\u003e \"Permitting trivial default initialization in constexprcontexts\"), so we will eventually be able to drop this explicit initialization once our baseline is C++20.  However, until then, the presence of the redundant explicit initialization should be harmless, at least from the perspective of the generated code (though it might impact compilation itself).",
      "parentUuid": "d5d57df4_8bc3f79f",
      "range": {
        "startLine": 105,
        "startChar": 71,
        "endLine": 105,
        "endChar": 78
      },
      "revId": "60fe2a2efb0257547e57a21ad4684db55e3c6537",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c0b0957_add01e0b",
        "filename": "include/rtl/ustring.hxx",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-09-11T08:18:47Z",
      "side": 1,
      "message": "My question is: why would we want to drop the initialization, that would only result in random garbage in the compiled binaries where currently zeroes would be? So the result on this drop would be binaries differing in these places randomly, without any positive impact on any aspect?",
      "parentUuid": "206c66e1_2d91701a",
      "range": {
        "startLine": 105,
        "startChar": 71,
        "endLine": 105,
        "endChar": 78
      },
      "revId": "60fe2a2efb0257547e57a21ad4684db55e3c6537",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a9b7a60_c71dfa97",
        "filename": "include/rtl/ustring.hxx",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2020-09-11T08:51:13Z",
      "side": 1,
      "message": "If any members would be left uninitialized by the ctor, the ctor call would no longer be a constant expression, so compilation should fail with the consteval ctor.",
      "parentUuid": "6c0b0957_add01e0b",
      "range": {
        "startLine": 105,
        "startChar": 71,
        "endLine": 105,
        "endChar": 78
      },
      "revId": "60fe2a2efb0257547e57a21ad4684db55e3c6537",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59830355_47750ef7",
        "filename": "include/rtl/ustring.hxx",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-09-11T09:00:09Z",
      "side": 1,
      "message": "Thanks; you are absolutely right - sorry for the noise!",
      "parentUuid": "0a9b7a60_c71dfa97",
      "range": {
        "startLine": 105,
        "startChar": 71,
        "endLine": 105,
        "endChar": 78
      },
      "revId": "60fe2a2efb0257547e57a21ad4684db55e3c6537",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}