{
  "comments": [
    {
      "key": {
        "uuid": "7cc0db6d_631d5a79",
        "filename": "sc/source/core/tool/interpr1.cxx",
        "patchSetId": 14
      },
      "lineNbr": 5600,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T08:22:30Z",
      "side": 1,
      "message": "Eike: this (and below) kind of defeats the improvement: we do not use Kahan on this operation. Do you have an idea how we may use Kahan here, and still allow the approxAdd-specific behavior (if first is different sign than rest, and similar in abs value, return 0)?",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b6515fd_6ddfb970",
        "filename": "sc/source/core/tool/interpr3.cxx",
        "patchSetId": 14
      },
      "lineNbr": 2621,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T08:22:30Z",
      "side": 1,
      "message": "The negation could still benefit from Kahan here and below?",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32021b18_cc722454",
        "filename": "sc/source/core/tool/interpr3.cxx",
        "patchSetId": 14
      },
      "lineNbr": 2621,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-04-25T09:10:22Z",
      "side": 1,
      "message": "I don\u0027t really understand your comment.\nThis may be able to benefict from an adaptation of two pass algorith.\nAnd maybe the builtin methods in scmatrix could be used instead for the sum.\nHowever, the purpose of this is just to provide kahan sum.\nhttps://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Two-pass_algorithm",
      "parentUuid": "1b6515fd_6ddfb970",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9be9bc38_f8e50b1d",
        "filename": "sc/source/core/tool/interpr3.cxx",
        "patchSetId": 14
      },
      "lineNbr": 2621,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T09:23:59Z",
      "side": 1,
      "message": "fSumSqr1 is a Kahan sum, having extra precision. It is used in yet another summation (negation), and thus this operation could still benefit from knowing the error. Thus it could be written (*without* changing code structure!) like this:\n\n        double fS1 \u003d (fSumSqr1-fSum1.get()*fSum1.get()/fCount1).get()/(fCount1-1.0)/fCount1;\n\n... provided that you implement binary operator + on two Kahan sums, returning Kahan sum itself.",
      "parentUuid": "32021b18_cc722454",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bcb719f_1b29253d",
        "filename": "sc/source/core/tool/interpr3.cxx",
        "patchSetId": 14
      },
      "lineNbr": 2701,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T08:22:30Z",
      "side": 1,
      "message": "and here",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2108909_46407d88",
        "filename": "sc/source/core/tool/interpr3.cxx",
        "patchSetId": 14
      },
      "lineNbr": 4610,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T08:22:30Z",
      "side": 1,
      "message": "and here",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43ab754c_e619ad5a",
        "filename": "sc/source/core/tool/interpr6.cxx",
        "patchSetId": 14
      },
      "lineNbr": 727,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T08:22:30Z",
      "side": 1,
      "message": "And here we drop the approxAdd effect. Do we need to keep it? Possibly we should introduce the approxAdd member of Kahan sum (for such final operations)?",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a329ba6c_efb4bc21",
        "filename": "sc/source/core/tool/interpr6.cxx",
        "patchSetId": 14
      },
      "lineNbr": 727,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-04-25T09:10:22Z",
      "side": 1,
      "message": "We can\u0027t use approx add with Kahan class. \nWould need to make changes in rtl::math.\nThis patch tries to not change code structure.\nOnly used Kahan in sum loops.\nSo can\u0027t really tell why the approxAdd.",
      "parentUuid": "43ab754c_e619ad5a",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f01f446f_d998b9b8",
        "filename": "sc/source/core/tool/interpr6.cxx",
        "patchSetId": 14
      },
      "lineNbr": 939,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T08:22:30Z",
      "side": 1,
      "message": "Same here",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68d3104c_79f69509",
        "filename": "sc/source/core/tool/scmatrix.cxx",
        "patchSetId": 14
      },
      "lineNbr": 1145,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T08:22:30Z",
      "side": 1,
      "message": "And if we add approx* methods to Kahan, we would restore this?",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edd0e1ef_3d6417c1",
        "filename": "sc/source/core/tool/scmatrix.cxx",
        "patchSetId": 14
      },
      "lineNbr": 1145,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-04-25T09:10:22Z",
      "side": 1,
      "message": "On the IterateResult definition there is this comment:\n\n    /**\n     * When adding all numerical matrix elements for a scalar result such as\n     * summation, the interpreter wants to separate the first non-zero value\n     * with the rest of the summed values. This is necessary for better\n     * numerical stability, unless we sort all by absolute values before\n     * summing (not really an option) or use another algorithm, e.g. Kahan\u0027s\n     * summation algorithm,\n     * https://en.wikipedia.org/wiki/Kahan_summation_algorithm\n     */\n\nBy that I understand that by implementing Kahan we don\u0027t need anymore that first term.",
      "parentUuid": "68d3104c_79f69509",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a31cdef_745a77a8",
        "filename": "sc/source/core/tool/scmatrix.cxx",
        "patchSetId": 14
      },
      "lineNbr": 1145,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-25T09:23:59Z",
      "side": 1,
      "message": "Ah - good point! Then we need to drop all such cases, e.g. my comment on line 5600 of interpr1.cxx",
      "parentUuid": "edd0e1ef_3d6417c1",
      "revId": "8a1f03572e3755a3091697f9de59ec67c5f1e239",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}