{
  "comments": [
    {
      "key": {
        "uuid": "e252cd08_43f5242b",
        "filename": "vcl/skia/win/gdiimpl.cxx",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2020-03-27T14:32:03Z",
      "side": 1,
      "message": "I\u0027m pretty sure we only build with UNICODE on these days, so may as well only use the W variant of Windows functions. \nPity we can\u0027t easily add a clang-plugin to check that",
      "revId": "b1ef5dae8ebac859656541d3281082387652be5c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f45b8783_622ce06d",
        "filename": "vcl/skia/win/gdiimpl.cxx",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-03-27T14:41:48Z",
      "side": 1,
      "message": "I don\u0027t know if we build with UNICODE; and I made an effort to not depend on that define, explicitly using W variants ~everywhere. But in this case, the LOGFONT struct is passed to a library function that doesn\u0027t take an explicit A or W variant, so matching the variant expected by the library is fine here.",
      "parentUuid": "e252cd08_43f5242b",
      "revId": "b1ef5dae8ebac859656541d3281082387652be5c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8b98932_1b0afbae",
        "filename": "vcl/skia/win/gdiimpl.cxx",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2020-03-27T14:56:05Z",
      "side": 1,
      "message": "Then you\u0027re pretty wrong :). If we built with UNICODE, than using LOGFONT+GetObjectW() would have worked. And we build Skia ourselves, so it (does not) use the same that we do (not).",
      "parentUuid": "f45b8783_622ce06d",
      "revId": "b1ef5dae8ebac859656541d3281082387652be5c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e80b9d4_2dab63d7",
        "filename": "vcl/skia/win/gdiimpl.cxx",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2020-03-27T15:11:19Z",
      "side": 1,
      "message": "There\u0027s no mention of UNICODE / _UNICODE anywhere in solenv, so presumably we need to add it to the default Windows defines?",
      "parentUuid": "b8b98932_1b0afbae",
      "revId": "b1ef5dae8ebac859656541d3281082387652be5c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72c9f9f8_949a8f5b",
        "filename": "vcl/skia/win/gdiimpl.cxx",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-03-27T15:49:22Z",
      "side": 1,
      "message": "\u003e Then you\u0027re pretty wrong :)\n\nI like it when people make such nice statements. Of course, using specific variants making it explicit is a mistake compared to using macros depending on some define buried in build machinery, and all that TCHAR mess.",
      "parentUuid": "7e80b9d4_2dab63d7",
      "revId": "b1ef5dae8ebac859656541d3281082387652be5c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46ce39ab_a7eabe66",
        "filename": "vcl/skia/win/gdiimpl.cxx",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2020-03-27T17:37:21Z",
      "side": 1,
      "message": "LO even fails to build if I add the UNICODE defines, so Noel\u0027s claim that we only build with UNICODE on is clearly wrong (which is what I was referring to, if it wasn\u0027t obvious from the repeated use of \"pretty\").\nAnd if we\u0027re to talk about nice statements, then please cut the passive-aggressive \"nice\", thank you.",
      "parentUuid": "72c9f9f8_949a8f5b",
      "revId": "b1ef5dae8ebac859656541d3281082387652be5c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}