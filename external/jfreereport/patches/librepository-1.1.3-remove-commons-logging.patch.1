diff -ru librepository-1.1.3.orig/source/org/pentaho/reporting/libraries/repository/zip/ZipContentLocation.java librepository-1.1.3/source/org/pentaho/reporting/libraries/repository/zip/ZipContentLocation.java
--- librepository-1.1.3.orig/source/org/pentaho/reporting/libraries/repository/zip/ZipContentLocation.java	2021-04-07 11:16:05.369984495 +0100
+++ librepository-1.1.3/source/org/pentaho/reporting/libraries/repository/zip/ZipContentLocation.java	2021-04-07 11:17:30.417035353 +0100
@@ -21,8 +21,7 @@
 import java.util.HashMap;
 import java.util.zip.ZipEntry;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import java.util.logging.Logger;
 import org.pentaho.reporting.libraries.repository.ContentCreationException;
 import org.pentaho.reporting.libraries.repository.ContentEntity;
 import org.pentaho.reporting.libraries.repository.ContentIOException;
@@ -35,7 +34,7 @@
 
 public class ZipContentLocation implements ContentLocation
 {
-  private static final Log logger = LogFactory.getLog(ZipContentLocation.class);
+  private static final Logger logger = Logger.getLogger(ZipContentLocation.class.getName());
   private ZipRepository repository;
   private ZipContentLocation parent;
   private String comment;
@@ -114,7 +113,7 @@
     final Object entry = entries.get(path);
     if (entry instanceof ContentItem)
     {
-      logger.warn("Directory-Entry with the same name as a Content-Entry encountered: " + path);
+      logger.warning("Directory-Entry with the same name as a Content-Entry encountered: " + path);
       return;
     }
     final ZipContentLocation location;
@@ -164,7 +163,7 @@
     {
       if (entry instanceof ContentItem)
       {
-        logger.warn("Directory-Entry with the same name as a Content-Entry encountered: " + path);
+        logger.warning("Directory-Entry with the same name as a Content-Entry encountered: " + path);
         return;
       }
 
@@ -188,12 +187,12 @@
     {
       if (entry instanceof ContentItem)
       {
-        logger.warn("Duplicate Content-Entry encountered: " + path);
+        logger.warning("Duplicate Content-Entry encountered: " + path);
         return;
       }
       else if (entry != null)
       {
-        logger.warn("Replacing Directory-Entry with the same name as a Content-Entry: " + path);
+        logger.warning("Replacing Directory-Entry with the same name as a Content-Entry: " + path);
       }
       final ZipContentItem contentItem = new ZipContentItem(repository, this, zipEntry, data);
       entries.put(path, contentItem);
@@ -352,4 +351,4 @@
   {
     return (entries.remove(entity.getName()) != null);
   }
-}
\ No newline at end of file
+}
diff -ru librepository-1.1.3.orig/source/org/pentaho/reporting/libraries/repository/zipreader/ZipReadContentLocation.java librepository-1.1.3/source/org/pentaho/reporting/libraries/repository/zipreader/ZipReadContentLocation.java
--- librepository-1.1.3.orig/source/org/pentaho/reporting/libraries/repository/zipreader/ZipReadContentLocation.java	2021-04-07 11:16:05.365984446 +0100
+++ librepository-1.1.3/source/org/pentaho/reporting/libraries/repository/zipreader/ZipReadContentLocation.java	2021-04-07 11:17:22.342935587 +0100
@@ -21,8 +21,7 @@
 import java.util.HashMap;
 import java.util.zip.ZipEntry;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import java.util.logging.Logger;
 import org.pentaho.reporting.libraries.repository.ContentCreationException;
 import org.pentaho.reporting.libraries.repository.ContentEntity;
 import org.pentaho.reporting.libraries.repository.ContentIOException;
@@ -39,7 +38,7 @@
  */
 public class ZipReadContentLocation implements ContentLocation
 {
-  private static final Log logger = LogFactory.getLog(ZipReadContentLocation.class);
+  private static final Logger logger = Logger.getLogger(ZipReadContentLocation.class.getName());
   private ZipReadRepository repository;
   private ZipReadContentLocation parent;
   private String comment;
@@ -117,7 +116,7 @@
     final Object entry = entries.get(path);
     if (entry instanceof ContentItem)
     {
-      logger.warn("Directory-Entry with the same name as a Content-Entry encountered: " + path);
+      logger.warning("Directory-Entry with the same name as a Content-Entry encountered: " + path);
       return;
     }
     final ZipReadContentLocation location;
@@ -164,7 +163,7 @@
     {
       if (entry instanceof ContentItem)
       {
-        logger.warn("Directory-Entry with the same name as a Content-Entry encountered: " + path);
+        logger.warning("Directory-Entry with the same name as a Content-Entry encountered: " + path);
         return;
       }
 
@@ -188,12 +187,12 @@
     {
       if (entry instanceof ContentItem)
       {
-        logger.warn("Duplicate Content-Entry encountered: " + path);
+        logger.warning("Duplicate Content-Entry encountered: " + path);
         return;
       }
       else if (entry != null)
       {
-        logger.warn("Replacing Directory-Entry with the same name as a Content-Entry: " + path);
+        logger.warning("Replacing Directory-Entry with the same name as a Content-Entry: " + path);
       }
       final ZipReadContentItem contentItem = new ZipReadContentItem(repository, this, zipEntry, data);
       entries.put(path, contentItem);
