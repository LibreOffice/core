From bf05e232805f6c1fae5dea3c223de8bdaab425e9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Caol=C3=A1n=20McNamara?= <caolanm@redhat.com>
Date: Mon, 23 Jan 2017 13:26:53 +0000
Subject: [PATCH 1/3] unroll this a bit

---
 src/hunspell/csutil.cxx | 49 ++++++++++++++++++++++++++++---------------------
 1 file changed, 28 insertions(+), 21 deletions(-)

diff --git a/src/hunspell/csutil.cxx b/src/hunspell/csutil.cxx
index ac5cd98..c1666a5 100644
--- a/src/hunspell/csutil.cxx
+++ b/src/hunspell/csutil.cxx
@@ -518,18 +518,20 @@ unsigned char ccase(const struct cs_info* csconv, int nIndex) {
 
 w_char upper_utf(w_char u, int langnum) {
   unsigned short idx = (u.h << 8) + u.l;
-  if (idx != unicodetoupper(idx, langnum)) {
-    u.h = (unsigned char)(unicodetoupper(idx, langnum) >> 8);
-    u.l = (unsigned char)(unicodetoupper(idx, langnum) & 0x00FF);
+  unsigned short upridx = unicodetoupper(idx, langnum);
+  if (idx != upridx) {
+    u.h = (unsigned char)(upridx >> 8);
+    u.l = (unsigned char)(upridx & 0x00FF);
   }
   return u;
 }
 
 w_char lower_utf(w_char u, int langnum) {
   unsigned short idx = (u.h << 8) + u.l;
-  if (idx != unicodetolower(idx, langnum)) {
-    u.h = (unsigned char)(unicodetolower(idx, langnum) >> 8);
-    u.l = (unsigned char)(unicodetolower(idx, langnum) & 0x00FF);
+  unsigned short lwridx = unicodetolower(idx, langnum);
+  if (idx != lwridx) {
+    u.h = (unsigned char)(lwridx >> 8);
+    u.l = (unsigned char)(lwridx & 0x00FF);
   }
   return u;
 }
@@ -551,12 +553,13 @@ std::string& mkallsmall(std::string& s, const struct cs_info* csconv) {
 }
 
 std::vector<w_char>& mkallsmall_utf(std::vector<w_char>& u,
-                                    int langnum) {
+                                          int langnum) {
   for (size_t i = 0; i < u.size(); ++i) {
     unsigned short idx = (u[i].h << 8) + u[i].l;
-    if (idx != unicodetolower(idx, langnum)) {
-      u[i].h = (unsigned char)(unicodetolower(idx, langnum) >> 8);
-      u[i].l = (unsigned char)(unicodetolower(idx, langnum) & 0x00FF);
+    unsigned short lwridx = unicodetolower(idx, langnum);
+    if (idx != lwridx) {
+      u[i].h = (unsigned char)(lwridx >> 8);
+      u[i].l = (unsigned char)(lwridx & 0x00FF);
     }
   }
   return u;
@@ -565,9 +568,10 @@ std::vector<w_char>& mkallsmall_utf(std::vector<w_char>& u,
 std::vector<w_char>& mkallcap_utf(std::vector<w_char>& u, int langnum) {
   for (size_t i = 0; i < u.size(); i++) {
     unsigned short idx = (u[i].h << 8) + u[i].l;
-    if (idx != unicodetoupper(idx, langnum)) {
-      u[i].h = (unsigned char)(unicodetoupper(idx, langnum) >> 8);
-      u[i].l = (unsigned char)(unicodetoupper(idx, langnum) & 0x00FF);
+    unsigned short upridx = unicodetoupper(idx, langnum);
+    if (idx != upridx) {
+      u[i].h = (unsigned char)(upridx >> 8);
+      u[i].l = (unsigned char)(upridx & 0x00FF);
     }
   }
   return u;
@@ -583,9 +587,10 @@ std::string& mkinitcap(std::string& s, const struct cs_info* csconv) {
 std::vector<w_char>& mkinitcap_utf(std::vector<w_char>& u, int langnum) {
   if (!u.empty()) {
     unsigned short idx = (u[0].h << 8) + u[0].l;
-    if (idx != unicodetoupper(idx, langnum)) {
-      u[0].h = (unsigned char)(unicodetoupper(idx, langnum) >> 8);
-      u[0].l = (unsigned char)(unicodetoupper(idx, langnum) & 0x00FF);
+    unsigned short upridx = unicodetoupper(idx, langnum);
+    if (idx != upridx) {
+      u[0].h = (unsigned char)(upridx >> 8);
+      u[0].l = (unsigned char)(upridx & 0x00FF);
     }
   }
   return u;
@@ -601,9 +606,10 @@ std::string& mkinitsmall(std::string& s, const struct cs_info* csconv) {
 std::vector<w_char>& mkinitsmall_utf(std::vector<w_char>& u, int langnum) {
   if (!u.empty()) {
     unsigned short idx = (u[0].h << 8) + u[0].l;
-    if (idx != unicodetolower(idx, langnum)) {
-      u[0].h = (unsigned char)(unicodetolower(idx, langnum) >> 8);
-      u[0].l = (unsigned char)(unicodetolower(idx, langnum) & 0x00FF);
+    unsigned short lwridx = unicodetolower(idx, langnum);
+    if (idx != lwridx) {
+      u[0].h = (unsigned char)(lwridx >> 8);
+      u[0].l = (unsigned char)(lwridx & 0x00FF);
     }
   }
   return u;
@@ -2533,9 +2539,10 @@ int get_captype_utf8(const std::vector<w_char>& word, int langnum) {
   size_t firstcap = 0;
   for (size_t i = 0; i < word.size(); ++i) {
     unsigned short idx = (word[i].h << 8) + word[i].l;
-    if (idx != unicodetolower(idx, langnum))
+    unsigned short lwridx = unicodetolower(idx, langnum);
+    if (idx != lwridx)
       ncap++;
-    if (unicodetoupper(idx, langnum) == unicodetolower(idx, langnum))
+    if (unicodetoupper(idx, langnum) == lwridx)
       nneutral++;
   }
   if (ncap) {
-- 
2.9.3

