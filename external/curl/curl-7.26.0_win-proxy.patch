--- curl-7.26.0/lib/Makefile.vc10
+++ misc/build/curl-7.26.0/lib/Makefile.vc10
@@ -116,7 +116,7 @@ LFLAGS     = /nologo /machine:$(MACHINE)
 SSLLIBS      = libeay32.lib ssleay32.lib
 ZLIBLIBSDLL  = zdll.lib
 ZLIBLIBS     = zlib.lib
-WINLIBS      = ws2_32.lib wldap32.lib advapi32.lib
+WINLIBS      = ws2_32.lib wldap32.lib advapi32.lib winhttp.lib
 CFLAGS       = $(CFLAGS) $(EXCFLAGS)
 
 CFGSET       = FALSE
--- curl-7.26.0/lib/url.c
+++ misc/build/curl-7.26.0/lib/url.c
@@ -80,6 +80,10 @@ void idn_free (void *ptr);
 int curl_win32_idn_to_ascii(const char *in, char **out);
 #endif  /* USE_LIBIDN */
 
+#ifdef _WIN32
+#include <WinHttp.h>
+#endif
+
 #include "urldata.h"
 #include "netrc.h"
 
@@ -4111,6 +4115,21 @@ static bool check_noproxy(const char* name, const char* no_proxy)
   return FALSE;
 }
 
+#ifdef _WIN32
+static char* wstrToCstr( LPWSTR wStr )
+{
+  int bufSize;
+  char* out = NULL;
+  if(wStr != NULL) {
+    bufSize = WideCharToMultiByte(
+      CP_ACP,  0, wStr, -1, NULL, 0, NULL, NULL );
+    out = ( char* )malloc( bufSize * sizeof(char));
+    WideCharToMultiByte( CP_ACP, 0, wStr, -1, out, bufSize, NULL, NULL );
+  }
+  return out;
+}
+#endif
+
 /****************************************************************
 * Detect what (if any) proxy to use. Remember that this selects a host
 * name and is not limited to HTTP proxies only.
@@ -4119,6 +4138,7 @@ static bool check_noproxy(const char* name, const char* no_proxy)
 static char *detect_proxy(struct connectdata *conn)
 {
   char *proxy = NULL;
+  char *no_proxy=NULL;
 
 #ifndef CURL_DISABLE_HTTP
   /* If proxy was not specified, we check for default proxy environment
@@ -4138,7 +4158,63 @@ static char *detect_proxy(struct connectdata *conn)
    * For compatibility, the all-uppercase versions of these variables are
    * checked if the lowercase versions don't exist.
    */
-  char *no_proxy=NULL;
+#ifdef _WIN32
+  WINHTTP_CURRENT_USER_IE_PROXY_CONFIG *ieProxyConfig;
+  ieProxyConfig = (WINHTTP_CURRENT_USER_IE_PROXY_CONFIG*)
+    malloc(sizeof(WINHTTP_CURRENT_USER_IE_PROXY_CONFIG));
+  if(WinHttpGetIEProxyConfigForCurrentUser(ieProxyConfig)) {
+    if(!ieProxyConfig->fAutoDetect) {
+      char *ieProxy;
+      char *ieNoProxy;
+      char* pos;
+
+      ieProxy = wstrToCstr(ieProxyConfig->lpszProxy);
+      ieNoProxy = wstrToCstr(ieProxyConfig->lpszProxyBypass);
+
+      /* Convert the ieNoProxy into a proper no_proxy value */
+      if(NULL != ieNoProxy) {
+        no_proxy = strdup(ieNoProxy);
+        pos = strpbrk(no_proxy, "; ");
+        while(NULL != pos) {
+          no_proxy[pos-no_proxy] = ',';
+          pos = strpbrk(no_proxy, "; ");
+        }
+      }
+
+      if(!check_noproxy(conn->host.name, no_proxy)) {
+        /* Look for the http proxy setting */
+        char* tok;
+
+        if(NULL != ieProxy) {
+          tok = strtok(ieProxy, ";");
+          if(strchr(tok, '=') == NULL) {
+            proxy = strdup(ieProxy);
+          }
+          else {
+            do {
+              if(strncmp(tok, "http=", 5) == 0) {
+                /* We found HTTP proxy value, then use it */
+                proxy = strdup( tok + 5 );
+              }
+              tok = strtok(NULL, ";");
+            }
+            while(NULL != tok);
+          }
+        }
+      }
+
+      free(ieProxy);
+      free(ieNoProxy);
+    }
+    else {
+      /* TODO Handle the Proxy config Auto Detection case */
+    }
+
+    GlobalFree( ieProxyConfig->lpszAutoConfigUrl );
+    GlobalFree( ieProxyConfig->lpszProxy );
+    GlobalFree( ieProxyConfig->lpszProxyBypass );
+  }
+#else /* !WIN32 */
   char proxy_env[128];
 
   no_proxy=curl_getenv("no_proxy");
@@ -4189,6 +4265,7 @@ static char *detect_proxy(struct connectdata *conn)
     }
   } /* if(!check_noproxy(conn->host.name, no_proxy)) - it wasn't specified
        non-proxy */
+#endif /* WIN32 */
   free(no_proxy);
 
 #else /* !CURL_DISABLE_HTTP */
