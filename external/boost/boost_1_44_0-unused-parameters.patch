--- misc/boost_1_44_0/boost/bind/bind.hpp	2009-11-30 21:30:22.000000000 +0100
+++ misc/build/boost_1_44_0/boost/bind/bind.hpp	2012-01-20 12:44:07.111316403 +0100
@@ -143,7 +143,7 @@
 
 template<class F> struct unwrapper
 {
-    static inline F & unwrap( F & f, long )
+    static inline F & unwrap( F & f, __attribute__ ((unused)) long )
     {
         return f;
     }
@@ -226,7 +226,7 @@
 
     A1 operator[] (boost::arg<1>) const { return base_type::a1_; }
 
-    A1 operator[] (boost::arg<1> (*) ()) const { return base_type::a1_; }
+    A1 operator[] (__attribute__ ((unused)) boost::arg<1> (*) ()) const { return base_type::a1_; }
 
     template<class T> T & operator[] ( _bi::value<T> & v ) const { return v.get(); }
 
@@ -238,22 +238,22 @@
 
     template<class R, class F, class L> typename result_traits<R, F>::type operator[] (bind_t<R, F, L> const & b) const { return b.eval(*this); }
 
-    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, long)
+    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, __attribute__ ((unused)) long)
     {
         return unwrapper<F>::unwrap(f, 0)(a[base_type::a1_]);
     }
 
-    template<class R, class F, class A> R operator()(type<R>, F const & f, A & a, long) const
+    template<class R, class F, class A> R operator()(type<R>, F const & f, A & a, __attribute__ ((unused)) long) const
     {
         return unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F & f, A & a, int)
+    template<class F, class A> void operator()(type<void>, F & f, A & a, __attribute__ ((unused)) int)
     {
         unwrapper<F>::unwrap(f, 0)(a[base_type::a1_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F const & f, A & a, int) const
+    template<class F, class A> void operator()(type<void>, F const & f, A & a, __attribute__ ((unused)) int) const
     {
         unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_]);
     }
@@ -285,8 +285,8 @@
     A1 operator[] (boost::arg<1>) const { return base_type::a1_; }
     A2 operator[] (boost::arg<2>) const { return base_type::a2_; }
 
-    A1 operator[] (boost::arg<1> (*) ()) const { return base_type::a1_; }
-    A2 operator[] (boost::arg<2> (*) ()) const { return base_type::a2_; }
+    A1 operator[] (__attribute__ ((unused)) boost::arg<1> (*) ()) const { return base_type::a1_; }
+    A2 operator[] (__attribute__ ((unused)) boost::arg<2> (*) ()) const { return base_type::a2_; }
 
     template<class T> T & operator[] (_bi::value<T> & v) const { return v.get(); }
 
@@ -298,22 +298,22 @@
 
     template<class R, class F, class L> typename result_traits<R, F>::type operator[] (bind_t<R, F, L> const & b) const { return b.eval(*this); }
 
-    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, long)
+    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, __attribute__ ((unused)) long)
     {
         return unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_]);
     }
 
-    template<class R, class F, class A> R operator()(type<R>, F const & f, A & a, long) const
+    template<class R, class F, class A> R operator()(type<R>, F const & f, A & a, __attribute__ ((unused)) long) const
     {
         return unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F & f, A & a, int)
+    template<class F, class A> void operator()(type<void>, F & f, A & a, __attribute__ ((unused)) int)
     {
         unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F const & f, A & a, int) const
+    template<class F, class A> void operator()(type<void>, F const & f, A & a, __attribute__ ((unused)) int) const
     {
         unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_]);
     }
@@ -377,7 +377,7 @@
 
     template<class R, class F, class L> typename result_traits<R, F>::type operator[] (bind_t<R, F, L> const & b) const { return b.eval(*this); }
 
-    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, long)
+    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, __attribute__ ((unused)) long)
     {
         return unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_]);
     }
@@ -387,12 +387,12 @@
         return unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F & f, A & a, int)
+    template<class F, class A> void operator()(type<void>, F & f, A & a, __attribute__ ((unused)) int)
     {
         unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F const & f, A & a, int) const
+    template<class F, class A> void operator()(type<void>, F const & f, A & a, __attribute__ ((unused)) int) const
     {
         unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_]);
     }
@@ -427,10 +427,10 @@
     A3 operator[] (boost::arg<3>) const { return base_type::a3_; }
     A4 operator[] (boost::arg<4>) const { return base_type::a4_; }
 
-    A1 operator[] (boost::arg<1> (*) ()) const { return base_type::a1_; }
-    A2 operator[] (boost::arg<2> (*) ()) const { return base_type::a2_; }
-    A3 operator[] (boost::arg<3> (*) ()) const { return base_type::a3_; }
-    A4 operator[] (boost::arg<4> (*) ()) const { return base_type::a4_; }
+    A1 operator[] (__attribute__ ((unused)) boost::arg<1> (*) ()) const { return base_type::a1_; }
+    A2 operator[] (__attribute__ ((unused)) boost::arg<2> (*) ()) const { return base_type::a2_; }
+    A3 operator[] (__attribute__ ((unused)) boost::arg<3> (*) ()) const { return base_type::a3_; }
+    A4 operator[] (__attribute__ ((unused)) boost::arg<4> (*) ()) const { return base_type::a4_; }
 
     template<class T> T & operator[] (_bi::value<T> & v) const { return v.get(); }
 
@@ -442,7 +442,7 @@
 
     template<class R, class F, class L> typename result_traits<R, F>::type operator[] (bind_t<R, F, L> const & b) const { return b.eval(*this); }
 
-    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, long)
+    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, __attribute__ ((unused)) long)
     {
         return unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_], a[base_type::a4_]);
     }
@@ -452,7 +452,7 @@
         return unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_], a[base_type::a4_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F & f, A & a, int)
+    template<class F, class A> void operator()(type<void>, F & f, A & a, __attribute__ ((unused)) int)
     {
         unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_], a[base_type::a4_]);
     }
@@ -510,7 +510,7 @@
 
     template<class R, class F, class L> typename result_traits<R, F>::type operator[] (bind_t<R, F, L> const & b) const { return b.eval(*this); }
 
-    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, long)
+    template<class R, class F, class A> R operator()(type<R>, F & f, A & a, __attribute__ ((unused)) long)
     {
         return unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_], a[base_type::a4_], a[base_type::a5_]);
     }
@@ -520,7 +520,7 @@
         return unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_], a[base_type::a4_], a[base_type::a5_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F & f, A & a, int)
+    template<class F, class A> void operator()(type<void>, F & f, A & a, __attribute__ ((unused)) int)
     {
         unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_], a[base_type::a4_], a[base_type::a5_]);
     }
@@ -591,7 +591,7 @@
         return unwrapper<F const>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_], a[base_type::a4_], a[base_type::a5_], a[base_type::a6_]);
     }
 
-    template<class F, class A> void operator()(type<void>, F & f, A & a, int)
+    template<class F, class A> void operator()(type<void>, F & f, A & a, __attribute__ ((unused)) int)
     {
         unwrapper<F>::unwrap(f, 0)(a[base_type::a1_], a[base_type::a2_], a[base_type::a3_], a[base_type::a4_], a[base_type::a5_], a[base_type::a6_]);
     }
--- misc/boost_1_44_0/boost/bind/mem_fn.hpp	2009-03-02 17:15:40.000000000 +0100
+++ misc/build/boost_1_44_0/boost/bind/mem_fn.hpp	2012-01-20 12:44:07.112316398 +0100
@@ -328,7 +328,7 @@
         return (u.*f_);
     }
 
-    template<class U> R const & call(U & u, void const *) const
+    template<class U> R const & call(U & u, __attribute__ ((unused)) void const *) const
     {
         return (get_pointer(u)->*f_);
     }
--- misc/boost_1_44_0/boost/bind/mem_fn_template.hpp	2009-12-03 18:44:37.000000000 +0100
+++ misc/build/boost_1_44_0/boost/bind/mem_fn_template.hpp	2012-01-20 12:44:07.112316398 +0100
@@ -35,7 +35,7 @@
         BOOST_MEM_FN_RETURN (u.*f_)();
     }
 
-    template<class U> R call(U & u, void const *) const
+    template<class U> R call(U & u, __attribute__ ((unused)) void const *) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
     }
@@ -100,7 +100,7 @@
         BOOST_MEM_FN_RETURN (u.*f_)();
     }
 
-    template<class U> R call(U & u, void const *) const
+    template<class U> R call(U & u, __attribute__ ((unused)) void const *) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)();
     }
@@ -146,12 +146,12 @@
     BOOST_MEM_FN_TYPEDEF(R (BOOST_MEM_FN_CC T::*F) (A1))
     F f_;
 
-    template<class U, class B1> R call(U & u, T const *, B1 & b1) const
+    template<class U, class B1> R call(U & u, __attribute__ ((unused)) T const *, B1 & b1) const
     {
         BOOST_MEM_FN_RETURN (u.*f_)(b1);
     }
 
-    template<class U, class B1> R call(U & u, void const *, B1 & b1) const
+    template<class U, class B1> R call(U & u, __attribute__ ((unused)) void const *, B1 & b1) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)(b1);
     }
@@ -217,7 +217,7 @@
         BOOST_MEM_FN_RETURN (u.*f_)(b1);
     }
 
-    template<class U, class B1> R call(U & u, void const *, B1 & b1) const
+    template<class U, class B1> R call(U & u, __attribute__ ((unused)) void const *, B1 & b1) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)(b1);
     }
@@ -266,7 +266,7 @@
         BOOST_MEM_FN_RETURN (u.*f_)(b1, b2);
     }
 
-    template<class U, class B1, class B2> R call(U & u, void const *, B1 & b1, B2 & b2) const
+    template<class U, class B1, class B2> R call(U & u, __attribute__ ((unused)) void const *, B1 & b1, B2 & b2) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)(b1, b2);
     }
@@ -330,7 +330,7 @@
         BOOST_MEM_FN_RETURN (u.*f_)(b1, b2);
     }
 
-    template<class U, class B1, class B2> R call(U & u, void const *, B1 & b1, B2 & b2) const
+    template<class U, class B1, class B2> R call(U & u, __attribute__ ((unused)) void const *, B1 & b1, B2 & b2) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)(b1, b2);
     }
@@ -379,7 +379,7 @@
         BOOST_MEM_FN_RETURN (u.*f_)(b1, b2, b3);
     }
 
-    template<class U, class B1, class B2, class B3> R call(U & u, void const *, B1 & b1, B2 & b2, B3 & b3) const
+    template<class U, class B1, class B2, class B3> R call(U & u, __attribute__ ((unused)) void const *, B1 & b1, B2 & b2, B3 & b3) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)(b1, b2, b3);
     }
@@ -492,7 +492,7 @@
         BOOST_MEM_FN_RETURN (u.*f_)(b1, b2, b3, b4);
     }
 
-    template<class U, class B1, class B2, class B3, class B4> R call(U & u, void const *, B1 & b1, B2 & b2, B3 & b3, B4 & b4) const
+    template<class U, class B1, class B2, class B3, class B4> R call(U & u, __attribute__ ((unused)) void const *, B1 & b1, B2 & b2, B3 & b3, B4 & b4) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)(b1, b2, b3, b4);
     }
@@ -556,7 +556,7 @@
         BOOST_MEM_FN_RETURN (u.*f_)(b1, b2, b3, b4);
     }
 
-    template<class U, class B1, class B2, class B3, class B4> R call(U & u, void const *, B1 & b1, B2 & b2, B3 & b3, B4 & b4) const
+    template<class U, class B1, class B2, class B3, class B4> R call(U & u, __attribute__ ((unused)) void const *, B1 & b1, B2 & b2, B3 & b3, B4 & b4) const
     {
         BOOST_MEM_FN_RETURN (get_pointer(u)->*f_)(b1, b2, b3, b4);
     }
--- misc/boost_1_44_0/boost/detail/dynamic_bitset.hpp	2008-10-21 20:13:59.000000000 +0200
+++ misc/build/boost_1_44_0/boost/detail/dynamic_bitset.hpp	2012-01-20 12:44:07.113316394 +0100
@@ -100,8 +100,8 @@
 
      template <typename Iterator>
      inline std::size_t do_count(Iterator first, std::size_t length,
-                                 int /*dummy param*/,
-                                 value_to_type<access_by_bytes>* )
+                                 __attribute__ ((unused)) int /*dummy param*/,
+                                 __attribute__ ((unused)) value_to_type<access_by_bytes>* )
      {
          std::size_t num = 0;
          if (length)
--- misc/boost_1_44_0/boost/foreach.hpp	2010-07-30 22:26:40.000000000 +0200
+++ misc/build/boost_1_44_0/boost/foreach.hpp	2012-01-20 12:44:07.114316390 +0100
@@ -610,7 +610,7 @@
 }
 
 template<typename T>
-inline auto_any<T *> contain(T &t, boost::mpl::false_ *) // lvalue
+inline auto_any<T *> contain(T &t, __attribute__ ((unused)) boost::mpl::false_ *) // lvalue
 {
     // Cannot seem to get sunpro to handle addressof() with array types.
     #if BOOST_WORKAROUND(__SUNPRO_CC, BOOST_TESTED_AT(0x570))
@@ -641,7 +641,7 @@
 
 template<typename T, typename C>
 inline auto_any<BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type>
-begin(auto_any_t col, type2type<T, C> *, boost::mpl::false_ *) // lvalue
+begin(auto_any_t col, __attribute__ ((unused)) type2type<T, C> *, __attribute__ ((unused)) boost::mpl::false_ *) // lvalue
 {
     typedef BOOST_DEDUCED_TYPENAME type2type<T, C>::type type;
     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iterator;
@@ -678,7 +678,7 @@
 
 template<typename T, typename C>
 inline auto_any<BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type>
-end(auto_any_t col, type2type<T, C> *, boost::mpl::false_ *) // lvalue
+end(auto_any_t col, __attribute__ ((unused)) type2type<T, C> *, __attribute__ ((unused)) boost::mpl::false_ *) // lvalue
 {
     typedef BOOST_DEDUCED_TYPENAME type2type<T, C>::type type;
     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iterator;
@@ -707,7 +707,7 @@
 // done
 //
 template<typename T, typename C>
-inline bool done(auto_any_t cur, auto_any_t end, type2type<T, C> *)
+inline bool done(auto_any_t cur, auto_any_t end, __attribute__ ((unused)) type2type<T, C> *)
 {
     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iter_t;
     return auto_any_cast<iter_t, boost::mpl::false_>(cur) == auto_any_cast<iter_t, boost::mpl::false_>(end);
@@ -725,7 +725,7 @@
 // next
 //
 template<typename T, typename C>
-inline void next(auto_any_t cur, type2type<T, C> *)
+inline void next(auto_any_t cur, __attribute__ ((unused)) type2type<T, C> *)
 {
     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iter_t;
     ++auto_any_cast<iter_t, boost::mpl::false_>(cur);
@@ -736,7 +736,7 @@
 //
 template<typename T, typename C>
 inline BOOST_DEDUCED_TYPENAME foreach_reference<T, C>::type
-deref(auto_any_t cur, type2type<T, C> *)
+deref(auto_any_t cur, __attribute__ ((unused)) type2type<T, C> *)
 {
     typedef BOOST_DEDUCED_TYPENAME foreach_iterator<T, C>::type iter_t;
     return *auto_any_cast<iter_t, boost::mpl::false_>(cur);
--- misc/boost_1_44_0/boost/function/function_template.hpp	2009-07-09 01:23:52.000000000 +0200
+++ misc/build/boost_1_44_0/boost/function/function_template.hpp	2012-01-20 15:29:25.217770399 +0100
@@ -711,7 +711,7 @@
     template<typename Functor>
     BOOST_FUNCTION_FUNCTION(Functor BOOST_FUNCTION_TARGET_FIX(const &) f
 #ifndef BOOST_NO_SFINAE
-                            ,typename enable_if_c<
+                            ,__attribute__ ((unused)) typename enable_if_c<
                             (boost::type_traits::ice_not<
                              (is_integral<Functor>::value)>::value),
                                         int>::type = 0
@@ -724,7 +724,7 @@
     template<typename Functor,typename Allocator>
     BOOST_FUNCTION_FUNCTION(Functor BOOST_FUNCTION_TARGET_FIX(const &) f, Allocator a
 #ifndef BOOST_NO_SFINAE
-                            ,typename enable_if_c<
+                            ,__attribute__ ((unused)) typename enable_if_c<
                             (boost::type_traits::ice_not<
                              (is_integral<Functor>::value)>::value),
                                         int>::type = 0
@@ -1055,7 +1055,7 @@
   template<typename Functor>
   function(Functor f
 #ifndef BOOST_NO_SFINAE
-           ,typename enable_if_c<
+           ,__attribute__ ((unused)) typename enable_if_c<
                             (boost::type_traits::ice_not<
                           (is_integral<Functor>::value)>::value),
                        int>::type = 0
@@ -1067,7 +1067,7 @@
   template<typename Functor,typename Allocator>
   function(Functor f, Allocator a
 #ifndef BOOST_NO_SFINAE
-           ,typename enable_if_c<
+           ,__attribute__ ((unused)) typename enable_if_c<
                             (boost::type_traits::ice_not<
                           (is_integral<Functor>::value)>::value),
                        int>::type = 0
--- misc/boost_1_44_0/boost/iterator/reverse_iterator.hpp	2004-08-12 19:13:07.000000000 +0200
+++ misc/build/boost_1_44_0/boost/iterator/reverse_iterator.hpp	2012-01-20 12:44:07.122316355 +0100
@@ -34,7 +34,7 @@
       template<class OtherIterator>
       reverse_iterator(
           reverse_iterator<OtherIterator> const& r
-          , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0
+          , __attribute__ ((unused)) typename enable_if_convertible<OtherIterator, Iterator>::type* = 0
           )
           : super_t(r.base())
       {}
--- misc/boost_1_44_0/boost/optional/optional.hpp	2012-01-20 15:24:32.364576113 +0100
+++ misc/build/boost_1_44_0/boost/optional/optional.hpp	2012-01-20 12:44:07.123316351 +0100
@@ -365,7 +365,7 @@
     // Converting constructions of optional<T> from optional<U> uses this function with
     // 'Expr' being of type 'U' and relying on a converting constructor of T from U.
     template<class Expr>
-    void construct ( Expr const& expr, void const* )
+    void construct ( Expr const& expr, __attribute__ ((unused)) void const* )
      {
        new (m_storage.address()) internal_type(expr) ;
        m_initialized = true ;
@@ -376,7 +376,7 @@
     // Converting assignments of optional<T> from optional<U> uses this function with
     // 'Expr' being of type 'U' and relying on a converting assignment of T from U.
     template<class Expr>
-    void assign_expr_to_initialized ( Expr const& expr, void const* )
+    void assign_expr_to_initialized ( Expr const& expr, __attribute__ ((unused)) void const* )
      {
        assign_value(expr, is_reference_predicate());
      }
@@ -846,12 +846,12 @@
 
 template<class T>
 inline
-bool operator == ( none_t , optional<T> const& y )
+bool operator == ( __attribute__ ((unused)) none_t , optional<T> const& y )
 { return equal_pointees(optional<T>() ,y); }
 
 template<class T>
 inline
-bool operator < ( none_t , optional<T> const& y )
+bool operator < ( __attribute__ ((unused)) none_t , optional<T> const& y )
 { return less_pointees(optional<T>() ,y); }
 
 template<class T>
--- misc/boost_1_44_0/boost/spirit/home/classic/actor/ref_const_ref_actor.hpp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/actor/ref_const_ref_actor.hpp	2012-01-20 12:44:07.124316347 +0100
@@ -63,8 +63,8 @@
 
         template<typename IteratorT>
             void operator()(
-            IteratorT const& /*first*/,
-            IteratorT const& /*last*/
+            __attribute__ ((unused)) IteratorT const& /*first*/,
+            __attribute__ ((unused)) IteratorT const& /*last*/
             ) const
         {
             this->act(ref,value_ref); // defined in ActionT
--- misc/boost_1_44_0/boost/spirit/home/classic/core/composite/no_actions.hpp
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/composite/no_actions.hpp
@@ -38,10 +38,10 @@
     template<typename ActorT, typename AttrT, typename IteratorT>
     void
     do_action(
-        ActorT const&       actor,
-        AttrT&              val,
-        IteratorT const&    first,
-        IteratorT const&    last) const
+        __attribute__ ((unused)) ActorT const&       actor,
+        __attribute__ ((unused)) AttrT&              val,
+        __attribute__ ((unused)) IteratorT const&    first,
+        __attribute__ ((unused)) IteratorT const&    last) const
     {}
 };
 
--- misc/boost_1_44_0/boost/spirit/home/classic/core/composite/impl/directives.ipp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/composite/impl/directives.ipp	2012-01-20 12:44:07.124316347 +0100
@@ -41,7 +41,7 @@
         contiguous_parser_parse(
             ST const& s,
             ScannerT const& scan,
-            skipper_iteration_policy<BaseT> const&)
+            __attribute__ ((unused)) skipper_iteration_policy<BaseT> const&)
         {
             typedef scanner_policies<
                 no_skipper_iteration_policy<
@@ -61,7 +61,7 @@
         contiguous_parser_parse(
             ST const& s,
             ScannerT const& scan,
-            no_skipper_iteration_policy<BaseT> const&)
+            __attribute__ ((unused)) no_skipper_iteration_policy<BaseT> const&)
         {
             return s.parse(scan);
         }
@@ -85,7 +85,7 @@
         implicit_lexeme_parse(
             ParserT const& p,
             ScannerT const& scan,
-            skipper_iteration_policy<BaseT> const&)
+            __attribute__ ((unused)) skipper_iteration_policy<BaseT> const&)
         {
             typedef scanner_policies<
                 no_skipper_iteration_policy<
@@ -129,7 +129,7 @@
         inhibit_case_parser_parse(
             ST const& s,
             ScannerT const& scan,
-            iteration_policy const&)
+            __attribute__ ((unused)) iteration_policy const&)
         {
             typedef scanner_policies<
                 inhibit_case_iteration_policy<
--- misc/boost_1_44_0/boost/spirit/home/classic/core/non_terminal/impl/grammar.ipp
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/non_terminal/impl/grammar.ipp
@@ -83,7 +83,7 @@
         {   // Does _not_ copy the helpers member !
         }
 
-        grammar_helper_list& operator=(grammar_helper_list const& x)
+        grammar_helper_list& operator=(__attribute__ ((unused)) grammar_helper_list const& x)
         {   // Does _not_ copy the helpers member !
             return *this;
         }
--- misc/boost_1_44_0/boost/spirit/home/classic/core/non_terminal/parser_context.hpp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/non_terminal/parser_context.hpp	2012-01-20 12:44:07.124316347 +0100
@@ -51,15 +51,15 @@
         typedef parser_context_linker<parser_context<AttrT> > context_linker_t;
 
         template <typename ParserT>
-        parser_context(ParserT const&) {}
+        parser_context(__attribute__ ((unused)) ParserT const&) {}
 
         template <typename ParserT, typename ScannerT>
         void
-        pre_parse(ParserT const&, ScannerT const&) {}
+        pre_parse(__attribute__ ((unused)) ParserT const&, __attribute__ ((unused)) ScannerT const&) {}
 
         template <typename ResultT, typename ParserT, typename ScannerT>
         ResultT&
-        post_parse(ResultT& hit, ParserT const&, ScannerT const&)
+        post_parse(ResultT& hit, __attribute__ ((unused)) ParserT const&, __attribute__ ((unused)) ScannerT const&)
         { return hit; }
     };
 
--- misc/boost_1_44_0/boost/spirit/home/classic/core/primitives/impl/numerics.ipp	2012-01-20 15:24:32.364576113 +0100
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/primitives/impl/numerics.ipp	2012-01-20 12:44:07.125316343 +0100
@@ -240,7 +240,7 @@
         }
 
         template <>
-        inline bool allow_more_digits<-1>(std::size_t)
+        inline bool allow_more_digits<-1>(__attribute__ ((unused)) std::size_t)
         {
             return true;
         }
--- misc/boost_1_44_0/boost/spirit/home/classic/core/primitives/primitives.hpp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/primitives/primitives.hpp	2012-01-20 12:44:07.125316343 +0100
@@ -316,7 +316,7 @@
         anychar_parser() {}
 
         template <typename CharT>
-        bool test(CharT) const
+        bool test(__attribute__ ((unused)) CharT) const
         {
             return true;
         }
--- misc/boost_1_44_0/boost/spirit/home/classic/core/scanner/impl/skipper.ipp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/scanner/impl/skipper.ipp	2012-01-20 12:44:07.125316343 +0100
@@ -122,7 +122,7 @@
                 IteratorT const&    first_,
                 IteratorT const&    last,
                 ParserT const&      p,
-                space_parser const&)
+                __attribute__ ((unused)) space_parser const&)
             {
                 typedef skipper_iteration_policy<> iter_policy_t;
                 typedef scanner_policies<iter_policy_t> scanner_policies_t;
--- misc/boost_1_44_0/boost/spirit/home/classic/core/scanner/scanner.hpp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/scanner/scanner.hpp	2012-01-20 12:44:07.126316338 +0100
@@ -82,18 +82,18 @@
         create_match(
             std::size_t         length,
             AttrT const&        val,
-            IteratorT const&    /*first*/,
-            IteratorT const&    /*last*/) const
+            __attribute__ ((unused)) IteratorT const&    /*first*/,
+            __attribute__ ((unused)) IteratorT const&    /*last*/) const
         {
             return match<AttrT>(length, val);
         }
 
         template <typename MatchT, typename IteratorT>
         void group_match(
-            MatchT&             /*m*/,
-            parser_id const&    /*id*/,
-            IteratorT const&    /*first*/,
-            IteratorT const&    /*last*/) const {}
+            __attribute__ ((unused)) MatchT&             /*m*/,
+            __attribute__ ((unused)) parser_id const&    /*id*/,
+            __attribute__ ((unused)) IteratorT const&    /*first*/,
+            __attribute__ ((unused)) IteratorT const&    /*last*/) const {}
 
         template <typename Match1T, typename Match2T>
         void concat_match(Match1T& l, Match2T const& r) const
@@ -126,8 +126,8 @@
         call(
             ActorT const& actor,
             AttrT& val,
-            IteratorT const&,
-            IteratorT const&)
+            __attribute__ ((unused)) IteratorT const&,
+            __attribute__ ((unused)) IteratorT const&)
         {
             actor(val);
         }
--- misc/boost_1_44_0/boost/spirit/home/classic/core/scanner/skipper.hpp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/scanner/skipper.hpp	2012-01-20 12:44:07.126316338 +0100
@@ -82,7 +82,7 @@
 
         template <typename ScannerT>
         void
-        skip(ScannerT const& /*scan*/) const {}
+        skip(__attribute__ ((unused)) ScannerT const& /*scan*/) const {}
     };
 
     ///////////////////////////////////////////////////////////////////////////
--- misc/boost_1_44_0/boost/spirit/home/classic/meta/impl/refactoring.ipp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/meta/impl/refactoring.ipp	2012-01-20 12:44:07.126316338 +0100
@@ -92,7 +92,7 @@
 
         template <typename ParserT, typename ScannerT, typename BinaryT>
         static typename parser_result<ParserT, ScannerT>::type
-        parse(ParserT const &, ScannerT const& scan, BinaryT const& binary)
+        parse(__attribute__ ((unused)) ParserT const &, ScannerT const& scan, BinaryT const& binary)
         {
             return binary.parse(scan);
         }
@@ -140,7 +140,7 @@
         template <typename ParserT, typename ScannerT, typename BinaryT>
         static typename parser_result<ParserT, ScannerT>::type
         parse(ParserT const &p, ScannerT const& scan, BinaryT const& binary,
-            non_nested_refactoring const&)
+            __attribute__ ((unused)) non_nested_refactoring const&)
         {
             typedef
                 typename BinaryT::left_t::parser_category_t
@@ -205,7 +205,7 @@
             typename NestedT
         >
         static typename parser_result<ParserT, ScannerT>::type
-        parse(ParserT const &, ScannerT const& scan, BinaryT const& binary,
+        parse(__attribute__ ((unused)) ParserT const &, ScannerT const& scan, BinaryT const& binary,
             NestedT const& nested_d)
         {
             typedef typename BinaryT::parser_generator_t binary_gen_t;
@@ -324,7 +324,7 @@
         >
         static typename parser_result<ParserT, ScannerT>::type
         parse(ParserT const &, ScannerT const& scan, ActionT const &action,
-            NestedT const& nested_d)
+            __attribute__ ((unused)) NestedT const& nested_d)
         {
             return action.parse(scan);
         }
--- misc/boost_1_44_0/boost/spirit/home/classic/utility/impl/chset.ipp
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/utility/impl/chset.ipp
@@ -129,7 +129,7 @@
 }
 
 template <typename CharT>
-inline chset<CharT>::chset(nothing_parser arg_)
+inline chset<CharT>::chset(__attribute__ ((unused)) nothing_parser arg_)
 : ptr(new basic_chset<CharT>()) {}
 
 template <typename CharT>
@@ -182,7 +182,7 @@
 
 template <typename CharT>
 inline chset<CharT>&
-chset<CharT>::operator=(anychar_parser rhs)
+chset<CharT>::operator=(__attribute__ ((unused)) anychar_parser rhs)
 {
     utility::impl::detach_clear(ptr);
     ptr->set(
@@ -194,7 +194,7 @@
 
 template <typename CharT>
 inline chset<CharT>&
-chset<CharT>::operator=(nothing_parser rhs)
+chset<CharT>::operator=(__attribute__ ((unused)) nothing_parser rhs)
 {
     utility::impl::detach_clear(ptr);
     return *this;
--- misc/boost_1_44_0/boost/spirit/home/classic/utility/impl/chset_operators.ipp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/utility/impl/chset_operators.ipp	2012-01-20 12:44:07.127316333 +0100
@@ -576,7 +576,7 @@
 //////////////////////////////////
 template <typename CharT>
 inline chset<CharT>
-operator-(anychar_parser, chset<CharT> const& b)
+operator-(__attribute__ ((unused)) anychar_parser, chset<CharT> const& b)
 {
     return ~b;
 }
--- misc/boost_1_44_0/boost/spirit/home/classic/utility/impl/lists.ipp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/utility/impl/lists.ipp	2012-01-20 12:44:07.127316333 +0100
@@ -64,8 +64,8 @@
             typename ItemT, typename DelimT
         >
         static typename parser_result<ParserT, ScannerT>::type
-        parse(ScannerT const& scan, ParserT const& /*p*/,
-            ItemT const &item, DelimT const &delim, no_list_endtoken const&)
+        parse(ScannerT const& scan, __attribute__ ((unused)) ParserT const& /*p*/,
+            ItemT const &item, DelimT const &delim, __attribute__ ((unused)) no_list_endtoken const&)
         {
             typedef refactor_action_gen<refactor_unary_gen<> > refactor_t;
             const refactor_t refactor_item_d = refactor_t(refactor_unary_d);
@@ -112,8 +112,8 @@
             typename ItemT, typename DelimT
         >
         static typename parser_result<ParserT, ScannerT>::type
-        parse(ScannerT const& scan, ParserT const& /*p*/,
-            ItemT const &item, DelimT const &delim, no_list_endtoken const&)
+        parse(ScannerT const& scan, __attribute__ ((unused)) ParserT const& /*p*/,
+            ItemT const &item, DelimT const &delim, __attribute__ ((unused)) no_list_endtoken const&)
         {
             return (
                     (item - delim)
--- misc/boost_1_44_0/boost/spirit/home/classic/phoenix/tuples.hpp
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/phoenix/tuples.hpp
@@ -211,7 +211,7 @@
     typedef nil_t& rtype;
     typedef nil_t const& crtype;
 
-    static nil_t    get(TupleT const& t)    { return nil_t(); }
+    static nil_t    get(__attribute__ ((unused)) TupleT const& t)    { return nil_t(); }
 };
 
 //////////////////////////////////
--- misc/boost_1_44_0/boost/throw_exception.hpp	2010-07-03 23:32:02.000000000 +0200
+++ misc/build/boost_1_44_0/boost/throw_exception.hpp	2012-01-20 12:44:07.127316333 +0100
@@ -49,7 +49,7 @@
 
 #else
 
-inline void throw_exception_assert_compatibility( std::exception const & ) { }
+inline void throw_exception_assert_compatibility( __attribute__ ((unused)) std::exception const & ) { }
 
 template<class E> BOOST_ATTRIBUTE_NORETURN inline void throw_exception( E const & e )
 {
--- misc/boost_1_44_0/boost/utility/addressof.hpp	2009-05-16 20:15:17.000000000 +0200
+++ misc/build/boost_1_44_0/boost/utility/addressof.hpp	2012-01-20 12:44:07.128316328 +0100
@@ -34,7 +34,7 @@
 
 template<class T> struct addressof_impl
 {
-    static inline T * f( T & v, long )
+    static inline T * f( T & v, __attribute__ ((unused)) long )
     {
         return reinterpret_cast<T*>(
             &const_cast<char&>(reinterpret_cast<const volatile char &>(v)));
--- misc/boost_1_44_0/boost/variant/detail/visitation_impl.hpp	2010-06-10 17:32:07.000000000 +0200
+++ misc/build/boost_1_44_0/boost/variant/detail/visitation_impl.hpp	2012-01-20 12:44:07.128316328 +0100
@@ -121,7 +121,7 @@
 inline
     BOOST_VARIANT_AUX_GENERIC_RESULT_TYPE(typename Visitor::result_type)
 visitation_impl_invoke_impl(
-      int, Visitor& visitor, VoidPtrCV storage, T*
+      int, Visitor& visitor, VoidPtrCV storage, __attribute__ ((unused)) T*
     , mpl::true_// never_uses_backup
     )
 {
@@ -158,7 +158,7 @@
 visitation_impl_invoke(
       int internal_which, Visitor& visitor, VoidPtrCV storage, T* t
     , NoBackupFlag
-    , int
+    , __attribute__ ((unused)) int
     )
 {
     typedef typename mpl::or_<
@@ -176,7 +176,7 @@
 template <typename Visitor, typename VoidPtrCV, typename NBF>
 inline
     BOOST_VARIANT_AUX_GENERIC_RESULT_TYPE(typename Visitor::result_type)
-visitation_impl_invoke(int, Visitor&, VoidPtrCV, apply_visitor_unrolled*, NBF, long)
+visitation_impl_invoke(__attribute__ ((unused)) int, __attribute__ ((unused)) Visitor&, VoidPtrCV, __attribute__ ((unused)) apply_visitor_unrolled*, NBF, __attribute__ ((unused)) long)
 {
     // should never be here at runtime:
     BOOST_ASSERT(false);
@@ -198,9 +198,9 @@
 inline
     BOOST_VARIANT_AUX_GENERIC_RESULT_TYPE(typename Visitor::result_type)
 visitation_impl(
-      int, int, Visitor&, VPCV
+      __attribute__ ((unused)) int, __attribute__ ((unused)) int, __attribute__ ((unused)) Visitor&, VPCV
     , mpl::true_ // is_apply_visitor_unrolled
-    , NBF, W* = 0, S* = 0
+    , NBF, __attribute__ ((unused)) W* = 0, __attribute__ ((unused)) S* = 0
     )
 {
     // should never be here at runtime:
@@ -221,7 +221,7 @@
     , Visitor& visitor, VoidPtrCV storage
     , mpl::false_ // is_apply_visitor_unrolled
     , NoBackupFlag no_backup_flag
-    , Which* = 0, step0* = 0
+    , __attribute__ ((unused)) Which* = 0, __attribute__ ((unused)) step0* = 0
     )
 {
     // Typedef apply_visitor_unrolled steps and associated types...
--- misc/boost_1_44_0/boost/variant/get.hpp	2005-08-25 18:27:28.000000000 +0200
+++ misc/build/boost_1_44_0/boost/variant/get.hpp	2012-01-20 12:44:07.129316324 +0100
@@ -85,7 +85,7 @@
     }
 
     template <typename U>
-    pointer operator()(const U&) const
+    pointer operator()(__attribute__ ((unused)) const U&) const
     {
         return static_cast<pointer>(0);
     }
--- misc/boost_1_44_0/boost/variant/variant.hpp	2010-06-10 17:32:07.000000000 +0200
+++ misc/build/boost_1_44_0/boost/variant/variant.hpp	2012-01-20 12:44:07.129316324 +0100
@@ -290,7 +290,7 @@
 
     template <typename T>
         BOOST_VARIANT_AUX_RETURN_VOID_TYPE
-    internal_visit(T& operand, int) const
+    internal_visit(T& operand, __attribute__ ((unused)) int) const
     {
         operand.~T();
 
@@ -404,7 +404,7 @@
 
     template <typename T>
         BOOST_VARIANT_AUX_RETURN_VOID_TYPE
-    internal_visit(const T& operand, int) const
+    internal_visit(const T& operand, __attribute__ ((unused)) int) const
     {
         new(storage_) T(operand);
         BOOST_VARIANT_AUX_RETURN_VOID;
@@ -454,7 +454,7 @@
 
     template <typename T>
         BOOST_VARIANT_AUX_RETURN_VOID_TYPE
-    internal_visit(T& lhs_content, int) const
+    internal_visit(T& lhs_content, __attribute__ ((unused)) int) const
     {
         // NOTE TO USER :
         // Compile error here indicates one of variant's bounded types does
@@ -502,7 +502,7 @@
     }
 
     template <typename U>
-    bool operator()(U&) BOOST_NOEXCEPT
+    bool operator()(__attribute__ ((unused)) U&) BOOST_NOEXCEPT
     {
         return false;
     }
@@ -827,7 +827,7 @@
 public: // internal visitor interfaces
 
     template <typename T>
-    result_type internal_visit(T& operand, int)
+    result_type internal_visit(T& operand, __attribute__ ((unused)) int)
     {
         return visitor_(operand);
     }
@@ -1225,7 +1225,7 @@
     public: // internal visitor interfaces (below)
 
         template <typename T>
-        int internal_visit(T& operand, int) const
+        int internal_visit(T& operand, __attribute__ ((unused)) int) const
         {
             // NOTE TO USER :
             // Compile error here indicates one of the source variant's types 
@@ -1288,7 +1288,7 @@
     template <typename T>
     void convert_construct(
           T& operand
-        , int
+        , __attribute__ ((unused)) int
         , mpl::false_ = mpl::false_() // is_foreign_variant
         )
     {
@@ -1308,7 +1308,7 @@
     template <typename Variant>
     void convert_construct(
           Variant& operand
-        , long
+        , __attribute__ ((unused)) long
         , mpl::true_// is_foreign_variant
         )
     {
@@ -1348,7 +1348,7 @@
     template <BOOST_VARIANT_ENUM_PARAMS(typename U)>
     void convert_construct(
           boost::variant<BOOST_VARIANT_ENUM_PARAMS(U)>& operand
-        , long
+        , __attribute__ ((unused)) long
         )
     {
         convert_construct_variant(operand);
@@ -1553,7 +1553,7 @@
 
         template <typename RhsT>
             BOOST_VARIANT_AUX_RETURN_VOID_TYPE
-        internal_visit(const RhsT& rhs_content, int)
+        internal_visit(const RhsT& rhs_content, __attribute__ ((unused)) int)
         {
             typedef typename has_nothrow_copy<RhsT>::type
                 nothrow_copy;
--- misc/boost_1_44_0/boost/ptr_container/detail/default_deleter.hpp
+++ misc/build/boost_1_44_0/boost/ptr_container/detail/default_deleter.hpp
@@ -61,7 +61,7 @@
 { 
     default_deleter() { }
     template<typename TT>
-    default_deleter(default_deleter<TT> tt) { }
+    default_deleter(__attribute__ ((unused)) default_deleter<TT> tt) { }
 };
 
 } } } // End namespaces ptr_container_detail, move_ptrs, boost.
--- misc/boost_1_44_0/boost/ptr_container/ptr_sequence_adapter.hpp
+++ misc/build/boost_1_44_0/boost/ptr_container/ptr_sequence_adapter.hpp
@@ -664,8 +664,8 @@
             
         }
 
-        void range_check_impl( iterator first, iterator last, 
-                               std::bidirectional_iterator_tag )
+        void range_check_impl( __attribute__ ((unused)) iterator first, __attribute__ ((unused)) iterator last, 
+                               std::bidirectional_iterator_tag )
         { /* do nothing */ }
 
         void range_check_impl( iterator first, iterator last,
