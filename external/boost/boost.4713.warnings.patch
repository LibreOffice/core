--- misc/boost_1_44_0/boost/date_time/date_names_put.hpp	2008-02-27 21:00:24.000000000 +0100
+++ misc/build/boost_1_44_0/boost/date_time/date_names_put.hpp	2011-10-05 16:58:58.413575307 +0200
@@ -218,14 +218,14 @@
                          const charT* const weekday_long_names[],
                          charT separator_char = '-',
                          ymd_order_spec order_spec = ymd_order_iso,
-                         month_format_spec month_format = month_as_short_string) :
+                         month_format_spec month_format_ = month_as_short_string) :
         month_short_names_(month_short_names),
         month_long_names_(month_long_names),
         special_value_names_(special_value_names),
         weekday_short_names_(weekday_short_names),
         weekday_long_names_(weekday_long_names),
         order_spec_(order_spec),
-        month_format_spec_(month_format)
+        month_format_spec_(month_format_)
       {
         separator_char_[0] = separator_char;
         separator_char_[1] = '\0';
--- misc/boost_1_44_0/boost/ptr_container/detail/map_iterator.hpp	2008-06-24 22:37:35.000000000 +0200
+++ misc/build/boost_1_44_0/boost/ptr_container/detail/map_iterator.hpp	2011-02-04 16:39:19.000000000 +0100
@@ -49,7 +49,7 @@
             : first(rp->first), second(rp->second)
             { }
             
-            const ref_pair* const operator->() const
+            const ref_pair* operator->() const
             {
                 return this;
             }
--- misc/boost_1_44_0/boost/ptr_container/ptr_map_adapter.hpp	2008-06-24 22:37:35.000000000 +0200
+++ misc/build/boost_1_44_0/boost/ptr_container/ptr_map_adapter.hpp	2011-02-04 16:39:19.000000000 +0100
@@ -477,6 +477,7 @@
         }
                 
         ptr_map_adapter( const ptr_map_adapter& r )
+          : base_type()
         {
             map_basic_clone_and_insert( r.begin(), r.end() );      
         }
--- misc/boost_1_44_0/boost/ptr_container/ptr_sequence_adapter.hpp	2009-11-01 12:07:12.000000000 +0100
+++ misc/build/boost_1_44_0/boost/ptr_container/ptr_sequence_adapter.hpp	2011-02-04 16:39:19.000000000 +0100
@@ -476,19 +476,19 @@
     public: // C-array support
     
         void transfer( iterator before, value_type* from, 
-                       size_type size, bool delete_from = true ) // strong 
+                       size_type size_, bool delete_from = true ) // strong 
         {
             BOOST_ASSERT( from != 0 );
             if( delete_from )
             {
                 BOOST_DEDUCED_TYPENAME base_type::scoped_deleter 
-                    deleter( from, size );                                // nothrow
-                this->base().insert( before.base(), from, from + size );  // strong
+                    deleter( from, size_ );                                // nothrow
+                this->base().insert( before.base(), from, from + size_ );  // strong
                 deleter.release();                                        // nothrow
             }
             else
             {
-                this->base().insert( before.base(), from, from + size ); // strong
+                this->base().insert( before.base(), from, from + size_ ); // strong
             }
         }
 
@@ -671,6 +671,7 @@
         void range_check_impl( iterator first, iterator last,
                                std::random_access_iterator_tag )
         {
+            (void)first; (void)last;
             BOOST_ASSERT( first <= last && "out of range unique()/erase_if()" );
             BOOST_ASSERT( this->begin() <= first && "out of range unique()/erase_if()" );
             BOOST_ASSERT( last <= this->end() && "out of range unique()/erase_if)(" );             
--- misc/boost_1_44_0/boost/spirit/home/classic/symbols/symbols.hpp	2008-06-22 17:05:38.000000000 +0200
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/symbols/symbols.hpp	2011-02-04 16:39:19.000000000 +0100
@@ -102,13 +102,13 @@
     {
         typedef typename ScannerT::iterator_t iterator_t;
         iterator_t first = scan.first;
-        typename SetT::search_info result = SetT::find(scan);
+        typename SetT::search_info result_ = SetT::find(scan);
 
-        if (result.data)
+        if (result_.data)
             return scan.
                 create_match(
-                    result.length,
-                    symbol_ref_t(*result.data),
+                    result_.length,
+                    symbol_ref_t(*result_.data),
                     first,
                     scan.first);
         else
--- misc/boost_1_44_0/boost/ptr_container/exception.hpp	2011-02-05 09:42:56.074932485 +0000
+++ misc/build/boost_1_44_0/boost/ptr_container/exception.hpp	2011-02-05 09:43:00.350931536 +0000
@@ -24,7 +24,7 @@
     {
         const char* what_;
     public:
-        bad_ptr_container_operation( const char* what ) : what_( what )
+        bad_ptr_container_operation( const char* _what ) : what_( _what )
         { }
         
         virtual const char* what() const throw()
@@ -38,7 +38,7 @@
     class bad_index : public bad_ptr_container_operation
     {
     public:
-        bad_index( const char* what ) : bad_ptr_container_operation( what )
+        bad_index( const char* _what ) : bad_ptr_container_operation( _what )
         { }
     };
 
--- misc/boost_1_44_0/boost/ptr_container/detail/reversible_ptr_container.hpp	2011-02-05 09:49:30.373931807 +0000
+++ misc/build/boost_1_44_0/boost/ptr_container/detail/reversible_ptr_container.hpp	2011-02-05 09:49:34.804931932 +0000
@@ -278,9 +278,9 @@
 
     private:
         template< class ForwardIterator >
-        ForwardIterator advance( ForwardIterator begin, size_type n ) 
+        ForwardIterator advance( ForwardIterator begin_, size_type n ) 
         {
-            ForwardIterator iter = begin;
+            ForwardIterator iter = begin_;
             std::advance( iter, n );
             return iter;
         }        
--- misc/boost_1_44_0/boost/ptr_container/detail/static_move_ptr.hpp	2011-02-05 09:55:44.846931338 +0000
+++ misc/build/boost_1_44_0/boost/ptr_container/detail/static_move_ptr.hpp	2011-02-05 09:56:42.760931701 +0000
@@ -151,7 +151,7 @@
     deleter_const_reference get_deleter() const { return impl_.second(); }
 private:
     template<typename TT, typename DD>
-    void check(const static_move_ptr<TT, DD>& ptr)
+    void check(const static_move_ptr<TT, DD>&)
         {
             typedef move_ptrs::is_smart_ptr_convertible<TT, T> convertible;
             BOOST_STATIC_ASSERT(convertible::value);
--- misc/boost_1_44_0/boost/ptr_container/detail/move.hpp	2011-02-05 10:01:21.156931884 +0000
+++ misc/build/boost_1_44_0/boost/ptr_container/detail/move.hpp	2011-02-05 10:01:14.160931007 +0000
@@ -20,7 +20,7 @@
 template<typename Ptr>
 class move_source {
 public:
-    move_source(Ptr& ptr) : ptr_(ptr) {}
+    move_source(Ptr& _ptr) : ptr_(_ptr) {}
     Ptr& ptr() const { return ptr_; }
 private:
     Ptr& ptr_;
--- misc/boost_1_44_0/boost/spirit/home/classic/core/non_terminal/subrule.hpp	2011-02-08 09:24:50.817320629 +0000
+++ misc/build/boost_1_44_0/boost/spirit/home/classic/core/non_terminal/subrule.hpp	2011-02-08 09:25:20.496639901 +0000
@@ -210,7 +210,7 @@
             subrule_list<
                 subrule_parser<ID2, DefT2, ContextT2>,
                 nil_t> >
-        operator,(subrule_parser<ID2, DefT2, ContextT2> const& rhs) const
+        operator,(subrule_parser<ID2, DefT2, ContextT2> const& rhs_) const
         {
             return subrule_list<
                 self_t,
@@ -220,7 +220,7 @@
                         *this,
                         subrule_list<
                             subrule_parser<ID2, DefT2, ContextT2>, nil_t>(
-                                rhs, nil_t()));
+                                rhs_, nil_t()));
         }
 
         typename DefT::embed_t rhs;
--- misc/boost_1_44_0/boost/ptr_container/ptr_sequence_adapter.hpp	2011-02-09 08:49:00.416529470 +0000
+++ misc/build/boost_1_44_0/boost/ptr_container/ptr_sequence_adapter.hpp	2011-02-09 08:50:44.607653864 +0000
@@ -510,72 +510,72 @@
 
     public: // resize
 
-        void resize( size_type size ) // basic
+        void resize( size_type size_ ) // basic
         {
             size_type old_size = this->size();
-            if( old_size > size )
+            if( old_size > size_ )
             {
-                this->erase( boost::next( this->begin(), size ), this->end() );  
+                this->erase( boost::next( this->begin(), size_ ), this->end() );  
             }
-            else if( size > old_size )
+            else if( size_ > old_size )
             {
-                for( ; old_size != size; ++old_size )
+                for( ; old_size != size_; ++old_size )
                     this->push_back( new BOOST_DEDUCED_TYPENAME 
                                      boost::remove_pointer<value_type>::type() ); 
             }
 
-            BOOST_ASSERT( this->size() == size );
+            BOOST_ASSERT( this->size() == size_ );
         }
 
-        void resize( size_type size, value_type to_clone ) // basic
+        void resize( size_type size_, value_type to_clone ) // basic
         {
             size_type old_size = this->size();
-            if( old_size > size )
+            if( old_size > size_ )
             {
-                this->erase( boost::next( this->begin(), size ), this->end() );  
+                this->erase( boost::next( this->begin(), size_ ), this->end() );  
             }
-            else if( size > old_size )
+            else if( size_ > old_size )
             {
-                for( ; old_size != size; ++old_size )
+                for( ; old_size != size_; ++old_size )
                     this->push_back( this->null_policy_allocate_clone( to_clone ) ); 
             }
 
-            BOOST_ASSERT( this->size() == size );        
+            BOOST_ASSERT( this->size() == size_ );        
         }
 
-        void rresize( size_type size ) // basic
+        void rresize( size_type size_ ) // basic
         {
             size_type old_size = this->size();
-            if( old_size > size )
+            if( old_size > size_ )
             {
                 this->erase( this->begin(), 
-                             boost::next( this->begin(), old_size - size ) );  
+                             boost::next( this->begin(), old_size - size_ ) );  
             }
-            else if( size > old_size )
+            else if( size_ > old_size )
             {
-                for( ; old_size != size; ++old_size )
+                for( ; old_size != size_; ++old_size )
                     this->push_front( new BOOST_DEDUCED_TYPENAME 
                                       boost::remove_pointer<value_type>::type() ); 
             }
 
-            BOOST_ASSERT( this->size() == size );
+            BOOST_ASSERT( this->size() == size_ );
         }
 
-        void rresize( size_type size, value_type to_clone ) // basic
+        void rresize( size_type size_, value_type to_clone ) // basic
         {
             size_type old_size = this->size();
-            if( old_size > size )
+            if( old_size > size_ )
             {
                 this->erase( this->begin(), 
-                             boost::next( this->begin(), old_size - size ) );  
+                             boost::next( this->begin(), old_size - size_ ) );  
             }
-            else if( size > old_size )
+            else if( size_ > old_size )
             {
-                for( ; old_size != size; ++old_size )
+                for( ; old_size != size_; ++old_size )
                     this->push_front( this->null_policy_allocate_clone( to_clone ) ); 
             }
 
-            BOOST_ASSERT( this->size() == size );
+            BOOST_ASSERT( this->size() == size_ );
         }           
                 
     public: // algorithms
--- misc/boost_1_44_0/boost/ptr_container/detail/reversible_ptr_container.hpp	2011-03-04 11:33:36.269274940 +0000
+++ misc/build/boost_1_44_0/boost/ptr_container/detail/reversible_ptr_container.hpp	2011-03-04 11:33:36.269274940 +0000
@@ -259,6 +259,10 @@
 
         static void enforce_null_policy( const Ty_* x, const char* msg )
         {
+#ifdef BOOST_PTR_CONTAINER_NO_EXCEPTIONS
+            (void)x;
+            (void)msg;
+#endif
             if( !allow_null )
             {
                 BOOST_PTR_CONTAINER_THROW_EXCEPTION( 0 == x && "null not allowed", 
