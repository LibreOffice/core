disable freetype dependent code

--- poppler/poppler/Form.cc.orig	2022-09-14 15:46:48.588316681 +0200
+++ poppler/poppler/Form.cc	2022-09-14 15:48:01.468274551 +0200
@@ -46,7 +46,7 @@
 #include <cstdlib>
 #include <cstring>
 #include <cctype>
-#include "goo/ft_utils.h"
+//#include "goo/ft_utils.h"
 #include "goo/gmem.h"
 #include "goo/gfile.h"
 #include "goo/GooString.h"
@@ -77,8 +77,8 @@
 #include "fofi/FoFiTrueType.h"
 #include "fofi/FoFiIdentifier.h"
 
-#include <ft2build.h>
-#include FT_FREETYPE_H
+//#include <ft2build.h>
+//#include FT_FREETYPE_H
 
 // return a newly allocated char* containing an UTF16BE string of size length
 char *pdfDocEncodingToUTF16(const std::string &orig, int *length)
@@ -2730,6 +2730,8 @@
 
 Form::AddFontResult Form::addFontToDefaultResources(const std::string &filepath, int faceIndex, const std::string &fontFamily, const std::string &fontStyle)
 {
+    return {};
+#if 0
     if (!GooString::endsWith(filepath, ".ttf") && !GooString::endsWith(filepath, ".ttc") && !GooString::endsWith(filepath, ".otf")) {
         error(errIO, -1, "We only support embedding ttf/ttc/otf fonts for now. The font file for {0:s} {1:s} was {2:s}", fontFamily.c_str(), fontStyle.c_str(), filepath.c_str());
         return {};
@@ -2939,6 +2941,7 @@
     }
 
     return { dictFontName, fontDictRef };
+#endif
 }
 
 std::string Form::getFallbackFontForChar(Unicode uChar, const GfxFont &fontToEmulate) const
