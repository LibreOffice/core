disable freetype dependent code

--- poppler/poppler/Form.cc.orig	2023-06-05 19:29:14.000000000 +0900
+++ poppler/poppler/Form.cc	2023-06-14 18:50:22.232312300 +0900
@@ -48,7 +48,7 @@
 #include <cstdlib>
 #include <cstring>
 #include <cctype>
-#include "goo/ft_utils.h"
+//#include "goo/ft_utils.h"
 #include "goo/gfile.h"
 #include "goo/GooString.h"
 #include "Error.h"
@@ -78,9 +78,9 @@
 #include "fofi/FoFiTrueType.h"
 #include "fofi/FoFiIdentifier.h"
 
-#include <ft2build.h>
+//#include <ft2build.h>
 #include <variant>
-#include FT_FREETYPE_H
+//#include FT_FREETYPE_H
 #include <unordered_set>
 
 // helper for using std::visit to get a dependent false for static_asserts
@@ -2840,6 +2840,8 @@
 
 Form::AddFontResult Form::addFontToDefaultResources(const std::string &filepath, int faceIndex, const std::string &fontFamily, const std::string &fontStyle, bool forceName)
 {
+    return {};
+#if 0
     if (!filepath.ends_with(".ttf") && !filepath.ends_with(".ttc") && !filepath.ends_with(".otf")) {
         error(errIO, -1, "We only support embedding ttf/ttc/otf fonts for now. The font file for {0:s} {1:s} was {2:s}", fontFamily.c_str(), fontStyle.c_str(), filepath.c_str());
         return {};
@@ -2994,6 +2996,7 @@
     }
 
     return { dictFontName, fontDictRef };
+#endif
 }
 
 std::string Form::getFallbackFontForChar(Unicode uChar, const GfxFont &fontToEmulate) const
--- poppler/splash/SplashFontEngine.cc.orig	2024-02-21 01:28:10.479645185 +0000
+++ popller/splash/SplashFontEngine.cc	2023-09-05 22:15:14.000000000 +0100
@@ -66,7 +66,7 @@
         delete font;
     }
 
-    delete ftEngine;
+    //delete ftEngine;
 }
 
 SplashFontFile *SplashFontEngine::getFontFile(const SplashFontFileID &id)
--- poppler/splash/SplashFTFontEngine.h.orig	2023-09-05 22:15:14.000000000 +0100
+++ poppler/splash/SplashFTFontEngine.h	2024-02-21 13:53:29.715423742 +0000
@@ -26,8 +26,8 @@
 #ifndef SPLASHFTFONTENGINE_H
 #define SPLASHFTFONTENGINE_H
 
-#include <ft2build.h>
-#include FT_FREETYPE_H
+//#include <ft2build.h>
+//#include FT_FREETYPE_H
 #include <memory>
 
 class SplashFontFile;
@@ -40,7 +40,7 @@
 class SplashFTFontEngine
 {
 public:
-    static SplashFTFontEngine *init(bool aaA, bool enableFreeTypeHintingA, bool enableSlightHinting);
+    static SplashFTFontEngine *init(bool aaA, bool enableFreeTypeHintingA, bool enableSlightHinting) { return nullptr; };
 
     ~SplashFTFontEngine();
 
@@ -48,22 +48,22 @@
     SplashFTFontEngine &operator=(const SplashFTFontEngine &) = delete;
 
     // Load fonts.
-    SplashFontFile *loadType1Font(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, const char **enc, int faceIndex);
-    SplashFontFile *loadType1CFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, const char **enc, int faceIndex);
-    SplashFontFile *loadOpenTypeT1CFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, const char **enc, int faceIndex);
-    SplashFontFile *loadCIDFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, int faceIndex);
-    SplashFontFile *loadOpenTypeCFFFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, int *codeToGID, int codeToGIDLen, int faceIndex);
-    SplashFontFile *loadTrueTypeFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, int *codeToGID, int codeToGIDLen, int faceIndex);
+    SplashFontFile *loadType1Font(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, const char **enc, int faceIndex) { return nullptr; };
+    SplashFontFile *loadType1CFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, const char **enc, int faceIndex) { return nullptr; };
+    SplashFontFile *loadOpenTypeT1CFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, const char **enc, int faceIndex) { return nullptr; };
+    SplashFontFile *loadCIDFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, int faceIndex) { return nullptr; };
+    SplashFontFile *loadOpenTypeCFFFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, int *codeToGID, int codeToGIDLen, int faceIndex) { return nullptr; };
+    SplashFontFile *loadTrueTypeFont(std::unique_ptr<SplashFontFileID> idA, SplashFontSrc *src, int *codeToGID, int codeToGIDLen, int faceIndex) { return nullptr; };
     bool getAA() { return aa; }
     void setAA(bool aaA) { aa = aaA; }
 
 private:
-    SplashFTFontEngine(bool aaA, bool enableFreeTypeHintingA, bool enableSlightHintingA, FT_Library libA);
+    //SplashFTFontEngine(bool aaA, bool enableFreeTypeHintingA, bool enableSlightHintingA, FT_Library libA);
 
     bool aa;
     bool enableFreeTypeHinting;
     bool enableSlightHinting;
-    FT_Library lib;
+    //FT_Library lib;
 
     friend class SplashFTFontFile;
     friend class SplashFTFont;
