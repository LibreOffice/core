--- ./include/ports/SkTypeface_win.h.sav	2019-09-19 11:38:00.943185300 +0200
+++ ./include/ports/SkTypeface_win.h	2020-03-16 15:11:38.347067100 +0100
@@ -11,6 +11,8 @@
 #include "include/core/SkTypeface.h"
 #include "include/core/SkTypes.h"
 
+#include <windows.h>
+
 #ifdef SK_BUILD_FOR_WIN
 
 #ifdef UNICODE
@@ -28,6 +30,8 @@
  */
 SK_API SkTypeface* SkCreateTypefaceFromLOGFONT(const LOGFONT&);
 
+SK_API SkTypeface* SkCreateTypefaceFromLOGFONT(const LOGFONT&, HFONT);
+
 /**
  *  Copy the LOGFONT associated with this typeface into the lf parameter. Note
  *  that the lfHeight will need to be set afterwards, since the typeface does
--- ./src/ports/SkFontHost_win.cpp.sav	2020-03-16 15:22:02.620518100 +0100
+++ ./src/ports/SkFontHost_win.cpp	2020-03-16 15:27:12.733594400 +0100
@@ -215,6 +215,11 @@
         , fFont(::CreateFontIndirect(&lf))
         , fSavefont((HFONT)::SelectObject(fHdc, fFont))
     { }
+    explicit SkAutoHDC(const HFONT hf)
+        : fHdc(::CreateCompatibleDC(nullptr))
+        , fFont(nullptr)
+        , fSavefont((HFONT)::SelectObject(fHdc, hf))
+    { }
     ~SkAutoHDC() {
         if (fHdc) {
             ::SelectObject(fHdc, fSavefont);
@@ -238,8 +243,22 @@
         : SkTypeface(style, false)
         , fLogFont(lf)
         , fSerializeAsStream(serializeAsStream)
+        , hFont(nullptr)
     {
         SkAutoHDC hdc(fLogFont);
+        init(hdc, style, lf);
+    }
+    LogFontTypeface(const SkFontStyle& style, const LOGFONT& lf, HFONT hf, bool serializeAsStream)
+        : SkTypeface(style, false)
+        , fLogFont(lf)
+        , fSerializeAsStream(serializeAsStream)
+        , hFont(hf)
+    {
+        SkAutoHDC hdc(hFont);
+        init(hdc, style, lf);
+    }
+    void init(SkAutoHDC& hdc, const SkFontStyle& style, const LOGFONT& lf)
+    {
         TEXTMETRIC textMetric;
         if (0 == GetTextMetrics(hdc, &textMetric)) {
             call_ensure_accessible(lf);
@@ -260,6 +279,7 @@
     }
 
     LOGFONT fLogFont;
+    HFONT hFont;
     bool fSerializeAsStream;
     bool fCanBeLCD;
 
@@ -267,6 +287,10 @@
         return sk_sp<LogFontTypeface>(new LogFontTypeface(get_style(lf), lf, false));
     }
 
+    static sk_sp<LogFontTypeface> Make(const LOGFONT& lf, HFONT hf) {
+        return sk_sp<LogFontTypeface>(new LogFontTypeface(get_style(lf), lf, hf, false));
+    }
+
     static void EnsureAccessible(const SkTypeface* face) {
         call_ensure_accessible(static_cast<const LogFontTypeface*>(face)->fLogFont);
     }
@@ -348,7 +372,7 @@
  */
 SkTypeface* SkCreateTypefaceFromLOGFONT(const LOGFONT& origLF) {
     LOGFONT lf = origLF;
-    make_canonical(&lf);
+//    make_canonical(&lf);
     sk_sp<SkTypeface> face = SkTypefaceCache::FindByProcAndRef(FindByLogFont, &lf);
     if (!face) {
         face = LogFontTypeface::Make(lf);
@@ -357,12 +381,33 @@
     return face.release();
 }
 
+static bool FindByLogFontAndHFont(SkTypeface* face, void* ctx) {
+    LogFontTypeface* lface = static_cast<LogFontTypeface*>(face);
+    const std::pair<LOGFONT*,HFONT>* data = reinterpret_cast<const std::pair<LOGFONT*,HFONT>*>(ctx);
+    const LOGFONT* lf = data->first;
+    const HFONT hf = data->second;
+
+    return !memcmp(&lface->fLogFont, lf, sizeof(LOGFONT)) && lface->hFont == hf;
+}
+
+SkTypeface* SkCreateTypefaceFromLOGFONT(const LOGFONT& origLF, HFONT hFont) {
+    LOGFONT lf = origLF;
+//    make_canonical(&lf);
+    std::pair<LOGFONT*,HFONT> data = std::make_pair(&lf,hFont);
+    sk_sp<SkTypeface> face = SkTypefaceCache::FindByProcAndRef(FindByLogFontAndHFont, &data);
+    if (!face) {
+        face = LogFontTypeface::Make(lf,hFont);
+        SkTypefaceCache::Add(face);
+    }
+    return face.release();
+}
+
 /**
  *  The created SkTypeface takes ownership of fontMemResource.
  */
 sk_sp<SkTypeface> SkCreateFontMemResourceTypefaceFromLOGFONT(const LOGFONT& origLF, HANDLE fontMemResource) {
     LOGFONT lf = origLF;
-    make_canonical(&lf);
+//    make_canonical(&lf);
     // We'll never get a cache hit, so no point in putting this in SkTypefaceCache.
     return FontMemResourceTypeface::Make(lf, fontMemResource);
 }
@@ -686,7 +731,10 @@
     LOGFONT lf = typeface->fLogFont;
     lf.lfHeight = -SkScalarTruncToInt(gdiTextSize);
     lf.lfQuality = compute_quality(fRec);
-    fFont = CreateFontIndirect(&lf);
+    if(typeface->hFont != nullptr)
+        fFont = typeface->hFont;
+    else
+        fFont = CreateFontIndirect(&lf);
     if (!fFont) {
         return;
     }
@@ -788,7 +836,9 @@
         ::DeleteDC(fDDC);
     }
     if (fFont) {
-        ::DeleteObject(fFont);
+        LogFontTypeface* typeface = static_cast<LogFontTypeface*>(this->getTypeface());
+        if(typeface->hFont != fFont)
+            ::DeleteObject(fFont);
     }
     if (fSC) {
         ::ScriptFreeCache(&fSC);
