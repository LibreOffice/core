--- skia/src/utils/Sk3D.cpp.sav	2019-08-15 21:59:46.324369467 +0200
+++ skia/src/utils/Sk3D.cpp	2019-09-26 13:13:34.153647165 +0200
@@ -38,6 +38,9 @@ void Sk3LookAt(SkMatrix44* dst, const Sk
     dst->invert(dst);
 }
 
+#undef far
+#undef near
+
 bool Sk3Perspective(SkMatrix44* dst, float near, float far, float angle) {
     SkASSERT(far > near);
 
--- skia/src/gpu/vk/GrVkSemaphore.cpp.sav	2019-08-15 21:59:46.292369407 +0200
+++ skia/src/gpu/vk/GrVkSemaphore.cpp	2019-09-26 13:12:56.041647516 +0200
@@ -10,6 +10,7 @@
 #include "include/gpu/GrBackendSemaphore.h"
 #include "src/gpu/vk/GrVkGpu.h"
 #include "src/gpu/vk/GrVkUtil.h"
+#include "tools/gpu/vk/GrVulkanDefines.h"
 
 #ifdef VK_USE_PLATFORM_WIN32_KHR
 // windows wants to define this as CreateSemaphoreA or CreateSemaphoreW
--- skia/third_party/skcms/skcms.cc.sav	2019-09-26 13:03:33.997652697 +0200
+++ skia/third_party/skcms/skcms.cc	2019-09-26 13:13:19.185647303 +0200
@@ -124,7 +124,8 @@ static float minus_1_ulp(float x) {
 // Most transfer functions we work with are sRGBish.
 // For exotic HDR transfer functions, we encode them using a tf.g that makes no sense,
 // and repurpose the other fields to hold the parameters of the HDR functions.
-enum TFKind { Bad, sRGBish, PQish, HLGish, HLGinvish };
+enum TFKind_skcms { Bad, sRGBish, PQish, HLGish, HLGinvish };
+#define TFKind TFKind_skcms
 struct TF_PQish  { float A,B,C,D,E,F; };
 struct TF_HLGish { float R,G,a,b,c; };
 
@@ -1817,7 +1817,9 @@ typedef enum {
     Op_store_hhhh,
     Op_store_fff,
     Op_store_ffff,
-} Op;
+} Op_skcms;
+
+#define Op Op_skcms
 
 #if defined(__clang__)
     template <int N, typename T> using Vec = T __attribute__((ext_vector_type(N)));
--- skia/src/utils/win/SkDWriteGeometrySink.h.sav	2019-08-15 22:00:07.552409373 +0200
+++ skia/src/utils/win/SkDWriteGeometrySink.h	2019-09-26 13:54:17.725624642 +0200
@@ -12,6 +12,8 @@
 
 class SkPath;
 
+#define CONST const
+
 #include <dwrite.h>
 #include <d2d1.h>
 
--- skia/include/core/SkColor.h
+++ skia/include/core/SkColor.h
@@ -396,6 +396,7 @@ using SkColor4f = SkRGBA4f<kUnpremul_SkAlphaType>;
 
 template <> SK_API SkColor4f SkColor4f::FromColor(SkColor);
 template <> SK_API SkColor   SkColor4f::toSkColor() const;
+template <> uint32_t SkColor4f::toBytes_RGBA() const;
 
 namespace SkColors {
 constexpr SkColor4f kTransparent = {0, 0, 0, 0};
--- skia/include/private/SkColorData.h
+++ skia/include/private/SkColorData.h
@@ -441,4 +441,6 @@ constexpr SkPMColor4f SK_PMColor4fILLEGAL = { SK_FloatNegativeInfinity,
                                                   SK_FloatNegativeInfinity,
                                                   SK_FloatNegativeInfinity };
 
+template <> uint32_t SkPMColor4f::toBytes_RGBA() const;
+
 #endif
--- skia/src/gpu/text/GrTextBlobCache.h
+++ skia/src/gpu/text/GrTextBlobCache.h
@@ -188,4 +188,6 @@ private:
     SkMessageBus<PurgeBlobMessage>::Inbox fPurgeBlobInbox;
 };
 
+template<> SkMessageBus<GrTextBlobCache::PurgeBlobMessage>* SkMessageBus<GrTextBlobCache::PurgeBlobMessage>::Get();
+
 #endif
