--- pylib/gyp/msvs_emulation.py.sav	2020-02-19 21:45:13.150161000 +0100
+++ pylib/gyp/msvs_emulation.py	2020-02-21 23:51:56.815937600 +0100
@@ -139,7 +139,7 @@
     # Setup params to pass to and attempt to launch reg.exe.
     cmd = ['reg.exe', 'query', r'HKLM\Software\Microsoft\DirectX', '/s']
     p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-    for line in p.communicate()[0].splitlines():
+    for line in p.communicate()[0].decode('utf-8').splitlines():
       if 'InstallPath' in line:
         dxsdk_dir = line.split('    ')[3] + "\\"
 
@@ -321,7 +321,7 @@
     # first level is globally for the configuration (this is what we consider
     # "the" config at the gyp level, which will be something like 'Debug' or
     # 'Release'), VS2015 and later only use this level
-    if self.vs_version.short_name >= 2015:
+    if int(self.vs_version.short_name) >= 2015:
       return config
     # and a second target-specific configuration, which is an
     # override for the global one. |config| is remapped here to take into
@@ -485,7 +485,7 @@
         prefix='/arch:')
     cflags.extend(['/FI' + f for f in self._Setting(
         ('VCCLCompilerTool', 'ForcedIncludeFiles'), config, default=[])])
-    if self.vs_version.project_version >= 12.0:
+    if float(self.vs_version.project_version) >= 12.0:
       # New flag introduced in VS2013 (project version 12.0) Forces writes to
       # the program database (PDB) to be serialized through MSPDBSRV.EXE.
       # https://msdn.microsoft.com/en-us/library/dn502518.aspx
@@ -1054,7 +1054,7 @@
     variables, _ = popen.communicate()
     if popen.returncode != 0:
       raise Exception('"%s" failed with error %d' % (args, popen.returncode))
-    env = _ExtractImportantEnvironment(variables)
+    env = _ExtractImportantEnvironment(variables.decode('utf-8'))
 
     # Inject system includes from gyp files into INCLUDE.
     if system_includes:
@@ -1073,7 +1073,7 @@
       'for', '%i', 'in', '(cl.exe)', 'do', '@echo', 'LOC:%~$PATH:i'))
     popen = subprocess.Popen(args, shell=True, stdout=subprocess.PIPE)
     output, _ = popen.communicate()
-    cl_paths[arch] = _ExtractCLPath(output)
+    cl_paths[arch] = _ExtractCLPath(output.decode('utf-8'))
   return cl_paths
 
 def VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja):
--- pylib/gyp/generator/ninja.py.sav	2020-02-19 21:45:13.150161000 +0100
+++ pylib/gyp/generator/ninja.py	2020-02-22 00:42:48.090472000 +0100
@@ -1740,7 +1740,7 @@
 def OpenOutput(path, mode='w'):
   """Open |path| for writing, creating directories if necessary."""
   gyp.common.EnsureDirExists(path)
-  return open(path, mode)
+  return open(path, mode, encoding="utf-8")
 
 
 def CommandWithWrapper(cmd, wrappers, prog):
--- pylib/gyp/win_tool.py.sav	2020-02-19 21:45:13.150161000 +0100
+++ pylib/gyp/win_tool.py	2020-03-04 12:46:55.098189500 +0100
@@ -132,7 +132,7 @@
     link = subprocess.Popen(args, shell=sys.platform == 'win32', env=env,
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = link.communicate()
-    for line in out.splitlines():
+    for line in out.decode('utf-8').splitlines():
       if (not line.startswith('   Creating library ') and
           not line.startswith('Generating code') and
           not line.startswith('Finished generating code')):
@@ -197,8 +197,8 @@
       # and sometimes doesn't unfortunately.
       with open(our_manifest, 'r') as our_f:
         with open(assert_manifest, 'r') as assert_f:
-          our_data = our_f.read().translate(None, string.whitespace)
-          assert_data = assert_f.read().translate(None, string.whitespace)
+          our_data = our_f.read().translate(str.maketrans('','', string.whitespace))
+          assert_data = assert_f.read().translate(str.maketrans('','', string.whitespace))
       if our_data != assert_data:
         os.unlink(out)
         def dump(filename):
@@ -225,7 +225,7 @@
     popen = subprocess.Popen(args, shell=True, env=env,
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = popen.communicate()
-    for line in out.splitlines():
+    for line in out.decode('utf-8').splitlines():
       if line and 'manifest authoring warning 81010002' not in line:
         print(line)
     return popen.returncode
@@ -261,7 +261,7 @@
     # to filter is pairs of lines that look like this:
     # Processing C:\Program Files (x86)\Microsoft SDKs\...\include\objidl.idl
     # objidl.idl
-    lines = out.splitlines()
+    lines = out.decode('utf-8').splitlines()
     prefixes = ('Processing ', '64 bit Processing ')
     processing = set(os.path.basename(x)
                      for x in lines if x.startswith(prefixes))
@@ -276,7 +276,7 @@
     popen = subprocess.Popen(args, shell=True, env=env,
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = popen.communicate()
-    for line in out.splitlines():
+    for line in out.decode('utf-8').splitlines():
       if (not line.startswith('Copyright (C) Microsoft Corporation') and
           not line.startswith('Microsoft (R) Macro Assembler') and
           not line.startswith(' Assembling: ') and
@@ -291,7 +291,7 @@
     popen = subprocess.Popen(args, shell=True, env=env,
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
     out, _ = popen.communicate()
-    for line in out.splitlines():
+    for line in out.decode('utf-8').splitlines():
       if (not line.startswith('Microsoft (R) Windows (R) Resource Compiler') and
           not line.startswith('Copyright (C) Microsoft Corporation') and
           line):
