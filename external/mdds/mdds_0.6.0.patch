--- misc/mdds_0.6.0/include/mdds/mixed_type_matrix_def.inl	2011-07-13 13:26:27.000000000 -0600
+++ misc/build/mdds_0.6.0/include/mdds/mixed_type_matrix_def.inl	2011-07-20 02:02:21.164198900 -0600
@@ -216,8 +216,8 @@
         // assignment to self.
         return;
 
-    size_t row_count = ::std::min(mp_storage->rows(), r.mp_storage->rows());
-    size_t col_count = ::std::min(mp_storage->cols(), r.mp_storage->cols());
+    size_t row_count = (::std::min)(mp_storage->rows(), r.mp_storage->rows());
+    size_t col_count = (::std::min)(mp_storage->cols(), r.mp_storage->cols());
     for (size_t i = 0; i < row_count; ++i)
         for (size_t j = 0; j < col_count; ++j)
             mp_storage->get_element(i, j) = r.mp_storage->get_element(i, j);
--- misc/mdds_0.6.0/include/mdds/mixed_type_matrix_storage_filled_linear.inl	2011-07-13 13:26:27.000000000 -0600
+++ misc/build/mdds_0.6.0/include/mdds/mixed_type_matrix_storage_filled_linear.inl	2011-07-20 02:02:21.179798900 -0600
@@ -354,8 +354,8 @@
         }
 
         array_type new_array(new_size, &m_init_elem);
-        size_t min_rows = ::std::min(row, m_rows);
-        size_t min_cols = ::std::min(col, m_cols);
+        size_t min_rows = (::std::min)(row, m_rows);
+        size_t min_cols = (::std::min)(col, m_cols);
         for (size_t i = 0; i < min_rows; ++i)
         {
             for (size_t j = 0; j < min_cols; ++j)
@@ -612,8 +612,8 @@
         }
 
         array_type new_array(new_size, element(0.0));
-        size_t min_rows = ::std::min(row, m_rows);
-        size_t min_cols = ::std::min(col, m_cols);
+        size_t min_rows = (::std::min)(row, m_rows);
+        size_t min_cols = (::std::min)(col, m_cols);
         for (size_t i = 0; i < min_rows; ++i)
         {
             for (size_t j = 0; j < min_cols; ++j)
--- misc/mdds_0.6.0/include/mdds/point_quad_tree.hpp	2011-07-13 13:26:27.000000000 -0600
+++ misc/build/mdds_0.6.0/include/mdds/point_quad_tree.hpp	2011-07-20 02:04:36.088835900 -0600
@@ -623,10 +623,10 @@
 template<typename _Key, typename _Data>
 void point_quad_tree<_Key,_Data>::insert(key_type x, key_type y, data_type data)
 {
-    m_xrange.first  = ::std::min(m_xrange.first,  x);
-    m_xrange.second = ::std::max(m_xrange.second, x);
-    m_yrange.first  = ::std::min(m_yrange.first,  y);
-    m_yrange.second = ::std::max(m_yrange.second, y);
+    m_xrange.first  = (::std::min)(m_xrange.first,  x);
+    m_xrange.second = (::std::max)(m_xrange.second, x);
+    m_yrange.first  = (::std::min)(m_yrange.first,  y);
+    m_yrange.second = (::std::max)(m_yrange.second, y);
 
     if (!m_root)
     {
