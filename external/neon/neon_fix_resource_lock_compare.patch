diff -aru src.origin/ne_locks.c src/ne_locks.c
--- src.origin/ne_locks.c	2015-09-08 12:52:27.000000000 +0200
+++ src/ne_locks.c	2015-09-09 15:58:17.074137306 +0200
@@ -299,7 +299,7 @@
 	    NE_DEBUG(NE_DBG_LOCKS, "Has child: %s\n", item->lock->token);
 	    match = 1;
 	} 
-	else if (ne_path_compare(uri, item->lock->uri.path) == 0) {
+	else if (ne_uri_path_compare(uri, item->lock->uri.path) == 0) {
 	    /* Case 2: this request is directly on a locked resource */
 	    NE_DEBUG(NE_DBG_LOCKS, "Has direct lock: %s\n", item->lock->token);
 	    match = 1;
diff -aru src.origin/ne_uri.c src/ne_uri.c
--- src.origin/ne_uri.c	2015-09-08 12:52:26.000000000 +0200
+++ src/ne_uri.c	2015-09-09 16:20:48.221850463 +0200
@@ -545,7 +545,7 @@
 #undef CMPWITH
 
 /* TODO: implement properly */
-int ne_path_compare(const char *a, const char *b) 
+int ne_path_compare(const char *a, const char *b)
 {
     int ret = ne_strcasecmp(a, b);
     if (ret) {
@@ -566,6 +566,31 @@
     return ret;
 }
 
+// same as above, but unescape the uri path component first
+int ne_uri_path_compare(const char *a, const char *b)
+{
+    char *path1;
+    char *path2;
+    int ret = -1;
+
+    path1 = ne_path_unescape(a);
+    if( path1 != NULL) {
+        path2 = ne_path_unescape(b);
+        if(path2 != NULL) {
+            ret = ne_path_compare(path1, path2);
+            ne_free(path1);
+            ne_free(path2);
+            return ret;
+        }
+        else {
+            ne_free(path1);
+            return ret;
+        }
+    }
+    else
+        return ret;
+}
+
 char *ne_uri_unparse(const ne_uri *uri)
 {
     ne_buffer *buf = ne_buffer_create();
diff -aru src.origin/ne_uri.h src/ne_uri.h
--- src.origin/ne_uri.h	2008-08-05 17:32:47.000000000 +0200
+++ src/ne_uri.h	2015-09-09 16:26:18.789796216 +0200
@@ -45,6 +45,9 @@
  * ignoring trailing-slashes. */
 int ne_path_compare(const char *p1, const char *p2);
 
+// same as above, but unescape the uri path segment first
+int ne_uri_path_compare(const char *p1, const char *p2);
+
 /* Returns non-zero if child is a child of parent */
 int ne_path_childof(const char *parent, const char *child);
 
