diff -ruNw misc/cairo-1.10.2/build/Makefile.win32.features misc/build/cairo-1.10.2/build/Makefile.win32.features
--- misc/cairo-1.10.2/build/Makefile.win32.features	2015-10-27 17:04:21.000000000 -0400
+++ misc/build/cairo-1.10.2/build/Makefile.win32.features	2017-11-24 21:43:14.103524768 -0500
@@ -30,7 +30,7 @@
 CAIRO_HAS_FC_FONT=0
 CAIRO_HAS_PS_SURFACE=1
 CAIRO_HAS_PDF_SURFACE=1
-CAIRO_HAS_SVG_SURFACE=1
+CAIRO_HAS_SVG_SURFACE=0
 CAIRO_HAS_TEST_SURFACES=0
 CAIRO_HAS_TEE_SURFACE=0
 CAIRO_HAS_XML_SURFACE=0
diff -ruNw misc/cairo-1.10.2/configure misc/build/cairo-1.10.2/configure
--- misc/cairo-1.10.2/configure	2015-12-09 15:41:45.000000000 -0500
+++ misc/build/cairo-1.10.2/configure	2017-11-24 21:43:14.103524768 -0500
@@ -20580,61 +20580,12 @@
 rm -f confcache
 
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for compress in -lz" >&5
-$as_echo_n "checking for compress in -lz... " >&6; }
-if ${ac_cv_lib_z_compress+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  ac_check_lib_save_LIBS=$LIBS
-LIBS="-lz  $LIBS"
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-
-/* Override any GCC internal prototype to avoid an error.
-   Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char compress ();
-int
-main ()
-{
-return compress ();
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_z_compress=yes
-else
-  ac_cv_lib_z_compress=no
-fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-LIBS=$ac_check_lib_save_LIBS
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_z_compress" >&5
-$as_echo "$ac_cv_lib_z_compress" >&6; }
-if test "x$ac_cv_lib_z_compress" = xyes; then :
-  ac_fn_c_check_header_mongrel "$LINENO" "zlib.h" "ac_cv_header_zlib_h" "$ac_includes_default"
-if test "x$ac_cv_header_zlib_h" = xyes; then :
 
 	  have_libz=yes
 
 $as_echo "#define HAVE_ZLIB 1" >>confdefs.h
 
 
-else
-  have_libz="no (requires zlib http://www.gzip.org/zlib/)"
-fi
-
-
-else
-  have_libz="no (requires zlib http://www.gzip.org/zlib/)"
-fi
-
-
 save_LIBS="$LIBS"
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for lzo2a_decompress in -llzo2" >&5
 $as_echo_n "checking for lzo2a_decompress in -llzo2... " >&6; }
@@ -30069,7 +30020,7 @@
     { $as_echo "$as_me:${as_lineno-$LINENO}: result: $FREETYPE_VERSION - OK" >&5
 $as_echo "$FREETYPE_VERSION - OK" >&6; }
 			   ft_NONPKGCONFIG_CFLAGS=`$FREETYPE_CONFIG --cflags`
-			   ft_NONPKGCONFIG_LIBS=`$FREETYPE_CONFIG --libs`
+			   ft_NONPKGCONFIG_LIBS=`$FREETYPE_CONFIG --libs | $SED -e 's/-lz//g'`
     else { $as_echo "$as_me:${as_lineno-$LINENO}: result: $FREETYPE_VERSION - Too old" >&5
 $as_echo "$FREETYPE_VERSION - Too old" >&6; }
 			   use_ft="no ($FREETYPE_VERSION found; version $FREETYPE_MIN_VERSION from release $FREETYPE_MIN_RELEASE required)"
@@ -30079,7 +30030,7 @@
     fi
 
   ft_CFLAGS="$FREETYPE_CFLAGS"
-  ft_LIBS="$FREETYPE_LIBS"
+  ft_LIBS=`echo "$FREETYPE_LIBS" | $SED -e 's/-lz//g'`
 
 
 		{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether cairo's FreeType font backend feature could be enabled" >&5
@@ -30686,7 +30637,7 @@
 
     # The ps backend requires zlib.
     use_ps=$have_libz
-    ps_NONPKGCONFIG_LIBS=-lz
+    ps_NONPKGCONFIG_LIBS=$ZLIB3RDLIB
 
 
 		{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether cairo's PostScript surface backend feature could be enabled" >&5
@@ -31082,7 +31033,7 @@
 
     # The pdf backend requires zlib.
     use_pdf=$have_libz
-    pdf_NONPKGCONFIG_LIBS=-lz
+    pdf_NONPKGCONFIG_LIBS=$ZLIB3RDLIB
 
 
 		{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether cairo's PDF surface backend feature could be enabled" >&5
@@ -32973,7 +32924,7 @@
 
 
     use_xml=$have_libz
-    xml_NONPKGCONFIG_LIBS=-lz
+    xml_NONPKGCONFIG_LIBS=$ZLIB3RDLIB
 
 
 		{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether cairo's xml surface backend feature could be enabled" >&5
diff -ruNw misc/cairo-1.10.2/src/cairo.h misc/build/cairo-1.10.2/src/cairo.h
--- misc/cairo-1.10.2/src/cairo.h	2015-10-27 17:04:21.000000000 -0400
+++ misc/build/cairo-1.10.2/src/cairo.h	2017-12-17 12:09:59.880406411 -0500
@@ -397,6 +397,8 @@
  *   with red in the upper 5 bits, then green in the middle
  *   6 bits, and blue in the lower 5 bits. (Since 1.2)
  * @CAIRO_FORMAT_RGB30: like RGB24 but with 10bpc. (Since 1.12)
+ * @CAIRO_FORMAT_RGB24_888: each pixel is a 24-bit quantity,
+ *   with Red, Green, Blue taking 8-bits each, in that order. (Since 1.1x)
  *
  * #cairo_format_t is used to identify the memory format of
  * image data.
@@ -412,9 +414,16 @@
     CAIRO_FORMAT_A8        = 2,
     CAIRO_FORMAT_A1        = 3,
     CAIRO_FORMAT_RGB16_565 = 4,
-    CAIRO_FORMAT_RGB30     = 5
+    CAIRO_FORMAT_RGB30     = 5,
+    CAIRO_FORMAT_RGB24_888 = 6
 } cairo_format_t;
 
+/**
+ * Need this until CAIRO_FORMAT_RGB24_888 is in some official release.
+ * Otherwise we can't reliably check if this is available or we should
+ * convert from 24-bit RGB to 32-bit RGB before passing to Cairo.
+ **/
+#define HAVE_CAIRO_FORMAT_RGB24_888
 
 /**
  * cairo_write_func_t:
diff -ruNw misc/cairo-1.10.2/src/cairo-image-source.c misc/build/cairo-1.10.2/src/cairo-image-source.c
--- misc/cairo-1.10.2/src/cairo-image-source.c	2015-10-27 17:04:30.000000000 -0400
+++ misc/build/cairo-1.10.2/src/cairo-image-source.c	2017-12-17 12:09:56.076344387 -0500
@@ -508,6 +508,19 @@
 	color.blue = expand_channel(pixel & 0x3fff, 10);
 	return pixman_image_create_solid_fill (&color);
 
+    case CAIRO_FORMAT_RGB24_888:
+	pixel = *(uint32_t *) (image->data + y * image->stride + 3 * x);
+	pixel &= 0x00ffffff; /* ignore next pixel bits */
+	if (pixel == 0)
+	    return _pixman_black_image ();
+	if (pixel == 0x00ffffff)
+	    return _pixman_white_image ();
+
+	color.red = (pixel >> 16 & 0xff) | (pixel >> 8 & 0xff00);
+	color.green = (pixel >> 8 & 0xff) | (pixel & 0xff00);
+	color.blue = (pixel & 0xff) | (pixel << 8 & 0xff00);
+	return pixman_image_create_solid_fill (&color);
+
     case CAIRO_FORMAT_ARGB32:
     case CAIRO_FORMAT_RGB24:
 	pixel = *(uint32_t *) (image->data + y * image->stride + 4 * x);
diff -ruNw misc/cairo-1.10.2/src/cairo-image-surface.c misc/build/cairo-1.10.2/src/cairo-image-surface.c
--- misc/cairo-1.10.2/src/cairo-image-surface.c	2015-10-27 17:04:30.000000000 -0400
+++ misc/build/cairo-1.10.2/src/cairo-image-surface.c	2017-12-17 12:09:59.876406346 -0500
@@ -104,13 +104,15 @@
 	return CAIRO_FORMAT_A1;
     case PIXMAN_r5g6b5:
 	return CAIRO_FORMAT_RGB16_565;
+	case PIXMAN_r8g8b8:
+	return CAIRO_FORMAT_RGB24_888;
 #if PIXMAN_VERSION >= PIXMAN_VERSION_ENCODE(0,22,0)
     case PIXMAN_r8g8b8a8: case PIXMAN_r8g8b8x8:
 #endif
 #if PIXMAN_VERSION >= PIXMAN_VERSION_ENCODE(0,27,2)
     case PIXMAN_a8r8g8b8_sRGB:
 #endif
-    case PIXMAN_a8b8g8r8: case PIXMAN_x8b8g8r8: case PIXMAN_r8g8b8:
+	case PIXMAN_a8b8g8r8: case PIXMAN_x8b8g8r8:
     case PIXMAN_b8g8r8:   case PIXMAN_b5g6r5:
     case PIXMAN_a1r5g5b5: case PIXMAN_x1r5g5b5: case PIXMAN_a1b5g5r5:
     case PIXMAN_x1b5g5r5: case PIXMAN_a4r4g4b4: case PIXMAN_x4r4g4b4:
@@ -320,6 +322,9 @@
     case CAIRO_FORMAT_RGB16_565:
 	ret = PIXMAN_r5g6b5;
 	break;
+	case CAIRO_FORMAT_RGB24_888:
+	ret = PIXMAN_r8g8b8;
+	break;
     case CAIRO_FORMAT_ARGB32:
     case CAIRO_FORMAT_INVALID:
     default:
@@ -718,6 +723,8 @@
     case CAIRO_FORMAT_RGB30:
     case CAIRO_FORMAT_RGB24:
 	return 32;
+	case CAIRO_FORMAT_RGB24_888:
+	return 24;
     case CAIRO_FORMAT_RGB16_565:
 	return 16;
     case CAIRO_FORMAT_A8:
diff -ruNw misc/cairo-1.10.2/src/cairoint.h misc/build/cairo-1.10.2/src/cairoint.h
--- misc/cairo-1.10.2/src/cairoint.h	2015-10-27 17:04:30.000000000 -0400
+++ misc/build/cairo-1.10.2/src/cairoint.h	2017-12-17 12:09:59.880406411 -0500
@@ -1486,7 +1486,7 @@
  * in cairo-xlib-surface.c--again see -Wswitch-enum).
  */
 #define CAIRO_FORMAT_VALID(format) ((format) >= CAIRO_FORMAT_ARGB32 &&		\
-                                    (format) <= CAIRO_FORMAT_RGB30)
+                                    (format) <= CAIRO_FORMAT_RGB24_888)
 
 /* pixman-required stride alignment in bytes. */
 #define CAIRO_STRIDE_ALIGNMENT (sizeof (uint32_t))
