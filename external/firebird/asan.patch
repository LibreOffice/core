--- src/common/classes/alloc.cpp
+++ src/common/classes/alloc.cpp
@@ -2187,7 +2187,7 @@
 
 void* MemPool::allocRaw(size_t size)
 {
-#ifndef USE_VALGRIND
+#if !(defined USE_VALGRIND || defined USE_ASAN)
 	if (size == DEFAULT_ALLOCATION)
 	{
 		MutexLockGuard guard(*cache_mutex, "MemPool::allocRaw");
@@ -2267,7 +2267,7 @@
 
 void MemPool::releaseRaw(bool destroying, void* block, size_t size, bool use_cache) throw ()
 {
-#ifndef USE_VALGRIND
+#if !(defined USE_VALGRIND || defined USE_ASAN)
 	if (use_cache && (size == DEFAULT_ALLOCATION))
 	{
 		MutexLockGuard guard(*cache_mutex, "MemPool::releaseRaw");
@@ -2277,7 +2277,7 @@
 			return;
 		}
 	}
-#else
+#elif defined USE_VALGRIND
 	// Set access protection for block to prevent memory from deleted pool being accessed
 	int handle = /* //VALGRIND_MAKE_NOACCESS */ VALGRIND_MAKE_MEM_DEFINED(block, size);
 
--- src/common/classes/alloc.h
+++ src/common/classes/alloc.h
@@ -295,40 +295,60 @@
 
 // operators new and delete
 
+#if !defined USE_ASAN
 inline void* operator new(size_t s ALLOC_PARAMS)
 {
 	return MemoryPool::globalAlloc(s ALLOC_PASS_ARGS);
 }
 inline void* operator new[](size_t s ALLOC_PARAMS)
 {
 	return MemoryPool::globalAlloc(s ALLOC_PASS_ARGS);
 }
+#endif
 
 inline void* operator new(size_t s, Firebird::MemoryPool& pool ALLOC_PARAMS)
 {
+#if defined USE_ASAN
+	return operator new(s);
+#else
 	return pool.allocate(s ALLOC_PASS_ARGS);
+#endif
 }
 inline void* operator new[](size_t s, Firebird::MemoryPool& pool ALLOC_PARAMS)
 {
+#if defined USE_ASAN
+	return operator new[](s);
+#else
 	return pool.allocate(s ALLOC_PASS_ARGS);
+#endif
 }
 
+#if !defined USE_ASAN
 inline void operator delete(void* mem ALLOC_PARAMS) throw()
 {
 	MemoryPool::globalFree(mem);
 }
 inline void operator delete[](void* mem ALLOC_PARAMS) throw()
 {
 	MemoryPool::globalFree(mem);
 }
+#endif
 
 inline void operator delete(void* mem, Firebird::MemoryPool& pool ALLOC_PARAMS) throw()
 {
+#if defined USE_ASAN
+	return operator delete(mem);
+#else
 	MemoryPool::globalFree(mem);
+#endif
 }
 inline void operator delete[](void* mem, Firebird::MemoryPool& pool ALLOC_PARAMS) throw()
 {
+#if defined USE_ASAN
+	return operator delete[](mem);
+#else
 	MemoryPool::globalFree(mem);
+#endif
 }
 
 #ifdef DEBUG_GDS_ALLOC
--- src/include/firebird.h
+++ src/include/firebird.h
@@ -38,10 +38,19 @@
 #include "gen/autoconfig.h"
 #endif
 
+#if defined __clang__ && defined __has_feature
+#if __has_feature(address_sanitizer)
+#define USE_ASAN
+#endif
+#endif
+
 // Using our debugging code is pointless when we may use Valgrind features
 #if defined(DEV_BUILD) && !defined(USE_VALGRIND)
 #define DEBUG_GDS_ALLOC
 #endif
+#if defined USE_ASAN
+#undef DEBUG_GDS_ALLOC
+#endif
 
 #if defined(WIN_NT)
 #define FB_DLL_EXPORT __declspec(dllexport)
--- src/jrd/SimilarToMatcher.h
+++ src/jrd/SimilarToMatcher.h
@@ -338,7 +338,7 @@
 		private:
 			static const unsigned INCREASE_FACTOR = 50;
 			unsigned size;
-			AutoPtr<UCHAR> data;
+			AutoPtr<UCHAR, ArrayDelete<UCHAR>> data;
 			T* end;
 		};
 #endif	// RECURSIVE_SIMILAR
