{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "37fd9987_0280d991",
        "filename": "filter/source/config/fragments/filters/WEBP___WebP.xcu",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2022-01-27T03:55:49Z",
      "side": 1,
      "message": "Completely new files don\u0027t need this declaration.",
      "range": {
        "startLine": 7,
        "startChar": 2,
        "endLine": 16,
        "endChar": 64
      },
      "revId": "1f03382f172d5417aa25e9ecc74122bef7a6f6e0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc881c4b_0d6bdb6f",
        "filename": "vcl/source/filter/graphicfilter.cxx",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2022-01-27T03:55:49Z",
      "side": 1,
      "message": "If the concern is backwards compatibility, we should create and write a fallback PNG image into the document just like we do with other formats where backwards compatibility was a concern. At least in that case the user can turn off fallback images when he knows backwards compatibility will not be an issue. Also in the future we can turn off writing of the fallback image and the user won\u0027t be stuck with and oversized PNG.",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 100,
        "endChar": 57
      },
      "revId": "1f03382f172d5417aa25e9ecc74122bef7a6f6e0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1e2299c_a55b8afb",
        "filename": "vcl/source/filter/graphicfilter.cxx",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-01-27T08:18:07Z",
      "side": 1,
      "message": "\u003e If the concern is backwards compatibility, we should create and write a fallback PNG image into the document just like we do with other formats where backwards compatibility was a concern.\n\nLike we do with other formats where? I\u0027m not aware of any such functionality or option. If I disable this and also places like SvXMLGraphicHelper::implSaveGraphic(), then all that happens is that the .webp is still written to the document, the document just names it .grf with mimetype image/x-vclgraphic .",
      "parentUuid": "cc881c4b_0d6bdb6f",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 100,
        "endChar": 57
      },
      "revId": "1f03382f172d5417aa25e9ecc74122bef7a6f6e0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dda582c_83fafd30",
        "filename": "vcl/source/filter/graphicfilter.cxx",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2022-01-27T09:02:39Z",
      "side": 1,
      "message": "The code for this is typically all over the place - it is not handled in Graphic class itself but as a \"ReplacementGraphic\" property on SdrGrafObj (and probably on Writer specific SwGrfNode). This is also used for OLE objects so probably this is why it is implemented as a property.\n\nCurrently a replacement graphic is created in SdrGrafObj::GetReplacementGraphicObject for all vector graphics, but this can be changed to include WebP too. This is then used in xmloff/source/text/txtparae.cxx:3184 for exporting into ODF.",
      "parentUuid": "f1e2299c_a55b8afb",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 100,
        "endChar": 57
      },
      "revId": "1f03382f172d5417aa25e9ecc74122bef7a6f6e0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc66c362_51043e09",
        "filename": "vcl/source/filter/graphicfilter.cxx",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2022-01-27T09:18:04Z",
      "side": 1,
      "message": "Haha geez... GraphicMimeTypeHelper is also used for converting extension to mime-type or around, which is used somewhere in ODF export.\n\nAlso in MultiImageImportHelper defines the priorities when you have multiple images available, so you have to make sure here that webp has higher priority than the replacement.",
      "parentUuid": "1dda582c_83fafd30",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 100,
        "endChar": 57
      },
      "revId": "1f03382f172d5417aa25e9ecc74122bef7a6f6e0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e71789c_03277c20",
        "filename": "vcl/source/filter/graphicfilter.cxx",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2022-01-27T09:50:02Z",
      "side": 1,
      "message": "I don\u0027t understand why this is supposed to be better than what I did. You argue with document size and doing like with other image formats, but writing an image twice will make documents larger rather than smaller, and this is not how other bitmap formats are handled, so it looks like extra work. And the only benefit I can see is a configuration option that practically nobody will care about.\n\nI also don\u0027t understand why you argue for saving .webp into documents when originally you were so against it that you didn\u0027t want to support .webp at all (https://bugs.documentfoundation.org/show_bug.cgi?id\u003d114533#c4). The primary point of this work is to support copy\u0026pasting from browsers, not making documents few bytes smaller.",
      "parentUuid": "bc66c362_51043e09",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 100,
        "endChar": 57
      },
      "revId": "1f03382f172d5417aa25e9ecc74122bef7a6f6e0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4273b2a_d7f71536",
        "filename": "vcl/source/filter/graphicfilter.cxx",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2022-01-27T12:33:49Z",
      "side": 1,
      "message": "The benefit is that when we make the format \"officially supported\", the existing documents can just keep the WEBP and throw away the PNG after re-save. With current implementation the documents will only have the PNG file but the original will be discarded, which is less than ideal. Considering that the most common use case of WEBP is super minimized lossy images from the browser - keeping the original WEBP file will be a small additional increase in file size. The users can also decide to not bother with a fallback images if they wish so and actually enjoy full WEBP support which they hoped to get. \n\nAlso most of the raster image formats that aren\u0027t native are, unlike WEBP, formats where you you don\u0027t even want to keep it in the original form (PNG is always better) so there was not really any need in the past to add a fallback support. We don\u0027t want them to be native actually because they are some obscure obsolete format. For formats that we want native support we always implemented a fallback image - it doesn\u0027t really matter what kind of an image it is.   \n\nYes, I was against adding WEBP as it had very limited support all around (not even Firefox supported it yet), but that has changed. It is fairly well supported in browsers and programs now and MS Office also supports it now, which means we may have no other choice but to support it too. Also not sure what me being against it somewhere in the past has anything to do with this, but I still would want a proper implementation in either way.\n\nIf the primary point is to \"support copy\u0026pasting from browsers\" then I don\u0027t understand why you bothered with an WEBP writer, support for exporting as WEBP image and also adding support as GfxLink native format and then crippled it.",
      "parentUuid": "8e71789c_03277c20",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 100,
        "endChar": 57
      },
      "revId": "1f03382f172d5417aa25e9ecc74122bef7a6f6e0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7105e6cc_a1525edc",
        "filename": "vcl/source/filter/webp/writer.cxx",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 1000154
      },
      "writtenOn": "2022-01-27T03:55:49Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better to use comphelper::ScopeGuard instead, if all you need is to guarantee something is called when the function ends.",
      "revId": "1f03382f172d5417aa25e9ecc74122bef7a6f6e0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}