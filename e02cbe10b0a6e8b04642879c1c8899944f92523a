{
  "comments": [
    {
      "key": {
        "uuid": "45141c95_b4bcb3cb",
        "filename": "sc/source/core/tool/interpr5.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1739,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-29T15:17:05Z",
      "side": 1,
      "message": "I\u0027m a bit worried with this. A NaN is assigned to one of the members, and the other is 0; what worries me is what would happen when we add that NaN to 0 in get()? Will NaN stay intact, or will it become another NaN? (Sorry, I don\u0027t know much about NaN handling rules.)\n\nIf this sum would result in a different NaN, we would break correct propagation of the errors (which we encode as specially crafted NaNs).",
      "revId": "e02cbe10b0a6e8b04642879c1c8899944f92523a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fa63354_4dbbb291",
        "filename": "sc/source/core/tool/interpr5.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1739,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-04-29T15:35:52Z",
      "side": 1,
      "message": "That\u0027s what pops out in bugzilla if you look for sumproduct:\nhttps://bugs.documentfoundation.org/show_bug.cgi?id\u003d85539\nIt seems to be related with sumproduc across multiple sheets.\nAnd it\u0027s very old. Don\u0027t even know if it stills valid.\nBut nothing about error propagations.\nSo seems to work. But you may want to add a reviewer who know about calc error propagation.",
      "parentUuid": "45141c95_b4bcb3cb",
      "revId": "e02cbe10b0a6e8b04642879c1c8899944f92523a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ee5e8ab_19c86e07",
        "filename": "sc/source/core/tool/interpr5.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1739,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-04-29T15:57:43Z",
      "side": 1,
      "message": "I might have been unclear, sorry for that. Of course, currently error propagation works as intended, since the NaN is assigned to the plain double value, and then read from it and checked (when it\u0027s set, it\u0027s not modified anymore - see line 1730). But when you change mfSum to be KahanSum, and assign NaN to it, the NaN will go to the mfSum.m_fSum, and mfSum.m_fError will be 0. Then mfSum.get() will compute (m_fSum + m_fError) , which is what I am worried: will that NaN \u0027plus\u0027 0 somehow modify the NaN?",
      "parentUuid": "8fa63354_4dbbb291",
      "revId": "e02cbe10b0a6e8b04642879c1c8899944f92523a",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}