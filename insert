UnoControls/inc/basecontainercontrol.hxx:    ::std::vector< IMPL_ControlInfo* > maControlInfoList;
UnoControls/source/base/basecontainercontrol.cxx:                ::std::vector<IMPL_ControlInfo*>::iterator itr = maControlInfoList.begin();
UnoControls/source/controls/progressmonitor.cxx:using ::std::vector;
UnoControls/source/controls/progressmonitor.cxx:    ::std::vector< IMPL_TextlistItem* >* pTextList;
UnoControls/source/inc/progressmonitor.hxx:    ::std::vector < IMPL_TextlistItem* >          maTextlist_Top;         // Elements before progress
UnoControls/source/inc/progressmonitor.hxx:    ::std::vector < IMPL_TextlistItem* >          maTextlist_Bottom;      // Elements below of progress
accessibility/inc/accessibility/extended/AccessibleGridControlTable.hxx:    std::vector< AccessibleGridControlTableCell* > m_pCellVector;
accessibility/inc/accessibility/extended/AccessibleGridControlTable.hxx:    std::vector< css::uno::Reference< css::accessibility::XAccessible> > m_pAccessCellVector;
accessibility/inc/accessibility/extended/AccessibleGridControlTable.hxx:    std::vector< AccessibleGridControlTableCell* >& getCellVector() { return m_pCellVector;}
accessibility/inc/accessibility/extended/AccessibleGridControlTable.hxx:    std::vector< css::uno::Reference< css::accessibility::XAccessible > >& getAccessibleCellVector() { return m_pAccessCellVector;}
accessibility/inc/accessibility/extended/accessibletabbar.hxx:        typedef ::std::vector< css::uno::Reference< css::accessibility::XAccessible > > AccessibleChildren;
accessibility/inc/accessibility/extended/accessibletabbarpagelist.hxx:        typedef ::std::vector< css::uno::Reference< css::accessibility::XAccessible > > AccessibleChildren;
accessibility/inc/accessibility/extended/textwindowaccessibility.hxx:typedef ::std::vector< ParagraphInfo > Paragraphs;
accessibility/inc/accessibility/helper/characterattributeshelper.hxx:    std::vector< css::beans::PropertyValue > GetCharacterAttributes();
accessibility/inc/accessibility/standard/accessiblemenubasecomponent.hxx:    typedef ::std::vector< css::uno::Reference< css::accessibility::XAccessible > > AccessibleChildren;
accessibility/inc/accessibility/standard/vclxaccessiblelist.hxx:typedef std::vector< css::uno::WeakReference< css::accessibility::XAccessible > >
accessibility/inc/accessibility/standard/vclxaccessiblestatusbar.hxx:    typedef ::std::vector< css::uno::Reference< css::accessibility::XAccessible > > AccessibleChildren;
accessibility/inc/accessibility/standard/vclxaccessibletabcontrol.hxx:    typedef ::std::vector< css::uno::Reference< css::accessibility::XAccessible > > AccessibleChildren;
accessibility/source/extended/AccessibleGridControl.cxx:                std::vector< AccessibleGridControlTableCell* >& rCells =
accessibility/source/extended/AccessibleGridControl.cxx:                    std::vector< AccessibleGridControlTableCell* >& rCells =
accessibility/source/extended/AccessibleGridControl.cxx:                    std::vector< css::uno::Reference< css::accessibility::XAccessible > >& rAccCells =
accessibility/source/extended/textwindowaccessibility.cxx:        ::std::vector< TextPaM > aTextPaMs(4);
accessibility/source/helper/characterattributeshelper.cxx:std::vector< PropertyValue > CharacterAttributesHelper::GetCharacterAttributes()
accessibility/source/helper/characterattributeshelper.cxx:    std::vector< PropertyValue > aValues( m_aAttributeMap.size() );
accessibility/source/helper/characterattributeshelper.cxx:    std::vector< PropertyValue > aValues;
accessibility/source/standard/vclxaccessibleradiobutton.cxx:        ::std::vector< VclPtr<RadioButton> > aGroup(pRadioButton->GetRadioButtonGroup());
avmedia/source/framework/modeltools.cxx:    std::vector<std::string> vExternals;
avmedia/source/framework/modeltools.cxx:    for( std::vector<std::string>::iterator aCIter = vExternals.begin(); aCIter != vExternals.end(); ++aCIter )
avmedia/source/gstreamer/gstplayer.cxx:    std::vector<OString> currentDetails_;
avmedia/source/gstreamer/gstplayer.cxx:        std::vector<OString> details;
avmedia/source/gstreamer/gstplayer.cxx:        std::vector<char *> args;
avmedia/source/opengl/oglplayer.hxx:    std::vector<libgltf::glTFFile> m_vInputFiles;
avmedia/source/vlc/vlcmanager.cxx:        std::vector<std::string> verComponents;
basctl/source/basicide/baside2.hxx:    void SetupAndShowCodeCompleteWnd(const std::vector< OUString >& aEntryVect, TextSelection aSel );
basctl/source/basicide/baside2.hxx:    UnoTypeCodeCompletetor( const std::vector< OUString >& aVect, const OUString& sVarType );
basctl/source/basicide/baside2.hxx:    std::vector< OUString > GetXIdlClassMethods() const;
basctl/source/basicide/baside2.hxx:    std::vector< OUString > GetXIdlClassFields() const;
basctl/source/basicide/baside2b.cxx:    std::vector<HighlightPortion> aPortions;
basctl/source/basicide/baside2b.cxx:        for (std::vector<HighlightPortion>::iterator i(aPortions.begin());
basctl/source/basicide/baside2b.cxx:    std::vector<HighlightPortion> aPortions;
basctl/source/basicide/baside2b.cxx:        for (std::vector<HighlightPortion>::iterator i(aPortions.begin());
basctl/source/basicide/baside2b.cxx:    std::vector<HighlightPortion> aPortions;
basctl/source/basicide/baside2b.cxx:            std::vector<HighlightPortion> aCurrPortions;
basctl/source/basicide/baside2b.cxx:    std::vector<HighlightPortion> aPortions;
basctl/source/basicide/baside2b.cxx:    for (std::vector<HighlightPortion>::iterator i(aPortions.begin());
basctl/source/basicide/baside2b.cxx:    std::vector< OUString > aVect; //vector to hold the base variable+methods for the nested reflection
basctl/source/basicide/baside2b.cxx:    std::vector<HighlightPortion> aPortions;
basctl/source/basicide/baside2b.cxx:        for( std::vector<HighlightPortion>::reverse_iterator i(
basctl/source/basicide/baside2b.cxx:            std::vector< OUString > aEntryVect;//entries to be inserted into the list
basctl/source/basicide/baside2b.cxx:            std::vector< OUString > aFieldVect = aTypeCompletor.GetXIdlClassFields();//fields
basctl/source/basicide/baside2b.cxx:                std::vector< OUString > aMethVect = aTypeCompletor.GetXIdlClassMethods();//methods
basctl/source/basicide/baside2b.cxx:void EditorWindow::SetupAndShowCodeCompleteWnd( const std::vector< OUString >& aEntryVect, TextSelection aSel )
basctl/source/basicide/baside2b.cxx:        std::vector<HighlightPortion> aPortions;
basctl/source/basicide/baside2b.cxx:        for (std::vector<HighlightPortion>::iterator i(aPortions.begin());
basctl/source/basicide/baside2b.cxx:    std::vector<OUString> maMemberList;
basctl/source/basicide/baside2b.cxx:    std::vector<short> vIndices;
basctl/source/basicide/baside2b.cxx:UnoTypeCodeCompletetor::UnoTypeCodeCompletetor( const std::vector< OUString >& aVect, const OUString& sVarType )
basctl/source/basicide/baside2b.cxx:std::vector< OUString > UnoTypeCodeCompletetor::GetXIdlClassMethods() const
basctl/source/basicide/baside2b.cxx:    std::vector< OUString > aRetVect;
basctl/source/basicide/baside2b.cxx:std::vector< OUString > UnoTypeCodeCompletetor::GetXIdlClassFields() const
basctl/source/basicide/baside2b.cxx:    std::vector< OUString > aRetVect;
basctl/source/basicide/baside3.cxx:std::vector< lang::Locale > implGetLanguagesOnlyContainedInFirstSeq
basctl/source/basicide/baside3.cxx:    std::vector< lang::Locale > avRet;
basctl/source/basicide/baside3.cxx:            std::vector< lang::Locale > aOnlyInImportLanguages =
basctl/source/basicide/basidesh.cxx:    std::vector<VclPtr<BaseWindow> > aDeleteVec;
basctl/source/basicide/basidesh.cxx:    std::vector<VclPtr<BaseWindow> > aDeleteVec;
basctl/source/basicide/basidesh.cxx:    std::vector<VclPtr<BaseWindow> > aDeleteVec;
basctl/source/basicide/basidesh.cxx:        std::vector<VclPtr<BaseWindow> > aDeleteVec;
basctl/source/basicide/basobj2.cxx:    ::std::vector<OUString> aModLibList;
basctl/source/basicide/basobj2.cxx:    ::std::vector<OUString> aDlgLibList;
basctl/source/basicide/basobj2.cxx:    ::std::vector<OUString> aLibList( aModLibList.size() + aDlgLibList.size() );
basctl/source/basicide/basobj2.cxx:    ::std::vector<OUString>::iterator aIterEnd = ::std::unique( aLibList.begin(), aLibList.end() );  // move unique elements to the front
basctl/source/basicide/bastypes.cxx:        std::vector<TabBarSortHelper> aModuleList;
basctl/source/basicide/bastypes.cxx:        std::vector<TabBarSortHelper> aDialogList;
basctl/source/basicide/breakpoint.cxx:    for ( ::std::vector< BreakPoint* >::iterator i = maBreakPoints.begin(); i < maBreakPoints.end(); ++i )
basctl/source/basicide/breakpoint.cxx:    for ( ::std::vector< BreakPoint* >::iterator i = maBreakPoints.begin(); i < maBreakPoints.end(); ++i )
basctl/source/basicide/breakpoint.hxx:    ::std::vector<BreakPoint*> maBreakPoints;
basctl/source/basicide/documentenumeration.hxx:    typedef ::std::vector< css::uno::Reference< css::frame::XController > >   Controllers;
basctl/source/basicide/documentenumeration.hxx:    typedef ::std::vector< DocumentDescriptor > Documents;
basctl/source/basicide/moduldl2.cxx:        ::std::vector< Sequence<beans::PropertyValue> > manifest;
basctl/source/dlged/dlgedobj.cxx:        ::std::vector<DlgEdObj*> aChildList = pForm->GetChildren();
basctl/source/dlged/dlgedobj.cxx:        ::std::vector<DlgEdObj*>::iterator aIter;
basctl/source/dlged/dlgedobj.cxx:            ::std::vector< OUString > aNameList( aIndexToNameMap.size() );
basctl/source/dlged/dlgedobj.cxx:    std::vector<DlgEdObj*> const& aChildList = GetChildren();
basctl/source/dlged/dlgedobj.cxx:    std::vector<DlgEdObj*>::const_iterator aIter;
basctl/source/dlged/dlgedobj.cxx:    ::std::vector<DlgEdObj*>::iterator aIter;
basctl/source/dlged/dlgedobj.cxx:        ::std::vector<DlgEdObj*> aChildList = GetChildren();
basctl/source/dlged/dlgedobj.cxx:    ::std::vector<DlgEdObj*>::iterator aIter;
basctl/source/dlged/dlgedobj.cxx:    ::std::vector<DlgEdObj*>::iterator aIter;
basctl/source/inc/accessibledialogwindow.hxx:    typedef ::std::vector< ChildDescriptor > AccessibleChildren;
basctl/source/inc/dlgedobj.hxx:    ::std::vector<DlgEdObj*> pChildren;
basctl/source/inc/dlgedobj.hxx:    std::vector<DlgEdObj*> const& GetChildren() const { return pChildren; }
basctl/source/inc/layout.hxx:        std::vector<Item> vItems;
basctl/source/inc/propbrw.hxx:    typedef std::vector< css::uno::Reference< css::uno::XInterface> > InterfaceArray;
basctl/source/inc/scriptdocument.hxx:    typedef ::std::vector< ScriptDocument >  ScriptDocuments;
basegfx/source/curve/b2dbeziertools.cxx:        ::std::vector< double >::const_iterator aIter = ::std::lower_bound(maLengthArray.begin(), maLengthArray.end(), fDistance);
basegfx/source/curve/b2dcubicbezier.cxx:        ::std::vector< double > aAllResults;
basegfx/source/curve/b2dcubicbezier.cxx:        inline void impCheckExtremumResult(double fCandidate, ::std::vector< double >& rResult)
basegfx/source/curve/b2dcubicbezier.cxx:    void B2DCubicBezier::getAllExtremumPositions(::std::vector< double >& rResults) const
basegfx/source/polygon/b2dlinegeometry.cxx:                        ::std::vector< double > aExtremumPositions;
basegfx/source/polygon/b2dpolygon.cxx:    typedef ::std::vector< CoordinateData2D > CoordinateData2DVector;
basegfx/source/polygon/b2dpolygon.cxx:    typedef ::std::vector< ControlVectorPair2D > ControlVectorPair2DVector;
basegfx/source/polygon/b2dpolygon.cxx:                                    ::std::vector< double > aExtremas;
basegfx/source/polygon/b2dpolygoncutandtouch.cxx:        typedef ::std::vector< temporaryPoint > temporaryPointVector;
basegfx/source/polygon/b2dpolygontools.cxx:        void applyLineDashing(const B2DPolygon& rCandidate, const ::std::vector<double>& rDotDashArray, B2DPolyPolygon* pLineTarget, B2DPolyPolygon* pGapTarget, double fDotDashLength)
basegfx/source/polygon/b2dpolygontools.cxx:                        std::vector< css::awt::Point > aCollectPoints;
basegfx/source/polygon/b2dpolygontools.cxx:                        std::vector< css::drawing::PolygonFlags > aCollectFlags;
basegfx/source/polygon/b2dpolygontriangulator.cxx:        typedef ::std::vector< EdgeEntry > EdgeEntries;
basegfx/source/polygon/b2dpolygontriangulator.cxx:        typedef ::std::vector< EdgeEntry* > EdgeEntryPointers;
basegfx/source/polygon/b2dpolypolygoncutter.cxx:        typedef ::std::vector< PN > PNV;
basegfx/source/polygon/b2dpolypolygoncutter.cxx:        typedef ::std::vector< VN > VNV;
basegfx/source/polygon/b2dpolypolygoncutter.cxx:        typedef ::std::vector< SN > SNV;
basegfx/source/polygon/b2dpolypolygoncutter.cxx:        typedef ::std::vector< CorrectionPair > CorrectionTable;
basegfx/source/polygon/b2dpolypolygoncutter.cxx:                ::std::vector< StripHelper > aHelpers;
basegfx/source/polygon/b2dpolypolygoncutter.cxx:                    ::std::vector< StripHelper > aHelpers;
basegfx/source/polygon/b2dpolypolygontools.cxx:        void applyLineDashing(const B2DPolyPolygon& rCandidate, const ::std::vector<double>& rDotDashArray, B2DPolyPolygon* pLineTarget, B2DPolyPolygon* pGapTarget, double fFullDashDotLen)
basegfx/source/polygon/b2dtrapezoid.cxx:        typedef ::std::vector< TrDeSimpleEdge > TrDeSimpleEdges;
basegfx/source/polygon/b2dtrapezoid.cxx:            std::vector< B2DPoint * > maBlocks;
basegfx/source/polygon/b2dtrapezoid.cxx:            ::std::vector< B2DPoint >   maPoints;
basegfx/source/polygon/b3dpolygon.cxx:    typedef ::std::vector< CoordinateData3D > CoordinateData3DVector;
basegfx/source/polygon/b3dpolygon.cxx:    typedef ::std::vector< ::basegfx::BColor > BColorDataVector;
basegfx/source/polygon/b3dpolygon.cxx:    typedef ::std::vector< ::basegfx::B3DVector > NormalsData3DVector;
basegfx/source/polygon/b3dpolygon.cxx:    typedef ::std::vector< ::basegfx::B2DPoint > TextureData2DVector;
basegfx/source/polygon/b3dpolygontools.cxx:        void applyLineDashing(const B3DPolygon& rCandidate, const ::std::vector<double>& rDotDashArray, B3DPolyPolygon* pLineTarget, B3DPolyPolygon* pGapTarget, double fDotDashLength)
basegfx/source/polygon/b3dpolypolygon.cxx:    typedef ::std::vector< ::basegfx::B3DPolygon >  PolygonVector;
basegfx/source/range/b2dpolyrange.cxx:            std::vector<B2DRange> aTmpRanges;
basegfx/source/range/b2dpolyrange.cxx:            std::vector<B2VectorOrientation> aTmpOrient;
basegfx/source/range/b2dpolyrange.cxx:            const std::vector<B2DRange>::const_iterator aEnd( maRanges.end() );
basegfx/source/range/b2dpolyrange.cxx:        std::vector<B2DRange>            maRanges;
basegfx/source/range/b2dpolyrange.cxx:        std::vector<B2VectorOrientation> maOrient;
basegfx/source/range/b2drangeclipper.cxx:        typedef std::vector<B2DRange> VectorOfRanges;
basegfx/source/range/b2drangeclipper.cxx:        typedef std::vector< SweepLineEvent > VectorOfEvents;
basegfx/source/range/b2drangeclipper.cxx:            std::vector<B2DPoint> maPoints;
basegfx/source/range/b2drangeclipper.cxx:                                                const std::vector<B2DRange>& rRanges,
basegfx/source/range/b2drangeclipper.cxx:                                                const std::vector<B2VectorOrientation>& rOrientations )
basegfx/source/range/b2drangeclipper.cxx:            std::vector<B2DRange>::const_iterator aCurrRect=rRanges.begin();
basegfx/source/range/b2drangeclipper.cxx:            std::vector<B2VectorOrientation>::const_iterator aCurrOrientation=rOrientations.begin();
basegfx/source/range/b2drangeclipper.cxx:            const std::vector<B2DRange>::const_iterator aEnd=rRanges.end();
basegfx/source/range/b2drangeclipper.cxx:            const std::vector<B2VectorOrientation>::const_iterator aEndOrientation=rOrientations.end();
basegfx/source/range/b2drangeclipper.cxx:            std::vector<B2DRange>::const_reverse_iterator aCurrRectR=rRanges.rbegin();
basegfx/source/range/b2drangeclipper.cxx:            std::vector<B2VectorOrientation>::const_reverse_iterator aCurrOrientationR=rOrientations.rbegin();
basegfx/source/range/b2drangeclipper.cxx:            const std::vector<B2DRange>::const_reverse_iterator aEndR=rRanges.rend();
basegfx/source/range/b2drangeclipper.cxx:        B2DPolyPolygon solveCrossovers(const std::vector<B2DRange>& rRanges,
basegfx/source/range/b2drangeclipper.cxx:                                       const std::vector<B2VectorOrientation>& rOrientations)
basegfx/source/range/b2xrange.cxx:            ::std::vector< RangeType >& o_rRanges,
basegfx/source/range/b2xrange.cxx:    ::std::vector< B2IRange >& computeSetDifference( ::std::vector< B2IRange >& o_rResult,
basegfx/source/range/b2xrange.cxx:    ::std::vector< B2DRange >& computeSetDifference( ::std::vector< B2DRange >& o_rResult,
basegfx/source/raster/rasterconvert3d.cxx:            ::std::vector< RasterConversionLineEntry3D >::iterator aCurrentEntry(maLineEntries.begin());
basegfx/source/raster/rasterconvert3d.cxx:            ::std::vector< RasterConversionLineEntry3D* > aCurrentLine;
basegfx/source/raster/rasterconvert3d.cxx:            ::std::vector< RasterConversionLineEntry3D* > aNextLine;
basegfx/source/raster/rasterconvert3d.cxx:            ::std::vector< RasterConversionLineEntry3D* >::iterator aRasterConversionLineEntry3D;
basegfx/source/tools/keystoplerp.cxx:static void validateInput(const std::vector<double>& rKeyStops)
basegfx/source/tools/keystoplerp.cxx:        KeyStopLerp::KeyStopLerp( const std::vector<double>& rKeyStops ) :
basegfx/source/tools/unotools.cxx:            std::vector<awt::Point> aPoints; aPoints.reserve(nLoopCount);
basegfx/source/tools/unotools.cxx:            std::vector<drawing::PolygonFlags> aFlags; aFlags.reserve(nLoopCount);
basegfx/source/workbench/bezierclip.cxx:template <class Functor> void Impl_applySafeRanges_rec( ::std::back_insert_iterator< ::std::vector< ::std::pair<double, double> > >&    result,
basegfx/source/workbench/bezierclip.cxx:void clipBezier( ::std::back_insert_iterator< ::std::vector< ::std::pair<double, double> > >&   result,
basegfx/source/workbench/bezierclip.cxx:    ::std::vector< ::std::pair<double,double> > results;
basegfx/source/workbench/bezierclip.cxx:    ::std::back_insert_iterator< ::std::vector< ::std::pair<double, double> > > ii(results);
basegfx/source/workbench/bezierclip.cxx:    ::std::vector< Bezier > c1_segments( results.size()+1 );
basegfx/source/workbench/bezierclip.cxx:    ::std::vector< Bezier > c2_segments( results.size()+1 );
basegfx/source/workbench/bezierclip.cxx:    ::std::vector< ::std::pair<double, double> >                                result;
basegfx/source/workbench/bezierclip.cxx:    ::std::back_insert_iterator< ::std::vector< ::std::pair<double, double> > > ii(result);
basegfx/source/workbench/bezierclip.hxx:typedef ::std::vector< Point2D > Polygon2D;
basegfx/test/basegfxtools.cxx:    static std::vector<double> getTestVector()
basegfx/test/basegfxtools.cxx:        std::vector<double> aStops(3);
basegfx/test/boxclipper.cxx:            std::vector<B2DPoint> aTmp2(aTmp.count());
basegfx/test/boxclipper.cxx:            std::vector<B2DPoint>::iterator pSmallest=aTmp2.end();
basegfx/test/boxclipper.cxx:            for(std::vector<B2DPoint>::iterator pCurr=aTmp2.begin(); pCurr!=aTmp2.end(); ++pCurr)
basegfx/test/boxclipper.cxx:            for(std::vector<B2DPoint>::iterator pCurr=aTmp2.begin(); pCurr!=aTmp2.end(); ++pCurr)
basic/inc/sbxbase.hxx:    std::vector<std::unique_ptr<SbxFactory>>
basic/qa/cppunit/basic_coverage.cxx:    typedef std::vector< OUString > StringVec;
basic/qa/cppunit/test_scanner.cxx:  std::vector<Symbol> getSymbols(const OUString& source, sal_Int32& errors, bool bCompatible = false)
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:  std::vector<Symbol> getSymbols(const OUString& source, bool bCompatible = false)
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/qa/cppunit/test_scanner.cxx:    std::vector<Symbol> symbols;
basic/source/basmgr/basicmanagerrepository.cxx:    typedef ::std::vector< BasicManagerCreationListener* >  CreationListeners;
basic/source/basmgr/basicmanagerrepository.cxx:                std::vector<BasicError>& aErrors = _out_rpBasicManager->GetErrors();
basic/source/basmgr/basmgr.cxx:    std::vector<std::unique_ptr<BasicLibInfo>> aLibs;
basic/source/basmgr/basmgr.cxx:bool BasicManager::LegacyPsswdBinaryLimitExceeded( std::vector< OUString >& _out_rModuleNames )
basic/source/basmgr/basmgr.cxx:            std::vector< OUString > aBigModules( nLen );
basic/source/basmgr/vbahelper.cxx:typedef ::std::vector<uno::Reference<frame::XModel>> ModelVector;
basic/source/classes/sbunoobj.cxx:typedef std::vector< ObjectItem > NativeObjectWrapperVector;
basic/source/classes/sbunoobj.cxx:typedef std::vector< WeakReference< XComponent > >  ComponentRefVector;
basic/source/classes/sbunoobj.cxx:typedef std::vector< StarBasicDisposeItem* > DisposeItemVector;
basic/source/inc/expr.hxx:typedef ::std::vector<SbiExprListPtr> SbiExprListVector;
basic/source/inc/expr.hxx:    std::vector<std::unique_ptr<SbiExpression>> aData;
basic/source/inc/namecont.hxx:    std::vector< OUString > mNames;
basic/source/inc/namecont.hxx:    std::vector< css::uno::Any > mValues;
basic/source/inc/parser.hxx:typedef ::std::vector< OUString > StringVector;
basic/source/inc/propacc.hxx:typedef ::std::vector<css::beans::PropertyValue> SbPropertyValueArr_Impl;
basic/source/inc/runtime.hxx:typedef std::vector< css::uno::Reference< css::lang::XComponent > > ComponentVector_t;
basic/source/inc/sbintern.hxx:typedef ::std::vector< OUString > StringVector;
basic/source/inc/sbunoobj.hxx:typedef std::vector< OUString > VBAConstantsVector;
basic/source/inc/symtbl.hxx:    std::vector<OUString> aData;
basic/source/inc/symtbl.hxx:    std::vector<std::unique_ptr<SbiSymDef>> m_Data;
basic/source/runtime/ddectrl.hxx:    std::vector<DdeConnection*> aConvList;
basic/source/runtime/dllmgr-x64.cxx:char * address(std::vector< char > & blob) {
basic/source/runtime/dllmgr-x64.cxx:    std::vector< char > * newBlob() {
basic/source/runtime/dllmgr-x64.cxx:        blobs_.push_front(std::vector< char >());
basic/source/runtime/dllmgr-x64.cxx:    std::vector< UnmarshalData > unmarshal;
basic/source/runtime/dllmgr-x64.cxx:    std::vector< StringData > unmarshalStrings;
basic/source/runtime/dllmgr-x64.cxx:    std::list< std::vector< char > > blobs_;
basic/source/runtime/dllmgr-x64.cxx:    std::vector< char > & blob, std::size_t alignment, std::size_t offset,
basic/source/runtime/dllmgr-x64.cxx:    std::vector< char >::size_type n = blob.size();
basic/source/runtime/dllmgr-x64.cxx:    std::vector< char > & blob, T const & data, std::size_t alignment,
basic/source/runtime/dllmgr-x64.cxx:        std::vector< sal_Int32 > low(dims);
basic/source/runtime/dllmgr-x64.cxx:    std::vector< char > & blob, std::size_t offset, MarshalData & data);
basic/source/runtime/dllmgr-x64.cxx:    std::vector< char > * blob = data.newBlob();
basic/source/runtime/dllmgr-x64.cxx:    SbxVariable * variable, std::vector< char > & blob, std::size_t offset,
basic/source/runtime/dllmgr-x64.cxx:    SbxVariable * variable, std::vector< char > & blob, std::size_t offset,
basic/source/runtime/dllmgr-x64.cxx:    std::vector< sal_Int32 > low(dims);
basic/source/runtime/dllmgr-x64.cxx:    std::vector< sal_Int32 > up(dims);
basic/source/runtime/dllmgr-x64.cxx:    for (std::vector< sal_Int32 > idx = low;;) {
basic/source/runtime/dllmgr-x64.cxx:    std::vector< char > & blob, std::size_t offset, MarshalData & data)
basic/source/runtime/dllmgr-x64.cxx:                    std::vector< char > * blob2 = data.newBlob();
basic/source/runtime/dllmgr-x64.cxx:                    std::vector< char > * blob2 = data.newBlob();
basic/source/runtime/dllmgr-x64.cxx:            std::vector< char > * blob2 = data.newBlob();
basic/source/runtime/dllmgr-x64.cxx:        std::vector< sal_Int32 > low(dims);
basic/source/runtime/dllmgr-x64.cxx:        std::vector< sal_Int32 > up(dims);
basic/source/runtime/dllmgr-x64.cxx:        for (std::vector< sal_Int32 > idx = low;;) {
basic/source/runtime/dllmgr-x64.cxx:    std::vector< char > stack;
basic/source/runtime/dllmgr-x64.cxx:    for (std::vector< UnmarshalData >::iterator i(data.unmarshal.begin());
basic/source/runtime/dllmgr-x64.cxx:    for (std::vector< StringData >::iterator i(data.unmarshalStrings.begin());
basic/source/runtime/dllmgr-x86.cxx:char * address(std::vector< char > & blob) {
basic/source/runtime/dllmgr-x86.cxx:    std::vector< char > * newBlob() {
basic/source/runtime/dllmgr-x86.cxx:        blobs_.push_front(std::vector< char >());
basic/source/runtime/dllmgr-x86.cxx:    std::vector< UnmarshalData > unmarshal;
basic/source/runtime/dllmgr-x86.cxx:    std::vector< StringData > unmarshalStrings;
basic/source/runtime/dllmgr-x86.cxx:    std::list< std::vector< char > > blobs_;
basic/source/runtime/dllmgr-x86.cxx:    std::vector< char > & blob, std::size_t alignment, std::size_t offset,
basic/source/runtime/dllmgr-x86.cxx:    std::vector< char >::size_type n = blob.size();
basic/source/runtime/dllmgr-x86.cxx:    std::vector< char > & blob, T const & data, std::size_t alignment,
basic/source/runtime/dllmgr-x86.cxx:        std::vector< sal_Int32 > low(dims);
basic/source/runtime/dllmgr-x86.cxx:    std::vector< char > & blob, std::size_t offset, MarshalData & data);
basic/source/runtime/dllmgr-x86.cxx:    std::vector< char > * blob = data.newBlob();
basic/source/runtime/dllmgr-x86.cxx:    SbxVariable * variable, std::vector< char > & blob, std::size_t offset,
basic/source/runtime/dllmgr-x86.cxx:    SbxVariable * variable, std::vector< char > & blob, std::size_t offset,
basic/source/runtime/dllmgr-x86.cxx:    std::vector< sal_Int32 > low(dims);
basic/source/runtime/dllmgr-x86.cxx:    std::vector< sal_Int32 > up(dims);
basic/source/runtime/dllmgr-x86.cxx:    for (std::vector< sal_Int32 > idx = low;;) {
basic/source/runtime/dllmgr-x86.cxx:    std::vector< char > & blob, std::size_t offset, MarshalData & data)
basic/source/runtime/dllmgr-x86.cxx:                    std::vector< char > * blob2 = data.newBlob();
basic/source/runtime/dllmgr-x86.cxx:                    std::vector< char > * blob2 = data.newBlob();
basic/source/runtime/dllmgr-x86.cxx:            std::vector< char > * blob2 = data.newBlob();
basic/source/runtime/dllmgr-x86.cxx:        std::vector< sal_Int32 > low(dims);
basic/source/runtime/dllmgr-x86.cxx:        std::vector< sal_Int32 > up(dims);
basic/source/runtime/dllmgr-x86.cxx:        for (std::vector< sal_Int32 > idx = low;;) {
basic/source/runtime/dllmgr-x86.cxx:    std::vector< char > stack;
basic/source/runtime/dllmgr-x86.cxx:    for (std::vector< UnmarshalData >::iterator i(data.unmarshal.begin());
basic/source/runtime/dllmgr-x86.cxx:    for (std::vector< StringData >::iterator i(data.unmarshalStrings.begin());
basic/source/sbx/sbxarray.cxx:    for( std::vector<SbxDim>::const_iterator it = m_vDimensions.begin();
basic/source/sbx/sbxarray.cxx:    for( std::vector<SbxDim>::const_iterator it = m_vDimensions.begin();
basic/source/uno/dlgcont.cxx:                    std::vector< OUString > vEmbeddedImageURLs;
basic/source/uno/dlgcont.cxx:                        std::vector< OUString >::iterator it = vEmbeddedImageURLs.begin();
basic/source/uno/dlgcont.cxx:                        std::vector< OUString >::iterator it_end = vEmbeddedImageURLs.end();
basic/source/uno/modsizeexceeded.cxx:ModuleSizeExceeded::ModuleSizeExceeded( const std::vector< OUString >& sModules )
basic/source/uno/scriptcont.cxx:    std::vector<OUString> aNames;
binaryurp/source/bridge.cxx:    bool setter, std::vector< BinaryAny > const & inArguments,
binaryurp/source/bridge.cxx:    BinaryAny * returnValue, std::vector< BinaryAny > * outArguments)
binaryurp/source/bridge.cxx:    std::vector< BinaryAny > a;
binaryurp/source/bridge.cxx:    rtl::ByteSequence const & tid, std::vector< BinaryAny > const & inArguments)
binaryurp/source/bridge.cxx:            std::vector< BinaryAny >());
binaryurp/source/bridge.cxx:            std::vector< BinaryAny >(), false);
binaryurp/source/bridge.cxx:    rtl::ByteSequence const & tid, std::vector< BinaryAny > const & inArguments)
binaryurp/source/bridge.cxx:            tid, protPropCommit_, bExc, ret, std::vector< BinaryAny >());
binaryurp/source/bridge.cxx:            tid, protPropCommit_, false, false, ret, std::vector< BinaryAny >(),
binaryurp/source/bridge.cxx:    std::vector< BinaryAny > inArgs;
binaryurp/source/bridge.cxx:    std::vector< BinaryAny> outArgs;
binaryurp/source/bridge.cxx:    std::vector< BinaryAny > a;
binaryurp/source/bridge.cxx:    OutgoingRequest::Kind kind, std::vector< BinaryAny > const & inArguments)
binaryurp/source/bridge.cxx:        std::vector< BinaryAny >());
binaryurp/source/bridge.cxx:    std::vector< BinaryAny > const & inArguments)
binaryurp/source/bridge.hxx:        std::vector< BinaryAny > const & inArguments, BinaryAny * returnValue,
binaryurp/source/bridge.hxx:        std::vector< BinaryAny > * outArguments);
binaryurp/source/bridge.hxx:        std::vector< BinaryAny > const & inArguments);
binaryurp/source/bridge.hxx:        std::vector< BinaryAny > const & inArguments);
binaryurp/source/bridge.hxx:        std::vector< BinaryAny > const & inArguments);
binaryurp/source/bridge.hxx:        std::vector< BinaryAny > const & inArguments);
binaryurp/source/incomingreply.hxx:        std::vector< BinaryAny > const & theOutArguments):
binaryurp/source/incomingreply.hxx:    std::vector< BinaryAny > outArguments;
binaryurp/source/incomingrequest.cxx:    std::vector< BinaryAny > const & inArguments, bool currentContextMode,
binaryurp/source/incomingrequest.cxx:    std::vector< BinaryAny > outArgs;
binaryurp/source/incomingrequest.cxx:    BinaryAny * returnValue, std::vector< BinaryAny > * outArguments) const
binaryurp/source/incomingrequest.cxx:            std::list< std::vector< char > > outBufs;
binaryurp/source/incomingrequest.cxx:            std::vector< void * > args;
binaryurp/source/incomingrequest.cxx:                    std::vector< BinaryAny >::const_iterator i(
binaryurp/source/incomingrequest.cxx:                                std::vector< char >(size_t_round(
binaryurp/source/incomingrequest.cxx:            std::vector< char > retBuf(nSize);
binaryurp/source/incomingrequest.cxx:                    std::vector< BinaryAny >::iterator i(outArguments->begin());
binaryurp/source/incomingrequest.cxx:                    std::list< std::vector< char > >::iterator j(
binaryurp/source/incomingrequest.hxx:        std::vector< BinaryAny > const & inArguments, bool currentContextMode,
binaryurp/source/incomingrequest.hxx:        BinaryAny * returnValue, std::vector< BinaryAny > * outArguments) const;
binaryurp/source/incomingrequest.hxx:    std::vector< BinaryAny > inArguments_;
binaryurp/source/marshal.cxx:void write64(std::vector< unsigned char > * buffer, sal_uInt64 value) {
binaryurp/source/marshal.cxx:void writeCompressed(std::vector< unsigned char > * buffer, sal_uInt32 value) {
binaryurp/source/marshal.cxx:    std::vector< unsigned char > * buffer, OUString const & value)
binaryurp/source/marshal.cxx:void Marshal::write8(std::vector< unsigned char > * buffer, sal_uInt8 value) {
binaryurp/source/marshal.cxx:void Marshal::write16(std::vector< unsigned char > * buffer, sal_uInt16 value) {
binaryurp/source/marshal.cxx:void Marshal::write32(std::vector< unsigned char > * buffer, sal_uInt32 value) {
binaryurp/source/marshal.cxx:    std::vector< unsigned char > * buffer,
binaryurp/source/marshal.cxx:    std::vector< unsigned char > * buffer,
binaryurp/source/marshal.cxx:    std::vector< unsigned char > * buffer, OUString const & oid)
binaryurp/source/marshal.cxx:    std::vector< unsigned char > * buffer, rtl::ByteSequence const & tid)
binaryurp/source/marshal.cxx:    std::vector< unsigned char > * buffer,
binaryurp/source/marshal.cxx:    std::vector< unsigned char > * buffer,
binaryurp/source/marshal.hxx:    static void write8(std::vector< unsigned char > * buffer, sal_uInt8 value);
binaryurp/source/marshal.hxx:        std::vector< unsigned char > * buffer, sal_uInt16 value);
binaryurp/source/marshal.hxx:        std::vector< unsigned char > * buffer, sal_uInt32 value);
binaryurp/source/marshal.hxx:        std::vector< unsigned char > * buffer,
binaryurp/source/marshal.hxx:        std::vector< unsigned char > * buffer,
binaryurp/source/marshal.hxx:        std::vector< unsigned char > * buffer, OUString const & oid);
binaryurp/source/marshal.hxx:        std::vector< unsigned char > * buffer, rtl::ByteSequence const & tid);
binaryurp/source/marshal.hxx:        std::vector< unsigned char > * buffer,
binaryurp/source/marshal.hxx:        std::vector< unsigned char > * buffer,
binaryurp/source/outgoingrequests.hxx:    typedef std::map< rtl::ByteSequence, std::vector< OutgoingRequest > > Map;
binaryurp/source/proxy.cxx:    std::vector< BinaryAny > inArgs;
binaryurp/source/proxy.cxx:    std::vector< BinaryAny > outArgs;
binaryurp/source/proxy.cxx:                std::vector< BinaryAny >::iterator i(outArgs.begin());
binaryurp/source/reader.cxx:    std::vector< BinaryAny > inArgs;
binaryurp/source/reader.cxx:    std::vector< BinaryAny > outArgs;
binaryurp/source/unmarshal.cxx:std::vector< BinaryAny >::iterator copyMemberValues(
binaryurp/source/unmarshal.cxx:    std::vector< BinaryAny >::iterator const & it, void * buffer) throw ()
binaryurp/source/unmarshal.cxx:    std::vector< BinaryAny >::iterator i(it);
binaryurp/source/unmarshal.cxx:            std::vector< BinaryAny > as;
binaryurp/source/unmarshal.cxx:    std::vector< BinaryAny > as;
binaryurp/source/unmarshal.cxx:    css::uno::TypeDescription const & type, std::vector< BinaryAny > * values)
binaryurp/source/unmarshal.hxx:        std::vector< BinaryAny > * values);
binaryurp/source/writer.cxx:    std::vector< BinaryAny > const & inArguments,
binaryurp/source/writer.cxx:    std::vector< BinaryAny > const & outArguments,
binaryurp/source/writer.cxx:    std::vector< BinaryAny > const & inArguments)
binaryurp/source/writer.cxx:    std::vector< BinaryAny > const & outArguments)
binaryurp/source/writer.cxx:    std::vector< BinaryAny > const & inArguments)
binaryurp/source/writer.cxx:    std::vector< BinaryAny > const & outArguments, bool setCurrentContextMode)
binaryurp/source/writer.cxx:    std::vector< BinaryAny > const & inArguments, bool currentContextMode,
binaryurp/source/writer.cxx:    std::vector< unsigned char > buf;
binaryurp/source/writer.cxx:            std::vector< BinaryAny >::const_iterator i(inArguments.begin());
binaryurp/source/writer.cxx:    std::vector< BinaryAny > const & outArguments)
binaryurp/source/writer.cxx:    std::vector< unsigned char > buf;
binaryurp/source/writer.cxx:                std::vector< BinaryAny >::const_iterator i(
binaryurp/source/writer.cxx:void Writer::sendMessage(std::vector< unsigned char > const & buffer) {
binaryurp/source/writer.cxx:    std::vector< unsigned char > header;
binaryurp/source/writer.cxx:    std::vector< unsigned char >::size_type n = buffer.size();
binaryurp/source/writer.cxx:        n = static_cast< std::vector< unsigned char >::size_type >(n - k);
binaryurp/source/writer.hxx:        std::vector< BinaryAny > const & inArguments);
binaryurp/source/writer.hxx:        std::vector< BinaryAny > const & outArguments);
binaryurp/source/writer.hxx:        std::vector< BinaryAny > const & inArguments);
binaryurp/source/writer.hxx:        std::vector< BinaryAny > const & outArguments,
binaryurp/source/writer.hxx:        std::vector< BinaryAny > const & inArguments, bool currentContextMode,
binaryurp/source/writer.hxx:        std::vector< BinaryAny > const & outArguments);
binaryurp/source/writer.hxx:    void sendMessage(std::vector< unsigned char > const & buffer);
binaryurp/source/writer.hxx:            std::vector< BinaryAny > const & inArguments,
binaryurp/source/writer.hxx:            std::vector< BinaryAny > const & outArguments,
binaryurp/source/writer.hxx:        std::vector< BinaryAny > arguments;
bridges/source/cpp_uno/gcc3_linux_x86-64/rtti.cxx:                        std::vector<std::type_info *> bases;
bridges/source/cpp_uno/shared/vtablefactory.cxx:    public std::vector<Block>, private boost::noncopyable
canvas/source/cairo/cairo_spritecanvashelper.cxx:        ::std::vector< ::basegfx::B2IRange > aUnscrollableAreas;
canvas/source/cairo/cairo_spritecanvashelper.cxx:        ::std::vector< ::basegfx::B2DRange > aUncoveredAreas;
canvas/source/cairo/cairo_spritecanvashelper.cxx:                                           const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites )
canvas/source/cairo/cairo_spritecanvashelper.cxx:                                            const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites )
canvas/source/cairo/cairo_spritecanvashelper.hxx:                           const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites );
canvas/source/cairo/cairo_spritecanvashelper.hxx:                            const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites );
canvas/source/cairo/cairo_textlayout.cxx:        typedef std::vector<FontLevel> FontLevelVector;
canvas/source/cairo/cairo_textlayout.cxx:            std::vector<cairo_glyph_t> cairo_glyphs;
canvas/source/directx/dx_9rm.cxx:            typedef std::vector<canvas::Vertex>         vertexCache_t;
canvas/source/directx/dx_canvasfont.cxx:        std::vector< sal_Unicode > pStrBuf(nLen+1,0);
canvas/source/directx/dx_canvashelper.cxx:            const ::std::vector< Gdiplus::REAL >& rDashArray(
canvas/source/directx/dx_canvashelper.cxx:                ::comphelper::sequenceToContainer< ::std::vector< Gdiplus::REAL > >(
canvas/source/directx/dx_canvashelper_texturefill.cxx:                                 const std::vector< Gdiplus::Color >&           rColors,
canvas/source/directx/dx_canvashelper_texturefill.cxx:                                 const std::vector< Gdiplus::REAL >&            rStops,
canvas/source/directx/dx_canvashelper_texturefill.cxx:                                    const std::vector< Gdiplus::Color >&           rColors,
canvas/source/directx/dx_canvashelper_texturefill.cxx:                                    const std::vector< Gdiplus::REAL >&            rStops,
canvas/source/directx/dx_canvashelper_texturefill.cxx:                           const std::vector< Gdiplus::Color >&           rColors,
canvas/source/directx/dx_canvashelper_texturefill.cxx:                           const std::vector< Gdiplus::REAL >&            rStops,
canvas/source/directx/dx_canvashelper_texturefill.cxx:                    std::vector< Gdiplus::Color > aColors(rValues.maColors.getLength());
canvas/source/directx/dx_canvashelper_texturefill.cxx:                    std::vector< Gdiplus::REAL > aStops;
canvas/source/directx/dx_impltools.cxx:                                             ::std::vector< Gdiplus::PointF >&  rPoints,
canvas/source/directx/dx_impltools.cxx:            ::std::vector< Gdiplus::PointF > aPoints;
canvas/source/directx/dx_impltools.cxx:            ::std::vector< Gdiplus::PointF >    aPoints;
canvas/source/directx/dx_impltools.cxx:            ::std::vector< Gdiplus::PointF >    aPoints;
canvas/source/directx/dx_spritecanvashelper.cxx:        ::std::vector< ::basegfx::B2DRange > aUncoveredAreas;
canvas/source/directx/dx_spritecanvashelper.cxx:                                           const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites )
canvas/source/directx/dx_spritecanvashelper.cxx:                                            const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites )
canvas/source/directx/dx_spritecanvashelper.hxx:                           const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites );
canvas/source/directx/dx_spritecanvashelper.hxx:                            const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites );
canvas/source/factory/cf_service.cxx:    typedef std::vector< AvailPair >                    AvailVector;
canvas/source/factory/cf_service.cxx:    typedef std::vector< CachePair >                    CacheVector;
canvas/source/opengl/ogl_canvascustomsprite.cxx:        std::vector<double> aVec;
canvas/source/opengl/ogl_canvashelper.hxx:        typedef o3tl::cow_wrapper< std::vector<Action>,
canvas/source/opengl/ogl_canvastools.cxx:    void renderOSD( const std::vector<double>& rNumbers, double scale )
canvas/source/opengl/ogl_canvastools.hxx:    void renderOSD( const std::vector<double>& rNumbers, double scale );
canvas/source/opengl/ogl_spritedevicehelper.cxx:        std::vector< ::rtl::Reference<CanvasCustomSprite> > aSprites;
canvas/source/opengl/ogl_spritedevicehelper.cxx:                       std::vector< ::rtl::Reference< CanvasCustomSprite > > >(aSprites));
canvas/source/opengl/ogl_spritedevicehelper.cxx:        std::vector<double> aVec; aVec.push_back(fps);
canvas/source/tools/canvascustomspritehelper.cxx:                    typedef ::std::vector< ::basegfx::B2DRectangle > VectorOfRects;
canvas/source/tools/canvastools.cxx:                             ::std::vector< ::basegfx::B2IRange >& o_ClippedAreas,
canvas/source/tools/surfaceproxy.hxx:        std::vector<SurfaceSharedPtr> maSurfaceList;
canvas/source/vcl/canvashelper.cxx:                const ::std::vector<double>& aDashArray(
canvas/source/vcl/canvashelper.cxx:                    ::comphelper::sequenceToContainer< ::std::vector<double> >(strokeAttributes.DashArray) );
canvas/source/vcl/canvashelper_texturefill.cxx:                                 const std::vector< ::Color >&                  rColors )
canvas/source/vcl/canvashelper_texturefill.cxx:                                    const std::vector< ::Color >&                  rColors )
canvas/source/vcl/canvashelper_texturefill.cxx:                             const std::vector< ::Color >&                  rColors,
canvas/source/vcl/canvashelper_texturefill.cxx:                           const std::vector< ::Color >&                   rColors,
canvas/source/vcl/canvashelper_texturefill.cxx:                        std::vector< ::Color > aColors(rValues.maColors.getLength());
canvas/source/vcl/spritecanvashelper.cxx:        ::std::vector< ::basegfx::B2IRange > aUnscrollableAreas;
canvas/source/vcl/spritecanvashelper.cxx:        ::std::vector< ::basegfx::B2DRange > aUncoveredAreas;
canvas/source/vcl/spritecanvashelper.cxx:                                           const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites )
canvas/source/vcl/spritecanvashelper.cxx:                                            const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites )
canvas/source/vcl/spritecanvashelper.hxx:                           const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites );
canvas/source/vcl/spritecanvashelper.hxx:                            const ::std::vector< ::canvas::Sprite::Reference >& rSortedUpdateSprites );
canvas/source/vcl/textlayout.cxx:        std::vector< uno::Reference< rendering::XPolyPolygon2D> > aOutlineSequence;
chart2/inc/ChartModel.hxx:    ::std::vector< GraphicObject >                                               m_aGraphicObjectVector;
chart2/inc/ChartView.hxx:    ::std::vector< std::vector< VDataSeries* > > m_aDataSeriesList;
chart2/inc/ChartView.hxx:    std::vector< VCoordinateSystem* > m_aVCooSysList;
chart2/qa/extras/chart2export.cxx:    std::vector<uno::Sequence<uno::Any> > aLabels = getDataSeriesLabelsFromChartType(xCT);
chart2/qa/extras/chart2export.cxx:    std::vector<std::vector<double> > aYValues = getDataSeriesYValuesFromChartType(xCT);
chart2/qa/extras/chart2export.cxx:    std::vector<uno::Sequence<uno::Any> > aLabels = getDataSeriesLabelsFromChartType(xCT);
chart2/qa/extras/chart2import.cxx:    std::vector<uno::Sequence<uno::Any> > aLabels = getDataSeriesLabelsFromChartType(xCT);
chart2/qa/extras/chart2import.cxx:    std::vector<uno::Sequence<uno::Any> > aLabels = getDataSeriesLabelsFromChartType(xCT);
chart2/qa/extras/chart2import.cxx:    std::vector<uno::Sequence<uno::Any> > aLabels = getDataSeriesLabelsFromChartType(xCT);
chart2/qa/extras/charttest.hxx:std::vector<std::vector<double> > getDataSeriesYValuesFromChartType( const Reference<chart2::XChartType>& xCT )
chart2/qa/extras/charttest.hxx:    std::vector<std::vector<double> > aRet;
chart2/qa/extras/charttest.hxx:                std::vector<double> aValues;
chart2/qa/extras/charttest.hxx:std::vector<uno::Sequence<uno::Any> > getDataSeriesLabelsFromChartType( const Reference<chart2::XChartType>& xCT )
chart2/qa/extras/charttest.hxx:    std::vector<uno::Sequence<uno::Any> > aRet;
chart2/qa/unit/common_functor_test.cxx:    std::vector<css::uno::Any> aInput;
chart2/qa/unit/common_functor_test.cxx:    std::vector<OUString> aOutput;
chart2/qa/unit/common_functor_test.cxx:    std::vector<double> aInput;
chart2/qa/unit/common_functor_test.cxx:    std::vector<OUString> aOutput;
chart2/source/controller/accessibility/AccessibleBase.cxx:        ::std::vector< ChildOIDMap::key_type > aAccChildren;
chart2/source/controller/accessibility/AccessibleBase.cxx:        ::std::vector< ObjectHierarchy::tOID > aChildrenToRemove, aChildrenToAdd;
chart2/source/controller/accessibility/AccessibleBase.cxx:        ::std::vector< ObjectHierarchy::tOID >::const_iterator aIt( aChildrenToRemove.begin());
chart2/source/controller/chartapiwrapper/AreaWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/AreaWrapper.cxx:const std::vector< WrappedProperty* > AreaWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/AreaWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/AreaWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/chartapiwrapper/AxisWrapper.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/AxisWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/AxisWrapper.cxx:const std::vector< WrappedProperty* > AxisWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/AxisWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/AxisWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/chartapiwrapper/ChartDocumentWrapper.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/ChartDocumentWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/ChartDocumentWrapper.cxx:    ::std::vector< uno::Reference< drawing::XShape > > aShapeVector;
chart2/source/controller/chartapiwrapper/ChartDocumentWrapper.cxx:            ::std::vector< uno::Reference< drawing::XShape > >::iterator aIter;
chart2/source/controller/chartapiwrapper/ChartDocumentWrapper.cxx:const std::vector< WrappedProperty* > ChartDocumentWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/ChartDocumentWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.cxx:    ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.cxx:        ::std::vector< uno::Reference< chart2::XDataSeries > > aSeriesList(
chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.cxx:const std::vector< WrappedProperty* > DataSeriesPointWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/DataSeriesPointWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:    ::std::vector< uno::Reference< chart2::XDataSeries > > aSeriesList(
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:        ::std::vector< uno::Reference< chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:        ::std::vector< Reference< chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:        ::std::vector< Reference< chart2::XDataSeries > >::const_iterator aIt =
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:        ::std::vector< Reference< chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:        ::std::vector< Reference< chart2::XDataSeries > >::const_iterator aIt =
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:const std::vector< WrappedProperty* > DiagramWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/DiagramWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/DiagramWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/chartapiwrapper/GridWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/GridWrapper.cxx:const std::vector< WrappedProperty* > GridWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/GridWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/GridWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/chartapiwrapper/LegendWrapper.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/LegendWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/LegendWrapper.cxx:const std::vector< WrappedProperty* > LegendWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/LegendWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/LegendWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/chartapiwrapper/MinMaxLineWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/TitleWrapper.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/TitleWrapper.cxx:        ::std::vector< beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/TitleWrapper.cxx:const std::vector< WrappedProperty* > TitleWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/TitleWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/TitleWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/chartapiwrapper/UpDownBarWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/WallFloorWrapper.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/controller/chartapiwrapper/WallFloorWrapper.cxx:const std::vector< WrappedProperty* > WallFloorWrapper::createWrappedProperties()
chart2/source/controller/chartapiwrapper/WallFloorWrapper.cxx:    ::std::vector< ::chart::WrappedProperty* > aWrappedProperties;
chart2/source/controller/chartapiwrapper/WallFloorWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/chartapiwrapper/WrappedAutomaticPositionProperties.cxx:void lcl_addWrappedProperties( std::vector< WrappedProperty* >& rList )
chart2/source/controller/chartapiwrapper/WrappedAutomaticPositionProperties.cxx:void WrappedAutomaticPositionProperties::addProperties( ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/WrappedAutomaticPositionProperties.cxx:void WrappedAutomaticPositionProperties::addWrappedProperties( std::vector< WrappedProperty* >& rList )
chart2/source/controller/chartapiwrapper/WrappedAutomaticPositionProperties.hxx:    static void addProperties( ::std::vector< ::com::sun::star::beans::Property >& rOutProperties );
chart2/source/controller/chartapiwrapper/WrappedAutomaticPositionProperties.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList );
chart2/source/controller/chartapiwrapper/WrappedAxisAndGridExistenceProperties.cxx:void WrappedAxisAndGridExistenceProperties::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedAxisAndGridExistenceProperties.cxx:void WrappedAxisTitleExistenceProperties::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedAxisAndGridExistenceProperties.cxx:void WrappedAxisLabelExistenceProperties::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedAxisAndGridExistenceProperties.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedAxisAndGridExistenceProperties.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedAxisAndGridExistenceProperties.hxx:   static void addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedCharacterHeightProperty.cxx:void WrappedCharacterHeightProperty::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedCharacterHeightProperty.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList, ReferenceSizePropertyProvider* pRefSizePropProvider );
chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.cxx:void lcl_addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.cxx:void WrappedDataCaptionProperties::addProperties( std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.cxx:void WrappedDataCaptionProperties::addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.cxx:void WrappedDataCaptionProperties::addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.hxx:    static void addProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.hxx:    static void addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedDataCaptionProperties.hxx:    static void addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedGL3DProperties.cxx:void WrappedGL3DProperties::addProperties( std::vector<css::beans::Property> & rOutProps )
chart2/source/controller/chartapiwrapper/WrappedGL3DProperties.cxx:    std::vector<WrappedProperty*>& rList, const std::shared_ptr<Chart2ModelContact>& pChart2ModelContact )
chart2/source/controller/chartapiwrapper/WrappedGL3DProperties.hxx:    static void addProperties( std::vector<css::beans::Property> & rOutProps );
chart2/source/controller/chartapiwrapper/WrappedGL3DProperties.hxx:        std::vector<WrappedProperty*>& rList, const std::shared_ptr<Chart2ModelContact>& pChart2ModelContact );
chart2/source/controller/chartapiwrapper/WrappedScaleProperty.cxx:void WrappedScaleProperty::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedScaleProperty.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList, std::shared_ptr< Chart2ModelContact > spChart2ModelContact );
chart2/source/controller/chartapiwrapper/WrappedScaleTextProperties.cxx:void WrappedScaleTextProperties::addProperties( ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/WrappedScaleTextProperties.cxx:void WrappedScaleTextProperties::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedScaleTextProperties.hxx:    static void addProperties( ::std::vector< ::com::sun::star::beans::Property >& rOutProperties );
chart2/source/controller/chartapiwrapper/WrappedScaleTextProperties.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSceneProperty.cxx:void WrappedSceneProperty::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSceneProperty.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSeriesOrDiagramProperty.hxx:            ::std::vector< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/chartapiwrapper/WrappedSeriesOrDiagramProperty.hxx:            ::std::vector< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > >::const_iterator aIter =
chart2/source/controller/chartapiwrapper/WrappedSeriesOrDiagramProperty.hxx:            ::std::vector< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/chartapiwrapper/WrappedSeriesOrDiagramProperty.hxx:            ::std::vector< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > >::const_iterator aIter =
chart2/source/controller/chartapiwrapper/WrappedSplineProperties.cxx:void WrappedSplineProperties::addProperties( ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/WrappedSplineProperties.cxx:void WrappedSplineProperties::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSplineProperties.hxx:    static void addProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/controller/chartapiwrapper/WrappedSplineProperties.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.cxx:void lcl_addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.cxx:void WrappedStatisticProperties::addProperties( ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.cxx:void WrappedStatisticProperties::addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.cxx:void WrappedStatisticProperties::addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.hxx:    static void addProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.hxx:    static void addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedStatisticProperties.hxx:    static void addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedStockProperties.cxx:        ::std::vector< uno::Reference< chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/chartapiwrapper/WrappedStockProperties.cxx:        ::std::vector< uno::Reference< chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/chartapiwrapper/WrappedStockProperties.cxx:void WrappedStockProperties::addProperties( ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/WrappedStockProperties.cxx:void WrappedStockProperties::addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedStockProperties.hxx:    static void addProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/controller/chartapiwrapper/WrappedStockProperties.hxx:    static void addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.cxx:void lcl_addWrappedProperties( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.cxx:void WrappedSymbolProperties::addProperties( ::std::vector< Property > & rOutProperties )
chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.cxx:void WrappedSymbolProperties::addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.cxx:void WrappedSymbolProperties::addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.hxx:    static void addProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.hxx:    static void addWrappedPropertiesForSeries( std::vector< WrappedProperty* >& rList
chart2/source/controller/chartapiwrapper/WrappedSymbolProperties.hxx:    static void addWrappedPropertiesForDiagram( std::vector< WrappedProperty* >& rList
chart2/source/controller/dialogs/DataBrowser.cxx:    const ::std::vector< std::shared_ptr< ::chart::impl::SeriesHeader > > & rSeriesHeader,
chart2/source/controller/dialogs/DataBrowser.cxx:    sal_uInt16 nCol, const ::std::vector< std::shared_ptr< ::chart::impl::SeriesHeader > > & rSeriesHeader )
chart2/source/controller/dialogs/DataBrowser.hxx:    typedef ::std::vector< std::shared_ptr< impl::SeriesHeader > > tSeriesHeaderContainer;
chart2/source/controller/dialogs/DataBrowserModel.cxx:typedef ::std::vector< Reference< chart2::data::XLabeledDataSequence > > lcl_tSharedSeqVec;
chart2/source/controller/dialogs/DataBrowserModel.cxx:    std::vector<Reference<chart2::data::XLabeledDataSequence> > aAllDataSeqs =
chart2/source/controller/dialogs/DataBrowserModel.cxx:    std::vector<sal_Int32> aSequenceIndexesToDelete;
chart2/source/controller/dialogs/DataBrowserModel.cxx:        std::vector<Reference<chart2::data::XLabeledDataSequence> >::const_iterator aHitIt(
chart2/source/controller/dialogs/DataBrowserModel.cxx:    for( ::std::vector< sal_Int32 >::reverse_iterator aIt(
chart2/source/controller/dialogs/DataBrowserModel.cxx:        ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aSequences;
chart2/source/controller/dialogs/DataBrowserModel.cxx:        for( ::std::vector< Reference< chart2::data::XLabeledDataSequence > >::const_iterator aIt( aSequences.begin());
chart2/source/controller/dialogs/DataBrowserModel.hxx:    typedef ::std::vector< tDataHeader > tDataHeaderVector;
chart2/source/controller/dialogs/DataBrowserModel.hxx:    typedef ::std::vector< tDataColumn > tDataColumnVector;
chart2/source/controller/dialogs/DialogModel.cxx:    typedef ::std::vector< ::chart::DialogModel::tSeriesWithChartTypeByName > tContainerType;
chart2/source/controller/dialogs/DialogModel.cxx:            ::std::vector< Reference< data::XLabeledDataSequence > > aNewSequences;
chart2/source/controller/dialogs/DialogModel.cxx:::std::vector< Reference< XDataSeriesContainer > >
chart2/source/controller/dialogs/DialogModel.cxx:    ::std::vector< Reference< XDataSeriesContainer > > aResult;
chart2/source/controller/dialogs/DialogModel.cxx:::std::vector< DialogModel::tSeriesWithChartTypeByName >
chart2/source/controller/dialogs/DialogModel.cxx:    ::std::vector< tSeriesWithChartTypeByName > aResult;
chart2/source/controller/dialogs/DialogModel.cxx:    ::std::vector< Reference< XDataSeriesContainer > > aContainers(
chart2/source/controller/dialogs/DialogModel.cxx:    std::vector<Reference<XDataSeries> > aSeries = SequenceToVector(xSeriesCnt->getDataSeries());
chart2/source/controller/dialogs/DialogModel.cxx:    std::vector<Reference<XDataSeries> >::iterator aIt =
chart2/source/controller/dialogs/DialogModel.cxx:            ::std::vector< Reference< XDataSeries > > aSeriesToReUse(
chart2/source/controller/dialogs/DialogModel.cxx:    const ::std::vector< Reference< XDataSeries > > & rSeriesToReUse,
chart2/source/controller/dialogs/DialogModel.cxx:        ::std::vector< Reference< XDataSeriesContainer > > aSeriesCnt( getAllDataSeriesContainers());
chart2/source/controller/dialogs/DialogModel.cxx:        ::std::vector< Sequence< Reference< XDataSeries > > > aNewSeries(
chart2/source/controller/dialogs/DialogModel.cxx:        ::std::vector< Sequence< Reference< XDataSeries > > >::const_iterator aSrcIt( aNewSeries.begin());
chart2/source/controller/dialogs/DialogModel.cxx:        ::std::vector< Reference< XDataSeriesContainer > >::iterator aDestIt( aSeriesCnt.begin());
chart2/source/controller/dialogs/DialogModel.cxx:    ::std::vector< Reference< XDataSeriesContainer > > aCnt( getAllDataSeriesContainers());
chart2/source/controller/dialogs/DialogModel.hxx:    ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/controller/dialogs/DialogModel.hxx:    ::std::vector< tSeriesWithChartTypeByName >
chart2/source/controller/dialogs/DialogModel.hxx:        const ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/controller/dialogs/ObjectNameProvider.cxx:                ::std::vector< Reference< chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/dialogs/ObjectNameProvider.cxx:                ::std::vector< Reference< chart2::XDataSeries > > aSeriesVector(
chart2/source/controller/dialogs/dlg_CreationWizard_UNO.cxx:        ::std::vector< uno::Type > aTypes;
chart2/source/controller/dialogs/res_DataLabel.cxx:    std::vector< sal_Int32 > aAvailabelPlacementList;
chart2/source/controller/dialogs/tp_ChartType.cxx:    ::std::vector< ChartTypeDialogController* >::const_iterator       aIter = m_aChartTypeDialogControllerList.begin();
chart2/source/controller/dialogs/tp_ChartType.cxx:    const ::std::vector< ChartTypeDialogController* >::const_iterator aEnd  = m_aChartTypeDialogControllerList.end();
chart2/source/controller/dialogs/tp_ChartType.cxx:    ::std::vector< ChartTypeDialogController* >::const_iterator       aIter = m_aChartTypeDialogControllerList.begin();
chart2/source/controller/dialogs/tp_ChartType.cxx:    const ::std::vector< ChartTypeDialogController* >::const_iterator aEnd  = m_aChartTypeDialogControllerList.end();
chart2/source/controller/dialogs/tp_ChartType.cxx:    ::std::vector< ChartTypeDialogController* >::size_type nM = static_cast< ::std::vector< ChartTypeDialogController* >::size_type >(
chart2/source/controller/dialogs/tp_ChartType.cxx:    ::std::vector< ChartTypeDialogController* >::iterator             aIter = m_aChartTypeDialogControllerList.begin();
chart2/source/controller/dialogs/tp_ChartType.cxx:    const ::std::vector< ChartTypeDialogController* >::const_iterator aEnd  = m_aChartTypeDialogControllerList.end();
chart2/source/controller/dialogs/tp_ChartType.hxx:    ::std::vector< ChartTypeDialogController* > m_aChartTypeDialogControllerList;
chart2/source/controller/dialogs/tp_DataSource.cxx:    ::std::vector< DialogModel::tSeriesWithChartTypeByName > aSeries(
chart2/source/controller/dialogs/tp_DataSource.cxx:    for( ::std::vector< DialogModel::tSeriesWithChartTypeByName >::const_iterator aIt = aSeries.begin();
chart2/source/controller/dialogs/tp_DataSource.cxx:        ::std::vector< Reference< XDataSeriesContainer > > aCntVec(
chart2/source/controller/dialogs/tp_SeriesToAxis.cxx:        std::vector< sal_Int32 > aMissingValueTreatments;
chart2/source/controller/drawinglayer/DrawViewWrapper.cxx:                ::std::vector< const E3dCompoundObject* > aHitList;
chart2/source/controller/inc/AccessibleBase.hxx:    typedef ::std::vector< css::uno::Reference< css::accessibility::XAccessible > > ChildListVectorType;
chart2/source/controller/inc/AxisItemConverter.hxx:    ::std::vector< ItemConverter * >               m_aConverters;
chart2/source/controller/inc/ChartDocumentWrapper.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties() override;
chart2/source/controller/inc/CommandDispatchContainer.hxx:        ::std::vector< ::com::sun::star::uno::Reference< ::com::sun::star::frame::XDispatch > > tDisposeVector;
chart2/source/controller/inc/DataPointItemConverter.hxx:    ::std::vector< ItemConverter * >    m_aConverters;
chart2/source/controller/inc/LegendItemConverter.hxx:    ::std::vector< ItemConverter * >    m_aConverters;
chart2/source/controller/inc/MultipleItemConverter.hxx:    ::std::vector< ItemConverter * >            m_aConverters;
chart2/source/controller/inc/ObjectHierarchy.hxx:    typedef ::std::vector< tOID > tChildContainer;
chart2/source/controller/inc/RegressionEquationItemConverter.hxx:    ::std::vector< ItemConverter * >    m_aConverters;
chart2/source/controller/inc/TextLabelItemConverter.hxx:    std::vector<ItemConverter*> maConverters;
chart2/source/controller/inc/TitleItemConverter.hxx:    ::std::vector< ItemConverter * >    m_aConverters;
chart2/source/controller/itemsetwrapper/MultipleChartConverters.cxx:    ::std::vector< uno::Reference< chart2::XDataSeries > > aSeriesList(
chart2/source/controller/itemsetwrapper/MultipleChartConverters.cxx:    ::std::vector< uno::Reference< chart2::XDataSeries > >::const_iterator aIt;
chart2/source/controller/itemsetwrapper/MultipleChartConverters.cxx:    ::std::vector< uno::Reference< chart2::XDataSeries > > aSeriesList(
chart2/source/controller/itemsetwrapper/MultipleChartConverters.cxx:    ::std::vector< uno::Reference< chart2::XDataSeries > >::const_iterator aIt;
chart2/source/controller/itemsetwrapper/MultipleItemConverter.cxx:    ::std::vector< ItemConverter* >::const_iterator       aIter = m_aConverters.begin();
chart2/source/controller/itemsetwrapper/MultipleItemConverter.cxx:    const ::std::vector< ItemConverter* >::const_iterator aEnd  = m_aConverters.end();
chart2/source/controller/main/ChartController_Insert.cxx:        ::std::vector< uno::Reference< chart2::XDataSeries > > aSeries(
chart2/source/controller/main/ChartController_Tools.cxx:            ::std::vector< Reference< chart2::XRegressionCurve > > aRegressionCurves(
chart2/source/controller/main/ChartController_Window.cxx:                                    ::std::vector< sal_Int32 > aIndices( ContainerHelper::SequenceToVector( aAttributedDataPointIndexList ) );
chart2/source/controller/main/ChartController_Window.cxx:                                    ::std::vector< sal_Int32 >::iterator aIt = ::std::find( aIndices.begin(), aIndices.end(), nPointIndex );
chart2/source/controller/main/ChartDropTargetHelper.cxx:::std::vector< OUString > lcl_getStringsFromByteSequence(
chart2/source/controller/main/ChartDropTargetHelper.cxx:    ::std::vector< OUString > aResult;
chart2/source/controller/main/ChartDropTargetHelper.cxx:                ::std::vector< OUString > aStrings( lcl_getStringsFromByteSequence( aBytes ));
chart2/source/controller/main/DrawCommandDispatch.cxx:                ::std::vector< OUString > aObjList;
chart2/source/controller/main/ElementSelector.cxx:void lcl_addObjectsToList( const ObjectHierarchy& rHierarchy, const ObjectHierarchy::tOID & rParent, std::vector< ListBoxEntryData >& rEntries
chart2/source/controller/main/ElementSelector.cxx:        std::vector< ListBoxEntryData >::iterator aIt( m_aEntries.begin() );
chart2/source/controller/main/ElementSelector.hxx:        ::std::vector< ListBoxEntryData > m_aEntries;
chart2/source/controller/sidebar/ChartAreaPanel.cxx:    std::vector<ObjectType> aAcceptedTypes { OBJECTTYPE_PAGE, OBJECTTYPE_DIAGRAM,
chart2/source/controller/sidebar/ChartLinePanel.cxx:    std::vector<ObjectType> aAcceptedTypes { OBJECTTYPE_PAGE, OBJECTTYPE_DIAGRAM,
chart2/source/controller/sidebar/ChartSidebarSelectionListener.cxx:void ChartSidebarSelectionListener::setAcceptedTypes(const std::vector<ObjectType>& aTypes)
chart2/source/controller/sidebar/ChartSidebarSelectionListener.hxx:    void setAcceptedTypes(const std::vector<ObjectType>& aTypes);
chart2/source/controller/sidebar/ChartSidebarSelectionListener.hxx:    std::vector<ObjectType> maTypes;
chart2/source/inc/AxisHelper.hxx:    SAL_DLLPRIVATE static std::vector<
chart2/source/inc/CharacterProperties.hxx:        ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/inc/ChartModelHelper.hxx:    SAL_DLLPRIVATE static ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/inc/ChartModelHelper.hxx:    SAL_DLLPRIVATE static ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/inc/ChartModelHelper.hxx:    static ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/inc/CloneHelper.hxx:        const ::std::vector< Interface > & rSource,
chart2/source/inc/CloneHelper.hxx:        ::std::vector< Interface > & rDestination )
chart2/source/inc/CommonConverters.hxx:    ::std::vector< T >
chart2/source/inc/CommonConverters.hxx:    FlattenVector( const ::std::vector< ::std::vector< T > > & rVecVec )
chart2/source/inc/CommonConverters.hxx:    typedef ::std::vector< T > tFlatVec;
chart2/source/inc/CommonConverters.hxx:    typedef ::std::vector< tFlatVec > tVecVec;
chart2/source/inc/ContainerHelper.hxx:    ::std::vector< sal_Int32 > aVector(
chart2/source/inc/ContainerHelper.hxx:        ContainerToSequence::SequenceToSTLSequenceContainer< ::std::vector< sal_Int32 > >( aSequence );
chart2/source/inc/ContainerHelper.hxx:    ::std::vector< sal_Int32 > aVector( ContainerHelper::SequenceToVector( aSequence ));
chart2/source/inc/ContainerHelper.hxx:    ::std::vector< T >
chart2/source/inc/ContainerHelper.hxx:    return SequenceToSTLSequenceContainer< ::std::vector< T > >( rSeq );
chart2/source/inc/DataSeriesHelper.hxx:OOO_DLLPUBLIC_CHARTTOOLS ::std::vector<
chart2/source/inc/DataSeriesHelper.hxx:std::vector<css::uno::Reference<css::chart2::data::XLabeledDataSequence> >
chart2/source/inc/DiagramHelper.hxx:    static ::std::vector<
chart2/source/inc/ErrorBar.hxx:    typedef ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/inc/ExplicitCategoriesProvider.hxx:    const std::vector<ComplexCategory>* getCategoriesByLevel( sal_Int32 nLevel );
chart2/source/inc/ExplicitCategoriesProvider.hxx:    const std::vector< double >&  getDateCategories();
chart2/source/inc/ExplicitCategoriesProvider.hxx:    ::std::vector< ::std::vector< ComplexCategory > >   m_aComplexCats;
chart2/source/inc/ExplicitCategoriesProvider.hxx:    std::vector< double >  m_aDateCategories;
chart2/source/inc/FillProperties.hxx:        ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/inc/InternalData.hxx:    void setColumnValues( sal_Int32 nColumnIndex, const ::std::vector< double > & rNewData );
chart2/source/inc/InternalData.hxx:    void setRowValues( sal_Int32 nRowIndex, const ::std::vector< double > & rNewData );
chart2/source/inc/InternalData.hxx:    void setComplexColumnLabel( sal_Int32 nColumnIndex, const ::std::vector< ::com::sun::star::uno::Any >& rComplexLabel );
chart2/source/inc/InternalData.hxx:    void setComplexRowLabel( sal_Int32 nRowIndex, const ::std::vector< ::com::sun::star::uno::Any >& rComplexLabel );
chart2/source/inc/InternalData.hxx:    ::std::vector< ::com::sun::star::uno::Any > getComplexColumnLabel( sal_Int32 nColumnIndex ) const;
chart2/source/inc/InternalData.hxx:    ::std::vector< ::com::sun::star::uno::Any > getComplexRowLabel( sal_Int32 nRowIndex ) const;
chart2/source/inc/InternalData.hxx:    typedef ::std::vector< ::std::vector< ::com::sun::star::uno::Any > > tVecVecAny; //inner index is hierarchical level
chart2/source/inc/LinePropertiesHelper.hxx:        ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/inc/MovingAverageRegressionCurveCalculator.hxx:    std::vector<double> aYList;
chart2/source/inc/MovingAverageRegressionCurveCalculator.hxx:    std::vector<double> aXList;
chart2/source/inc/PolynomialRegressionCurveCalculator.hxx:    std::vector<double> mCoefficients;
chart2/source/inc/RegressionCalculationHelper.hxx:typedef ::std::pair< ::std::vector< double >, ::std::vector< double > > tDoubleVectorPair;
chart2/source/inc/RegressionCurveHelper.hxx:    OOO_DLLPUBLIC_CHARTTOOLS std::vector<css::uno::Reference<css::chart2::XRegressionCurve> >
chart2/source/inc/SceneProperties.hxx:        ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/inc/UserDefinedProperties.hxx:        ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/inc/WrappedIgnoreProperty.hxx:    static void addIgnoreLineProperties( std::vector< WrappedProperty* >& rList );
chart2/source/inc/WrappedIgnoreProperty.hxx:    static void addIgnoreFillProperties( std::vector< WrappedProperty* >& rList );
chart2/source/inc/WrappedIgnoreProperty.hxx:    SAL_DLLPRIVATE static void addIgnoreFillProperties_without_BitmapProperties( std::vector< WrappedProperty* >& rList );
chart2/source/inc/WrappedIgnoreProperty.hxx:    SAL_DLLPRIVATE static void addIgnoreFillProperties_only_BitmapProperties( std::vector< WrappedProperty* >& rList );
chart2/source/inc/WrappedPropertySet.hxx:    virtual const std::vector< WrappedProperty* > createWrappedProperties()=0;
chart2/source/inc/chartview/ExplicitScaleValues.hxx:    ::std::vector< ExplicitSubIncrement > SubIncrements;
chart2/source/model/filter/XMLFilter.cxx:            ::std::vector< beans::PropertyValue > aPropertiesForStorage;
chart2/source/model/filter/XMLFilter.cxx:            ::std::vector< beans::PropertyValue > aPropertiesForStorage;
chart2/source/model/inc/BaseCoordinateSystem.hxx:    typedef ::std::vector< ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/model/inc/BaseCoordinateSystem.hxx:    ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/model/inc/DataSeries.hxx:    typedef ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/model/inc/DataSeries.hxx:        ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/model/inc/Diagram.hxx:        ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/model/main/Axis.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/main/Axis.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/Axis.cxx:    std::vector< Reference< beans::XPropertySet > > aOldBroadcasters;
chart2/source/model/main/Axis.cxx:    std::vector< Reference< beans::XPropertySet > > aNewBroadcasters;
chart2/source/model/main/Axis.cxx:    std::vector< Reference< beans::XPropertySet > >::iterator aBroadcaster = aOldBroadcasters.begin();
chart2/source/model/main/BaseCoordinateSystem.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/main/BaseCoordinateSystem.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/BaseCoordinateSystem.cxx:    ::std::vector< uno::Reference< chart2::XChartType > >::iterator
chart2/source/model/main/ChartModel.cxx:        std::vector< uno::Reference<uno::XInterface> > aSeq = m_aControllers.getElements();
chart2/source/model/main/DataPoint.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/DataPointProperties.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/main/DataPointProperties.hxx:        ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/model/main/DataSeries.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/DataSeries.cxx:    ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aValuesSeries(
chart2/source/model/main/DataSeriesProperties.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/main/DataSeriesProperties.hxx:        ::std::vector< ::com::sun::star::beans::Property > & rOutProperties );
chart2/source/model/main/Diagram.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/main/Diagram.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/Diagram.cxx:typedef ::std::vector< lcl_tCooSysRef >               lcl_tCooSysVector;
chart2/source/model/main/Diagram.cxx:        ::std::vector< uno::Reference< chart2::XCoordinateSystem > >::iterator
chart2/source/model/main/FormattedString.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/GridProperties.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/main/GridProperties.cxx:        ::std::vector< Property > aProperties;
chart2/source/model/main/Legend.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/main/Legend.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/PageBackground.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/StockBar.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/Title.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/main/Title.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/main/Wall.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/AreaChartTypeTemplate.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/AreaChartTypeTemplate.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/AreaChartTypeTemplate.cxx:    ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/model/template/AreaChartTypeTemplate.cxx:    for( ::std::vector< Reference< chart2::XDataSeries > >::iterator aIt( aSeriesVec.begin());
chart2/source/model/template/BarChartTypeTemplate.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/BarChartTypeTemplate.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/BarChartTypeTemplate.cxx:    ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/model/template/BarChartTypeTemplate.cxx:    for( ::std::vector< Reference< chart2::XDataSeries > >::iterator aIt( aSeriesVec.begin());
chart2/source/model/template/BubbleChartType.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/BubbleChartTypeTemplate.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/CandleStickChartType.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/CandleStickChartType.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/CandleStickChartType.cxx:    ::std::vector< OUString > aMandRoles;
chart2/source/model/template/CandleStickChartType.cxx:    ::std::vector< OUString > aOptRoles;
chart2/source/model/template/ChartType.hxx:        ::std::vector< ::com::sun::star::uno::Reference<
chart2/source/model/template/ChartTypeManager.cxx:    ::std::vector< OUString > aServices;
chart2/source/model/template/ColumnChartType.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/ColumnChartType.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/ColumnLineChartTypeTemplate.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/ColumnLineChartTypeTemplate.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/LineChartType.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/LineChartType.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/LineChartTypeTemplate.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/LineChartTypeTemplate.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/LineChartTypeTemplate.cxx:        ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/model/template/LineChartTypeTemplate.cxx:        for( ::std::vector< Reference< chart2::XDataSeries > >::const_iterator aIt =
chart2/source/model/template/NetChartTypeTemplate.cxx:        ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/model/template/NetChartTypeTemplate.cxx:        for( ::std::vector< Reference< chart2::XDataSeries > >::const_iterator aIt =
chart2/source/model/template/PieChartType.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/PieChartType.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/PieChartTypeTemplate.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/PieChartTypeTemplate.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/PieChartTypeTemplate.cxx:            ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/model/template/PieChartTypeTemplate.cxx:    ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/model/template/PieChartTypeTemplate.cxx:    for( ::std::vector< Reference< chart2::XDataSeries > >::iterator aIt( aSeriesVec.begin());
chart2/source/model/template/ScatterChartType.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/ScatterChartType.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/ScatterChartTypeTemplate.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/ScatterChartTypeTemplate.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/ScatterChartTypeTemplate.cxx:        ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/model/template/ScatterChartTypeTemplate.cxx:        for( ::std::vector< Reference< chart2::XDataSeries > >::const_iterator aIt =
chart2/source/model/template/StockChartTypeTemplate.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/model/template/StockChartTypeTemplate.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/model/template/StockChartTypeTemplate.cxx:        ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/model/template/StockChartTypeTemplate.cxx:        for( ::std::vector< Reference< chart2::XDataSeries > >::iterator aIt( aSeriesVec.begin());
chart2/source/model/template/StockChartTypeTemplate.cxx:        std::vector< Reference< chart2::XChartType > > aChartTypeVec;
chart2/source/tools/AxisHelper.cxx:                        ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aXValues(
chart2/source/tools/AxisHelper.cxx:    ::std::vector< Reference< chart2::XDataSeries > > aSeriesVector( DiagramHelper::getDataSeriesFromDiagram( xDiagram ) );
chart2/source/tools/AxisHelper.cxx:    ::std::vector< Reference< chart2::XDataSeries > >::const_iterator aIt = aSeriesVector.begin();
chart2/source/tools/AxisHelper.cxx:std::vector< Reference< XAxis > > AxisHelper::getAllAxesOfCoordinateSystem(
chart2/source/tools/AxisHelper.cxx:    std::vector< Reference< XAxis > > aAxisVector;
chart2/source/tools/AxisHelper.cxx:    std::vector< Reference< XAxis > > aAxisVector;
chart2/source/tools/AxisHelper.cxx:            std::vector< Reference< XAxis > > aAxesPerCooSys( AxisHelper::getAllAxesOfCoordinateSystem( aCooSysList[nC], bOnlyVisible ) );
chart2/source/tools/AxisHelper.cxx:    std::vector< Reference< beans::XPropertySet > > aGridVector;
chart2/source/tools/AxisHelper.cxx:            std::vector< Reference< XAxis > > aAllAxis( AxisHelper::getAllAxesOfCoordinateSystem( xCooSys ) );
chart2/source/tools/AxisHelper.cxx:            ::std::vector< Reference< XAxis > >::iterator aFound =
chart2/source/tools/AxisHelper.cxx:    ::std::vector< Reference< XDataSeries > > aSeriesVector( DiagramHelper::getDataSeriesFromDiagram( xDiagram ) );
chart2/source/tools/AxisHelper.cxx:    ::std::vector< Reference< XDataSeries > >::const_iterator aIter = aSeriesVector.begin();
chart2/source/tools/CharacterProperties.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/tools/ChartModelHelper.cxx:::std::vector< uno::Reference< XDataSeries > > ChartModelHelper::getDataSeries(
chart2/source/tools/ChartModelHelper.cxx:    ::std::vector< uno::Reference< XDataSeries > > aResult;
chart2/source/tools/ChartModelHelper.cxx:::std::vector< uno::Reference< XDataSeries > > ChartModelHelper::getDataSeries(
chart2/source/tools/ChartModelHelper.cxx:    ::std::vector< uno::Reference< XDataSeries > > aResult;
chart2/source/tools/ChartModelHelper.cxx:::std::vector< uno::Reference< XDataSeries > > ChartModelHelper::getDataSeries(
chart2/source/tools/DataSeriesHelper.cxx:::std::vector< Reference< chart2::data::XLabeledDataSequence > >
chart2/source/tools/DataSeriesHelper.cxx:    ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aResultVec;
chart2/source/tools/DataSeriesHelper.cxx:std::vector<Reference<css::chart2::data::XLabeledDataSequence> >
chart2/source/tools/DataSeriesHelper.cxx:    ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aSeqVec;
chart2/source/tools/DataSeriesHelper.cxx:        ::std::vector< Reference< chart2::XDataSeries > > aSeries(
chart2/source/tools/DataSeriesHelper.cxx:        ::std::vector< Reference< chart2::XDataSeries > >::iterator aIt =
chart2/source/tools/DataSeriesHelper.cxx:                ::std::vector< sal_Int32 > aHiddenIndices( ContainerHelper::SequenceToVector( aHiddenIndicesSeq ) );
chart2/source/tools/DataSeriesHelper.cxx:                ::std::vector< sal_Int32 > aIndices( ContainerHelper::SequenceToVector( aAttributedDataPointIndexList ) );
chart2/source/tools/DataSeriesHelper.cxx:                ::std::vector< sal_Int32 >::iterator aIt = ::std::find( aIndices.begin(), aIndices.end(), nPointIndex );
chart2/source/tools/DataSourceHelper.cxx:void lcl_addRanges( ::std::vector< OUString > & rOutResult,
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< OUString > & rOutResult,
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< OUString > & rOutResult,
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aResultVector;
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< Reference< chart2::XDataSeries > > xSeriesVector( DiagramHelper::getDataSeriesFromDiagram( xDiagram ) );
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< OUString > aResult;
chart2/source/tools/DataSourceHelper.cxx:        ::std::vector< uno::Reference< XDataSeries > > aSeriesVector( DiagramHelper::getDataSeriesFromDiagram( xDiagram ) );
chart2/source/tools/DataSourceHelper.cxx:        for( ::std::vector< uno::Reference< XDataSeries > >::const_iterator aSeriesIt( aSeriesVector.begin() )
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< uno::Reference< chart2::data::XLabeledDataSequence > > aResult;
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< uno::Reference< XDataSeries > > aSeriesVector( ChartModelHelper::getDataSeries( xChartModel ) );
chart2/source/tools/DataSourceHelper.cxx:    for( ::std::vector< uno::Reference< XDataSeries > >::const_iterator aSeriesIt( aSeriesVector.begin() )
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< uno::Reference< chart2::data::XLabeledDataSequence > > aResult;
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< uno::Reference< XDataSeries > > aSeriesVector( ChartModelHelper::getDataSeries( rModel ) );
chart2/source/tools/DataSourceHelper.cxx:    for( ::std::vector< uno::Reference< XDataSeries > >::const_iterator aSeriesIt( aSeriesVector.begin() )
chart2/source/tools/DataSourceHelper.cxx:    ::std::vector< OUString > aResult;
chart2/source/tools/DiagramHelper.cxx:::std::vector< Reference< XDataSeries > >
chart2/source/tools/DiagramHelper.cxx:    ::std::vector< Reference< XDataSeries > > aResult;
chart2/source/tools/DiagramHelper.cxx:std::vector< Reference< XAxis > > lcl_getAxisHoldingCategoriesFromDiagram(
chart2/source/tools/DiagramHelper.cxx:    std::vector< Reference< XAxis > > aRet;
chart2/source/tools/DiagramHelper.cxx:    std::vector< Reference< chart2::XAxis > > aCatAxes(
chart2/source/tools/DiagramHelper.cxx:    std::vector< Reference< chart2::XAxis > >::iterator aIt( aCatAxes.begin() );
chart2/source/tools/DiagramHelper.cxx:    std::vector< Reference< chart2::XAxis > >::const_iterator aEnd( aCatAxes.end() );
chart2/source/tools/DiagramHelper.cxx:        std::vector< Reference< chart2::XAxis > > aCatAxes(
chart2/source/tools/DiagramHelper.cxx:        std::vector< Reference< chart2::XAxis > >::iterator aIt( aCatAxes.begin() );
chart2/source/tools/DiagramHelper.cxx:        std::vector< Reference< chart2::XAxis > >::const_iterator aEnd( aCatAxes.end() );
chart2/source/tools/DiagramHelper.cxx:    ::std::vector< Reference< XChartType > > aResult;
chart2/source/tools/DiagramHelper.cxx:    ::std::vector< OUString > aFirstRoles( ContainerHelper::SequenceToVector( xFirstType->getSupportedMandatoryRoles() ) );
chart2/source/tools/DiagramHelper.cxx:    ::std::vector< OUString > aSecondRoles( ContainerHelper::SequenceToVector( xSecondType->getSupportedMandatoryRoles() ) );
chart2/source/tools/DiagramHelper.cxx:    ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/tools/DiagramHelper.cxx:    for( ::std::vector< Reference< chart2::XDataSeries > >::const_iterator aIt =
chart2/source/tools/DiagramHelper.cxx:    ::std::vector< Reference< chart2::XDataSeries > > aSeriesVec(
chart2/source/tools/DiagramHelper.cxx:    for( ::std::vector< Reference< chart2::XDataSeries > >::const_iterator aIt =
chart2/source/tools/ExplicitCategoriesProvider.cxx:using ::std::vector;
chart2/source/tools/ExplicitCategoriesProvider.cxx:                        ::std::vector< Reference< XDataSeries > > aSeries( ChartModelHelper::getDataSeries( mrModel ) );
chart2/source/tools/ExplicitCategoriesProvider.cxx:std::vector<sal_Int32> lcl_getLimitingBorders( const std::vector< ComplexCategory >& rComplexCategories )
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector<sal_Int32> aLimitingBorders;
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector< ComplexCategory >::const_iterator aIt( rComplexCategories.begin() );
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector< ComplexCategory >::const_iterator aEnd( rComplexCategories.end() );
chart2/source/tools/ExplicitCategoriesProvider.cxx:std::vector< ComplexCategory > lcl_DataSequenceToComplexCategoryVector(
chart2/source/tools/ExplicitCategoriesProvider.cxx:    , const std::vector<sal_Int32>& rLimitingBorders, bool bCreateSingleCategories )
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector< ComplexCategory > aResult;
chart2/source/tools/ExplicitCategoriesProvider.cxx:sal_Int32 lcl_getCategoryCount( std::vector< ComplexCategory >& rComplexCategories )
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector< ComplexCategory >::const_iterator aIt( rComplexCategories.begin() );
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector< ComplexCategory >::const_iterator aEnd( rComplexCategories.end() );
chart2/source/tools/ExplicitCategoriesProvider.cxx:    ::std::vector< ::std::vector< ComplexCategory > >& rComplexCats )
chart2/source/tools/ExplicitCategoriesProvider.cxx:        std::vector<sal_Int32> aLimitingBorders;
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector< std::vector< ComplexCategory > >::iterator aOuterIt( rComplexCats.begin() );
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector< std::vector< ComplexCategory > >::const_iterator aOuterEnd( rComplexCats.end() );
chart2/source/tools/ExplicitCategoriesProvider.cxx:    std::vector< std::vector< ComplexCategory > > aComplexCatsPerIndex;
chart2/source/tools/ExplicitCategoriesProvider.cxx:        std::vector< ComplexCategory > aSingleLevel;
chart2/source/tools/ExplicitCategoriesProvider.cxx:        std::vector< ComplexCategory >::iterator aIt( aOuterIt->begin() );
chart2/source/tools/ExplicitCategoriesProvider.cxx:        std::vector< ComplexCategory >::const_iterator aEnd( aOuterIt->end() );
chart2/source/tools/ExplicitCategoriesProvider.cxx:bool lcl_fillDateCategories( const uno::Reference< data::XDataSequence >& xDataSequence, std::vector< double >& rDateCategories, bool bIsAutoDate, ChartModel& rModel )
chart2/source/tools/ExplicitCategoriesProvider.cxx:const std::vector<ComplexCategory>* ExplicitCategoriesProvider::getCategoriesByLevel( sal_Int32 nLevel )
chart2/source/tools/ExplicitCategoriesProvider.cxx:const std::vector< double >&  ExplicitCategoriesProvider::getDateCategories()
chart2/source/tools/ExponentialRegressionCurveCalculator.cxx:    std::vector<double> yVector;
chart2/source/tools/FillProperties.cxx:void lcl_AddPropertiesToVector_without_BitmapProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties )
chart2/source/tools/FillProperties.cxx:void lcl_AddPropertiesToVector_only_BitmapProperties( ::std::vector< ::com::sun::star::beans::Property > & rOutProperties )
chart2/source/tools/FillProperties.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/tools/ImplOPropertySet.cxx:    const ::std::vector< sal_Int32 > & aHandles ) const
chart2/source/tools/ImplOPropertySet.cxx:    const ::std::vector< sal_Int32 > & aHandles )
chart2/source/tools/ImplOPropertySet.hxx:        GetPropertyStatesByHandle( const ::std::vector< sal_Int32 > & aHandles ) const;
chart2/source/tools/ImplOPropertySet.hxx:    void SetPropertiesToDefault( const ::std::vector< sal_Int32 > & aHandles );
chart2/source/tools/InternalDataProvider.cxx:std::vector< OUString > lcl_AnyToStringSequence( const std::vector< uno::Any >& aAnySeq )
chart2/source/tools/InternalDataProvider.cxx:    std::vector< OUString > aResult;
chart2/source/tools/InternalDataProvider.cxx:std::vector< uno::Any > lcl_StringToAnyVector( const css::uno::Sequence< OUString >& aStringSeq )
chart2/source/tools/InternalDataProvider.cxx:    std::vector< uno::Any > aResult;
chart2/source/tools/InternalDataProvider.cxx:                    ::std::vector< double > aValues( ContainerHelper::SequenceToVector( xValues->getNumericalData()));
chart2/source/tools/InternalDataProvider.cxx:            ::std::vector< Reference< chart2::XDataSeries > > aSeriesVector( ChartModelHelper::getDataSeries( xChartDoc ));
chart2/source/tools/InternalDataProvider.cxx:    std::vector<OUString> aRawElems;
chart2/source/tools/InternalDataProvider.cxx:        std::vector<double> aValues;
chart2/source/tools/InternalDataProvider.cxx:        std::vector<double> aValues;
chart2/source/tools/InternalDataProvider.cxx:            std::vector<uno::Any> aLabels(1, uno::makeAny(aRawElems[i]));
chart2/source/tools/InternalDataProvider.cxx:            std::vector<uno::Any> aLabels(1, uno::makeAny(aRawElems[0]));
chart2/source/tools/InternalDataProvider.cxx:        ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aComplexCategories;
chart2/source/tools/InternalDataProvider.cxx:    ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aResultLSeqVec;
chart2/source/tools/InternalDataProvider.cxx:    ::std::vector< Reference< chart2::data::XLabeledDataSequence > > aDataVec;
chart2/source/tools/InternalDataProvider.cxx:        std::vector< LabeledDataSequence* >::size_type nOldIndex = aSequenceMapping[nNewIndex];
chart2/source/tools/InternalDataProvider.cxx:    ::std::vector< Reference< chart2::data::XLabeledDataSequence > >::iterator aIt(aDataVec.begin());
chart2/source/tools/InternalDataProvider.cxx:    const ::std::vector< Reference< chart2::data::XLabeledDataSequence > >::const_iterator aEndIt(aDataVec.end());
chart2/source/tools/InternalDataProvider.cxx:std::vector< Sequence< OUString > > lcl_convertComplexAnyVectorToStringSequence( const vector< vector< uno::Any > >& rIn )
chart2/source/tools/InternalDataProvider.cxx:    std::vector< Sequence< OUString > > aRet;
chart2/source/tools/InternalDataProvider.cxx:    explicit SplitCategoriesProvider_ForComplexDescriptions( const ::std::vector< ::std::vector< uno::Any > >& rComplexDescriptions )
chart2/source/tools/InternalDataProvider.cxx:    const ::std::vector< ::std::vector< uno::Any > >& m_rComplexDescriptions;
chart2/source/tools/LinePropertiesHelper.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/tools/OPropertySet.cxx:        ::std::vector< uno::Type > aTypes;
chart2/source/tools/OPropertySet.cxx:    ::std::vector< sal_Int32 > aHandles( pHandles.get(), pHandles.get() + aPropertyName.getLength());
chart2/source/tools/OPropertySet.cxx:    ::std::vector< sal_Int32 > aHandles( pHandles.get(), pHandles.get() + aPropertyNames.getLength());
chart2/source/tools/PolynomialRegressionCurveCalculator.cxx:    std::vector<double> aQRTransposed;
chart2/source/tools/PolynomialRegressionCurveCalculator.cxx:    std::vector<double> yVector;
chart2/source/tools/PolynomialRegressionCurveCalculator.cxx:    std::vector<double> aDiagonal;
chart2/source/tools/PropertyHelper.cxx:        ::std::vector< OUString > aNames( ::chart::ContainerHelper::SequenceToVector( xNameAccess->getElementNames()));
chart2/source/tools/PropertyHelper.cxx:        ::std::vector< OUString >::const_iterator aIt(
chart2/source/tools/PropertyHelper.cxx:                ::std::vector< sal_Int32 > aNumbers;
chart2/source/tools/PropertyHelper.cxx:                ::std::vector< OUString >::iterator aNonConstIt(
chart2/source/tools/PropertyHelper.cxx:                ::std::vector< sal_Int32 >::const_iterator aMaxIt(
chart2/source/tools/RangeHighlighter.cxx:            ::std::vector< chart2::data::HighlightedRange > aHilightedRanges;
chart2/source/tools/ReferenceSizeProvider.cxx:    ::std::vector< Reference< XDataSeries > > aSeries(
chart2/source/tools/ReferenceSizeProvider.cxx:    for( ::std::vector< Reference< XDataSeries > >::const_iterator aIt( aSeries.begin());
chart2/source/tools/ReferenceSizeProvider.cxx:    ::std::vector< Reference< XDataSeries > > aSeries(
chart2/source/tools/ReferenceSizeProvider.cxx:    for( ::std::vector< Reference< XDataSeries > >::const_iterator aIt( aSeries.begin());
chart2/source/tools/RegressionCurveHelper.cxx:            ::std::vector< uno::Reference< chart2::XRegressionCurve > > aCurvesToDelete;
chart2/source/tools/RegressionCurveHelper.cxx:            for( ::std::vector< uno::Reference< chart2::XRegressionCurve > >::const_iterator aIt = aCurvesToDelete.begin();
chart2/source/tools/RegressionCurveHelper.cxx:std::vector< Reference< chart2::XRegressionCurve > >
chart2/source/tools/RegressionCurveHelper.cxx:    std::vector< Reference< chart2::XRegressionCurve > > aResult;
chart2/source/tools/RegressionCurveHelper.cxx:    std::vector< Reference< chart2::XDataSeries > > aSeries( DiagramHelper::getDataSeriesFromDiagram( xDiagram ));
chart2/source/tools/RegressionCurveHelper.cxx:    for( std::vector< Reference< chart2::XDataSeries > >::iterator aIt( aSeries.begin());
chart2/source/tools/RegressionCurveModel.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/tools/RegressionCurveModel.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/tools/RegressionEquation.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/tools/RegressionEquation.cxx:        ::std::vector< ::com::sun::star::beans::Property > aProperties;
chart2/source/tools/SceneProperties.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/tools/ThreeDHelper.cxx:        ::std::vector< uno::Reference< XDataSeries > > aSeriesList(
chart2/source/tools/ThreeDHelper.cxx:    ::std::vector< uno::Reference< XDataSeries > > aSeriesList(
chart2/source/tools/UserDefinedProperties.cxx:    ::std::vector< Property > & rOutProperties )
chart2/source/tools/WrappedIgnoreProperty.cxx:void WrappedIgnoreProperties::addIgnoreLineProperties( std::vector< WrappedProperty* >& rList )
chart2/source/tools/WrappedIgnoreProperty.cxx:void WrappedIgnoreProperties::addIgnoreFillProperties( std::vector< WrappedProperty* >& rList )
chart2/source/tools/WrappedIgnoreProperty.cxx:void WrappedIgnoreProperties::addIgnoreFillProperties_without_BitmapProperties( ::std::vector< WrappedProperty* >& rList )
chart2/source/tools/WrappedIgnoreProperty.cxx:void WrappedIgnoreProperties::addIgnoreFillProperties_only_BitmapProperties( ::std::vector< WrappedProperty* >& rList )
chart2/source/tools/WrappedPropertySet.cxx:            std::vector< WrappedProperty* > aPropList( createWrappedProperties() );
chart2/source/tools/WrappedPropertySet.cxx:            for( std::vector< WrappedProperty* >::const_iterator aIt = aPropList.begin(); aIt!=aPropList.end(); ++aIt )
chart2/source/view/axes/Tickmarks.hxx:typedef std::vector<TickInfo>           TickInfoArrayType;
chart2/source/view/axes/Tickmarks.hxx:typedef std::vector<TickInfoArrayType>  TickInfoArraysType;
chart2/source/view/axes/VAxisProperties.hxx:    ::std::vector<TickmarkProperties>   m_aTickmarkPropertiesList;
chart2/source/view/axes/VCartesianAxis.cxx:    std::vector<size_t> m_aValidIndices;
chart2/source/view/axes/VCartesianAxis.cxx:            const std::vector<ComplexCategory>* pComplexCategories =
chart2/source/view/axes/VCartesianAxis.cxx:            std::vector<ComplexCategory>::const_iterator aIt = pComplexCategories->begin();
chart2/source/view/axes/VCartesianAxis.cxx:            std::vector<ComplexCategory>::const_iterator aEnd = pComplexCategories->end();
chart2/source/view/axes/VCartesianAxis.cxx:            const std::vector<ComplexCategory>* pComplexCategories =
chart2/source/view/axes/VCartesianAxis.cxx:                std::vector<ComplexCategory>::const_iterator aIt = pComplexCategories->begin();
chart2/source/view/axes/VCartesianAxis.cxx:                std::vector<ComplexCategory>::const_iterator aEnd = pComplexCategories->end();
chart2/source/view/axes/VCartesianAxis.cxx:typedef ::std::vector< VCartesianAxis::ScreenPosAndLogicPos > tScreenPosAndLogicPosList;
chart2/source/view/axes/VCartesianAxis.cxx:            ::std::vector<TickmarkProperties> aTickmarkPropertiesList;
chart2/source/view/axes/VCartesianGrid.cxx:void VCartesianGrid::fillLinePropertiesFromGridModel( ::std::vector<VLineProperties>& rLinePropertiesList
chart2/source/view/axes/VCartesianGrid.cxx:    ::std::vector<VLineProperties> aLinePropertiesList;
chart2/source/view/axes/VCartesianGrid.hxx:    static void fillLinePropertiesFromGridModel( ::std::vector<VLineProperties>& rLinePropertiesList
chart2/source/view/axes/VCoordinateSystem.cxx:    std::vector< Reference< beans::XPropertySet > > aRet;
chart2/source/view/axes/VCoordinateSystem.cxx:        std::vector< Reference< beans::XPropertySet > > aSubGrids( ContainerHelper::SequenceToVector( xAxis->getSubGridProperties() ) );
chart2/source/view/axes/VCoordinateSystem.cxx:std::vector< ExplicitScaleData > VCoordinateSystem::getExplicitScales( sal_Int32 nDimensionIndex, sal_Int32 nAxisIndex ) const
chart2/source/view/axes/VCoordinateSystem.cxx:    std::vector< ExplicitScaleData > aRet(m_aExplicitScales);
chart2/source/view/axes/VCoordinateSystem.cxx:std::vector< ExplicitIncrementData > VCoordinateSystem::getExplicitIncrements( sal_Int32 nDimensionIndex, sal_Int32 nAxisIndex ) const
chart2/source/view/axes/VCoordinateSystem.cxx:    std::vector< ExplicitIncrementData > aRet(m_aExplicitIncrements);
chart2/source/view/axes/VPolarAxis.cxx:void VPolarAxis::setIncrements( const std::vector< ExplicitIncrementData >& rIncrements )
chart2/source/view/axes/VPolarAxis.hxx:    void setIncrements( const std::vector< ExplicitIncrementData >& rIncrements );
chart2/source/view/axes/VPolarAxis.hxx:    ::std::vector< ExplicitIncrementData >   m_aIncrements;
chart2/source/view/axes/VPolarGrid.cxx:void VPolarGrid::setIncrements( const std::vector< ExplicitIncrementData >& rIncrements )
chart2/source/view/axes/VPolarGrid.cxx:        , const ::std::vector<VLineProperties>& rLinePropertiesList )
chart2/source/view/axes/VPolarGrid.cxx:        , const ::std::vector<VLineProperties>& rLinePropertiesList )
chart2/source/view/axes/VPolarGrid.cxx:    ::std::vector<VLineProperties> aLinePropertiesList;
chart2/source/view/axes/VPolarGrid.hxx:    void setIncrements( const std::vector< ExplicitIncrementData >& rIncrements );
chart2/source/view/axes/VPolarGrid.hxx:    ::std::vector< ExplicitIncrementData >   m_aIncrements;
chart2/source/view/axes/VPolarGrid.hxx:                    , const ::std::vector<VLineProperties>& rLinePropertiesList );
chart2/source/view/axes/VPolarRadiusAxis.cxx:void VPolarRadiusAxis::setScales( const std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis )
chart2/source/view/axes/VPolarRadiusAxis.hxx:    virtual void setScales( const ::std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis ) override;
chart2/source/view/charttypes/AreaChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator            aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/AreaChart.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/AreaChart.cxx:        ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/AreaChart.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/AreaChart.cxx:            ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/AreaChart.cxx:            ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/AreaChart.cxx:            const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/AreaChart.cxx:void lcl_reorderSeries( ::std::vector< ::std::vector< VDataSeriesGroup > >&  rZSlots )
chart2/source/view/charttypes/AreaChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >  aRet;
chart2/source/view/charttypes/AreaChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::reverse_iterator aZIt( rZSlots.rbegin() );
chart2/source/view/charttypes/AreaChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::reverse_iterator aZEnd( rZSlots.rend() );
chart2/source/view/charttypes/AreaChart.cxx:        ::std::vector< VDataSeriesGroup > aXSlot;
chart2/source/view/charttypes/AreaChart.cxx:        ::std::vector< VDataSeriesGroup >::reverse_iterator aXIt( aZIt->rbegin() );
chart2/source/view/charttypes/AreaChart.cxx:        ::std::vector< VDataSeriesGroup >::reverse_iterator aXEnd( aZIt->rend() );
chart2/source/view/charttypes/AreaChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/AreaChart.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/AreaChart.cxx:    std::vector<std::map< sal_Int32, double > > aLogicYSumMapByX(nEndIndex);//one for each different nAttachedAxisIndex
chart2/source/view/charttypes/AreaChart.cxx:        ::std::vector< VDataSeriesGroup >::iterator aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/AreaChart.cxx:        const ::std::vector< VDataSeriesGroup >::iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/AreaChart.cxx:            std::vector<VDataSeries*>& rSeriesList = aXSlotIter->m_aSeriesVector;
chart2/source/view/charttypes/AreaChart.cxx:            std::vector<VDataSeries*>::iterator aSeriesIter = rSeriesList.begin();
chart2/source/view/charttypes/AreaChart.cxx:            std::vector<VDataSeries*>::iterator aSeriesEnd  = rSeriesList.end();
chart2/source/view/charttypes/AreaChart.cxx:        ::std::vector< VDataSeriesGroup >::const_iterator aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/AreaChart.cxx:        ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/AreaChart.cxx:            const std::vector<VDataSeries*>& rSeriesList = aXSlotIter->m_aSeriesVector;
chart2/source/view/charttypes/AreaChart.cxx:            std::vector<VDataSeries*>::const_iterator aSeriesIter = rSeriesList.begin();
chart2/source/view/charttypes/AreaChart.cxx:            const std::vector<VDataSeries*>::const_iterator aSeriesEnd  = rSeriesList.end();
chart2/source/view/charttypes/AreaChart.cxx:            std::vector<std::map< sal_Int32, double > > aLogicYForNextSeriesMapByX(nEndIndex); //one for each different nAttachedAxisIndex
chart2/source/view/charttypes/BarChart.cxx:        ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator             aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/BarChart.cxx:        const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator  aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/BarChart.cxx:            ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/BarChart.cxx:            const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/BarChart.cxx:            ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/BarChart.cxx:            const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/BarChart.cxx:                ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/BarChart.cxx:                ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/BarChart.cxx:                const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/BarChart.cxx:        ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator             aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/BarChart.cxx:        const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator  aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/BarChart.cxx:            ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/BarChart.cxx:            const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/BarChart.cxx:                ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/BarChart.cxx:                ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/BarChart.cxx:                const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/BubbleChart.cxx:        ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator             aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/BubbleChart.cxx:        const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator  aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/BubbleChart.cxx:            ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/BubbleChart.cxx:            const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/BubbleChart.cxx:                ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/BubbleChart.cxx:                ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/BubbleChart.cxx:                const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/BubbleChart.cxx:        ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/BubbleChart.cxx:        const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/BubbleChart.cxx:            ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/BubbleChart.cxx:            const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/BubbleChart.cxx:                ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/BubbleChart.cxx:                ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/BubbleChart.cxx:                const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/CandleStickChart.cxx:        ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator             aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/CandleStickChart.cxx:        const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator  aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/CandleStickChart.cxx:            ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/CandleStickChart.cxx:            const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/CandleStickChart.cxx:                ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/CandleStickChart.cxx:                ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/CandleStickChart.cxx:                const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/GL3DBarChart.cxx:double findMaxValue(const std::vector<std::unique_ptr<VDataSeries> >& rDataSeriesContainer)
chart2/source/view/charttypes/GL3DBarChart.cxx:void GL3DBarChart::create3DShapes(const std::vector<std::unique_ptr<VDataSeries> >& rDataSeriesContainer,
chart2/source/view/charttypes/GL3DBarChart.cxx:void GL3DBarChart::calcDistance(std::vector<sal_uInt32> & rVectorNearest)
chart2/source/view/charttypes/GL3DBarChart.cxx:void GL3DBarChart::initDistanceHeap(std::vector<sal_uInt32> &rVectorNearest)
chart2/source/view/charttypes/GL3DBarChart.cxx:void GL3DBarChart::keepHeap(std::vector<sal_uInt32> &rVectorNearest, int nIndex)
chart2/source/view/charttypes/GL3DBarChart.cxx:void GL3DBarChart::swapVector(int i, int j, std::vector<sal_uInt32> &rVectorNearest)
chart2/source/view/charttypes/GL3DBarChart.cxx:void GL3DBarChart::getNearestBars(std::vector<sal_uInt32> &rVectorNearest)
chart2/source/view/charttypes/GL3DBarChart.cxx:        std::vector<BarInformation> aBarInfoList;
chart2/source/view/charttypes/NetChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator            aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/NetChart.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/NetChart.cxx:        ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/NetChart.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/NetChart.cxx:            ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/NetChart.cxx:            ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/NetChart.cxx:            const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/NetChart.cxx:void lcl_reorderSeries( ::std::vector< ::std::vector< VDataSeriesGroup > >&  rZSlots )
chart2/source/view/charttypes/NetChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >  aRet;
chart2/source/view/charttypes/NetChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::reverse_iterator aZIt( rZSlots.rbegin() );
chart2/source/view/charttypes/NetChart.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::reverse_iterator aZEnd( rZSlots.rend() );
chart2/source/view/charttypes/NetChart.cxx:        ::std::vector< VDataSeriesGroup > aXSlot;
chart2/source/view/charttypes/NetChart.cxx:        ::std::vector< VDataSeriesGroup >::reverse_iterator aXIt( aZIt->rbegin() );
chart2/source/view/charttypes/NetChart.cxx:        ::std::vector< VDataSeriesGroup >::reverse_iterator aXEnd( aZIt->rend() );
chart2/source/view/charttypes/NetChart.cxx:        ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/NetChart.cxx:        const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/NetChart.cxx:            ::std::vector< VDataSeriesGroup >::iterator aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/NetChart.cxx:            const ::std::vector< VDataSeriesGroup >::iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/NetChart.cxx:                std::vector<VDataSeries*>& rSeriesList = aXSlotIter->m_aSeriesVector;
chart2/source/view/charttypes/NetChart.cxx:                std::vector<VDataSeries*>::iterator aSeriesIter = rSeriesList.begin();
chart2/source/view/charttypes/NetChart.cxx:                std::vector<VDataSeries*>::iterator aSeriesEnd  = rSeriesList.end();
chart2/source/view/charttypes/NetChart.cxx:            ::std::vector< VDataSeriesGroup >::const_iterator aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/NetChart.cxx:            ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/NetChart.cxx:                const std::vector<VDataSeries*>& rSeriesList = aXSlotIter->m_aSeriesVector;
chart2/source/view/charttypes/NetChart.cxx:                std::vector<VDataSeries*>::const_iterator aSeriesIter = rSeriesList.begin();
chart2/source/view/charttypes/NetChart.cxx:                const std::vector<VDataSeries*>::const_iterator aSeriesEnd  = rSeriesList.end();
chart2/source/view/charttypes/PieChart.cxx:void PieChart::setScales( const std::vector< ExplicitScaleData >& rScales, bool /* bSwapXAndYAxis */ )
chart2/source/view/charttypes/PieChart.cxx:    const ::std::vector< VDataSeries* >& rSeriesList( m_aZSlots[0][0].m_aSeriesVector );
chart2/source/view/charttypes/PieChart.cxx:    ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = m_aZSlots[0].begin();
chart2/source/view/charttypes/PieChart.cxx:    const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = m_aZSlots[0].end();
chart2/source/view/charttypes/PieChart.cxx:    ::std::vector< VDataSeriesGroup >::size_type nExplodeableSlot = 0;
chart2/source/view/charttypes/PieChart.cxx:        ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/PieChart.cxx:                bool bDoExplode = ( nExplodeableSlot == static_cast< ::std::vector< VDataSeriesGroup >::size_type >(fSlotX) );
chart2/source/view/charttypes/PieChart.cxx:    std::vector< PieLabelInfo >::iterator aIt = m_aLabelInfoList.begin();
chart2/source/view/charttypes/PieChart.cxx:    std::vector< PieLabelInfo >::const_iterator aEnd = m_aLabelInfoList.end();
chart2/source/view/charttypes/PieChart.cxx:    std::vector< PieLabelInfo >::iterator aIt1 = m_aLabelInfoList.begin();
chart2/source/view/charttypes/PieChart.cxx:    std::vector< PieLabelInfo >::const_iterator aEnd = m_aLabelInfoList.end();
chart2/source/view/charttypes/PieChart.cxx:    std::vector< PieLabelInfo >::iterator aIt2 = aIt1;
chart2/source/view/charttypes/PieChart.hxx:    virtual void setScales( const ::std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis ) override;
chart2/source/view/charttypes/PieChart.hxx:    ::std::vector< PieLabelInfo > m_aLabelInfoList;
chart2/source/view/charttypes/Splines.cxx:typedef ::std::vector< tPointType >     tPointVecType;
chart2/source/view/charttypes/Splines.cxx:    ::std::vector< double >         m_aSecDerivY;
chart2/source/view/charttypes/Splines.cxx:    ::std::vector< double > u( n );
chart2/source/view/charttypes/Splines.cxx:    ::std::vector< double > u( n + 1, 0.0 );
chart2/source/view/charttypes/Splines.cxx:    ::std::vector< double > Adiag( n + 1, 0.0 );
chart2/source/view/charttypes/Splines.cxx:    ::std::vector< double > Aupper( n + 1, 0.0 );
chart2/source/view/charttypes/Splines.cxx:    ::std::vector< double > Ddiag( n+1, 0.0 );
chart2/source/view/charttypes/Splines.cxx:    ::std::vector< double > Rright( n-1, 0.0 );
chart2/source/view/charttypes/Splines.cxx:    ::std::vector< double > Rupper( n, 0.0 );
chart2/source/view/charttypes/Splines.cxx:        ::std::vector < double > aParameter(nMaxIndexPoints+1);
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* >::const_iterator aIter = m_aSeriesVector.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< VDataSeries* >::const_iterator aEnd  = m_aSeriesVector.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator             aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator  aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup > aZSlot;
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >& rXSlots = m_aZSlots[zSlot];
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator             aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:            ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/VSeriesPlotter.cxx:            ::std::vector< VDataSeries* >::iterator             aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:            const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        std::vector< ExplicitScaleData > aScales( m_pPosHelper->getScales());
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const std::vector< double >&  rDateCategories = m_pExplicitCategoriesProvider->getDateCategories();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        std::vector< double >::const_iterator aIt = rDateCategories.begin(), aEnd = rDateCategories.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >& rXSlots = m_aZSlots[nZ];
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >& rXSlots = m_aZSlots[nZ];
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator       aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator  aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >::const_iterator      aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator       aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator  aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >::const_iterator      aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator       aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >::const_iterator       aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = m_aSeriesVector.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd = m_aSeriesVector.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = m_aSeriesVector.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd = m_aSeriesVector.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< VDataSeries* >* pSeriesList = &this->m_aSeriesVector;
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    std::vector<VDataSeries*>::const_iterator it = m_aSeriesVector.begin(), itEnd = m_aSeriesVector.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* >::const_iterator aSeriesIter = m_aSeriesVector.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = m_aSeriesVector.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotIter( m_aZSlots.begin() );
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd( m_aZSlots.end() );
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >::const_iterator       aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd  = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< OUString > aRetVector;
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotIter( m_aZSlots.begin() );
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd( m_aZSlots.end() );
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >::const_iterator       aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd  = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeries* >::iterator aIt( rGroup.m_aSeriesVector.begin());
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeries* >::iterator aEndIt( rGroup.m_aSeriesVector.end());
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeriesGroup > aSeriesGroups( FlattenVector( m_aZSlots ));
chart2/source/view/charttypes/VSeriesPlotter.cxx:std::vector< ViewLegendEntry > VSeriesPlotter::createLegendEntries(
chart2/source/view/charttypes/VSeriesPlotter.cxx:    std::vector< ViewLegendEntry > aResult;
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator             aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator  aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:            ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:            const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:                ::std::vector< VDataSeries* >* pSeriesList = &(aXSlotIter->m_aSeriesVector);
chart2/source/view/charttypes/VSeriesPlotter.cxx:                ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = pSeriesList->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:                const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = pSeriesList->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:                    std::vector< ViewLegendEntry > aSeriesEntries( this->createLegendEntriesForSeries( rEntryKeyAspectRatio,
chart2/source/view/charttypes/VSeriesPlotter.cxx:::std::vector< VDataSeries* > VSeriesPlotter::getAllSeries()
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* > aAllSeries;
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >::iterator            aZSlotIter = m_aZSlots.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< ::std::vector< VDataSeriesGroup > >::const_iterator aZSlotEnd = m_aZSlots.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        ::std::vector< VDataSeriesGroup >::iterator             aXSlotIter = aZSlotIter->begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:        const ::std::vector< VDataSeriesGroup >::const_iterator aXSlotEnd = aZSlotIter->end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:            ::std::vector< VDataSeries* > aSeriesList = aXSlotIter->m_aSeriesVector;
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* > aAllSeries( getAllSeries() );
chart2/source/view/charttypes/VSeriesPlotter.cxx:    ::std::vector< VDataSeries* >::const_iterator       aSeriesIter = aAllSeries.begin();
chart2/source/view/charttypes/VSeriesPlotter.cxx:    const ::std::vector< VDataSeries* >::const_iterator aSeriesEnd  = aAllSeries.end();
chart2/source/view/charttypes/VSeriesPlotter.cxx:std::vector< ViewLegendEntry > VSeriesPlotter::createLegendEntriesForSeries(
chart2/source/view/charttypes/VSeriesPlotter.cxx:    std::vector< ViewLegendEntry > aResult;
chart2/source/view/inc/GL3DBarChart.hxx:    virtual void create3DShapes(const std::vector<std::unique_ptr<VDataSeries>>& rDataSeries,
chart2/source/view/inc/GL3DBarChart.hxx:    void calcDistance(std::vector<sal_uInt32> &vectorNearest);
chart2/source/view/inc/GL3DBarChart.hxx:    void initDistanceHeap(std::vector<sal_uInt32> &vectorNearest);
chart2/source/view/inc/GL3DBarChart.hxx:    void keepHeap(std::vector<sal_uInt32> &vectorNearest, int index);
chart2/source/view/inc/GL3DBarChart.hxx:    static void swapVector(int i, int j, std::vector<sal_uInt32> &vectorNearest);
chart2/source/view/inc/GL3DBarChart.hxx:    void getNearestBars(std::vector<sal_uInt32> &vectorNearest);
chart2/source/view/inc/GL3DBarChart.hxx:    std::vector<std::unique_ptr<opengl3D::Renderable3DObject> > maShapes;
chart2/source/view/inc/GL3DBarChart.hxx:    std::vector<OUString> maCategories;
chart2/source/view/inc/GL3DBarChart.hxx:    std::vector<OUString> maSeriesNames;
chart2/source/view/inc/GL3DBarChart.hxx:    std::vector<std::unique_ptr<opengl3D::Renderable3DObject>> maScreenTextShapes;
chart2/source/view/inc/GL3DBarChart.hxx:    std::vector<sal_uInt32> maVectorNearest;
chart2/source/view/inc/GL3DPlotterBase.hxx:    virtual void create3DShapes(const std::vector<std::unique_ptr<VDataSeries> >& rDataSeries,
chart2/source/view/inc/GL3DRenderer.hxx:typedef std::vector <glm::vec3> Vertices3D;
chart2/source/view/inc/GL3DRenderer.hxx:typedef std::vector <glm::vec3> Normals3D;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <Vertices3D *> verticesList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <Normals3D *> normalsList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<glm::vec4> idList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<TextureArrayInfo> texture;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<glm::vec3> vertexList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<glm::vec3> textureCoordList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <glm::mat4> modelMatrixList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <glm::mat3> normalMatrixList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <glm::vec4> colorList;
chart2/source/view/inc/GL3DRenderer.hxx:        std::vector<glm::vec3> &vertex,
chart2/source/view/inc/GL3DRenderer.hxx:        std::vector<glm::vec3> &normal,
chart2/source/view/inc/GL3DRenderer.hxx:        std::vector<unsigned short> &indeices);
chart2/source/view/inc/GL3DRenderer.hxx:    static int GenerateRoundCornerBar(std::vector<glm::vec3> &vertices, std::vector<glm::vec3> &normals, float fRadius, int iSubDivY,
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <Polygon3DInfo> m_Polygon3DInfoList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <Extrude3DInfo> m_Extrude3DList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <TextInfo> m_TextInfoList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector <TextInfo> m_ScreenTextInfoList;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<glm::vec3> m_Vertices;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<glm::vec3> m_Normals;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<unsigned short> m_Indices;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<GLuint> m_Texturelist;
chart2/source/view/inc/GL3DRenderer.hxx:    std::vector<GLuint> m_ScreenTexturelist;
chart2/source/view/inc/LegendEntryProvider.hxx:    virtual std::vector< ViewLegendEntry > createLegendEntries(
chart2/source/view/inc/PlotterBase.hxx:    virtual void setScales( const ::std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis );
chart2/source/view/inc/PlottingPositionHelper.hxx:    virtual void setScales( const ::std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis );
chart2/source/view/inc/PlottingPositionHelper.hxx:    const ::std::vector< ExplicitScaleData >& getScales() const { return m_aScales;}
chart2/source/view/inc/PlottingPositionHelper.hxx:    ::std::vector< ExplicitScaleData >  m_aScales;
chart2/source/view/inc/PlottingPositionHelper.hxx:    virtual void setScales( const std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis ) override;
chart2/source/view/inc/VCoordinateSystem.hxx:    ::std::vector< ExplicitScaleData > getExplicitScales( sal_Int32 nDimensionIndex, sal_Int32 nAxisIndex ) const;
chart2/source/view/inc/VCoordinateSystem.hxx:    ::std::vector< ExplicitIncrementData > getExplicitIncrements( sal_Int32 nDimensionIndex, sal_Int32 nAxisIndex ) const;
chart2/source/view/inc/VCoordinateSystem.hxx:    std::vector< ExplicitScaleData >     m_aExplicitScales;
chart2/source/view/inc/VCoordinateSystem.hxx:    std::vector< ExplicitIncrementData > m_aExplicitIncrements;
chart2/source/view/inc/VSeriesPlotter.hxx:    ::std::vector< VDataSeries* >   m_aSeriesVector;
chart2/source/view/inc/VSeriesPlotter.hxx:    mutable ::std::vector< tCachedYValuesPerAxisIndexMap >   m_aListOfCachedYValues;
chart2/source/view/inc/VSeriesPlotter.hxx:    virtual std::vector< ViewLegendEntry > createLegendEntries(
chart2/source/view/inc/VSeriesPlotter.hxx:    std::vector< ViewLegendEntry > createLegendEntriesForSeries(
chart2/source/view/inc/VSeriesPlotter.hxx:    ::std::vector< VDataSeries* > getAllSeries();
chart2/source/view/inc/VSeriesPlotter.hxx:    ::std::vector< ::std::vector< VDataSeriesGroup > >  m_aZSlots;
chart2/source/view/main/ChartItemPool.cxx:    ppPoolDefaults[SCHATTR_DATADESCR_AVAILABLE_PLACEMENTS - SCHATTR_START] = new SfxIntegerListItem(SCHATTR_DATADESCR_AVAILABLE_PLACEMENTS, ::std::vector < sal_Int32 >() );
chart2/source/view/main/ChartItemPool.cxx:    ppPoolDefaults[SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS - SCHATTR_START] = new SfxIntegerListItem(SCHATTR_AVAILABLE_MISSING_VALUE_TREATMENTS, ::std::vector < sal_Int32 >() );
chart2/source/view/main/ChartView.cxx:    ::std::vector< VCoordinateSystem* > getCoordinateSystems( sal_Int32 nDimensionIndex, sal_Int32 nAxisIndex );
chart2/source/view/main/ChartView.cxx:::std::vector< VCoordinateSystem* > AxisUsage::getCoordinateSystems( sal_Int32 nDimensionIndex, sal_Int32 nAxisIndex )
chart2/source/view/main/ChartView.cxx:    ::std::vector< VCoordinateSystem* > aRet;
chart2/source/view/main/ChartView.cxx:    std::vector<VCoordinateSystem*> aVCooSysList = getCoordinateSystems(nDimIndex, nAxisIndex);
chart2/source/view/main/ChartView.cxx:    std::vector<VCoordinateSystem*> aVCooSysList = getCoordinateSystems(nDimIndex, nAxisIndex);
chart2/source/view/main/ChartView.cxx:typedef std::vector<std::unique_ptr<VSeriesPlotter> > SeriesPlottersType;
chart2/source/view/main/ChartView.cxx:    explicit SeriesPlotterContainer( std::vector< VCoordinateSystem* >& rVCooSysList );
chart2/source/view/main/ChartView.cxx:    std::vector< VCoordinateSystem* >& getCooSysList() { return m_rVCooSysList; }
chart2/source/view/main/ChartView.cxx:    std::vector< LegendEntryProvider* > getLegendEntryProviderList();
chart2/source/view/main/ChartView.cxx:    std::vector< VCoordinateSystem* >& m_rVCooSysList;
chart2/source/view/main/ChartView.cxx:SeriesPlotterContainer::SeriesPlotterContainer( std::vector< VCoordinateSystem* >& rVCooSysList )
chart2/source/view/main/ChartView.cxx:std::vector< LegendEntryProvider* > SeriesPlotterContainer::getLegendEntryProviderList()
chart2/source/view/main/ChartView.cxx:    std::vector< LegendEntryProvider* > aRet( m_aSeriesPlotterList.size() );
chart2/source/view/main/ChartView.cxx:VCoordinateSystem* findInCooSysList( const std::vector< VCoordinateSystem* >& rVCooSysList
chart2/source/view/main/ChartView.cxx:VCoordinateSystem* lcl_getCooSysForPlotter( const std::vector< VCoordinateSystem* >& rVCooSysList, MinimumAndMaximumSupplier* pMinimumAndMaximumSupplier )
chart2/source/view/main/ChartView.cxx:VCoordinateSystem* addCooSysToList( std::vector< VCoordinateSystem* >& rVCooSysList
chart2/source/view/main/ChartView.cxx:            ::std::vector< VCoordinateSystem* > aVCooSysList_Y = rAxisUsage.getCoordinateSystems( 1, nAxisIndex );
chart2/source/view/main/ChartView.cxx:                ::std::vector< Reference< XDataSeries > > aSeriesVector( DiagramHelper::getDataSeriesFromDiagram( xDiagram ) );
chart2/source/view/main/ChartView.cxx:                ::std::vector< Reference< XDataSeries > >::const_iterator aIter = aSeriesVector.begin();
chart2/source/view/main/ChartView.cxx:            ::std::vector< VCoordinateSystem* > aVCooSysList = rAxisUsage.getCoordinateSystems(nDimensionIndex,nAxisIndex);
chart2/source/view/main/ChartView.cxx:    ::std::vector< VCoordinateSystem* > aVectorToDeleteObjects;
chart2/source/view/main/ChartView.cxx:    ::std::vector< VCoordinateSystem* >::const_iterator       aIter = aVectorToDeleteObjects.begin();
chart2/source/view/main/ChartView.cxx:    const ::std::vector< VCoordinateSystem* >::const_iterator aEnd  = aVectorToDeleteObjects.end();
chart2/source/view/main/ChartView.cxx:    const std::vector< VCoordinateSystem* >& rVCooSysList( rParam.mpSeriesPlotterContainer->getCooSysList() );
chart2/source/view/main/ChartView.cxx:                   , const std::vector< LegendEntryProvider* >& rLegendEntryProviderList
chart2/source/view/main/ChartView.cxx:            std::vector<VDataSeries*> aAllNewDataSeries = rSeriesPlotter[i]->getAllSeries();
chart2/source/view/main/ChartView.cxx:            std::vector< VDataSeries* >& rAllOldDataSeries =
chart2/source/view/main/ChartView.cxx:            std::vector<VDataSeries*> aAllNewDataSeries = rSeriesPlotter[i]->getAllSeries();
chart2/source/view/main/ChartView.cxx:            std::vector<VDataSeries*>& rAllOldDataSeries = maTimeBased.m_aDataSeriesList[i];
chart2/source/view/main/ChartView.cxx:    std::vector<std::unique_ptr<VDataSeries> > aDataSeries;
chart2/source/view/main/Clipping.cxx:        , std::vector< sal_Int32 >& rResultPointCount
chart2/source/view/main/Clipping.cxx:    std::vector< sal_Int32 > aResultPointCount;//per polygon index
chart2/source/view/main/DummyXShape.cxx:    for(std::vector<DummyXShape*>::iterator itr = maShapes.begin(),
chart2/source/view/main/DummyXShape.cxx:    for(std::vector<DummyXShape*>::iterator itr = maShapes.begin(),
chart2/source/view/main/DummyXShape.cxx:    for(std::vector<DummyXShape*>::const_iterator itr = maShapes.begin(),
chart2/source/view/main/DummyXShape.cxx:    std::vector< uno::Reference<drawing::XShape> >::iterator itr = std::find(maUNOShapes.begin(), maUNOShapes.end(), xShape);
chart2/source/view/main/DummyXShape.cxx:        std::vector< DummyXShape* >::iterator itrShape = std::find(maShapes.begin(), maShapes.end(), pChild);
chart2/source/view/main/DummyXShape.cxx:    for(std::vector<DummyXShape*>::iterator itr = maShapes.begin(),
chart2/source/view/main/DummyXShape.hxx:    std::vector<com::sun::star::uno::Reference< com::sun::star::drawing::XShape > > maUNOShapes;
chart2/source/view/main/DummyXShape.hxx:    std::vector<DummyXShape*> maShapes;
chart2/source/view/main/GL3DRenderer.cxx:    std::vector<glm::vec3> &vertex,
chart2/source/view/main/GL3DRenderer.cxx:    std::vector<glm::vec3> &normal,
chart2/source/view/main/GL3DRenderer.cxx:    std::vector<unsigned short> &indices)
chart2/source/view/main/GL3DRenderer.cxx:    std::vector<glm::vec3> vertices;
chart2/source/view/main/GL3DRenderer.cxx:    std::vector<glm::vec3> normals;
chart2/source/view/main/GL3DRenderer.cxx:    std::vector<unsigned short> indices[5];
chart2/source/view/main/GL3DRenderer.cxx:int OpenGL3DRenderer::GenerateRoundCornerBar(std::vector<glm::vec3> &vertices, std::vector<glm::vec3> &normals, float fRadius, int iSubDivY, int iSubDivZ, float width, float height, float depth)
chart2/source/view/main/OpenGLRender.hxx:typedef std::vector<GLfloat> PointList;
chart2/source/view/main/OpenGLRender.hxx:    std::vector<GLfloat> m_Bubble2DCircle;
chart2/source/view/main/PlotterBase.cxx:void PlotterBase::setScales( const std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis )
chart2/source/view/main/PlottingPositionHelper.cxx:void PlottingPositionHelper::setScales( const std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis )
chart2/source/view/main/PlottingPositionHelper.cxx:void PolarPlottingPositionHelper::setScales( const std::vector< ExplicitScaleData >& rScales, bool bSwapXAndYAxis )
chart2/source/view/main/VDataSeries.cxx:    inline bool operator() ( const std::vector< double >& first,
chart2/source/view/main/VDataSeries.cxx:                             const std::vector< double >& second )
chart2/source/view/main/VDataSeries.cxx:        std::vector< ::std::vector< double > > aTmp;//outer vector are points, inner vector are the different values of the point
chart2/source/view/main/VDataSeries.cxx:            std::vector< double > aSinglePoint;
chart2/source/view/main/VLegend.cxx:typedef ::std::vector< ViewLegendEntry > tViewLegendEntryContainer;
chart2/source/view/main/VLegend.cxx:    ::std::vector< Reference< drawing::XShape > > & rOutTextShapes,
chart2/source/view/main/VLegend.cxx:void lcl_collectColumnWidths( std::vector< sal_Int32 >& rColumnWidths, const sal_Int32 nNumberOfRows, const sal_Int32 nNumberOfColumns,
chart2/source/view/main/VLegend.cxx:                              const ::std::vector< Reference< drawing::XShape > >& rTextShapes, sal_Int32 nSymbolPlusDistanceWidth )
chart2/source/view/main/VLegend.cxx:void lcl_collectRowHeighs( std::vector< sal_Int32 >& rRowHeights, const sal_Int32 nNumberOfRows, const sal_Int32 nNumberOfColumns,
chart2/source/view/main/VLegend.cxx:                           const ::std::vector< Reference< drawing::XShape > >& rTextShapes )
chart2/source/view/main/VLegend.cxx:sal_Int32 lcl_getTextLineHeight( const std::vector< sal_Int32 >& aRowHeights, const sal_Int32 nNumberOfRows, double fViewFontSize )
chart2/source/view/main/VLegend.cxx:    ::std::vector< Reference< drawing::XShape > > aTextShapes;
chart2/source/view/main/VLegend.cxx:    std::vector< sal_Int32 > aColumnWidths;
chart2/source/view/main/VLegend.cxx:    std::vector< sal_Int32 > aRowHeights;
chart2/source/view/main/VLegend.cxx:    const std::vector< LegendEntryProvider* >& rLegendEntryProviderList,
chart2/source/view/main/VLegend.cxx:            ::std::vector< LegendEntryProvider* >::const_iterator       aIter = m_aLegendEntryProviderList.begin();
chart2/source/view/main/VLegend.cxx:            const ::std::vector< LegendEntryProvider* >::const_iterator aEnd  = m_aLegendEntryProviderList.end();
chart2/source/view/main/VLegend.cxx:                    std::vector< ViewLegendEntry > aNewEntries = pLegendEntryProvider->createLegendEntries( aMaxSymbolExtent, eExpansion, xLegendProp, xLegendContainer, m_xShapeFactory, m_xContext );
chart2/source/view/main/VLegend.hxx:             const std::vector< LegendEntryProvider* >& rLegendEntryProviderList,
chart2/source/view/main/VLegend.hxx:    std::vector< LegendEntryProvider* >         m_aLegendEntryProviderList;
cli_ure/source/climaker/climaker_app.cxx:        std::vector< rtl::Reference< unoidl::Provider > > unoidlMandatoryProvs;
cli_ure/source/climaker/climaker_app.cxx:                for (std::vector< rtl::Reference< unoidl::Provider > >::iterator
cli_ure/source/climaker/climaker_emit.cxx:        std::vector<Reference<reflection::XInterfaceTypeDescription2> > vecBaseTypes;
cli_ure/source/climaker/climaker_emit.cxx:            typedef std::vector<Reference<reflection::XInterfaceTypeDescription2> >::const_iterator it;
codemaker/source/codemaker/exceptiontree.cxx:    std::vector< rtl::OString > list;
codemaker/source/codemaker/exceptiontree.cxx:        for (std::vector< rtl::OString >::reverse_iterator i(list.rbegin());
codemaker/source/codemaker/typemanager.cxx:    sal_Int32 * rank, std::vector< OUString > * arguments,
codemaker/source/codemaker/typemanager.cxx:    std::vector< OString > args;
codemaker/source/codemaker/unotype.cxx:    std::vector< OString > * arguments)
codemaker/source/cppumaker/cpputype.cxx:        std::vector< OString > args;
codemaker/source/cppumaker/cpputype.cxx:    std::vector< OString > args;
codemaker/source/cppumaker/cpputype.cxx:            for (std::vector< OString >::iterator i(args.begin());
codemaker/source/cppumaker/cpputype.cxx:bool isDeprecated(std::vector< OUString > const & annotations) {
codemaker/source/cppumaker/cpputype.cxx:        FileStream & out, std::vector< OUString > const & exceptions,
codemaker/source/cppumaker/cpputype.cxx:        std::vector< OUString > const & exceptions, bool runtimeException);
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< unoidl::AnnotatedReference >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:            for (std::vector< unoidl::InterfaceTypeEntity::Method::Parameter >::
codemaker/source/cppumaker/cpputype.cxx:    std::vector< unoidl::AnnotatedReference >::size_type bases(
codemaker/source/cppumaker/cpputype.cxx:        std::vector< unoidl::AnnotatedReference >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:    std::vector< unoidl::AnnotatedReference >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:    std::vector< unoidl::InterfaceTypeEntity::Attribute >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:    std::vector< unoidl::InterfaceTypeEntity::Method >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:        std::vector< unoidl::InterfaceTypeEntity::Attribute >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:        std::vector< unoidl::InterfaceTypeEntity::Method >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:            std::vector< unoidl::InterfaceTypeEntity::Method::Parameter >::
codemaker/source/cppumaker/cpputype.cxx:    FileStream & out, std::vector< OUString > const & exceptions,
codemaker/source/cppumaker/cpputype.cxx:    std::vector< OUString > const & exceptions, bool runtimeException)
codemaker/source/cppumaker/cpputype.cxx:        for (std::vector< unoidl::PlainStructTypeEntity::Member >::
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< unoidl::PlainStructTypeEntity::Member >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:    std::vector< unoidl::PlainStructTypeEntity::Member >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< unoidl::PlainStructTypeEntity::Member >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:        for (std::vector<
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< unoidl::PolymorphicStructTypeTemplateEntity::Member >::
codemaker/source/cppumaker/cpputype.cxx:        for (std::vector<
codemaker/source/cppumaker/cpputype.cxx:        for (std::vector<
codemaker/source/cppumaker/cpputype.cxx:        for (std::vector<
codemaker/source/cppumaker/cpputype.cxx:        for (std::vector<
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< OUString >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< OUString >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< unoidl::PolymorphicStructTypeTemplateEntity::Member >::
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< unoidl::PolymorphicStructTypeTemplateEntity::Member >::
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< OUString >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:    std::vector< unoidl::PolymorphicStructTypeTemplateEntity::Member >::
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< unoidl::PolymorphicStructTypeTemplateEntity::Member >::
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< OUString >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< OUString >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:        std::vector< unoidl::ExceptionTypeEntity::Member >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:        std::vector< unoidl::ExceptionTypeEntity::Member >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/cppumaker/cpputype.cxx:    std::vector< unoidl::EnumTypeEntity::Member >::size_type n = 0;
codemaker/source/cppumaker/cpputype.cxx:                    std::vector<
codemaker/source/cppumaker/dependencies.cxx:    std::vector< OString > args;
codemaker/source/cppumaker/includes.cxx:    std::vector< OString > args;
codemaker/source/javamaker/classfile.cxx:void appendU1(std::vector< unsigned char > & stream, sal_uInt8 data) {
codemaker/source/javamaker/classfile.cxx:void appendU2(std::vector< unsigned char > & stream, sal_uInt16 data) {
codemaker/source/javamaker/classfile.cxx:void appendU4(std::vector< unsigned char > & stream, sal_uInt32 data) {
codemaker/source/javamaker/classfile.cxx:void appendU8(std::vector< unsigned char > & stream, sal_uInt64 data) {
codemaker/source/javamaker/classfile.cxx:    std::vector< unsigned char > & stream,
codemaker/source/javamaker/classfile.cxx:    std::vector< unsigned char > const & data)
codemaker/source/javamaker/classfile.cxx:void writeStream(FileStream & file, std::vector< unsigned char > const & stream)
codemaker/source/javamaker/classfile.cxx:    std::vector< unsigned char >::size_type n = stream.size();
codemaker/source/javamaker/classfile.cxx:        sizeof (std::vector< unsigned char >::size_type)
codemaker/source/javamaker/classfile.cxx:    std::vector< unsigned char >::size_type n = m_code.size();
codemaker/source/javamaker/classfile.cxx:    std::vector< OString > const & exceptions,
codemaker/source/javamaker/classfile.cxx:    std::vector< OString >::size_type excs = exceptions.size();
codemaker/source/javamaker/classfile.cxx:        std::vector< unsigned char >::size_type codeSize = code->m_code.size();
codemaker/source/javamaker/classfile.cxx:        std::vector< unsigned char >::size_type exceptionTableSize
codemaker/source/javamaker/classfile.cxx:    std::vector< unsigned char > & stream, OString const & signature)
codemaker/source/javamaker/classfile.hxx:        typedef std::vector< unsigned char >::size_type Branch;
codemaker/source/javamaker/classfile.hxx:        typedef std::vector< unsigned char >::size_type Position;
codemaker/source/javamaker/classfile.hxx:        std::vector< unsigned char > m_code;
codemaker/source/javamaker/classfile.hxx:        std::vector< unsigned char > m_exceptionTable;
codemaker/source/javamaker/classfile.hxx:        std::vector< rtl::OString > const & exceptions,
codemaker/source/javamaker/classfile.hxx:        std::vector< unsigned char > & stream, rtl::OString const & signature);
codemaker/source/javamaker/classfile.hxx:    std::vector< unsigned char > m_constantPool;
codemaker/source/javamaker/classfile.hxx:    std::vector< unsigned char > m_interfaces;
codemaker/source/javamaker/classfile.hxx:    std::vector< unsigned char > m_fields;
codemaker/source/javamaker/classfile.hxx:    std::vector< unsigned char > m_methods;
codemaker/source/javamaker/classfile.hxx:    std::vector< unsigned char > m_attributes;
codemaker/source/javamaker/javatype.cxx:    sal_Int32 rank, std::vector< OUString > const & arguments,
codemaker/source/javamaker/javatype.cxx:        for (std::vector< OUString >::const_iterator i(arguments.begin());
codemaker/source/javamaker/javatype.cxx:            std::vector< OUString > args;
codemaker/source/javamaker/javatype.cxx:    sal_Int32 rank, std::vector< OUString > const & arguments)
codemaker/source/javamaker/javatype.cxx:    std::vector< OUString > const & arguments, bool array, bool classType,
codemaker/source/javamaker/javatype.cxx:    std::vector< OUString > args;
codemaker/source/javamaker/javatype.cxx:    OString const & className, std::vector< TypeInfo > const & typeInfo,
codemaker/source/javamaker/javatype.cxx:    std::vector< TypeInfo >::size_type typeInfos = typeInfo.size();
codemaker/source/javamaker/javatype.cxx:            "<clinit>", "()V", code.get(), std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:        code.get(), std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:        "<clinit>", "()V", code.get(), std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:    ClassFile * classFile, std::vector< TypeInfo > * typeInfo,
codemaker/source/javamaker/javatype.cxx:    std::vector< rtl::OUString > args;
codemaker/source/javamaker/javatype.cxx:                    manager, sort, nucleus, 0, std::vector< OUString >(), false,
codemaker/source/javamaker/javatype.cxx:            manager, sort, nucleus, rank - 1, std::vector< OUString >(), false,
codemaker/source/javamaker/javatype.cxx:        manager, sort, nucleus, rank, std::vector< OUString >(), false, false,
codemaker/source/javamaker/javatype.cxx:        std::vector< OUString > args;
codemaker/source/javamaker/javatype.cxx:    std::vector< TypeInfo > typeInfo;
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), desc.getSignature());
codemaker/source/javamaker/javatype.cxx:    std::vector< TypeInfo > typeInfo;
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), desc.getSignature());
codemaker/source/javamaker/javatype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/javamaker/javatype.cxx:    std::vector< TypeInfo > typeInfo;
codemaker/source/javamaker/javatype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/javamaker/javatype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), desc1.getSignature());
codemaker/source/javamaker/javatype.cxx:    for (std::vector< unoidl::ExceptionTypeEntity::Member >::const_iterator i(
codemaker/source/javamaker/javatype.cxx:        std::vector< OString >(), desc2.getSignature());
codemaker/source/javamaker/javatype.cxx:    std::vector< OUString > const & exceptionTypes,
codemaker/source/javamaker/javatype.cxx:    Dependencies * dependencies, std::vector< OString > * exceptions,
codemaker/source/javamaker/javatype.cxx:    std::vector< TypeInfo > typeInfo;
codemaker/source/javamaker/javatype.cxx:            std::vector< OString > exc;
codemaker/source/javamaker/javatype.cxx:                std::vector< OString > exc2;
codemaker/source/javamaker/javatype.cxx:            std::vector< OString > exc2;
codemaker/source/javamaker/javatype.cxx:    std::vector< OString > exc;
codemaker/source/javamaker/javatype.cxx:                code.get(), std::vector< OString >(), "");
codemaker/source/javamaker/javatype.cxx:        "get", desc.getDescriptor(), code.get(), std::vector< OString >(),
comphelper/qa/container/comphelper_ifcontainer.cxx:            std::vector< Reference< XEventListener > > aListeners;
comphelper/qa/container/comphelper_ifcontainer.cxx:            std::vector< Reference< XInterface > > aElements = pContainer->getElements();
comphelper/qa/unit/syntaxhighlighttest.cxx:    std::vector<HighlightPortion> ps;
comphelper/qa/unit/syntaxhighlighttest.cxx:        static_cast<std::vector<HighlightPortion>::size_type>(1), ps.size());
comphelper/qa/unit/syntaxhighlighttest.cxx:    std::vector<HighlightPortion> ps;
comphelper/qa/unit/syntaxhighlighttest.cxx:        static_cast<std::vector<HighlightPortion>::size_type>(1), ps.size());
comphelper/qa/unit/syntaxhighlighttest.cxx:    std::vector<HighlightPortion> ps;
comphelper/qa/unit/syntaxhighlighttest.cxx:        static_cast<std::vector<HighlightPortion>::size_type>(2), ps.size());
comphelper/qa/unit/syntaxhighlighttest.cxx:    std::vector<HighlightPortion> ps;
comphelper/qa/unit/syntaxhighlighttest.cxx:        static_cast<std::vector<HighlightPortion>::size_type>(1), ps.size());
comphelper/qa/unit/syntaxhighlighttest.cxx:    std::vector<HighlightPortion> ps;
comphelper/qa/unit/syntaxhighlighttest.cxx:        static_cast<std::vector<HighlightPortion>::size_type>(2), ps.size());
comphelper/qa/unit/syntaxhighlighttest.cxx:    std::vector<HighlightPortion> aPortions;
comphelper/qa/unit/syntaxhighlighttest.cxx:    for(std::vector<HighlightPortion>::const_iterator itr =
comphelper/source/container/IndexedPropertyValuesContainer.cxx:typedef std::vector < uno::Sequence< beans::PropertyValue > > IndexedPropertyValues;
comphelper/source/container/enumerablemap.cxx:        ::std::vector< MapEnumerator* >             m_aModListeners;
comphelper/source/container/enumerablemap.cxx:        for (   ::std::vector< MapEnumerator* >::iterator lookup = _mapData.m_aModListeners.begin();
comphelper/source/container/interfacecontainer2.cxx:std::vector< Reference<XInterface> > OInterfaceContainerHelper2::getElements() const
comphelper/source/container/interfacecontainer2.cxx:    std::vector< Reference<XInterface> > rVec;
comphelper/source/container/interfacecontainer2.cxx:            aData.pAsVector = new std::vector< Reference< XInterface > >( *aData.pAsVector );
comphelper/source/container/interfacecontainer2.cxx:        std::vector< Reference< XInterface > > * pVec = new std::vector< Reference< XInterface > >( 2 );
comphelper/source/eventattachermgr/eventattachermgr.cxx:    std::vector< Reference< XEventListener > > aAttachedListenerSeq;
comphelper/source/eventattachermgr/eventattachermgr.cxx:    rCurObj.aAttachedListenerSeq = std::vector< Reference< XEventListener > >( aCurrentPosition->aEventList.size() );
comphelper/source/eventattachermgr/eventattachermgr.cxx:        rCurObj.aAttachedListenerSeq = comphelper::sequenceToContainer<std::vector<Reference< XEventListener >>>(
comphelper/source/misc/accessibleeventnotifier.cxx:        std::vector< Reference< XInterface > > aListeners;
comphelper/source/misc/componentmodule.cxx:    typedef ::std::vector< ComponentDescription >   ComponentDescriptions;
comphelper/source/misc/configurationhelper.cxx:    ::std::vector< css::uno::Any > lParams;
comphelper/source/misc/docpasswordhelper.cxx:        const ::std::vector< OUString >* pDefaultPasswords,
comphelper/source/misc/docpasswordhelper.cxx:        for( ::std::vector< OUString >::const_iterator aIt = pDefaultPasswords->begin(), aEnd = pDefaultPasswords->end(); (eResult == DocPasswordVerifierResult::WrongPassword) && (aIt != aEnd); ++aIt )
comphelper/source/misc/documentiologring.hxx:    std::vector< OUString > m_aMessages;
comphelper/source/misc/interaction.cxx:            std::vector<Reference<XInteractionContinuation>> const& rContinuations)
comphelper/source/misc/namedvaluecollection.cxx:    ::std::vector< OUString > NamedValueCollection::getNames() const
comphelper/source/misc/namedvaluecollection.cxx:        ::std::vector< OUString > aNames;
comphelper/source/misc/numberedcollection.cxx:    ::std::vector< ::sal_Int32 > lPossibleNumbers;
comphelper/source/misc/numberedcollection.cxx:            ::std::vector< ::sal_Int32 >::iterator pPossible = ::std::find(lPossibleNumbers.begin (), lPossibleNumbers.end (), rItem.nNumber);
comphelper/source/misc/servicedecl.cxx:    std::vector<OUString> vec;
comphelper/source/misc/stillreadwriteinteraction.cxx:    ::std::vector< ::ucbhelper::InterceptedInteraction::InterceptedRequest > lInterceptions;
comphelper/source/misc/stillreadwriteinteraction.cxx:    setInterceptions(::std::vector< ::ucbhelper::InterceptedInteraction::InterceptedRequest >());
comphelper/source/misc/storagehelper.cxx:    : public std::vector< uno::Reference< embed::XStorage > > {};
comphelper/source/misc/storagehelper.cxx:static void splitPath( std::vector<OUString> &rElems,
comphelper/source/misc/storagehelper.cxx:        std::vector<OUString> &rElems, sal_uInt32 nOpenMode,
comphelper/source/misc/storagehelper.cxx:    std::vector<OUString> aElems;
comphelper/source/misc/storagehelper.cxx:    std::vector<OUString> aElems;
comphelper/source/misc/string.cxx:    std::vector< OUString > vec;
comphelper/source/misc/string.cxx:OString join(const OString& rSeparator, const std::vector<OString>& rSequence)
comphelper/source/misc/syntaxhighlight.cxx:                               /*out*/std::vector<HighlightPortion>& portions) const;
comphelper/source/misc/syntaxhighlight.cxx:                                                 /*out*/std::vector<HighlightPortion>& portions) const
comphelper/source/misc/syntaxhighlight.cxx:                                              /*out*/std::vector<HighlightPortion>& portions) const
comphelper/source/property/propagg.cxx:        const Property* lcl_findPropertyByName( const std::vector< Property >& _rProps, const OUString& _rName )
comphelper/source/property/propagg.cxx:    :m_aProperties( comphelper::sequenceToContainer<std::vector<css::beans::Property>>(_rProperties) )
comphelper/source/property/propagg.cxx:    std::vector<css::beans::Property>::iterator pMergedProps = m_aProperties.begin();
comphelper/source/property/propertysetinfo.cxx:    std::vector< Property > getProperties() throw();
comphelper/source/property/propertysetinfo.cxx:    std::vector< Property > maProperties;
comphelper/source/property/propertysetinfo.cxx:std::vector< Property > PropertyMapImpl::getProperties() throw()
comphelper/source/streaming/memorystream.cxx:    std::vector< sal_Int8 > maData;
comphelper/source/xml/attributelist.cxx:    ::std::vector<struct TagAttribute_Impl> vecAttribute;
comphelper/source/xml/attributelist.cxx:    ::std::vector<struct TagAttribute_Impl>::iterator ii = m_pImpl->vecAttribute.begin();
comphelper/source/xml/attributelist.cxx:    ::std::vector<struct TagAttribute_Impl>::iterator ii = m_pImpl->vecAttribute.begin();
comphelper/source/xml/ofopxmlhelper.cxx:    std::vector< OUString > m_aElementsSeq; // stack of elements being parsed
comphelper/source/xml/xmltools.cxx:    void encodeChaff(std::vector<sal_uInt8> &rChaff)
comphelper/source/xml/xmltools.cxx:        for (std::vector<sal_uInt8>::iterator aI = rChaff.begin(), aEnd = rChaff.end();
comphelper/source/xml/xmltools.cxx:            std::vector<sal_uInt8> aChaff(nLength);
compilerplugins/clang/badstatics.cxx:    static std::pair<bool, std::vector<FieldDecl const*>> isBadStaticType(
compilerplugins/clang/badstatics.cxx:            QualType const& rpType, std::vector<FieldDecl const*> & chain,
compilerplugins/clang/badstatics.cxx:            std::vector<QualType> const& rParents)
compilerplugins/clang/badstatics.cxx:                std::vector<QualType> copy(rParents);
compilerplugins/clang/badstatics.cxx:                return std::make_pair(false, std::vector<FieldDecl const*>());
compilerplugins/clang/badstatics.cxx:            return std::make_pair(false, std::vector<FieldDecl const*>());
compilerplugins/clang/badstatics.cxx:            return std::make_pair(false, std::vector<FieldDecl const*>());
compilerplugins/clang/badstatics.cxx:            return std::make_pair(false, std::vector<FieldDecl const*>());
compilerplugins/clang/badstatics.cxx:        std::vector<QualType> copy(rParents);
compilerplugins/clang/badstatics.cxx:        return std::make_pair(false, std::vector<FieldDecl const*>());
compilerplugins/clang/badstatics.cxx:            std::vector<FieldDecl const*> pad;
compilerplugins/clang/badstatics.cxx:                            std::vector<QualType>()));
compilerplugins/clang/badvectorinit.cxx: std::vector< basebmp::Color > aDevPal(2);
compilerplugins/clang/badvectorinit.cxx: std::vector< basebmp::Color > aDevPal(2, basebmp::Color(0,0,0));
compilerplugins/clang/badvectorinit.cxx: std::vector< basebmp::Color > aDevPal;
compilerplugins/clang/badvectorinit.cxx: std::vector< basebmp::Color > aDevPal(2);
compilerplugins/clang/badvectorinit.cxx: std::vector< basebmp::Color > aDevPal{
compilerplugins/clang/badvectorinit.cxx: std::vector< foo > vFoos;
compilerplugins/clang/badvectorinit.cxx:     std::vector<int>(3, 0)
compilerplugins/clang/badvectorinit.cxx:     std::vector<int>{3, 0}
compilerplugins/clang/implicitboolconversion.cxx:    std::stack<std::vector<ImplicitCastExpr const *>> nested;
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/implicitboolconversion.cxx:    nested.push(std::vector<ImplicitCastExpr const *>());
compilerplugins/clang/refcounting.cxx:static std::vector<std::string> PROBABLY_GOOD_TEMPLATES = {
compilerplugins/clang/store/findoncontainer.cxx:            || tname.find("std::vector") != std::string::npos
compilerplugins/clang/unusedfields.cxx:                || n == "std::vector" || n == "std::__debug::vector" )
compilerplugins/clang/unusedvariablecheck.cxx:are called and nothing else. For example std::vector is a class where
compilerplugins/clang/unusedvariablecheck.cxx:SAL_WARN_UNUSED (see e.g. OUString). For external classes such as std::vector
compilerplugins/clang/unusedvariablecheck.cxx:                || n == "std::vector" || n == "std::__debug::vector" )
configmgr/source/access.cxx:    std::vector< css::uno::Type > types;
configmgr/source/access.cxx:    std::vector< OUString > services;
configmgr/source/access.cxx:    std::vector< rtl::Reference< ChildAccess > > children(getAllChildren());
configmgr/source/access.cxx:    std::vector< OUString > names;
configmgr/source/access.cxx:    for (std::vector< rtl::Reference< ChildAccess > >::iterator i(
configmgr/source/access.cxx:    std::vector< rtl::Reference< ChildAccess > > children(getAllChildren());
configmgr/source/access.cxx:    std::vector< css::beans::Property > properties;
configmgr/source/access.cxx:    for (std::vector< rtl::Reference< ChildAccess > >::iterator i(
configmgr/source/access.cxx:            std::vector< rtl::Reference< ChildAccess > > children(
configmgr/source/access.cxx:            for (std::vector< rtl::Reference< ChildAccess > >::iterator i(
configmgr/source/access.cxx:        std::vector< rtl::Reference< ChildAccess > > children(getAllChildren());
configmgr/source/access.cxx:std::vector< rtl::Reference< ChildAccess > > Access::getAllChildren() {
configmgr/source/access.cxx:    std::vector< rtl::Reference< ChildAccess > > vec;
configmgr/source/access.cxx:    std::vector< css::util::ElementChange > * changes)
configmgr/source/access.cxx:    std::vector< css::util::ElementChange > * allChanges)
configmgr/source/access.cxx:    std::vector< css::beans::PropertyChangeEvent > propChanges;
configmgr/source/access.hxx:    virtual void addTypes(std::vector< css::uno::Type > * types)
configmgr/source/access.hxx:        std::vector< OUString > * services) = 0;
configmgr/source/access.hxx:    std::vector< rtl::Reference< ChildAccess > > getAllChildren();
configmgr/source/access.hxx:        std::vector< css::util::ElementChange > * changes);
configmgr/source/access.hxx:        std::vector< css::util::ElementChange > * changes);
configmgr/source/broadcaster.hxx:    typedef std::vector< DisposeNotification > DisposeNotifications;
configmgr/source/broadcaster.hxx:    typedef std::vector< ContainerNotification > ContainerNotifications;
configmgr/source/broadcaster.hxx:    typedef std::vector< PropertyChangeNotification >
configmgr/source/broadcaster.hxx:    typedef std::vector< PropertiesChangeNotification >
configmgr/source/broadcaster.hxx:    typedef std::vector< ChangesNotification > ChangesNotifications;
configmgr/source/childaccess.cxx:void ChildAccess::addTypes(std::vector< css::uno::Type > * types) const {
configmgr/source/childaccess.cxx:    std::vector< OUString > * services)
configmgr/source/childaccess.hxx:        std::vector< css::uno::Type > * types) const override;
configmgr/source/childaccess.hxx:        std::vector< OUString > * services) override;
configmgr/source/dconf.cxx:                std::vector<GVariant *> vs;
configmgr/source/dconf.cxx:                std::vector<GVariant *> vs;
configmgr/source/path.hxx:typedef std::vector< OUString > Path;
configmgr/source/rootaccess.cxx:    std::vector< css::util::ElementChange > changes;
configmgr/source/rootaccess.cxx:    std::vector< css::util::ElementChange > changes;
configmgr/source/rootaccess.cxx:    std::vector< css::util::ElementChange > changes;
configmgr/source/rootaccess.cxx:void RootAccess::addTypes(std::vector< css::uno::Type > * types) const {
configmgr/source/rootaccess.cxx:    std::vector< OUString > * services)
configmgr/source/rootaccess.hxx:    virtual void addTypes(std::vector< css::uno::Type > * types)
configmgr/source/rootaccess.hxx:        std::vector< OUString > * services) override;
configmgr/source/setnode.hxx:    std::vector< OUString > & getAdditionalTemplateNames() { return additionalTemplateNames_;}
configmgr/source/setnode.hxx:    std::vector< OUString > additionalTemplateNames_;
configmgr/source/valueparser.cxx:    std::vector< sal_Int8 > seq;
configmgr/source/valueparser.cxx:    std::vector< T > seq;
configmgr/source/valueparser.hxx:    std::vector< css::uno::Any > items_;
configure.ac:            void f(std::vector<int> & v, std::function<bool(int, int)> fn) {
connectivity/source/commontools/TDatabaseMetaDataBase.cxx:            ::std::vector<ExpressionNodeSharedPtr> aConditions;
connectivity/source/commontools/TDatabaseMetaDataBase.cxx:                ::std::vector<ExpressionNodeSharedPtr>::iterator aIter = aConditions.begin();
connectivity/source/commontools/TDatabaseMetaDataBase.cxx:                ::std::vector<ExpressionNodeSharedPtr>::iterator aEnd = aConditions.end();
connectivity/source/commontools/TIndex.cxx:    ::std::vector< OUString> aVector;
connectivity/source/commontools/TIndex.cxx:    ::std::vector< OUString> aVector;
connectivity/source/commontools/TIndexColumns.cxx:                        const ::std::vector< OUString> &_rVector)
connectivity/source/commontools/TIndexes.cxx:             const ::std::vector< OUString> &_rVector
connectivity/source/commontools/TKey.cxx:    ::std::vector< OUString> aVector;
connectivity/source/commontools/TKeyColumns.cxx:                const ::std::vector< OUString> &_rVector)
connectivity/source/commontools/TSkipDeletedSet.cxx:    ::std::vector<sal_Int32>().swap(m_aBookmarksPositions);
connectivity/source/commontools/TSkipDeletedSet.cxx:    ::std::vector<sal_Int32>::const_iterator aFind = ::std::find(m_aBookmarksPositions.begin(),m_aBookmarksPositions.end(),_nPos);
connectivity/source/commontools/TSkipDeletedSet.cxx:    ::std::vector<sal_Int32>::iterator aFind = ::std::find(m_aBookmarksPositions.begin(),m_aBookmarksPositions.end(),_nBookmark);
connectivity/source/commontools/TSortIndex.cxx:        const ::std::vector<OKeyType>& aKeyType = pIndex->getKeyType();
connectivity/source/commontools/TSortIndex.cxx:        ::std::vector<OKeyType>::const_iterator aIter = aKeyType.begin();
connectivity/source/commontools/TSortIndex.cxx:        for (::std::vector<sal_Int16>::size_type i=0;aIter != aKeyType.end(); ++aIter,++i)
connectivity/source/commontools/TSortIndex.cxx:OSortIndex::OSortIndex( const ::std::vector<OKeyType>& _aKeyType,
connectivity/source/commontools/TSortIndex.cxx:                        const ::std::vector<TAscendingOrder>& _aAscending)
connectivity/source/commontools/TTableHelper.cxx:        ::std::vector< ColumnDesc > m_aColumnDesc;
connectivity/source/commontools/TTableHelper.cxx:    void lcl_collectColumnDescs_throw( const Reference< XResultSet >& _rxResult, ::std::vector< ColumnDesc >& _out_rColumns )
connectivity/source/commontools/TTableHelper.cxx:    void lcl_sanitizeColumnDescs( ::std::vector< ColumnDesc >& _rColumns )
connectivity/source/commontools/TTableHelper.cxx:        for (   ::std::vector< ColumnDesc >::iterator collect = _rColumns.begin();
connectivity/source/commontools/TTableHelper.cxx:            for (   ::std::vector< ColumnDesc >::iterator normalize = _rColumns.begin();
connectivity/source/commontools/TTableHelper.cxx:        for (   ::std::vector< ColumnDesc >::iterator offset = _rColumns.begin();
connectivity/source/commontools/TTableHelper.cxx:        for (   ::std::vector< ColumnDesc >::const_iterator copy = m_pImpl->m_aColumnDesc.begin();
connectivity/source/commontools/TTableHelper.cxx:    ::std::vector< ColumnDesc >::const_iterator aEnd = m_pImpl->m_aColumnDesc.end();
connectivity/source/commontools/TTableHelper.cxx:    for (::std::vector< ColumnDesc >::const_iterator aIter = m_pImpl->m_aColumnDesc.begin();aIter != aEnd;++aIter)
connectivity/source/commontools/TTableHelper.cxx:    } // for (::std::vector< ColumnDesc >::const_iterator aIter = m_pImpl->m_aColumnDesc.begin();aIter != aEnd;++aIter)
connectivity/source/commontools/dbtools.cxx:        ::std::vector<bool, std::allocator<bool> >       m_aSet;
connectivity/source/commontools/dbtools.cxx:        OParameterWrapper(const ::std::vector<bool, std::allocator<bool> >& _aSet,const Reference<XIndexAccess>& _xSource) : m_aSet(_aSet),m_xSource(_xSource){}
connectivity/source/commontools/dbtools.cxx:            ::std::vector<bool, std::allocator<bool> >::iterator aIter = m_aSet.begin();
connectivity/source/commontools/dbtools.cxx:            ::std::vector<bool, std::allocator<bool> >::iterator aEnd = m_aSet.end();
connectivity/source/commontools/dbtools.cxx:                      const ::std::vector<bool, std::allocator<bool> >& _aParametersSet)
connectivity/source/commontools/dbtools.cxx:    ::std::vector<bool, std::allocator<bool> > aNewParameterSet( _aParametersSet );
connectivity/source/commontools/dbtools.cxx:        typedef ::std::map< OUString, ::std::vector<sal_Int32> > TParameterPositions;
connectivity/source/commontools/dbtools.cxx:                ::std::vector<sal_Int32>::iterator aIterPos = aFind->second.begin();
connectivity/source/commontools/dbtools.cxx:                ::std::vector<sal_Int32>::iterator aEndPos = aFind->second.end();
connectivity/source/commontools/parameters.cxx:        ::std::vector< bool > aEmptyArray;
connectivity/source/commontools/parameters.cxx:        const Reference< XNameAccess >& _rxColumns, ::std::vector< OUString >& _out_rAdditionalFilterComponents )
connectivity/source/commontools/parameters.cxx:        ::std::vector< OUString > aStrippedMasterFields;
connectivity/source/commontools/parameters.cxx:        ::std::vector< OUString > aStrippedDetailFields;
connectivity/source/commontools/parameters.cxx:            ::std::vector< OUString > aAdditionalFilterComponents;
connectivity/source/commontools/parameters.cxx:                for (   ::std::vector< OUString >::const_iterator aComponent = aAdditionalFilterComponents.begin();
connectivity/source/commontools/parameters.cxx:            for (   ::std::vector< sal_Int32 >::iterator aIndex = aParam->second.aInnerIndexes.begin();
connectivity/source/commontools/parameters.cxx:                for ( ::std::vector< sal_Int32 >::const_iterator aPosition = aParamInfo->second.aInnerIndexes.begin();
connectivity/source/commontools/parameters.cxx:                for ( ::std::vector< sal_Int32 >::const_iterator aPosition = aParamInfo->second.aInnerIndexes.begin();
connectivity/source/commontools/paramwrapper.cxx:            const Reference< XParameters >& _rxAllParameters, const ::std::vector< sal_Int32 >& _rIndexes )
connectivity/source/commontools/paramwrapper.cxx:                    for ( ::std::vector< sal_Int32 >::iterator aIter = m_aIndexes.begin(); aIter != m_aIndexes.end(); ++aIter )
connectivity/source/cpool/ZConnectionPool.hxx:    typedef ::std::vector< ::com::sun::star::uno::Reference< ::com::sun::star::sdbc::XPooledConnection> > TPooledConnections;
connectivity/source/drivers/ado/ADriver.cxx:        ::std::vector< DriverPropertyInfo > aDriverInfo;
connectivity/source/drivers/ado/AStatement.cxx:        ::std::vector<OTypeInfo>::const_iterator aIter = ::std::find(m_aTypeInfo.begin(),m_aTypeInfo.end(),aInfo);
connectivity/source/drivers/calc/CTable.cxx:    ::std::vector<Type> aOwnTypes;
connectivity/source/drivers/dbase/DDriver.cxx:        ::std::vector< DriverPropertyInfo > aDriverInfo;
connectivity/source/drivers/dbase/DTable.cxx:    ::std::vector<Type> aOwnTypes;
connectivity/source/drivers/dbase/DTable.cxx:    ::std::vector< Reference<XPropertySet> > aIndexedCols(nColumnCount);
connectivity/source/drivers/evoab2/NPreparedStatement.hxx:            ::std::vector< Parameter>       m_aParameters;
connectivity/source/drivers/evoab2/NResultSetMetaData.hxx:                  ::std::vector<sal_Int32>        m_aEvoabFields;
connectivity/source/drivers/evoab2/NStatement.hxx:        typedef ::std::vector< FieldSort >  SortDescriptor;
connectivity/source/drivers/file/FCatalog.cxx:    ::std::vector<Type> aOwnTypes;
connectivity/source/drivers/file/FDateFunctions.cxx:ORowSetValue OOp_Week::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FDateFunctions.cxx:ORowSetValue OOp_CurDate::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FDateFunctions.cxx:ORowSetValue OOp_CurTime::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FDateFunctions.cxx:ORowSetValue OOp_Now::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FDriver.cxx:        ::std::vector< DriverPropertyInfo > aDriverInfo;
connectivity/source/drivers/file/FNoException.cxx:void OPreparedStatement::scanParameter(OSQLParseNode* pParseNode,::std::vector< OSQLParseNode*>& _rParaNodes)
connectivity/source/drivers/file/FNoException.cxx:    ::std::vector<sal_Int32>::iterator aIter = m_aOrderbyColumnNumber.begin();
connectivity/source/drivers/file/FNumericFunctions.cxx:ORowSetValue OOp_Round::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FNumericFunctions.cxx:ORowSetValue OOp_Log::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FNumericFunctions.cxx:ORowSetValue OOp_Pi::operate(const ::std::vector<ORowSetValue>& /*lhs*/) const
connectivity/source/drivers/file/FPreparedStatement.cxx:    ::std::vector< OSQLParseNode*> aParseNodes;
connectivity/source/drivers/file/FPreparedStatement.cxx:            ::std::vector< OSQLParseNode*>::const_iterator aIter = aParseNodes.begin();
connectivity/source/drivers/file/FResultSet.cxx:    ::std::vector<sal_Int32>::iterator aOrderByIter = m_aOrderbyColumnNumber.begin();
connectivity/source/drivers/file/FResultSet.cxx:    for (::std::vector<sal_Int16>::size_type i=0;aOrderByIter != m_aOrderbyColumnNumber.end(); ++aOrderByIter,++i)
connectivity/source/drivers/file/FResultSet.cxx:                                   ::std::vector<sal_Int32>& _rColMapping)
connectivity/source/drivers/file/FStatement.cxx:        ::std::vector<OUString> aColumnNameList;
connectivity/source/drivers/file/FStatement.cxx:        ::std::vector< OUString> aList(1);
connectivity/source/drivers/file/FStatement.cxx:void OStatement_Base::ParseAssignValues(const ::std::vector< OUString>& aColumnNameList,OSQLParseNode* pRow_Value_Constructor_Elem, sal_Int32 nIndex)
connectivity/source/drivers/file/FStringFunctions.cxx:ORowSetValue OOp_Char::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FStringFunctions.cxx:    ::std::vector<ORowSetValue>::const_reverse_iterator aIter = lhs.rbegin();
connectivity/source/drivers/file/FStringFunctions.cxx:    ::std::vector<ORowSetValue>::const_reverse_iterator aEnd = lhs.rend();
connectivity/source/drivers/file/FStringFunctions.cxx:ORowSetValue OOp_Concat::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FStringFunctions.cxx:    ::std::vector<ORowSetValue>::const_reverse_iterator aIter = lhs.rbegin();
connectivity/source/drivers/file/FStringFunctions.cxx:    ::std::vector<ORowSetValue>::const_reverse_iterator aEnd = lhs.rend();
connectivity/source/drivers/file/FStringFunctions.cxx:ORowSetValue OOp_Locate::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FStringFunctions.cxx:    ::std::vector<ORowSetValue>::const_iterator aIter = lhs.begin();
connectivity/source/drivers/file/FStringFunctions.cxx:    ::std::vector<ORowSetValue>::const_iterator aEnd = lhs.end();
connectivity/source/drivers/file/FStringFunctions.cxx:ORowSetValue OOp_SubString::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FStringFunctions.cxx:    ::std::vector<ORowSetValue>::const_iterator aIter = lhs.begin();
connectivity/source/drivers/file/FStringFunctions.cxx:    ::std::vector<ORowSetValue>::const_iterator aEnd = lhs.end();
connectivity/source/drivers/file/FStringFunctions.cxx:ORowSetValue OOp_Replace::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/FStringFunctions.cxx:ORowSetValue OOp_Insert::operate(const ::std::vector<ORowSetValue>& lhs) const
connectivity/source/drivers/file/fanalyzer.cxx:    for ( ::std::vector< TPredicates >::iterator aIter = m_aSelectionEvaluations.begin(); aIter != m_aSelectionEvaluations.end();++aIter)
connectivity/source/drivers/file/fanalyzer.cxx:        for ( ::std::vector< TPredicates >::const_iterator aIter = m_aSelectionEvaluations.begin(); aIter != m_aSelectionEvaluations.end() && !m_bHasSelectionCode ;++aIter)
connectivity/source/drivers/file/fanalyzer.cxx:void OSQLAnalyzer::setSelectionEvaluationResult(OValueRefRow& _pRow,const ::std::vector<sal_Int32>& _rColumnMapping)
connectivity/source/drivers/file/fanalyzer.cxx:    for ( ::std::vector< TPredicates >::iterator aIter = m_aSelectionEvaluations.begin(); aIter != m_aSelectionEvaluations.end();++aIter,++nPos)
connectivity/source/drivers/file/fanalyzer.cxx:    for ( ::std::vector< TPredicates >::iterator aIter = m_aSelectionEvaluations.begin(); aIter != m_aSelectionEvaluations.end();++aIter)
connectivity/source/drivers/file/fanalyzer.cxx:    for ( ::std::vector< TPredicates >::iterator aIter = m_aSelectionEvaluations.begin(); aIter != m_aSelectionEvaluations.end();++aIter)
connectivity/source/drivers/file/fcode.cxx:    ::std::vector<ORowSetValue> aValues;
connectivity/source/drivers/file/fcode.cxx:    ::std::vector<OOperand*> aOperands;
connectivity/source/drivers/file/fcode.cxx:    ::std::vector<OOperand*>::iterator aIter = aOperands.begin();
connectivity/source/drivers/file/fcode.cxx:    ::std::vector<OOperand*>::iterator aEnd = aOperands.end();
connectivity/source/drivers/firebird/Connection.hxx:        typedef ::std::vector< ::connectivity::OTypeInfo>   TTypeInfoVector;
connectivity/source/drivers/firebird/Connection.hxx:        typedef std::vector< ::com::sun::star::uno::WeakReferenceHelper > OWeakRefArray;
connectivity/source/drivers/firebird/Indexes.hxx:                    const ::std::vector< ::rtl::OUString>& rVector);
connectivity/source/drivers/flat/EDriver.cxx:        ::std::vector< DriverPropertyInfo > aDriverInfo;
connectivity/source/drivers/flat/EResultSet.cxx:    ::std::vector<Type> aOwnTypes;
connectivity/source/drivers/flat/ETable.cxx:using std::vector;
connectivity/source/drivers/hsqldb/HCatalog.cxx:    ::std::vector<Type> aOwnTypes;
connectivity/source/drivers/hsqldb/HDriver.cxx:        ::std::vector< DriverPropertyInfo > aDriverInfo;
connectivity/source/drivers/hsqldb/HTable.cxx:        ::std::vector<Type> aOwnTypes;
connectivity/source/drivers/jdbc/JDriver.cxx:        ::std::vector< DriverPropertyInfo > aDriverInfo;
connectivity/source/drivers/kab/KConnection.hxx:        typedef std::vector< ::com::sun::star::uno::WeakReferenceHelper > OWeakRefArray;
connectivity/source/drivers/kab/KDriver.hxx:        typedef std::vector< ::com::sun::star::uno::WeakReferenceHelper > OWeakRefArray;
connectivity/source/drivers/kab/KResultSetMetaData.hxx:            ::std::vector<sal_Int32>    m_aKabFields;   // for each selected column, contains the number
connectivity/source/drivers/kab/korder.hxx:            ::std::vector<KabOrder *> m_aOrders;
connectivity/source/drivers/macab/MacabAddressBook.cxx:void manageDuplicateGroups(::std::vector<MacabGroup *> _xGroups)
connectivity/source/drivers/macab/MacabAddressBook.cxx:    ::std::vector<MacabGroup *>::reverse_iterator iter1, iter2;
connectivity/source/drivers/macab/MacabAddressBook.cxx:        ::std::vector<MacabGroup *>::iterator iter, end;
connectivity/source/drivers/macab/MacabAddressBook.cxx:::std::vector<MacabGroup *> MacabAddressBook::getMacabGroups()
connectivity/source/drivers/macab/MacabAddressBook.cxx:        m_xMacabGroups = ::std::vector<MacabGroup *>(nGroups);
connectivity/source/drivers/macab/MacabAddressBook.hxx:                ::std::vector<MacabGroup *> m_xMacabGroups;
connectivity/source/drivers/macab/MacabAddressBook.hxx:                ::std::vector<MacabGroup *> getMacabGroups();
connectivity/source/drivers/macab/MacabConnection.hxx:        typedef std::vector< ::com::sun::star::uno::WeakReferenceHelper > OWeakRefArray;
connectivity/source/drivers/macab/MacabDatabaseMetaData.cxx:        ::std::vector<MacabGroup *> xGroups = m_xConnection->getAddressBook()->getMacabGroups();
connectivity/source/drivers/macab/MacabDriver.hxx:        typedef std::vector< ::com::sun::star::uno::WeakReferenceHelper > OWeakRefArray;
connectivity/source/drivers/macab/MacabResultSetMetaData.hxx:            ::std::vector<sal_Int32>    m_aMacabFields; // for each selected column, contains the number
connectivity/source/drivers/macab/macaborder.hxx:            ::std::vector<MacabOrder *> m_aOrders;
connectivity/source/drivers/mork/MDatabaseMetaData.cxx:    ::std::vector< OUString > tables;
connectivity/source/drivers/mork/MDatabaseMetaData.cxx:    ::std::vector< OUString > tables;
connectivity/source/drivers/mork/MDatabaseMetaDataHelper.cxx:                                                   ::std::vector< OUString >& _rStrings)
connectivity/source/drivers/mork/MDatabaseMetaDataHelper.cxx:    ::std::vector< OUString > tables;
connectivity/source/drivers/mork/MDatabaseMetaDataHelper.hxx:                                         ::std::vector< OUString >&   _rStrings);
connectivity/source/drivers/mork/MPreparedStatement.cxx:    ::std::vector< OSQLParseNode*> aParseNodes;
connectivity/source/drivers/mork/MPreparedStatement.cxx:            ::std::vector< OSQLParseNode*>::const_iterator aIter =
connectivity/source/drivers/mork/MPreparedStatement.cxx:void OPreparedStatement::scanParameter(OSQLParseNode* pParseNode,::std::vector< OSQLParseNode*>& _rParaNodes)
connectivity/source/drivers/mork/MPreparedStatement.hxx:            void scanParameter(OSQLParseNode* pParseNode,::std::vector< OSQLParseNode*>& _rParaNodes);
connectivity/source/drivers/mork/MQueryHelper.cxx:::std::vector<bool> entryMatchedByExpression(MQueryHelper* _aQuery, MQueryExpression* _aExpr, MQueryHelperResultEntry* entry);
connectivity/source/drivers/mork/MQueryHelper.cxx:                ::std::vector<bool> vector = entryMatchedByExpression(this, &expr, entry);
connectivity/source/drivers/mork/MQueryHelper.cxx:                for (::std::vector<bool>::iterator iter = vector.begin(); iter != vector.end(); ++iter)
connectivity/source/drivers/mork/MQueryHelper.cxx:::std::vector<bool> entryMatchedByExpression(MQueryHelper* _aQuery, MQueryExpression* _aExpr, MQueryHelperResultEntry* entry)
connectivity/source/drivers/mork/MQueryHelper.cxx:    ::std::vector<bool> resultVector;
connectivity/source/drivers/mork/MQueryHelper.cxx:            ::std::vector<bool> subquery_result = entryMatchedByExpression(_aQuery, queryExpression, entry);
connectivity/source/drivers/mork/MQueryHelper.cxx:                for (::std::vector<bool>::iterator iter =  subquery_result.begin(); iter != subquery_result.end(); ++iter) {
connectivity/source/drivers/mork/MQueryHelper.cxx:                for (::std::vector<bool>::iterator iter = subquery_result.begin(); iter != subquery_result.end(); ++iter) {
connectivity/source/drivers/mork/MQueryHelper.hxx:            typedef ::std::vector< MQueryExpressionBase* > ExprVector;
connectivity/source/drivers/mork/MQueryHelper.hxx:            typedef std::vector< MQueryHelperResultEntry* > resultsArray;
connectivity/source/drivers/mork/MResultSet.cxx:                ::std::vector<sal_Int32>::iterator aOrderByIter = m_aOrderbyColumnNumber.begin();
connectivity/source/drivers/mork/MResultSet.cxx:                for ( ::std::vector<sal_Int16>::size_type i = 0; aOrderByIter != m_aOrderbyColumnNumber.end(); ++aOrderByIter,++i)
connectivity/source/drivers/mork/MResultSet.cxx:                    for ( ::std::vector<sal_Int32>::size_type i = 0; i < m_aColMapping.size(); i++ )
connectivity/source/drivers/mork/MResultSet.cxx:                        ::std::vector<sal_Int32>::iterator aIter = m_aOrderbyColumnNumber.begin();
connectivity/source/drivers/mork/MResultSet.cxx:                                   ::std::vector<sal_Int32>& _rColMapping)
connectivity/source/drivers/mork/MResultSet.cxx:    ::std::vector< OUString> aColumnNames;
connectivity/source/drivers/mork/MResultSet.cxx:void OResultSet::setColumnMapping(const ::std::vector<sal_Int32>& _aColumnMapping)
connectivity/source/drivers/mork/MResultSet.cxx:void OResultSet::setOrderByColumns(const ::std::vector<sal_Int32>& _aColumnOrderBy)
connectivity/source/drivers/mork/MResultSet.cxx:void OResultSet::setOrderByAscending(const ::std::vector<TAscendingOrder>& _aOrderbyAsc)
connectivity/source/drivers/mork/MResultSet.hxx:        typedef ::std::vector<TVoidPtr>         TVoidVector;
connectivity/source/drivers/mork/MResultSet.hxx:            ::std::vector<sal_Int32> m_aColMapping; // pos 0 is unused so we don't have to decrement 1 every time
connectivity/source/drivers/mork/MResultSet.hxx:            ::std::vector<sal_Int32> m_aOrderbyColumnNumber;
connectivity/source/drivers/mork/MResultSet.hxx:            ::std::vector<TAscendingOrder>  m_aOrderbyAscending;
connectivity/source/drivers/mork/MResultSet.hxx:            ::std::vector< OUString> m_aAttributeStrings;
connectivity/source/drivers/mork/MResultSet.hxx:            void setColumnMapping(const ::std::vector<sal_Int32>& _aColumnMapping);
connectivity/source/drivers/mork/MResultSet.hxx:            void setOrderByColumns(const ::std::vector<sal_Int32>& _aColumnOrderBy);
connectivity/source/drivers/mork/MResultSet.hxx:            void setOrderByAscending(const ::std::vector<TAscendingOrder>& _aOrderbyAsc);
connectivity/source/drivers/mork/MResultSet.hxx:                ::std::vector<sal_Int32>& _rColMapping);
connectivity/source/drivers/mork/MStatement.hxx:            ::std::vector<sal_Int32>                    m_aColMapping;
connectivity/source/drivers/mork/MStatement.hxx:            ::std::vector<sal_Int32>                    m_aOrderbyColumnNumber;
connectivity/source/drivers/mork/MStatement.hxx:            ::std::vector<TAscendingOrder>              m_aOrderbyAscending;
connectivity/source/drivers/mork/MorkParser.hxx:    std::vector<OUString> lists_;
connectivity/source/drivers/mysql/YCatalog.cxx:    ::std::vector<Type> aOwnTypes;
connectivity/source/drivers/mysql/YDriver.cxx:            ::std::vector<PropertyValue> aProps;
connectivity/source/drivers/mysql/YDriver.cxx:        ::std::vector< DriverPropertyInfo > aDriverInfo;
connectivity/source/drivers/odbc/ODriver.cxx:        ::std::vector< DriverPropertyInfo > aDriverInfo;
connectivity/source/drivers/postgresql/pq_array.cxx:    std::vector< std::vector< Any > > ret( count );
connectivity/source/drivers/postgresql/pq_array.cxx:        std::vector< Any > row( 2 );
connectivity/source/drivers/postgresql/pq_array.hxx:    std::vector< com::sun::star::uno::Any > m_data;
connectivity/source/drivers/postgresql/pq_array.hxx:        const std::vector< com::sun::star::uno::Any > & data,
connectivity/source/drivers/postgresql/pq_connection.cxx:    std::vector<char*> values;
connectivity/source/drivers/postgresql/pq_connection.cxx:    std::vector<bool>  acquired;
connectivity/source/drivers/postgresql/pq_connection.cxx:        std::vector<char*>::iterator pv = values.begin();
connectivity/source/drivers/postgresql/pq_connection.cxx:        std::vector<bool>::iterator pa = acquired.begin();
connectivity/source/drivers/postgresql/pq_connection.cxx:        const std::vector<char*>::iterator pve = values.end();
connectivity/source/drivers/postgresql/pq_connection.hxx:typedef ::std::vector< OString > OStringVector;
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:std::vector
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        m_refMutex, *this, std::vector< OUString >(), std::vector< std::vector< Any > > (), m_pSettings->tc );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        m_refMutex, *this, std::vector< OUString >(), std::vector< std::vector< Any > >(), m_pSettings->tc );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:    std::vector< std::vector<Any> > vec;
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        std::vector< Any > row( 5 );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        bool operator () ( const std::vector< Any >  & a, const std::vector< Any >  & b )
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:    std::vector< std::vector<Any> > vec;
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        std::vector<Any> row(1);
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        m_refMutex, *this, std::vector< OUString >(), std::vector< std::vector< Any > >(), m_pSettings->tc );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:    std::vector< std::vector<Any> > vec;
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:            std::vector< Any > row( 18 );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        m_refMutex, *this, std::vector< OUString >(), std::vector< std::vector< Any > >(), m_pSettings->tc );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        m_refMutex, *this, std::vector< OUString >(), std::vector< std::vector< Any > >(), m_pSettings->tc );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:    std::vector< std::vector<Any> > vec;
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        std::vector< Any > row( 6 );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:    std::vector< std::vector<Any> >::iterator ii = vec.begin();
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:    std::vector< std::vector< Any > > ret( vec.size() );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        std::vector< Any > row = *ii;
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        bool operator () ( const std::vector< Any > & a, const std::vector< Any > & b )
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:         std::vector< std::vector<Any> > &vec,
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:            std::vector< Any > row(18);
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:    std::vector< std::vector<Any> > vec;
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:    std::vector< std::vector<Any> > vec;
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        std::vector< sal_Int32 > columns = parseIntArray( xRow->getString(C_COLUMNS) );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:                std::vector< Any > result( 13 );
connectivity/source/drivers/postgresql/pq_databasemetadata.cxx:        m_refMutex, *this, std::vector< OUString >(), std::vector< std::vector< Any > >(), m_pSettings->tc );
connectivity/source/drivers/postgresql/pq_resultsetmetadata.hxx:    std::vector< ColDesc > m_colDesc;
connectivity/source/drivers/postgresql/pq_sequenceresultset.cxx:    const std::vector< OUString > &colNames,
connectivity/source/drivers/postgresql/pq_sequenceresultset.cxx:    const std::vector< std::vector< Any > > &data,
connectivity/source/drivers/postgresql/pq_sequenceresultset.hxx:    std::vector< std::vector< ::com::sun::star::uno::Any > > m_data;
connectivity/source/drivers/postgresql/pq_sequenceresultset.hxx:    std::vector< OUString > m_columnNames;
connectivity/source/drivers/postgresql/pq_sequenceresultset.hxx:        const std::vector< OUString > &colNames,
connectivity/source/drivers/postgresql/pq_sequenceresultset.hxx:        const std::vector< std::vector< com::sun::star::uno::Any > > &data,
connectivity/source/drivers/postgresql/pq_statement.cxx:static std::vector< OUString > lookupKeys(
connectivity/source/drivers/postgresql/pq_statement.cxx:    std::vector< OUString  > ret;
connectivity/source/drivers/postgresql/pq_statement.cxx:        std::vector< OUString > sourceTableKeys;
connectivity/source/drivers/postgresql/pq_statics.cxx:            statics.tablesRowNames = std::vector< OUString > ( 5 );
connectivity/source/drivers/postgresql/pq_statics.cxx:            statics.primaryKeyNames = std::vector< OUString > ( 6 );
connectivity/source/drivers/postgresql/pq_statics.cxx:            statics.schemaNames = std::vector< OUString > ( 1 );
connectivity/source/drivers/postgresql/pq_statics.cxx:            statics.tableTypeData = std::vector< std::vector< Any > >( 2 );
connectivity/source/drivers/postgresql/pq_statics.cxx:            statics.tableTypeData[0] = std::vector< Any > ( 1 );
connectivity/source/drivers/postgresql/pq_statics.cxx:            statics.tableTypeData[1] = std::vector< Any > ( 1 );
connectivity/source/drivers/postgresql/pq_statics.cxx:            statics.tableTypeNames = std::vector< OUString > ( 1 );
connectivity/source/drivers/postgresql/pq_statics.hxx:typedef std::vector< ColumnMetaData > ColumnMetaDataVector;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< OUString > tablesRowNames;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< OUString > columnRowNames;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< OUString > primaryKeyNames;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< OUString > schemaNames;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< OUString > tableTypeNames;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< OUString > typeinfoColumnNames;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< OUString > indexinfoColumnNames;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< OUString > resultSetArrayColumnNames;
connectivity/source/drivers/postgresql/pq_statics.hxx:    std::vector< std::vector< com::sun::star::uno::Any > > tableTypeData;
connectivity/source/drivers/postgresql/pq_tools.cxx:std::vector< Any > parseArray( const OUString & str ) throw( SQLException )
connectivity/source/drivers/postgresql/pq_tools.cxx:    std::vector<Any> elements;
connectivity/source/drivers/postgresql/pq_tools.cxx:std::vector< sal_Int32 > parseIntArray( const OUString & str )
connectivity/source/drivers/postgresql/pq_tools.cxx:    std::vector<sal_Int32> vec;
connectivity/source/drivers/postgresql/pq_tools.cxx:        std::vector< sal_Int32 > vec;
connectivity/source/drivers/postgresql/pq_tools.hxx:std::vector< sal_Int32 > parseIntArray( const OUString & str );
connectivity/source/drivers/postgresql/pq_tools.hxx:std::vector< com::sun::star::uno::Any > parseArray( const OUString & str )
connectivity/source/drivers/postgresql/pq_updateableresultset.cxx:    const std::vector< OUString > &primaryKey )
connectivity/source/drivers/postgresql/pq_updateableresultset.cxx:    std::vector< OUString > columnNames( columnCount );
connectivity/source/drivers/postgresql/pq_updateableresultset.cxx:    std::vector< std::vector< Any > > data( rowCount );
connectivity/source/drivers/postgresql/pq_updateableresultset.cxx:        std::vector< Any > aRow( columnCount );
connectivity/source/drivers/postgresql/pq_updateableresultset.cxx:    m_data[m_rowCount-1] = std::vector< Any > ( m_fieldCount );
connectivity/source/drivers/postgresql/pq_updateableresultset.hxx:typedef ::std::vector< UpdateableField > UpdateableFieldVector;
connectivity/source/drivers/postgresql/pq_updateableresultset.hxx:    std::vector< OUString > m_primaryKey;
connectivity/source/drivers/postgresql/pq_updateableresultset.hxx:        const std::vector< OUString > &colNames,
connectivity/source/drivers/postgresql/pq_updateableresultset.hxx:        const std::vector< std::vector< com::sun::star::uno::Any > > &data,
connectivity/source/drivers/postgresql/pq_updateableresultset.hxx:        const std::vector< OUString > &primaryKey)
connectivity/source/drivers/postgresql/pq_updateableresultset.hxx:        const std::vector< OUString > &primaryKey );
connectivity/source/drivers/postgresql/pq_xbase.hxx:    std::vector< com::sun::star::uno::Any > m_values;
connectivity/source/drivers/postgresql/pq_xcontainer.cxx:    std::vector< com::sun::star::uno::Any > m_vec;
connectivity/source/drivers/postgresql/pq_xcontainer.cxx:    explicit ContainerEnumeration( const std::vector< com::sun::star::uno::Any > &vec )
connectivity/source/drivers/postgresql/pq_xcontainer.hxx:    std::vector< com::sun::star::uno::Any > m_values; // contains the real values
connectivity/source/drivers/postgresql/pq_xindexes.cxx:            std::vector< sal_Int32 > seq = parseIntArray( row->getString( C_COLUMNS ) );
connectivity/source/inc/FDatabaseMetaDataResultSet.hxx:        typedef std::vector<ORowSetValueDecoratorRef> ORow;
connectivity/source/inc/FDatabaseMetaDataResultSet.hxx:        typedef std::vector<ORow> ORows;
connectivity/source/inc/TKeyValue.hxx:        ::std::vector<ORowSetValueDecoratorRef> m_aKeys;
connectivity/source/inc/TKeyValue.hxx:        OUString getKeyString(::std::vector<ORowSetValueDecoratorRef>::size_type i) const
connectivity/source/inc/TKeyValue.hxx:        double          getKeyDouble(::std::vector<ORowSetValueDecoratorRef>::size_type i) const
connectivity/source/inc/TSkipDeletedSet.hxx:        ::std::vector<sal_Int32>                m_aBookmarksPositions;// vector of iterators to position map, the order is the logical position
connectivity/source/inc/TSortIndex.hxx:    class OKeyValue;                // simple class which holds a sal_Int32 and a ::std::vector<ORowSetValueDecoratorRef>
connectivity/source/inc/TSortIndex.hxx:        typedef ::std::vector< ::std::pair<sal_Int32,OKeyValue*> >  TIntValuePairVector;
connectivity/source/inc/TSortIndex.hxx:        typedef ::std::vector<OKeyType>                             TKeyTypeVector;
connectivity/source/inc/TSortIndex.hxx:        ::std::vector<TAscendingOrder>  m_aAscending;
connectivity/source/inc/TSortIndex.hxx:        OSortIndex( const ::std::vector<OKeyType>& _aKeyType,
connectivity/source/inc/TSortIndex.hxx:                    const ::std::vector<TAscendingOrder>& _aAscending);
connectivity/source/inc/TSortIndex.hxx:        inline const ::std::vector<OKeyType>& getKeyType() const { return m_aKeyType; }
connectivity/source/inc/TSortIndex.hxx:        inline TAscendingOrder getAscending(::std::vector<TAscendingOrder>::size_type _nPos) const { return m_aAscending[_nPos]; }
connectivity/source/inc/ado/ADatabaseMetaDataResultSet.hxx:            ::std::vector<sal_Int32>        m_aColMapping; // pos 0 is unused so we don't have to decrement 1 every time
connectivity/source/inc/ado/ADatabaseMetaDataResultSet.hxx:            const ::std::vector<sal_Int32>& getColumnMapping() { return m_aColMapping; }
connectivity/source/inc/ado/ADatabaseMetaDataResultSetMetaData.hxx:            const ::std::vector<sal_Int32> &m_vMapping; // when not every column is needed
connectivity/source/inc/ado/AResultSet.hxx:            ::std::vector<OLEVariant>       m_aBookmarks;
connectivity/source/inc/ado/AStatement.hxx:            ::std::vector<connectivity::OTypeInfo>      m_aTypeInfo;    // Hashtable containing an entry
connectivity/source/inc/calc/CTable.hxx:            ::std::vector<sal_Int32> m_aTypes;      // holds all type for columns just to avoid to ask the propertyset
connectivity/source/inc/calc/CTable.hxx:            ::std::vector<sal_Int32> m_aPrecisions; // same as aboth
connectivity/source/inc/calc/CTable.hxx:            ::std::vector<sal_Int32> m_aScales;
connectivity/source/inc/dbase/DTable.hxx:            ::std::vector<sal_Int32> m_aTypes;      // holds all types for columns just to avoid to ask the propertyset
connectivity/source/inc/dbase/DTable.hxx:            ::std::vector<sal_Int32> m_aPrecisions; // same as above
connectivity/source/inc/dbase/DTable.hxx:            ::std::vector<sal_Int32> m_aScales;
connectivity/source/inc/dbase/DTable.hxx:            ::std::vector<sal_Int32> m_aRealFieldLengths;
connectivity/source/inc/dbase/dindexnode.hxx:        typedef ::std::vector<ONDXPage*>    ONDXPageList;
connectivity/source/inc/file/FDateFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FDateFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FDateFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FDateFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FNumericFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FNumericFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FNumericFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FPreparedStatement.hxx:            void scanParameter(OSQLParseNode* pParseNode,::std::vector< OSQLParseNode*>& _rParaNodes);
connectivity/source/inc/file/FResultSet.hxx:            ::std::vector<sal_Int32>                m_aColMapping; // pos 0 is unused so we don't have to decrement 1 every time
connectivity/source/inc/file/FResultSet.hxx:            ::std::vector<sal_Int32>                m_aOrderbyColumnNumber;
connectivity/source/inc/file/FResultSet.hxx:            ::std::vector<TAscendingOrder>          m_aOrderbyAscending;
connectivity/source/inc/file/FResultSet.hxx:            inline void setColumnMapping(const ::std::vector<sal_Int32>& _aColumnMapping)   { m_aColMapping = _aColumnMapping; }
connectivity/source/inc/file/FResultSet.hxx:            inline void setOrderByColumns(const ::std::vector<sal_Int32>& _aColumnOrderBy)  { m_aOrderbyColumnNumber = _aColumnOrderBy; }
connectivity/source/inc/file/FResultSet.hxx:            inline void setOrderByAscending(const ::std::vector<TAscendingOrder>& _aOrderbyAsc)    { m_aOrderbyAscending = _aOrderbyAsc; }
connectivity/source/inc/file/FResultSet.hxx:                                    ::std::vector<sal_Int32>& _rColMapping);
connectivity/source/inc/file/FStatement.hxx:            ::std::vector<sal_Int32>                    m_aColMapping; // pos 0 is unused so we don't have to decrement 1 every time
connectivity/source/inc/file/FStatement.hxx:            ::std::vector<sal_Int32>                    m_aParameterIndexes; // maps the parameter index to column index
connectivity/source/inc/file/FStatement.hxx:            ::std::vector<sal_Int32>                    m_aOrderbyColumnNumber;
connectivity/source/inc/file/FStatement.hxx:            ::std::vector<TAscendingOrder>              m_aOrderbyAscending;
connectivity/source/inc/file/FStatement.hxx:            void ParseAssignValues( const ::std::vector< OUString>& aColumnNameList,
connectivity/source/inc/file/FStringFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FStringFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FStringFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FStringFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FStringFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/FStringFunctions.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const override;
connectivity/source/inc/file/fanalyzer.hxx:            ::std::vector< TPredicates >        m_aSelectionEvaluations;
connectivity/source/inc/file/fanalyzer.hxx:            void setSelectionEvaluationResult(OValueRefRow& _pRow,const ::std::vector<sal_Int32>& _rColumnMapping);
connectivity/source/inc/file/fcode.hxx:            virtual ORowSetValue operate(const ::std::vector<ORowSetValue>& lhs) const = 0;
connectivity/source/inc/file/fcomp.hxx:        typedef::std::vector<OCode*> OCodeList;
connectivity/source/inc/flat/ETable.hxx:            ::std::vector<TRowPositionInFile>
connectivity/source/inc/flat/ETable.hxx:            ::std::vector<sal_Int32>        m_aTypes;       // holds all type for columns just to avoid to ask the propertyset
connectivity/source/inc/flat/ETable.hxx:            ::std::vector<sal_Int32>        m_aPrecisions;  // same as aboth
connectivity/source/inc/flat/ETable.hxx:            ::std::vector<sal_Int32>        m_aScales;
connectivity/source/inc/flat/ETable.hxx:            void setRowPos(::std::vector<TRowPositionInFile>::size_type rowNum, const TRowPositionInFile &rowPos);
connectivity/source/inc/hsqldb/HDriver.hxx:        typedef ::std::vector< TWeakPair > TWeakPairVector;
connectivity/source/inc/mysql/YDriver.hxx:        typedef ::std::vector< TWeakPair > TWeakPairVector;
connectivity/source/inc/odbc/OConnection.hxx:        typedef ::std::vector< ::connectivity::OTypeInfo>   TTypeInfoVector;
connectivity/source/inc/odbc/OResultSet.hxx:        typedef ::std::vector<TVoidPtr> TVoidVector;
connectivity/source/inc/odbc/OResultSet.hxx:            typedef ::std::vector<ORowSetValue>         TDataRow;
connectivity/source/inc/odbc/OResultSet.hxx:            ::std::vector<SQLLEN>                       m_aLengthVector;
connectivity/source/inc/odbc/OResultSetMetaData.hxx:            ::std::vector<sal_Int32> m_vMapping; // when not every column is needed
connectivity/source/inc/odbc/OResultSetMetaData.hxx:            OResultSetMetaData(OConnection* _pConnection, SQLHANDLE _pStmt ,const ::std::vector<sal_Int32> & _vMapping)
connectivity/source/manager/mdrivermanager.cxx:    typedef std::vector< Reference< XDriver > > DriverArray;
connectivity/source/manager/mdrivermanager.hxx:        typedef std::vector<DriverAccess> DriverAccessArray;
connectivity/source/parse/sqliterator.cxx:        ::std::vector< TNodePair >      m_aJoinConditions;
connectivity/source/parse/sqliterator.cxx:::std::vector< TNodePair >& OSQLParseTreeIterator::getJoinConditions() const
connectivity/source/parse/sqlnode.cxx:        ::std::vector< OSQLParseNode* >::iterator aFind = ::std::find(m_aNodes.begin(), m_aNodes.end(),_pNode);
connectivity/source/sdbcx/VCollection.cxx:        ::std::vector< ObjectIter >             m_aElements;        // hold the iterators which point to map
connectivity/source/sdbcx/VCollection.cxx:            ::std::vector< ObjectIter >(m_aElements).swap(m_aElements);
connectivity/source/sdbcx/VCollection.cxx:            ::std::vector< ObjectIter >().swap(m_aElements);
connectivity/source/sdbcx/VCollection.cxx:                typename ::std::vector< ObjectIter >::iterator aFind = ::std::find(m_aElements.begin(),m_aElements.end(),aIter);
connectivity/source/sdbcx/VCollection.cxx:            typename ::std::vector< ObjectIter >::const_iterator aEnd = m_aElements.end();
connectivity/source/sdbcx/VCollection.cxx:            for(typename ::std::vector< ObjectIter >::const_iterator aIter = m_aElements.begin(); aIter != aEnd;++aIter,++pStringArray)
connectivity/source/sdbcx/VCollection.cxx:        ::std::vector<Type> aOwnTypes;
connectivity/workben/skeleton/SResultSet.hxx:        typedef ::std::vector<TVoidPtr>         TVoidVector;
connectivity/workben/skeleton/SResultSet.hxx:            ::std::vector<sal_Int32>                    m_aLengthVector;
connectivity/workben/skeleton/SResultSet.hxx:            ::std::vector<sal_Int32>                    m_aColMapping; // pos 0 is unused so we don't have to decrement 1 every time
connectivity/workben/skeleton/SResultSet.hxx:            ::std::vector< ORowSetValue>                m_aRow; // only used when SQLGetData can't be called in any order
cppcanvas/source/inc/implrenderer.hxx:            ::std::vector< OutDevState > m_aStates;
cppcanvas/source/inc/implrenderer.hxx:            typedef ::std::vector< MtfAction >      ActionVector;
cppu/source/typelib/typelib.cxx:        std::vector< typelib_TypeDescriptionReference * > ppTDR;
cppu/source/typelib/typelib.cxx:        for( std::vector< typelib_TypeDescriptionReference * >::iterator i(
cppu/source/typelib/typelib.cxx:    std::vector<bool> aReadWriteAttributes(pITD->nAllMembers);
cppu/source/typelib/typelib.cxx:    typedef std::vector< Entry > List;
cppu/source/uno/lbenv.cxx:    std::vector< InterfaceEntry > aInterfaces;
cppu/source/uno/lbenv.cxx:    std::vector<uno_Environment*> aFounds(aName2EnvMap.size());
cppuhelper/qa/ifcontainer/cppu_ifcontainer.cxx:            std::vector< Reference< XEventListener > > aListeners;
cppuhelper/source/defaultbootstrap.cxx:    std::vector< cppu::ContextEntry_Init > context_values;
cppuhelper/source/interfacecontainer.cxx:typedef ::std::vector< std::pair < Type , void* > > t_type2ptr;
cppuhelper/source/interfacecontainer.cxx:typedef ::std::vector< std::pair < sal_Int32 , void* > > t_long2ptr;
cppuhelper/source/propertysetmixin.cxx:        std::vector< rtl::OUString > * handleNames)
cppuhelper/source/propertysetmixin.cxx:        std::vector< rtl::OUString > * handleNames, TypeSet * seen);
cppuhelper/source/propertysetmixin.cxx:    std::vector< rtl::OUString > * handleNames, TypeSet * seen)
cppuhelper/source/propertysetmixin.cxx:                std::vector< rtl::OUString >::size_type handles
cppuhelper/source/propertysetmixin.cxx:    std::vector< rtl::OUString > handleNames;
cppuhelper/source/propertysetmixin.cxx:    std::vector< rtl::OUString >::size_type size = handleNames.size();
cppuhelper/source/propshlp.cxx:    ::std::vector< sal_Int32 >  m_handles;
cppuhelper/source/propshlp.cxx:    ::std::vector< Any >        m_newValues;
cppuhelper/source/propshlp.cxx:    ::std::vector< Any >        m_oldValues;
cppuhelper/source/propshlp.cxx:    ::std::vector< sal_Int32 > allHandles( additionalEvents + i_count );
cppuhelper/source/propshlp.cxx:    ::std::vector< Any > allNewValues( additionalEvents + i_count );
cppuhelper/source/propshlp.cxx:    ::std::vector< Any > allOldValues( additionalEvents + i_count );
cppuhelper/source/servicemanager.cxx:        std::vector<
cppuhelper/source/servicemanager.cxx:    std::vector< rtl::OUString > const & elements,
cppuhelper/source/servicemanager.cxx:    for (std::vector< rtl::OUString >::const_iterator i(elements.begin());
cppuhelper/source/servicemanager.cxx:        std::vector<
cppuhelper/source/servicemanager.cxx:    explicit ContentEnumeration(std::vector< css::uno::Any > const & factories):
cppuhelper/source/servicemanager.cxx:    std::vector< css::uno::Any > factories_;
cppuhelper/source/servicemanager.cxx:    std::vector< css::uno::Any >::const_iterator iterator_;
cppuhelper/source/servicemanager.cxx:    for (std::vector< rtl::OUString >::const_iterator j(
cppuhelper/source/servicemanager.cxx:    std::vector< cppu::ContextEntry_Init > * entries)
cppuhelper/source/servicemanager.cxx:    std::vector< css::uno::Reference<css::lang::XComponent> > sngls;
cppuhelper/source/servicemanager.cxx:    std::vector< css::uno::Reference< css::lang::XComponent > > comps;
cppuhelper/source/servicemanager.cxx:    for (std::vector<
cppuhelper/source/servicemanager.cxx:    for (std::vector<
cppuhelper/source/servicemanager.cxx:        std::vector< rtl::OUString > uris;
cppuhelper/source/servicemanager.cxx:        std::vector< rtl::OUString > uris;
cppuhelper/source/servicemanager.cxx:    std::vector< std::shared_ptr< Data::Implementation > > impls;
cppuhelper/source/servicemanager.cxx:    std::vector< css::uno::Any > factories;
cppuhelper/source/servicemanager.cxx:    for (std::vector<
cppuhelper/source/servicemanager.cxx:        for (std::vector< rtl::OUString >::const_iterator j(
cppuhelper/source/servicemanager.cxx:        for (std::vector< rtl::OUString >::const_iterator j(
cppuhelper/source/servicemanager.cxx:    std::vector< char > v(s); // assuming sal_uInt32 fits into vector::size_type
cppuhelper/source/servicemanager.cxx:    std::vector< rtl::OUString > * strings)
cppuhelper/source/servicemanager.cxx:    std::vector< rtl::OUString > const & uris,
cppuhelper/source/servicemanager.cxx:    for (std::vector< rtl::OUString >::const_iterator i(uris.begin());
cppuhelper/source/servicemanager.cxx:    std::vector< rtl::OUString > const & uris)
cppuhelper/source/servicemanager.cxx:    std::vector< std::shared_ptr< Data::Implementation > > clear;
cppuhelper/source/servicemanager.cxx:        for (std::vector< rtl::OUString >::const_iterator i(uris.begin());
cppuhelper/source/servicemanager.hxx:            std::vector< rtl::OUString > services;
cppuhelper/source/servicemanager.hxx:            std::vector< rtl::OUString > singletons;
cppuhelper/source/servicemanager.hxx:                std::vector< std::shared_ptr< Implementation > > >
cppuhelper/source/servicemanager.hxx:        std::vector< cppu::ContextEntry_Init > * entries);
cppuhelper/source/servicemanager.hxx:        rtl::OUString const & path, std::vector< rtl::OUString > * strings);
cppuhelper/source/servicemanager.hxx:        std::vector< rtl::OUString > const & uris,
cppuhelper/source/servicemanager.hxx:    void removeRdbFiles(std::vector< rtl::OUString > const & uris);
cppuhelper/source/tdmgr.cxx:        std::vector< rtl_uString * > getExc;
cppuhelper/source/tdmgr.cxx:        std::vector< rtl_uString * > setExc;
cppuhelper/source/typemanager.cxx:        std::vector< rtl::OUString > names(entity_->getMemberNames());
cppuhelper/source/typemanager.cxx:        std::vector< rtl::OUString > const & arguments):
cppuhelper/source/typemanager.cxx:    std::vector< rtl::OUString > arguments_;
cppuhelper/source/typemanager.cxx:            for (std::vector< rtl::OUString >::const_iterator j(
cppuhelper/source/typemanager.cxx:        std::vector< unoidl::ConstantGroupEntity::Member >::const_iterator
cppuhelper/source/typemanager.cxx:    std::vector< rtl::OUString > args;
cppuhelper/source/typemanager.cxx:    for (std::vector< unoidl::EnumTypeEntity::Member >::const_iterator i(
cppuhelper/source/typemanager.cxx:    for (std::vector< unoidl::ConstantGroupEntity::Member >::const_iterator i(
cui/source/customize/cfgutil.cxx:::std::vector< SfxStyleInfo_Impl > SfxStylesInfo_Impl::getStyleFamilies()
cui/source/customize/cfgutil.cxx:        return ::std::vector< SfxStyleInfo_Impl >();
cui/source/customize/cfgutil.cxx:    ::std::vector< SfxStyleInfo_Impl > lFamilies;
cui/source/customize/cfgutil.cxx:            { return ::std::vector< SfxStyleInfo_Impl >(); }
cui/source/customize/cfgutil.cxx:::std::vector< SfxStyleInfo_Impl > SfxStylesInfo_Impl::getStyles(const OUString& sFamily)
cui/source/customize/cfgutil.cxx:        { return ::std::vector< SfxStyleInfo_Impl >(); }
cui/source/customize/cfgutil.cxx:    ::std::vector< SfxStyleInfo_Impl > lStyles;
cui/source/customize/cfgutil.cxx:                const ::std::vector< SfxStyleInfo_Impl > lStyles = pStylesInfo->getStyles(pFamily->sFamily);
cui/source/customize/cfgutil.cxx:                ::std::vector< SfxStyleInfo_Impl >::const_iterator pIt;
cui/source/customize/cfgutil.cxx:                const ::std::vector< SfxStyleInfo_Impl >                 lStyleFamilies = pStylesInfo->getStyleFamilies();
cui/source/customize/cfgutil.cxx:                      ::std::vector< SfxStyleInfo_Impl >::const_iterator pIt;
cui/source/dialogs/SpellDialog.cxx:typedef std::vector<LanguagePosition_Impl> LanguagePositions_Impl;
cui/source/dialogs/colorpicker.cxx:    std::vector<sal_uInt8>  maRGB_Horiz;
cui/source/dialogs/colorpicker.cxx:    std::vector<sal_uInt16> maGrad_Horiz;
cui/source/dialogs/colorpicker.cxx:    std::vector<sal_uInt16> maPercent_Horiz;
cui/source/dialogs/colorpicker.cxx:    std::vector<sal_uInt8>  maRGB_Vert;
cui/source/dialogs/colorpicker.cxx:    std::vector<sal_uInt16> maPercent_Vert;
cui/source/dialogs/cuifmsearch.cxx:FmSearchDialog::FmSearchDialog(vcl::Window* pParent, const OUString& sInitialText, const ::std::vector< OUString >& _rContexts, sal_Int16 nInitialContext,
cui/source/dialogs/cuifmsearch.cxx:    for (   ::std::vector< OUString >::const_iterator context = _rContexts.begin();
cui/source/dialogs/cuigaldlg.cxx:        ::std::vector< OUString > aFormats;
cui/source/dialogs/cuigaldlg.cxx:                               const ::std::vector< OUString >& rFormats,
cui/source/dialogs/cuigaldlg.cxx:    ::std::vector<bool, std::allocator<bool> >           aRemoveEntries( mpBrowser->aFoundList.size(), false );
cui/source/dialogs/cuigaldlg.cxx:    ::std::vector< OUString >   aRemainingVector;
cui/source/dialogs/hangulhanjadlg.cxx:        std::vector<OUString*> m_vElements;
cui/source/dialogs/hangulhanjadlg.cxx:            for( std::vector<OUString*>::iterator it = m_vElements.begin(); it != m_vElements.end(); ++it )
cui/source/dialogs/iconcdlg.cxx:using ::std::vector;
cui/source/dialogs/iconcdlg.cxx:    std::vector<sal_uInt16> aUS;
cui/source/dialogs/linkdlg.cxx:    std::vector<SvBaseLink*> mLinks;
cui/source/dialogs/linkdlg.cxx:        for( std::vector<SvBaseLink*>::const_iterator it = mLinks.begin(); it != mLinks.end(); ++it )
cui/source/dialogs/linkdlg.cxx:    std::vector< SvBaseLink* > aLnkArr;
cui/source/dialogs/linkdlg.cxx:    std::vector< sal_Int16 > aPosArr;
cui/source/dialogs/thesdlg.cxx:    std::vector< OUString > aLangVec;
cui/source/dialogs/thesdlg.cxx:    std::vector< OUString >::iterator aI = std::find(aLangVec.begin(), aLangVec.end(),
cui/source/factory/dlgfact.cxx:                                                        const ::std::vector< OUString >& _rContexts,
cui/source/factory/dlgfact.hxx:                                                        const ::std::vector< OUString >& _rContexts,
cui/source/inc/autocdlg.hxx:typedef std::vector<DoubleString> DoubleStringArray;
cui/source/inc/autocdlg.hxx:    std::vector<OUString> aAbbrevStrings;
cui/source/inc/autocdlg.hxx:    std::vector<OUString> aDoubleCapsStrings;
cui/source/inc/cfg.hxx:typedef std::vector< SvxConfigEntry* > SvxEntries;
cui/source/inc/cfgutil.hxx:        ::std::vector< SfxStyleInfo_Impl > getStyleFamilies();
cui/source/inc/cfgutil.hxx:        ::std::vector< SfxStyleInfo_Impl > getStyles(const OUString& sFamily);
cui/source/inc/cfgutil.hxx:typedef std::vector<std::unique_ptr<SfxGroupInfo_Impl> > SfxGroupInfoArr_Impl;
cui/source/inc/cuifmsearch.hxx:    ::std::vector<OUString> m_arrContextFields;
cui/source/inc/cuifmsearch.hxx:    FmSearchDialog(vcl::Window* pParent, const OUString& strInitialText, const ::std::vector< OUString >& _rContexts, sal_Int16 nInitialContext,
cui/source/inc/cuigaldlg.hxx:typedef ::std::vector< OUString > StringList;
cui/source/inc/cuigaldlg.hxx:typedef ::std::vector< sal_uLong > TokenList_impl;
cui/source/inc/cuigaldlg.hxx:                                            const ::std::vector< OUString >& rFormats,
cui/source/inc/cuigaldlg.hxx:    ::std::vector< FilterEntry* >
cui/source/inc/cuioptgenrl.hxx:    std::vector<std::shared_ptr<Row> > vRows;
cui/source/inc/cuioptgenrl.hxx:    std::vector<std::shared_ptr<Field> > vFields;
cui/source/inc/cuitabline.hxx:    std::vector<OUString>      m_aGrfNames;
cui/source/inc/cuitabline.hxx:    ::std::vector< SvxBmpItemInfo* >
cui/source/inc/hangulhanjadlg.hxx:    typedef ::std::vector< css::uno::Reference< css::linguistic2::XConversionDictionary > > HHDictList;
cui/source/inc/iconcdlg.hxx:    ::std::vector< IconChoicePageData* > maPageList;
cui/source/inc/labdlg.hxx:    std::vector<OUString> m_aStrHorzList;
cui/source/inc/labdlg.hxx:    std::vector<OUString> m_aStrVertList;
cui/source/inc/labdlg.hxx:    std::vector<OUString> m_aLineTypes;
cui/source/inc/macropg.hxx:typedef ::std::vector< EventDisplayName >   EventDisplayNames;
cui/source/inc/numfmt.hxx:    void    FillFormatListBox_Impl( std::vector<OUString>& rEntries );
cui/source/inc/numpages.hxx:typedef std::vector<std::unique_ptr<SvxNumSettings_Impl> > SvxNumSettingsArr_Impl;
cui/source/inc/numpages.hxx:    std::vector<OUString> aGrfNames;
cui/source/inc/numpages.hxx:    std::vector<OUString> aGrfNames;
cui/source/inc/page.hxx:    void                SetCollectionList(const std::vector<OUString> &aList);
cui/source/inc/selector.hxx:typedef std::vector<std::unique_ptr<SvxGroupInfo_Impl> > SvxGroupInfoArr_Impl;
cui/source/inc/treeopt.hxx:    std::vector< OrderedEntry* >  m_aNodeList;
cui/source/inc/treeopt.hxx:typedef ::std::vector< OptionsLeaf* > VectorOfLeaves;
cui/source/inc/treeopt.hxx:    ::std::vector< VectorOfLeaves >
cui/source/inc/treeopt.hxx:typedef ::std::vector< OptionsNode* > VectorOfNodes;
cui/source/options/cfgchart.hxx:    ::std::vector< XColorEntry >     m_aColorEntries;
cui/source/options/connpoolsettings.hxx:        typedef std::vector<DriverPooling> DriverSettings;
cui/source/options/optaboutconfig.cxx:    std::vector< std::shared_ptr< Prop_Impl > >::iterator pIter;
cui/source/options/optaboutconfig.cxx:std::vector< OUString > CuiAboutConfigTabPage::commaStringToSequence( const OUString& rCommaSepString )
cui/source/options/optaboutconfig.cxx:    std::vector<OUString> tempVector;
cui/source/options/optaboutconfig.cxx:                        std::vector< OUString > seqStr;
cui/source/options/optaboutconfig.cxx:                        std::vector< OUString > seqStrLong;
cui/source/options/optaboutconfig.cxx:                        std::vector< OUString > seqStrHyper;
cui/source/options/optaboutconfig.cxx:                        std::vector< OUString > seqStrDoub;
cui/source/options/optaboutconfig.cxx:                        std::vector< OUString > seqStrFloat;
cui/source/options/optaboutconfig.hxx:    std::vector< std::shared_ptr< Prop_Impl > > m_vectorOfModified;
cui/source/options/optaboutconfig.hxx:    static std::vector< OUString > commaStringToSequence( const OUString& rCommaSepString );
cui/source/options/optcolor.cxx:    std::vector<std::shared_ptr<Chapter> > vChapters;
cui/source/options/optcolor.cxx:    std::vector<std::shared_ptr<Entry> > vEntries;
cui/source/options/optgdlg.cxx:    typedef std::vector< std::pair<OUString,Sequence<OUString> > > ServiceVector;
cui/source/options/optgdlg.cxx:    for (std::vector<vcl::IconThemeInfo>::const_iterator aI = mInstalledIconThemes.begin(); aI != mInstalledIconThemes.end(); ++aI) {
cui/source/options/optgdlg.hxx:    std::vector<vcl::IconThemeInfo> mInstalledIconThemes;
cui/source/options/optjava.cxx:    std::vector< JavaInfo* >::iterator pIter;
cui/source/options/optjava.cxx:    std::vector< JavaInfo* >::iterator pIter;
cui/source/options/optjava.cxx:            std::vector< JavaInfo* >::iterator pIter;
cui/source/options/optjava.hxx:    ::std::vector< JavaInfo* >
cui/source/options/optlingu.cxx:typedef std::vector< ServiceInfo_Impl >                             ServiceInfoArr;
cui/source/options/optsave.cxx:                    std::vector< OUString > lList;
cui/source/options/optsave.cxx:                    std::vector< sal_Bool > lAlienList;
cui/source/options/optsave.cxx:                    std::vector< sal_Bool > lODFList;
cui/source/options/personalization.cxx:        std::vector<OUString> vLearnmoreURLs = pHandler->getLearnmoreURLs();
cui/source/options/personalization.cxx:        std::vector<OUString>::iterator it;
cui/source/options/personalization.hxx:    std::vector<OUString> m_vDefaultPersonaSettings;
cui/source/options/personalization.hxx:    std::vector<OUString> m_vExtensionPersonaSettings;
cui/source/options/personalization.hxx:    std::vector<OUString> m_vPersonaSettings;
cui/source/options/personasdochandler.hxx:    std::vector<OUString> m_vLearnmoreURLs;
cui/source/options/personasdochandler.hxx:    std::vector<OUString> getLearnmoreURLs() { return m_vLearnmoreURLs; }
cui/source/options/sdbcdriverenum.cxx:        ::std::vector< OUString >    m_aImplNames;
cui/source/options/sdbcdriverenum.cxx:        const ::std::vector< OUString >& getDriverImplNames() const { return m_aImplNames; }
cui/source/options/sdbcdriverenum.hxx:        typedef ::std::vector< OUString >::const_iterator const_iterator;
cui/source/tabpages/autocdlg.cxx:        std::vector<SvxAutocorrWord> aDeleteWords;
cui/source/tabpages/autocdlg.cxx:        std::vector<SvxAutocorrWord> aNewWords;
cui/source/tabpages/autocdlg.cxx:static bool lcl_FindInArray(std::vector<OUString>& rStrings, const OUString& rString)
cui/source/tabpages/autocdlg.cxx:    for(std::vector<OUString>::iterator i = rStrings.begin(); i != rStrings.end(); ++i)
cui/source/tabpages/autocdlg.cxx:                for(std::vector<OUString>::iterator it = rArrays.aDoubleCapsStrings.begin(); it != rArrays.aDoubleCapsStrings.end(); ++it)
cui/source/tabpages/autocdlg.cxx:                for(std::vector<OUString>::iterator it = rArrays.aAbbrevStrings.begin(); it != rArrays.aAbbrevStrings.end(); ++it)
cui/source/tabpages/autocdlg.cxx:        for(std::vector<OUString>::iterator i = rArrays.aAbbrevStrings.begin(); i != rArrays.aAbbrevStrings.end(); ++i)
cui/source/tabpages/autocdlg.cxx:        for(std::vector<OUString>::iterator i = rArrays.aDoubleCapsStrings.begin(); i != rArrays.aDoubleCapsStrings.end(); ++i)
cui/source/tabpages/autocdlg.cxx:    std::vector< OUString > aDisabledSmartTagTypes;
cui/source/tabpages/border.cxx:        std::vector<sal_Int32> aUsedStyles = p->GetList();
cui/source/tabpages/numfmt.cxx:    std::vector<OUString>       aFmtEntryList;
cui/source/tabpages/numfmt.cxx:void SvxNumberFormatTabPage::FillFormatListBox_Impl( std::vector<OUString>& rEntries )
cui/source/tabpages/numfmt.cxx:    std::vector<OUString> aEntryList;
cui/source/tabpages/numfmt.cxx:        std::vector<OUString> aEntryList;
cui/source/tabpages/numfmt.cxx:        std::vector<OUString> a2EntryList;
cui/source/tabpages/numfmt.cxx:        std::vector<OUString> aEntryList;
cui/source/tabpages/numfmt.cxx:    std::vector<OUString> aList;
cui/source/tabpages/numfmt.cxx:    for(std::vector<OUString>::iterator i = aList.begin() + 1;i != aList.end(); ++i)
cui/source/tabpages/numpages.cxx:    for(std::vector<OUString>::iterator it = aGrfNames.begin(); it != aGrfNames.end(); ++it, ++i)
cui/source/tabpages/numpages.cxx:                for(std::vector<OUString>::iterator it = aGrfNames.begin(); it != aGrfNames.end(); ++it, ++i)
cui/source/tabpages/numpages.cxx:    ::std::vector< sal_uInt16> aRemove( rFmtLB.GetEntryCount(), nDontRemove);
cui/source/tabpages/numpages.cxx:            std::vector<OUString>::const_iterator it = aGrfNames.begin();
cui/source/tabpages/numpages.cxx:        const std::vector<OUString> &aList = pListItem->GetList();
cui/source/tabpages/page.cxx:void SvxPageDescPage::SetCollectionList(const std::vector<OUString> &aList)
cui/source/tabpages/swpossizetabpage.cxx:    std::vector<SvxSwFramePosString::StringId> aFrames;
cui/source/tabpages/swpossizetabpage.cxx:    for (std::vector<SvxSwFramePosString::StringId>::const_iterator aI = aFrames.begin(), aEnd = aFrames.end();
cui/source/tabpages/swpossizetabpage.cxx:    std::vector<SvxSwFramePosString::StringId> aRels;
cui/source/tabpages/swpossizetabpage.cxx:    for (std::vector<SvxSwFramePosString::StringId>::const_iterator aI = aRels.begin(), aEnd = aRels.end();
cui/source/tabpages/tpline.cxx:        for(std::vector<OUString>::iterator it = m_aGrfNames.begin(); it != m_aGrfNames.end(); ++it, ++i)
dbaccess/source/core/api/CIndexes.hxx:                 const ::std::vector< OUString> &_rVector,
dbaccess/source/core/api/CRowSetDataColumn.cxx:                const ::std::vector< OUString> &_rVector
dbaccess/source/core/api/CRowSetDataColumn.cxx:void ORowSetDataColumns::assign(const ::rtl::Reference< ::connectivity::OSQLColumns>& _rColumns,const ::std::vector< OUString> &_rVector)
dbaccess/source/core/api/CRowSetDataColumn.hxx:                        const ::std::vector< OUString> &_rVector
dbaccess/source/core/api/CRowSetDataColumn.hxx:        void assign(const ::rtl::Reference< ::connectivity::OSQLColumns>& _rColumns,const ::std::vector< OUString> &_rVector);
dbaccess/source/core/api/CacheSet.cxx:    ::std::vector< Reference<XNameAccess> > aAllIndexColumns;
dbaccess/source/core/api/CacheSet.cxx:        ::std::vector< Reference<XNameAccess> >::const_iterator aIndexEnd = aAllIndexColumns.end();
dbaccess/source/core/api/CacheSet.cxx:        for( ::std::vector< Reference<XNameAccess> >::const_iterator aIndexIter = aAllIndexColumns.begin();
dbaccess/source/core/api/CacheSet.cxx:    ::std::vector< Reference<XNameAccess> > aAllIndexColumns;
dbaccess/source/core/api/CacheSet.cxx:void OCacheSet::mergeColumnValues(sal_Int32 i_nColumnIndex,ORowSetValueVector::Vector& /*io_aInsertRow*/,ORowSetValueVector::Vector& /*io_aRow*/,::std::vector<sal_Int32>& o_aChangedColumns)
dbaccess/source/core/api/CacheSet.cxx:bool OCacheSet::updateColumnValues(const ORowSetValueVector::Vector& /*io_aCachedRow*/,ORowSetValueVector::Vector& /*io_aRow*/,const ::std::vector<sal_Int32>& /*i_aChangedColumns*/)
dbaccess/source/core/api/CacheSet.hxx:        std::vector<bool>                       m_aNullable;
dbaccess/source/core/api/CacheSet.hxx:        std::vector<bool>                       m_aSignedFlags;
dbaccess/source/core/api/CacheSet.hxx:        std::vector<sal_Int32>                  m_aColumnTypes;
dbaccess/source/core/api/CacheSet.hxx:        virtual void mergeColumnValues(sal_Int32 i_nColumnIndex,ORowSetValueVector::Vector& io_aInsertRow,ORowSetValueVector::Vector& io_aRow,::std::vector<sal_Int32>& o_aChangedColumns);
dbaccess/source/core/api/CacheSet.hxx:        virtual bool updateColumnValues(const ORowSetValueVector::Vector& io_aCachedRow,ORowSetValueVector::Vector& io_aRow,const ::std::vector<sal_Int32>& i_aChangedColumns);
dbaccess/source/core/api/FilteredContainer.cxx:sal_Int32 createWildCardVector(Sequence< OUString >& _rTableFilter, ::std::vector< WildCard >& _rOut)
dbaccess/source/core/api/FilteredContainer.cxx:                                const ::std::vector< WildCard >& _rWCSearch )
dbaccess/source/core/api/FilteredContainer.cxx:            for (   ::std::vector< WildCard >::const_iterator aLoop = _rWCSearch.begin();
dbaccess/source/core/api/FilteredContainer.cxx:    typedef ::std::vector< TableInfo >    TableInfos;
dbaccess/source/core/api/FilteredContainer.cxx:            ::std::vector< WildCard > aWildCardTableFilter;
dbaccess/source/core/api/FilteredContainer.cxx:        :OCollection(_rParent,_bCase,_rMutex,::std::vector< OUString>())
dbaccess/source/core/api/FilteredContainer.cxx:        ::std::vector< WildCard > aWCSearch;
dbaccess/source/core/api/HelperCollections.cxx:                        const ::std::vector< OUString> &_rVector,
dbaccess/source/core/api/HelperCollections.cxx:        ::std::vector< OUString > aNames; aNames.reserve( _rColumns->get().size() );
dbaccess/source/core/api/HelperCollections.hxx:                        const ::std::vector< OUString> &_rVector,
dbaccess/source/core/api/HelperCollections.hxx:                        const ::std::vector< OUString> &_rVector
dbaccess/source/core/api/KeySet.cxx:using std::vector;
dbaccess/source/core/api/KeySet.cxx:    void lcl_fillIndexColumns(const Reference<XIndexAccess>& _xIndexes, ::std::vector< Reference<XNameAccess> >& _rAllIndexColumns)
dbaccess/source/core/api/KeySet.cxx:    ::std::vector< Reference<XNameAccess> > aAllIndexColumns;
dbaccess/source/core/api/KeySet.cxx:    ::std::vector<sal_Int32> aIndexColumnPositions;
dbaccess/source/core/api/KeySet.cxx:            ::std::vector< Reference<XNameAccess> >::const_iterator aIndexEnd = aAllIndexColumns.end();
dbaccess/source/core/api/KeySet.cxx:            for( ::std::vector< Reference<XNameAccess> >::const_iterator aIndexIter = aAllIndexColumns.begin();
dbaccess/source/core/api/KeySet.cxx:void OKeySet::executeUpdate(const ORowSetRow& _rInsertRow ,const ORowSetRow& _rOriginalRow,const OUString& i_sSQL,const OUString& i_sTableName,const ::std::vector<sal_Int32>& _aIndexColumnPositions)
dbaccess/source/core/api/KeySet.cxx:        ::std::vector<sal_Int32>::const_iterator aIdxColIter = _aIndexColumnPositions.begin();
dbaccess/source/core/api/KeySet.cxx:        ::std::vector<sal_Int32>::const_iterator aIdxColEnd = _aIndexColumnPositions.end();
dbaccess/source/core/api/KeySet.cxx:                    ::std::vector< OUString >::iterator aAutoIter = m_aAutoColumns.begin();
dbaccess/source/core/api/KeySet.cxx:                    ::std::vector< OUString >::iterator aAutoEnd = m_aAutoColumns.end();
dbaccess/source/core/api/KeySet.cxx:        ::std::vector< OUString >::iterator aAutoIter = m_aAutoColumns.begin();
dbaccess/source/core/api/KeySet.cxx:        ::std::vector< OUString >::iterator aAutoEnd = m_aAutoColumns.end();
dbaccess/source/core/api/KeySet.cxx:    ::std::vector< Reference<XNameAccess> > aAllIndexColumns;
dbaccess/source/core/api/KeySet.cxx:    ::std::vector<sal_Int32> aIndexColumnPositions;
dbaccess/source/core/api/KeySet.cxx:            ::std::vector< Reference<XNameAccess> >::const_iterator aIndexEnd = aAllIndexColumns.end();
dbaccess/source/core/api/KeySet.cxx:            for( ::std::vector< Reference<XNameAccess> >::const_iterator aIndexIter = aAllIndexColumns.begin();
dbaccess/source/core/api/KeySet.cxx:    ::std::vector<sal_Int32>::iterator aIdxColIter = aIndexColumnPositions.begin();
dbaccess/source/core/api/KeySet.cxx:    ::std::vector<sal_Int32>::iterator aIdxColEnd = aIndexColumnPositions.end();
dbaccess/source/core/api/KeySet.hxx:        ::std::vector< OUString >                               m_aAutoColumns;  // contains all columns which are autoincrement ones
dbaccess/source/core/api/KeySet.hxx:        typedef ::std::vector< bool > FilterColumnsNULL_t;
dbaccess/source/core/api/KeySet.hxx:        ::std::vector< OUString >                               m_aFilterColumns;
dbaccess/source/core/api/KeySet.hxx:        void executeUpdate(const ORowSetRow& _rInsertRow ,const ORowSetRow& _rOriginalRow,const OUString& i_sSQL,const OUString& i_sTableName,const ::std::vector<sal_Int32>& _aIndexColumnPositions = ::std::vector<sal_Int32>());
dbaccess/source/core/api/OptimisticSet.cxx:void OptimisticSet::fillJoinedColumns_throw(const ::std::vector< TNodePair >& i_aJoinColumns)
dbaccess/source/core/api/OptimisticSet.cxx:    ::std::vector< TNodePair >::const_iterator aIter = i_aJoinColumns.begin();
dbaccess/source/core/api/OptimisticSet.cxx:void OptimisticSet::mergeColumnValues(sal_Int32 i_nColumnIndex,ORowSetValueVector::Vector& io_aInsertRow,ORowSetValueVector::Vector& io_aRow,::std::vector<sal_Int32>& o_aChangedColumns)
dbaccess/source/core/api/OptimisticSet.cxx:bool OptimisticSet::updateColumnValues(const ORowSetValueVector::Vector& io_aCachedRow,ORowSetValueVector::Vector& io_aRow,const ::std::vector<sal_Int32>& i_aChangedColumns)
dbaccess/source/core/api/OptimisticSet.hxx:        void fillJoinedColumns_throw(const ::std::vector< ::connectivity::TNodePair>& i_aJoinColumns);
dbaccess/source/core/api/OptimisticSet.hxx:        virtual void mergeColumnValues(sal_Int32 i_nColumnIndex,ORowSetValueVector::Vector& io_aInsertRow,ORowSetValueVector::Vector& io_aRow,::std::vector<sal_Int32>& o_aChangedColumns) override;
dbaccess/source/core/api/OptimisticSet.hxx:        virtual bool updateColumnValues(const ORowSetValueVector::Vector& io_aCachedRow,ORowSetValueVector::Vector& io_aRow,const ::std::vector<sal_Int32>& i_aChangedColumns) override;
dbaccess/source/core/api/RowSet.cxx:    std::vector< Reference< XInterface > > aListenerSeq = _rListeners.getElements(); \
dbaccess/source/core/api/RowSet.cxx:        ::std::vector<bool>().swap(m_aReadOnlyDataColumns);
dbaccess/source/core/api/RowSet.cxx:    ::std::vector< Any > aBookmarks;
dbaccess/source/core/api/RowSet.cxx:        ::std::vector< Any > aBookmarks;
dbaccess/source/core/api/RowSet.cxx:    ::std::vector<bool, std::allocator<bool> >::iterator aReadIter = m_aReadOnlyDataColumns.begin();
dbaccess/source/core/api/RowSet.cxx:    ::std::vector<bool, std::allocator<bool> >::iterator aReadIter = m_aReadOnlyDataColumns.begin();
dbaccess/source/core/api/RowSet.cxx:        ::std::vector< OUString> aNames;
dbaccess/source/core/api/RowSet.cxx:    ::std::vector< OUString> aNames;
dbaccess/source/core/api/RowSet.hxx:        ::std::vector<bool>                         m_aParametersSet;
dbaccess/source/core/api/RowSet.hxx:        ::std::vector<bool>                         m_aReadOnlyDataColumns;
dbaccess/source/core/api/RowSetBase.cxx:    OEmptyCollection(::cppu::OWeakObject& _rParent,::osl::Mutex& _rMutex) : OCollection(_rParent, true, _rMutex, ::std::vector< OUString>()){}
dbaccess/source/core/api/RowSetBase.cxx:    ::std::vector<sal_Int32>    aChangedColumns;
dbaccess/source/core/api/RowSetBase.cxx:::std::vector<sal_Int32>& ORowSetNotifier::getChangedColumns() const
dbaccess/source/core/api/RowSetBase.cxx:        ::std::vector<sal_Int32>::iterator aIter = m_pImpl->aChangedColumns.begin();
dbaccess/source/core/api/RowSetBase.hxx:        typedef ::std::vector<ORowSetDataColumn*>   TDataColumns;
dbaccess/source/core/api/RowSetBase.hxx:        ::std::vector<sal_Int32>& getChangedColumns() const;
dbaccess/source/core/api/RowSetCache.cxx:        ::std::vector<sal_Int32> aPositions;
dbaccess/source/core/api/RowSetCache.cxx:        ::std::vector<sal_Int32>::const_iterator aIter = aPositions.begin();
dbaccess/source/core/api/RowSetCache.cxx:                              ,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.cxx:                               ,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.cxx:                                         ,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.cxx:                                ,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.cxx:                                       ,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.cxx:bool ORowSetCache::insertRow(::std::vector< Any >& o_aBookmarks)
dbaccess/source/core/api/RowSetCache.cxx:void ORowSetCache::updateRow( ORowSetMatrix::iterator& _rUpdateRow,::std::vector< Any >& o_aBookmarks )
dbaccess/source/core/api/RowSetCache.cxx:                                           ,::std::vector<sal_Int32>& o_ChangedColumns)
dbaccess/source/core/api/RowSetCache.hxx:        typedef ::std::vector< TORowSetOldRowHelperRef >    TOldRowSetRows;
dbaccess/source/core/api/RowSetCache.hxx:                        ,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.hxx:                                   ,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.hxx:        void updateCharacterStream( sal_Int32 columnIndex, const css::uno::Reference< css::io::XInputStream >& x, sal_Int32 length,ORowSetValueVector::Vector& io_aRow,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.hxx:        void updateObject( sal_Int32 columnIndex, const css::uno::Any& x,ORowSetValueVector::Vector& io_aRow ,::std::vector<sal_Int32>& o_ChangedColumns);
dbaccess/source/core/api/RowSetCache.hxx:        void updateNumericObject( sal_Int32 columnIndex, const css::uno::Any& x, sal_Int32 scale,ORowSetValueVector::Vector& io_aRow ,::std::vector<sal_Int32>& o_ChangedColumns);
dbaccess/source/core/api/RowSetCache.hxx:                        ,::std::vector<sal_Int32>& o_ChangedColumns
dbaccess/source/core/api/RowSetCache.hxx:        bool insertRow(::std::vector< css::uno::Any >& o_aBookmarks);
dbaccess/source/core/api/RowSetCache.hxx:        void updateRow( ORowSetMatrix::iterator& _rUpdateRow,::std::vector< css::uno::Any >& o_aBookmarks );
dbaccess/source/core/api/RowSetRow.hxx:    typedef ::std::vector< ORowSetRow >                             ORowSetMatrix;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector<OPrivateColumns*>::iterator aColIter = m_aColumnsCollection.begin();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector<OPrivateColumns*>::iterator aEnd = m_aColumnsCollection.end();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector<OPrivateTables*>::iterator aTabIter = m_aTablesCollection.begin();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector<OPrivateTables*>::iterator aTabEnd = m_aTablesCollection.end();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:OUString OSingleSelectQueryComposer::composeStatementFromParts( const ::std::vector< OUString >& _rParts )
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector< OUString > aAdditiveClauses( SQLPartCount );
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector< OUString > aClauses;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:        ::std::vector< OUString> aNames;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector< OUString> aNames;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                ::std::vector< OUString>::iterator aFindName;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                                    ::std::vector< ::std::vector < PropertyValue > >& rFilters, const Reference< css::util::XNumberFormatter > & xFormatter) const
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                rFilters.push_back( ::std::vector < PropertyValue >());
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:        rFilters.push_back(::std::vector < PropertyValue >());
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    OSQLParseTreeIterator& _rIterator, ::std::vector < PropertyValue >& rFilter, const Reference< XNumberFormatter > & xFormatter) const
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                                            ::std::vector < PropertyValue >& rFilter, const Reference< css::util::XNumberFormatter > & xFormatter) const
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:        ::std::vector< OUString> aNames;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector<OPrivateColumns*>::iterator aIter = m_aCurrentColumns.begin();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:    ::std::vector<OPrivateColumns*>::iterator aEnd = m_aCurrentColumns.end();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:        ::std::vector< OUString> aNames;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                ::std::vector< ::std::vector < PropertyValue > > aFilters;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                    ::std::vector< ::std::vector < PropertyValue > >::const_iterator aEnd = aFilters.end();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                    ::std::vector< ::std::vector < PropertyValue > >::const_iterator i = aFilters.begin();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                        const ::std::vector < PropertyValue >& rProperties = *i;
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                        ::std::vector < PropertyValue >::const_iterator j = rProperties.begin();
dbaccess/source/core/api/SingleSelectQueryComposer.cxx:                        ::std::vector < PropertyValue >::const_iterator aEnd2 = rProperties.end();
dbaccess/source/core/api/TableDeco.cxx:    ::std::vector< OUString> aVector;
dbaccess/source/core/api/View.cxx:        ::std::vector<Type> aOwnTypes;
dbaccess/source/core/api/column.cxx:                   bool _bCaseSensitive,const ::std::vector< OUString> &_rVector,
dbaccess/source/core/api/column.cxx:        bool _bCaseSensitive,const ::std::vector< OUString> &_rVector,
dbaccess/source/core/api/preparedstatement.cxx:    m_pColumns = new OColumns(*this, m_aMutex, xMeta.is() && xMeta->supportsMixedCaseQuotedIdentifiers(),::std::vector< OUString>(), nullptr,nullptr);
dbaccess/source/core/api/querydescriptor.cxx:    m_pColumns = new OColumns(_rMySelf, m_rMutex, true,::std::vector< OUString>(), this,this);
dbaccess/source/core/api/querydescriptor.cxx:    m_pColumns = new OColumns(_rMySelf, m_rMutex, true,::std::vector< OUString>(), this,this);
dbaccess/source/core/api/resultset.cxx:    m_pColumns = new OColumns(*this, m_aMutex, _bCaseSensitive, ::std::vector< OUString>(), nullptr,nullptr);
dbaccess/source/core/api/table.cxx:    ::std::vector<Type> aOwnTypes;
dbaccess/source/core/dataaccess/ComponentDefinition.cxx:        ::std::vector< OUString> aNames;
dbaccess/source/core/dataaccess/ModelImpl.cxx:    ::std::vector< OUString > aNames;
dbaccess/source/core/dataaccess/ModelImpl.cxx:    ::std::vector< TContentPtr > aEmptyContainers( 4 );
dbaccess/source/core/dataaccess/ModelImpl.cxx:    ::std::vector<TContentPtr>::iterator aIter = m_aContainer.begin();
dbaccess/source/core/dataaccess/ModelImpl.cxx:    ::std::vector<TContentPtr>::iterator aEnd = m_aContainer.end();
dbaccess/source/core/dataaccess/ModelImpl.hxx:typedef std::vector< css::uno::WeakReference< css::sdbc::XConnection > > OWeakConnectionArray;
dbaccess/source/core/dataaccess/ModelImpl.hxx:    ::std::vector< TContentPtr >                                      m_aContainer;   // one for each ObjectType
dbaccess/source/core/dataaccess/bookmarkcontainer.hxx:    typedef std::vector<MapString2String::iterator> MapIteratorVector;
dbaccess/source/core/dataaccess/databasedocument.cxx:    std::vector< OUString > vEmbedImgUrls;
dbaccess/source/core/dataaccess/databasedocument.cxx:        std::vector< OUString >::iterator it = vEmbedImgUrls.begin();
dbaccess/source/core/dataaccess/databasedocument.cxx:        std::vector< OUString >::iterator it_end = vEmbedImgUrls.end();
dbaccess/source/core/dataaccess/databasedocument.hxx:typedef ::std::vector< css::uno::Reference< css::frame::XController > >   Controllers;
dbaccess/source/core/dataaccess/datasource.cxx:            ::std::vector< PropertyValue > aRet;
dbaccess/source/core/dataaccess/myucp_datasupplier.cxx:typedef std::vector< ResultListEntry* > ResultList;
dbaccess/source/core/inc/PropertyForward.hxx:                          const ::std::vector< OUString >& _aPropertyList
dbaccess/source/core/inc/SingleSelectQueryComposer.hxx:        ::std::vector<OPrivateColumns*>         m_aColumnsCollection;   // used for columns and parameters of old queries
dbaccess/source/core/inc/SingleSelectQueryComposer.hxx:        ::std::vector<OPrivateTables*>          m_aTablesCollection;
dbaccess/source/core/inc/SingleSelectQueryComposer.hxx:        ::std::vector< OUString >        m_aElementaryParts;     // the filter/groupby/having/order of the elementary statement
dbaccess/source/core/inc/SingleSelectQueryComposer.hxx:        ::std::vector<OPrivateColumns*>         m_aCurrentColumns;
dbaccess/source/core/inc/SingleSelectQueryComposer.hxx:            ::std::vector< ::std::vector < css::beans::PropertyValue > >& rFilters, const css::uno::Reference< css::util::XNumberFormatter > & xFormatter) const;
dbaccess/source/core/inc/SingleSelectQueryComposer.hxx:            ::std::vector < css::beans::PropertyValue > & rFilters, const css::uno::Reference< css::util::XNumberFormatter > & xFormatter) const;
dbaccess/source/core/inc/SingleSelectQueryComposer.hxx:            ::std::vector < css::beans::PropertyValue > & rFilters, const css::uno::Reference< css::util::XNumberFormatter > & xFormatter) const;
dbaccess/source/core/inc/SingleSelectQueryComposer.hxx:        OUString composeStatementFromParts( const ::std::vector< OUString >& _rParts );
dbaccess/source/core/inc/column.hxx:                const ::std::vector< OUString>& _rVector,
dbaccess/source/core/inc/column.hxx:            const ::std::vector< OUString> &_rVector,
dbaccess/source/core/inc/definitioncontainer.hxx:    typedef std::vector<Documents::iterator> DocumentsIndexAccess;
dbaccess/source/core/inc/querycomposer.hxx:        ::std::vector< OUString>                                   m_aFilters;
dbaccess/source/core/inc/querycomposer.hxx:        ::std::vector< OUString>                                   m_aOrders;
dbaccess/source/core/inc/recovery/dbdocrecovery.hxx:                const ::std::vector< css::uno::Reference< css::frame::XController > >& i_rControllers
dbaccess/source/core/misc/ContainerMediator.cxx:    ::std::vector< OUString > aPropertyList;
dbaccess/source/core/misc/DatabaseDataProvider.cxx:    typedef ::std::vector< ColumnDescription > ColumnDescriptions;
dbaccess/source/core/misc/DatabaseDataProvider.cxx:    ::std::vector< OUString > aRowLabels;
dbaccess/source/core/misc/DatabaseDataProvider.cxx:    ::std::vector< ::std::vector< double > > aDataValues;
dbaccess/source/core/misc/DatabaseDataProvider.cxx:        ::std::vector< double > aRow;
dbaccess/source/core/misc/DatabaseDataProvider.cxx:            ::std::vector< double > aRow;
dbaccess/source/core/misc/PropertyForward.cxx:            const OUString& _sName, const ::std::vector< OUString>& _aPropertyList )
dbaccess/source/core/misc/PropertyForward.cxx:                ::std::vector< OUString >::const_iterator aIter = _aPropertyList.begin();
dbaccess/source/core/misc/PropertyForward.cxx:                ::std::vector< OUString >::const_iterator aEnd = _aPropertyList.end();
dbaccess/source/core/misc/dsntypes.cxx:void ODsnTypeCollection::fillPageIds(const OUString& _sURL,::std::vector<sal_Int16>& _rOutPathIds) const
dbaccess/source/core/recovery/dbdocrecovery.cxx:        const ::std::vector< Reference< XController > >& i_rControllers )
dbaccess/source/core/recovery/dbdocrecovery.cxx:            for (   ::std::vector< Reference< XController > >::const_iterator ctrl = i_rControllers.begin();
dbaccess/source/ext/macromigration/migrationengine.cxx:    typedef ::std::vector< SubDocument >    SubDocuments;
dbaccess/source/ext/macromigration/migrationerror.hxx:        ::std::vector< OUString >    aErrorDetails;
dbaccess/source/ext/macromigration/migrationlog.cxx:        ::std::vector< LibraryEntry >   aMovedLibraries;
dbaccess/source/ext/macromigration/migrationlog.cxx:        for (   ::std::vector< LibraryEntry >::const_iterator lib = rDocEntry.aMovedLibraries.begin();
dbaccess/source/ext/macromigration/migrationlog.cxx:            ::std::vector< OUString > aParameterNames;
dbaccess/source/ext/macromigration/migrationlog.cxx:                for (   ::std::vector< LibraryEntry >::const_iterator lib = rDoc.aMovedLibraries.begin();
dbaccess/source/filter/xml/xmlAutoStyle.cxx:            const ::std::vector< XMLPropertyState >& rProperties,
dbaccess/source/filter/xml/xmlAutoStyle.cxx:        ::std::vector< XMLPropertyState >::const_iterator i = rProperties.begin();
dbaccess/source/filter/xml/xmlAutoStyle.cxx:        ::std::vector< XMLPropertyState >::const_iterator aEnd = rProperties.end();
dbaccess/source/filter/xml/xmlAutoStyle.hxx:                const ::std::vector< XMLPropertyState >& rProperties,
dbaccess/source/filter/xml/xmlDataSourceInfo.cxx:    ::std::vector< sal_uInt16 > aTokens;
dbaccess/source/filter/xml/xmlExport.cxx:                const ::std::vector< XMLPropertyState > * /*pProperties*/ ,
dbaccess/source/filter/xml/xmlExport.cxx:    ::std::vector< TypedPropertyValue >::iterator const & in)
dbaccess/source/filter/xml/xmlExport.cxx:    ::std::vector< TypedPropertyValue >::iterator aIter = m_aDataSourceSettings.begin();
dbaccess/source/filter/xml/xmlExport.cxx:    ::std::vector< TypedPropertyValue >::iterator aEnd = m_aDataSourceSettings.end();
dbaccess/source/filter/xml/xmlExport.cxx:        ::std::vector< XMLPropertyState > aPropertyStates;
dbaccess/source/filter/xml/xmlExport.cxx:            ::std::vector< XMLPropertyState > aPropStates = pExportHelper[i].first->Filter( _xProp );
dbaccess/source/filter/xml/xmlExport.cxx:                ::std::vector< XMLPropertyState >::iterator aItr = aPropStates.begin();
dbaccess/source/filter/xml/xmlExport.cxx:                ::std::vector< XMLPropertyState >::iterator aEnd = aPropStates.end();
dbaccess/source/filter/xml/xmlExport.hxx:    ::std::vector< TypedPropertyValue >             m_aDataSourceSettings;
dbaccess/source/filter/xml/xmlExport.hxx:    ::std::vector< XMLPropertyState >               m_aCurrentPropertyStates;
dbaccess/source/filter/xml/xmlExport.hxx:        ::std::vector< TypedPropertyValue >::iterator const & in);
dbaccess/source/filter/xml/xmlTableFilterList.hxx:        ::std::vector< OUString> m_aPatterns;
dbaccess/source/filter/xml/xmlTableFilterList.hxx:        ::std::vector< OUString> m_aTypes;
dbaccess/source/filter/xml/xmlfilter.hxx:    typedef ::std::vector< css::beans::PropertyValue> TInfoSequence;
dbaccess/source/inc/dsntypes.hxx:    typedef std::vector<OUString> StringVector;
dbaccess/source/inc/dsntypes.hxx:    void fillPageIds(const OUString& _sURL,::std::vector<sal_Int16>& _rOutPathIds) const;
dbaccess/source/ui/app/AppController.cxx:                            ::std::vector< OUString > aSelected;
dbaccess/source/ui/app/AppController.cxx:                            for (   ::std::vector< OUString >::const_iterator selectedName = aSelected.begin();
dbaccess/source/ui/app/AppController.cxx:                                ::std::vector< OUString > aList;
dbaccess/source/ui/app/AppController.cxx:                                ::std::vector< OUString> aList;
dbaccess/source/ui/app/AppController.cxx:                        ::std::vector<SotClipboardFormatId> aFormatIds;
dbaccess/source/ui/app/AppController.cxx:                        const ::std::vector<SotClipboardFormatId>::iterator aEnd = aFormatIds.end();
dbaccess/source/ui/app/AppController.cxx:                        for (::std::vector<SotClipboardFormatId>::iterator aIter = aFormatIds.begin();aIter != aEnd; ++aIter)
dbaccess/source/ui/app/AppController.cxx:    ::std::vector< OUString> aList;
dbaccess/source/ui/app/AppController.hxx:        typedef ::std::vector< css::uno::Reference< css::container::XContainer > >  TContainerVector;
dbaccess/source/ui/app/AppController.hxx:        typedef ::std::map< ElementType, ::std::vector< OUString > > SelectionByElementType;
dbaccess/source/ui/app/AppController.hxx:        void getSelectionElementNames( ::std::vector< OUString>& _rNames ) const;
dbaccess/source/ui/app/AppController.hxx:                            const ::std::vector< OUString>& _rList,
dbaccess/source/ui/app/AppController.hxx:        void deleteTables(const ::std::vector< OUString>& _rList);
dbaccess/source/ui/app/AppController.hxx:        static void getSupportedFormats(ElementType _eType,::std::vector<SotClipboardFormatId>& _rFormatIds);
dbaccess/source/ui/app/AppControllerDnD.cxx:void OApplicationController::deleteTables(const ::std::vector< OUString>& _rList)
dbaccess/source/ui/app/AppControllerDnD.cxx:            ::std::vector< OUString>::const_iterator aEnd = _rList.end();
dbaccess/source/ui/app/AppControllerDnD.cxx:            for (::std::vector< OUString>::const_iterator aIter = _rList.begin(); aIter != aEnd; ++aIter)
dbaccess/source/ui/app/AppControllerDnD.cxx:void OApplicationController::deleteObjects( ElementType _eType, const ::std::vector< OUString>& _rList, bool _bConfirm )
dbaccess/source/ui/app/AppControllerDnD.cxx:        ::std::vector< OUString> aList;
dbaccess/source/ui/app/AppControllerDnD.cxx:void OApplicationController::getSelectionElementNames(::std::vector< OUString>& _rNames) const
dbaccess/source/ui/app/AppControllerDnD.cxx:                ::std::vector< OUString> aList;
dbaccess/source/ui/app/AppControllerDnD.cxx:void OApplicationController::getSupportedFormats(ElementType _eType,::std::vector<SotClipboardFormatId>& _rFormatIds)
dbaccess/source/ui/app/AppControllerDnD.cxx:            ::std::vector< OUString> aList;
dbaccess/source/ui/app/AppControllerGen.cxx:                ::std::vector< OUString> aList;
dbaccess/source/ui/app/AppControllerGen.cxx:    ::std::vector< OUString> aList;
dbaccess/source/ui/app/AppControllerGen.cxx:    ::std::vector< ::std::pair< OUString ,Reference< XModel > > > aComponents;
dbaccess/source/ui/app/AppControllerGen.cxx:    ::std::vector< OUString>::iterator aEnd = aList.end();
dbaccess/source/ui/app/AppControllerGen.cxx:    for (::std::vector< OUString>::iterator aIter = aList.begin(); aIter != aEnd; ++aIter)
dbaccess/source/ui/app/AppControllerGen.cxx:        ::std::vector< ::std::pair< OUString ,Reference< XModel > > >::iterator componentIter = aComponents.begin();
dbaccess/source/ui/app/AppControllerGen.cxx:        ::std::vector< ::std::pair< OUString ,Reference< XModel > > >::iterator componentEnd = aComponents.end();
dbaccess/source/ui/app/AppDetailPageHelper.cxx:void OAppDetailPageHelper::getSelectionElementNames( ::std::vector< OUString>& _rNames ) const
dbaccess/source/ui/app/AppDetailPageHelper.cxx:    ::std::vector< NamedDatabaseObject > aSelected;
dbaccess/source/ui/app/AppDetailPageHelper.hxx:        void getSelectionElementNames( ::std::vector< OUString>& _rNames ) const;
dbaccess/source/ui/app/AppDetailView.cxx:void OApplicationDetailView::getSelectionElementNames( ::std::vector< OUString>& _rNames ) const
dbaccess/source/ui/app/AppDetailView.hxx:    typedef ::std::vector< TaskEntry >  TaskEntryList;
dbaccess/source/ui/app/AppDetailView.hxx:        ::std::vector< TaskPaneData >       m_aTaskPaneData;
dbaccess/source/ui/app/AppDetailView.hxx:        void getSelectionElementNames(::std::vector< OUString>& _rNames ) const;
dbaccess/source/ui/app/AppView.cxx:void OApplicationView::getSelectionElementNames( ::std::vector< OUString>& _rNames ) const
dbaccess/source/ui/app/AppView.hxx:        void getSelectionElementNames( ::std::vector< OUString>& _rNames ) const;
dbaccess/source/ui/app/subcomponentmanager.cxx:        typedef ::std::vector< SubComponentDescriptor > SubComponents;
dbaccess/source/ui/browser/brwctrlr.cxx:        ::std::vector< OUString > aContextNames;
dbaccess/source/ui/browser/formadapter.cxx:    for (   ::std::vector< Reference< css::form::XFormComponent > >::iterator aIter = m_aChildren.begin();
dbaccess/source/ui/browser/formadapter.cxx:    ::std::vector< OUString>::iterator aIter = ::std::find_if(   m_aChildNames.begin(),
dbaccess/source/ui/browser/formadapter.cxx:        ::std::vector<  css::uno::Reference< css::form::XFormComponent > >::iterator aIter = ::std::find_if(  m_aChildren.begin(),
dbaccess/source/ui/browser/formadapter.cxx:    ::std::vector<  css::uno::Reference< css::form::XFormComponent > >::iterator aIter = ::std::find_if(  m_aChildren.begin(),
dbaccess/source/ui/browser/genericcontroller.cxx:    typedef ::std::vector< Any >    States;
dbaccess/source/ui/browser/sbagrid.cxx:                ::std::vector< std::shared_ptr<OTableRow> > vClipboardList;
dbaccess/source/ui/browser/unodatbr.cxx:        ::std::vector< OUString > aNames( aPropertyValues.getNames() );
dbaccess/source/ui/browser/unodatbr.cxx:                ::std::vector< NamedValue > aInitialValues;
dbaccess/source/ui/browser/unodatbr.cxx:                ::std::vector< OUString > aCopyProperties;
dbaccess/source/ui/browser/unodatbr.cxx:                for ( ::std::vector< NamedValue >::const_iterator property = aInitialValues.begin();
dbaccess/source/ui/browser/unodatbr.cxx:                for ( ::std::vector< OUString >::const_iterator copyPropertyName = aCopyProperties.begin();
dbaccess/source/ui/control/tabletree.cxx:    ::std::vector< OUString > lcl_getMetaDataStrings_throw( const Reference< XResultSet >& _rxMetaDataResult, sal_Int32 _nColumnIndex )
dbaccess/source/ui/control/tabletree.cxx:        ::std::vector< OUString > aStrings;
dbaccess/source/ui/control/tabletree.cxx:                ::std::vector< OUString > aFolderNames( lcl_getMetaDataStrings_throw(
dbaccess/source/ui/control/tabletree.cxx:                for (   ::std::vector< OUString >::const_iterator folder = aFolderNames.begin();
dbaccess/source/ui/dlg/ConnectionHelper.cxx:        ::std::vector< OUString > aToBeCreated;  // the to-be-created levels
dbaccess/source/ui/dlg/ConnectionHelper.cxx:            for (   ::std::vector< OUString >::reverse_iterator aLocalName = aToBeCreated.rbegin();
dbaccess/source/ui/dlg/ConnectionHelper.cxx:    void OConnectionHelper::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/ConnectionHelper.cxx:    void OConnectionHelper::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/ConnectionHelper.hxx:        virtual void    fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/ConnectionHelper.hxx:        virtual void    fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OTextConnectionPageSetup::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OTextConnectionPageSetup::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OLDAPConnectionPageSetup::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OLDAPConnectionPageSetup::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OMySQLIntroPageSetup::fillControls(::std::vector< ISaveValueWrapper* >& /*_rControlList*/)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OMySQLIntroPageSetup::fillWindows(::std::vector< ISaveValueWrapper* >& /*_rControlList*/)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void MySQLNativeSetupPage::fillControls( ::std::vector< ISaveValueWrapper* >& _rControlList )
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void MySQLNativeSetupPage::fillWindows( ::std::vector< ISaveValueWrapper* >& _rControlList )
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OGeneralSpecialJDBCConnectionPageSetup::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OGeneralSpecialJDBCConnectionPageSetup::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OJDBCConnectionPageSetup::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OJDBCConnectionPageSetup::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OSpreadSheetConnectionPageSetup::fillWindows(::std::vector< ISaveValueWrapper* >& /*_rControlList*/)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OSpreadSheetConnectionPageSetup::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OAuthentificationPageSetup::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OAuthentificationPageSetup::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OFinalDBPageSetup::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.cxx:    void OFinalDBPageSetup::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls( ::std::vector< ISaveValueWrapper* >& _rControlList ) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows( ::std::vector< ISaveValueWrapper* >& _rControlList ) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DBSetupConnectionPages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/DbAdminImpl.cxx:    ::std::vector< PropertyValue > aReturn;
dbaccess/source/ui/dlg/DbAdminImpl.cxx:    ::std::vector< sal_Int32> aDetailIds;
dbaccess/source/ui/dlg/DbAdminImpl.cxx:    ::std::vector< sal_Int32>::iterator aDetailsEnd = aDetailIds.end();
dbaccess/source/ui/dlg/DbAdminImpl.cxx:    for (::std::vector< sal_Int32>::iterator aIter = aDetailIds.begin();aIter != aDetailsEnd ; ++aIter)
dbaccess/source/ui/dlg/DbAdminImpl.cxx:        ::std::vector< sal_Int32 > aRemoveIndexes;
dbaccess/source/ui/dlg/DbAdminImpl.cxx:        ::std::vector< sal_Int32 >::const_iterator aRemoveEnd = aRemoveIndexes.end();
dbaccess/source/ui/dlg/DbAdminImpl.cxx:        for (   ::std::vector< sal_Int32 >::const_iterator aRemoveIndex = aRemoveIndexes.begin();
dbaccess/source/ui/dlg/DriverSettings.cxx:void ODriversSettings::getSupportedIndirectSettings( const OUString& _sURLPrefix,const css::uno::Reference< css::uno::XComponentContext >& _xContext, ::std::vector< sal_Int32>& _out_rDetailsIds )
dbaccess/source/ui/dlg/DriverSettings.hxx:        static void getSupportedIndirectSettings( const OUString& _sURLPrefix,const css::uno::Reference< css::uno::XComponentContext >& _xContext,::std::vector< sal_Int32>& _out_rDetailsIds );
dbaccess/source/ui/dlg/TextConnectionHelper.cxx:    void OTextConnectionHelper::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/TextConnectionHelper.cxx:    void OTextConnectionHelper::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/TextConnectionHelper.hxx:        void        fillControls(::std::vector< ISaveValueWrapper* >& _rControlList);
dbaccess/source/ui/dlg/TextConnectionHelper.hxx:        void        fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList);
dbaccess/source/ui/dlg/UserAdmin.cxx:void OUserAdmin::fillControls(::std::vector< ISaveValueWrapper* >& /*_rControlList*/)
dbaccess/source/ui/dlg/UserAdmin.cxx:void OUserAdmin::fillWindows(::std::vector< ISaveValueWrapper* >& /*_rControlList*/)
dbaccess/source/ui/dlg/UserAdmin.hxx:    virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/UserAdmin.hxx:    virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/admincontrols.cxx:    void MySQLNativeSettings::fillControls( ::std::vector< ISaveValueWrapper* >& _rControlList )
dbaccess/source/ui/dlg/admincontrols.cxx:    void MySQLNativeSettings::fillWindows( ::std::vector< ISaveValueWrapper* >& _rControlList )
dbaccess/source/ui/dlg/admincontrols.hxx:        void fillControls( ::std::vector< ISaveValueWrapper* >& _rControlList );
dbaccess/source/ui/dlg/admincontrols.hxx:        void fillWindows( ::std::vector< ISaveValueWrapper* >& _rControlList );
dbaccess/source/ui/dlg/adminpages.cxx:        ::std::vector< ISaveValueWrapper* > aControlList;
dbaccess/source/ui/dlg/adminpages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) = 0;
dbaccess/source/ui/dlg/adminpages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) = 0;
dbaccess/source/ui/dlg/adtabdlg.cxx:            ::std::vector< OUString > aTables(pTableBegin,pTableEnd);
dbaccess/source/ui/dlg/advancedsettings.cxx:    void SpecialSettingsPage::fillWindows( ::std::vector< ISaveValueWrapper* >& _rControlList )
dbaccess/source/ui/dlg/advancedsettings.cxx:    void SpecialSettingsPage::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/advancedsettings.cxx:    void GeneratedValuesPage::fillWindows( ::std::vector< ISaveValueWrapper* >& _rControlList )
dbaccess/source/ui/dlg/advancedsettings.cxx:    void GeneratedValuesPage::fillControls( ::std::vector< ISaveValueWrapper* >& _rControlList )
dbaccess/source/ui/dlg/advancedsettings.hxx:    typedef ::std::vector< BooleanSettingDesc > BooleanSettingDescs;
dbaccess/source/ui/dlg/advancedsettings.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/advancedsettings.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/advancedsettings.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/advancedsettings.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/dbfindex.cxx:    ::std::vector< OUString > aUsedIndexes;
dbaccess/source/ui/dlg/dbfindex.cxx:    for (   ::std::vector< OUString >::const_iterator aUsedIndex = aUsedIndexes.begin();
dbaccess/source/ui/dlg/detailpages.cxx:    void OCommonBehaviourTabPage::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/detailpages.cxx:    void OCommonBehaviourTabPage::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/detailpages.cxx:    void OUserDriverDetailsPage::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/detailpages.cxx:    void OUserDriverDetailsPage::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/detailpages.cxx:    void MySQLNativePage::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/detailpages.cxx:    void MySQLNativePage::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/detailpages.cxx:    void OTextDetailsPage::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/detailpages.cxx:    void OTextDetailsPage::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/detailpages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/detailpages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/detailpages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/detailpages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/detailpages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/detailpages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/detailpages.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/detailpages.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/generalpage.cxx:        typedef ::std::vector< DisplayedType > DisplayedTypes;
dbaccess/source/ui/dlg/generalpage.cxx:    void OGeneralPage::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/generalpage.cxx:    void OGeneralPage::fillControls(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/generalpage.hxx:        ::std::vector< OUString>
dbaccess/source/ui/dlg/generalpage.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/generalpage.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/generalpage.hxx:        ::std::vector< OUString>
dbaccess/source/ui/dlg/sqlmessage.cxx:    typedef ::std::vector< ExceptionDisplayInfo >   ExceptionDisplayChain;
dbaccess/source/ui/dlg/tablespage.cxx:    void OTableSubscriptionPage::fillControls(::std::vector< ISaveValueWrapper* >& /*_rControlList*/)
dbaccess/source/ui/dlg/tablespage.cxx:    void OTableSubscriptionPage::fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList)
dbaccess/source/ui/dlg/tablespage.hxx:        virtual void fillControls(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/dlg/tablespage.hxx:        virtual void fillWindows(::std::vector< ISaveValueWrapper* >& _rControlList) override;
dbaccess/source/ui/inc/ColumnControlWindow.hxx:        ::std::vector<OTypeInfoMap::iterator> m_aDestTypeInfoIndex;
dbaccess/source/ui/inc/ConnectionLineData.hxx:    typedef ::std::vector< OConnectionLineDataRef > OConnectionLineDataVec;
dbaccess/source/ui/inc/DExport.hxx:        typedef ::std::vector<TColumns::const_iterator>             TColumnVector;
dbaccess/source/ui/inc/DExport.hxx:        typedef ::std::vector< ::std::pair<sal_Int32,sal_Int32> >   TPositions;
dbaccess/source/ui/inc/DExport.hxx:        ::std::vector<sal_Int32>        m_vColumnTypes; ///< ColumnTypes for faster access
dbaccess/source/ui/inc/DExport.hxx:        ::std::vector<sal_Int32>        m_vColumnSize;
dbaccess/source/ui/inc/DExport.hxx:        ::std::vector<sal_Int16>        m_vNumberFormat;
dbaccess/source/ui/inc/JoinTableView.hxx:        ::std::vector<VclPtr<OTableConnection> >    m_vTableConnection;
dbaccess/source/ui/inc/JoinTableView.hxx:        const ::std::vector<VclPtr<OTableConnection> >& getTableConnections() const { return m_vTableConnection; }
dbaccess/source/ui/inc/JoinTableView.hxx:        ::std::vector<VclPtr<OTableConnection> >::const_iterator getTableConnections(const OTableWindow* _pFromWin) const;
dbaccess/source/ui/inc/RtfReader.hxx:        ::std::vector<sal_Int32>    m_vecColor;
dbaccess/source/ui/inc/TableConnection.hxx:        ::std::vector<OConnectionLine*> m_vConnLine;
dbaccess/source/ui/inc/TableConnection.hxx:        const ::std::vector<OConnectionLine*>&  GetConnLineList() const { return m_vConnLine; }
dbaccess/source/ui/inc/TableConnectionData.hxx:    typedef ::std::vector< ::std::shared_ptr<OTableConnectionData> >  TTableConnectionData;
dbaccess/source/ui/inc/TableController.hxx:        ::std::vector< std::shared_ptr<OTableRow> > m_vRowList;
dbaccess/source/ui/inc/TableController.hxx:        ::std::vector<OTypeInfoMap::iterator>           m_aTypeInfoIndex;
dbaccess/source/ui/inc/TableController.hxx:        inline ::std::vector< std::shared_ptr<OTableRow> >& getRows() { return m_vRowList; }
dbaccess/source/ui/inc/TableFieldDescription.hxx:       ::std::vector< OUString >
dbaccess/source/ui/inc/TableFieldDescription.hxx:            ::std::vector< OUString>::const_iterator aIter = m_aCriteria.begin();
dbaccess/source/ui/inc/TableFieldDescription.hxx:            ::std::vector< OUString>::const_iterator aEnd = m_aCriteria.end();
dbaccess/source/ui/inc/TableFieldDescription.hxx:        const ::std::vector< OUString>&  GetCriteria() const { return m_aCriteria; }
dbaccess/source/ui/inc/TableFieldDescription.hxx:    typedef ::std::vector<OTableFieldDescRef> OTableFields;
dbaccess/source/ui/inc/TableRowExchange.hxx:        ::std::vector< std::shared_ptr<OTableRow> > m_vTableRow;
dbaccess/source/ui/inc/TableRowExchange.hxx:        OTableRowExchange(const ::std::vector< std::shared_ptr<OTableRow> >& _rvTableRow);
dbaccess/source/ui/inc/TableWindow.hxx:        void EnumValidFields(::std::vector< OUString>& arrstrFields);
dbaccess/source/ui/inc/TableWindowData.hxx:    typedef ::std::vector< std::shared_ptr<OTableWindowData> >      TTableWindowData;
dbaccess/source/ui/inc/TokenWriter.hxx:        ::std::vector<sal_Int32>    m_aColumnMapping;
dbaccess/source/ui/inc/TokenWriter.hxx:        ::std::vector<sal_Int32>    m_aColumnTypes;
dbaccess/source/ui/inc/UITools.hxx:                        ::std::vector<OTypeInfoMap::iterator>& _rTypeInfoIters);
dbaccess/source/ui/inc/WColumnSelect.hxx:                                ::std::vector< OUString> &_rRightColumns);
dbaccess/source/ui/inc/WColumnSelect.hxx:                                ::std::vector< OUString>& _rRightColumns,
dbaccess/source/ui/inc/WColumnSelect.hxx:                                ::std::vector< OUString>& _rRightColumns,
dbaccess/source/ui/inc/WCopyTable.hxx:        ::std::vector< OUString>* m_pVector;
dbaccess/source/ui/inc/WCopyTable.hxx:        TMultiListBoxEntryFindFunctor(::std::vector< OUString>* _pVector,
dbaccess/source/ui/inc/WCopyTable.hxx:        ::std::vector< OFieldDescription >                                 m_aColumnInfo;
dbaccess/source/ui/inc/WCopyTable.hxx:        ::std::vector<OTypeInfoMap::iterator>   m_aTypeInfoIndex;
dbaccess/source/ui/inc/WCopyTable.hxx:        ::std::vector<OTypeInfoMap::iterator>   m_aDestTypeInfoIndex;
dbaccess/source/ui/inc/WCopyTable.hxx:        ::std::vector<sal_Int32>                m_vColumnTypes;
dbaccess/source/ui/inc/WCopyTable.hxx:        ::std::vector<sal_Int32>    GetColumnTypes()        const { return m_vColumnTypes; }
dbaccess/source/ui/inc/commontypes.hxx:    typedef std::vector<sal_Int8> ByteVector;
dbaccess/source/ui/inc/commontypes.hxx:    typedef std::vector<OUString> StringArray;
dbaccess/source/ui/inc/formadapter.hxx:        ::std::vector<  css::uno::Reference< css::form::XFormComponent > >    m_aChildren;
dbaccess/source/ui/inc/formadapter.hxx:        ::std::vector< OUString >                                             m_aChildNames;
dbaccess/source/ui/inc/indexes.hxx:    typedef std::vector<OIndexField> IndexFields;
dbaccess/source/ui/inc/indexes.hxx:    typedef std::vector<OIndex> Indexes;
dbaccess/source/ui/inc/tabletree.hxx:    typedef ::std::vector< TTableViewName >         TNames;
dbaccess/source/ui/misc/DExport.cxx:        ::std::vector<sal_Int32> aTypes;
dbaccess/source/ui/misc/DExport.cxx:        ::std::vector<sal_Bool> aNullable;
dbaccess/source/ui/misc/DExport.cxx:    ::std::vector< OUString> aInsertList;
dbaccess/source/ui/misc/DExport.cxx:    ::std::vector< OUString>::iterator aInsertEnd = aInsertList.end();
dbaccess/source/ui/misc/DExport.cxx:    for (::std::vector< OUString>::iterator aInsertIter = aInsertList.begin(); aInsertIter != aInsertEnd; ++aInsertIter)
dbaccess/source/ui/misc/RowSetDrop.cxx:        ::std::vector<sal_Int32>::iterator aEnd = m_aColumnMapping.end();
dbaccess/source/ui/misc/RowSetDrop.cxx:        for (::std::vector<sal_Int32>::iterator aIter = m_aColumnMapping.begin(); aIter != aEnd ;++aIter,++i )
dbaccess/source/ui/misc/UITools.cxx:                    ::std::vector<OTypeInfoMap::iterator>& _rTypeInfoIters)
dbaccess/source/ui/misc/UITools.cxx:        ::std::vector<sal_Int32> aTypes;
dbaccess/source/ui/misc/UITools.cxx:        ::std::vector<sal_Bool> aNullable;
dbaccess/source/ui/misc/WColumnSelect.cxx:    ::std::vector< OUString> aRightColumns;
dbaccess/source/ui/misc/WColumnSelect.cxx:    ::std::vector< OUString> aRightColumns;
dbaccess/source/ui/misc/WColumnSelect.cxx:void OWizColumnSelect::fillColumns(ListBox* pRight,::std::vector< OUString> &_rRightColumns)
dbaccess/source/ui/misc/WColumnSelect.cxx:                                        ::std::vector< OUString>& _rRightColumns,
dbaccess/source/ui/misc/WColumnSelect.cxx:                                    ::std::vector< OUString>& _rRightColumns,
dbaccess/source/ui/misc/WCopyTable.cxx:    for (   ::std::vector< OFieldDescription >::const_iterator col = m_aColumnInfo.begin();
dbaccess/source/ui/misc/WCopyTable.cxx:    for (   ::std::vector< OFieldDescription >::const_iterator col = m_aColumnInfo.begin();
dbaccess/source/ui/querydesign/JoinTableView.cxx:            const ::std::vector<OConnectionLine*>& rLines = pConn->GetConnLineList();
dbaccess/source/ui/querydesign/JoinTableView.cxx:            ::std::vector<OConnectionLine*>::const_reverse_iterator aIter = rLines.rbegin();
dbaccess/source/ui/querydesign/JoinTableView.cxx:::std::vector<VclPtr<OTableConnection> >::const_iterator OJoinTableView::getTableConnections(const OTableWindow* _pFromWin) const
dbaccess/source/ui/querydesign/JoinTableView.cxx:                    const ::std::vector<OConnectionLine*>& rLines = pSelConnection->GetConnLineList();
dbaccess/source/ui/querydesign/JoinTableView.cxx:                    ::std::vector<OConnectionLine*>::const_iterator aIter = ::std::find_if(rLines.begin(), rLines.end(),::std::mem_fun(&OConnectionLine::IsValid));
dbaccess/source/ui/querydesign/QueryDesignView.cxx:                                    const ::std::vector<VclPtr<OTableConnection> >& _rConnList)
dbaccess/source/ui/querydesign/QueryDesignView.cxx:                                        const ::std::vector<VclPtr<OTableConnection> >& rConnList
dbaccess/source/ui/querydesign/QueryDesignView.cxx:    ::std::vector< OUString> aFields;
dbaccess/source/ui/querydesign/QueryDesignView.cxx:            ::std::vector< OUString>::iterator aStrIter = aFields.begin();
dbaccess/source/ui/querydesign/QueryDesignView.cxx:            ::std::vector< OUString>::iterator aStrEnd = aFields.end();
dbaccess/source/ui/querydesign/QueryTabWinUndoAct.hxx:        ::std::vector<VclPtr<OTableConnection> > m_vTableConnection;
dbaccess/source/ui/querydesign/QueryTabWinUndoAct.hxx:        ::std::vector<VclPtr<OTableConnection> >&       GetTabConnList() { return m_vTableConnection; }
dbaccess/source/ui/querydesign/QueryTableView.cxx:    ::std::vector<OUString> arrInvalidTables;
dbaccess/source/ui/querydesign/SelectionBrowseBox.hxx:        ::std::vector<bool>                 m_bVisibleRow;              // at pos we find the RowId
dbaccess/source/ui/querydesign/TableConnection.cxx:        ::std::vector<OConnectionLine*>::iterator aLineEnd = m_vConnLine.end();
dbaccess/source/ui/querydesign/TableConnection.cxx:        for(::std::vector<OConnectionLine*>::iterator aLineIter = m_vConnLine.begin();aLineIter != aLineEnd;++aLineIter)
dbaccess/source/ui/querydesign/TableConnection.cxx:            const ::std::vector<OConnectionLine*>& rLine = rConn.GetConnLineList();
dbaccess/source/ui/querydesign/TableConnection.cxx:            ::std::vector<OConnectionLine*>::const_iterator aIter = rLine.begin();
dbaccess/source/ui/querydesign/TableConnection.cxx:            ::std::vector<OConnectionLine*>::const_iterator aEnd = rLine.end();
dbaccess/source/ui/querydesign/TableConnection.cxx:        ::std::vector<OConnectionLine*>::const_iterator aEnd = m_vConnLine.end();
dbaccess/source/ui/querydesign/TableConnection.cxx:        for(::std::vector<OConnectionLine*>::const_iterator aIter = m_vConnLine.begin();aIter != aEnd;++aIter)
dbaccess/source/ui/querydesign/TableFieldDescription.cxx:            for (   ::std::vector< OUString >::const_iterator crit = m_aCriteria.begin();
dbaccess/source/ui/querydesign/TableWindow.cxx:void OTableWindow::EnumValidFields(::std::vector< OUString>& arrstrFields)
dbaccess/source/ui/querydesign/TableWindowAccess.cxx:            ::std::vector< Reference<XInterface> > aRelations;
dbaccess/source/ui/querydesign/querycontroller.cxx:static ::std::vector< CommentStrip > getComment( const OUString& rQuery )
dbaccess/source/ui/querydesign/querycontroller.cxx:    ::std::vector< CommentStrip > aRet;
dbaccess/source/ui/querydesign/querycontroller.cxx:static OUString concatComment( const OUString& rQuery, const ::std::vector< CommentStrip >& rComments )
dbaccess/source/ui/querydesign/querycontroller.cxx:    for (::std::vector< CommentStrip >::const_iterator it( rComments.begin()); it != rComments.end(); ++it)
dbaccess/source/ui/querydesign/querycontroller.cxx:            ::std::vector< CommentStrip > aComments = getComment( m_sStatement);
dbaccess/source/ui/relationdesign/RTableConnection.cxx:    const ::std::vector<OConnectionLine*>& rConnLineList = GetConnLineList();
dbaccess/source/ui/relationdesign/RTableConnection.cxx:    std::vector<OConnectionLine*>::const_iterator aIter = rConnLineList.begin();
dbaccess/source/ui/relationdesign/RTableConnection.cxx:    std::vector<OConnectionLine*>::const_iterator aEnd = rConnLineList.end();
dbaccess/source/ui/relationdesign/RTableConnectionData.cxx:        std::vector< OConnectionLineDataRef >::const_iterator aIter = lhs.m_vConnLineData.begin();
dbaccess/source/ui/relationdesign/RTableConnectionData.cxx:        std::vector< OConnectionLineDataRef >::const_iterator aEnd = lhs.m_vConnLineData.end();
dbaccess/source/ui/relationdesign/RelationTableView.cxx:    ::std::vector< OUString> arrInvalidTables;
dbaccess/source/ui/tabledesign/TEditControl.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aIter = m_pRowList->begin();
dbaccess/source/ui/tabledesign/TEditControl.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aEnd = m_pRowList->end();
dbaccess/source/ui/tabledesign/TEditControl.cxx:    ::std::vector< std::shared_ptr<OTableRow> > vClipboardList;
dbaccess/source/ui/tabledesign/TEditControl.cxx:    ::std::vector<  std::shared_ptr<OTableRow> > vInsertedUndoRedoRows; // need for undo/redo handling
dbaccess/source/ui/tabledesign/TEditControl.cxx:    std::vector< std::shared_ptr<OTableRow> >::size_type nListCount(
dbaccess/source/ui/tabledesign/TEditControl.cxx:        ::std::vector< std::shared_ptr<OTableRow> >::reverse_iterator aIter = m_pRowList->rbegin();
dbaccess/source/ui/tabledesign/TEditControl.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aIter = m_pRowList->begin();
dbaccess/source/ui/tabledesign/TEditControl.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aEnd = m_pRowList->end();
dbaccess/source/ui/tabledesign/TEditControl.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aIter = m_pRowList->begin();
dbaccess/source/ui/tabledesign/TEditControl.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aEnd = m_pRowList->end();
dbaccess/source/ui/tabledesign/TEditControl.hxx:        ::std::vector< ::std::shared_ptr<OTableRow> >*    m_pRowList;
dbaccess/source/ui/tabledesign/TEditControl.hxx:        ::std::vector< ::std::shared_ptr<OTableRow> >* GetRowList(){ return m_pRowList; }
dbaccess/source/ui/tabledesign/TableController.cxx:        ::std::vector< std::shared_ptr<OTableRow> >::iterator aIter = m_vRowList.begin();
dbaccess/source/ui/tabledesign/TableController.cxx:        ::std::vector< std::shared_ptr<OTableRow> >::iterator aEnd = m_vRowList.end();
dbaccess/source/ui/tabledesign/TableController.cxx:                ::std::vector< std::shared_ptr<OTableRow> >::iterator rowIter = m_vRowList.begin();
dbaccess/source/ui/tabledesign/TableController.cxx:                ::std::vector< std::shared_ptr<OTableRow> >::iterator rowEnd = m_vRowList.end();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aIter = m_vRowList.begin();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aEnd = m_vRowList.end();
dbaccess/source/ui/tabledesign/TableController.cxx:            ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aIter2 = aIter+1;
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aIter = m_vRowList.begin();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aEnd = m_vRowList.end();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aIter = m_vRowList.begin();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aEnd = m_vRowList.end();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aIter = m_vRowList.begin();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aEnd = m_vRowList.end();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aIter = m_vRowList.begin();
dbaccess/source/ui/tabledesign/TableController.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aEnd = m_vRowList.end();
dbaccess/source/ui/tabledesign/TableRowExchange.cxx:    OTableRowExchange::OTableRowExchange(const ::std::vector< std::shared_ptr<OTableRow> >& _rvTableRow)
dbaccess/source/ui/tabledesign/TableRowExchange.cxx:            ::std::vector< std::shared_ptr<OTableRow> >* pRows = static_cast< ::std::vector< std::shared_ptr<OTableRow> >* >(pUserObject);
dbaccess/source/ui/tabledesign/TableRowExchange.cxx:                ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aIter = pRows->begin();
dbaccess/source/ui/tabledesign/TableRowExchange.cxx:                ::std::vector< std::shared_ptr<OTableRow> >::const_iterator aEnd = pRows->end();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pOriginalRows = pOwner->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aIter = m_aDeletedRows.begin();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aEnd = m_aDeletedRows.end();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pOriginalRows = pTabEdCtrl->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aIter = m_aDeletedRows.begin();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aEnd = m_aDeletedRows.end();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pOriginalRows = pTabEdCtrl->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.cxx:                                               const ::std::vector<  std::shared_ptr<OTableRow> >& _vInsertedRows)
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pOriginalRows = pTabEdCtrl->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aIter = m_vInsertedRows.begin();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >::iterator aEnd = m_vInsertedRows.end();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pRowList = pTabEdCtrl->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pOriginalRows = pTabEdCtrl->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pRowList = pTabEdCtrl->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pRowList = pTabEdCtrl->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.cxx:    ::std::vector< std::shared_ptr<OTableRow> >* pRowList = pTabEdCtrl->GetRowList();
dbaccess/source/ui/tabledesign/TableUndo.hxx:        ::std::vector< std::shared_ptr<OTableRow> > m_aDeletedRows;
dbaccess/source/ui/tabledesign/TableUndo.hxx:        ::std::vector< std::shared_ptr<OTableRow> > m_vInsertedRows;
dbaccess/source/ui/tabledesign/TableUndo.hxx:                                const ::std::vector<  std::shared_ptr<OTableRow> >& _vInsertedRows);
dbaccess/source/ui/uno/copytablewizard.cxx:        ValueTransfer( const sal_Int32& _rSourcePos, const sal_Int32& _rDestPos, const ::std::vector< sal_Int32 >& _rColTypes,
dbaccess/source/ui/uno/copytablewizard.cxx:        const ::std::vector< sal_Int32 >    m_rColTypes;
dbaccess/source/ui/uno/copytablewizard.cxx:    ::std::vector< sal_Int32 > aSourceColTypes;
dbaccess/source/ui/uno/copytablewizard.cxx:    ::std::vector< sal_Int32 > aSourcePrec;
desktop/qa/desktop_lib/test_desktop_lib.cxx:    std::vector<OString> m_aSearchResultSelection;
desktop/qa/desktop_lib/test_desktop_lib.cxx:    std::vector<int> m_aSearchResultPart;
desktop/qa/desktop_lib/test_desktop_lib.cxx:    std::vector<OUString> aRectangles;
desktop/qa/desktop_lib/test_desktop_lib.cxx:    std::vector<OString> aSelections;
desktop/qa/desktop_lib/test_desktop_lib.cxx:    std::vector<unsigned char> aBuffer(nStride * nCanvasHeight);
desktop/qa/desktop_lib/test_desktop_lib.cxx:    std::vector<char> aImageContents((std::istreambuf_iterator<char>(aImageStream)), std::istreambuf_iterator<char>());
desktop/qa/desktop_lib/test_desktop_lib.cxx:    std::vector<OString> pExpected = { "FirstSheet", "Renamed", "Sheet3", "Sheet4", "Sheet5", "LastSheet" };
desktop/qa/desktop_lib/test_desktop_lib.cxx:        std::vector<int> pExpected = {5, 6, 7, 8, 9};
desktop/qa/desktop_lib/test_desktop_lib.cxx:        std::vector<int> pExpected = { 8 };
desktop/source/app/app.cxx:    std::vector< OString > args;
desktop/source/app/app.cxx:    std::vector< char const * > argPtrs;
desktop/source/app/app.cxx:    for (std::vector< OString >::iterator i(args.begin()); i != args.end();
desktop/source/app/app.cxx:                std::vector<OUString> const & data(rAppEvent.GetStringsData());
desktop/source/app/app.cxx:                std::vector<OUString> const & data(rAppEvent.GetStringsData());
desktop/source/app/appinit.cxx:        std::vector< OUString > const & conDcp = rCmdLine.GetAccept();
desktop/source/app/appinit.cxx:        for (std::vector< OUString >::const_iterator i(conDcp.begin());
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > translateExternalUris(
desktop/source/app/cmdlineargs.cxx:    std::vector< OUString > const & input)
desktop/source/app/cmdlineargs.cxx:    std::vector< OUString > t;
desktop/source/app/cmdlineargs.cxx:    for (std::vector< OUString >::const_iterator i(input.begin());
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > CommandLineArgs::GetOpenList() const
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > CommandLineArgs::GetViewList() const
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > CommandLineArgs::GetStartList() const
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > CommandLineArgs::GetForceOpenList() const
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > CommandLineArgs::GetForceNewList() const
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > CommandLineArgs::GetPrintList() const
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > CommandLineArgs::GetPrintToList() const
desktop/source/app/cmdlineargs.cxx:std::vector< OUString > CommandLineArgs::GetConversionList() const
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > const & GetAccept() const { return m_accept;}
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > const & GetUnaccept() const { return m_unaccept;}
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > GetOpenList() const;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > GetViewList() const;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > GetStartList() const;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > GetForceOpenList() const;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > GetForceNewList() const;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > GetPrintList() const;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > GetPrintToList() const;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > const & GetInFilter() const { return m_infilter;}
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > GetConversionList() const;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_accept;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_unaccept;
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_openlist; // contains external URIs
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_viewlist; // contains external URIs
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_startlist; // contains external URIs
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_forceopenlist; // contains external URIs
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_forcenewlist; // contains external URIs
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_printlist; // contains external URIs
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_printtolist; // contains external URIs
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_conversionlist; // contains external URIs
desktop/source/app/cmdlineargs.hxx:        std::vector< OUString > m_infilter;
desktop/source/app/dispatchwatcher.cxx:bool DispatchWatcher::executeDispatchRequests( const std::vector<DispatchRequest>& aDispatchRequestsList, bool bNoTerminate )
desktop/source/app/dispatchwatcher.cxx:    std::vector< DispatchHolder >   aDispatches;
desktop/source/app/dispatchwatcher.hxx:        bool executeDispatchRequests( const std::vector<DispatchRequest>& aDispatches, bool bNoTerminate = false );
desktop/source/app/langselect.cxx:    ::std::vector<OUString> fallbacks( LanguageTag( locale).getFallbackStrings( false));
desktop/source/app/officeipcthread.cxx:                std::vector< OUString > const & accept = aCmdLineArgs->
desktop/source/app/officeipcthread.cxx:                for (std::vector< OUString >::const_iterator i(accept.begin());
desktop/source/app/officeipcthread.cxx:                std::vector< OUString > const & unaccept = aCmdLineArgs->
desktop/source/app/officeipcthread.cxx:                for (std::vector< OUString >::const_iterator i(
desktop/source/app/officeipcthread.cxx:    std::vector<DispatchWatcher::DispatchRequest>& rDispatchList,
desktop/source/app/officeipcthread.cxx:    std::vector< OUString > const & aRequestList,
desktop/source/app/officeipcthread.cxx:    for (std::vector< OUString >::const_iterator i(aRequestList.begin());
desktop/source/app/officeipcthread.cxx:    std::vector<DispatchWatcher::DispatchRequest>& rDispatchList,
desktop/source/app/officeipcthread.cxx:    std::vector< OUString > const & rRequestList,
desktop/source/app/officeipcthread.cxx:    for (std::vector< OUString >::const_iterator i(rRequestList.begin());
desktop/source/app/officeipcthread.cxx:    static std::vector<DispatchWatcher::DispatchRequest> aDispatchList;
desktop/source/app/officeipcthread.cxx:        std::vector<DispatchWatcher::DispatchRequest> aTempList( aDispatchList );
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aOpenList; // Documents that should be opened in the default way
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aViewList; // Documents that should be opened in viewmode
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aStartList; // Documents/Presentations that should be started
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aPrintList; // Documents that should be printed on default printer
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aForceOpenList; // Documents that should be forced to open for editing (even templates)
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aForceNewList; // Documents that should be forced to create a new document
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aPrintToList; // Documents that should be printed on the given printer
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aConversionList;
desktop/source/app/officeipcthread.hxx:    std::vector< OUString > aInFilter;
desktop/source/deployment/gui/dp_gui_dependencydialog.cxx:    vcl::Window * parent, std::vector< OUString > const & dependencies):
desktop/source/deployment/gui/dp_gui_dependencydialog.cxx:    for (std::vector< OUString >::const_iterator i(dependencies.begin());
desktop/source/deployment/gui/dp_gui_dependencydialog.hxx:        vcl::Window * parent, std::vector< OUString > const & dependencies);
desktop/source/deployment/gui/dp_gui_dialog2.cxx:    std::vector< css::uno::Reference< css::deployment::XPackage > > vEntries;
desktop/source/deployment/gui/dp_gui_dialog2.cxx:    std::vector< uno::Reference< deployment::XPackage > > vUpdateEntries;
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:    std::vector< uno::Reference< deployment::XPackage > >        m_vExtensionList;
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:                  const std::vector<uno::Reference<deployment::XPackage > > &vExtensionList )
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:    void checkForUpdates( const std::vector<uno::Reference<deployment::XPackage > > &vExtensionList );
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:    void _checkForUpdates( const std::vector<uno::Reference<deployment::XPackage > > &vExtensionList );
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:        std::vector< OUString > deps;
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:    const std::vector<uno::Reference<deployment::XPackage > > &vExtensionList )
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:    const std::vector<uno::Reference<deployment::XPackage > > &vExtensionList )
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:    std::vector< UpdateData > vData;
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:        ::std::vector< UpdateData > dataDownload;
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:        typedef std::vector< dp_gui::UpdateData >::const_iterator cit;
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.cxx:void ExtensionCmdQueue::checkForUpdates( const std::vector<uno::Reference<deployment::XPackage > > &vExtensionList )
desktop/source/deployment/gui/dp_gui_extensioncmdqueue.hxx:    void checkForUpdates(const std::vector< css::uno::Reference<
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:    typedef std::vector< TEntry_Impl >::iterator ITER;
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:        typedef std::vector< TEntry_Impl >::iterator ITER;
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:    typedef std::vector< TEntry_Impl >::iterator ITER;
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:    typedef ::std::vector<uno::WeakReference<deployment::XPackage> >::iterator IT;
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:    typedef std::vector< TEntry_Impl >::iterator ITER;
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:        typedef std::vector< TEntry_Impl >::iterator ITER;
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:        typedef std::vector< TEntry_Impl >::iterator ITER;
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:    typedef std::vector< TEntry_Impl >::iterator ITER;
desktop/source/deployment/gui/dp_gui_extlistbox.cxx:    typedef std::vector< TEntry_Impl >::iterator ITER;
desktop/source/deployment/gui/dp_gui_extlistbox.hxx:    std::vector< TEntry_Impl > m_vEntries;
desktop/source/deployment/gui/dp_gui_extlistbox.hxx:    std::vector< TEntry_Impl > m_vRemovedEntries;
desktop/source/deployment/gui/dp_gui_extlistbox.hxx:    std::vector< css::uno::WeakReference<
desktop/source/deployment/gui/dp_gui_theextmgr.cxx:    std::vector< uno::Reference< deployment::XPackage >  > vEntries;
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:        const std::vector< uno::Reference< deployment::XPackage >  > & vExtensionList);
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:    std::vector< uno::Reference< deployment::XPackage > > m_vExtensionList;
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:    const std::vector< uno::Reference< deployment::XPackage > > &vExtensionList):
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:    std::vector<std::pair<uno::Reference<deployment::XPackage>, uno::Any > > errors;
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:    typedef std::vector<std::pair<uno::Reference<deployment::XPackage>,
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:                           const std::vector<uno::Reference< deployment::XPackage > > &vExtensionList,
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:    std::vector< dp_gui::UpdateData > * updateData):
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:    for ( std::vector< UpdateDialog::Index* >::iterator i( m_ListboxEntries.begin() ); i != m_ListboxEntries.end(); ++i )
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:    for ( std::vector< UpdateDialog::IgnoredUpdate* >::iterator i( m_ignoredUpdates.begin() ); i != m_ignoredUpdates.end(); ++i )
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:        for ( std::vector< UpdateDialog::IgnoredUpdate* >::iterator i( m_ignoredUpdates.begin() ); i != m_ignoredUpdates.end(); ++i )
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:        for ( std::vector< UpdateDialog::IgnoredUpdate* >::iterator i( m_ignoredUpdates.begin() ); i != m_ignoredUpdates.end(); ++i )
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:        for ( std::vector< UpdateDialog::IgnoredUpdate* >::iterator i( m_ignoredUpdates.begin() ); i != m_ignoredUpdates.end(); ++i )
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:        for (std::vector< UpdateDialog::Index* >::iterator i( m_ListboxEntries.begin() );
desktop/source/deployment/gui/dp_gui_updatedialog.cxx:    typedef ::std::vector<UpdateData>::const_iterator CIT;
desktop/source/deployment/gui/dp_gui_updatedialog.hxx:        const std::vector< css::uno::Reference<
desktop/source/deployment/gui/dp_gui_updatedialog.hxx:        std::vector< dp_gui::UpdateData > * updateData);
desktop/source/deployment/gui/dp_gui_updatedialog.hxx:    std::vector< dp_gui::UpdateData > m_enabledUpdates;
desktop/source/deployment/gui/dp_gui_updatedialog.hxx:    std::vector< UpdateDialog::DisabledUpdate > m_disabledUpdates;
desktop/source/deployment/gui/dp_gui_updatedialog.hxx:    std::vector< UpdateDialog::SpecificError > m_specificErrors;
desktop/source/deployment/gui/dp_gui_updatedialog.hxx:    std::vector< UpdateDialog::IgnoredUpdate* > m_ignoredUpdates;
desktop/source/deployment/gui/dp_gui_updatedialog.hxx:    std::vector< Index* > m_ListboxEntries;
desktop/source/deployment/gui/dp_gui_updatedialog.hxx:    std::vector< dp_gui::UpdateData > & m_updateData;
desktop/source/deployment/gui/dp_gui_updateinstalldialog.cxx:        UpdateInstallDialog & dialog, std::vector< dp_gui::UpdateData > & aVecUpdateData);
desktop/source/deployment/gui/dp_gui_updateinstalldialog.cxx:    std::vector< dp_gui::UpdateData > & m_aVecUpdateData;
desktop/source/deployment/gui/dp_gui_updateinstalldialog.cxx:    std::vector< dp_gui::UpdateData > & aVecUpdateData):
desktop/source/deployment/gui/dp_gui_updateinstalldialog.cxx:    std::vector<dp_gui::UpdateData> & aVecUpdateData,
desktop/source/deployment/gui/dp_gui_updateinstalldialog.cxx:        typedef std::vector<UpdateData>::iterator It;
desktop/source/deployment/gui/dp_gui_updateinstalldialog.cxx:            ::std::vector< ::std::pair<OUString, cssu::Exception> > vecExceptions;
desktop/source/deployment/gui/dp_gui_updateinstalldialog.cxx:                    typedef ::std::vector< ::std::pair<OUString, cssu::Exception > >::const_iterator CIT;
desktop/source/deployment/gui/dp_gui_updateinstalldialog.cxx:    typedef std::vector<UpdateData>::iterator It;
desktop/source/deployment/gui/dp_gui_updateinstalldialog.hxx:    UpdateInstallDialog(vcl::Window * parent, std::vector<UpdateData> & aVecUpdateData,
desktop/source/deployment/inc/dp_update.hxx:    std::vector< css::uno::Reference< css::deployment::XPackage > > const * extensionList,
desktop/source/deployment/inc/dp_update.hxx:    ::std::vector< ::std::pair< css::uno::Reference<
desktop/source/deployment/manager/dp_activepackages.hxx:    typedef ::std::vector< ::std::pair< OUString, Data > > Entries;
desktop/source/deployment/manager/dp_extensionmanager.cxx:    bool operator() (::std::vector<Reference<css::deployment::XPackage> > const & a,
desktop/source/deployment/manager/dp_extensionmanager.cxx:                     ::std::vector<Reference<css::deployment::XPackage> > const & b)
desktop/source/deployment/manager/dp_extensionmanager.cxx:    static OUString getName(::std::vector<Reference<css::deployment::XPackage> > const & a);
desktop/source/deployment/manager/dp_extensionmanager.cxx:OUString CompIdentifiers::getName(::std::vector<Reference<css::deployment::XPackage> > const & a)
desktop/source/deployment/manager/dp_extensionmanager.cxx:    ::std::vector<Reference<css::deployment::XPackage> >::const_iterator it = a.begin();
desktop/source/deployment/manager/dp_extensionmanager.cxx:            ::std::vector<Reference<css::deployment::XPackage> > vec(3);
desktop/source/deployment/manager/dp_extensionmanager.cxx:        ::std::vector< ::std::vector<Reference<css::deployment::XPackage> > >
desktop/source/deployment/manager/dp_extensionmanager.cxx:        ::std::vector< ::std::vector<Reference<css::deployment::XPackage> > >::const_iterator
desktop/source/deployment/manager/dp_extensionmanager.hxx:    std::vector<css::uno::Reference<css::deployment::XPackage> >,
desktop/source/deployment/manager/dp_informationprovider.cxx:    std::vector<std::pair<uno::Reference<deployment::XPackage>, uno::Any > > errors;
desktop/source/deployment/manager/dp_informationprovider.cxx:        std::vector<uno::Reference<deployment::XPackage> > vecExtensions;
desktop/source/deployment/manager/dp_manager.cxx:            ::std::vector<OUString> tempEntries;
desktop/source/deployment/manager/dp_manager.cxx:            ::std::vector<OUString> removedEntries;
desktop/source/deployment/manager/dp_manager.cxx:    ::std::vector< Reference<deployment::XPackage> > packages;
desktop/source/deployment/manager/dp_manager.cxx:    ::std::vector<Reference<deployment::XPackage> > vec;
desktop/source/deployment/misc/dp_descriptioninfoset.cxx:    ::std::vector< OUString> vec;
desktop/source/deployment/misc/dp_descriptioninfoset.cxx:            const ::std::vector< OUString > aFallbacks( getOfficeLanguageTag().getFallbackStrings( false));
desktop/source/deployment/misc/dp_descriptioninfoset.cxx:            for (::std::vector< OUString >::const_iterator it( aFallbacks.begin()); it != aFallbacks.end(); ++it)
desktop/source/deployment/misc/dp_interact.cxx:            std::vector< Reference<task::XInteractionContinuation> > conts {
desktop/source/deployment/misc/dp_update.cxx:        UpdateInfoMap& inout_map, std::vector<std::pair<Reference<deployment::XPackage>, uno::Any> > & out_errors,
desktop/source/deployment/misc/dp_update.cxx:     std::vector<std::pair<Reference<deployment::XPackage>, uno::Any> > & out_errors)
desktop/source/deployment/misc/dp_update.cxx:    std::vector< Reference<deployment::XPackage > > const * extensionList)
desktop/source/deployment/misc/dp_update.cxx:        typedef std::vector<Reference<deployment::XPackage > >::const_iterator CIT;
desktop/source/deployment/misc/dp_update.cxx:    std::vector<Reference<deployment::XPackage > > const * extensionList,
desktop/source/deployment/misc/dp_update.cxx:    std::vector<std::pair< Reference<deployment::XPackage>, uno::Any> > & out_errors)
desktop/source/deployment/misc/dp_update.cxx:        typedef std::vector<Reference<deployment::XPackage > >::const_iterator CIT;
desktop/source/deployment/registry/component/dp_compbackenddb.hxx:        ::std::vector< ::std::pair< OUString, OUString> >singletons;
desktop/source/deployment/registry/component/dp_component.cxx:typedef ::std::vector< ::std::pair<OUString, OUString> > t_stringpairvec;
desktop/source/deployment/registry/component/dp_component.cxx:::std::vector<OUString> getCmdBootstrapVariables()
desktop/source/deployment/registry/component/dp_component.cxx:    ::std::vector<OUString> ret;
desktop/source/deployment/registry/component/dp_component.cxx:            std::vector< css::uno::Reference< css::uno::XInterface > > *
desktop/source/deployment/registry/component/dp_component.cxx:            std::vector< css::uno::Reference< css::uno::XInterface > > const &
desktop/source/deployment/registry/component/dp_component.cxx:    ::std::vector<OUString> args{
desktop/source/deployment/registry/component/dp_component.cxx:    ::std::vector<OUString> bootvars = getCmdBootstrapVariables();
desktop/source/deployment/registry/component/dp_component.cxx:    std::vector< css::uno::Reference< css::uno::XInterface > > * factories,
desktop/source/deployment/registry/component/dp_component.cxx:    std::vector< css::uno::Reference< css::uno::XInterface > > * factories,
desktop/source/deployment/registry/component/dp_component.cxx:    std::vector< css::uno::Reference< css::uno::XInterface > > const &
desktop/source/deployment/registry/component/dp_component.cxx:    std::vector< css::uno::Reference< css::uno::XInterface > >::const_iterator
desktop/source/deployment/registry/component/dp_component.cxx:        std::vector< css::uno::Reference< css::uno::XInterface > > factories;
desktop/source/deployment/registry/dp_backend.cxx:        ::std::vector<OUString> tempEntries;
desktop/source/deployment/registry/dp_backenddb.cxx:    ::std::vector< ::std::pair< OUString, OUString > > const & vecPairs,
desktop/source/deployment/registry/dp_backenddb.cxx:        typedef ::std::vector< ::std::pair< OUString, OUString > >::const_iterator CIT;
desktop/source/deployment/registry/dp_backenddb.cxx:::std::vector< ::std::pair< OUString, OUString > >
desktop/source/deployment/registry/dp_backenddb.cxx:        ::std::vector< ::std::pair< OUString, OUString > > retVector;
desktop/source/deployment/registry/dp_registry.cxx:    ::std::vector< Reference<deployment::XPackageTypeInfo> > m_typesInfos;
desktop/source/deployment/registry/help/dp_help.cxx:        std::vector< OUString >& o_rXhpFileVector );
desktop/source/deployment/registry/help/dp_help.cxx:                        std::vector< OUString > aXhpFileVector;
desktop/source/deployment/registry/help/dp_help.cxx:    std::vector< OUString >& o_rXhpFileVector )
desktop/source/deployment/registry/inc/dp_backenddb.hxx:        ::std::vector< ::std::pair< OUString, OUString > > const & vecPairs,
desktop/source/deployment/registry/inc/dp_backenddb.hxx:    ::std::vector< ::std::pair< OUString, OUString > >
desktop/source/deployment/registry/package/dp_extbackenddb.hxx:        ::std::vector< ::std::pair< OUString, OUString> > items;
desktop/source/deployment/registry/package/dp_extbackenddb.hxx:        typedef ::std::vector<
desktop/source/deployment/registry/package/dp_package.cxx:        typedef ::std::vector< Reference<deployment::XPackage> > t_packagevec;
desktop/source/deployment/registry/package/dp_package.cxx:        ::std::vector<Reference<deployment::XPackage> > getPackagesFromDb(
desktop/source/deployment/registry/package/dp_package.cxx:        ::std::vector< Sequence<beans::PropertyValue> > manifest;
desktop/source/deployment/registry/package/dp_package.cxx:    const ::std::vector< OUString > officeFallbacks( officeLocale.getFallbackStrings( true));
desktop/source/deployment/registry/package/dp_package.cxx:                    const ::std::vector< OUString > descrFallbacks( descrTag.getFallbackStrings( true));
desktop/source/deployment/registry/package/dp_package.cxx:::std::vector<Reference<deployment::XPackage> >
desktop/source/deployment/registry/package/dp_package.cxx:    ::std::vector<Reference<deployment::XPackage> > retVector;
desktop/source/deployment/registry/package/dp_package.cxx:    typedef ::std::vector< ::std::pair<OUString, OUString> >::const_iterator ITC;
desktop/source/lib/init.cxx:static std::vector<beans::PropertyValue> jsonToPropertyValuesVector(const char* pJSON)
desktop/source/lib/init.cxx:    std::vector<beans::PropertyValue> aArguments;
desktop/source/lib/init.cxx:    std::vector<beans::PropertyValue> aPropertyValuesVector(jsonToPropertyValuesVector(pArguments));
desktop/source/lib/init.cxx:    static const std::vector<OUString> aWriterStyles =
desktop/source/lib/lokclipboard.cxx:std::vector<datatransfer::DataFlavor> LOKTransferable::getTransferDataFlavorsAsVector()
desktop/source/lib/lokclipboard.cxx:    std::vector<datatransfer::DataFlavor> aRet;
desktop/source/lib/lokclipboard.cxx:    const std::vector<datatransfer::DataFlavor> aFlavors = getTransferDataFlavorsAsVector();
desktop/source/lib/lokclipboard.hxx:    std::vector<css::datatransfer::DataFlavor> getTransferDataFlavorsAsVector();
desktop/source/migration/migration.cxx:        ::std::vector< MigrationModuleInfo > vModulesInfo = dectectUIChangesForAllModules();
desktop/source/migration/migration.cxx:::std::vector< MigrationModuleInfo > MigrationImpl::dectectUIChangesForAllModules() const
desktop/source/migration/migration.cxx:    ::std::vector< MigrationModuleInfo > vModulesInfo;
desktop/source/migration/migration.cxx:    ::std::vector< MigrationItem > vOldItems;
desktop/source/migration/migration.cxx:    ::std::vector< MigrationItem > vNewItems;
desktop/source/migration/migration.cxx:    ::std::vector< MigrationItem >::iterator it;
desktop/source/migration/migration.cxx:        ::std::vector< MigrationItem >::iterator pFound = ::std::find(vNewItems.begin(), vNewItems.end(), *it);
desktop/source/migration/migration.cxx:                ::std::vector< MigrationItem > vMigrationItems;
desktop/source/migration/migration.cxx:    ::std::vector< MigrationItem >::iterator it;
desktop/source/migration/migration.cxx:void NewVersionUIInfo::init(const ::std::vector< MigrationModuleInfo >& vModulesInfo)
desktop/source/migration/migration_impl.hxx:typedef std::vector< OUString > strings_v;
desktop/source/migration/migration_impl.hxx:typedef std::vector< migration_step > migrations_v;
desktop/source/migration/migration_impl.hxx:typedef std::vector< supported_migration > migrations_available;
desktop/source/migration/migration_impl.hxx:typedef std::unordered_map< OUString, std::vector< MigrationItem >,
desktop/source/migration/migration_impl.hxx:    ::std::vector< OUString > m_vToolbars;
desktop/source/migration/migration_impl.hxx:    void init(const ::std::vector< MigrationModuleInfo >& vModulesInfo);
desktop/source/migration/migration_impl.hxx:    std::vector< css::beans::PropertyValue > m_lCfgManagerSeq;
desktop/source/migration/migration_impl.hxx:    ::std::vector< MigrationModuleInfo > dectectUIChangesForAllModules() const;
desktop/source/migration/services/misc.hxx:    typedef ::std::vector< OUString > TStringVector;
desktop/source/pkgchk/unopkg/unopkg_app.cxx:    ::std::vector<OUString> cmdPackages;
desktop/source/pkgchk/unopkg/unopkg_app.cxx:            ::std::vector<Reference<deployment::XPackage> > vecExtUnaccepted;
desktop/source/pkgchk/unopkg/unopkg_app.cxx:            std::vector<bool> vecUnaccepted;
desktop/source/pkgchk/unopkg/unopkg_app.cxx:            std::vector<Reference<deployment::XPackage> > allExtensions;
desktop/source/pkgchk/unopkg/unopkg_app.cxx:                ::std::vector<Reference<deployment::XPackage> > vec_packages;
desktop/source/pkgchk/unopkg/unopkg_app.cxx:                ::std::vector<Reference<deployment::XPackage> >::iterator i_all_ext =
desktop/source/pkgchk/unopkg/unopkg_app.cxx:                        ::std::vector<Reference<deployment::XPackage> >::const_iterator
desktop/source/pkgchk/unopkg/unopkg_app.cxx:            ::std::vector<Reference<deployment::XPackage> > vecExtUnaccepted;
desktop/source/pkgchk/unopkg/unopkg_app.cxx:                    ::std::vector<Reference<deployment::XPackage> >::const_iterator
desktop/source/pkgchk/unopkg/unopkg_misc.cxx:        ::std::vector<Reference<deployment::XPackage> >vec_bundle;
desktop/source/pkgchk/unopkg/unopkg_misc.cxx:        printf_packages( vec_bundle, ::std::vector<bool>(vec_bundle.size()),
desktop/source/pkgchk/unopkg/unopkg_misc.cxx:    ::std::vector< Reference<deployment::XPackage> > const & allExtensions,
desktop/source/pkgchk/unopkg/unopkg_misc.cxx:    ::std::vector<bool> const & vecUnaccepted,
desktop/source/pkgchk/unopkg/unopkg_misc.cxx:        typedef ::std::vector< Reference<deployment::XPackage> >::const_iterator I_EXT;
desktop/source/pkgchk/unopkg/unopkg_shared.h:    ::std::vector<
desktop/source/pkgchk/unopkg/unopkg_shared.h:    ::std::vector<bool> const & vecUnaccepted,
drawinglayer/source/attribute/sdrlightingattribute3d.cxx:            ::std::vector< Sdr3DLightAttribute >    maLightVector;
drawinglayer/source/attribute/sdrlightingattribute3d.cxx:                const ::std::vector< Sdr3DLightAttribute >& rLightVector)
drawinglayer/source/attribute/sdrlightingattribute3d.cxx:                maLightVector(std::vector< Sdr3DLightAttribute >())
drawinglayer/source/attribute/sdrlightingattribute3d.cxx:            const ::std::vector< Sdr3DLightAttribute >& getLightVector() const { return maLightVector; }
drawinglayer/source/attribute/sdrlightingattribute3d.cxx:            const ::std::vector< Sdr3DLightAttribute >& rLightVector)
drawinglayer/source/attribute/sdrlightingattribute3d.cxx:        const ::std::vector< Sdr3DLightAttribute >& SdrLightingAttribute::getLightVector() const
drawinglayer/source/attribute/sdrlineattribute.cxx:            ::std::vector< double >                 maDotDashArray;     // array of double which defines the dot-dash pattern
drawinglayer/source/attribute/sdrlineattribute.cxx:                const ::std::vector< double >& rDotDashArray,
drawinglayer/source/attribute/sdrlineattribute.cxx:                maDotDashArray(std::vector< double >()),
drawinglayer/source/attribute/sdrlineattribute.cxx:            const ::std::vector< double >& getDotDashArray() const { return maDotDashArray; }
drawinglayer/source/attribute/sdrlineattribute.cxx:            const ::std::vector< double >& rDotDashArray,
drawinglayer/source/attribute/sdrlineattribute.cxx:        const ::std::vector< double >& SdrLineAttribute::getDotDashArray() const
drawinglayer/source/attribute/strokeattribute.cxx:            ::std::vector< double >                     maDotDashArray;         // array of double which defines the dot-dash pattern
drawinglayer/source/attribute/strokeattribute.cxx:                const ::std::vector< double >& rDotDashArray,
drawinglayer/source/attribute/strokeattribute.cxx:            :   maDotDashArray(std::vector< double >()),
drawinglayer/source/attribute/strokeattribute.cxx:            const ::std::vector< double >& getDotDashArray() const { return maDotDashArray; }
drawinglayer/source/attribute/strokeattribute.cxx:            const ::std::vector< double >& rDotDashArray,
drawinglayer/source/attribute/strokeattribute.cxx:        const ::std::vector< double >& StrokeAttribute::getDotDashArray() const
drawinglayer/source/primitive2d/animatedprimitive2d.cxx:            const std::vector< basegfx::B2DHomMatrix >& rmMatrixStack,
drawinglayer/source/primitive2d/animatedprimitive2d.cxx:                std::vector< basegfx::tools::B2DHomMatrixBufferedDecompose >::const_iterator aMatA(maMatrixStack.begin() + nIndA);
drawinglayer/source/primitive2d/animatedprimitive2d.cxx:                    std::vector< basegfx::tools::B2DHomMatrixBufferedDecompose >::const_iterator aMatB(maMatrixStack.begin() + nIndB);
drawinglayer/source/primitive2d/fillgradientprimitive2d.cxx:            std::vector< drawinglayer::texture::B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/primitive2d/fillgradientprimitive2d.cxx:            const std::vector< drawinglayer::texture::B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/primitive2d/fillgradientprimitive2d.cxx:            const std::vector< drawinglayer::texture::B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/primitive2d/fillgradientprimitive2d.cxx:            std::vector< drawinglayer::texture::B2DHomMatrixAndBColor > aEntries;
drawinglayer/source/primitive2d/fillgraphicprimitive2d.cxx:                            ::std::vector< basegfx::B2DHomMatrix > aMatrices;
drawinglayer/source/primitive2d/fillhatchprimitive2d.cxx:                ::std::vector< basegfx::B2DHomMatrix > aMatrices;
drawinglayer/source/primitive2d/graphicprimitivehelper2d.cxx:        ::std::vector< animationStep >          maSteps;
drawinglayer/source/primitive2d/gridprimitive2d.cxx:                    std::vector< basegfx::B2DPoint > aPositionsPoint;
drawinglayer/source/primitive2d/gridprimitive2d.cxx:                    std::vector< basegfx::B2DPoint > aPositionsCross;
drawinglayer/source/primitive2d/helplineprimitive2d.cxx:            std::vector< BasePrimitive2D* > aTempPrimitiveTarget;
drawinglayer/source/primitive2d/markerarrayprimitive2d.cxx:            const std::vector< basegfx::B2DPoint >& rPositions = getPositions();
drawinglayer/source/primitive2d/markerarrayprimitive2d.cxx:            const std::vector< basegfx::B2DPoint >& rPositions,
drawinglayer/source/primitive2d/markerarrayprimitive2d.cxx:                for(std::vector< basegfx::B2DPoint >::const_iterator aIter(getPositions().begin()), aEnd(getPositions().end()); aIter != aEnd; ++aIter)
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:        std::vector< PropertyHolder* >          maPropertyHolders;
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:        std::vector< drawinglayer::primitive2d::BasePrimitive2D* > aTargets;
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:        std::vector< TargetHolder* >          maTargetHolders;
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:        const std::vector< basegfx::B2DPoint >& rPositions,
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:                std::vector< basegfx::B2DPoint > aPositions(rPositions);
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:                    ::std::vector< double > fDotDashArray;
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:        const ::std::vector< double >& rDXArray,
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:                std::vector< drawinglayer::primitive2d::BasePrimitive2D* > aTargetVector;
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:                    std::vector< basegfx::B2DPoint > aPositions;
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:                        std::vector< basegfx::B2DPoint > aPositions;
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:                        const std::vector< double > aDXArray{};
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:                        std::vector< double > aDXArray;
drawinglayer/source/primitive2d/metafileprimitive2d.cxx:                        ::std::vector< double > aTextArray(
drawinglayer/source/primitive2d/patternfillprimitive2d.cxx:                        ::std::vector< basegfx::B2DHomMatrix > aMatrices;
drawinglayer/source/primitive2d/pointarrayprimitive2d.cxx:            const std::vector< basegfx::B2DPoint >& rPositions,
drawinglayer/source/primitive2d/pointarrayprimitive2d.cxx:                for(std::vector< basegfx::B2DPoint >::const_iterator aIter(getPositions().begin()), aEnd(getPositions().end()); aIter != aEnd; ++aIter)
drawinglayer/source/primitive2d/polygonprimitive2d.cxx:                ::std::vector< double > aDash;
drawinglayer/source/primitive2d/textbreakuphelper.cxx:                ::std::vector< double > aNewDXArray;
drawinglayer/source/primitive2d/textbreakuphelper.cxx:                    aNewDXArray = ::std::vector< double >(
drawinglayer/source/primitive2d/textdecoratedprimitive2d.cxx:            std::vector< Primitive2DReference >& rTarget,
drawinglayer/source/primitive2d/textdecoratedprimitive2d.cxx:            const ::std::vector< double >& rDXArray,
drawinglayer/source/primitive2d/textdecoratedprimitive2d.cxx:            std::vector< Primitive2DReference > aNewPrimitives;
drawinglayer/source/primitive2d/textdecoratedprimitive2d.cxx:            const ::std::vector< double >& rDXArray,
drawinglayer/source/primitive2d/textlayoutdevice.cxx:            const ::std::vector< double >& rDXArray) const
drawinglayer/source/primitive2d/textlayoutdevice.cxx:                std::vector< long > aIntegerDXArray(nDXArrayCount);
drawinglayer/source/primitive2d/textlayoutdevice.cxx:        ::std::vector< double > TextLayouterDevice::getTextArray(
drawinglayer/source/primitive2d/textlayoutdevice.cxx:            ::std::vector< double > aRetval;
drawinglayer/source/primitive2d/textlayoutdevice.cxx:                ::std::vector<long> aArray(nTextLength);
drawinglayer/source/primitive2d/textlineprimitive2d.cxx:                    ::std::vector< double > aDoubleArray;
drawinglayer/source/primitive2d/textprimitive2d.cxx:                        ::std::vector< double > aScaledDXArray = getDXArray();
drawinglayer/source/primitive2d/textprimitive2d.cxx:            const ::std::vector< double >& rDXArray,
drawinglayer/source/primitive2d/textstrikeoutprimitive2d.cxx:            std::vector<double> aDXArray(nStrikeCharCount);
drawinglayer/source/primitive3d/hatchtextureprimitive3d.cxx:                std::vector< Primitive3DReference > aDestination;
drawinglayer/source/primitive3d/hatchtextureprimitive3d.cxx:                                            ::std::vector< basegfx::B2DHomMatrix > aMatrices;
drawinglayer/source/primitive3d/polygontubeprimitive3d.cxx:                std::vector< BasePrimitive3D* > aResultVector;
drawinglayer/source/primitive3d/polygontubeprimitive3d.cxx:            std::vector< BasePrimitive3D* > aResultVector;
drawinglayer/source/primitive3d/sdrcubeprimitive3d.cxx:            ::std::vector< basegfx::B3DPolyPolygon > a3DPolyPolygonVector;
drawinglayer/source/primitive3d/sdrdecompositiontools3d.cxx:        basegfx::B3DRange getRangeFrom3DGeometry(::std::vector< basegfx::B3DPolyPolygon >& rFill)
drawinglayer/source/primitive3d/sdrdecompositiontools3d.cxx:        void applyNormalsKindSphereTo3DGeometry(::std::vector< basegfx::B3DPolyPolygon >& rFill, const basegfx::B3DRange& rRange)
drawinglayer/source/primitive3d/sdrdecompositiontools3d.cxx:        void applyNormalsKindFlatTo3DGeometry(::std::vector< basegfx::B3DPolyPolygon >& rFill)
drawinglayer/source/primitive3d/sdrdecompositiontools3d.cxx:        void applyNormalsInvertTo3DGeometry(::std::vector< basegfx::B3DPolyPolygon >& rFill)
drawinglayer/source/primitive3d/sdrdecompositiontools3d.cxx:            ::std::vector< basegfx::B3DPolyPolygon >& rFill,
drawinglayer/source/primitive3d/sdrdecompositiontools3d.cxx:            const ::std::vector< basegfx::B3DPolyPolygon >& r3DPolyPolygonVector,
drawinglayer/source/primitive3d/sdrdecompositiontools3d.cxx:            const ::std::vector< basegfx::B3DPolyPolygon >& r3DPolyPolygonVector,
drawinglayer/source/primitive3d/sdrextrudelathetools3d.cxx:            ::std::vector< basegfx::B3DPolyPolygon >& rFill,
drawinglayer/source/primitive3d/sdrextrudelathetools3d.cxx:                ::std::vector<double> aTexHeightArray;
drawinglayer/source/primitive3d/sdrextrudeprimitive3d.cxx:                ::std::vector< basegfx::B3DPolyPolygon > aFill;
drawinglayer/source/primitive3d/sdrlatheprimitive3d.cxx:                ::std::vector< basegfx::B3DPolyPolygon > aFill;
drawinglayer/source/primitive3d/sdrpolypolygonprimitive3d.cxx:                ::std::vector< basegfx::B3DPolyPolygon > aFill;
drawinglayer/source/primitive3d/sdrsphereprimitive3d.cxx:            ::std::vector< basegfx::B3DPolyPolygon > a3DPolyPolygonVector;
drawinglayer/source/processor2d/hittestprocessor2d.cxx:                        const std::vector< basegfx::B2DPoint >& rPositions = rPointArrayCandidate.getPositions();
drawinglayer/source/processor2d/vclhelperbufferdevice.cxx:    typedef ::std::vector< VclPtr<VirtualDevice> > aBuffers;
drawinglayer/source/processor2d/vclmetafileprocessor2d.cxx:                        std::vector< vcl::PDFExtOutDevBookmarkEntry >& rBookmarks = mpPDFExtOutDevData->GetBookmarks();
drawinglayer/source/processor2d/vclpixelprocessor2d.cxx:                    std::vector<double> aPattern =
drawinglayer/source/processor2d/vclpixelprocessor2d.cxx:                        std::vector<double>::const_iterator it = aPattern.begin(), itEnd = aPattern.end();
drawinglayer/source/processor2d/vclpixelprocessor2d.cxx:                        std::vector<double>::const_iterator it = aPattern.begin(), itEnd = aPattern.end();
drawinglayer/source/processor2d/vclprocessor2d.cxx:                    ::std::vector< long > aTransformedDXArray;
drawinglayer/source/processor2d/vclprocessor2d.cxx:                        for(::std::vector< double >::const_iterator aStart(rTextCandidate.getDXArray().begin());
drawinglayer/source/processor2d/vclprocessor2d.cxx:            const std::vector< basegfx::B2DPoint >& rPositions = rMarkArrayCandidate.getPositions();
drawinglayer/source/processor2d/vclprocessor2d.cxx:                    for(std::vector< basegfx::B2DPoint >::const_iterator aIter(rPositions.begin()); aIter != rPositions.end(); ++aIter)
drawinglayer/source/processor2d/vclprocessor2d.cxx:            const std::vector< basegfx::B2DPoint >& rPositions = rPointArrayCandidate.getPositions();
drawinglayer/source/processor2d/vclprocessor2d.cxx:            for(std::vector< basegfx::B2DPoint >::const_iterator aIter(rPositions.begin()); aIter != rPositions.end(); ++aIter)
drawinglayer/source/processor3d/zbufferprocessor3d.cxx:                        const_cast< ZBufferProcessor3D* >(this)->mpRasterPrimitive3Ds = new std::vector< RasterPrimitive3D >;
drawinglayer/source/processor3d/zbufferprocessor3d.cxx:                        const_cast< ZBufferProcessor3D* >(this)->mpRasterPrimitive3Ds = new std::vector< RasterPrimitive3D >;
drawinglayer/source/texture/texture.cxx:            std::vector< B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/texture/texture.cxx:            std::vector< B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/texture/texture.cxx:            std::vector< B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/texture/texture.cxx:            std::vector< B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/texture/texture.cxx:            std::vector< B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/texture/texture.cxx:            std::vector< B2DHomMatrixAndBColor >& rEntries,
drawinglayer/source/texture/texture.cxx:        void GeoTexSvxHatch::appendTransformations(::std::vector< basegfx::B2DHomMatrix >& rMatrices)
drawinglayer/source/texture/texture.cxx:        void GeoTexSvxTiled::appendTransformations(::std::vector< basegfx::B2DHomMatrix >& rMatrices)
dtrans/source/win32/dtobj/FetcList.hxx:    typedef std::vector< CFormatEtc > FormatEtcMap_t;
dtrans/source/win32/dtobj/FmtFilter.cxx:typedef std::vector<std::wstring> FileList_t;
dtrans/source/win32/ftransl/ftransl.cxx:static const std::vector< FormatEntry > g_TranslTable {
dtrans/source/win32/misc/ImplHelper.cxx:        std::vector< sal_Unicode > lpwchBuff(len);
editeng/qa/lookuptree/lookuptree_test.cxx:    std::vector<OUString> suggestions;
editeng/qa/unit/core-test.cxx:    std::vector<const SfxPoolItem*>::const_iterator it = rSecAttr.maAttributes.begin(), itEnd = rSecAttr.maAttributes.end();
editeng/qa/unit/core-test.cxx:    std::vector<const SfxPoolItem*>::const_iterator it = rSecAttr.maAttributes.begin(), itEnd = rSecAttr.maAttributes.end();
editeng/qa/unit/core-test.cxx:        std::vector<editeng::Section> aAttrs;
editeng/qa/unit/core-test.cxx:        std::vector<editeng::Section> aAttrs;
editeng/qa/unit/core-test.cxx:        std::vector<editeng::Section> aAttrs;
editeng/source/accessibility/AccessibleStaticTextBase.cxx:    typedef ::std::vector< beans::PropertyValue > PropertyValueVector;
editeng/source/editeng/editdoc.hxx:    typedef std::vector<std::unique_ptr<EditCharAttrib> > CharAttribsType;
editeng/source/editeng/editdoc.hxx:typedef std::vector<Color> SvxColorList;
editeng/source/editeng/editdoc.hxx:    typedef std::vector<const SfxPoolItem*> DummyItemList;
editeng/source/editeng/editdoc.hxx:    typedef std::vector<std::unique_ptr<EditCharAttrib> > AttribsType;
editeng/source/editeng/editdoc.hxx:    ::std::vector< sal_Int32 > lineBreaksList;
editeng/source/editeng/editdoc.hxx:    typedef std::vector<std::unique_ptr<TextPortion> > PortionsType;
editeng/source/editeng/editdoc.hxx:    typedef std::vector<long> CharPosArrayType;
editeng/source/editeng/editdoc.hxx:    typedef std::vector<std::unique_ptr<EditLine> > LinesType;
editeng/source/editeng/editdoc.hxx:    std::vector<std::unique_ptr<ParaPortion>> maPortions;
editeng/source/editeng/editdoc.hxx:    std::vector<std::unique_ptr<ContentNode> > maContents;
editeng/source/editeng/editeng.cxx:void EditEngine::GetCharAttribs( sal_Int32 nPara, std::vector<EECharAttrib>& rLst ) const
editeng/source/editeng/editeng.cxx:void EditEngine::GetPortions( sal_Int32 nPara, std::vector<sal_Int32>& rList )
editeng/source/editeng/editeng.cxx:void EditEngine::GetAllMisspellRanges( std::vector<editeng::MisspellRanges>& rRanges ) const
editeng/source/editeng/editeng.cxx:void EditEngine::SetAllMisspellRanges( const std::vector<editeng::MisspellRanges>& rRanges )
editeng/source/editeng/editobj.cxx:void EditTextObject::GetCharAttribs( sal_Int32 nPara, std::vector<EECharAttrib>& rLst ) const
editeng/source/editeng/editobj.cxx:void EditTextObject::GetAllSections( std::vector<editeng::Section>& rAttrs ) const
editeng/source/editeng/editobj.cxx:std::vector<svl::SharedString> EditTextObject::GetSharedStrings() const
editeng/source/editeng/editobj.cxx:std::vector<svl::SharedString> EditTextObjectImpl::GetSharedStrings() const
editeng/source/editeng/editobj.cxx:    std::vector<svl::SharedString> aSSs;
editeng/source/editeng/editobj.cxx:void EditTextObjectImpl::GetCharAttribs( sal_Int32 nPara, std::vector<EECharAttrib>& rLst ) const
editeng/source/editeng/editobj.cxx:void EditTextObjectImpl::GetAllSections( std::vector<editeng::Section>& rAttrs ) const
editeng/source/editeng/editobj.cxx:    typedef std::vector<size_t> SectionBordersType;
editeng/source/editeng/editobj.cxx:    typedef std::vector<SectionBordersType> ParagraphsType;
editeng/source/editeng/editobj.cxx:    std::vector<editeng::Section> aAttrs;
editeng/source/editeng/editobj.cxx:    std::vector<editeng::Section>::iterator itAttr = aAttrs.begin();
editeng/source/editeng/editobj.cxx:            std::vector<editeng::Section>::iterator itCurAttr = itAttr;
editeng/source/editeng/editobj2.hxx:    typedef std::vector<std::unique_ptr<XParaPortion> > ListType;
editeng/source/editeng/editobj2.hxx:    typedef std::vector<std::unique_ptr<XEditAttribute> > XEditAttributesType;
editeng/source/editeng/editobj2.hxx:    typedef std::vector<std::unique_ptr<ContentInfo> > ContentInfosType;
editeng/source/editeng/editobj2.hxx:    std::vector<svl::SharedString> GetSharedStrings() const;
editeng/source/editeng/editobj2.hxx:    void GetCharAttribs( sal_Int32 nPara, std::vector<EECharAttrib>& rLst ) const;
editeng/source/editeng/editobj2.hxx:    void GetAllSections( std::vector<editeng::Section>& rAttrs ) const;
editeng/source/editeng/editundo.hxx:    typedef std::vector<std::unique_ptr<ContentAttribsInfo> > InfoArrayType;
editeng/source/editeng/editview.cxx:void EditView::GetSelectionRectangles(std::vector<Rectangle>& rLogicRects) const
editeng/source/editeng/editview.cxx:            std::vector<sal_Int32> aPortions;
editeng/source/editeng/edtspell.cxx:void WrongList::SetRanges( const std::vector<editeng::MisspellRange>& rRanges )
editeng/source/editeng/edtspell.hxx:    std::vector<editeng::MisspellRange> maRanges;
editeng/source/editeng/edtspell.hxx:    typedef std::vector<editeng::MisspellRange>::iterator iterator;
editeng/source/editeng/edtspell.hxx:    typedef std::vector<editeng::MisspellRange>::const_iterator const_iterator;
editeng/source/editeng/edtspell.hxx:    const std::vector<editeng::MisspellRange>& GetRanges() const { return maRanges;}
editeng/source/editeng/edtspell.hxx:    void SetRanges( const std::vector<editeng::MisspellRange>& rRanges );
editeng/source/editeng/impedit.cxx:                std::vector<Rectangle> aRectangles;
editeng/source/editeng/impedit.cxx:                std::vector<OString> v;
editeng/source/editeng/impedit.cxx:void ImpEditView::GetSelectionRectangles(std::vector<Rectangle>& rLogicRects)
editeng/source/editeng/impedit.hxx:typedef std::vector<EditSelection>  SpellContentSelections;
editeng/source/editeng/impedit.hxx:    void GetSelectionRectangles(std::vector<Rectangle>& rLogicRects);
editeng/source/editeng/impedit.hxx:    std::vector<EENotify> aNotifyCache;
editeng/source/editeng/impedit.hxx:    std::vector<std::unique_ptr<DeletedNodeInfo> > aDeletedNodes;
editeng/source/editeng/impedit.hxx:    void                GetCharAttribs( sal_Int32 nPara, std::vector<EECharAttrib>& rLst ) const;
editeng/source/editeng/impedit.hxx:    void                ImpFindKashidas( ContentNode* pNode, sal_Int32 nStart, sal_Int32 nEnd, std::vector<sal_Int32>& rArray );
editeng/source/editeng/impedit.hxx:                            std::vector<SvxFontItem*>& rFontTable, SvxColorList& rColorList );
editeng/source/editeng/impedit.hxx:                            std::vector<SvxFontItem*>& rFontTable, SvxColorList& rColorList );
editeng/source/editeng/impedit.hxx:    void GetAllMisspellRanges( std::vector<editeng::MisspellRanges>& rRanges ) const;
editeng/source/editeng/impedit.hxx:    void SetAllMisspellRanges( const std::vector<editeng::MisspellRanges>& rRanges );
editeng/source/editeng/impedit3.cxx:    std::vector<sal_Int32> aPositions;
editeng/source/editeng/impedit3.cxx:    for ( std::vector<sal_Int32>::const_iterator it(aPositions.begin()); it != aPositions.end(); ++it )
editeng/source/editeng/impedit3.cxx:void ImpEditEngine::ImpFindKashidas( ContentNode* pNode, sal_Int32 nStart, sal_Int32 nEnd, std::vector<sal_Int32>& rArray )
editeng/source/editeng/impedit3.cxx:                    ::std::vector< sal_Int32 >::iterator itSubLines;
editeng/source/editeng/impedit3.cxx:                                        ::std::vector< sal_Int32 >::iterator curIt = itSubLines;
editeng/source/editeng/impedit3.cxx:                                                        std::vector< vcl::PDFExtOutDevBookmarkEntry >& rBookmarks = pPDFExtOutDevData->GetBookmarks();
editeng/source/editeng/impedit3.cxx:    std::vector<TextPortion*> aCompressedPortions;
editeng/source/editeng/impedit4.cxx:                        std::vector<SvxFontItem*>& rFontTable, SvxColorList& rColorList )
editeng/source/editeng/impedit4.cxx:    std::vector<SvxFontItem*> aFontTable;
editeng/source/editeng/impedit4.cxx:    std::vector<SvxFontItem*>::iterator it;
editeng/source/editeng/impedit4.cxx:                            std::vector<SvxFontItem*>& rFontTable, SvxColorList& rColorList )
editeng/source/editeng/impedit4.cxx:void ImpEditEngine::GetAllMisspellRanges( std::vector<editeng::MisspellRanges>& rRanges ) const
editeng/source/editeng/impedit4.cxx:    std::vector<editeng::MisspellRanges> aRanges;
editeng/source/editeng/impedit4.cxx:void ImpEditEngine::SetAllMisspellRanges( const std::vector<editeng::MisspellRanges>& rRanges )
editeng/source/editeng/impedit4.cxx:    std::vector<editeng::MisspellRanges>::const_iterator it = rRanges.begin(), itEnd = rRanges.end();
editeng/source/editeng/impedit4.cxx:        std::vector<sal_Int32> aPortions;
editeng/source/editeng/impedit4.cxx:        std::vector<sal_Int32> aPortions;
editeng/source/editeng/impedit4.cxx:        std::vector< eeTransliterationChgData >   aChanges;
editeng/source/editeng/impedit5.cxx:void ImpEditEngine::GetCharAttribs( sal_Int32 nPara, std::vector<EECharAttrib>& rLst ) const
editeng/source/editeng/misspellrange.cxx:MisspellRanges::MisspellRanges(sal_Int32 nParagraph, const std::vector<MisspellRange>& rRanges) :
editeng/source/lookuptree/Trie.cxx:    std::vector<TrieNode*>  mChildren;
editeng/source/lookuptree/Trie.cxx:    void      collectSuggestions(const OUString& sPath, std::vector<OUString>& rSuggestionList);
editeng/source/lookuptree/Trie.cxx:    std::vector<OUString> entries;
editeng/source/misc/svxacorr.cxx:void SvxAutoCorrect::MakeCombinedChanges( std::vector<SvxAutocorrWord>& aNewEntries,
editeng/source/misc/svxacorr.cxx:                                              std::vector<SvxAutocorrWord>& aDeleteEntries,
editeng/source/misc/svxacorr.cxx:        ::std::vector< OUString > vecFallBackStrings = rLanguageTag.getFallbackStrings(false);
editeng/source/misc/svxacorr.cxx:bool SvxAutoCorrectLanguageLists::MakeCombinedChanges( std::vector<SvxAutocorrWord>& aNewEntries, std::vector<SvxAutocorrWord>& aDeleteEntries )
editeng/source/misc/txtrange.cxx:    std::vector<bool> aBoolArr;
editeng/source/outliner/outleeng.hxx:typedef std::vector<EENotify> NotifyList;
editeng/source/outliner/outlvw.cxx:void OutlinerView::CreateSelectionList (std::vector<Paragraph*> &aSelList)
editeng/source/outliner/outlvw.cxx:void OutlinerView::GetSelectionRectangles(std::vector<Rectangle>& rLogicRects) const
editeng/source/outliner/paralist.cxx:    std::vector<Paragraph*>::iterator iter;
editeng/source/outliner/paralist.cxx:        std::vector<Paragraph*> aParas;
editeng/source/outliner/paralist.cxx:        std::vector<Paragraph*>::iterator iterBeg = maEntries.begin() + nStart;
editeng/source/outliner/paralist.cxx:        std::vector<Paragraph*>::iterator iterEnd = iterBeg + _nCount;
editeng/source/outliner/paralist.cxx:        std::vector<Paragraph*>::iterator iterIns = maEntries.begin() + nDest;
editeng/source/outliner/paralist.cxx:    std::vector<Paragraph*>::const_iterator iter;
editeng/source/outliner/paralist.hxx:    std::vector<Paragraph*> maEntries;
editeng/source/uno/unoedhlp.cxx:    std::vector<EECharAttrib> aCharAttribs, aTempCharAttribs;
editeng/source/uno/unoedhlp.cxx:    for(std::vector<EECharAttrib>::iterator i = aCharAttribs.begin(); i < aCharAttribs.end(); ++i)
editeng/source/uno/unoedhlp.cxx:    for(std::vector<EECharAttrib>::iterator i = aCharAttribs.begin(); i < aCharAttribs.end(); ++i)
editeng/source/uno/unoedprx.cxx:void SvxAccessibleTextAdapter::GetPortions( sal_Int32 nPara, std::vector<sal_Int32>& rList ) const
editeng/source/uno/unofored.cxx:void SvxEditEngineForwarder::GetPortions( sal_Int32 nPara, std::vector<sal_Int32>& rList ) const
editeng/source/uno/unofored.cxx:    std::vector<EECharAttrib> aAttribs;
editeng/source/uno/unofored.cxx:        for(std::vector<EECharAttrib>::const_iterator i = aAttribs.begin(); i < aAttribs.end(); ++i)
editeng/source/uno/unoforou.cxx:void SvxOutlinerForwarder::GetPortions( sal_Int32 nPara, std::vector<sal_Int32>& rList ) const
editeng/source/uno/unoipset.cxx:using ::std::vector;
editeng/source/uno/unotext.cxx:void SvxDummyTextSource::GetPortions( sal_Int32, std::vector<sal_Int32>& ) const
editeng/source/uno/unotext2.cxx:        std::vector<sal_Int32> aPortions;
editeng/source/uno/unotext2.cxx:        mpPortions = new std::vector<sal_Int32>;
embeddedobj/source/msole/olecomponent.cxx:typedef ::std::vector< FORMATETC* > FormatEtcList;
extensions/source/abpilot/typeselectionpage.cxx:        for ( ::std::vector< ButtonItem >::const_iterator loop = m_aAllTypes.begin();
extensions/source/abpilot/typeselectionpage.cxx:        for ( ::std::vector< ButtonItem >::iterator loop = m_aAllTypes.begin();
extensions/source/abpilot/typeselectionpage.cxx:        for ( ::std::vector< ButtonItem >::const_iterator loop = m_aAllTypes.begin();
extensions/source/abpilot/typeselectionpage.cxx:        for ( ::std::vector< ButtonItem >::const_iterator loop = m_aAllTypes.begin();
extensions/source/abpilot/typeselectionpage.cxx:        for ( ::std::vector< ButtonItem >::const_iterator loop = m_aAllTypes.begin();
extensions/source/abpilot/typeselectionpage.hxx:        ::std::vector< ButtonItem > m_aAllTypes;
extensions/source/bibliography/bibconfig.hxx:typedef std::vector<std::unique_ptr<Mapping> > MappingArray;
extensions/source/bibliography/framectr.hxx:typedef std::vector<std::unique_ptr<BibStatusDispatch> > BibStatusDispatchArr;
extensions/source/bibliography/general.cxx:    std::vector<vcl::Window*> aChildren;
extensions/source/bibliography/general.cxx:    OUString& rErrorString, const OString& sHelpId, sal_uInt16 nIndexInFTArray, std::vector<vcl::Window*> &rChildren)
extensions/source/bibliography/general.cxx:        std::vector<vcl::Window*>& rChildren)
extensions/source/bibliography/general.cxx:    typedef std::vector< sal_Int16 >    sal_Int16_vector;
extensions/source/bibliography/general.hxx:                                            sal_Int16& rIndex, std::vector<vcl::Window*>& rChildren );
extensions/source/bibliography/general.hxx:                                            const OString& sHelpId, sal_uInt16 nIndexInFTArray, std::vector<vcl::Window*>& rChildren );
extensions/source/bibliography/toolbar.hxx:typedef std::vector< css::uno::Reference< css::frame::XStatusListener> > BibToolBarListenerArr;
extensions/source/dbpilots/dbptypes.hxx:    typedef std::vector<OUString> StringArray;
extensions/source/dbpilots/gridwizard.cxx:        std::vector< OUString > aColumnServiceNames;  // service names to be used with the XGridColumnFactory
extensions/source/dbpilots/gridwizard.cxx:        std::vector< OUString > aColumnLabelPostfixes;    // postfixes to append to the column labels
extensions/source/dbpilots/gridwizard.cxx:        std::vector< OUString > aFormFieldNames;      // data field names
extensions/source/dbpilots/gridwizard.cxx:            std::vector< OUString >::const_iterator pColumnServiceName = aColumnServiceNames.begin();
extensions/source/dbpilots/gridwizard.cxx:            std::vector< OUString >::const_iterator pColumnLabelPostfix = aColumnLabelPostfixes.begin();
extensions/source/dbpilots/gridwizard.cxx:            std::vector< OUString >::const_iterator pFormFieldName = aFormFieldNames.begin();
extensions/source/dbpilots/gridwizard.cxx:            std::vector< OUString >::const_iterator pColumnServiceNameEnd = aColumnServiceNames.end();
extensions/source/propctrlr/browserlistbox.hxx:    typedef ::std::vector< ListBoxLine > ListBoxLines;
extensions/source/propctrlr/buttonnavigationhandler.cxx:        ::std::vector< Property > aProperties;
extensions/source/propctrlr/cellbindinghandler.cxx:        ::std::vector< PropertyId > aDependentProperties;
extensions/source/propctrlr/cellbindinghandler.cxx:        for ( ::std::vector< PropertyId >::const_iterator loopAffected = aDependentProperties.begin();
extensions/source/propctrlr/cellbindinghandler.cxx:        ::std::vector< Property > aProperties;
extensions/source/propctrlr/editpropertyhandler.cxx:        ::std::vector< Property > aProperties;
extensions/source/propctrlr/editpropertyhandler.cxx:        ::std::vector< OUString > aSuperseded;
extensions/source/propctrlr/editpropertyhandler.cxx:        ::std::vector< OUString > aInterestingActuatingProps;
extensions/source/propctrlr/eformshelper.cxx:    void EFormsHelper::getFormModelNames( ::std::vector< OUString >& /* [out] */ _rModelNames ) const
extensions/source/propctrlr/eformshelper.cxx:    void EFormsHelper::getBindingNames( const OUString& _rModelName, ::std::vector< OUString >& /* [out] */ _rBindingNames ) const
extensions/source/propctrlr/eformshelper.cxx:                ::std::vector< OUString > aModelNames;
extensions/source/propctrlr/eformshelper.cxx:    void EFormsHelper::getAllElementUINames( const ModelElementType _eType, ::std::vector< OUString >& /* [out] */ _rElementNames, bool _bPrepentEmptyEntry )
extensions/source/propctrlr/eformshelper.cxx:            ::std::vector< OUString > aModels;
extensions/source/propctrlr/eformshelper.cxx:            for ( ::std::vector< OUString >::const_iterator pModelName = aModels.begin();
extensions/source/propctrlr/eformshelper.hxx:        void    getFormModelNames( ::std::vector< OUString >& /* [out] */ _rModelNames ) const;
extensions/source/propctrlr/eformshelper.hxx:        void    getBindingNames( const OUString& _rModelName, ::std::vector< OUString >& /* [out] */ _rBindingNames ) const;
extensions/source/propctrlr/eformshelper.hxx:                    ::std::vector< OUString >& /* [out] */ _rElementNames,
extensions/source/propctrlr/eformspropertyhandler.cxx:        ::std::vector< Property > aProperties;
extensions/source/propctrlr/eformspropertyhandler.cxx:        ::std::vector< OUString > aInterestedInActuations( 2 );
extensions/source/propctrlr/eformspropertyhandler.cxx:        ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/enumrepresentation.hxx:        virtual ::std::vector< OUString > SAL_CALL getDescriptions(
extensions/source/propctrlr/eventhandler.cxx:                std::vector< Type > aListeners;
extensions/source/propctrlr/eventhandler.cxx:    void EventHandler::impl_getComponentListenerTypes_nothrow( std::vector< Type >& _out_rTypes ) const
extensions/source/propctrlr/eventhandler.hxx:                    std::vector< css::uno::Type >& _out_rTypes
extensions/source/propctrlr/formcomponenthandler.cxx:            ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/formcomponenthandler.cxx:            ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/formcomponenthandler.cxx:        ::std::vector< Property > aProperties;
extensions/source/propctrlr/formcomponenthandler.cxx:        ::std::vector< OUString > aInterestingProperties;
extensions/source/propctrlr/formcomponenthandler.cxx:            ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/formcomponenthandler.cxx:            ::std::vector< OUString > aEnumValues = m_pInfoService->getPropertyEnumRepresentations( nPropId );
extensions/source/propctrlr/formcomponenthandler.cxx:            ::std::vector< OUString >::const_iterator pStart = aEnumValues.begin();
extensions/source/propctrlr/formcomponenthandler.cxx:            ::std::vector< OUString >::const_iterator pEnd = aEnumValues.end();
extensions/source/propctrlr/formcomponenthandler.cxx:            ::std::vector< OUString > aListEntries( pEnd - pStart );
extensions/source/propctrlr/formcomponenthandler.cxx:                ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/formcomponenthandler.cxx:                ::std::vector< OUString > aFieldNames;
extensions/source/propctrlr/formcomponenthandler.cxx:        ::std::vector< PropertyId > aDependentProperties;
extensions/source/propctrlr/formcomponenthandler.cxx:        for ( ::std::vector< PropertyId >::const_iterator loopAffected = aDependentProperties.begin();
extensions/source/propctrlr/formcomponenthandler.cxx:    void FormComponentPropertyHandler::impl_initFieldList_nothrow( ::std::vector< OUString >& _rFieldNames ) const
extensions/source/propctrlr/formcomponenthandler.cxx:                ::std::vector< OUString > aNames;
extensions/source/propctrlr/formcomponenthandler.cxx:    void FormComponentPropertyHandler::impl_fillTableNames_throw( ::std::vector< OUString >& _out_rNames ) const
extensions/source/propctrlr/formcomponenthandler.cxx:    void FormComponentPropertyHandler::impl_fillQueryNames_throw( ::std::vector< OUString >& _out_rNames ) const
extensions/source/propctrlr/formcomponenthandler.cxx:    void FormComponentPropertyHandler::impl_fillQueryNames_throw( const Reference< XNameAccess >& _xQueryNames,::std::vector< OUString >& _out_rNames,const OUString& _sName ) const
extensions/source/propctrlr/formcomponenthandler.cxx:            ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/formcomponenthandler.hxx:        void impl_initFieldList_nothrow( ::std::vector< OUString >& rFieldNames ) const;
extensions/source/propctrlr/formcomponenthandler.hxx:        void impl_fillTableNames_throw( ::std::vector< OUString >& _out_rNames ) const;
extensions/source/propctrlr/formcomponenthandler.hxx:        void impl_fillQueryNames_throw( ::std::vector< OUString >& _out_rNames ) const;
extensions/source/propctrlr/formcomponenthandler.hxx:                    ,::std::vector< OUString >& _out_rNames
extensions/source/propctrlr/formgeometryhandler.cxx:        ::std::vector< Property > aProperties;
extensions/source/propctrlr/formgeometryhandler.cxx:        ::std::vector< EventTranslation > aEventTranslations;
extensions/source/propctrlr/formgeometryhandler.cxx:        for ( ::std::vector< EventTranslation >::const_iterator t = aEventTranslations.begin();
extensions/source/propctrlr/formlinkdialog.cxx:        ::std::vector< OUString > aDetailFields; aDetailFields.reserve( 4 );
extensions/source/propctrlr/formlinkdialog.cxx:        ::std::vector< OUString > aMasterFields; aMasterFields.reserve( 4 );
extensions/source/propctrlr/formmetadata.cxx:    ::std::vector< OUString > OPropertyInfoService::getPropertyEnumRepresentations(sal_Int32 _nId) const
extensions/source/propctrlr/formmetadata.cxx:        ::std::vector< OUString > aReturn;
extensions/source/propctrlr/formmetadata.cxx:    ::std::vector< OUString > SAL_CALL DefaultEnumRepresentation::getDescriptions() const
extensions/source/propctrlr/formmetadata.cxx:        ::std::vector< OUString > aEnumStrings = m_rMetaData.getPropertyEnumRepresentations( m_nPropertyId );
extensions/source/propctrlr/formmetadata.cxx:        ::std::vector< OUString >::const_iterator pos = ::std::find( aEnumStrings.begin(), aEnumStrings.end(), _rDescription );
extensions/source/propctrlr/formmetadata.cxx:        ::std::vector< OUString > aEnumStrings = m_rMetaData.getPropertyEnumRepresentations( m_nPropertyId );
extensions/source/propctrlr/formmetadata.hxx:        virtual ::std::vector< OUString >      getPropertyEnumRepresentations(sal_Int32 _nId) const override;
extensions/source/propctrlr/formmetadata.hxx:        virtual ::std::vector< OUString >
extensions/source/propctrlr/genericpropertyhandler.cxx:        virtual ::std::vector< OUString >
extensions/source/propctrlr/genericpropertyhandler.cxx:    ::std::vector< OUString > EnumRepresentation::getDescriptions() const
extensions/source/propctrlr/genericpropertyhandler.cxx:        return ::std::vector< OUString >( aNames.getConstArray(), aNames.getConstArray() + aNames.getLength() );
extensions/source/propctrlr/genericpropertyhandler.cxx:        ::std::vector< OUString > aDescriptions( getDescriptions() );
extensions/source/propctrlr/genericpropertyhandler.cxx:        ::std::vector< OUString > aDescriptions( getDescriptions() );
extensions/source/propctrlr/handlerhelper.cxx:            ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/handlerhelper.cxx:                const ::std::vector< OUString >& _rInitialListEntries,
extensions/source/propctrlr/handlerhelper.cxx:            ::std::vector< OUString > aInitialEntries( _rInitialListEntries );
extensions/source/propctrlr/handlerhelper.cxx:            for (   ::std::vector< OUString >::const_iterator loop = aInitialEntries.begin();
extensions/source/propctrlr/handlerhelper.cxx:                const ::std::vector< OUString >& _rInitialListEntries, bool _bReadOnlyControl, bool _bSorted )
extensions/source/propctrlr/handlerhelper.cxx:                const ::std::vector< OUString >& _rInitialListEntries, bool _bReadOnlyControl, bool _bSorted )
extensions/source/propctrlr/handlerhelper.hxx:                const ::std::vector< OUString >& _rInitialListEntries,
extensions/source/propctrlr/handlerhelper.hxx:                const ::std::vector< OUString >& _rInitialListEntries,
extensions/source/propctrlr/newdatatype.cxx:    NewDataTypeDialog::NewDataTypeDialog( vcl::Window* _pParent, const OUString& _rNameBase, const ::std::vector< OUString >& _rProhibitedNames )
extensions/source/propctrlr/newdatatype.hxx:            const ::std::vector< OUString >& _rProhibitedNames );
extensions/source/propctrlr/propcontroller.cxx:            ::std::vector< Property > aProperties;
extensions/source/propctrlr/propcontroller.cxx:                    ::std::vector< Property >::const_iterator previous = ::std::find_if(
extensions/source/propctrlr/propcontroller.cxx:                    ::std::vector< Property >::iterator existent = ::std::find_if(
extensions/source/propctrlr/propcontroller.cxx:            for (   ::std::vector< Property >::const_iterator sourceProps = aProperties.begin();
extensions/source/propctrlr/propcontroller.cxx:            ::std::vector< OUString > aActuatingProperties;
extensions/source/propctrlr/propcontroller.cxx:            ::std::vector< Any > aActuatingPropertyValues;
extensions/source/propctrlr/propcontroller.cxx:                ::std::vector< OUString >::const_iterator aProperty = aActuatingProperties.begin();
extensions/source/propctrlr/propcontroller.cxx:                ::std::vector< Any >::const_iterator aPropertyValue = aActuatingPropertyValues.begin();
extensions/source/propctrlr/propcontroller.cxx:                ::std::vector< Reference< XPropertyHandler > > aSingleHandlers( _rObjects.size() );
extensions/source/propctrlr/propcontroller.cxx:                ::std::vector< Reference< XPropertyHandler > >::iterator pHandler = aSingleHandlers.begin();
extensions/source/propctrlr/propcontroller.hxx:        typedef ::std::vector< css::uno::Reference< css::uno::XInterface > >
extensions/source/propctrlr/propcontroller.hxx:        typedef ::std::vector< PropertyHandlerRef >     PropertyHandlerArray;
extensions/source/propctrlr/propertycomposer.cxx:    PropertyComposer::PropertyComposer( const ::std::vector< Reference< XPropertyHandler > >& _rSlaveHandlers )
extensions/source/propctrlr/propertycomposer.hxx:        typedef ::std::vector< css::uno::Reference< css::inspection::XPropertyHandler > >
extensions/source/propctrlr/propertycomposer.hxx:        explicit PropertyComposer( const ::std::vector< css::uno::Reference< css::inspection::XPropertyHandler > >& _rSlaveHandlers );
extensions/source/propctrlr/propertyhandler.cxx:    void PropertyHandler::implAddPropertyDescription( ::std::vector< Property >& _rProperties, const OUString& _rPropertyName, const Type& _rType, sal_Int16 _nAttribs ) const
extensions/source/propctrlr/propertyhandler.hxx:                    ::std::vector< css::beans::Property >& _rProperties,
extensions/source/propctrlr/propertyhandler.hxx:                    ::std::vector< css::beans::Property >& _rProperties,
extensions/source/propctrlr/propertyhandler.hxx:                    ::std::vector< css::beans::Property >& _rProperties,
extensions/source/propctrlr/propertyhandler.hxx:                    ::std::vector< css::beans::Property >& _rProperties,
extensions/source/propctrlr/propertyhandler.hxx:                    ::std::vector< css::beans::Property >& _rProperties,
extensions/source/propctrlr/propertyhandler.hxx:                    ::std::vector< css::beans::Property >& _rProperties,
extensions/source/propctrlr/propertyhandler.hxx:                    ::std::vector< css::beans::Property >& _rProperties,
extensions/source/propctrlr/propertyhandler.hxx:                    ::std::vector< css::beans::Property >& _rProperties,
extensions/source/propctrlr/propertyhandler.hxx:    inline void PropertyHandler::addStringPropertyDescription( ::std::vector< css::beans::Property >& _rProperties, const OUString& _rPropertyName ) const
extensions/source/propctrlr/propertyhandler.hxx:    inline void PropertyHandler::addInt32PropertyDescription( ::std::vector< css::beans::Property >& _rProperties, const OUString& _rPropertyName, sal_Int16 _nAttribs ) const
extensions/source/propctrlr/propertyhandler.hxx:    inline void PropertyHandler::addInt16PropertyDescription( ::std::vector< css::beans::Property >& _rProperties, const OUString& _rPropertyName, sal_Int16 _nAttribs ) const
extensions/source/propctrlr/propertyhandler.hxx:    inline void PropertyHandler::addDoublePropertyDescription( ::std::vector< css::beans::Property >& _rProperties, const OUString& _rPropertyName, sal_Int16 _nAttribs ) const
extensions/source/propctrlr/propertyhandler.hxx:    inline void PropertyHandler::addDatePropertyDescription( ::std::vector< css::beans::Property >& _rProperties, const OUString& _rPropertyName, sal_Int16 _nAttribs ) const
extensions/source/propctrlr/propertyhandler.hxx:    inline void PropertyHandler::addTimePropertyDescription( ::std::vector< css::beans::Property >& _rProperties, const OUString& _rPropertyName, sal_Int16 _nAttribs ) const
extensions/source/propctrlr/propertyhandler.hxx:    inline void PropertyHandler::addDateTimePropertyDescription( ::std::vector< css::beans::Property >& _rProperties, const OUString& _rPropertyName, sal_Int16 _nAttribs ) const
extensions/source/propctrlr/propertyinfo.hxx:        virtual ::std::vector< OUString >      getPropertyEnumRepresentations(sal_Int32 _nId) const = 0;
extensions/source/propctrlr/stringrepresentation.cxx:        ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/stringrepresentation.cxx:        ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/submissionhandler.cxx:        ::std::vector< Property > aProperties;
extensions/source/propctrlr/submissionhandler.cxx:        ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/xsdvalidationhelper.cxx:    void XSDValidationHelper::getAvailableDataTypeNames( ::std::vector< OUString >& /* [out] */ _rNames ) const
extensions/source/propctrlr/xsdvalidationhelper.hxx:        void    getAvailableDataTypeNames( ::std::vector< OUString >& /* [out] */ _rNames ) const;
extensions/source/propctrlr/xsdvalidationpropertyhandler.cxx:        ::std::vector< Property > aProperties;
extensions/source/propctrlr/xsdvalidationpropertyhandler.cxx:        ::std::vector< OUString > aSuperfluous;
extensions/source/propctrlr/xsdvalidationpropertyhandler.cxx:        ::std::vector< OUString > aInterestedInActuations;
extensions/source/propctrlr/xsdvalidationpropertyhandler.cxx:        ::std::vector< OUString > aListEntries;
extensions/source/propctrlr/xsdvalidationpropertyhandler.cxx:        ::std::vector< OUString > aExistentNames;
extensions/source/propctrlr/xsdvalidationpropertyhandler.cxx:    void XSDValidationPropertyHandler::implGetAvailableDataTypeNames( ::std::vector< OUString >& /* [out] */ _rNames ) const
extensions/source/propctrlr/xsdvalidationpropertyhandler.cxx:        ::std::vector< OUString > aAllTypes;
extensions/source/propctrlr/xsdvalidationpropertyhandler.cxx:        for ( ::std::vector< OUString >::const_iterator dataType = aAllTypes.begin();
extensions/source/propctrlr/xsdvalidationpropertyhandler.hxx:        void    implGetAvailableDataTypeNames( ::std::vector< OUString >& /* [out] */ _rNames ) const;
extensions/source/scanner/grid.cxx:    std::vector< impHandle >    m_aHandles;
extensions/source/scanner/scanunx.cxx:    typedef std::vector< std::shared_ptr<SaneHolder> > sanevec;
extensions/source/update/check/updatecheck.cxx:    std::vector< ReleaseNote >::const_iterator iter = rInfo.ReleaseNotes.begin();
extensions/source/update/check/updatecheck.cxx:    std::vector< DownloadSource >::iterator iter = m_aUpdateInfo.Sources.begin();
extensions/source/update/check/updatecheck.cxx:    std::vector< ReleaseNote >::iterator iter2 = m_aUpdateInfo.ReleaseNotes.begin();
extensions/source/update/check/updateinfo.hxx:    std::vector< DownloadSource > Sources;
extensions/source/update/check/updateinfo.hxx:    std::vector< ReleaseNote > ReleaseNotes;
external/glyphy/glyphy-upstream.patch.1:     std::vector<double> t;
external/glyphy/glyphy-upstream.patch.1:     std::vector<double> e;
external/glyphy/glyphy-upstream.patch.1:     std::vector<double> t;
external/glyphy/glyphy-upstream.patch.1:     std::vector<double> e;
external/glyphy/glyphy-windows.patch.1:+		     std::vector<glyphy_arc_endpoint_t> *endpoints)
external/glyphy/glyphy-windows.patch.1:+  std::vector<glyphy_arc_endpoint_t> endpoints;
external/glyphy/glyphy-windows.patch.1:+  std::vector<char> buf(size);
external/glyphy/glyphy-windows.patch.1:+  std::vector<glyphy_arc_endpoint_t> endpoints;
external/glyphy/glyphy-windows.patch.1:   std::vector<glyphy_arc_endpoint_t> endpoints;
external/icu/icu4c-scriptrun.patch:+    std::vector<ParenStackEntry> parenStack;
external/liborcus/0001-Fix-for-OSX-build-inside-LibreOffice.patch:     void swap(std::vector<document_root_type>& docs)
external/libvisio/ubsan.patch:   std::vector<unsigned char> tmpData(layerMem.m_data.size());
filter/source/config/cache/cacheitem.hxx:typedef ::std::vector< OUString > OUStringList;
filter/source/config/cache/contenthandlerfactory.cxx:        ::std::vector< css::uno::Any > stlArguments(comphelper::sequenceToContainer< ::std::vector< css::uno::Any > >(lArguments));
filter/source/config/cache/filtercache.cxx:        ::std::vector< css::uno::Any > lParams;
filter/source/config/cache/filtercache.cxx:    const ::std::vector< OUString >                 lLocales(comphelper::sequenceToContainer< ::std::vector< OUString >>(
filter/source/config/cache/filtercache.cxx:          ::std::vector< OUString >::const_iterator pLocale ;
filter/source/config/cache/filterfactory.cxx:        ::std::vector< css::uno::Any > stlArguments(comphelper::sequenceToContainer< ::std::vector< css::uno::Any > >(lArguments));
filter/source/config/cache/frameloaderfactory.cxx:        ::std::vector< css::uno::Any > stlArguments(comphelper::sequenceToContainer< ::std::vector<css::uno::Any> >(lArguments));
filter/source/flash/swfexporter.hxx:    ::std::vector<ShapeInfo*>
filter/source/flash/swfwriter.hxx:    std::vector< sal_uInt8 > maData;
filter/source/flash/swfwriter.hxx:    std::vector< sal_uInt16 > maGlyphOffsets;
filter/source/flash/swfwriter.hxx:typedef std::vector<FlashFont*> FontMap;
filter/source/flash/swfwriter.hxx:    std::vector< Tag* > maTags;
filter/source/flash/swfwriter.hxx:    typedef std::vector<sal_uInt16> CharacterIdVector;
filter/source/flash/swfwriter2.cxx:    for(std::vector< GradRecord >::iterator i = aGradientRecords.begin(); i != aGradientRecords.end(); ++i)
filter/source/graphicfilter/eps/eps.cxx:        std::vector<tools::PolyPolygon> aPolyPolyVec;
filter/source/graphicfilter/eps/eps.cxx:            std::vector<tools::PolyPolygon>::iterator aIter( aPolyPolyVec.begin() );
filter/source/graphicfilter/icgm/bundles.hxx:    ::std::vector< FontEntry* >
filter/source/graphicfilter/icgm/cgm.hxx:        ::std::vector< sal_uInt8 * > maDefRepList;
filter/source/graphicfilter/icgm/cgm.hxx:        ::std::vector< sal_uInt32  > maDefRepSizeList;
filter/source/graphicfilter/icgm/chart.cxx:        ::std::vector< TextEntry* >::iterator it;
filter/source/graphicfilter/icgm/chart.hxx:        ::std::vector< TextEntry* > maTextEntryList;
filter/source/graphicfilter/icgm/elements.hxx:typedef ::std::vector< Bundle* > BundleList;
filter/source/graphicfilter/itiff/itiff.cxx:        std::vector<sal_uInt32> aSeenOffsets;
filter/source/graphicfilter/itiff/itiff.cxx:        std::vector<sal_uInt32> aSeenIfds;
filter/source/msfilter/escherex.cxx:                                const std::vector< sal_Int32 >& rEquationOrder, bool bAdjustTrans )
filter/source/msfilter/escherex.cxx:        std::vector< EnhancedCustomShapeEquation >& rEquations, std::vector< sal_Int32 >& rEquationOrder )
filter/source/msfilter/escherex.cxx:            std::vector< EnhancedCustomShapeEquation >::iterator aIter( rEquations.begin() );
filter/source/msfilter/escherex.cxx:            std::vector< EnhancedCustomShapeEquation >::iterator aEnd ( rEquations.end() );
filter/source/msfilter/escherex.cxx:            // convert property "Equations" into std::vector< EnhancedCustomShapeEquationEquation >
filter/source/msfilter/escherex.cxx:            std::vector< EnhancedCustomShapeEquation >  aEquations;
filter/source/msfilter/escherex.cxx:            std::vector< sal_Int32 >                    aEquationOrder;
filter/source/msfilter/escherex.cxx:                            std::vector< EnhancedCustomShapeEquation >::const_iterator aIter( aEquations.begin() );
filter/source/msfilter/escherex.cxx:                            std::vector< EnhancedCustomShapeEquation >::const_iterator aEnd ( aEquations.end() );
filter/source/msfilter/escherex.cxx:    ::std::vector< EscherPersistEntry* >::iterator it = maPersistTable.begin();
filter/source/msfilter/escherex.cxx:    for (std::vector< sal_uInt32 >::iterator aIter( mOffsets.begin() ), aEnd( mOffsets.end() ); aIter != aEnd ; ++aIter)
filter/source/msfilter/msdffimp.cxx:struct SvxMSDffBLIPInfos : public std::vector<SvxMSDffBLIPInfo> {};
filter/source/msfilter/msdffimp.cxx:void GetShadeColors( const SvxMSDffManager& rManager, const DffPropertyReader& rProperties, SvStream& rIn, std::vector< ShadeColor >& rShadeColors )
filter/source/msfilter/msdffimp.cxx:void ApplyRectangularGradientAsBitmap( const SvxMSDffManager& rManager, SvStream& rIn, SfxItemSet& rSet, const std::vector< ShadeColor >& rShadeColors, const DffObjData& rObjData, sal_Int32 nFix16Angle )
filter/source/msfilter/msdffimp.cxx:                    std::vector< ShadeColor >::const_iterator aIter( rShadeColors.begin() );
filter/source/msfilter/msdffimp.cxx:    std::vector< ShadeColor > aShadeColors;
filter/source/msfilter/msdffimp.cxx:    typedef std::vector< beans::PropertyValue > PropVec;
filter/source/msfilter/mstoolbar.cxx:    for ( std::vector< iconcontrolitem >::iterator it = iconcommands.begin(); it != iconcommands.end(); ++it )
filter/source/msfilter/mstoolbar.cxx:bool TBCData::ImportToolBarControl( CustomToolBarImportHelper& helper, std::vector< css::beans::PropertyValue >& props, bool& bBeginGroup, bool bIsMenuBar )
filter/source/msfilter/mstoolbar.cxx:            for ( std::vector< css::beans::PropertyValue >::iterator it = props.begin(); it != props.end(); ++it )
filter/source/msfilter/mstoolbar.cxx:TBCGeneralInfo::ImportToolBarControlData( CustomToolBarImportHelper& helper, std::vector< beans::PropertyValue >& sControlData )
filter/source/msfilter/msvbahelper.cxx:    std::vector< OUString > sSearchList;
filter/source/msfilter/msvbahelper.cxx:    std::vector< OUString >::iterator it_end = sSearchList.end();
filter/source/msfilter/msvbahelper.cxx:    for ( std::vector< OUString >::iterator it = sSearchList.begin(); !aRes.mbFound && (it != it_end); ++it )
filter/source/msfilter/svdfppt.cxx:class PptFontCollection : public std::vector<std::unique_ptr<PptFontEntityAtom>>
filter/source/msfilter/svdfppt.cxx:                                            const std::vector< StyleTextProp9 >& aStyleTextProp9,
filter/source/msfilter/svdfppt.cxx:    std::vector< StyleTextProp9 > aStyleTextProp9;
filter/source/msfilter/svdfppt.cxx:                            ::std::vector< PPTFieldEntry* > FieldList;
filter/source/msfilter/svdfppt.cxx:                                    ::std::vector< PPTFieldEntry* >::iterator it = FieldList.begin();
filter/source/msfilter/svdfppt.cxx:                                ::std::vector< PPTFieldEntry* >::iterator FE = FieldList.begin();
filter/source/msfilter/svdfppt.cxx:                        const std::set< sal_Int32 >& rColumns, std::vector< sal_Int32 >& rPositions, sal_Int32 nColumn, sal_Int32 nFlags )
filter/source/msfilter/svdfppt.cxx:                        const std::set< sal_Int32 >& rColumns, std::vector< sal_Int32 >& rPositions, sal_Int32 nRow, sal_Int32 nFlags )
filter/source/msfilter/svdfppt.cxx:                        std::vector< sal_Int32 >& rPositions, const Rectangle& rGroupSnap )
filter/source/msfilter/svdfppt.cxx:void ApplyCellLineAttributes( const SdrObject* pLine, Reference< XTable >& xTable, const std::vector< sal_Int32 >& vPositions, sal_Int32 nColumns )
filter/source/msfilter/svdfppt.cxx:        std::vector< sal_Int32 >::const_iterator aIter( vPositions.begin() );
filter/source/msfilter/svdfppt.cxx:                        std::vector< sal_Int32 > vPositions;    // containing cell indexes + cell position
filter/source/msfilter/svdfppt.cxx:                        std::vector< sal_Int32 >::iterator aIter( vPositions.begin() );
filter/source/msfilter/util.cxx:void CalculateScheme(const BitmapColor& rBitmapColor, std::vector<int> &vScheme, sal_uInt16 nVariance)
filter/source/msfilter/util.cxx:    std::vector<int> vScheme1, vScheme2;
filter/source/placeware/zip.cxx:        std::vector< ZipEntry* >::iterator aIter( maEntries.begin() );
filter/source/placeware/zip.cxx:    std::vector< ZipEntry* >::iterator aIter( maEntries.begin() );
filter/source/placeware/zip.hxx:    std::vector<ZipEntry*> maEntries;
filter/source/svg/gfxtypes.hxx:    std::vector<sal_Size> maStops;
filter/source/svg/gfxtypes.hxx:    std::vector<double>         maDashArray;
filter/source/svg/parserfragments.cxx:void calcRotation(std::vector<geometry::AffineMatrix2D>& rTransforms,
filter/source/svg/parserfragments.cxx:void calcSkewX(std::vector<geometry::AffineMatrix2D>& rTransforms,
filter/source/svg/parserfragments.cxx:void calcSkewY(std::vector<geometry::AffineMatrix2D>& rTransforms,
filter/source/svg/parserfragments.cxx:    std::vector<geometry::AffineMatrix2D> aTransforms;
filter/source/svg/parserfragments.cxx:bool parseDashArray( const char* sDashArray, std::vector<double>& rOutputVector )
filter/source/svg/parserfragments.hxx:    bool parseDashArray( const char* sDashArray, std::vector<double>& rOutputVector );
filter/source/svg/svgexport.cxx:                    std::vector<SdrOutliner*> aOutliners(mpSdrModel->GetActiveOutliners());
filter/source/svg/svgexport.cxx:            ::std::vector< ObjectRepresentation >    aObjects( mpObjects->size() );
filter/source/svg/svgexport.cxx:OUString implGenerateFieldId( std::vector< TextField* > & aFieldSet,
filter/source/svg/svgexport.cxx:            std::vector< TextField* >     aFieldSet;
filter/source/svg/svgexport.cxx:bool SVGFilter::implExportMasterPages( const std::vector< Reference< XDrawPage > > & rxPages,
filter/source/svg/svgexport.cxx:        std::vector< ObjectRepresentation > aObjects;
filter/source/svg/svgfilter.hxx:    std::vector< Reference< XDrawPage > > mMasterPageTargets;
filter/source/svg/svgfilter.hxx:    bool                            implExportMasterPages( const std::vector< Reference< XDrawPage > >& rxPages,
filter/source/svg/svgfontexport.cxx:SVGFontExport::SVGFontExport( SVGExport& rExport, const ::std::vector< ObjectRepresentation >& rObjects ) :
filter/source/svg/svgfontexport.hxx:    typedef ::std::vector< ObjectRepresentation >                 ObjectVector;
filter/source/svg/svgfontexport.hxx:                        SVGFontExport( SVGExport& rExport, const ::std::vector< ObjectRepresentation >& rObjects );
filter/source/svg/svgreader.cxx:                      std::vector< uno::Reference<xml::dom::XElement> >& rUseElementVector,
filter/source/svg/svgreader.cxx:        explicit StopSorter( const std::vector< GradientStop >& rStopVec ) :
filter/source/svg/svgreader.cxx:        const std::vector< GradientStop >& mrStopVec;
filter/source/svg/svgreader.cxx:        std::vector<sal_Size> aNewStops { rGradient.maStops.front() };
filter/source/svg/svgreader.cxx:    std::vector<State>                         maParentStates;
filter/source/svg/svgreader.cxx:    std::vector< Gradient >                    maGradientVector;
filter/source/svg/svgreader.cxx:    std::vector< GradientStop >                maGradientStopVector;
filter/source/svg/svgreader.cxx:    std::vector< uno::Reference<xml::dom::XElement> > maElementVector;
filter/source/svg/svgreader.cxx:    std::vector< uno::Reference<xml::dom::XElement> >& mrUseElementVector;
filter/source/svg/svgreader.cxx:                            std::vector< uno::Reference<xml::dom::XElement> >& rUseElementVector )
filter/source/svg/svgreader.cxx:        std::vector<basegfx::B2DPolyPolygon> aPolys(1,rPoly);
filter/source/svg/svgreader.cxx:                         std::vector< uno::Reference<xml::dom::XElement> >& rUseElementVector )
filter/source/svg/svgreader.cxx:    std::vector< uno::Reference<xml::dom::XElement> >::iterator it;
filter/source/svg/svgreader.cxx:    std::vector< uno::Reference<xml::dom::XElement> > maUseElementVector;
filter/source/svg/test/parsertest.cxx:        std::vector<double> aTmp;
filter/source/svg/test/parsertest.cxx:        std::vector<double> aOut; aOut.push_back(10.0); aOut.push_back(20.0); aOut.push_back(-10.0);
filter/source/xsltdialog/typedetectionimport.hxx:typedef std::vector< Node* > NodeVector;
filter/source/xsltdialog/xmlfiltercommon.hxx:extern std::vector< application_info_impl* >& getApplicationInfos();
filter/source/xsltdialog/xmlfilterjar.hxx:typedef std::vector< filter_info_impl* > XMLFilterVector;
filter/source/xsltdialog/xmlfiltersettingsdialog.cxx:    std::vector< filter_info_impl* >::iterator aIter( maFilterVector.begin() );
filter/source/xsltdialog/xmlfiltersettingsdialog.cxx:std::vector< application_info_impl* >& getApplicationInfos()
filter/source/xsltdialog/xmlfiltersettingsdialog.cxx:    static std::vector< application_info_impl* > aInfos;
filter/source/xsltdialog/xmlfiltersettingsdialog.cxx:    std::vector< application_info_impl* >& rInfos = getApplicationInfos();
filter/source/xsltdialog/xmlfiltersettingsdialog.cxx:    for (std::vector< application_info_impl* >::const_iterator aIter( rInfos.begin() ), aEnd( rInfos.end() );
filter/source/xsltdialog/xmlfiltersettingsdialog.cxx:        std::vector<long> aWidths;
filter/source/xsltdialog/xmlfiltersettingsdialog.hxx:    std::vector< filter_info_impl* > maFilterVector;
filter/source/xsltdialog/xmlfiltertabpagebasic.cxx:    std::vector< application_info_impl* >& rInfos = getApplicationInfos();
filter/source/xsltdialog/xmlfiltertabpagebasic.cxx:    std::vector< application_info_impl* >::iterator aIter( rInfos.begin() );
filter/source/xsltdialog/xmlfiltertabpagebasic.cxx:            std::vector< application_info_impl* >& rInfos = getApplicationInfos();
filter/source/xsltdialog/xmlfiltertabpagebasic.cxx:            std::vector< application_info_impl* >::iterator aIter( rInfos.begin() );
filter/source/xsltfilter/LibXSLTTransformer.cxx:        ::std::vector< const char* > params( pmap.size() * 2 + 1 ); // build parameters
forms/source/component/Button.cxx:void OButtonControl::getSupportedFeatures( ::std::vector< sal_Int16 >& /* [out] */ _rFeatureIds )
forms/source/component/Button.hxx:    virtual void    getSupportedFeatures( ::std::vector< sal_Int16 >& /* [out] */ _rFeatureIds ) override;
forms/source/component/ComboBox.cxx:    ::std::vector< OUString >    aStringList;
forms/source/component/DatabaseForm.hxx:typedef std::vector<HtmlSuccessfulObj> HtmlSuccessfulObjList;
forms/source/component/EventThread.hxx:    typedef std::vector<css::lang::EventObject*> ThreadEvents;
forms/source/component/EventThread.hxx:    typedef std::vector< css::uno::Reference< css::uno::XAdapter> > ThreadObjects;
forms/source/component/EventThread.hxx:    typedef std::vector<sal_Bool> ThreadBools;
forms/source/component/Filter.cxx:            ::std::vector< OUString > aProposals;
forms/source/component/GroupManager.hxx:    sal_Int32 insert_sorted(::std::vector<ELEMENT>& _rArray, const ELEMENT& _rNewElement, const LESS_COMPARE& _rCompareOp)
forms/source/component/GroupManager.hxx:        typename ::std::vector<ELEMENT>::iterator aInsertPos = ::std::lower_bound(
forms/source/component/GroupManager.hxx:    bool seek_entry(const ::std::vector<ELEMENT>& _rArray, const ELEMENT& _rNewElement, sal_Int32& nPos, const LESS_COMPARE& _rCompareOp)
forms/source/component/GroupManager.hxx:        typename ::std::vector<ELEMENT>::const_iterator aExistentPos = ::std::lower_bound(
forms/source/component/GroupManager.hxx:typedef std::vector<OGroupComp> OGroupCompArr;
forms/source/component/GroupManager.hxx:    std::vector<OGroupCompAcc> m_aCompAccArray;
forms/source/component/GroupManager.hxx:typedef std::vector<OGroupArr::iterator> OActiveGroups;
forms/source/component/ListBox.hxx:typedef ::std::vector< ::connectivity::ORowSetValue >   ValueList;
forms/source/component/imgprod.hxx:    typedef std::vector< css::uno::Reference< css::awt::XImageConsumer > > ConsumerList_t;
forms/source/helper/formnavigation.cxx:            ::std::vector< sal_Int16 > aFeatureIds;
forms/source/helper/formnavigation.cxx:            for (   ::std::vector< sal_Int16 >::const_iterator aLoop = aFeatureIds.begin();
forms/source/inc/InterfaceContainer.hxx:typedef std::vector<css::uno::Reference<css::uno::XInterface>> OInterfaceArray;
forms/source/inc/commandimageprovider.hxx:    typedef ::std::vector< Image >                 CommandImages;
forms/source/inc/formnavigation.hxx:        virtual void    getSupportedFeatures( ::std::vector< sal_Int16 >& /* [out] */ _rFeatureIds ) = 0;
forms/source/inc/property.hxx:    typedef std::vector<PropertyAssignment> PropertyMap;
forms/source/misc/InterfaceContainer.cxx:    void lcl_saveEvents( ::std::vector< Sequence< ScriptEventDescriptor > >& _rSave,
forms/source/misc/InterfaceContainer.cxx:    void lcl_restoreEvents( const ::std::vector< Sequence< ScriptEventDescriptor > >& _rSave,
forms/source/misc/InterfaceContainer.cxx:        ::std::vector< Sequence< ScriptEventDescriptor > >::const_iterator aLoop = _rSave.begin();
forms/source/misc/InterfaceContainer.cxx:        ::std::vector< Sequence< ScriptEventDescriptor > >::const_iterator aEnd = _rSave.end();
forms/source/misc/InterfaceContainer.cxx:    ::std::vector< Sequence< ScriptEventDescriptor > > aSave;
forms/source/richtext/richtextengine.cxx:        ::std::vector< IEngineStatusListener* >::iterator aPos = ::std::find_if(
forms/source/richtext/richtextengine.cxx:        for ( ::std::vector< IEngineStatusListener* >::const_iterator aLoop = m_aStatusListeners.begin();
forms/source/richtext/richtextengine.hxx:        ::std::vector< IEngineStatusListener* > m_aStatusListeners;
forms/source/solar/component/navbarcontrol.cxx:    void ONavigationBarPeer::getSupportedFeatures( ::std::vector< sal_Int16 >& _rFeatureIds )
forms/source/solar/component/navbarcontrol.hxx:        virtual void    getSupportedFeatures( ::std::vector< sal_Int16 >& /* [out] */ _rFeatureIds ) override;
forms/source/solar/control/navtoolbar.cxx:        typedef ::std::vector< sal_Int16 >  FormFeatures;
forms/source/solar/inc/navtoolbar.hxx:        ::std::vector< VclPtr<vcl::Window> > m_aChildWins;
forms/source/xforms/binding.cxx:using std::vector;
forms/source/xforms/binding.cxx:::std::vector<EvaluationContext> Binding::getMIPEvaluationContexts()
forms/source/xforms/binding.cxx:::std::vector<EvaluationContext> Binding::_getMIPEvaluationContexts() const
forms/source/xforms/binding.cxx:    ::std::vector<EvaluationContext> aVector;
forms/source/xforms/binding.cxx:    ::std::vector<EvaluationContext> aMIPContexts = _getMIPEvaluationContexts();
forms/source/xforms/binding.cxx:    for( ::std::vector<EvaluationContext>::iterator aIter = aMIPContexts.begin();
forms/source/xforms/binding.hxx:    typedef std::vector<css::uno::Reference<css::util::XModifyListener> > ModifyListeners_t;
forms/source/xforms/binding.hxx:    typedef std::vector<css::uno::Reference<css::form::validation::XValidityConstraintListener> > XValidityConstraintListeners_t;
forms/source/xforms/binding.hxx:    typedef std::vector<css::uno::Reference<css::form::binding::XListEntryListener> > XListEntryListeners_t;
forms/source/xforms/binding.hxx:    std::vector<css::uno::Reference<css::xml::dom::XNode> > maEventNodes;
forms/source/xforms/binding.hxx:    std::vector<xforms::EvaluationContext> getMIPEvaluationContexts();
forms/source/xforms/binding.hxx:    std::vector<xforms::EvaluationContext> _getMIPEvaluationContexts() const;
forms/source/xforms/collection.hxx:    typedef std::vector<css::uno::Reference<css::container::XContainerListener> > Listeners_t;
forms/source/xforms/collection.hxx:    std::vector<T> maItems;
forms/source/xforms/model_ui.cxx:        std::vector<EvaluationContext> aContext =
forms/source/xforms/model_ui.cxx:        for( std::vector<EvaluationContext>::iterator aIter = aContext.begin();
forms/source/xforms/namedcollection.hxx:        std::vector<OUString> aNames;
forms/source/xforms/namedcollection.hxx:        for( typename std::vector<T>::const_iterator aIter = maItems.begin();
forms/source/xforms/namedcollection.hxx:    typename std::vector<T>::const_iterator findItem( const OUString& rName ) const
forms/source/xforms/namedcollection.hxx:        for( typename std::vector<T>::const_iterator aIter = maItems.begin();
forms/source/xforms/pathexpression.hxx:    typedef std::vector<css::uno::Reference<css::xml::dom::XNode> > NodeVector_t;
forms/source/xforms/propertysetbase.hxx:    typedef ::std::vector< css::beans::Property >                                       PropertyArray;
forms/source/xforms/submission.cxx:            std::vector< OUString > aPrefixes;
formula/source/core/api/FormulaCompiler.cxx:inline void lclPushOpCodeMapEntry( ::std::vector< sheet::FormulaOpCodeMapEntry >& rVec,
formula/source/core/api/FormulaCompiler.cxx:void lclPushOpCodeMapEntries( ::std::vector< sheet::FormulaOpCodeMapEntry >& rVec,
formula/source/core/api/FormulaCompiler.cxx:void lclPushOpCodeMapEntries( ::std::vector< sheet::FormulaOpCodeMapEntry >& rVec,
formula/source/core/api/FormulaCompiler.cxx:    ::std::vector< FormulaOpCodeMapEntry > aVec;
formula/source/core/api/FormulaCompiler.cxx:        ::std::vector< sheet::FormulaOpCodeMapEntry >& /*_rVec*/,
formula/source/core/api/token.cxx:const std::vector<ScComplexRefData>* FormulaToken::GetRefList() const
formula/source/core/api/token.cxx:std::vector<ScComplexRefData>* FormulaToken::GetRefList()
formula/source/core/api/vectortoken.cxx:    const std::vector<VectorRefArray>& rArrays, size_t nReqLength, size_t nArrayLength,
formula/source/core/api/vectortoken.cxx:const std::vector<VectorRefArray>& DoubleVectorRefToken::GetArrays() const
formula/source/ui/dlg/FormulaHelper.cxx:            virtual OUString getFormula(const ::std::vector< OUString >& ) const override { return OUString(); }
formula/source/ui/dlg/FormulaHelper.cxx:            virtual void fillVisibleArgumentMapping(::std::vector<sal_uInt16>& ) const override {}
formula/source/ui/dlg/FormulaHelper.cxx:                                     ::std::vector< OUString>*   pArgs )  const // = NULL
formula/source/ui/dlg/FormulaHelper.cxx:                                    ::std::vector< OUString >& _rArgs ) const
formula/source/ui/dlg/FormulaHelper.cxx:void FormulaHelper::GetArgStrings( ::std::vector< OUString >& _rArgs,
formula/source/ui/dlg/formula.cxx:    ::std::vector< OUString > m_aArguments;
formula/source/ui/dlg/formula.cxx:    ::std::vector< OUString>().swap(m_aArguments);
formula/source/ui/dlg/funcpage.cxx:        ::std::vector< TFunctionDesc >::iterator aIter = aLRUList.begin();
formula/source/ui/dlg/funcpage.cxx:        ::std::vector< TFunctionDesc >::iterator aEnd = aLRUList.end();
formula/source/ui/dlg/funcpage.hxx:    ::std::vector< TFunctionDesc >  aLRUList;
formula/source/ui/dlg/parawin.cxx:    ::std::vector<OUString>().swap(aParaArray);
formula/source/ui/dlg/parawin.hxx:        ::std::vector<sal_uInt16>   aVisibleArgMapping;
formula/source/ui/dlg/parawin.hxx:        ::std::vector<OUString>
fpicker/source/aqua/FilterHelper.hxx:typedef ::std::vector < FilterEntry >       FilterList;
fpicker/source/office/OfficeFilePicker.cxx:    std::vector<OUString> aPathList(getDialog()->GetPathList());
fpicker/source/office/OfficeFolderPicker.cxx:    std::vector<OUString> aPathList(getDialog()->GetPathList());
fpicker/source/office/OfficeFolderPicker.cxx:    std::vector<OUString> aPathList(getDialog()->GetPathList());
fpicker/source/office/PlacesListBox.hxx:        std::vector< PlacePtr > maPlaces;
fpicker/source/office/PlacesListBox.hxx:        const std::vector<PlacePtr>& GetPlaces() { return maPlaces;}
fpicker/source/office/RemoteFilesDialog.cxx:        for( std::vector< ServicePtr >::const_iterator it = m_aServices.begin(); it != m_aServices.end(); ++it )
fpicker/source/office/RemoteFilesDialog.cxx:    const ::std::vector< SvtContentEntry >& rFolders = m_pFileView->GetContent();
fpicker/source/office/RemoteFilesDialog.cxx:    ::std::vector< std::pair< OUString, OUString > > aFolders;
fpicker/source/office/RemoteFilesDialog.cxx:    for( ::std::vector< SvtContentEntry >::size_type i = 0; i < rFolders.size(); i++ )
fpicker/source/office/RemoteFilesDialog.cxx:std::vector<OUString> RemoteFilesDialog::GetPathList() const
fpicker/source/office/RemoteFilesDialog.cxx:    std::vector<OUString> aList;
fpicker/source/office/RemoteFilesDialog.hxx:    virtual std::vector<OUString> GetPathList() const override;
fpicker/source/office/RemoteFilesDialog.hxx:    std::vector< ServicePtr > m_aServices;
fpicker/source/office/RemoteFilesDialog.hxx:    std::vector< std::pair< OUString, OUString > > m_aFilters;
fpicker/source/office/fpdialogbase.hxx:    virtual std::vector<OUString> GetPathList() const = 0;
fpicker/source/office/iodlg.cxx:        const std::vector<PlacePtr> aPlaces = _pImp->_pPlaces->GetPlaces();
fpicker/source/office/iodlg.cxx:        for(std::vector<PlacePtr>::const_iterator it = aPlaces.begin(); it != aPlaces.end(); ++it) {
fpicker/source/office/iodlg.cxx:std::vector<OUString> SvtFileDialog::GetPathList() const
fpicker/source/office/iodlg.cxx:    std::vector<OUString> aList;
fpicker/source/office/iodlg.hxx:    std::vector<OUString>       GetPathList() const override;        // for MultiSelection
fpicker/source/office/iodlgimp.hxx:    std::vector<OUString> _aURLs;
fpicker/source/win32/filepicker/FilePicker.cxx:          ::std::vector< OUString > lTarget;
fpicker/source/win32/filepicker/FilterContainer.hxx:    typedef std::vector< FILTER_ENTRY_T > FILTER_VECTOR_T;
fpicker/source/win32/filepicker/VistaFilePickerImpl.cxx:::std::vector< COMDLG_FILTERSPEC > lcl_buildFilterList(CFilterContainer& rContainer)
fpicker/source/win32/filepicker/VistaFilePickerImpl.cxx:          ::std::vector< COMDLG_FILTERSPEC > lList  ;
fpicker/source/win32/filepicker/VistaFilePickerImpl.cxx:    ::std::vector< COMDLG_FILTERSPEC > lFilters       = lcl_buildFilterList(m_lFilters);
fpicker/source/win32/filepicker/VistaFilePickerImpl.cxx:    std::vector< OUString > lFiles;
fpicker/source/win32/filepicker/VistaFilePickerImpl.cxx:                        ::std::vector< COMDLG_FILTERSPEC > lFilters = lcl_buildFilterList(m_lFilters);
fpicker/source/win32/misc/WinImplHelper.cxx:        std::vector<sal_Unicode> vec(lItem);
framework/inc/classes/framecontainer.hxx:typedef ::std::vector< css::uno::Reference< css::frame::XFrame > >  TFrameContainer;
framework/inc/classes/fwktabwindow.hxx:typedef std::vector< TabEntry* > TabEntryList;
framework/inc/helper/propertysetcontainer.hxx:        typedef std::vector< css::uno::Reference< css::beans::XPropertySet > > PropertySetVector;
framework/inc/helper/statusindicatorfactory.hxx:typedef ::std::vector< IndicatorInfo > IndicatorStack;
framework/inc/jobs/jobdata.hxx:                                                     ::std::vector< JobData::TJob2DocEventBinding >& lJobs  );
framework/inc/recording/dispatchrecorder.hxx:        ::std::vector < css::frame::DispatchStatement >        m_aStatements;
framework/inc/services/desktop.hxx:        typedef ::std::vector< css::uno::Reference< css::frame::XTerminateListener > > TTerminateListenerList;
framework/inc/stdtypes.h:typedef ::std::vector< OUString > OUStringList;
framework/inc/stdtypes.h:void free(std::vector<T>& vec)
framework/inc/tabwin/tabwindow.hxx:        typedef std::vector< sal_uInt16 > PageIdVector;
framework/inc/uielement/commandinfo.hxx:    ::std::vector< sal_uInt16 > aIds;
framework/inc/uielement/constitemcontainer.hxx:        void copyItemContainer( const std::vector< css::uno::Sequence< css::beans::PropertyValue > >& rSourceVector );
framework/inc/uielement/constitemcontainer.hxx:        std::vector< css::uno::Sequence< css::beans::PropertyValue > >       m_aItemVector;
framework/inc/uielement/itemcontainer.hxx:        void copyItemContainer( const std::vector< css::uno::Sequence< css::beans::PropertyValue > >& rSourceVector, const ShareableMutex& rMutex );
framework/inc/uielement/itemcontainer.hxx:        std::vector< css::uno::Sequence< css::beans::PropertyValue > > m_aItemVector;
framework/inc/uielement/menubarmanager.hxx:        void             RetrieveShortcuts( std::vector< MenuItemHandler* >& aMenuShortCuts );
framework/inc/uielement/menubarmanager.hxx:                                                                  std::vector< MenuItemHandler* >& aMenuShortCuts );
framework/inc/uielement/menubarmanager.hxx:        ::std::vector< MenuItemHandler* >                            m_aMenuItemHandlerVector;
framework/inc/uielement/menubarmerger.hxx:typedef ::std::vector< AddonMenuItem > AddonMenuContainer;
framework/inc/uielement/menubarmerger.hxx:                                                 std::vector< OUString >& aReferencePath );
framework/inc/uielement/menubarmerger.hxx:        ReferencePathInfo FindReferencePath( const std::vector< OUString >& aReferencePath, Menu* pMenu );
framework/inc/uielement/menubarmerger.hxx:                                                    const ::std::vector< OUString >& rReferencePath,
framework/inc/uielement/newmenucontroller.hxx:                                                     std::vector< vcl::KeyCode >& aMenuShortCuts );
framework/inc/uielement/rootitemcontainer.hxx:        std::vector< css::uno::Sequence< css::beans::PropertyValue > >    m_aItemVector;
framework/inc/uielement/statusbarmerger.hxx:typedef ::std::vector< AddonStatusbarItem > AddonStatusbarItemContainer;
framework/inc/uielement/togglebuttontoolbarcontroller.hxx:        std::vector< OUString > m_aDropdownMenuList;
framework/inc/uielement/toolbarmanager.hxx:        typedef ::std::vector< css::uno::Reference< css::frame::XSubToolbarController > >             SubToolBarControllerVector;
framework/inc/uielement/toolbarmerger.hxx:typedef ::std::vector< AddonToolbarItem > AddonToolbarItemContainer;
framework/inc/uielement/toolbarsmenucontroller.hxx:            std::vector< OUString >                                   m_aCommandVector;
framework/inc/uielement/uielement.hxx:typedef std::vector< UIElement > UIElementVector;
framework/inc/xml/imagesconfiguration.hxx:typedef std::vector<std::unique_ptr<ImageItemDescriptor> > ImageItemListDescriptor;
framework/inc/xml/imagesconfiguration.hxx:typedef std::vector<std::unique_ptr<ExternalImageItemDescriptor> > ExternalImageItemListDescriptor;
framework/inc/xml/imagesconfiguration.hxx:typedef std::vector<std::unique_ptr<ImageListItemDescriptor> > ImageListDescriptor;
framework/source/accelerators/acceleratorconfiguration.cxx:            ::std::vector< OUString > aLocales;
framework/source/accelerators/acceleratorconfiguration.cxx:            ::std::vector< OUString >::const_iterator pFound;
framework/source/accelerators/presethandler.cxx:::std::vector< OUString >::const_iterator PresetHandler::impl_findMatchingLocalizedValue(
framework/source/accelerators/presethandler.cxx:        const ::std::vector< OUString >& lLocalizedValues,
framework/source/accelerators/presethandler.cxx:    ::std::vector< OUString >::const_iterator pFound = lLocalizedValues.end();
framework/source/accelerators/presethandler.cxx:    ::std::vector< OUString >                 lSubFolders   = impl_getSubFolderNames(xPath);
framework/source/accelerators/presethandler.cxx:    ::std::vector< OUString >::const_iterator pLocaleFolder = impl_findMatchingLocalizedValue(lSubFolders, rLanguageTag, bAllowFallback);
framework/source/accelerators/presethandler.cxx:::std::vector< OUString > PresetHandler::impl_getSubFolderNames(const css::uno::Reference< css::embed::XStorage >& xFolder)
framework/source/accelerators/presethandler.cxx:        return ::std::vector< OUString >();
framework/source/accelerators/presethandler.cxx:          ::std::vector< OUString >      lSubFolders;
framework/source/dispatch/dispatchinformationprovider.cxx:    ::std::vector< sal_Int16 > lGroups;
framework/source/dispatch/dispatchinformationprovider.cxx:                  ::std::vector< sal_Int16 >::const_iterator pGroup =
framework/source/fwe/classes/addonsoptions.cxx:        typedef std::vector< Sequence< Sequence< PropertyValue > > > AddonToolBars;
framework/source/fwe/classes/addonsoptions.cxx:        void                 ReadOfficeToolBarSet( AddonToolBars& rAddonOfficeToolBars, std::vector< OUString >& rAddonOfficeToolBarResNames );
framework/source/fwe/classes/addonsoptions.cxx:        std::vector< OUString >                      m_aCachedToolBarPartResourceNames;
framework/source/fwe/classes/addonsoptions.cxx:void AddonsOptions_Impl::ReadOfficeToolBarSet( AddonToolBars& rAddonOfficeToolBars, std::vector< OUString >& rAddonOfficeToolBarResNames )
framework/source/fwe/xml/saxnamespacefilter.cxx:    ::std::vector< sal_Int16 > aAttributeIndexes;
framework/source/fwe/xml/saxnamespacefilter.cxx:        for ( ::std::vector< sal_Int16 >::const_iterator i(
framework/source/fwi/uielement/constitemcontainer.cxx:void ConstItemContainer::copyItemContainer( const std::vector< Sequence< PropertyValue > >& rSourceVector )
framework/source/fwi/uielement/itemcontainer.cxx:void ItemContainer::copyItemContainer( const std::vector< Sequence< PropertyValue > >& rSourceVector, const ShareableMutex& rMutex )
framework/source/fwi/uielement/itemcontainer.cxx:            std::vector< Sequence< PropertyValue > >::iterator aIter = m_aItemVector.begin();
framework/source/fwi/uielement/rootitemcontainer.cxx:            std::vector< Sequence< PropertyValue > >::iterator aIter = m_aItemVector.begin();
framework/source/inc/accelerators/acceleratorcache.hxx:        typedef ::std::vector< css::awt::KeyEvent > TKeyList;
framework/source/inc/accelerators/presethandler.hxx:        ::std::vector< OUString >::const_iterator impl_findMatchingLocalizedValue(const ::std::vector< OUString >& lLocalizedValues,
framework/source/inc/accelerators/presethandler.hxx:        ::std::vector< OUString > impl_getSubFolderNames(const css::uno::Reference< css::embed::XStorage >& xFolder);
framework/source/inc/accelerators/storageholder.hxx:        typedef ::std::vector< css::uno::Reference< css::embed::XStorage > > TStorageList;
framework/source/inc/accelerators/storageholder.hxx:        typedef ::std::vector< XMLBasedAcceleratorConfiguration* > TStorageListenerList;
framework/source/jobs/jobdata.cxx:                                               ::std::vector< JobData::TJob2DocEventBinding >& lJobs  )
framework/source/jobs/jobexecutor.cxx:    ::std::vector< JobData::TJob2DocEventBinding > lJobs;
framework/source/jobs/jobexecutor.cxx:    ::std::vector< JobData::TJob2DocEventBinding >::const_iterator pIt;
framework/source/layoutmanager/layoutmanager.cxx:    std::vector< Reference< awt::XWindow > > oldDockingAreaWindows;
framework/source/layoutmanager/toolbarlayoutmanager.cxx:        std::vector< SingleRowColumnWindowData > aRowColumnsWindowData;
framework/source/layoutmanager/toolbarlayoutmanager.cxx:    std::vector< sal_Int32 > aRowColumnSizes[DOCKINGAREAS_COUNT];
framework/source/layoutmanager/toolbarlayoutmanager.cxx:    std::vector< OUString > aToolBarNameVector;
framework/source/layoutmanager/toolbarlayoutmanager.cxx:                ::std::vector< uno::Reference< ui::XUIFunctionListener > > aListenerArray;
framework/source/layoutmanager/toolbarlayoutmanager.cxx:    std::vector< OUString > aMakeVisibleToolbars;
framework/source/layoutmanager/toolbarlayoutmanager.cxx:void ToolbarLayoutManager::implts_getDockingAreaElementInfos( ui::DockingArea eDockingArea, std::vector< SingleRowColumnWindowData >& rRowColumnsWindowData )
framework/source/layoutmanager/toolbarlayoutmanager.cxx:    std::vector< UIElement > aWindowVector;
framework/source/layoutmanager/toolbarlayoutmanager.cxx:    std::vector< UIElement > aWindowVector;
framework/source/layoutmanager/toolbarlayoutmanager.cxx:    std::vector< SingleRowColumnWindowData > aRowColumnsWindowData;
framework/source/layoutmanager/toolbarlayoutmanager.cxx:    std::vector< SingleRowColumnWindowData > aRowColumnsWindowData;
framework/source/layoutmanager/toolbarlayoutmanager.hxx:        typedef std::vector< UIElement > UIElementVector;
framework/source/layoutmanager/toolbarlayoutmanager.hxx:            std::vector< OUString >                                   aUIElementNames;
framework/source/layoutmanager/toolbarlayoutmanager.hxx:            std::vector< css::uno::Reference< css::awt::XWindow > >   aRowColumnWindows;
framework/source/layoutmanager/toolbarlayoutmanager.hxx:            std::vector< css::awt::Rectangle >                        aRowColumnWindowSizes;
framework/source/layoutmanager/toolbarlayoutmanager.hxx:            std::vector< sal_Int32 >                                  aRowColumnSpace;
framework/source/layoutmanager/toolbarlayoutmanager.hxx:        void             implts_getDockingAreaElementInfos( css::ui::DockingArea DockingArea, std::vector< SingleRowColumnWindowData >& rRowColumnsWindowData );
framework/source/recording/dispatchrecorder.cxx:    ::std::vector< Any > * vec, void const * data,
framework/source/recording/dispatchrecorder.cxx:    ::std::vector< Any > vec;
framework/source/recording/dispatchrecorder.cxx:    std::vector< css::frame::DispatchStatement>::iterator p;
framework/source/services/ContextChangeEventMultiplexer.cxx:    typedef ::std::vector<cssu::Reference<css::ui::XContextChangeEventListener> > ListenerContainer;
framework/source/services/autorecovery.cxx:    typedef ::std::vector< TDocumentInfo > TDocumentList;
framework/source/services/autorecovery.cxx:    ::std::vector< OUString > aViewNames;
framework/source/services/autorecovery.cxx:    ::std::vector< AutoRecovery::TDocumentList::iterator > lDangerousDocs;
framework/source/services/autorecovery.cxx:    ::std::vector< AutoRecovery::TDocumentList::iterator >::iterator pIt2;
framework/source/services/autorecovery.cxx:    ::std::vector< Reference< XComponent > > aCleanup;
framework/source/services/autorecovery.cxx:        ::std::vector< OUString > aViewsToRestore( rInfo.ViewNames.getLength() );
framework/source/services/autorecovery.cxx:        for (   ::std::vector< OUString >::const_iterator viewName = aViewsToRestore.begin();
framework/source/services/autorecovery.cxx:        for (   ::std::vector< Reference< XComponent > >::const_iterator component = aCleanup.begin();
framework/source/services/modulemanager.cxx:    ::std::vector< css::uno::Any > lResult;
framework/source/services/substitutepathvars.cxx:typedef std::vector< SubstituteRule > SubstituteRuleVector;
framework/source/services/substitutepathvars.cxx:    std::vector< OUString > aEndlessRecursiveDetector;
framework/source/uiconfiguration/imagemanagerimpl.cxx:std::vector<OUString>& CmdImageList::getImageCommandNames()
framework/source/uiconfiguration/imagemanagerimpl.cxx:::std::vector< OUString >& GlobalImageList::getImageCommandNames()
framework/source/uiconfiguration/imagemanagerimpl.cxx:                std::vector< OUString > aUserImagesVector;
framework/source/uiconfiguration/imagemanagerimpl.cxx:    std::vector< OUString > aUserImageNames;
framework/source/uiconfiguration/imagemanagerimpl.cxx:        const std::vector< OUString >& rGlobalImageNameVector = rGlobalImageList->getImageCommandNames();
framework/source/uiconfiguration/imagemanagerimpl.cxx:        const std::vector< OUString >& rModuleImageNameVector = implts_getDefaultImageList()->getImageCommandNames();
framework/source/uiconfiguration/imagemanagerimpl.cxx:    std::vector< OUString > rUserImageNames;
framework/source/uiconfiguration/imagemanagerimpl.cxx:    std::vector< OUString > aNewUserCmdImageSet;
framework/source/uiconfiguration/imagemanagerimpl.cxx:                std::vector< OUString > aOldUserCmdImageVector;
framework/source/uiconfiguration/imagemanagerimpl.hxx:            virtual std::vector<OUString>& getImageCommandNames();
framework/source/uiconfiguration/imagemanagerimpl.hxx:            virtual ::std::vector< OUString >&      getImageCommandNames() override;
framework/source/uiconfiguration/imagemanagerimpl.hxx:            typedef ::std::vector< css::ui::ConfigurationEvent > ConfigEventNotifyContainer;
framework/source/uiconfiguration/moduleuiconfigurationmanager.cxx:    typedef std::vector< UIElementType > UIElementTypesVector;
framework/source/uiconfiguration/moduleuiconfigurationmanager.cxx:    typedef std::vector< css::ui::ConfigurationEvent > ConfigEventNotifyContainer;
framework/source/uiconfiguration/uiconfigurationmanager.cxx:    typedef std::vector< UIElementType > UIElementTypesVector;
framework/source/uiconfiguration/uiconfigurationmanager.cxx:    typedef std::vector< css::ui::ConfigurationEvent > ConfigEventNotifyContainer;
framework/source/uiconfiguration/windowstateconfiguration.cxx:        std::vector< OUString >           m_aPropArray;
framework/source/uielement/menubarmanager.cxx:        std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:        std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:        std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:    std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:        std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:    std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:            std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:            std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:        std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:    std::vector< MenuItemHandler* >& aMenuShortCuts )
framework/source/uielement/menubarmanager.cxx:void MenuBarManager::RetrieveShortcuts( std::vector< MenuItemHandler* >& aMenuShortCuts )
framework/source/uielement/menubarmanager.cxx:            ::std::vector< OUString > aMergePath;
framework/source/uielement/menubarmanager.cxx:        std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:    std::vector< MenuItemHandler* >::iterator p;
framework/source/uielement/menubarmanager.cxx:    ::std::vector< OUString > aNewWindowListVector;
framework/source/uielement/menubarmerger.cxx:    ::std::vector< OUString >& rReferencePath )
framework/source/uielement/menubarmerger.cxx:    const ::std::vector< OUString >& rReferencePath,
framework/source/uielement/menubarmerger.cxx:    const ::std::vector< OUString >& rReferencePath,
framework/source/uielement/newmenucontroller.cxx:        std::vector< vcl::KeyCode >     aMenuShortCuts;
framework/source/uielement/newmenucontroller.cxx:        std::vector< OUString >    aCmds;
framework/source/uielement/newmenucontroller.cxx:        std::vector< sal_uInt32 >       aIds;
framework/source/uielement/newmenucontroller.cxx:    std::vector< vcl::KeyCode >& aMenuShortCuts )
framework/source/uielement/recentfilesmenucontroller.cxx:    std::vector< RecentFile > m_aRecentFilesItems;
framework/source/uielement/statusbarmanager.cxx:        std::vector< uno::Any > aPropVector;
framework/source/uielement/thesaurusmenucontroller.cxx:    void getMeanings( std::vector< OUString >& rSynonyms, const OUString& rWord, const css::lang::Locale& rLocale, size_t nMaxSynonms );
framework/source/uielement/thesaurusmenucontroller.cxx:    std::vector< OUString > aSynonyms;
framework/source/uielement/thesaurusmenucontroller.cxx:void ThesaurusMenuController::getMeanings( std::vector< OUString >& rSynonyms, const OUString& rWord,
framework/source/uielement/togglebuttontoolbarcontroller.cxx:            std::vector< OUString >::iterator aIter = m_aDropdownMenuList.begin();
framework/source/uielement/toolbarmanager.cxx:    const ::std::vector<sal_uInt16>& rIDs = rIter->second.aIds;
framework/source/uielement/toolbarmanager.cxx:            std::vector< Any > aPropertyVector;
framework/source/uielement/toolbarmanager.cxx:                std::vector< Any > aPropertyVector;
framework/source/uielement/toolbarsmenucontroller.cxx:    std::vector< ToolBarInfo > aToolBarArray;
framework/source/uielement/toolbarsmenucontroller.cxx:        std::vector< ToolBarEntry > aSortedTbs;
framework/source/uielement/toolbarsmenucontroller.cxx:    std::vector< OUString >   aCmdVector;
framework/source/uielement/uicommanddescription.cxx:                                                std::vector< OUString >& aImageCommandVector,
framework/source/uielement/uicommanddescription.cxx:                                                std::vector< OUString >& aImageRotateVector,
framework/source/uielement/uicommanddescription.cxx:                                                std::vector< OUString >& aImageMirrorVector);
framework/source/uielement/uicommanddescription.cxx:                                                std::vector< OUString >& aImageCommandVector,
framework/source/uielement/uicommanddescription.cxx:                                                std::vector< OUString >& aImageRotateVector,
framework/source/uielement/uicommanddescription.cxx:                                                std::vector< OUString >& aImageMirrorVector)
framework/source/uielement/uicommanddescription.cxx:    std::vector< OUString > aImageCommandVector;
framework/source/uielement/uicommanddescription.cxx:    std::vector< OUString > aImageRotateVector;
framework/source/uielement/uicommanddescription.cxx:    std::vector< OUString > aImageMirrorVector;
framework/source/xml/acceleratorconfigurationwriter.cxx:    std::vector< SfxAcceleratorConfigItem>::const_iterator p;
helpcompiler/inc/HelpCompiler.hxx:typedef std::vector<std::string> HashSet;
helpcompiler/inc/HelpLinker.hxx:    void main(std::vector<std::string> &args,
helpcompiler/source/BasCodeTagger.cxx:    std::vector<HighlightPortion> portions;
helpcompiler/source/BasCodeTagger.cxx:    for (std::vector<HighlightPortion>::iterator i(portions.begin());
helpcompiler/source/HelpIndexer.cxx:    std::vector<TCHAR> aPath(OUStringToTCHARVec(path));
helpcompiler/source/HelpLinker.cxx:    std::vector<std::string> _idList;
helpcompiler/source/HelpLinker.cxx:    typedef std::vector<std::string>::const_iterator cIter;
helpcompiler/source/HelpLinker.cxx:    std::vector<unsigned char> dataB(dataLen);
helpcompiler/source/HelpLinker.cxx:void HelpLinker::main( std::vector<std::string> &args,
helpcompiler/source/HelpLinker.cxx:        std::vector<std::string> stringList;
helpcompiler/source/HelpLinker.cxx:    std::vector<std::string> args;
helpcompiler/source/HelpLinker_main.cxx:    std::vector<std::string> args;
helpcompiler/source/HelpSearch.cxx:        std::vector<OUString> &rDocuments, std::vector<float> &rScores) {
helpcompiler/source/HelpSearch.cxx:    std::vector<TCHAR> aQueryStr(OUStringToTCHARVec(queryStr));
helpcompiler/source/LuceneHelper.cxx:std::vector<TCHAR> OUStringToTCHARVec(OUString const &rStr)
helpcompiler/source/LuceneHelper.cxx:        return std::vector<TCHAR>(rStr.getStr(), rStr.getStr() + rStr.getLength() + 1);
helpcompiler/source/LuceneHelper.cxx:    std::vector<TCHAR> aRet;
helpcompiler/source/LuceneHelper.hxx:std::vector<TCHAR> OUStringToTCHARVec(OUString const &rStr);
hwpfilter/source/attributes.cxx:    std::vector<struct TagAttribute> vecAttribute;
hwpfilter/source/attributes.cxx:    std::vector<struct TagAttribute>::iterator ii = m_pImpl->vecAttribute.begin();
hwpfilter/source/attributes.cxx:    std::vector<struct TagAttribute>::iterator ii = m_pImpl->vecAttribute.begin();
hwpfilter/source/attributes.cxx:    std::vector<struct TagAttribute> dummy;
hwpfilter/source/hstream.hxx:        std::vector<byte> seq;
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > sr_Latn_CS_Fallbacks( sr_Latn_CS.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > sh_RS_Fallbacks( sh_RS.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > bs_Latn_BA_Fallbacks( bs_Latn_BA.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > ca_ES_valencia_Fallbacks( ca_ES_valencia.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > ca_valencia_Fallbacks( ca_valencia.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > ca_XV_Fallbacks( ca_XV.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > de_DE_Fallbacks( de_DE.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > de_1901_Fallbacks( de_1901.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > en_GB_oed_Fallbacks( en_GB_oed.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > en_GB_oxendict_Fallbacks( en_GB_oxendict.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:        ::std::vector< OUString > zh_yue_HK_Fallbacks( zh_yue_HK.getFallbackStrings( true));
i18nlangtag/qa/cppunit/test_languagetag.cxx:    const ::std::vector< MsLangId::LanguagetagMapping > aList( MsLangId::getDefinedLanguagetags());
i18nlangtag/qa/cppunit/test_languagetag.cxx:    for (::std::vector< MsLangId::LanguagetagMapping >::const_iterator it( aList.begin()); it != aList.end(); ++it)
i18nlangtag/source/isolang/isolang.cxx:::std::vector< MsLangId::LanguagetagMapping > MsLangId::getDefinedLanguagetags()
i18nlangtag/source/isolang/isolang.cxx:    ::std::vector< LanguagetagMapping > aVec;
i18nlangtag/source/languagetag/languagetag.cxx:            ::std::vector< MsLangId::LanguagetagMapping > aDefined( MsLangId::getDefinedLanguagetags());
i18nlangtag/source/languagetag/languagetag.cxx:            for (::std::vector< MsLangId::LanguagetagMapping >::const_iterator it( aDefined.begin());
i18nlangtag/source/languagetag/languagetag.cxx:                ::std::vector< OUString > aFallbacks( LanguageTag( (*it).mnLang).getFallbackStrings( true));
i18nlangtag/source/languagetag/languagetag.cxx:                for (::std::vector< OUString >::const_iterator fb( aFallbacks.begin()); fb != aFallbacks.end(); ++fb)
i18nlangtag/source/languagetag/languagetag.cxx:                ::std::vector< OUString > aFallbacks( getFallbackStrings( false));
i18nlangtag/source/languagetag/languagetag.cxx:                for (::std::vector< OUString >::const_iterator it( aFallbacks.begin()); it != aFallbacks.end(); ++it)
i18nlangtag/source/languagetag/languagetag.cxx:::std::vector< OUString > LanguageTag::getFallbackStrings( bool bIncludeFullBcp47 ) const
i18nlangtag/source/languagetag/languagetag.cxx:    ::std::vector< OUString > aVec;
i18nlangtag/source/languagetag/languagetag.cxx:                ::std::vector< OUString > aRep( LanguageTag( "ca-ES-valencia").getFallbackStrings( true));
i18nlangtag/source/languagetag/languagetag.cxx:::std::vector< OUString >::const_iterator LanguageTag::getFallback(
i18nlangtag/source/languagetag/languagetag.cxx:        const ::std::vector< OUString > & rList, const OUString & rReference )
i18nlangtag/source/languagetag/languagetag.cxx:    ::std::vector< OUString >::const_iterator it;
i18nlangtag/source/languagetag/languagetag.cxx:    ::std::vector< OUString > aFallbacks( LanguageTag( rReference).getFallbackStrings( false));
i18nlangtag/source/languagetag/languagetag.cxx:    for (::std::vector< OUString >::const_iterator fb = aFallbacks.begin(); fb != aFallbacks.end(); ++fb)
i18nlangtag/source/languagetag/languagetag.cxx:::std::vector< css::lang::Locale >::const_iterator LanguageTag::getMatchingFallback(
i18nlangtag/source/languagetag/languagetag.cxx:        const ::std::vector< css::lang::Locale > & rList,
i18nlangtag/source/languagetag/languagetag.cxx:    ::std::vector< lang::Locale >::const_iterator it;
i18nlangtag/source/languagetag/languagetag.cxx:    ::std::vector< OUString > aFallbacks( LanguageTag( rReference).getFallbackStrings( false));
i18nlangtag/source/languagetag/languagetag.cxx:    ::std::vector< ::std::vector< OUString > > aListFallbacks( rList.size());
i18nlangtag/source/languagetag/languagetag.cxx:        ::std::vector< OUString > aTmp( LanguageTag( *it).getFallbackStrings( true));
i18nlangtag/source/languagetag/languagetag.cxx:    for (::std::vector< OUString >::const_iterator rfb( aFallbacks.begin()); rfb != aFallbacks.end(); ++rfb)
i18nlangtag/source/languagetag/languagetag.cxx:        for (::std::vector< ::std::vector< OUString > >::const_iterator lfb( aListFallbacks.begin());
i18nlangtag/source/languagetag/languagetag.cxx:            for (::std::vector< OUString >::const_iterator fb( (*lfb).begin()); fb != (*lfb).end(); ++fb)
i18npool/inc/breakiteratorImpl.hxx:    std::vector<lookupTableItem*>                       lookupTable;
i18npool/inc/calendarImpl.hxx:    std::vector<lookupTableItem*>                       lookupTable;
i18npool/inc/characterclassificationImpl.hxx:    std::vector<lookupTableItem*> lookupTable;
i18npool/inc/collatorImpl.hxx:    std::vector<lookupTableItem*>                       lookupTable;
i18npool/inc/inputsequencechecker.hxx:    std::vector<lookupTableItem*> lookupTable;
i18npool/inc/localedata.hxx:    static ::std::vector< OUString > getFallbackLocaleServiceNames( const css::lang::Locale & rLocale );
i18npool/source/breakiterator/gendict.cxx:using std::vector;
i18npool/source/breakiterator/xdictionary.cxx:    static std::vector< datacache > aLoadedCache;
i18npool/source/characterclassification/characterclassificationImpl.cxx:            ::std::vector< OUString > aFallbacks( LocaleDataImpl::getFallbackLocaleServiceNames( rLocale));
i18npool/source/characterclassification/characterclassificationImpl.cxx:            for (::std::vector< OUString >::const_iterator it( aFallbacks.begin()); it != aFallbacks.end(); ++it)
i18npool/source/collator/collatorImpl.cxx:            ::std::vector< OUString > aFallbacks( LocaleDataImpl::getFallbackLocaleServiceNames( rLocale));
i18npool/source/collator/collatorImpl.cxx:            for (::std::vector< OUString >::const_iterator it( aFallbacks.begin()); it != aFallbacks.end(); ++it)
i18npool/source/collator/gencoll_rule.cxx:        std::vector<uint8_t> data;
i18npool/source/indexentry/indexentrysupplier.cxx:                ::std::vector< OUString > aFallbacks( LocaleDataImpl::getFallbackLocaleServiceNames( rLocale));
i18npool/source/indexentry/indexentrysupplier.cxx:                for (::std::vector< OUString >::const_iterator it( aFallbacks.begin()); it != aFallbacks.end(); ++it)
i18npool/source/localedata/LocaleNode.cxx:    ::std::vector< OUString > theDateAcceptancePatterns;
i18npool/source/localedata/LocaleNode.cxx:            for (::std::vector< OUString >::const_iterator it( theDateAcceptancePatterns.begin());
i18npool/source/localedata/localedata.cxx:    ::std::vector< LocaleDataLookupTableItem* >  maLookupTable;
i18npool/source/localedata/localedata.cxx:    std::vector<LocaleDataLookupTableItem*>::const_iterator aEnd(maLookupTable.end());
i18npool/source/localedata/localedata.cxx:    std::vector<LocaleDataLookupTableItem*>::iterator aIter(maLookupTable.begin());
i18npool/source/localedata/localedata.cxx:        ::std::vector< OUString > aFallbacks( LocaleDataImpl::getFallbackLocaleServiceNames( rLocale));
i18npool/source/localedata/localedata.cxx:        for (::std::vector< OUString >::const_iterator it( aFallbacks.begin()); it != aFallbacks.end(); ++it)
i18npool/source/localedata/localedata.cxx:::std::vector< OUString > LocaleDataImpl::getFallbackLocaleServiceNames( const css::lang::Locale & rLocale )
i18npool/source/localedata/localedata.cxx:    ::std::vector< OUString > aVec;
i18npool/source/localedata/localedata.cxx:        for (::std::vector< OUString >::iterator it(aVec.begin()); it != aVec.end(); ++it)
i18npool/source/textconversion/genconv_dict.cxx:    std::vector<Index> STC_WordEntry_S2T(0x10000);
i18npool/source/textconversion/genconv_dict.cxx:    std::vector<Index> STC_WordEntry_T2S(0x10000);
i18npool/source/textconversion/textconversionImpl.cxx:            ::std::vector< OUString > aFallbacks( LocaleDataImpl::getFallbackLocaleServiceNames( aLocale));
i18npool/source/textconversion/textconversionImpl.cxx:            for (::std::vector< OUString >::const_iterator it( aFallbacks.begin()); it != aFallbacks.end(); ++it)
