{
  "comments": [
    {
      "key": {
        "uuid": "7f7f9b97_45af1494",
        "filename": "i18npool/source/transliteration/transliteration_body.cxx",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-09-18T06:19:55Z",
      "side": 1,
      "message": "You have eliminated the stack-based buffer. That is most possibly just fine; yet, it would be great if you could make some benchmarking for massive amount of small string transliteration. I hope that it wouldn\u0027t result in significant loss.",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 40
      },
      "revId": "4cb8a436a315e604e7387f51f921042846b5bbc2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f7f9b97_6c5eb4e7",
        "filename": "i18npool/source/transliteration/transliteration_body.cxx",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1001501
      },
      "writtenOn": "2019-09-22T15:40:47Z",
      "side": 1,
      "message": "I don\u0027t know how to do that. Could give an advice?",
      "parentUuid": "7f7f9b97_45af1494",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 40
      },
      "revId": "4cb8a436a315e604e7387f51f921042846b5bbc2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f7f9b97_247d301c",
        "filename": "i18npool/source/transliteration/transliteration_body.cxx",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-09-24T06:22:02Z",
      "side": 1,
      "message": "The code is in the i18npool/. I have grepped the i18npool/qa for \"transliter\", and found that there are entries in i18npool/qa/cppunit/test_textsearch.cxx. Then, I have put this to Transliteration_body::transliterateImpl (after the definition of \u0027in\u0027):\n\n    if (in)\n        assert(false);\n\n... and run \u0027make CppunitTest_i18npool_test_textsearch\u0027. It threw the assert in TestTextSearch::testICU, so I know that the code is being called in the test.\n\nNow it is possible to debug to find the backtrace, and modify the test or one of the methods in the call chain, to run the changed code (method) in a loop, and return the elapsed time, and compare the timings for the two implementations.\n\nHTH.",
      "parentUuid": "7f7f9b97_6c5eb4e7",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 40
      },
      "revId": "4cb8a436a315e604e7387f51f921042846b5bbc2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f7f9b97_1fe39635",
        "filename": "i18npool/source/transliteration/transliteration_body.cxx",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1001501
      },
      "writtenOn": "2019-09-29T12:10:42Z",
      "side": 1,
      "message": "It\u0027s weird but I don\u0027t get assert throw though I compiled i18npool using --enable-debug or --enable-dbgutil or `make i18npool debug\u003dt`.\n\nDidn\u0027t throw even if I put assert() directly in TestTextSearch::testICU() while CPPUNIT_ASSERT(false) works.",
      "parentUuid": "7f7f9b97_247d301c",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 40
      },
      "revId": "4cb8a436a315e604e7387f51f921042846b5bbc2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f7f9b97_3f945244",
        "filename": "i18npool/source/transliteration/transliteration_body.cxx",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-09-29T19:38:18Z",
      "side": 1,
      "message": "Well - I don\u0027t know why is the difference; yet, as you say:\n\n \u003e ... CPPUNIT_ASSERT(false) works\n\nso it looks like you can still use (modify) the unit test to check the performance, right?\n\nI have no idea how intensive the usage of the code in LO is; the optimization consideration in the original code hints that it might be important in some cases. So IMO it makes sense to test this; see the performance regression addressed in 24c7c12224f1c1d66f335f6fe085595352137646 .",
      "parentUuid": "7f7f9b97_1fe39635",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 40
      },
      "revId": "4cb8a436a315e604e7387f51f921042846b5bbc2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f7f9b97_5abcb904",
        "filename": "i18npool/source/transliteration/transliteration_body.cxx",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2019-10-01T11:20:06Z",
      "side": 1,
      "message": "Possibly you could add a memory allocation block prior to the aBuf creating: it could check if the memory requirement is no more than 2048*NMAXMAPPING*sizeof(sal_Unicode), and either call alloca, or initialize the unique_ptr; then use placement-new to create the vector in the allocated place ... that would keep the rest of the code intact, but allow to only use stack when appropriate, and only use the stack when necessary ... no idea if that complexity matters in reality actually. :-( That \"Yes, on massive use even such small things do count\" keeps worrying me.",
      "parentUuid": "7f7f9b97_3f945244",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 40
      },
      "revId": "4cb8a436a315e604e7387f51f921042846b5bbc2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}