{
  "comments": [
    {
      "key": {
        "uuid": "a188c09b_e6621c0d",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "is that \"v\" a typo?",
      "range": {
        "startLine": 197,
        "startChar": 40,
        "endLine": 197,
        "endChar": 41
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f37a072e_f837f2a3",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 197,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a188c09b_e6621c0d",
      "range": {
        "startLine": 197,
        "startChar": 40,
        "endLine": 197,
        "endChar": 41
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8bbaffe_5f0ca24d",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 424,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "nit: !m_Replacements.empty()",
      "range": {
        "startLine": 424,
        "startChar": 36,
        "endLine": 424,
        "endChar": 62
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "437e1834_83367295",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 424,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8bbaffe_5f0ca24d",
      "range": {
        "startLine": 424,
        "startChar": 36,
        "endLine": 424,
        "endChar": 62
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be4124f5_df20100d",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 427,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "nit: ReplacementPair const*",
      "range": {
        "startLine": 427,
        "startChar": 16,
        "endLine": 427,
        "endChar": 32
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b109f24e_972ef155",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 427,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be4124f5_df20100d",
      "range": {
        "startLine": 427,
        "startChar": 16,
        "endLine": 427,
        "endChar": 32
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a45eee36_377245bb",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 428,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "matches should be local to the following for loop\u0027s body, right?  It doesn\u0027t appear to be used beyond each individual iteration of that loop.",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da44c357_ed7cc8b8",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 428,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "It is indeed used only inside the loop.\nHowever there is no interest on redefining it as -1 at each iteration.\nIt would do extra work.\nOr at least is how I understand the code.",
      "parentUuid": "a45eee36_377245bb",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4db9fc6_88624f9e",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 428,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T16:16:31Z",
      "side": 1,
      "message": "Don\u0027t naively try to outsmart the compiler that way---it will most likely generate better code all by itself anyway.  Instead, keep the code as comprehensible for humans as reasonably possible.",
      "parentUuid": "da44c357_ed7cc8b8",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38c8ffad_24315b85",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 428,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T17:23:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c4db9fc6_88624f9e",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f52ecbe_f7f7eed4",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 433,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "* this should be rewritten as\n\n  m_Replacements[iter].replacement.getLength() \u003c nStrLen - i\n\nto avoid overflow (as we know that i \u003c nStrLen)\n\n* and shouldn\u0027t it be \u003c\u003d instead of \u003c?",
      "range": {
        "startLine": 433,
        "startChar": 24,
        "endLine": 433,
        "endChar": 82
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45999a55_7e67aea5",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 433,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "Ack Done",
      "parentUuid": "7f52ecbe_f7f7eed4",
      "range": {
        "startLine": 433,
        "startChar": 24,
        "endLine": 433,
        "endChar": 82
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a2a4cd2_fec0fe81",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 435,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "instead of OUString::comparetTo use std::u16string_view::compare, to avoid construction of a temporary OUString here",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5e17c2a_95f308e3",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 435,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "Inversing the code the temporal OUString can also be avoided.",
      "parentUuid": "5a2a4cd2_fec0fe81",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f492b1a_0914cf08",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 436,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T16:41:53Z",
      "side": 1,
      "message": "This should have been\n\n  matches \u003c\u003d 0\n\nright?  We want to stop as soon as we reach a replacement (which was the second argument to compareTo) that is \u003e\u003d the pStr[i...] input (which was the first argument to compareTo).  But with the arguments to compareTo reversed now in patch set 10, this should actually be correct now.",
      "range": {
        "startLine": 436,
        "startChar": 24,
        "endLine": 436,
        "endChar": 36
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43db66eb_ed9b467e",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 436,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T17:23:02Z",
      "side": 1,
      "message": "So it solved itself.",
      "parentUuid": "9f492b1a_0914cf08",
      "range": {
        "startLine": 436,
        "startChar": 24,
        "endLine": 436,
        "endChar": 36
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c129cc6_3bc0fbdb",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 439,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "If there are two replacements where one is a prefix of the other, this will always chose the shorter one.  That may or may not be what is wanted.",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dfdacbc_6d869d70",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 439,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "I\u0027m implementing it for the use for mathml.\nWhith HTML5 entities it should not be a problem...\nHere is the documentation: https://www.w3.org/TR/xml/ (section 2.8)\nEntities where designed to be parsed, there isn\u0027t really a way to write them. It actually says there can be entities inside entities and entities with parameters...\nThe reverse algorithm is way too complex.\nThis is enough for mathml and if someone needs to take it further, they can do it themselves, since this feature isn\u0027t really required for any other module.\n\nIt is actually optimized for mathml and html. If you take a look on the lines before you\u0027ll see that the option of entity replacement starting by ascii hasn\u0027t been considered. That\u0027s because checking a long list with that would make the saving very slowly for mathml and starmath, wich for some reason I don\u0027t understand saves stuff as mathml in otf files.",
      "parentUuid": "1c129cc6_3bc0fbdb",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d06ee38_899c3861",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 458,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "i should rather be incremented by it-\u003ereplacement.getLength(), no?",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92ddfecb_d100fd3c",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 458,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T14:22:53Z",
      "side": 1,
      "message": "No.OUString is 16 bit. Ostring is 8 bits. The information does not have the same length.\nThe output value is 8 bits. So have to use the OString length.",
      "parentUuid": "5d06ee38_899c3861",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49cba723_7483e362",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 458,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T14:26:41Z",
      "side": 1,
      "message": "but i iterates over the input sal_Unicode pStr?",
      "parentUuid": "92ddfecb_d100fd3c",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0db89b63_35202aa9",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 458,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49cba723_7483e362",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "539f4214_14708a3c",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 953,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "Much of this looks like a duplicate of the above changes (and the same comments apply).  Could the duplicate parts be consolidated?",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ade50c7_557d0079",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 953,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "Not really sure. The code already was structured like this.\nFirst you calculate the output length. Then you malloc. And then you write.\nMaybe an allocator could be used... But have no clue about those things.",
      "parentUuid": "539f4214_14708a3c",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ae9f5c2_a1bb6bde",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 953,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T16:13:02Z",
      "side": 1,
      "message": "But the nontrivial\n\n  // search\n  for ...\n\nblock (and \"\u0026\u0026 m_Replacements.size() !\u003d 0\" micro-optimization) is entirely new, and has enough issues (see comments on the above instance) to show how a single instance would be useful.",
      "parentUuid": "8ade50c7_557d0079",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c095ede3_1f284dce",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 953,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T17:23:02Z",
      "side": 1,
      "message": "Sorry I don\u0027t understand well.\nUsed that to try to avoid the search if possible.\nIf you want to avoid it at all costs, I can make two loops ():\n - A normal loop, used by all modules.\n - A replacing loop. When the list isn\u0027t empty.\nI mean this loop: for (sal_Int32 i \u003d 0; i \u003c nStrLen; i++)\nIt can be taken further and make two different functions and use SaxWriterHelper::calcXMLByteLength as an inline function to call the correct one.",
      "parentUuid": "8ae9f5c2_a1bb6bde",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f36bb8fa_e21df995",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 953,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T18:10:28Z",
      "side": 1,
      "message": "What I wanted to say is:  Much of the newly introduced logic here (mainly the for loop commented with \"search\", and then some, incl. the \"\u0026\u0026 m_Replacements.size() !\u003d 0\" micro-optimization) is duplicated between SaxWriterHelper::convertToXML above and SaxWriterHelper::calcXMLByteLength here.  Even if the existing code was somewhat duplication-heavy already, I think it would nevertheless make sense to consolidate as much as possible of the newly introduced code into a shared helper function.",
      "parentUuid": "c095ede3_1f284dce",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8687dcb_d75b3773",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 953,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T19:37:57Z",
      "side": 1,
      "message": "I believe I get it. It would be to create a function containing the loop. And that function returns the const ReplacementPair* it ?",
      "parentUuid": "f36bb8fa_e21df995",
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b6aa934_d7ae7579",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 978,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2021-01-13T11:32:48Z",
      "side": 1,
      "message": "this should be it-\u003ename, no?",
      "range": {
        "startLine": 978,
        "startChar": 52,
        "endLine": 978,
        "endChar": 67
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e781162_9c42e781",
        "filename": "sax/source/expatwrap/saxwriter.cxx",
        "patchSetId": 9
      },
      "lineNbr": 978,
      "author": {
        "id": 1002652
      },
      "writtenOn": "2021-01-13T15:52:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b6aa934_d7ae7579",
      "range": {
        "startLine": 978,
        "startChar": 52,
        "endLine": 978,
        "endChar": 67
      },
      "revId": "74bcdaa1da7d3afae0444428b9e6da15b67ec41c",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}