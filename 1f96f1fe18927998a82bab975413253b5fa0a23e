{
  "comments": [
    {
      "key": {
        "uuid": "3fa0c359_366c8807",
        "filename": "editeng/source/rtf/rtfitem.cxx",
        "patchSetId": 13
      },
      "lineNbr": 1561,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-04-25T08:25:49Z",
      "side": 1,
      "message": "here and elsewhere\n   *aAttr.get() \ncan just be\n   *aAttr",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_d1468e50",
        "filename": "editeng/source/rtf/rtfitem.cxx",
        "patchSetId": 13
      },
      "lineNbr": 1561,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2019-04-25T09:29:08Z",
      "side": 1,
      "message": "OK - found some",
      "parentUuid": "3fa0c359_366c8807",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_d67c44b7",
        "filename": "sc/source/ui/view/formatsh.cxx",
        "patchSetId": 13
      },
      "lineNbr": 2417,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-04-25T08:25:49Z",
      "side": 1,
      "message": "here and elsewhere, using shared_ptr, but the objects in question are never actually shared?",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_116636ef",
        "filename": "sc/source/ui/view/formatsh.cxx",
        "patchSetId": 13
      },
      "lineNbr": 2417,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2019-04-25T09:29:08Z",
      "side": 1,
      "message": "These may be manipulated in ScViewFunc::GetSelectionFrame",
      "parentUuid": "3fa0c359_d67c44b7",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_51459e16",
        "filename": "sc/source/ui/view/formatsh.cxx",
        "patchSetId": 13
      },
      "lineNbr": 2417,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-04-25T09:32:53Z",
      "side": 1,
      "message": "Yes, but GetSelectionFrame never needs to hold __another__ pointer to the underlying object - there is only ever one, which means this is better represented by std::unique_ptr.\n\n(and passed to GetSelectionFrame by std::unique_ptr\u003cXXX\u003e\u0026)",
      "parentUuid": "3fa0c359_116636ef",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_916486bb",
        "filename": "sc/source/ui/view/formatsh.cxx",
        "patchSetId": 13
      },
      "lineNbr": 2417,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2019-04-25T09:37:31Z",
      "side": 1,
      "message": "Can change this, but the idea is for branch \u0027origin/feature/item_refactor2\u0027 and for the future of Items to have all Item::ItemBase derived as std::shared_ptr and to hold them like this in the ItemSet (later Item::ItemSet) - so if this currently does no harm, I would like to keep as std::shared_ptr - as preparation",
      "parentUuid": "3fa0c359_51459e16",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_f65e2044",
        "filename": "sw/source/core/layout/paintfrm.cxx",
        "patchSetId": 13
      },
      "lineNbr": 3928,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-04-25T08:25:49Z",
      "side": 1,
      "message": "aBack can never be nullptr here?",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_b6589856",
        "filename": "sw/source/core/layout/tabfrm.cxx",
        "patchSetId": 13
      },
      "lineNbr": 3134,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-04-25T08:25:49Z",
      "side": 1,
      "message": "and here?",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_b162e2d7",
        "filename": "sw/source/core/layout/tabfrm.cxx",
        "patchSetId": 13
      },
      "lineNbr": 3134,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2019-04-25T09:29:08Z",
      "side": 1,
      "message": "Due to makeBackgroundBrushItem functionality",
      "parentUuid": "3fa0c359_b6589856",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_d655241f",
        "filename": "sw/source/core/layout/wsfrm.cxx",
        "patchSetId": 13
      },
      "lineNbr": 1681,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-04-25T08:25:49Z",
      "side": 1,
      "message": "and here",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_d15f6e0c",
        "filename": "sw/source/core/layout/wsfrm.cxx",
        "patchSetId": 13
      },
      "lineNbr": 1681,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2019-04-25T09:29:08Z",
      "side": 1,
      "message": "makeBackgroundBrushItem functionality",
      "parentUuid": "3fa0c359_d655241f",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_96355cfa",
        "filename": "sw/source/filter/ww8/docxexport.cxx",
        "patchSetId": 13
      },
      "lineNbr": 947,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2019-04-25T08:25:49Z",
      "side": 1,
      "message": "this is a very odd construction with the semicolon inside an if?",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa0c359_31f25208",
        "filename": "sw/source/filter/ww8/docxexport.cxx",
        "patchSetId": 13
      },
      "lineNbr": 947,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2019-04-25T09:29:08Z",
      "side": 1,
      "message": "No - this is the future :-) And allowed since C++11 (or so) - I think it\u0027s quite readable and better from my POV then having a var def and assignemnt in if and then using it implicitely - like\n    \u0027if((Bla data \u003d doThis()).is())\u0027\nmuuch harder to read and understand. Better\n    \u0027if(Bla data \u003d doThis(); data.is())\u0027\n\nAlso using this in branch for \u0027origin/feature/item_refactor2\u0027 when handling StateAndItem RetVals - see there",
      "parentUuid": "3fa0c359_96355cfa",
      "revId": "1f96f1fe18927998a82bab975413253b5fa0a23e",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}