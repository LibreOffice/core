{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cade0fac_0b533816",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-12-26T14:21:16Z",
      "side": 1,
      "message": "+1 from Jenkins",
      "revId": "f47f55da1eed53e0744ec23116ee320d0b724d71",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6a0c286_d18cbf96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2021-12-28T06:39:36Z",
      "side": 1,
      "message": "I don\u0027t think you can do this, because it changes the binary interface",
      "revId": "f47f55da1eed53e0744ec23116ee320d0b724d71",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40932a4e_3898c9e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2021-12-28T13:24:39Z",
      "side": 1,
      "message": "Thanks Noel!\n\nI was afraid of that; however, I hoped (1) to make sure if that\u0027s so (I hope Stephan can clarify that); and (2) that it would turn out to be not an issue for ctor? (But then, if user code will call a function that is unavailable, it would be an issue ... if I understand correctly.)",
      "parentUuid": "b6a0c286_d18cbf96",
      "revId": "f47f55da1eed53e0744ec23116ee320d0b724d71",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cea3fdb_116e1f68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-01-03T08:21:07Z",
      "side": 1,
      "message": "The question is whether old 3rd-party code that expected the non-inline ctor to be provided by the cppuhelper DLL continues to find an implementation of it.  Given that the MSVC ABI makes sure (I think) to export implementations also of inline functions, there might be a chance that the cppuhelper DLL is guaranteed to continue to emit it (esp. since the non-inline, virtual dtor is implemented in an object file in that DLL, so might be the trigger to emit implementations of all the class\u0027s inline functions in the same object file, too).  But I\u0027m not too familiar with that ABI, so can\u0027t tell for sure.",
      "parentUuid": "40932a4e_3898c9e1",
      "revId": "f47f55da1eed53e0744ec23116ee320d0b724d71",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5509dfa9_8474d433",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-01-03T14:22:17Z",
      "side": 1,
      "message": "Thanks Stephan!\n\nI was reminded in https://stackoverflow.com/questions/70564156/how-can-i-force-generation-of-a-non-inlined-copy-of-an-inlined-constructor-in, that __declspec(dllexport) might be important here, forcing the required symbols. And indeed, OWeakObject is CPPUHELPER_DLLPUBLIC.\n\nSo do you think we may merge this then?",
      "parentUuid": "7cea3fdb_116e1f68",
      "revId": "f47f55da1eed53e0744ec23116ee320d0b724d71",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d85d110_8d628409",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-01-03T14:45:45Z",
      "side": 1,
      "message": "\u003e So do you think we may merge this then?\n\ncan you check whether the set of symbols exported from the cppuhelper DLL remains the same with this change?",
      "parentUuid": "5509dfa9_8474d433",
      "revId": "f47f55da1eed53e0744ec23116ee320d0b724d71",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b305bfad_eeec6355",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-01-04T07:10:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d85d110_8d628409",
      "revId": "f47f55da1eed53e0744ec23116ee320d0b724d71",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}