{
  "comments": [
    {
      "key": {
        "uuid": "bf659307_777d0e1b",
        "filename": "cui/source/options/optgdlg.cxx",
        "patchSetId": 2
      },
      "lineNbr": 225,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "* This does no work e.g. on macOS, where the service is registered as \"com.sun.star.ui.dialogs.AquaFilePicker\" and not as \"com.sun.star.ui.dialogs.SystemFilePicker\" (cf. fpicker/source/aqua/fps_aqua.component).\n\n* Why use OUStringLiteral(\"...\") here instead of plain \"...\"?",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_163297f2",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "* This does no work e.g. on macOS, where the service is registered as \"com.sun.star.ui.dialogs.AquaFilePicker\" and not as \"com.sun.star.ui.dialogs.SystemFilePicker\" (cf. fpicker/source/aqua/fps_aqua.component).\n\n* Why use OUStringLiteral(\"...\") here instead of plain \"...\"?",
      "range": {
        "startLine": 60,
        "startChar": 20,
        "endLine": 60,
        "endChar": 35
      },
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_977a2222",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "Why do an unrelated change here?",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_b798866a",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "This is nonsensical.  Either xResult.is() is guaranteed to be true (and the following if should be removed), or it is not (in which case the assert should be removed).  And xResult.is() can be false in case of deployment errors, so it arguably would be better to handle that with e.g. an exception than to consider it a logic error via assesrt.",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_3777963d",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "Why do an unrelated change here?",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_1794d236",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "* This does no work e.g. on macOS, where the service is registered as \"com.sun.star.ui.dialogs.AquaFolderPicker\" and not as \"com.sun.star.ui.dialogs.SystemFolderPicker\" (cf. fpicker/source/aqua/fps_aqua.component).\n\n* Why use OUStringLiteral(\"...\") here instead of plain \"...\"?",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_b1888b1f",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1000562
      },
      "writtenOn": "2019-07-20T22:35:00Z",
      "side": 1,
      "message": "\u003e * This does no work e.g. on macOS, where the service is registered\n \u003e as \"com.sun.star.ui.dialogs.AquaFolderPicker\" and not as\n \u003e \"com.sun.star.ui.dialogs.SystemFolderPicker\" (cf. fpicker/source/aqua/fps_aqua.component).\n\nCan this be changed, or would that be an ABI break?\n\nI think it\u0027s worth cleaning up this stuff. Doesn\u0027t make any sense to have multiple System*Picker per backend.\n\nI\u0027ll switch the kde5 rename back to just drop the kde5 based lines.",
      "parentUuid": "bf659307_1794d236",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_c560d935",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-23T07:56:29Z",
      "side": 1,
      "message": "\u003e Can this be changed, or would that be an ABI break?\n\nIt should work to additionally register the implementation with the service name \"com.sun.star.ui.dialogs.SystemFolderPicker\".\n\n \u003e I think it\u0027s worth cleaning up this stuff. Doesn\u0027t make any sense\n \u003e to have multiple System*Picker per backend.\n\n\"multiple System*Picker per backend\"?  Is there a backend that has multiple such?\n\n \u003e I\u0027ll switch the kde5 rename back to just drop the kde5 based lines.\n\nNot sure what you mean with that.  Just be aware of the following:  For platforms like macOS and Windows, where each installs just one of the *.component files declaring the system file picker services, it could work to consistently register the service with one service name.  But for Linux, where the VCL backend to use is decided at runtime, a different mechanism is needed to select the right system file picker service implementation at runtime.",
      "parentUuid": "bf659307_b1888b1f",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_57748a35",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "Why do an unrelated change here?",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_d79dfa59",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "This is nonsensical.  Either xResult.is() is guaranteed to be true (and the following if should be removed), or it is not (in which case the assert should be removed).  And xResult.is() can be false in case of deployment errors, so it arguably would be better to handle that with e.g. an exception than to consider it a logic error via assesrt.",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_f78efe25",
        "filename": "svtools/source/uno/fpicker.cxx",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2019-07-17T11:28:21Z",
      "side": 1,
      "message": "Why do an unrelated change here?",
      "revId": "1f2dba571a134ced884a5473cc48becd7c777026",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": false
    }
  ]
}