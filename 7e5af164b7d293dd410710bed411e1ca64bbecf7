{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b39b04d2_a7e99c4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2021-12-07T17:52:25Z",
      "side": 1,
      "message": "FYI :-)",
      "revId": "7e5af164b7d293dd410710bed411e1ca64bbecf7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d868cf23_45ec09f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2021-12-07T22:31:29Z",
      "side": 1,
      "message": "So, I think I\u0027ve already cooled off, so let\u0027s go over how this commit is all wrong and why the only thing to do with it is to revert it.\n\nFirst of all, in case it wasn\u0027t obvious from the two comments about it that you removed, this originates from my fix for tdf#138068, where you introduced a performance problem by preferring DrawTransformedBitmap() over plain DrawBitmap(). According to all the people reporting the problem, DrawTransformedBitmap() was slower then DrawBitmap() for pretty much every VCL backend except for Skia.\n\nNow, the key word in the function name HasFastDrawTransformedBitmap() is \"Fast\", and the long confused commit message suggests that you missed that the function name includes that. The function was checked in OutputDevice\u0027s function before the attempt to convert the call to plain DrawBitmap(), because it makes sense to prefer DrawTransformedBitmap() over DrawBitmap() only if it doesn\u0027t make things slower. As established above, at least by the time of writing the code this was the case only for Skia, and that\u0027s why the function returns true only for Skia. The only case where this makes sense is to avoid Mirror(), as said by the relevant commit 5d2faf94c2f0ac59223a, and this is because with Vulkan-backed bitmaps pixel-based Mirror() will slow things down. At the time of the writing the comment for hasFastDrawTransformedBitmap() seemed enough, but if it\u0027s not then I suppose I can improve it by commenting also at the place of usage.\n\nThere is no regression for any other backend caused by checking for HasDrawTransformedBitmap(), because another call to DrawTransformedBitmap() is done right after the attempt to simplify to DrawBitmap() if that doesn\u0027t work out. Given that you left it in as a duplicate, I assume that you missed it too. The second usage in vclcanvas is probably only relevant to Skia as well, because AFAIK(?) only Skia by now uses vclcanvas.\n\nWith regards to the extra alpha parameter, I called it alpha simply because that\u0027s what the vclcanvas code called it, and last time I checked opacity and alpha were pretty much the same thing. I did not bother to implement it in any other VCL backend because I didn\u0027t see the point, as it really matters only for vclcanvas and Skia\u0027s Vulkan drawing, but feel free to add it wherever you feel like. Also, your bailing out on fAlpha !\u003d 1.0 breaks the Skia handling of it.\n\nAs for the conversion of a simple virtual method on a path to an expensive call to an ugly fragile hack and considering it an improvement, that\u0027s so awfully clueless that I\u0027m not even going to deride it.\n\nFinally, this all makes me wonder whether and how much you tested this, particularly WRT to tdf#138068. This doesn\u0027t seem to regress as badly as I remember tdf#138068 did, but I can still subjectively see worse result with GDI (tearing when scrolling) and with Gtk3 if I scroll a bit down to see all 6 images and then just hold a key to type into a textbox, I do not see the text updated until I release the key (which shows that the Cairo version of DrawTransformedBitmap() performs worse than DrawBitmap(), since without this change that works fine). That also means that HasFastDrawTransformedBitmap() returning false for at least these is correct.\n\n\u003e from my POV in those cases choosing possible runtime speed over complexity is not always preferable.\n\nI assume that\u0027s not what you meant to write, but it\u0027s a funny coincidence that you did.\n\nAnyways, in short this whole commit is a broken confused nonsense, and, unless you have any questions, I am going to revert it.\n",
      "revId": "7e5af164b7d293dd410710bed411e1ca64bbecf7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccc0d854_0491a68f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001124
      },
      "writtenOn": "2021-12-08T09:53:26Z",
      "side": 1,
      "message": "\u003e So, I think I\u0027ve already cooled off, so let\u0027s go over how this commit is all wrong and why the only thing to do with it is to revert it.\n\nI am sorry if that gave you a need to cool off, that was not intended. I am also sorry that I did not see that stuff earlier, that would have given the chance to do this together and discuss before it was done. Revert is always an option if we find better ways do do this together\n \n\u003e First of all, in case it wasn\u0027t obvious from the two comments about it that you removed, this originates from my fix for tdf#138068, where you introduced a performance problem by preferring DrawTransformedBitmap() over plain DrawBitmap(). According to all the people reporting the problem, DrawTransformedBitmap() was slower then DrawBitmap() for pretty much every VCL backend except for Skia.\n\nIt is about general code in the sense of being independent from specific stuff in the backends (OutputDevice), and specialized code that knows it\u0027 e.g. inside Skia backend implementation.\nThe reason that day I changed it initially was that in the long run vcl should get rid of all draw commands with Bitmap except the one that can (and has to) handle all of that anyways, that is DrawTransformedBitmap(). All others should be converted to local legacy methods inside OutputDevice to use this, to make vcl leaner and cleaner, and also reduce the interface to the backends (as long as we need them).\nBTW: The same should happen with the line-draw stuff, it makes sense to only have one command if the most complex one has to be supported anyways.\n\nThe other reason I dared to do that (I know about the dangers/weaknesses of that old code, that\u0027s the reason for primitives) was that DrawTransformedBitmap() and DrawBitmap() existed for something like 5 years and I thought time has come to do another step in that direction - aware that it may need corrections.\n\nI would have loved to support here, in the end you did a correction to fix the case that (only?) Skia is faster using DrawTransformedBitmap() then DrawBitmap() using that HasFastDrawTransformedBitmap() construct. I did not see this and the follwing changes, somehow missed that.\n\nThis change solves a system-related problem (that Skia is faster in a case) in a system-independent place, OutputDevice. HasFastDrawTransformedBitmap() is only there to decide the single case that the Skia backend is active.\n\nMake backend-specific decisions in backend-specific code. In this case, decide to detect that no shear/rotation/mirror(part of scale) inside implementation of SkiaSalGraphicsImpl::drawTransformedBitmap(..), that is where it belongs. The Skia renderer is the only location that knows what is faster. HasFastDrawTransformedBitmap() is therefore not needed at all. How to do that decision can be seen in the code in OutputDevice::DrawTransformedBitmapEx that you know. Thus: It should be done/decided inside the Skia backend implementation.\n\n\u003e Now, the key word in the function name HasFastDrawTransformedBitmap() is \"Fast\", and the long confused commit message suggests that you missed that the function name includes that. The function was checked in OutputDevice\u0027s function before the attempt to convert the call to plain DrawBitmap(), because it makes sense to prefer DrawTransformedBitmap() over DrawBitmap() only if it doesn\u0027t make things slower. As established above, at least by the time of writing the code this was the case only for Skia, and that\u0027s why the function returns true only for Skia. The only case where this makes sense is to avoid Mirror(), as said by the relevant commit 5d2faf94c2f0ac59223a, and this is because with Vulkan-backed bitmaps pixel-based Mirror() will slow things down. At the time of the writing the comment for hasFastDrawTransformedBitmap() seemed enough, but if it\u0027s not then I suppose I can improve it by commenting also at the place of usage.\n\n(I would propose to) make backend-specific decisions in backend-specific code: Decide what is best/fastest where you can decide it and know about it, in the Skia backend. Indeed I did not put special meaning into the \u0027fast\u0027 in HasFastDrawTransformedBitmap() - you are correct there.\n\nI did change it to ImplementsFastDrawTransformedBitmap() and added a safe detection that does not need another backend api call and thus is safer from my POV. That knowledge if it is implemented is needed in the canvas-helper only. When looking there it does something own if transformation is essential, mainly to allow buffering it locally (see new CachedBitmap in canvas/source/vcl/canvashelper.cxx). To offer knowledge to the common part in OutputDevice to this is an exception and needed as long as canvas is ton converted to primitives.\n \n\u003e There is no regression for any other backend caused by checking for HasDrawTransformedBitmap(), because another call to DrawTransformedBitmap() is done right after the attempt to simplify to DrawBitmap() if that doesn\u0027t work out. Given that you left it in as a duplicate, I assume that you missed it too. The second usage in vclcanvas is probably only relevant to Skia as well, because AFAIK(?) only Skia by now uses vclcanvas.\n\nYou are right again, I saw that and wondered a bit. At that point I should have seen that calling it twice in the common OutputDevice part may have another purpose. Unfortunately this is not commented there, we did not do that together and thus I did not know about that.\n\n\u003e With regards to the extra alpha parameter, I called it alpha simply because that\u0027s what the vclcanvas code called it, and last time I checked opacity and alpha were pretty much the same thing. I did not bother to implement it in any other VCL backend because I didn\u0027t see the point, as it really matters only for vclcanvas and Skia\u0027s Vulkan drawing, but feel free to add it wherever you feel like. Also, your bailing out on fAlpha !\u003d 1.0 breaks the Skia handling of it.\n\nThe name is not important, just wanted to mention it.\nI did AFAIK not add anything that did not also get tested the same way in the next method called. If that is an error, can you point out to the specific code where this is wrong, please? I will happily change that, of course.\n \n\u003e As for the conversion of a simple virtual method on a path to an expensive call to an ugly fragile hack and considering it an improvement, that\u0027s so awfully clueless that I\u0027m not even going to deride it.\n\nA side effect and not soo urgent, main point is that HasFastDrawTransformedBitmap() is not needed at all, see above.\n\n\u003e Finally, this all makes me wonder whether and how much you tested this, particularly WRT to tdf#138068. This doesn\u0027t seem to regress as badly as I remember tdf#138068 did, but I can still subjectively see worse result with GDI (tearing when scrolling) and with Gtk3 if I scroll a bit down to see all 6 images and then just hold a key to type into a textbox, I do not see the text updated until I release the key (which shows that the Cairo version of DrawTransformedBitmap() performs worse than DrawBitmap(), since without this change that works fine). That also means that HasFastDrawTransformedBitmap() returning false for at least these is correct.\n\nI tested with creating some own examples, and debugging these to see that the code is used and buffering in cairo backend works, as I wrote. I did not test with the mentioned task-IDs, I just did not have them, you did not yet mention them, so I had no specific stuff that would need testing here.\n\n\u003e \u003e from my POV in those cases choosing possible runtime speed over complexity is not always preferable.\n\u003e \n\u003e I assume that\u0027s not what you meant to write, but it\u0027s a funny coincidence that you did.\n\nWhy? Simplicity and simple concepts are a main point in an OpenSource project from my POV, it prevents errors and does not shreak back people by shear complexity, as we currently do.\n \n\u003e Anyways, in short this whole commit is a broken confused nonsense, and, unless you have any questions, I am going to revert it.\n\nI would not choose that wording, but I see what you mean :-) Indeed I missed that speed-aspect as you mention. But as can be seen, that stuff needs work and discussion - we should more check together what to do.\n\nI would suggest:\n- revert this one\n- remove HasFastDrawTransformedBitmap, decide system-specific stuff inside system-specific renderer (in this case Skia)\n- Add ImplementsFastDrawTransformedBitmap as used here due to needed in canvashelper - hopefully for limited time\n\n- maybe: start reducing Bitamp draw methods at OutputDevice\n- maybe: also do this with line/poly painting\n\nWhat do you think?\n\nI was definitely too fast with this one, but I am happy to have started a discussion and I hope we can cleanup some stuff here!\n\nAll this is old but currently used code, in the future it would be better to have that in backend/system-dependent renderers - these will do system-dependent decisions in system-dependent places then anyways - so this is a good preparation to then re-use as much as possible :-)\nAnd will be safer/more stable, too...",
      "parentUuid": "d868cf23_45ec09f2",
      "revId": "7e5af164b7d293dd410710bed411e1ca64bbecf7",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}