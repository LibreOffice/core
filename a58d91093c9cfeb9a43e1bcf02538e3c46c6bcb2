{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "71c55b03_430c9ae8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-05-12T20:42:38Z",
      "side": 1,
      "message": "A very massive change ... do you think this approach makes sense?",
      "revId": "a58d91093c9cfeb9a43e1bcf02538e3c46c6bcb2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "780a59c4_5e942519",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-05-13T20:51:03Z",
      "side": 1,
      "message": "You need to be careful with this change... Make sure you are not introducing a circular reference somewhere not-so-obvious...  Also, why use rtl::Reference instead of something like std::shared_ptr?  With the latter, you could also use std::weak_ptr in places where it makes sense.\n\nAlso, you are removing forward declarations in lots n lots of places. I personally think that\u0027s a bad build hygiene though I know many of you don\u0027t care about build times these days... (I do, but whatever).\n\nBeyond that, I can\u0027t really offer any better approach.  But I feel like this change is way bigger than it needs to be...  Isn\u0027t there a simpler approach to this?",
      "parentUuid": "71c55b03_430c9ae8",
      "revId": "a58d91093c9cfeb9a43e1bcf02538e3c46c6bcb2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80713656_5f95f5a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-05-13T22:45:58Z",
      "side": 1,
      "message": "Thank you for the review!\n\n\u003e You need to be careful with this change... Make sure you are not introducing a circular reference somewhere not-so-obvious...\n\nYou are definitely right! I knew that, and I see that the life cycle is very complicated, such as I have to debug and fix the cycles.\n\n\u003e why use rtl::Reference instead of something like std::shared_ptr?  With the latter, you could also use std::weak_ptr in places where it makes sense.\n\nFirst of all, because it allows me to use the existing clang plugin to find places that create the objects on stack, which, mixed with smart pointers, breaks ctack. Likewise, there are places where unique_ptrs were used - all needed unification, and the plugin helped a lot. However, I suppose I should create a utility factory function creating the smart pointer, and hide the ctors. That would allow to make sure all instances are wrapped into refcounted smart objects... If only not the friends.\n\n\u003e Also, you are removing forward declarations in lots n lots of places. I personally think that\u0027s a bad build hygiene though I know many of you don\u0027t care about build times these days...\n\nThis sounded a bit undeserved. I myself replace includes with forward declarations right and left. But here I have to use the smart pointer from the header, and can\u0027t use forward declarations.\n\n\u003e But I feel like this change is way bigger than it needs to be...  Isn\u0027t there a simpler approach to this?\n\nI will split it into two (still big) changes. But detaching ScDocument from shell takes tons of replacements... I would love to know if there is a better way!",
      "parentUuid": "780a59c4_5e942519",
      "revId": "a58d91093c9cfeb9a43e1bcf02538e3c46c6bcb2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e5ff30a_117023b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-05-14T01:31:57Z",
      "side": 1,
      "message": "\u003e This sounded a bit undeserved. I myself replace includes with forward declarations right and left. But here I have to use the smart pointer from the header, and can\u0027t use forward declarations.\n\nI mention this because you can still forward declare types even with smart pointers, at least with std::shared_ptr and std::unique_ptr.  Unless there is something special about rtl::Reference, I\u0027d imagine you can do the same with it as well...",
      "parentUuid": "80713656_5f95f5a0",
      "revId": "a58d91093c9cfeb9a43e1bcf02538e3c46c6bcb2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b439601b_ab5f66b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000030
      },
      "writtenOn": "2022-05-14T14:21:03Z",
      "side": 1,
      "message": "\u003e \u003e This sounded a bit undeserved. I myself replace includes with forward declarations right and left. But here I have to use the smart pointer from the header, and can\u0027t use forward declarations.\n\u003e \n\u003e I mention this because you can still forward declare types even with smart pointers, at least with std::shared_ptr and std::unique_ptr.  Unless there is something special about rtl::Reference, I\u0027d imagine you can do the same with it as well...\n\nLast bit on this topic.  You can take a look at sc/inc/types.hxx where ScMatrixRef and ScTokenRef are both forward-declared with boost::intrusive_ptr smart pointer type.  I could imagine you forward declare ScDocument here and declare your ScDocumentRef type so that you can avoid having to include document.hxx everywhere...\n\nOk. This is all I will say on this.  Good luck with this effort!",
      "parentUuid": "6e5ff30a_117023b9",
      "revId": "a58d91093c9cfeb9a43e1bcf02538e3c46c6bcb2",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}