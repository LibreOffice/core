{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1eea25e6_5dffe37c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-05-09T08:53:00Z",
      "side": 1,
      "message": "These are rather weird SwMark objects - they seem to be some kind of UNO API related cursor thing? Not directly present in the document.\n\nIf they are going to do weird stuff, then possibly we could just have a special DeleteUnoMark method that scans the array instead of relying on the sorting, that is unlikely to have an impact on normal document operations.",
      "revId": "976487b8928eb12cf0613a7ea5050aad25a4c728",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfcf0325_5f53318e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2022-05-09T10:08:59Z",
      "side": 1,
      "message": "Yes, SwUnoCursor is what you get when you need an UNO API cursor to point to a Writer document model position (or a pair of positions). These are implemented using \"marks\", which is the same \"mark\" concept as user-visible bookmarks.\n\nThis is necessary because the UNO API supports e.g. creating a cursor, going somewhere, creating a selection, marking that selection as bold -- without touching the user\u0027s cursor.\n\nFrom the commit message, I would say 1) is the correct fix and 2) is just hiding the root cause, so it would be ideal to go with 1) if there is time for it.\n\nI agree that 1) can easily lead to some mail merge performance regression (that scenario can easily lead to a large number of bookmarks).",
      "parentUuid": "1eea25e6_5dffe37c",
      "revId": "976487b8928eb12cf0613a7ea5050aad25a4c728",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b46353ba_a737ee8a",
        "filename": "sw/source/core/doc/docbm.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1309,
      "author": {
        "id": 1000083
      },
      "writtenOn": "2022-05-09T08:23:03Z",
      "side": 1,
      "message": "eh, this is an important optimisation, removing it makes some document operations a lot slower. I would rather know how m_vAllMarks managed to become un-sorted.\n\nThere are frequent calls to lcl_DebugMarks(m_vAllMarks) that should be catching anything that makes m_vAllMarks un-sorted.\n\n@quikee, @vmiklos any idea what could be doing this?",
      "revId": "976487b8928eb12cf0613a7ea5050aad25a4c728",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c853d85_7d1163e5",
        "filename": "sw/source/core/doc/docbm.cxx",
        "patchSetId": 1
      },
      "lineNbr": 1309,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2022-05-09T08:43:22Z",
      "side": 1,
      "message": "Yes, lcl_DebugMarks() asserts that these marks are sorted by their start position, we depend on that at many places. I guess the way to track this down is to find an early location where the container is still sorted, then find a later point where lcl_DebugMarks() results in an assertion failure, then binary search.",
      "parentUuid": "b46353ba_a737ee8a",
      "revId": "976487b8928eb12cf0613a7ea5050aad25a4c728",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}