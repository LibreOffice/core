{
  "comments": [
    {
      "key": {
        "uuid": "c56cf312_66812b2d",
        "filename": "sc/qa/extras/macros-test.cxx",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-11-14T06:01:48Z",
      "side": 1,
      "message": "1. As the error tells, the \u003c\u003c\u003d operator is confused which argument you are passing - it\u0027s not an OUString, but C-style array of characters. Please use OUString(\"NewCodeName\") there instead.",
      "range": {
        "startLine": 822,
        "startChar": 4,
        "endLine": 822,
        "endChar": 29
      },
      "revId": "3c685912578ff759ed70be6cf0bb0980c553e1d0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "651c79ad_9ca6717c",
        "filename": "sc/qa/extras/macros-test.cxx",
        "patchSetId": 2
      },
      "lineNbr": 829,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-11-14T06:01:48Z",
      "side": 1,
      "message": "2. xSheet here is the *same* object that you created above in line 818, for the document *before* save-and-reload. So you don\u0027t test here what you expect to test (and if save-and-reload has unloaded the old document, it should throw here).\n\nYou need to re-acquire the sheet from the *updated* xComponent, to test the correct object.\n\nNote that the intermediate xSheets object is redundant - you can create xIndex right from xDoc-\u003egetSheets().",
      "range": {
        "startLine": 829,
        "startChar": 52,
        "endLine": 829,
        "endChar": 58
      },
      "revId": "3c685912578ff759ed70be6cf0bb0980c553e1d0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d8fa54c_1ca06608",
        "filename": "sc/qa/extras/macros-test.cxx",
        "patchSetId": 2
      },
      "lineNbr": 829,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2020-11-14T11:00:55Z",
      "side": 1,
      "message": "Is there a possibility to reuse the variable names after the saveAndReload?\nBecause if I do the following, the variable will obviously be redefined.\n\nsaveAndReload(xComponent, \"\");\nCPPUNIT_ASSERT(xComponent);\n\nuno::Reference\u003csheet::XSpreadsheetDocument\u003e xDoc(xComponent, uno::UNO_QUERY_THROW);",
      "parentUuid": "651c79ad_9ca6717c",
      "range": {
        "startLine": 829,
        "startChar": 52,
        "endLine": 829,
        "endChar": 58
      },
      "revId": "3c685912578ff759ed70be6cf0bb0980c553e1d0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16be91c2_70e50d44",
        "filename": "sc/qa/extras/macros-test.cxx",
        "patchSetId": 2
      },
      "lineNbr": 829,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2020-11-14T11:15:11Z",
      "side": 1,
      "message": "You have two possibilities.\n\n1:\n\n    uno::Reference\u003clang::XComponent\u003e xComponent \u003d loadFromDesktop(\"private:factory/scalc\");\n    CPPUNIT_ASSERT(xComponent);\n\n    {\n        uno::Reference\u003csheet::XSpreadsheetDocument\u003e xDoc(xComponent, uno::UNO_QUERY_THROW);\n        uno::Reference\u003ccontainer::XIndexAccess\u003e xIndex(xDoc-\u003egetSheets(), uno::UNO_QUERY_THROW);\n        uno::Reference\u003csheet::XSpreadsheet\u003e xSheet(xIndex-\u003egetByIndex(0), uno::UNO_QUERY_THROW);\n\n        uno::Reference\u003cbeans::XPropertySet\u003e xPropsBefore(xSheet, uno::UNO_QUERY_THROW);\n        uno::Any aValue;\n        aValue \u003c\u003c\u003d OUString(\"NewCodeName\");\n        xPropsBefore-\u003esetPropertyValue(\"ScriptConfiguration\", aValue);\n    }\n\n    saveAndReload(xComponent, \"\");\n    CPPUNIT_ASSERT(xComponent);\n\n    {\n        uno::Reference\u003csheet::XSpreadsheetDocument\u003e xDoc(xComponent, uno::UNO_QUERY_THROW);\n        uno::Reference\u003ccontainer::XIndexAccess\u003e xIndex(xDoc-\u003egetSheets(), uno::UNO_QUERY_THROW);\n        uno::Reference\u003csheet::XSpreadsheet\u003e xSheet(xIndex-\u003egetByIndex(0), uno::UNO_QUERY_THROW);\n\n        OUString sCodeName;\n        uno::Reference\u003cbeans::XPropertySet\u003e xPropsAfter(xSheet, uno::UNO_QUERY_THROW);\n        xPropsAfter-\u003egetPropertyValue(\"ScriptConfiguration\") \u003e\u003e\u003d sCodeName;\n        CPPUNIT_ASSERT_EQUAL(OUString(\"NewCodeName\"), sCodeName);\n    }\n\n    css::uno::Reference\u003ccss::util::XCloseable\u003e xCloseable(xComponent, css::uno::UNO_QUERY_THROW);\n    xCloseable-\u003eclose(true);\n\n2:\n\n    uno::Reference\u003clang::XComponent\u003e xComponent \u003d loadFromDesktop(\"private:factory/scalc\");\n    CPPUNIT_ASSERT_MESSAGE(\"Failed to create the doc\", xComponent.is());\n\n    uno::Reference\u003csheet::XSpreadsheetDocument\u003e xDoc(xComponent, uno::UNO_QUERY_THROW);\n    uno::Reference\u003ccontainer::XIndexAccess\u003e xIndex(xDoc-\u003egetSheets(), uno::UNO_QUERY_THROW);\n    uno::Reference\u003csheet::XSpreadsheet\u003e xSheet(xIndex-\u003egetByIndex(0), uno::UNO_QUERY_THROW);\n\n    uno::Reference\u003cbeans::XPropertySet\u003e xPropsBefore(xSheet, uno::UNO_QUERY_THROW);\n    uno::Any aValue;\n    aValue \u003c\u003c\u003d \"NewCodeName\";\n    xPropsBefore-\u003esetPropertyValue(\"ScriptConfiguration\", aValue);\n\n    saveAndReload(xComponent, \"\");\n    CPPUNIT_ASSERT(xComponent);\n\n    xDoc.set(xComponent, uno::UNO_QUERY_THROW);\n    xIndex.set(xDoc-\u003egetSheets(), uno::UNO_QUERY_THROW);\n    xSheet.set(xIndex-\u003egetByIndex(0), uno::UNO_QUERY_THROW);\n    OUString sCodeName;\n    uno::Reference\u003cbeans::XPropertySet\u003e xPropsAfter(xSheet, uno::UNO_QUERY_THROW);\n    xPropsAfter-\u003egetPropertyValue(\"ScriptConfiguration\") \u003e\u003e\u003d sCodeName;\n    CPPUNIT_ASSERT_EQUAL(OUString(\"NewCodeName\"), sCodeName);\n\n    css::uno::Reference\u003ccss::util::XCloseable\u003e xCloseable(xComponent, css::uno::UNO_QUERY_THROW);\n    xCloseable-\u003eclose(true);\n\nThe second one reuses the same variables, while the former creates two separate scopes, so objects are destroyed when leave the scope. I prefer the former.",
      "parentUuid": "4d8fa54c_1ca06608",
      "range": {
        "startLine": 829,
        "startChar": 52,
        "endLine": 829,
        "endChar": 58
      },
      "revId": "3c685912578ff759ed70be6cf0bb0980c553e1d0",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}