{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d026d69a_1e85c819",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-03-26T08:39:53Z",
      "side": 1,
      "message": "Stephan: would you consider this an improvement (I feel it cleaner, but who knows :)), or maybe are there any problems that I do not see here? (And I don\u0027t know it P1331R2 applies here anymore after the change.)",
      "revId": "d50afe97a8d99f88860194e6a4834255c37e9472",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "844c9b6d_2c63b257",
        "filename": "include/rtl/string.hxx",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2022-03-28T06:52:36Z",
      "side": 1,
      "message": "The drawback is that buffer is now forcefully zero-initialized, loosing the opportunity to keep it uninitialized---which had the nice benefit that the consteval ctor would not compile if it failed to write to every element of buffer.  In any case, that \"TODO: drop initialization for C++20\" comment was about exactly this opportunity, and it pertained to the initialization of buffer, not to the initialization of the whole struct.",
      "revId": "d50afe97a8d99f88860194e6a4834255c37e9472",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2522241a_2df95988",
        "filename": "include/rtl/string.hxx",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-03-28T07:13:33Z",
      "side": 1,
      "message": "I was under an impression that there was something in the standard that brace-initialization *zeroes* everything after the explicitly defined values of the initial members - so it looked to me that avoiding the last array piece *should* make no difference. But the stuff is complex, and I indeed could just misunderstand it altogether ðŸ˜Š",
      "parentUuid": "844c9b6d_2c63b257",
      "revId": "d50afe97a8d99f88860194e6a4834255c37e9472",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60b8c2f8_4fc490e8",
        "filename": "include/rtl/string.hxx",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1000994
      },
      "writtenOn": "2022-03-28T09:16:23Z",
      "side": 1,
      "message": "FTR, I believe that [dcl.init.list] points to [dcl.init.aggr], where clause (5.2) discusses the initialization of not explicitly initialized element:\n\n\u003e if the element is not a reference, the element is copy-initialized from an empty initializer list (9.4.4)\n\n... which to me looks like (P1331R2) couldn\u0027t be applicable to the original initialization, *but* *possibly* it could be applicable to the new form, *if* the empty brace list after \u0027more\u0027 is removed, and the \u0027more\u0027 is made the first union element - in which case, (5.5) would apply:\n\n\u003e the first member of the union (if any) is copy-initialized from an empty initializer list\n\n(but empty initializer list, again, seems to zero-init everything not initialized explicitly ... ðŸ˜ž)",
      "parentUuid": "2522241a_2df95988",
      "revId": "d50afe97a8d99f88860194e6a4834255c37e9472",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615"
    }
  ]
}