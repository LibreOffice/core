#!/usr/bin/python
#
# This file is part of the LibreOffice project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# minimize our msgctxt in po file
# and fix up trivial missing/added newlines between msgid and msgstr

import fileinput

msgctxt = False
msgid = False
msgstr = False;

prevline = ""
lastmsgidline = ""
lastmsgstrline = ""
msgctxtline = 0
uiline = False

for line in fileinput.input():
	prevmsgid = msgid
	prevmsgstr = msgstr

        if line.startswith('"#-#-#-#-#'):
            print line,
            continue

	if line.startswith("msgctxt"):
		msgctxt = True
		msgctxtline = 0
		msgid = False
		msgstr = False
	elif line.startswith("msgid"):

                if msgctxt and not uiline:
                    if not prevline.endswith('string.text"\n') and not prevline.endswith('itemlist.text"\n'):
                        print "bad", prevline
                        raise "Disaster"
                elif msgctxt and uiline:
                    if not prevline.endswith('string.text"\n') and not prevline.endswith('stringlist.text"\n'):
                        print "bad", prevline
                        raise "Disaster"

		msgctxt = False
		msgid = True
		msgstr = False
	elif line.startswith("msgstr"):
		msgctxt = False
		msgid = False
		msgstr = True
	elif msgid and not line.startswith('"'):
		msgid = False
	elif msgstr and not line.startswith('"'):
		msgstr = False

	if prevmsgid and not msgid:
		lastmsgidline = prevline

	if prevmsgstr and not msgstr:
		lastmsgstrline = prevline

	prevline = line

        if msgctxt:
            if msgctxtline == 0:
                if not line.endswith('""\n'):
                    raise "Disaster"
            elif msgctxtline == 1:
                if line.endswith('.src\\n"\n'):
                    srcfile = line[1:-4]
                    uiline = False
                elif line.endswith('.ui\\n"\n'):
                    uiline = True
                    uifile = line[1:-4]
                    if not uifile.endswith(".ui"):
                        raise "Disaster"
                else:
                    raise "Disaster"
            elif msgctxtline == 2 and not uiline:
                if line.endswith('\\n"\n'):
                    ctxline = line[1:-4]
                    if (ctxline.startswith("STR_REDLINE_") and srcfile == 'undo.src'):
                        ctxline = ctxline.replace("STR_REDLINE_", "STR_UNDO_REDLINE_")
                    elif (ctxline.startswith("STR_LINE_") and srcfile == 'frmui.src'):
                        ctxline = ctxline.replace("STR_", "STR_FRMUI_")
                    elif (ctxline.endswith("+RID_SC_FUNC_DESCRIPTIONS_START")):
                        ctxline = ctxline[:-len("+RID_SC_FUNC_DESCRIPTIONS_START")]
                    elif (ctxline.endswith("+RID_GLOBSTR_OFFSET")):
                        ctxline = ctxline[:-len("+RID_GLOBSTR_OFFSET")]
                    print "msgctxt", '"' + ctxline + '"'
                else:
                    raise "Disaster"
            elif msgctxtline == 2 and uiline:
                if line.endswith('\\n"\n'):
                    widgetid = line[1:-4]
                else:
                    raise "Disaster"
            elif msgctxtline == 3 and uiline:
                if line.endswith('\\n"\n'):
                    typeid = line[1:-4]
                    if typeid == "tooltip_text":
                        print "msgctxt", '"' + uifile[:-3] + "|" + widgetid + "|" + typeid + '"'
                    else:
                        print "msgctxt", '"' + uifile[:-3] + "|" + widgetid + '"'
                else:
                    raise "Disaster"
            msgctxtline = msgctxtline + 1
            continue

        if prevmsgstr and not msgstr and lastmsgstrline != 'msgstr ""\n':
            if lastmsgidline.endswith('\\n"\n') and not lastmsgstrline.endswith('\\n"\n'):
	        #insert missing newlines
                print '"\\n"\n',
            elif not lastmsgidline.endswith('\\n"\n') and lastmsgstrline.endswith('\\n"\n'):
	        #insert something not a newline
                print '" "\n',

	print line,
