/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef INCLUDED_SCADDINS_INC_PRICING_HRC
#define INCLUDED_SCADDINS_INC_PRICING_HRC

#define NC_(Context, String) reinterpret_cast<char const *>(Context "\004" u8##String)

// function and parameter description
const char* PRICING_FUNCDESC_OptBarrier[] =
{
    NC_("PRICING_FUNCDESC_OptBarrier", "Pricing of a barrier option"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Spot"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Price/value of the underlying asset"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Volatility"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Annual volatility of the underlying asset"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Rate"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Interest rate (continuously compounded)"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Foreign rate"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Foreign interest rate (continuously compounded)"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Maturity"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Time to maturity of the option in years"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Strike"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Strike level of the option"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Lower barrier"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Lower barrier (set to 0 for no lower barrier)"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Upper barrier"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Upper barrier (set to 0 for no upper barrier)"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Rebate"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Amount of money paid at maturity if barrier was hit"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Put/Call"),
    NC_("PRICING_FUNCDESC_OptBarrier", "String to define if the option is a (p)ut or a (c)all"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Knock-In/Out"),
    NC_("PRICING_FUNCDESC_OptBarrier", "String to define if the option is of type knock-(i)n or knock-(o)ut"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Barrier type"),
    NC_("PRICING_FUNCDESC_OptBarrier", "String to define whether the barrier is observed (c)ontinuously or only at the (e)nd/maturity"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Greek"),
    NC_("PRICING_FUNCDESC_OptBarrier", "Optional parameter, if left out then the function simply returns the option price; if set, the function returns price sensitivities (Greeks) to one of the input parameters; possible values are (d)elta, (g)amma, (t)heta, v(e)ga, v(o)lga, v(a)nna, (r)ho, rho(f)")
};

const char* PRICING_FUNCDESC_OptTouch[] =
{
    NC_("PRICING_FUNCDESC_OptTouch", "Pricing of a touch/no-touch option"),
    NC_("PRICING_FUNCDESC_OptTouch", "Spot"),
    NC_("PRICING_FUNCDESC_OptTouch", "Price/value of the underlying asset"),
    NC_("PRICING_FUNCDESC_OptTouch", "Volatility"),
    NC_("PRICING_FUNCDESC_OptTouch", "Annual volatility of the underlying asset"),
    NC_("PRICING_FUNCDESC_OptTouch", "Rate"),
    NC_("PRICING_FUNCDESC_OptTouch", "Interest rate (continuously compounded)"),
    NC_("PRICING_FUNCDESC_OptTouch", "Foreign rate"),
    NC_("PRICING_FUNCDESC_OptTouch", "Foreign interest rate (continuously compounded)"),
    NC_("PRICING_FUNCDESC_OptTouch", "Maturity"),
    NC_("PRICING_FUNCDESC_OptTouch", "Time to maturity of the option in years"),
    NC_("PRICING_FUNCDESC_OptTouch", "Lower barrier"),
    NC_("PRICING_FUNCDESC_OptTouch", "Lower barrier (set to 0 for no lower barrier)"),
    NC_("PRICING_FUNCDESC_OptTouch", "Upper barrier"),
    NC_("PRICING_FUNCDESC_OptTouch", "Upper barrier (set to 0 for no upper barrier)"),
    NC_("PRICING_FUNCDESC_OptTouch", "Foreign/Domestic"),
    NC_("PRICING_FUNCDESC_OptTouch", "String to define if the option pays one unit of (d)omestic currency (cash or nothing) or (f)oreign currency (asset or nothing)"),
    NC_("PRICING_FUNCDESC_OptTouch", "Knock-In/Out"),
    NC_("PRICING_FUNCDESC_OptTouch", "String to define if the option is of type knock-(i)n (touch) or knock-(o)ut (no-touch)"),
    NC_("PRICING_FUNCDESC_OptTouch", "Barrier type"),
    NC_("PRICING_FUNCDESC_OptTouch", "String to define whether the barrier is observed (c)ontinuously or only at the (e)nd/maturity"),
    NC_("PRICING_FUNCDESC_OptTouch", "Greek"),
    NC_("PRICING_FUNCDESC_OptTouch", "Optional parameter, if left out then the function simply returns the option price; if set, the function returns price sensitivities (Greeks) to one of the input parameters; possible values are (d)elta, (g)amma, (t)heta, v(e)ga, v(o)lga, v(a)nna, (r)ho, rho(f)")
};

const char* PRICING_FUNCDESC_OptProbHit[] =
{
    NC_("PRICING_FUNCDESC_OptProbHit", "Probability that an asset hits a barrier assuming it follows dS/S = mu dt + vol dW"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Spot"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Price/value S of the underlying asset"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Volatility"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Annual volatility of the underlying asset"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Drift"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Parameter mu in dS/S = mu dt + vol dW"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Maturity"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Time to maturity"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Lower barrier"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Lower barrier (set to 0 for no lower barrier)"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Upper barrier"),
    NC_("PRICING_FUNCDESC_OptProbHit", "Upper barrier (set to 0 for no upper barrier)")
};

const char* PRICING_FUNCDESC_OptProbInMoney[] =
{
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Probability that an asset will at maturity end up between two barrier levels, assuming it follows dS/S = mu dt + vol dW (if the last two optional parameters (Strike, PutCall) are specified, the probability of S_T in [Strike, UpperBarrier] for a Call and S_T in [LowerBarrier, Strike] for a Put will be returned)"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Spot"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Price/value of the asset"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Volatility"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Annual volatility of the asset"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Drift"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Parameter mu from dS/S = mu dt + vol dW"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Maturity"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Time to maturity in years"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Lower barrier"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Lower barrier (set to 0 for no lower barrier)"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Upper barrier"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Upper barrier (set to 0 for no upper barrier)"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Strike"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Optional strike level"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Put/Call"),
    NC_("PRICING_FUNCDESC_OptProbInMoney", "Optional (p)ut/(c)all indicator")
};

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
