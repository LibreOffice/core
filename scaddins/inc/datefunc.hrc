/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#ifndef INCLUDED_SCADDINS_INC_PRICING_HRC
#define INCLUDED_SCADDINS_INC_PRICING_HRC

#define N_(String) (u8##String)

const char* DATE_FUNCDESC_DiffWeeks[] =
{
    N_("Calculates the number of weeks in a specific period"),
    N_("Start date"),
    N_("First day of the period"),
    N_("End date"),
    N_("Last day of the period"),
    N_("Type"),
    N_("Type of calculation: Type=0 means the time interval, Type=1 means calendar weeks.")
};

const char* DATE_FUNCDESC_DiffMonths[] =
{
    N_("Determines the number of months in a specific period."),
    N_("Start date"),
    N_("First day of the period."),
    N_("End date"),
    N_("Last day of the period."),
    N_("Type"),
    N_("Type of calculation: Type=0 means the time interval, Type=1 means calendar months.")
};

const char* DATE_FUNCDESC_DiffYears[] =
{
    N_("Calculates the number of years in a specific period."),
    N_("Start date"),
    N_("First day of the period"),
    N_("End date"),
    N_("Last day of the period"),
    N_("Type"),
    N_("Type of calculation: Type=0 means the time interval, Type=1 means calendar years.")
};

const char* DATE_FUNCDESC_IsLeapYear[] =
{
    N_("Returns 1 (TRUE) if the date is a day of a leap year, otherwise 0 (FALSE)."),
    N_("Date"),
    N_("Any day in the desired year")
};

const char* DATE_FUNCDESC_DaysInMonth[] =
{
    N_("Returns the number of days of the month in which the date entered occurs"),
    N_("Date"),
    N_("Any day in the desired month")
};

const char* DATE_FUNCDESC_DaysInYear[] =
{
    N_("Returns the number of days of the year in which the date entered occurs."),
    N_("Date"),
    N_("Any day in the desired year")
};

const char* DATE_FUNCDESC_WeeksInYear[] =
{
    N_("Returns the number of weeks of the year in which the date entered occurs"),
    N_("Date"),
    N_("Any day in the desired year")
};

const char* DATE_FUNCDESC_Rot13[] =
{
    N_("Encrypts or decrypts a text using the ROT13 algorithm"),
    N_("Text"),
    N_("Text to be encrypted or text already encrypted")
};

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
